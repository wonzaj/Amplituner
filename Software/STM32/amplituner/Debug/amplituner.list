
amplituner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a80  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001fa40  08017c40  08017c40  00027c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037680  08037680  0005012c  2**0
                  CONTENTS
  4 .ARM          00000000  08037680  08037680  0005012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08037680  08037680  0005012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037680  08037680  00047680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037684  08037684  00047684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08037688  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b14  2000012c  080377b4  0005012c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20007c40  080377b4  00057c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047c4d  00000000  00000000  0005015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069d5  00000000  00000000  00097da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002370  00000000  00000000  0009e780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002030  00000000  00000000  000a0af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000373cc  00000000  00000000  000a2b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030461  00000000  00000000  000d9eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00137ecb  00000000  00000000  0010a34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00242218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099b8  00000000  00000000  002422dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000966  00000000  00000000  0024bc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000012c 	.word	0x2000012c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017c28 	.word	0x08017c28

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000130 	.word	0x20000130
 80001fc:	08017c28 	.word	0x08017c28

08000200 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000200:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000202:	2b01      	cmp	r3, #1
	IT       LS
 8000204:	bf98      	it	ls
	BXLS     lr
 8000206:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800020c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000218:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800021e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000220:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000222:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000224:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800022e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000234:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000238:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800023c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000240:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800024a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800025c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800025e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000260:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800026a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800026c:	2b01      	cmp	r3, #1
	IT       LS
 800026e:	bf98      	it	ls
	BXLS     lr
 8000270:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000276:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000282:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002a0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002b2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002b4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002b6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002be:	4770      	bx	lr

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr
	...

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2iz>:
 8000c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c44:	d215      	bcs.n	8000c72 <__aeabi_d2iz+0x36>
 8000c46:	d511      	bpl.n	8000c6c <__aeabi_d2iz+0x30>
 8000c48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d912      	bls.n	8000c78 <__aeabi_d2iz+0x3c>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c62:	fa23 f002 	lsr.w	r0, r3, r2
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	4770      	bx	lr
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c76:	d105      	bne.n	8000c84 <__aeabi_d2iz+0x48>
 8000c78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c82:	4770      	bx	lr
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2f>:
 8000c8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c94:	bf24      	itt	cs
 8000c96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9e:	d90d      	bls.n	8000cbc <__aeabi_d2f+0x30>
 8000ca0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb4:	bf08      	it	eq
 8000cb6:	f020 0001 	biceq.w	r0, r0, #1
 8000cba:	4770      	bx	lr
 8000cbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cc0:	d121      	bne.n	8000d06 <__aeabi_d2f+0x7a>
 8000cc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc6:	bfbc      	itt	lt
 8000cc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	4770      	bxlt	lr
 8000cce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd6:	f1c2 0218 	rsb	r2, r2, #24
 8000cda:	f1c2 0c20 	rsb	ip, r2, #32
 8000cde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ce2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce6:	bf18      	it	ne
 8000ce8:	f040 0001 	orrne.w	r0, r0, #1
 8000cec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf8:	ea40 000c 	orr.w	r0, r0, ip
 8000cfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000d00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d04:	e7cc      	b.n	8000ca0 <__aeabi_d2f+0x14>
 8000d06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d0a:	d107      	bne.n	8000d1c <__aeabi_d2f+0x90>
 8000d0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d10:	bf1e      	ittt	ne
 8000d12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d1a:	4770      	bxne	lr
 8000d1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <calc_UVmeter_scale>:
//--------------------------------------------------------------


//
void calc_UVmeter_scale(void)
    {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	if(UV_meter_front_back == UV_METER_FRONT)
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <calc_UVmeter_scale+0x2c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d104      	bne.n	8000d42 <calc_UVmeter_scale+0x16>
	{
	    ADC_calc_UV_value(ADC_CHANNEL_LEFT_FRONT , ADC_CHANNEL_RIGHT_FRONT);
 8000d38:	2102      	movs	r1, #2
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f000 f80e 	bl	8000d5c <ADC_calc_UV_value>
	}
	else if(UV_meter_front_back == UV_METER_BACK)
	{
	    ADC_calc_UV_value(ADC_CHANNEL_LEFT_BACK , ADC_CHANNEL_RIGHT_BACK);
	}
    }
 8000d40:	e007      	b.n	8000d52 <calc_UVmeter_scale+0x26>
	else if(UV_meter_front_back == UV_METER_BACK)
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <calc_UVmeter_scale+0x2c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d103      	bne.n	8000d52 <calc_UVmeter_scale+0x26>
	    ADC_calc_UV_value(ADC_CHANNEL_LEFT_BACK , ADC_CHANNEL_RIGHT_BACK);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f805 	bl	8000d5c <ADC_calc_UV_value>
    }
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200037b8 	.word	0x200037b8

08000d5c <ADC_calc_UV_value>:


// Calculates mean value for selected audio channels.
void ADC_calc_UV_value(uint8_t adc_channel_left, uint8_t adc_channel_right)
    {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
	static uint32_t sum_right = 0;
	static uint32_t div_left = 1;
	static uint32_t div_right = 1;
	static uint32_t num_of_samples = 0;

	num_of_samples++;     //ilość zbieranych próbek do obliczania sredniej RMS
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <ADC_calc_UV_value+0xd8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a30      	ldr	r2, [pc, #192]	; (8000e34 <ADC_calc_UV_value+0xd8>)
 8000d74:	6013      	str	r3, [r2, #0]
	//według warunku sumować albo front albo back
	if(ADC_SamplesTEST[adc_channel_left] > 1920)     // take only positive probes
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <ADC_calc_UV_value+0xdc>)
 8000d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d7e:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000d82:	d91a      	bls.n	8000dba <ADC_calc_UV_value+0x5e>
	{
	    sum_left = sum_left + ADC_SamplesTEST[adc_channel_left] - 1919;     //minus offset from volate divader
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4a2c      	ldr	r2, [pc, #176]	; (8000e38 <ADC_calc_UV_value+0xdc>)
 8000d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <ADC_calc_UV_value+0xe0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	f2a3 737f 	subw	r3, r3, #1919	; 0x77f
 8000d98:	4a28      	ldr	r2, [pc, #160]	; (8000e3c <ADC_calc_UV_value+0xe0>)
 8000d9a:	6013      	str	r3, [r2, #0]
	    ADC_SamplesSUM[adc_channel_left] = sum_left / div_left;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <ADC_calc_UV_value+0xe0>)
 8000d9e:	6819      	ldr	r1, [r3, #0]
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <ADC_calc_UV_value+0xe4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	fbb1 f2f2 	udiv	r2, r1, r2
 8000daa:	4926      	ldr	r1, [pc, #152]	; (8000e44 <ADC_calc_UV_value+0xe8>)
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    div_left++;
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <ADC_calc_UV_value+0xe4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <ADC_calc_UV_value+0xe4>)
 8000db8:	6013      	str	r3, [r2, #0]
	}
	if(ADC_SamplesTEST[adc_channel_right] > 1920)
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <ADC_calc_UV_value+0xdc>)
 8000dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc2:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000dc6:	d91a      	bls.n	8000dfe <ADC_calc_UV_value+0xa2>
	{
	    sum_right = sum_right + ADC_SamplesTEST[adc_channel_right] - 1919;
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <ADC_calc_UV_value+0xdc>)
 8000dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <ADC_calc_UV_value+0xec>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	f2a3 737f 	subw	r3, r3, #1919	; 0x77f
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <ADC_calc_UV_value+0xec>)
 8000dde:	6013      	str	r3, [r2, #0]
	    ADC_SamplesSUM[adc_channel_right] = sum_right / div_right;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <ADC_calc_UV_value+0xec>)
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <ADC_calc_UV_value+0xf0>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	fbb1 f2f2 	udiv	r2, r1, r2
 8000dee:	4915      	ldr	r1, [pc, #84]	; (8000e44 <ADC_calc_UV_value+0xe8>)
 8000df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    div_right++;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <ADC_calc_UV_value+0xf0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <ADC_calc_UV_value+0xf0>)
 8000dfc:	6013      	str	r3, [r2, #0]
	}
	if(num_of_samples > 10000)
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <ADC_calc_UV_value+0xd8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d90e      	bls.n	8000e28 <ADC_calc_UV_value+0xcc>
	{
	    num_of_samples = 0;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <ADC_calc_UV_value+0xd8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
	    div_left = 1;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <ADC_calc_UV_value+0xe4>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
	    div_right = 1;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <ADC_calc_UV_value+0xf0>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
	    sum_left = 0;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <ADC_calc_UV_value+0xe0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
	    sum_right = 0;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <ADC_calc_UV_value+0xec>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
	}
    }
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20000148 	.word	0x20000148
 8000e38:	200057c0 	.word	0x200057c0
 8000e3c:	2000014c 	.word	0x2000014c
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000708 	.word	0x20000708
 8000e48:	20000150 	.word	0x20000150
 8000e4c:	20000004 	.word	0x20000004

08000e50 <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a0      	sub	sp, #128	; 0x80
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8000e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8000e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e76:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8000e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e7a:	085b      	lsrs	r3, r3, #1
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8000e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8000e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000e8e:	4413      	add	r3, r2
 8000e90:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8000e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e98:	e1b6      	b.n	8001208 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8000eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8000eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8000ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8000ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8000eca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8000ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8000ed6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8000edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8000ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8000ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8000eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8000ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8000efa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000efe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	1d1a      	adds	r2, r3, #4
 8000f06:	603a      	str	r2, [r7, #0]
 8000f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8000f10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000f14:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	1d1a      	adds	r2, r3, #4
 8000f1c:	603a      	str	r2, [r7, #0]
 8000f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f22:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8000f26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	1d1a      	adds	r2, r3, #4
 8000f32:	603a      	str	r2, [r7, #0]
 8000f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f38:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8000f3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000f40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	603a      	str	r2, [r7, #0]
 8000f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4e:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8000f52:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000f56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8000f62:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000f66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8000f72:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000f76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8000f82:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000f86:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8000f92:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f9c:	1d1a      	adds	r2, r3, #4
 8000f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8000fa8:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb2:	1d1a      	adds	r2, r3, #4
 8000fb4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8000fbe:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fc8:	1d1a      	adds	r2, r3, #4
 8000fca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8000fd4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fde:	1d1a      	adds	r2, r3, #4
 8000fe0:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8000fea:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff6:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8000ffa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ffe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001006:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800100a:	ed97 7a04 	vldr	s14, [r7, #16]
 800100e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001016:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800101a:	ed97 7a05 	vldr	s14, [r7, #20]
 800101e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001026:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800102a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800102c:	1d1a      	adds	r2, r3, #4
 800102e:	673a      	str	r2, [r7, #112]	; 0x70
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001036:	1d1a      	adds	r2, r3, #4
 8001038:	673a      	str	r2, [r7, #112]	; 0x70
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800103e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001042:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800104e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001052:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800105e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001062:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800106a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800106e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001072:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800107e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001080:	1d1a      	adds	r2, r3, #4
 8001082:	677a      	str	r2, [r7, #116]	; 0x74
 8001084:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001088:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8001094:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001096:	1d1a      	adds	r2, r3, #4
 8001098:	677a      	str	r2, [r7, #116]	; 0x74
 800109a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800109e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80010a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a6:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80010aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80010b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80010ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80010be:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80010c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80010ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80010d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80010da:	edd7 7a02 	vldr	s15, [r7, #8]
 80010de:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80010e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80010ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010ec:	1d1a      	adds	r2, r3, #4
 80010ee:	67ba      	str	r2, [r7, #120]	; 0x78
 80010f0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80010f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001102:	1d1a      	adds	r2, r3, #4
 8001104:	67ba      	str	r2, [r7, #120]	; 0x78
 8001106:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800110a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800110e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001112:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8001116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001118:	1d1a      	adds	r2, r3, #4
 800111a:	673a      	str	r2, [r7, #112]	; 0x70
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001122:	1d1a      	adds	r2, r3, #4
 8001124:	673a      	str	r2, [r7, #112]	; 0x70
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 800112a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800112e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001136:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800113a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800113e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800114a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800114e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001156:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800115a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800115e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 800116a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800116c:	1d1a      	adds	r2, r3, #4
 800116e:	677a      	str	r2, [r7, #116]	; 0x74
 8001170:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001174:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001182:	1d1a      	adds	r2, r3, #4
 8001184:	677a      	str	r2, [r7, #116]	; 0x74
 8001186:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800118a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800118e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001192:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 8001196:	edd7 7a04 	vldr	s15, [r7, #16]
 800119a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800119e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80011a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011aa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80011ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80011b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80011c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80011d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011d8:	1d1a      	adds	r2, r3, #4
 80011da:	67ba      	str	r2, [r7, #120]	; 0x78
 80011dc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80011e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80011ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011ee:	1d1a      	adds	r2, r3, #4
 80011f0:	67ba      	str	r2, [r7, #120]	; 0x78
 80011f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80011f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 8001202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001204:	3b01      	subs	r3, #1
 8001206:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f ae45 	bne.w	8000e9a <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8001210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001212:	b299      	uxth	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	2302      	movs	r3, #2
 800121a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800121c:	f014 f9f6 	bl	801560c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8001220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001222:	b299      	uxth	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	2302      	movs	r3, #2
 800122a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800122c:	f014 f9ee 	bl	801560c <arm_radix8_butterfly_f32>
}
 8001230:	bf00      	nop
 8001232:	3780      	adds	r7, #128	; 0x80
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b0ac      	sub	sp, #176	; 0xb0
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	085b      	lsrs	r3, r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800124e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	4413      	add	r3, r2
 8001258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800125c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001266:	4413      	add	r3, r2
 8001268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800126c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001276:	4413      	add	r3, r2
 8001278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8001280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001284:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800128a:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800128c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001290:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8001292:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001296:	3b04      	subs	r3, #4
 8001298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800129c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012a0:	3b04      	subs	r3, #4
 80012a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80012a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012aa:	3b04      	subs	r3, #4
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80012b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80012ba:	4413      	add	r3, r2
 80012bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80012cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80012d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80012d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012dc:	085b      	lsrs	r3, r3, #1
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80012e6:	2304      	movs	r3, #4
 80012e8:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80012ea:	2306      	movs	r3, #6
 80012ec:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001300:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	ed93 7a00 	vldr	s14, [r3]
 800130a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3304      	adds	r3, #4
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001326:	3304      	adds	r3, #4
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001330:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	3304      	adds	r3, #4
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001340:	3304      	adds	r3, #4
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800134e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001352:	3304      	adds	r3, #4
 8001354:	ed93 7a00 	vldr	s14, [r3]
 8001358:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800135c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001364:	3304      	adds	r3, #4
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800137e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800139e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ae:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80013b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013b6:	3304      	adds	r3, #4
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013c8:	3304      	adds	r3, #4
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80013d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013da:	3304      	adds	r3, #4
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80013e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013ec:	3304      	adds	r3, #4
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80013fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800140a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800141a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800141e:	ed93 7a00 	vldr	s14, [r3]
 8001422:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	1d1a      	adds	r2, r3, #4
 8001436:	603a      	str	r2, [r7, #0]
 8001438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001444:	3304      	adds	r3, #4
 8001446:	ed93 7a00 	vldr	s14, [r3]
 800144a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800144e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001456:	3304      	adds	r3, #4
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	1d1a      	adds	r2, r3, #4
 8001460:	603a      	str	r2, [r7, #0]
 8001462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001466:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 800146a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800146e:	1d1a      	adds	r2, r3, #4
 8001470:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001476:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800147c:	1d1a      	adds	r2, r3, #4
 800147e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001484:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800148a:	1d1a      	adds	r2, r3, #4
 800148c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001498:	1d1a      	adds	r2, r3, #4
 800149a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800149e:	6a3a      	ldr	r2, [r7, #32]
 80014a0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80014a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014a6:	1d1a      	adds	r2, r3, #4
 80014a8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80014b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014b4:	1d1a      	adds	r2, r3, #4
 80014b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80014be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80014c6:	4413      	add	r3, r2
 80014c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80014cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80014d4:	4413      	add	r3, r2
 80014d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80014da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014e2:	4413      	add	r3, r2
 80014e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80014e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014ec:	3b02      	subs	r3, #2
 80014ee:	085b      	lsrs	r3, r3, #1
 80014f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014f4:	e31a      	b.n	8001b2c <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	ed93 7a00 	vldr	s14, [r3]
 80014fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001508:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800151e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3304      	adds	r3, #4
 8001526:	ed93 7a00 	vldr	s14, [r3]
 800152a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800152e:	3304      	adds	r3, #4
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001538:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3304      	adds	r3, #4
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001548:	3304      	adds	r3, #4
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001556:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800155a:	3304      	adds	r3, #4
 800155c:	ed93 7a00 	vldr	s14, [r3]
 8001560:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800156c:	3304      	adds	r3, #4
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001576:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 800157a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001586:	ee37 7a67 	vsub.f32	s14, s14, s15
 800158a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001596:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 800159a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80015a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b6:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 80015ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015be:	3304      	adds	r3, #4
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80015c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015d0:	3304      	adds	r3, #4
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015da:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80015de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015e2:	3304      	adds	r3, #4
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80015ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80015f4:	3304      	adds	r3, #4
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fe:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800160e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001612:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161e:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001626:	ed93 7a00 	vldr	s14, [r3]
 800162a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800162e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	1d1a      	adds	r2, r3, #4
 800163e:	603a      	str	r2, [r7, #0]
 8001640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001644:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001648:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800164c:	3304      	adds	r3, #4
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001656:	ee37 7a27 	vadd.f32	s14, s14, s15
 800165a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800165e:	3304      	adds	r3, #4
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	603a      	str	r2, [r7, #0]
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001676:	3b04      	subs	r3, #4
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001680:	3b04      	subs	r3, #4
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800168e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001692:	3b04      	subs	r3, #4
 8001694:	ed93 7a00 	vldr	s14, [r3]
 8001698:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800169c:	3b04      	subs	r3, #4
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80016aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 80016c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016c6:	ed93 7a00 	vldr	s14, [r3]
 80016ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80016da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80016fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001712:	3b04      	subs	r3, #4
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001720:	3b04      	subs	r3, #4
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800172e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001732:	3b04      	subs	r3, #4
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800173c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001740:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001744:	3b04      	subs	r3, #4
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001752:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800175e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800176e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001776:	ed93 7a00 	vldr	s14, [r3]
 800177a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001786:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178e:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001796:	3b04      	subs	r3, #4
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017a0:	3b04      	subs	r3, #4
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017b2:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 80017b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d2:	1f1a      	subs	r2, r3, #4
 80017d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80017e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017e4:	3b04      	subs	r3, #4
 80017e6:	ed93 7a00 	vldr	s14, [r3]
 80017ea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017f6:	3b04      	subs	r3, #4
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001800:	1f1a      	subs	r2, r3, #4
 8001802:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 800180e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001812:	1d1a      	adds	r2, r3, #4
 8001814:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 800181c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001820:	1d1a      	adds	r2, r3, #4
 8001822:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 800182a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800182e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001836:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800183a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800183e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800184a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800184e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 800185a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800185e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001866:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 800186a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186e:	1d1a      	adds	r2, r3, #4
 8001870:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001874:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001878:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001888:	1d1a      	adds	r2, r3, #4
 800188a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800188e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001892:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 800189e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018a2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 80018ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018b2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80018b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 80018be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018c2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 80018ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80018d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018da:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 80018de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018e2:	1f1a      	subs	r2, r3, #4
 80018e4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80018e8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80018ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 80018f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018fc:	1f1a      	subs	r2, r3, #4
 80018fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001902:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001906:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800190a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190e:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8001912:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800191a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8001922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800192a:	4413      	add	r3, r2
 800192c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8001930:	edd7 7a07 	vldr	s15, [r7, #28]
 8001934:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8001940:	edd7 7a08 	vldr	s15, [r7, #32]
 8001944:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8001950:	edd7 7a08 	vldr	s15, [r7, #32]
 8001954:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8001960:	edd7 7a07 	vldr	s15, [r7, #28]
 8001964:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 8001970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001974:	1d1a      	adds	r2, r3, #4
 8001976:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800197a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800197e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001986:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 800198a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800198e:	1d1a      	adds	r2, r3, #4
 8001990:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001994:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001998:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 80019a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019a8:	eef1 7a67 	vneg.f32	s15, s15
 80019ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 80019b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 80019c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019cc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80019d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 80019e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019ec:	1f1a      	subs	r2, r3, #4
 80019ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80019f2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80019f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fe:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8001a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a06:	1f1a      	subs	r2, r3, #4
 8001a08:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001a0c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a10:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a18:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 8001a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8001a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8001a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8001a3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a3e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8001a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a56:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8001a5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a5e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8001a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a76:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8001a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a7e:	1d1a      	adds	r2, r3, #4
 8001a80:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001a84:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001a88:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a90:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8001a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a98:	1d1a      	adds	r2, r3, #4
 8001a9a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001a9e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001aa2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aaa:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8001aae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8001abe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8001ace:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8001ade:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ae2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 8001aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001af2:	1f1a      	subs	r2, r3, #4
 8001af4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001af8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001afc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b04:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8001b08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b0c:	1f1a      	subs	r2, r3, #4
 8001b0e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8001b12:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b16:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8001b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f ace0 	bne.w	80014f6 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b48:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	ed93 7a00 	vldr	s14, [r3]
 8001b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3304      	adds	r3, #4
 8001b66:	ed93 7a00 	vldr	s14, [r3]
 8001b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b6e:	3304      	adds	r3, #4
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b88:	3304      	adds	r3, #4
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bac:	3304      	adds	r3, #4
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001be6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001bfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bfe:	3304      	adds	r3, #4
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c10:	3304      	adds	r3, #4
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c22:	3304      	adds	r3, #4
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001c2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c34:	3304      	adds	r3, #4
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c46:	ed93 7a00 	vldr	s14, [r3]
 8001c4a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5e:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c66:	ed93 7a00 	vldr	s14, [r3]
 8001c6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	1d1a      	adds	r2, r3, #4
 8001c7e:	603a      	str	r2, [r7, #0]
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001c88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	1d1a      	adds	r2, r3, #4
 8001ca8:	603a      	str	r2, [r7, #0]
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8001cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001cba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001cc2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cc6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001cd2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001cd6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001ce2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ce6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001cf2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cf6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d06:	1d1a      	adds	r2, r3, #4
 8001d08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001d0c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001d10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d20:	1d1a      	adds	r2, r3, #4
 8001d22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001d26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001d2a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d32:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8001d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001d46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001d66:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d7a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d82:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d8a:	1d1a      	adds	r2, r3, #4
 8001d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001d94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001da4:	1d1a      	adds	r2, r3, #4
 8001da6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001daa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8001dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001dda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dde:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dfe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e0e:	1d1a      	adds	r2, r3, #4
 8001e10:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001e14:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e28:	1d1a      	adds	r2, r3, #4
 8001e2a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001e2e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001e32:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3a:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8001e3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e42:	b299      	uxth	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	2304      	movs	r3, #4
 8001e4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001e4c:	f013 fbde 	bl	801560c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8001e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e54:	b299      	uxth	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e5e:	f013 fbd5 	bl	801560c <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8001e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e66:	b299      	uxth	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e70:	f013 fbcc 	bl	801560c <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8001e74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	2304      	movs	r3, #4
 8001e80:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001e82:	f013 fbc3 	bl	801560c <arm_radix8_butterfly_f32>
}
 8001e86:	bf00      	nop
 8001e88:	37b0      	adds	r7, #176	; 0xb0
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b088      	sub	sp, #32
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d117      	bne.n	8001ee0 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e00d      	b.n	8001ed8 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	eef1 7a67 	vneg.f32	s15, s15
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3ed      	bcc.n	8001ebc <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee6:	d040      	beq.n	8001f6a <arm_cfft_f32+0xdc>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eee:	d845      	bhi.n	8001f7c <arm_cfft_f32+0xee>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef6:	d033      	beq.n	8001f60 <arm_cfft_f32+0xd2>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001efe:	d83d      	bhi.n	8001f7c <arm_cfft_f32+0xee>
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d026      	beq.n	8001f56 <arm_cfft_f32+0xc8>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d835      	bhi.n	8001f7c <arm_cfft_f32+0xee>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f16:	d028      	beq.n	8001f6a <arm_cfft_f32+0xdc>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1e:	d82d      	bhi.n	8001f7c <arm_cfft_f32+0xee>
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f26:	d01b      	beq.n	8001f60 <arm_cfft_f32+0xd2>
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2e:	d825      	bhi.n	8001f7c <arm_cfft_f32+0xee>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d00f      	beq.n	8001f56 <arm_cfft_f32+0xc8>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d81f      	bhi.n	8001f7c <arm_cfft_f32+0xee>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b40      	cmp	r3, #64	; 0x40
 8001f40:	d013      	beq.n	8001f6a <arm_cfft_f32+0xdc>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d819      	bhi.n	8001f7c <arm_cfft_f32+0xee>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d003      	beq.n	8001f56 <arm_cfft_f32+0xc8>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d005      	beq.n	8001f60 <arm_cfft_f32+0xd2>
 8001f54:	e012      	b.n	8001f7c <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7fe ff79 	bl	8000e50 <arm_cfft_radix8by2_f32>
        break;
 8001f5e:	e00d      	b.n	8001f7c <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff f968 	bl	8001238 <arm_cfft_radix8by4_f32>
        break;
 8001f68:	e008      	b.n	8001f7c <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	b299      	uxth	r1, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	2301      	movs	r3, #1
 8001f74:	68b8      	ldr	r0, [r7, #8]
 8001f76:	f013 fb49 	bl	801560c <arm_radix8_butterfly_f32>
        break;
 8001f7a:	bf00      	nop
    }

    if( bitReverseFlag )
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8999      	ldrh	r1, [r3, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68b8      	ldr	r0, [r7, #8]
 8001f8e:	f7fe f937 	bl	8000200 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d130      	bne.n	8001ffa <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001faa:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e01c      	b.n	8001ff2 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1d1a      	adds	r2, r3, #4
 8001fbc:	61ba      	str	r2, [r7, #24]
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fca:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	eeb1 7a67 	vneg.f32	s14, s15
 8001fd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d3de      	bcc.n	8001fb8 <arm_cfft_f32+0x12a>
        }
    }
}
 8001ffa:	bf00      	nop
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <stage_rfft_f32>:
#include <Adc/arm_math.h>

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8002002:	b480      	push	{r7}
 8002004:	b095      	sub	sp, #84	; 0x54
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	3b01      	subs	r3, #1
 8002022:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8002024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800202a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8002036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203e:	1d1a      	adds	r2, r3, #4
 8002040:	64ba      	str	r2, [r7, #72]	; 0x48
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8002046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002048:	1d1a      	adds	r2, r3, #4
 800204a:	64ba      	str	r2, [r7, #72]	; 0x48
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8002050:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002054:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8002060:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002064:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206c:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8002070:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002074:	edd7 7a08 	vldr	s15, [r7, #32]
 8002078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	1d1a      	adds	r2, r3, #4
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208a:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800208e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002092:	edd7 7a08 	vldr	s15, [r7, #32]
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	1d1a      	adds	r2, r3, #4
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a8:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80020ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	4413      	add	r3, r2
 80020b4:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80020b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b8:	3308      	adds	r3, #8
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80020c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80020c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80020ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80020d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80020de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e0:	1d1a      	adds	r2, r3, #4
 80020e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80020e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80020ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80020f8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80020fc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002104:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8002108:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800210c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002114:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8002118:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800211c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002124:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8002128:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800212c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002134:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8002138:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800213c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002148:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800214c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002154:	edd7 7a07 	vldr	s15, [r7, #28]
 8002158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800215c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1d1a      	adds	r2, r3, #4
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002176:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800217a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800217e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002182:	edd7 7a06 	vldr	s15, [r7, #24]
 8002186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218a:	edd7 7a05 	vldr	s15, [r7, #20]
 800218e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1d1a      	adds	r2, r3, #4
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800219c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a0:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80021a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a6:	3308      	adds	r3, #8
 80021a8:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80021aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ac:	3b08      	subs	r3, #8
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80021b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b2:	3b01      	subs	r3, #1
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while(k > 0u);
 80021b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f47f af7f 	bne.w	80020bc <stage_rfft_f32+0xba>
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	3754      	adds	r7, #84	; 0x54
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b095      	sub	sp, #84	; 0x54
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80021ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80021fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fc:	3308      	adds	r3, #8
 80021fe:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8002200:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002204:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1d1a      	adds	r2, r3, #4
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800221a:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800221e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002222:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1d1a      	adds	r2, r3, #4
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002238:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800223c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	4413      	add	r3, r2
 8002244:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8002246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002248:	3308      	adds	r3, #8
 800224a:	647b      	str	r3, [r7, #68]	; 0x44

   while(k > 0u)
 800224c:	e07c      	b.n	8002348 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800224e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8002254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800225a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8002260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002268:	1d1a      	adds	r2, r3, #4
 800226a:	64ba      	str	r2, [r7, #72]	; 0x48
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8002270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002272:	1d1a      	adds	r2, r3, #4
 8002274:	64ba      	str	r2, [r7, #72]	; 0x48
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800227a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800227e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002286:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800228a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800228e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002296:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800229a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800229e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80022aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80022ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80022ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80022be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c6:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80022ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80022ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80022da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80022de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80022e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1d1a      	adds	r2, r3, #4
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002304:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8002308:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800230c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002314:	edd7 7a05 	vldr	s15, [r7, #20]
 8002318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1d1a      	adds	r2, r3, #4
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800232e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002332:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8002336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002338:	3308      	adds	r3, #8
 800233a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800233c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233e:	3b08      	subs	r3, #8
 8002340:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8002342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002344:	3b01      	subs	r3, #1
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(k > 0u)
 8002348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f af7f 	bne.w	800224e <merge_rfft_f32+0x82>
   }

}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3754      	adds	r7, #84	; 0x54
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8a1b      	ldrh	r3, [r3, #16]
 8002374:	085b      	lsrs	r3, r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00b      	beq.n	800239a <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff ff20 	bl	80021cc <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	2301      	movs	r3, #1
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff fd7b 	bl	8001e8e <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8002398:	e00a      	b.n	80023b0 <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800239a:	78fa      	ldrb	r2, [r7, #3]
 800239c:	2301      	movs	r3, #1
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f7ff fd74 	bl	8001e8e <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff fe29 	bl	8002002 <stage_rfft_f32>
}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	887a      	ldrh	r2, [r7, #2]
 80023da:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e4:	d023      	beq.n	800242e <arm_rfft_fast_init_f32+0x76>
 80023e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ea:	f300 808c 	bgt.w	8002506 <arm_rfft_fast_init_f32+0x14e>
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f2:	d02a      	beq.n	800244a <arm_rfft_fast_init_f32+0x92>
 80023f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f8:	f300 8085 	bgt.w	8002506 <arm_rfft_fast_init_f32+0x14e>
 80023fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002400:	d031      	beq.n	8002466 <arm_rfft_fast_init_f32+0xae>
 8002402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002406:	dc7e      	bgt.n	8002506 <arm_rfft_fast_init_f32+0x14e>
 8002408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240c:	d039      	beq.n	8002482 <arm_rfft_fast_init_f32+0xca>
 800240e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002412:	dc78      	bgt.n	8002506 <arm_rfft_fast_init_f32+0x14e>
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d042      	beq.n	800249e <arm_rfft_fast_init_f32+0xe6>
 8002418:	2b80      	cmp	r3, #128	; 0x80
 800241a:	dc74      	bgt.n	8002506 <arm_rfft_fast_init_f32+0x14e>
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d04b      	beq.n	80024b8 <arm_rfft_fast_init_f32+0x100>
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	dc70      	bgt.n	8002506 <arm_rfft_fast_init_f32+0x14e>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d061      	beq.n	80024ec <arm_rfft_fast_init_f32+0x134>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d052      	beq.n	80024d2 <arm_rfft_fast_init_f32+0x11a>
 800242c:	e06b      	b.n	8002506 <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8002434:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4a38      	ldr	r2, [pc, #224]	; (800251c <arm_rfft_fast_init_f32+0x164>)
 800243a:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4a38      	ldr	r2, [pc, #224]	; (8002520 <arm_rfft_fast_init_f32+0x168>)
 8002440:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a37      	ldr	r2, [pc, #220]	; (8002524 <arm_rfft_fast_init_f32+0x16c>)
 8002446:	615a      	str	r2, [r3, #20]
    break;
 8002448:	e060      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  case 1024u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002450:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4a34      	ldr	r2, [pc, #208]	; (8002528 <arm_rfft_fast_init_f32+0x170>)
 8002456:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <arm_rfft_fast_init_f32+0x174>)
 800245c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a33      	ldr	r2, [pc, #204]	; (8002530 <arm_rfft_fast_init_f32+0x178>)
 8002462:	615a      	str	r2, [r3, #20]
    break;
 8002464:	e052      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  case 512u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800246c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4a30      	ldr	r2, [pc, #192]	; (8002534 <arm_rfft_fast_init_f32+0x17c>)
 8002472:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4a30      	ldr	r2, [pc, #192]	; (8002538 <arm_rfft_fast_init_f32+0x180>)
 8002478:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2f      	ldr	r2, [pc, #188]	; (800253c <arm_rfft_fast_init_f32+0x184>)
 800247e:	615a      	str	r2, [r3, #20]
    break;
 8002480:	e044      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  case 256u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8002488:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4a2c      	ldr	r2, [pc, #176]	; (8002540 <arm_rfft_fast_init_f32+0x188>)
 800248e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4a2c      	ldr	r2, [pc, #176]	; (8002544 <arm_rfft_fast_init_f32+0x18c>)
 8002494:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2b      	ldr	r2, [pc, #172]	; (8002548 <arm_rfft_fast_init_f32+0x190>)
 800249a:	615a      	str	r2, [r3, #20]
    break;
 800249c:	e036      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  case 128u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	22d0      	movs	r2, #208	; 0xd0
 80024a2:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <arm_rfft_fast_init_f32+0x194>)
 80024a8:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <arm_rfft_fast_init_f32+0x198>)
 80024ae:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a28      	ldr	r2, [pc, #160]	; (8002554 <arm_rfft_fast_init_f32+0x19c>)
 80024b4:	615a      	str	r2, [r3, #20]
    break;
 80024b6:	e029      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  case 64u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2238      	movs	r2, #56	; 0x38
 80024bc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4a25      	ldr	r2, [pc, #148]	; (8002558 <arm_rfft_fast_init_f32+0x1a0>)
 80024c2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <arm_rfft_fast_init_f32+0x1a4>)
 80024c8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a24      	ldr	r2, [pc, #144]	; (8002560 <arm_rfft_fast_init_f32+0x1a8>)
 80024ce:	615a      	str	r2, [r3, #20]
    break;
 80024d0:	e01c      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  case 32u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2230      	movs	r2, #48	; 0x30
 80024d6:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <arm_rfft_fast_init_f32+0x1ac>)
 80024dc:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4a21      	ldr	r2, [pc, #132]	; (8002568 <arm_rfft_fast_init_f32+0x1b0>)
 80024e2:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a21      	ldr	r2, [pc, #132]	; (800256c <arm_rfft_fast_init_f32+0x1b4>)
 80024e8:	615a      	str	r2, [r3, #20]
    break;
 80024ea:	e00f      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2214      	movs	r2, #20
 80024f0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <arm_rfft_fast_init_f32+0x1b8>)
 80024f6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <arm_rfft_fast_init_f32+0x1bc>)
 80024fc:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <arm_rfft_fast_init_f32+0x1c0>)
 8002502:	615a      	str	r2, [r3, #20]
    break;
 8002504:	e002      	b.n	800250c <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8002506:	23ff      	movs	r3, #255	; 0xff
 8002508:	73fb      	strb	r3, [r7, #15]
    break;
 800250a:	bf00      	nop
  }

  return (status);
 800250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	08032df0 	.word	0x08032df0
 8002520:	08023fe8 	.word	0x08023fe8
 8002524:	0802a158 	.word	0x0802a158
 8002528:	08030ad8 	.word	0x08030ad8
 800252c:	0802e9d8 	.word	0x0802e9d8
 8002530:	08028158 	.word	0x08028158
 8002534:	080355b0 	.word	0x080355b0
 8002538:	08031df0 	.word	0x08031df0
 800253c:	08035930 	.word	0x08035930
 8002540:	08036d30 	.word	0x08036d30
 8002544:	0802e158 	.word	0x0802e158
 8002548:	08034db0 	.word	0x08034db0
 800254c:	080372a0 	.word	0x080372a0
 8002550:	080319f0 	.word	0x080319f0
 8002554:	08036930 	.word	0x08036930
 8002558:	080280e8 	.word	0x080280e8
 800255c:	08034bb0 	.word	0x08034bb0
 8002560:	080370a0 	.word	0x080370a0
 8002564:	08031990 	.word	0x08031990
 8002568:	080309d8 	.word	0x080309d8
 800256c:	08027fe8 	.word	0x08027fe8
 8002570:	080318e8 	.word	0x080318e8
 8002574:	0802e958 	.word	0x0802e958
 8002578:	08031910 	.word	0x08031910

0800257c <calc_FFT_scale>:
// Functions definitions
//--------------------------------------------------------------

//
void calc_FFT_scale(void)
    {
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
	static uint16_t i = 0;

	switch(FFT_channel_source)
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <calc_FFT_scale+0x9c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	2b03      	cmp	r3, #3
 8002588:	d82e      	bhi.n	80025e8 <calc_FFT_scale+0x6c>
 800258a:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <calc_FFT_scale+0x14>)
 800258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025b3 	.word	0x080025b3
 8002598:	080025c5 	.word	0x080025c5
 800259c:	080025d7 	.word	0x080025d7
	{
	    case FFT_front_left:
		ADC_In[i] = ADC_SamplesTEST[1];
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <calc_FFT_scale+0xa0>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <calc_FFT_scale+0xa4>)
 80025a8:	8859      	ldrh	r1, [r3, #2]
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <calc_FFT_scale+0xa8>)
 80025ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	    break;
 80025b0:	e01b      	b.n	80025ea <calc_FFT_scale+0x6e>
	    case FFT_front_right:
		ADC_In[i] = ADC_SamplesTEST[2];
 80025b2:	4b1a      	ldr	r3, [pc, #104]	; (800261c <calc_FFT_scale+0xa0>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <calc_FFT_scale+0xa4>)
 80025ba:	8899      	ldrh	r1, [r3, #4]
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <calc_FFT_scale+0xa8>)
 80025be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	    break;
 80025c2:	e012      	b.n	80025ea <calc_FFT_scale+0x6e>
	    case FFT_back_left:
		ADC_In[i] = ADC_SamplesTEST[3];
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <calc_FFT_scale+0xa0>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <calc_FFT_scale+0xa4>)
 80025cc:	88d9      	ldrh	r1, [r3, #6]
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <calc_FFT_scale+0xa8>)
 80025d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	    break;
 80025d4:	e009      	b.n	80025ea <calc_FFT_scale+0x6e>
	    case FFT_back_right:
		ADC_In[i] = ADC_SamplesTEST[0];
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <calc_FFT_scale+0xa0>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <calc_FFT_scale+0xa4>)
 80025de:	8819      	ldrh	r1, [r3, #0]
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <calc_FFT_scale+0xa8>)
 80025e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	    break;
 80025e6:	e000      	b.n	80025ea <calc_FFT_scale+0x6e>
	    default:
		break;
 80025e8:	bf00      	nop
	}

	i++;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <calc_FFT_scale+0xa0>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <calc_FFT_scale+0xa0>)
 80025f4:	801a      	strh	r2, [r3, #0]

	if(i == FFT_SAMPLES)
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <calc_FFT_scale+0xa0>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025fe:	d105      	bne.n	800260c <calc_FFT_scale+0x90>
	{
	    i = 0;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <calc_FFT_scale+0xa0>)
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]
	    Samples_ready = 1;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <calc_FFT_scale+0xac>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
	}
    }
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	200000ba 	.word	0x200000ba
 800261c:	20000154 	.word	0x20000154
 8002620:	200057c0 	.word	0x200057c0
 8002624:	2000077c 	.word	0x2000077c
 8002628:	20001788 	.word	0x20001788

0800262c <complexABS>:


// calculate abs
float complexABS(float real, float compl)
    {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	ed87 0a01 	vstr	s0, [r7, #4]
 8002636:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real * real + compl * compl);
 800263a:	edd7 7a01 	vldr	s15, [r7, #4]
 800263e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002642:	edd7 7a00 	vldr	s15, [r7]
 8002646:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	eeb0 0a67 	vmov.f32	s0, s15
 8002652:	f014 f885 	bl	8016760 <sqrtf>
 8002656:	eef0 7a40 	vmov.f32	s15, s0
    }
 800265a:	eeb0 0a67 	vmov.f32	s0, s15
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <CalculateFFT>:

//
void CalculateFFT(void)
    {
 8002664:	b580      	push	{r7, lr}
 8002666:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
	FFT_calc_done = 1;
 800266e:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <CalculateFFT+0x270>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]

	arm_rfft_fast_f32(&FFTHandler , FFTInBuffer , FFTOutBuffer , 0);
 8002674:	2300      	movs	r3, #0
 8002676:	4a98      	ldr	r2, [pc, #608]	; (80028d8 <CalculateFFT+0x274>)
 8002678:	4998      	ldr	r1, [pc, #608]	; (80028dc <CalculateFFT+0x278>)
 800267a:	4899      	ldr	r0, [pc, #612]	; (80028e0 <CalculateFFT+0x27c>)
 800267c:	f7ff fe6f 	bl	800235e <arm_rfft_fast_f32>

	int Freqs[FFT_SAMPLES];
	int FreqPoint = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8002686:	f102 020c 	add.w	r2, r2, #12
 800268a:	6013      	str	r3, [r2, #0]
	int Offset = 60;     // variable noise floor offset
 800268c:	233c      	movs	r3, #60	; 0x3c
 800268e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8002692:	f102 0204 	add.w	r2, r2, #4
 8002696:	6013      	str	r3, [r2, #0]

	// calculate abs values and linear-to-dB
	for(int i = 0; i < FFT_SAMPLES; i = i + 2)
 8002698:	2300      	movs	r3, #0
 800269a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800269e:	f102 0208 	add.w	r2, r2, #8
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e067      	b.n	8002776 <CalculateFFT+0x112>
	{
	    Freqs[FreqPoint] = (int) (20 * log10f(complexABS(FFTOutBuffer[i] , FFTOutBuffer[i + 1]))) - Offset;
 80026a6:	4a8c      	ldr	r2, [pc, #560]	; (80028d8 <CalculateFFT+0x274>)
 80026a8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80026ac:	f103 0308 	add.w	r3, r3, #8
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80026be:	f103 0308 	add.w	r3, r3, #8
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a84      	ldr	r2, [pc, #528]	; (80028d8 <CalculateFFT+0x274>)
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	eef0 0a47 	vmov.f32	s1, s14
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	f7ff ffa8 	bl	800262c <complexABS>
 80026dc:	eef0 7a40 	vmov.f32	s15, s0
 80026e0:	eeb0 0a67 	vmov.f32	s0, s15
 80026e4:	f014 f806 	bl	80166f4 <log10f>
 80026e8:	eef0 7a40 	vmov.f32	s15, s0
 80026ec:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80026f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f8:	ee17 2a90 	vmov	r2, s15
 80026fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002700:	f103 0304 	add.w	r3, r3, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	1ad1      	subs	r1, r2, r3
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	3b0c      	subs	r3, #12
 800270e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8002712:	f102 020c 	add.w	r2, r2, #12
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    if(Freqs[FreqPoint] < 0)
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	3b0c      	subs	r3, #12
 8002722:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8002726:	f102 020c 	add.w	r2, r2, #12
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	2b00      	cmp	r3, #0
 8002732:	da0a      	bge.n	800274a <CalculateFFT+0xe6>
	    {
		Freqs[FreqPoint] = 0;
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	3b0c      	subs	r3, #12
 800273a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800273e:	f102 020c 	add.w	r2, r2, #12
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	2100      	movs	r1, #0
 8002746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    }
	    FreqPoint++;
 800274a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800274e:	f103 030c 	add.w	r3, r3, #12
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800275a:	f102 020c 	add.w	r2, r2, #12
 800275e:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < FFT_SAMPLES; i = i + 2)
 8002760:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002764:	f103 0308 	add.w	r3, r3, #8
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3302      	adds	r3, #2
 800276c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8002770:	f102 0208 	add.w	r2, r2, #8
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800277a:	f103 0308 	add.w	r3, r3, #8
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002784:	db8f      	blt.n	80026a6 <CalculateFFT+0x42>
	//	for (uint32_t k = 0;  k < 1024;  k++)
	//	    {
	//
	//	    }

	OutFreqArray[0] = (uint8_t) Freqs[1];     // 20 Hz
 8002786:	f107 0310 	add.w	r3, r7, #16
 800278a:	3b0c      	subs	r3, #12
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <CalculateFFT+0x280>)
 8002792:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1] = (uint8_t) Freqs[3];     // 50 Hz
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	3b0c      	subs	r3, #12
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4b51      	ldr	r3, [pc, #324]	; (80028e4 <CalculateFFT+0x280>)
 80027a0:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2] = (uint8_t) Freqs[4];     // 75 Hz
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	3b0c      	subs	r3, #12
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <CalculateFFT+0x280>)
 80027ae:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3] = (uint8_t) Freqs[6];     // 125 Hz
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	3b0c      	subs	r3, #12
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b4a      	ldr	r3, [pc, #296]	; (80028e4 <CalculateFFT+0x280>)
 80027bc:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4] = (uint8_t) Freqs[10];     // 200 Hz
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	3b0c      	subs	r3, #12
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b46      	ldr	r3, [pc, #280]	; (80028e4 <CalculateFFT+0x280>)
 80027ca:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5] = (uint8_t) Freqs[17];     // 1000 Hz
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	3b0c      	subs	r3, #12
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b43      	ldr	r3, [pc, #268]	; (80028e4 <CalculateFFT+0x280>)
 80027d8:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6] = (uint8_t) Freqs[24];     // 2200 Hz
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	3b0c      	subs	r3, #12
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <CalculateFFT+0x280>)
 80027e6:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7] = (uint8_t) Freqs[35];     // 4500 Hz
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	3b0c      	subs	r3, #12
 80027ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <CalculateFFT+0x280>)
 80027f6:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8] = (uint8_t) Freqs[47];     // 9000 Hz
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	3b0c      	subs	r3, #12
 80027fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b37      	ldr	r3, [pc, #220]	; (80028e4 <CalculateFFT+0x280>)
 8002806:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9] = (uint8_t) Freqs[59];     // 15000 Hz
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	3b0c      	subs	r3, #12
 800280e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <CalculateFFT+0x280>)
 8002816:	725a      	strb	r2, [r3, #9]
	OutFreqArray[10] = (uint8_t) Freqs[82];     //
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	3b0c      	subs	r3, #12
 800281e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <CalculateFFT+0x280>)
 8002826:	729a      	strb	r2, [r3, #10]
	OutFreqArray[11] = (uint8_t) Freqs[117];     // 63 Hz
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	3b0c      	subs	r3, #12
 800282e:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8002832:	b2da      	uxtb	r2, r3
 8002834:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <CalculateFFT+0x280>)
 8002836:	72da      	strb	r2, [r3, #11]
	OutFreqArray[12] = (uint8_t) Freqs[186];     // 125 Hz
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	3b0c      	subs	r3, #12
 800283e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <CalculateFFT+0x280>)
 8002846:	731a      	strb	r2, [r3, #12]
	OutFreqArray[13] = (uint8_t) Freqs[256];     // 250 Hz
 8002848:	f107 0310 	add.w	r3, r7, #16
 800284c:	3b0c      	subs	r3, #12
 800284e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <CalculateFFT+0x280>)
 8002856:	735a      	strb	r2, [r3, #13]
	OutFreqArray[14] = (uint8_t) Freqs[326];     // 500 Hz
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	3b0c      	subs	r3, #12
 800285e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 8002862:	b2da      	uxtb	r2, r3
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <CalculateFFT+0x280>)
 8002866:	739a      	strb	r2, [r3, #14]
	OutFreqArray[15] = (uint8_t) Freqs[372];     // 1000 Hz
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	3b0c      	subs	r3, #12
 800286e:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 8002872:	b2da      	uxtb	r2, r3
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <CalculateFFT+0x280>)
 8002876:	73da      	strb	r2, [r3, #15]
	OutFreqArray[16] = (uint8_t) Freqs[465];     // 2200 Hz
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	3b0c      	subs	r3, #12
 800287e:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <CalculateFFT+0x280>)
 8002886:	741a      	strb	r2, [r3, #16]
	OutFreqArray[17] = (uint8_t) Freqs[558];     // 4500 Hz
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	3b0c      	subs	r3, #12
 800288e:	f8d3 38b8 	ldr.w	r3, [r3, #2232]	; 0x8b8
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <CalculateFFT+0x280>)
 8002896:	745a      	strb	r2, [r3, #17]
	OutFreqArray[18] = (uint8_t) Freqs[651];     // 9000 Hz
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	3b0c      	subs	r3, #12
 800289e:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	; 0xa2c
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <CalculateFFT+0x280>)
 80028a6:	749a      	strb	r2, [r3, #18]
	OutFreqArray[19] = (uint8_t) Freqs[836];     // 15000 Hz
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	3b0c      	subs	r3, #12
 80028ae:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <CalculateFFT+0x280>)
 80028b6:	74da      	strb	r2, [r3, #19]
	OutFreqArray[20] = (uint8_t) Freqs[929];     // 15000 Hz
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	3b0c      	subs	r3, #12
 80028be:	f8d3 3e84 	ldr.w	r3, [r3, #3716]	; 0xe84
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <CalculateFFT+0x280>)
 80028c6:	751a      	strb	r2, [r3, #20]
    }
 80028c8:	bf00      	nop
 80028ca:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200001f9 	.word	0x200001f9
 80028d8:	200017a0 	.word	0x200017a0
 80028dc:	200057c8 	.word	0x200057c8
 80028e0:	200037a0 	.word	0x200037a0
 80028e4:	200077fc 	.word	0x200077fc

080028e8 <check_FFT_flag>:

//
void check_FFT_flag(void)
    {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
	if(Samples_ready == 1)
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <check_FFT_flag+0x54>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d11c      	bne.n	8002932 <check_FFT_flag+0x4a>
	{
	    Samples_ready = 0;
 80028f8:	4b10      	ldr	r3, [pc, #64]	; (800293c <check_FFT_flag+0x54>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

	    for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	e010      	b.n	8002926 <check_FFT_flag+0x3e>
	    {
		FFTInBuffer[i] = (float) ADC_In[i];
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <check_FFT_flag+0x58>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <check_FFT_flag+0x5c>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	edc3 7a00 	vstr	s15, [r3]
	    for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292c:	d3ea      	bcc.n	8002904 <check_FFT_flag+0x1c>
	    }

	    CalculateFFT();
 800292e:	f7ff fe99 	bl	8002664 <CalculateFFT>
	}
    }
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20001788 	.word	0x20001788
 8002940:	2000077c 	.word	0x2000077c
 8002944:	200057c8 	.word	0x200057c8

08002948 <SSD1322_API_command>:
//====================== command ========================//
/**
 *  @brief Sends command byte to SSD1322
 */
void SSD1322_API_command(uint8_t command)
    {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8002952:	f000 fcb3 	bl	80032bc <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_low();
 8002956:	f000 fcc9 	bl	80032ec <SSD1322_HW_drive_DC_low>
	SSD1322_HW_SPI_send_byte(command);
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fcf5 	bl	800334c <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8002962:	f000 fcb7 	bl	80032d4 <SSD1322_HW_drive_CS_high>
    }
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <SSD1322_API_data>:
//====================== data ========================//
/**
 *  @brief Sends data byte to SSD1322
 */
void SSD1322_API_data(uint8_t data)
    {
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8002978:	f000 fca0 	bl	80032bc <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 800297c:	f000 fcc2 	bl	8003304 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_byte(data);
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fce2 	bl	800334c <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8002988:	f000 fca4 	bl	80032d4 <SSD1322_HW_drive_CS_high>
    }
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <SSD1322_API_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void SSD1322_API_init()
    {
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	SSD1322_HW_drive_RESET_low();  //Reset pin low
 8002998:	f000 fcc0 	bl	800331c <SSD1322_HW_drive_RESET_low>
	SSD1322_HW_msDelay(1);                  //1ms delay
 800299c:	2001      	movs	r0, #1
 800299e:	f000 fd03 	bl	80033a8 <SSD1322_HW_msDelay>
	SSD1322_HW_drive_RESET_high(); //Reset pin high
 80029a2:	f000 fcc7 	bl	8003334 <SSD1322_HW_drive_RESET_high>
	SSD1322_HW_msDelay(50);                 //50ms delay
 80029a6:	2032      	movs	r0, #50	; 0x32
 80029a8:	f000 fcfe 	bl	80033a8 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xFD);     //set Command unlock
 80029ac:	20fd      	movs	r0, #253	; 0xfd
 80029ae:	f7ff ffcb 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x12);
 80029b2:	2012      	movs	r0, #18
 80029b4:	f7ff ffdb 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xAE);     //set display off
 80029b8:	20ae      	movs	r0, #174	; 0xae
 80029ba:	f7ff ffc5 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_command(0xB3);     //set display clock divide ratio
 80029be:	20b3      	movs	r0, #179	; 0xb3
 80029c0:	f7ff ffc2 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x91);
 80029c4:	2091      	movs	r0, #145	; 0x91
 80029c6:	f7ff ffd2 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xCA);     //set multiplex ratio
 80029ca:	20ca      	movs	r0, #202	; 0xca
 80029cc:	f7ff ffbc 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x3F);
 80029d0:	203f      	movs	r0, #63	; 0x3f
 80029d2:	f7ff ffcc 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xA2);   //set display offset to 0
 80029d6:	20a2      	movs	r0, #162	; 0xa2
 80029d8:	f7ff ffb6 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 80029dc:	2000      	movs	r0, #0
 80029de:	f7ff ffc6 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xA1);   //start display start line to 0
 80029e2:	20a1      	movs	r0, #161	; 0xa1
 80029e4:	f7ff ffb0 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff ffc0 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xA0);   //set remap and dual COM Line Mode
 80029ee:	20a0      	movs	r0, #160	; 0xa0
 80029f0:	f7ff ffaa 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x14);
 80029f4:	2014      	movs	r0, #20
 80029f6:	f7ff ffba 	bl	800296e <SSD1322_API_data>
	SSD1322_API_data(0x11);
 80029fa:	2011      	movs	r0, #17
 80029fc:	f7ff ffb7 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xB5);   //disable IO input
 8002a00:	20b5      	movs	r0, #181	; 0xb5
 8002a02:	f7ff ffa1 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff ffb1 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xAB);   //function select
 8002a0c:	20ab      	movs	r0, #171	; 0xab
 8002a0e:	f7ff ff9b 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x01);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f7ff ffab 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xB4);   //enable VSL extern
 8002a18:	20b4      	movs	r0, #180	; 0xb4
 8002a1a:	f7ff ff95 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0xA0);
 8002a1e:	20a0      	movs	r0, #160	; 0xa0
 8002a20:	f7ff ffa5 	bl	800296e <SSD1322_API_data>
	SSD1322_API_data(0xFD);
 8002a24:	20fd      	movs	r0, #253	; 0xfd
 8002a26:	f7ff ffa2 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xC1);   //set contrast current
 8002a2a:	20c1      	movs	r0, #193	; 0xc1
 8002a2c:	f7ff ff8c 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0xFF);
 8002a30:	20ff      	movs	r0, #255	; 0xff
 8002a32:	f7ff ff9c 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xC7);   //set master contrast current
 8002a36:	20c7      	movs	r0, #199	; 0xc7
 8002a38:	f7ff ff86 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x0F);
 8002a3c:	200f      	movs	r0, #15
 8002a3e:	f7ff ff96 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xB9);   //default grayscale
 8002a42:	20b9      	movs	r0, #185	; 0xb9
 8002a44:	f7ff ff80 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_command(0xB1);   //set phase length
 8002a48:	20b1      	movs	r0, #177	; 0xb1
 8002a4a:	f7ff ff7d 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0xE2);
 8002a4e:	20e2      	movs	r0, #226	; 0xe2
 8002a50:	f7ff ff8d 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xD1);   //enhance driving scheme capability
 8002a54:	20d1      	movs	r0, #209	; 0xd1
 8002a56:	f7ff ff77 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x82);
 8002a5a:	2082      	movs	r0, #130	; 0x82
 8002a5c:	f7ff ff87 	bl	800296e <SSD1322_API_data>
	SSD1322_API_data(0x20);
 8002a60:	2020      	movs	r0, #32
 8002a62:	f7ff ff84 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xBB);   //first pre charge voltage
 8002a66:	20bb      	movs	r0, #187	; 0xbb
 8002a68:	f7ff ff6e 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x1F);
 8002a6c:	201f      	movs	r0, #31
 8002a6e:	f7ff ff7e 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xB6);   //second pre charge voltage
 8002a72:	20b6      	movs	r0, #182	; 0xb6
 8002a74:	f7ff ff68 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x08);
 8002a78:	2008      	movs	r0, #8
 8002a7a:	f7ff ff78 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xBE);   //VCOMH
 8002a7e:	20be      	movs	r0, #190	; 0xbe
 8002a80:	f7ff ff62 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(0x07);
 8002a84:	2007      	movs	r0, #7
 8002a86:	f7ff ff72 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(0xA6);   //set normal display mode
 8002a8a:	20a6      	movs	r0, #166	; 0xa6
 8002a8c:	f7ff ff5c 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_command(0xA9);   //no partial mode
 8002a90:	20a9      	movs	r0, #169	; 0xa9
 8002a92:	f7ff ff59 	bl	8002948 <SSD1322_API_command>
	SSD1322_HW_msDelay(10);               //stabilize VDD
 8002a96:	200a      	movs	r0, #10
 8002a98:	f000 fc86 	bl	80033a8 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xAF);   //display on
 8002a9c:	20af      	movs	r0, #175	; 0xaf
 8002a9e:	f7ff ff53 	bl	8002948 <SSD1322_API_command>
	SSD1322_HW_msDelay(50);               //stabilize VDD
 8002aa2:	2032      	movs	r0, #50	; 0x32
 8002aa4:	f000 fc80 	bl	80033a8 <SSD1322_HW_msDelay>
    }
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <SSD1322_API_sleep_on>:
//====================== go to sleep ========================//
/**
 *  @brief Go to sleep mode.
 */
void SSD1322_API_sleep_on()
    {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_ON);
 8002ab0:	20ae      	movs	r0, #174	; 0xae
 8002ab2:	f7ff ff49 	bl	8002948 <SSD1322_API_command>
    }
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <SSD1322_API_sleep_off>:
//====================== wake up from sleep ========================//
/**
 *  @brief Wake up from sleep mode.
 */
void SSD1322_API_sleep_off()
    {
 8002aba:	b580      	push	{r7, lr}
 8002abc:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_OFF);
 8002abe:	20af      	movs	r0, #175	; 0xaf
 8002ac0:	f7ff ff42 	bl	8002948 <SSD1322_API_command>
    }
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <SSD1322_API_set_window>:
 *  @param[in] end_column
 *  @param[in] start_row
 *  @param[in] end_row
 */
void SSD1322_API_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
    {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4604      	mov	r4, r0
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	4603      	mov	r3, r0
 8002adc:	71bb      	strb	r3, [r7, #6]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	717b      	strb	r3, [r7, #5]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	713b      	strb	r3, [r7, #4]
	SSD1322_API_command(SET_COLUMN_ADDR);  //set columns range
 8002ae6:	2015      	movs	r0, #21
 8002ae8:	f7ff ff2e 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(28 + start_column);
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	331c      	adds	r3, #28
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff3b 	bl	800296e <SSD1322_API_data>
	SSD1322_API_data(28 + end_column);
 8002af8:	79bb      	ldrb	r3, [r7, #6]
 8002afa:	331c      	adds	r3, #28
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff35 	bl	800296e <SSD1322_API_data>
	SSD1322_API_command(SET_ROW_ADDR);  //set rows range
 8002b04:	2075      	movs	r0, #117	; 0x75
 8002b06:	f7ff ff1f 	bl	8002948 <SSD1322_API_command>
	SSD1322_API_data(start_row);
 8002b0a:	797b      	ldrb	r3, [r7, #5]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff2e 	bl	800296e <SSD1322_API_data>
	SSD1322_API_data(end_row);
 8002b12:	793b      	ldrb	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff2a 	bl	800296e <SSD1322_API_data>
    }
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd90      	pop	{r4, r7, pc}

08002b22 <SSD1322_API_send_buffer>:
 *
 *  @param[in] buffer array of pixel values
 *  @param[in] buffer_size amount of bytes in the array
 */
void SSD1322_API_send_buffer(uint8_t *buffer, uint32_t buffer_size)
    {
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
	SSD1322_API_command(ENABLE_RAM_WRITE);  //enable write of pixels
 8002b2c:	205c      	movs	r0, #92	; 0x5c
 8002b2e:	f7ff ff0b 	bl	8002948 <SSD1322_API_command>
	SSD1322_HW_drive_CS_low();
 8002b32:	f000 fbc3 	bl	80032bc <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 8002b36:	f000 fbe5 	bl	8003304 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_array(buffer, buffer_size);
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fc1b 	bl	8003378 <SSD1322_HW_SPI_send_array>
	SSD1322_HW_drive_CS_high();
 8002b42:	f000 fbc7 	bl	80032d4 <SSD1322_HW_drive_CS_high>
    }
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <display_init_on_start>:
//====================== init display on start ========================//
/**
 *  @brief init display on start
 */
void display_init_on_start(uint8_t *buffer)
    {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	 SSD1322_API_init();
 8002b58:	f7ff ff1c 	bl	8002994 <SSD1322_API_init>
	 select_font(&MACIEK_FONT);
 8002b5c:	4807      	ldr	r0, [pc, #28]	; (8002b7c <display_init_on_start+0x2c>)
 8002b5e:	f000 fab3 	bl	80030c8 <select_font>
	 fill_buffer(buffer, 0);
 8002b62:	2100      	movs	r1, #0
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f847 	bl	8002bf8 <fill_buffer>
	 send_buffer_to_OLED(buffer, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fb86 	bl	8003280 <send_buffer_to_OLED>
    }
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	08023be0 	.word	0x08023be0

08002b80 <set_change_time_of_display>:
//====================== set change time of display ========================//
/**
 *  @brief sets time of refresh between displays states
 */
void set_change_time_of_display(const uint16_t counter_period)
    {
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
	htim15.Instance->CCR1 = counter_period;
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <set_change_time_of_display+0x20>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200079b8 	.word	0x200079b8

08002ba4 <display_on_standby_mode>:
//====================== display on standby mode routine ========================//
/**
 *  @brief
 */
void display_on_standby_mode(void)
    {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	if (is_display_on_standby_flag == true)
 8002ba8:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <display_on_standby_mode+0x3c>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d013      	beq.n	8002bda <display_on_standby_mode+0x36>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	490b      	ldr	r1, [pc, #44]	; (8002be4 <display_on_standby_mode+0x40>)
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <display_on_standby_mode+0x44>)
 8002bb8:	f00f fe82 	bl	80128c0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	490b      	ldr	r1, [pc, #44]	; (8002bec <display_on_standby_mode+0x48>)
 8002bc0:	4809      	ldr	r0, [pc, #36]	; (8002be8 <display_on_standby_mode+0x44>)
 8002bc2:	f00f ff67 	bl	8012a94 <HAL_RTC_GetDate>
		SSD1322_API_sleep_off();
 8002bc6:	f7ff ff78 	bl	8002aba <SSD1322_API_sleep_off>
		saved_seconds = sTime.Seconds;
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <display_on_standby_mode+0x40>)
 8002bcc:	789a      	ldrb	r2, [r3, #2]
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <display_on_standby_mode+0x4c>)
 8002bd0:	701a      	strb	r2, [r3, #0]
		saved_minutes = sTime.Minutes;
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <display_on_standby_mode+0x40>)
 8002bd4:	785a      	ldrb	r2, [r3, #1]
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <display_on_standby_mode+0x50>)
 8002bd8:	701a      	strb	r2, [r3, #0]
	    }
    }
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200001a5 	.word	0x200001a5
 8002be4:	2000178c 	.word	0x2000178c
 8002be8:	20007828 	.word	0x20007828
 8002bec:	200057bc 	.word	0x200057bc
 8002bf0:	200001a3 	.word	0x200001a3
 8002bf4:	200001a4 	.word	0x200001a4

08002bf8 <fill_buffer>:
 *             array of pixel values
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	b25a      	sxtb	r2, r3
 8002c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <fill_buffer+0x58>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <fill_buffer+0x5c>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	fb03 f302 	mul.w	r3, r3, r2
 8002c22:	0fda      	lsrs	r2, r3, #31
 8002c24:	4413      	add	r3, r2
 8002c26:	105b      	asrs	r3, r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 8002c2a:	e004      	b.n	8002c36 <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	7afa      	ldrb	r2, [r7, #11]
 8002c34:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1e5a      	subs	r2, r3, #1
 8002c3a:	60fa      	str	r2, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f5      	bne.n	8002c2c <fill_buffer+0x34>
	}
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008
 8002c54:	2000000a 	.word	0x2000000a

08002c58 <draw_pixel>:
 *             vertical coordinate of pixel
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	4608      	mov	r0, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	817b      	strh	r3, [r7, #10]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	813b      	strh	r3, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8002c72:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <draw_pixel+0xf0>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	897a      	ldrh	r2, [r7, #10]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d25f      	bcs.n	8002d3c <draw_pixel+0xe4>
 8002c7c:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <draw_pixel+0xf4>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	893a      	ldrh	r2, [r7, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d25a      	bcs.n	8002d3c <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <draw_pixel+0xf0>)
 8002c8a:	8812      	ldrh	r2, [r2, #0]
 8002c8c:	fb02 f203 	mul.w	r2, r2, r3
 8002c90:	897b      	ldrh	r3, [r7, #10]
 8002c92:	4413      	add	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	bfb8      	it	lt
 8002c9c:	425b      	neglt	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d125      	bne.n	8002cee <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 8002ca2:	893b      	ldrh	r3, [r7, #8]
 8002ca4:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <draw_pixel+0xf0>)
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	fb02 f203 	mul.w	r2, r2, r3
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	4413      	add	r3, r2
 8002cb0:	0fda      	lsrs	r2, r3, #31
 8002cb2:	4413      	add	r3, r2
 8002cb4:	105b      	asrs	r3, r3, #1
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f023 030f 	bic.w	r3, r3, #15
 8002cc4:	b25a      	sxtb	r2, r3
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b259      	sxtb	r1, r3
 8002cce:	893b      	ldrh	r3, [r7, #8]
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <draw_pixel+0xf0>)
 8002cd2:	8812      	ldrh	r2, [r2, #0]
 8002cd4:	fb02 f203 	mul.w	r2, r2, r3
 8002cd8:	897b      	ldrh	r3, [r7, #10]
 8002cda:	4413      	add	r3, r2
 8002cdc:	0fda      	lsrs	r2, r3, #31
 8002cde:	4413      	add	r3, r2
 8002ce0:	105b      	asrs	r3, r3, #1
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	b2ca      	uxtb	r2, r1
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e027      	b.n	8002d3e <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <draw_pixel+0xf0>)
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	fb02 f203 	mul.w	r2, r2, r3
 8002cf8:	897b      	ldrh	r3, [r7, #10]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	0fda      	lsrs	r2, r3, #31
 8002cfe:	4413      	add	r3, r2
 8002d00:	105b      	asrs	r3, r3, #1
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	b25a      	sxtb	r2, r3
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b259      	sxtb	r1, r3
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <draw_pixel+0xf0>)
 8002d20:	8812      	ldrh	r2, [r2, #0]
 8002d22:	fb02 f203 	mul.w	r2, r2, r3
 8002d26:	897b      	ldrh	r3, [r7, #10]
 8002d28:	4413      	add	r3, r2
 8002d2a:	0fda      	lsrs	r2, r3, #31
 8002d2c:	4413      	add	r3, r2
 8002d2e:	105b      	asrs	r3, r3, #1
 8002d30:	461a      	mov	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	b2ca      	uxtb	r2, r1
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e000      	b.n	8002d3e <draw_pixel+0xe6>
		return;
 8002d3c:	bf00      	nop
	}
}
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	2000000a 	.word	0x2000000a
 8002d4c:	20000008 	.word	0x20000008

08002d50 <draw_vline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_vline(uint8_t *frame_buffer, uint16_t x, uint16_t y0, uint16_t y1, uint8_t brightness)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
	if(y0 < y1)
 8002d6a:	893a      	ldrh	r2, [r7, #8]
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d213      	bcs.n	8002d9a <draw_vline+0x4a>
	{
		for (uint8_t i = y0; i <= y1; i++)
 8002d72:	893b      	ldrh	r3, [r7, #8]
 8002d74:	75fb      	strb	r3, [r7, #23]
 8002d76:	e00a      	b.n	8002d8e <draw_vline+0x3e>
		{
			draw_pixel(frame_buffer, x, i, brightness);
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d80:	8979      	ldrh	r1, [r7, #10]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff ff68 	bl	8002c58 <draw_pixel>
		for (uint8_t i = y0; i <= y1; i++)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d2ef      	bcs.n	8002d78 <draw_vline+0x28>
		for (uint8_t i = y1; i <= y0; i++)
		{
			draw_pixel(frame_buffer, x, i, brightness);
		}
	}
}
 8002d98:	e012      	b.n	8002dc0 <draw_vline+0x70>
		for (uint8_t i = y1; i <= y0; i++)
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	75bb      	strb	r3, [r7, #22]
 8002d9e:	e00a      	b.n	8002db6 <draw_vline+0x66>
			draw_pixel(frame_buffer, x, i, brightness);
 8002da0:	7dbb      	ldrb	r3, [r7, #22]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002da8:	8979      	ldrh	r1, [r7, #10]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff ff54 	bl	8002c58 <draw_pixel>
		for (uint8_t i = y1; i <= y0; i++)
 8002db0:	7dbb      	ldrb	r3, [r7, #22]
 8002db2:	3301      	adds	r3, #1
 8002db4:	75bb      	strb	r3, [r7, #22]
 8002db6:	7dbb      	ldrb	r3, [r7, #22]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	893a      	ldrh	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d2ef      	bcs.n	8002da0 <draw_vline+0x50>
}
 8002dc0:	bf00      	nop
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <draw_hline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_hline(uint8_t *frame_buffer, uint16_t y, uint16_t x0, uint16_t x1, uint8_t brightness)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	813b      	strh	r3, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
	if(x0 < x1)
 8002de2:	893a      	ldrh	r2, [r7, #8]
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d213      	bcs.n	8002e12 <draw_hline+0x4a>
	{
		for (uint8_t i = x0; i <= x1; i++)
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	75fb      	strb	r3, [r7, #23]
 8002dee:	e00a      	b.n	8002e06 <draw_hline+0x3e>
		{
			draw_pixel(frame_buffer, i, y, brightness);
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	b299      	uxth	r1, r3
 8002df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002df8:	897a      	ldrh	r2, [r7, #10]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7ff ff2c 	bl	8002c58 <draw_pixel>
		for (uint8_t i = x0; i <= x1; i++)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	3301      	adds	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d2ef      	bcs.n	8002df0 <draw_hline+0x28>
		for (uint8_t i = x1; i <= x0; i++)
		{
			draw_pixel(frame_buffer, i, y, brightness);
		}
	}
}
 8002e10:	e012      	b.n	8002e38 <draw_hline+0x70>
		for (uint8_t i = x1; i <= x0; i++)
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	75bb      	strb	r3, [r7, #22]
 8002e16:	e00a      	b.n	8002e2e <draw_hline+0x66>
			draw_pixel(frame_buffer, i, y, brightness);
 8002e18:	7dbb      	ldrb	r3, [r7, #22]
 8002e1a:	b299      	uxth	r1, r3
 8002e1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e20:	897a      	ldrh	r2, [r7, #10]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff ff18 	bl	8002c58 <draw_pixel>
		for (uint8_t i = x1; i <= x0; i++)
 8002e28:	7dbb      	ldrb	r3, [r7, #22]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	75bb      	strb	r3, [r7, #22]
 8002e2e:	7dbb      	ldrb	r3, [r7, #22]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	893a      	ldrh	r2, [r7, #8]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d2ef      	bcs.n	8002e18 <draw_hline+0x50>
}
 8002e38:	bf00      	nop
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <draw_rect>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
	draw_vline(frame_buffer, x0, y0, y1, brightness);
 8002e5a:	8b38      	ldrh	r0, [r7, #24]
 8002e5c:	893a      	ldrh	r2, [r7, #8]
 8002e5e:	8979      	ldrh	r1, [r7, #10]
 8002e60:	7f3b      	ldrb	r3, [r7, #28]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4603      	mov	r3, r0
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff ff72 	bl	8002d50 <draw_vline>
	draw_vline(frame_buffer, x1, y0, y1, brightness);
 8002e6c:	8b38      	ldrh	r0, [r7, #24]
 8002e6e:	893a      	ldrh	r2, [r7, #8]
 8002e70:	88f9      	ldrh	r1, [r7, #6]
 8002e72:	7f3b      	ldrb	r3, [r7, #28]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4603      	mov	r3, r0
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ff69 	bl	8002d50 <draw_vline>
	draw_hline(frame_buffer, y0, x0, x1, brightness);
 8002e7e:	88f8      	ldrh	r0, [r7, #6]
 8002e80:	897a      	ldrh	r2, [r7, #10]
 8002e82:	8939      	ldrh	r1, [r7, #8]
 8002e84:	7f3b      	ldrb	r3, [r7, #28]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff ff9c 	bl	8002dc8 <draw_hline>
	draw_hline(frame_buffer, y1, x0, x1, brightness);
 8002e90:	88f8      	ldrh	r0, [r7, #6]
 8002e92:	897a      	ldrh	r2, [r7, #10]
 8002e94:	8b39      	ldrh	r1, [r7, #24]
 8002e96:	7f3b      	ldrb	r3, [r7, #28]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff ff93 	bl	8002dc8 <draw_hline>
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <draw_rect_filled>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	4608      	mov	r0, r1
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4603      	mov	r3, r0
 8002eba:	817b      	strh	r3, [r7, #10]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	813b      	strh	r3, [r7, #8]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = x0; i <= x1; i++)
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	75fb      	strb	r3, [r7, #23]
 8002ec8:	e016      	b.n	8002ef8 <draw_rect_filled+0x4e>
	{
		for (uint8_t j = y0; j <= y1; j++)
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	75bb      	strb	r3, [r7, #22]
 8002ece:	e00b      	b.n	8002ee8 <draw_rect_filled+0x3e>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	b299      	uxth	r1, r3
 8002ed4:	7dbb      	ldrb	r3, [r7, #22]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff febb 	bl	8002c58 <draw_pixel>
		for (uint8_t j = y0; j <= y1; j++)
 8002ee2:	7dbb      	ldrb	r3, [r7, #22]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	75bb      	strb	r3, [r7, #22]
 8002ee8:	7dbb      	ldrb	r3, [r7, #22]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8c3a      	ldrh	r2, [r7, #32]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d2ee      	bcs.n	8002ed0 <draw_rect_filled+0x26>
	for (uint8_t i = x0; i <= x1; i++)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d2e3      	bcs.n	8002eca <draw_rect_filled+0x20>
		}
	}
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <draw_circle>:
 *             radius of the circle (pixels)
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_circle(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t r, uint8_t brightness)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	f1c3 0301 	rsb	r3, r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	461a      	mov	r2, r3
 8002f38:	03d2      	lsls	r2, r2, #15
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	82fb      	strh	r3, [r7, #22]

  draw_pixel(frame_buffer, x0, y0 + r, brightness);
 8002f4a:	893a      	ldrh	r2, [r7, #8]
 8002f4c:	88fb      	ldrh	r3, [r7, #6]
 8002f4e:	4413      	add	r3, r2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f56:	8979      	ldrh	r1, [r7, #10]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7ff fe7d 	bl	8002c58 <draw_pixel>
  draw_pixel(frame_buffer, x0, y0 - r, brightness);
 8002f5e:	893a      	ldrh	r2, [r7, #8]
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f6a:	8979      	ldrh	r1, [r7, #10]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff fe73 	bl	8002c58 <draw_pixel>
  draw_pixel(frame_buffer, x0 + r, y0, brightness);
 8002f72:	897a      	ldrh	r2, [r7, #10]
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	4413      	add	r3, r2
 8002f78:	b299      	uxth	r1, r3
 8002f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f7e:	893a      	ldrh	r2, [r7, #8]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff fe69 	bl	8002c58 <draw_pixel>
  draw_pixel(frame_buffer, x0 - r, y0, brightness);
 8002f86:	897a      	ldrh	r2, [r7, #10]
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f92:	893a      	ldrh	r2, [r7, #8]
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fe5f 	bl	8002c58 <draw_pixel>

  while (x < y)
 8002f9a:	e089      	b.n	80030b0 <draw_circle+0x1a4>
  {
    if (f >= 0)
 8002f9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0e      	blt.n	8002fc2 <draw_circle+0xb6>
    {
      y--;
 8002fa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8002fb0:	8b7b      	ldrh	r3, [r7, #26]
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8002fb8:	8bfa      	ldrh	r2, [r7, #30]
 8002fba:	8b7b      	ldrh	r3, [r7, #26]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8002fc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8002fce:	8bbb      	ldrh	r3, [r7, #28]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8002fd6:	8bfa      	ldrh	r2, [r7, #30]
 8002fd8:	8bbb      	ldrh	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	83fb      	strh	r3, [r7, #30]

    draw_pixel(frame_buffer, x0 + x, y0 + y, brightness);
 8002fe0:	8b3a      	ldrh	r2, [r7, #24]
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	b299      	uxth	r1, r3
 8002fe8:	8afa      	ldrh	r2, [r7, #22]
 8002fea:	893b      	ldrh	r3, [r7, #8]
 8002fec:	4413      	add	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff fe2f 	bl	8002c58 <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 + y, brightness);
 8002ffa:	8b3b      	ldrh	r3, [r7, #24]
 8002ffc:	897a      	ldrh	r2, [r7, #10]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	b299      	uxth	r1, r3
 8003002:	8afa      	ldrh	r2, [r7, #22]
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	4413      	add	r3, r2
 8003008:	b29a      	uxth	r2, r3
 800300a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fe22 	bl	8002c58 <draw_pixel>
    draw_pixel(frame_buffer, x0 + x, y0 - y, brightness);
 8003014:	8b3a      	ldrh	r2, [r7, #24]
 8003016:	897b      	ldrh	r3, [r7, #10]
 8003018:	4413      	add	r3, r2
 800301a:	b299      	uxth	r1, r3
 800301c:	8afb      	ldrh	r3, [r7, #22]
 800301e:	893a      	ldrh	r2, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b29a      	uxth	r2, r3
 8003024:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fe15 	bl	8002c58 <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 - y, brightness);
 800302e:	8b3b      	ldrh	r3, [r7, #24]
 8003030:	897a      	ldrh	r2, [r7, #10]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	b299      	uxth	r1, r3
 8003036:	8afb      	ldrh	r3, [r7, #22]
 8003038:	893a      	ldrh	r2, [r7, #8]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b29a      	uxth	r2, r3
 800303e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fe08 	bl	8002c58 <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 + x, brightness);
 8003048:	8afa      	ldrh	r2, [r7, #22]
 800304a:	897b      	ldrh	r3, [r7, #10]
 800304c:	4413      	add	r3, r2
 800304e:	b299      	uxth	r1, r3
 8003050:	8b3a      	ldrh	r2, [r7, #24]
 8003052:	893b      	ldrh	r3, [r7, #8]
 8003054:	4413      	add	r3, r2
 8003056:	b29a      	uxth	r2, r3
 8003058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f7ff fdfb 	bl	8002c58 <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 + x, brightness);
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	897a      	ldrh	r2, [r7, #10]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	b299      	uxth	r1, r3
 800306a:	8b3a      	ldrh	r2, [r7, #24]
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	4413      	add	r3, r2
 8003070:	b29a      	uxth	r2, r3
 8003072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff fdee 	bl	8002c58 <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 - x, brightness);
 800307c:	8afa      	ldrh	r2, [r7, #22]
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	4413      	add	r3, r2
 8003082:	b299      	uxth	r1, r3
 8003084:	8b3b      	ldrh	r3, [r7, #24]
 8003086:	893a      	ldrh	r2, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b29a      	uxth	r2, r3
 800308c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7ff fde1 	bl	8002c58 <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 - x, brightness);
 8003096:	8afb      	ldrh	r3, [r7, #22]
 8003098:	897a      	ldrh	r2, [r7, #10]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	b299      	uxth	r1, r3
 800309e:	8b3b      	ldrh	r3, [r7, #24]
 80030a0:	893a      	ldrh	r2, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff fdd4 	bl	8002c58 <draw_pixel>
  while (x < y)
 80030b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f6ff af6f 	blt.w	8002f9c <draw_circle+0x90>
  }
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <select_font>:
 *
 *  @param[in] new_gfx_font
 *             pointer to font structure
 */
void select_font(const GFXfont *new_gfx_font)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <select_font+0x1c>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000158 	.word	0x20000158

080030e8 <draw_char>:
 *             y position of bottom left corner of character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	461a      	mov	r2, r3
 80030f6:	4603      	mov	r3, r0
 80030f8:	72fb      	strb	r3, [r7, #11]
 80030fa:	460b      	mov	r3, r1
 80030fc:	813b      	strh	r3, [r7, #8]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 8003102:	4b44      	ldr	r3, [pc, #272]	; (8003214 <draw_char+0x12c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d07f      	beq.n	800320a <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 800310a:	4b42      	ldr	r3, [pc, #264]	; (8003214 <draw_char+0x12c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	891b      	ldrh	r3, [r3, #8]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	7afa      	ldrb	r2, [r7, #11]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 8003118:	4b3e      	ldr	r3, [pc, #248]	; (8003214 <draw_char+0x12c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <draw_char+0x12c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t width = glyph->width;
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	789b      	ldrb	r3, [r3, #2]
 8003138:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	78db      	ldrb	r3, [r3, #3]
 800313e:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	795b      	ldrb	r3, [r3, #5]
 8003144:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	799b      	ldrb	r3, [r3, #6]
 800314a:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t bits = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t y_pos = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t x_pos = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316a:	e048      	b.n	80031fe <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003172:	e03a      	b.n	80031ea <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8003174:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8003186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	84fa      	strh	r2, [r7, #38]	; 0x26
 800318c:	461a      	mov	r2, r3
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4413      	add	r3, r2
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			if (bits & 0x80)
 8003198:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	da1a      	bge.n	80031d6 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 80031a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	893b      	ldrh	r3, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	b299      	uxth	r1, r3
 80031b6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4413      	add	r3, r2
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fd41 	bl	8002c58 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 80031d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 80031e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80031e4:	3301      	adds	r3, #1
 80031e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3bf      	bcc.n	8003174 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 80031f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f8:	3301      	adds	r3, #1
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003202:	7dbb      	ldrb	r3, [r7, #22]
 8003204:	429a      	cmp	r2, r3
 8003206:	d3b1      	bcc.n	800316c <draw_char+0x84>
 8003208:	e000      	b.n	800320c <draw_char+0x124>
		return;
 800320a:	bf00      	nop
		}
	}
}
 800320c:	3728      	adds	r7, #40	; 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000158 	.word	0x20000158

08003218 <draw_text>:
 *             y position of bottom left corner of first character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4611      	mov	r1, r2
 8003224:	461a      	mov	r2, r3
 8003226:	460b      	mov	r3, r1
 8003228:	80fb      	strh	r3, [r7, #6]
 800322a:	4613      	mov	r3, r2
 800322c:	80bb      	strh	r3, [r7, #4]
    while (*text)
 800322e:	e01b      	b.n	8003268 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	7819      	ldrb	r1, [r3, #0]
 8003234:	88b8      	ldrh	r0, [r7, #4]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	7e3b      	ldrb	r3, [r7, #24]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4603      	mov	r3, r0
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff ff52 	bl	80030e8 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <draw_text+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003252:	3b20      	subs	r3, #32
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	791b      	ldrb	r3, [r3, #4]
 800325a:	b29a      	uxth	r2, r3
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	4413      	add	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
        text++;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	60bb      	str	r3, [r7, #8]
    while (*text)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1df      	bne.n	8003230 <draw_text+0x18>
    }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000158 	.word	0x20000158

08003280 <send_buffer_to_OLED>:
 *  @param[in] start_y
 *             y position of frame buffer part that will be displayed on OLED Useful for vertical scrolling.

 */
void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
 800328c:	4613      	mov	r3, r2
 800328e:	803b      	strh	r3, [r7, #0]
	SSD1322_API_set_window(0, 63, 0, 255);
 8003290:	23ff      	movs	r3, #255	; 0xff
 8003292:	2200      	movs	r2, #0
 8003294:	213f      	movs	r1, #63	; 0x3f
 8003296:	2000      	movs	r0, #0
 8003298:	f7ff fc16 	bl	8002ac8 <SSD1322_API_set_window>
	SSD1322_API_send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 800329c:	883b      	ldrh	r3, [r7, #0]
 800329e:	01db      	lsls	r3, r3, #7
 80032a0:	461a      	mov	r2, r3
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	4413      	add	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fc37 	bl	8002b22 <SSD1322_API_send_buffer>
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2104      	movs	r1, #4
 80032c4:	4802      	ldr	r0, [pc, #8]	; (80032d0 <SSD1322_HW_drive_CS_low+0x14>)
 80032c6:	f00c fab7 	bl	800f838 <HAL_GPIO_WritePin>
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	48000800 	.word	0x48000800

080032d4 <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 1);
 80032d8:	2201      	movs	r2, #1
 80032da:	2104      	movs	r1, #4
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <SSD1322_HW_drive_CS_high+0x14>)
 80032de:	f00c faab 	bl	800f838 <HAL_GPIO_WritePin>
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	48000800 	.word	0x48000800

080032ec <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f6:	4802      	ldr	r0, [pc, #8]	; (8003300 <SSD1322_HW_drive_DC_low+0x14>)
 80032f8:	f00c fa9e 	bl	800f838 <HAL_GPIO_WritePin>
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	48000800 	.word	0x48000800

08003304 <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 1);
 8003308:	2201      	movs	r2, #1
 800330a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800330e:	4802      	ldr	r0, [pc, #8]	; (8003318 <SSD1322_HW_drive_DC_high+0x14>)
 8003310:	f00c fa92 	bl	800f838 <HAL_GPIO_WritePin>
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	48000800 	.word	0x48000800

0800331c <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 0);
 8003320:	2200      	movs	r2, #0
 8003322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003326:	4802      	ldr	r0, [pc, #8]	; (8003330 <SSD1322_HW_drive_RESET_low+0x14>)
 8003328:	f00c fa86 	bl	800f838 <HAL_GPIO_WritePin>
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}
 8003330:	48000800 	.word	0x48000800

08003334 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 1);
 8003338:	2201      	movs	r2, #1
 800333a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800333e:	4802      	ldr	r0, [pc, #8]	; (8003348 <SSD1322_HW_drive_RESET_high+0x14>)
 8003340:	f00c fa7a 	bl	800f838 <HAL_GPIO_WritePin>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	48000800 	.word	0x48000800

0800334c <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
	SPI5_TX_completed_flag = 0;
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <SSD1322_HW_SPI_send_byte+0x24>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
//	datatosend = byte_to_transmit;
	HAL_SPI_Transmit(&hspi3, &byte_to_transmit, 1, 10);
 800335c:	1df9      	adds	r1, r7, #7
 800335e:	230a      	movs	r3, #10
 8003360:	2201      	movs	r2, #1
 8003362:	4804      	ldr	r0, [pc, #16]	; (8003374 <SSD1322_HW_SPI_send_byte+0x28>)
 8003364:	f00f fee3 	bl	801312e <HAL_SPI_Transmit>
//	if(HAL_SPI_Transmit_DMA(&hspi3, &byte_to_transmit, 1) != HAL_OK)
//	    {
//	    Error_Handler();
//	    }
//	while(!SPI5_TX_completed_flag);
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200000ae 	.word	0x200000ae
 8003374:	2000785c 	.word	0x2000785c

08003378 <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
	SPI5_TX_completed_flag = 0;
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <SSD1322_HW_SPI_send_array+0x28>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, array_to_transmit, array_size,100);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	b29a      	uxth	r2, r3
 800338c:	2364      	movs	r3, #100	; 0x64
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4804      	ldr	r0, [pc, #16]	; (80033a4 <SSD1322_HW_SPI_send_array+0x2c>)
 8003392:	f00f fecc 	bl	801312e <HAL_SPI_Transmit>
//	if(HAL_SPI_Transmit_DMA(&hspi3, array_to_transmit, array_size) != HAL_OK)
//	    {
//		Error_Handler();
//	    }
//	while (!SPI5_TX_completed_flag);
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200000ae 	.word	0x200000ae
 80033a4:	2000785c 	.word	0x2000785c

080033a8 <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f009 fc61 	bl	800cc78 <HAL_Delay>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <Refresh_display>:
//--------------------------------------------------------------
// Possible displayed screens
//--------------------------------------------------------------

void Refresh_display(const SSD1322_Screen_t SSD1322_Screen_State)
    {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
	if(is_display_on_standby_flag == true)
 80033ca:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <Refresh_display+0x1f8>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <Refresh_display+0x56>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80033d4:	2200      	movs	r2, #0
 80033d6:	4979      	ldr	r1, [pc, #484]	; (80035bc <Refresh_display+0x1fc>)
 80033d8:	4879      	ldr	r0, [pc, #484]	; (80035c0 <Refresh_display+0x200>)
 80033da:	f00f fa71 	bl	80128c0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80033de:	2200      	movs	r2, #0
 80033e0:	4978      	ldr	r1, [pc, #480]	; (80035c4 <Refresh_display+0x204>)
 80033e2:	4877      	ldr	r0, [pc, #476]	; (80035c0 <Refresh_display+0x200>)
 80033e4:	f00f fb56 	bl	8012a94 <HAL_RTC_GetDate>

		if((saved_minutes + 1) == 60) saved_minutes = 0; 	// in this case it wait 2 min - work on it
 80033e8:	4b77      	ldr	r3, [pc, #476]	; (80035c8 <Refresh_display+0x208>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b3b      	cmp	r3, #59	; 0x3b
 80033ee:	d102      	bne.n	80033f6 <Refresh_display+0x36>
 80033f0:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <Refresh_display+0x208>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]

		if((saved_seconds == sTime.Seconds) && ((saved_minutes + 1) == sTime.Minutes)) //do it one minute after last action with encoder or button
 80033f6:	4b71      	ldr	r3, [pc, #452]	; (80035bc <Refresh_display+0x1fc>)
 80033f8:	789a      	ldrb	r2, [r3, #2]
 80033fa:	4b74      	ldr	r3, [pc, #464]	; (80035cc <Refresh_display+0x20c>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d109      	bne.n	8003416 <Refresh_display+0x56>
 8003402:	4b71      	ldr	r3, [pc, #452]	; (80035c8 <Refresh_display+0x208>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a6c      	ldr	r2, [pc, #432]	; (80035bc <Refresh_display+0x1fc>)
 800340a:	7852      	ldrb	r2, [r2, #1]
 800340c:	4293      	cmp	r3, r2
 800340e:	d102      	bne.n	8003416 <Refresh_display+0x56>
		    {
			SSD1322_API_sleep_on();
 8003410:	f7ff fb4c 	bl	8002aac <SSD1322_API_sleep_on>
			return;
 8003414:	e0cd      	b.n	80035b2 <Refresh_display+0x1f2>
		    }
	    }

	switch (SSD1322_Screen_State)
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	3b01      	subs	r3, #1
 800341a:	2b22      	cmp	r3, #34	; 0x22
 800341c:	f200 80bc 	bhi.w	8003598 <Refresh_display+0x1d8>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <Refresh_display+0x68>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	080034bd 	.word	0x080034bd
 800342c:	080034c5 	.word	0x080034c5
 8003430:	080034d5 	.word	0x080034d5
 8003434:	080034e9 	.word	0x080034e9
 8003438:	08003561 	.word	0x08003561
 800343c:	08003559 	.word	0x08003559
 8003440:	08003539 	.word	0x08003539
 8003444:	08003541 	.word	0x08003541
 8003448:	08003549 	.word	0x08003549
 800344c:	08003599 	.word	0x08003599
 8003450:	08003551 	.word	0x08003551
 8003454:	08003599 	.word	0x08003599
 8003458:	08003599 	.word	0x08003599
 800345c:	08003599 	.word	0x08003599
 8003460:	08003599 	.word	0x08003599
 8003464:	08003599 	.word	0x08003599
 8003468:	08003599 	.word	0x08003599
 800346c:	08003599 	.word	0x08003599
 8003470:	08003599 	.word	0x08003599
 8003474:	080034cd 	.word	0x080034cd
 8003478:	080034b5 	.word	0x080034b5
 800347c:	08003529 	.word	0x08003529
 8003480:	08003531 	.word	0x08003531
 8003484:	08003599 	.word	0x08003599
 8003488:	08003599 	.word	0x08003599
 800348c:	08003599 	.word	0x08003599
 8003490:	08003599 	.word	0x08003599
 8003494:	08003599 	.word	0x08003599
 8003498:	08003599 	.word	0x08003599
 800349c:	08003569 	.word	0x08003569
 80034a0:	08003571 	.word	0x08003571
 80034a4:	08003579 	.word	0x08003579
 80034a8:	08003581 	.word	0x08003581
 80034ac:	08003589 	.word	0x08003589
 80034b0:	08003591 	.word	0x08003591
	    {
	    case SSD1322_SCREEN_Welcome:
		SSD1322_Screen_Welcome(DisplayOLEDBuffer);
 80034b4:	4846      	ldr	r0, [pc, #280]	; (80035d0 <Refresh_display+0x210>)
 80034b6:	f000 f895 	bl	80035e4 <SSD1322_Screen_Welcome>
		break;
 80034ba:	e07a      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_TIME:
		SSD1322_Screen_Time(DisplayOLEDBuffer);
 80034bc:	4844      	ldr	r0, [pc, #272]	; (80035d0 <Refresh_display+0x210>)
 80034be:	f000 f91f 	bl	8003700 <SSD1322_Screen_Time>
		break;
 80034c2:	e076      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_RADIO:

		SSD1322_Screen_Radio(DisplayOLEDBuffer);
 80034c4:	4842      	ldr	r0, [pc, #264]	; (80035d0 <Refresh_display+0x210>)
 80034c6:	f000 f973 	bl	80037b0 <SSD1322_Screen_Radio>
		break;
 80034ca:	e072      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_WakeUp:

		SSD1322_Screen_WakeUp(DisplayOLEDBuffer);
 80034cc:	4840      	ldr	r0, [pc, #256]	; (80035d0 <Refresh_display+0x210>)
 80034ce:	f000 fa11 	bl	80038f4 <SSD1322_Screen_WakeUp>
		break;
 80034d2:	e06e      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_FFT:
		if(FFT_calc_done == 1)
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <Refresh_display+0x214>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d166      	bne.n	80035ac <Refresh_display+0x1ec>
		    {
			SSD1322_Screen_FFT(DisplayOLEDBuffer, OutFreqArray);
 80034de:	493e      	ldr	r1, [pc, #248]	; (80035d8 <Refresh_display+0x218>)
 80034e0:	483b      	ldr	r0, [pc, #236]	; (80035d0 <Refresh_display+0x210>)
 80034e2:	f000 fa5b 	bl	800399c <SSD1322_Screen_FFT>
		    }
		break;
 80034e6:	e061      	b.n	80035ac <Refresh_display+0x1ec>
	    case SSD1322_SCREEN_UVMETER:
		if(UV_meter_front_back == UV_METER_BACK)
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <Refresh_display+0x21c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d10b      	bne.n	8003508 <Refresh_display+0x148>
		    {
			SSD1322_Screen_UVMeter(DisplayOLEDBuffer, ADC_SamplesSUM[0], ADC_SamplesSUM[3], UV_meter_front_back);
 80034f0:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <Refresh_display+0x220>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	b299      	uxth	r1, r3
 80034f6:	4b3a      	ldr	r3, [pc, #232]	; (80035e0 <Refresh_display+0x220>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	4b37      	ldr	r3, [pc, #220]	; (80035dc <Refresh_display+0x21c>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4833      	ldr	r0, [pc, #204]	; (80035d0 <Refresh_display+0x210>)
 8003502:	f000 facf 	bl	8003aa4 <SSD1322_Screen_UVMeter>
		    }
		else if(UV_meter_front_back == UV_METER_FRONT)
		    {
			SSD1322_Screen_UVMeter(DisplayOLEDBuffer, ADC_SamplesSUM[2], ADC_SamplesSUM[1], UV_meter_front_back);
		    }
		break;
 8003506:	e053      	b.n	80035b0 <Refresh_display+0x1f0>
		else if(UV_meter_front_back == UV_METER_FRONT)
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <Refresh_display+0x21c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d14f      	bne.n	80035b0 <Refresh_display+0x1f0>
			SSD1322_Screen_UVMeter(DisplayOLEDBuffer, ADC_SamplesSUM[2], ADC_SamplesSUM[1], UV_meter_front_back);
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <Refresh_display+0x220>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	b299      	uxth	r1, r3
 8003516:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <Refresh_display+0x220>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	b29a      	uxth	r2, r3
 800351c:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <Refresh_display+0x21c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	482b      	ldr	r0, [pc, #172]	; (80035d0 <Refresh_display+0x210>)
 8003522:	f000 fabf 	bl	8003aa4 <SSD1322_Screen_UVMeter>
		break;
 8003526:	e043      	b.n	80035b0 <Refresh_display+0x1f0>
	    case SSD1322_SCREEN_OFF:
		SSD1322_Screen_OFF(DisplayOLEDBuffer);
 8003528:	4829      	ldr	r0, [pc, #164]	; (80035d0 <Refresh_display+0x210>)
 800352a:	f000 fb0d 	bl	8003b48 <SSD1322_Screen_OFF>
		break;
 800352e:	e040      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_GoodBye:
		SSD1322_Screen_GoodBye(DisplayOLEDBuffer);
 8003530:	4827      	ldr	r0, [pc, #156]	; (80035d0 <Refresh_display+0x210>)
 8003532:	f000 fb29 	bl	8003b88 <SSD1322_Screen_GoodBye>
		break;
 8003536:	e03c      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETCLOCK:
		SSD1322_Screen_SetClock(DisplayOLEDBuffer);
 8003538:	4825      	ldr	r0, [pc, #148]	; (80035d0 <Refresh_display+0x210>)
 800353a:	f000 fb45 	bl	8003bc8 <SSD1322_Screen_SetClock>
		break;
 800353e:	e038      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETALARM:
		SSD1322_Screen_SetAlarm(DisplayOLEDBuffer);
 8003540:	4823      	ldr	r0, [pc, #140]	; (80035d0 <Refresh_display+0x210>)
 8003542:	f000 fb61 	bl	8003c08 <SSD1322_Screen_SetAlarm>
		break;
 8003546:	e034      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETTINGS:
		SSD1322_Screen_Settings(DisplayOLEDBuffer);
 8003548:	4821      	ldr	r0, [pc, #132]	; (80035d0 <Refresh_display+0x210>)
 800354a:	f000 fcd3 	bl	8003ef4 <SSD1322_Screen_Settings>
		break;
 800354e:	e030      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_USB:
		SSD1322_Screen_USB(DisplayOLEDBuffer);
 8003550:	481f      	ldr	r0, [pc, #124]	; (80035d0 <Refresh_display+0x210>)
 8003552:	f000 fd45 	bl	8003fe0 <SSD1322_Screen_USB>
		break;
 8003556:	e02c      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETINPUT:
		SSD1322_Screen_SetInput(DisplayOLEDBuffer);
 8003558:	481d      	ldr	r0, [pc, #116]	; (80035d0 <Refresh_display+0x210>)
 800355a:	f000 fda9 	bl	80040b0 <SSD1322_Screen_SetInput>
		break;
 800355e:	e028      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_TIME_BOUNCING:
		SSD1322_Screen_Time_Bouncing(DisplayOLEDBuffer);
 8003560:	481b      	ldr	r0, [pc, #108]	; (80035d0 <Refresh_display+0x210>)
 8003562:	f000 fd5d 	bl	8004020 <SSD1322_Screen_Time_Bouncing>
		break;
 8003566:	e024      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_VOLUME_FRONT:
		SSD1322_Screen_Encoder_Volume_Front(DisplayOLEDBuffer);
 8003568:	4819      	ldr	r0, [pc, #100]	; (80035d0 <Refresh_display+0x210>)
 800356a:	f000 fe6b 	bl	8004244 <SSD1322_Screen_Encoder_Volume_Front>
		break;
 800356e:	e020      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_VOLUME_BACK:
		SSD1322_Screen_Encoder_Volume_Back(DisplayOLEDBuffer);
 8003570:	4817      	ldr	r0, [pc, #92]	; (80035d0 <Refresh_display+0x210>)
 8003572:	f000 feab 	bl	80042cc <SSD1322_Screen_Encoder_Volume_Back>
		break;
 8003576:	e01c      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_LOUDNESS:
		SSD1322_Screen_Encoder_Loudness(DisplayOLEDBuffer);
 8003578:	4815      	ldr	r0, [pc, #84]	; (80035d0 <Refresh_display+0x210>)
 800357a:	f000 feeb 	bl	8004354 <SSD1322_Screen_Encoder_Loudness>
		break;
 800357e:	e018      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_TREBLE:
		SSD1322_Screen_Encoder_Treble(DisplayOLEDBuffer);
 8003580:	4813      	ldr	r0, [pc, #76]	; (80035d0 <Refresh_display+0x210>)
 8003582:	f000 ff33 	bl	80043ec <SSD1322_Screen_Encoder_Treble>
		break;
 8003586:	e014      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_MIDDLE:
		SSD1322_Screen_Encoder_Middle(DisplayOLEDBuffer);
 8003588:	4811      	ldr	r0, [pc, #68]	; (80035d0 <Refresh_display+0x210>)
 800358a:	f000 ffc9 	bl	8004520 <SSD1322_Screen_Encoder_Middle>
		break;
 800358e:	e010      	b.n	80035b2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_BASS:
		SSD1322_Screen_Encoder_Bass(DisplayOLEDBuffer);
 8003590:	480f      	ldr	r0, [pc, #60]	; (80035d0 <Refresh_display+0x210>)
 8003592:	f001 f85f 	bl	8004654 <SSD1322_Screen_Encoder_Bass>
		break;
 8003596:	e00c      	b.n	80035b2 <Refresh_display+0x1f2>
	    default:
		fill_buffer(DisplayOLEDBuffer, 0);
 8003598:	2100      	movs	r1, #0
 800359a:	480d      	ldr	r0, [pc, #52]	; (80035d0 <Refresh_display+0x210>)
 800359c:	f7ff fb2c 	bl	8002bf8 <fill_buffer>
		send_buffer_to_OLED(DisplayOLEDBuffer, 0, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	480a      	ldr	r0, [pc, #40]	; (80035d0 <Refresh_display+0x210>)
 80035a6:	f7ff fe6b 	bl	8003280 <send_buffer_to_OLED>
		break;
 80035aa:	e002      	b.n	80035b2 <Refresh_display+0x1f2>
		break;
 80035ac:	bf00      	nop
 80035ae:	e000      	b.n	80035b2 <Refresh_display+0x1f2>
		break;
 80035b0:	bf00      	nop
	    }
    }
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200001a5 	.word	0x200001a5
 80035bc:	2000178c 	.word	0x2000178c
 80035c0:	20007828 	.word	0x20007828
 80035c4:	200057bc 	.word	0x200057bc
 80035c8:	200001a4 	.word	0x200001a4
 80035cc:	200001a3 	.word	0x200001a3
 80035d0:	200037bc 	.word	0x200037bc
 80035d4:	200001f9 	.word	0x200001f9
 80035d8:	200077fc 	.word	0x200077fc
 80035dc:	200037b8 	.word	0x200037b8
 80035e0:	20000708 	.word	0x20000708

080035e4 <SSD1322_Screen_Welcome>:

// ??
void SSD1322_Screen_Welcome(uint8_t *const buffer)
    {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
	draw_text(buffer, "Przyjemnosc ze sluchania ", 20, 15, 15);
 80035ec:	230f      	movs	r3, #15
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	230f      	movs	r3, #15
 80035f2:	2214      	movs	r2, #20
 80035f4:	4940      	ldr	r1, [pc, #256]	; (80036f8 <SSD1322_Screen_Welcome+0x114>)
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fe0e 	bl	8003218 <draw_text>
	draw_text(buffer, "zapewnia ", 20, 36, 15);
 80035fc:	230f      	movs	r3, #15
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2324      	movs	r3, #36	; 0x24
 8003602:	2214      	movs	r2, #20
 8003604:	493d      	ldr	r1, [pc, #244]	; (80036fc <SSD1322_Screen_Welcome+0x118>)
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fe06 	bl	8003218 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fe35 	bl	8003280 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003616:	20c8      	movs	r0, #200	; 0xc8
 8003618:	f009 fb2e 	bl	800cc78 <HAL_Delay>
	draw_char(buffer, 'M', 20, 55, 15);
 800361c:	230f      	movs	r3, #15
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2337      	movs	r3, #55	; 0x37
 8003622:	2214      	movs	r2, #20
 8003624:	214d      	movs	r1, #77	; 0x4d
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fd5e 	bl	80030e8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2100      	movs	r1, #0
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fe25 	bl	8003280 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003636:	20c8      	movs	r0, #200	; 0xc8
 8003638:	f009 fb1e 	bl	800cc78 <HAL_Delay>
	draw_char(buffer, 'A', 38, 55, 15);
 800363c:	230f      	movs	r3, #15
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	2337      	movs	r3, #55	; 0x37
 8003642:	2226      	movs	r2, #38	; 0x26
 8003644:	2141      	movs	r1, #65	; 0x41
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fd4e 	bl	80030e8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800364c:	2200      	movs	r2, #0
 800364e:	2100      	movs	r1, #0
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fe15 	bl	8003280 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003656:	20c8      	movs	r0, #200	; 0xc8
 8003658:	f009 fb0e 	bl	800cc78 <HAL_Delay>
	draw_char(buffer, 'C', 53, 55, 15);
 800365c:	230f      	movs	r3, #15
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2337      	movs	r3, #55	; 0x37
 8003662:	2235      	movs	r2, #53	; 0x35
 8003664:	2143      	movs	r1, #67	; 0x43
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fd3e 	bl	80030e8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	2100      	movs	r1, #0
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fe05 	bl	8003280 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003676:	20c8      	movs	r0, #200	; 0xc8
 8003678:	f009 fafe 	bl	800cc78 <HAL_Delay>
	draw_char(buffer, 'I', 68, 55, 15);
 800367c:	230f      	movs	r3, #15
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2337      	movs	r3, #55	; 0x37
 8003682:	2244      	movs	r2, #68	; 0x44
 8003684:	2149      	movs	r1, #73	; 0x49
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fd2e 	bl	80030e8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff fdf5 	bl	8003280 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003696:	20c8      	movs	r0, #200	; 0xc8
 8003698:	f009 faee 	bl	800cc78 <HAL_Delay>
	draw_char(buffer, 'E', 78, 55, 15);
 800369c:	230f      	movs	r3, #15
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2337      	movs	r3, #55	; 0x37
 80036a2:	224e      	movs	r2, #78	; 0x4e
 80036a4:	2145      	movs	r1, #69	; 0x45
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fd1e 	bl	80030e8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2100      	movs	r1, #0
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff fde5 	bl	8003280 <send_buffer_to_OLED>
	HAL_Delay(200);
 80036b6:	20c8      	movs	r0, #200	; 0xc8
 80036b8:	f009 fade 	bl	800cc78 <HAL_Delay>
	draw_char(buffer, 'J', 93, 55, 15);
 80036bc:	230f      	movs	r3, #15
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2337      	movs	r3, #55	; 0x37
 80036c2:	225d      	movs	r2, #93	; 0x5d
 80036c4:	214a      	movs	r1, #74	; 0x4a
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fd0e 	bl	80030e8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2100      	movs	r1, #0
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fdd5 	bl	8003280 <send_buffer_to_OLED>
	HAL_Delay(1000);
 80036d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036da:	f009 facd 	bl	800cc78 <HAL_Delay>
	fill_buffer(buffer, 0);
 80036de:	2100      	movs	r1, #0
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fa89 	bl	8002bf8 <fill_buffer>
	send_buffer_to_OLED(buffer, 0, 0);
 80036e6:	2200      	movs	r2, #0
 80036e8:	2100      	movs	r1, #0
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fdc8 	bl	8003280 <send_buffer_to_OLED>
    }
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	08017dac 	.word	0x08017dac
 80036fc:	08017dc8 	.word	0x08017dc8

08003700 <SSD1322_Screen_Time>:


void SSD1322_Screen_Time(uint8_t *const buffer)
    {
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af02      	add	r7, sp, #8
 8003706:	6078      	str	r0, [r7, #4]
	// do zegara dodac wybor roznych czcionek
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003708:	2200      	movs	r2, #0
 800370a:	4922      	ldr	r1, [pc, #136]	; (8003794 <SSD1322_Screen_Time+0x94>)
 800370c:	4822      	ldr	r0, [pc, #136]	; (8003798 <SSD1322_Screen_Time+0x98>)
 800370e:	f00f f8d7 	bl	80128c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003712:	2200      	movs	r2, #0
 8003714:	4921      	ldr	r1, [pc, #132]	; (800379c <SSD1322_Screen_Time+0x9c>)
 8003716:	4820      	ldr	r0, [pc, #128]	; (8003798 <SSD1322_Screen_Time+0x98>)
 8003718:	f00f f9bc 	bl	8012a94 <HAL_RTC_GetDate>

	fill_buffer(buffer, DISPLAY_BLACK);
 800371c:	2100      	movs	r1, #0
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff fa6a 	bl	8002bf8 <fill_buffer>
	select_font(&FreeSerifItalic24pt7b);
 8003724:	481e      	ldr	r0, [pc, #120]	; (80037a0 <SSD1322_Screen_Time+0xa0>)
 8003726:	f7ff fccf 	bl	80030c8 <select_font>
	//wywoływać tylko co sekunde i nie sprawdzac nie potrzebne innych wartości
	//aktualizacje czasu wywolywac timerem co sekunde
	/* Setting Time */
	ChangeDateToArrayCharTime(ConvertArrayCharTime, sTime.Hours, sTime.Minutes, sTime.Seconds, 0);
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <SSD1322_Screen_Time+0x94>)
 800372c:	7819      	ldrb	r1, [r3, #0]
 800372e:	4b19      	ldr	r3, [pc, #100]	; (8003794 <SSD1322_Screen_Time+0x94>)
 8003730:	785a      	ldrb	r2, [r3, #1]
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <SSD1322_Screen_Time+0x94>)
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	2000      	movs	r0, #0
 8003738:	9000      	str	r0, [sp, #0]
 800373a:	481a      	ldr	r0, [pc, #104]	; (80037a4 <SSD1322_Screen_Time+0xa4>)
 800373c:	f002 fc4c 	bl	8005fd8 <ChangeDateToArrayCharTime>
	draw_text(buffer, (char*) ConvertArrayCharTime, 2, 32, 5);
 8003740:	2305      	movs	r3, #5
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2320      	movs	r3, #32
 8003746:	2202      	movs	r2, #2
 8003748:	4916      	ldr	r1, [pc, #88]	; (80037a4 <SSD1322_Screen_Time+0xa4>)
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fd64 	bl	8003218 <draw_text>
	/* Setting Date */
	select_font(&FreeSerifItalic9pt7b);
 8003750:	4815      	ldr	r0, [pc, #84]	; (80037a8 <SSD1322_Screen_Time+0xa8>)
 8003752:	f7ff fcb9 	bl	80030c8 <select_font>
	ConvertDateToBuffer((2021 + sDate.Year), sDate.Month, sDate.WeekDay, sDate.Date);
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <SSD1322_Screen_Time+0x9c>)
 8003758:	78db      	ldrb	r3, [r3, #3]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f203 73e5 	addw	r3, r3, #2021	; 0x7e5
 8003760:	b298      	uxth	r0, r3
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <SSD1322_Screen_Time+0x9c>)
 8003764:	7859      	ldrb	r1, [r3, #1]
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <SSD1322_Screen_Time+0x9c>)
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <SSD1322_Screen_Time+0x9c>)
 800376c:	789b      	ldrb	r3, [r3, #2]
 800376e:	f002 fd55 	bl	800621c <ConvertDateToBuffer>
	draw_text(buffer, (char*) TestingArray, 2, 60, 5);
 8003772:	2305      	movs	r3, #5
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	233c      	movs	r3, #60	; 0x3c
 8003778:	2202      	movs	r2, #2
 800377a:	490c      	ldr	r1, [pc, #48]	; (80037ac <SSD1322_Screen_Time+0xac>)
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fd4b 	bl	8003218 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	2100      	movs	r1, #0
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fd7a 	bl	8003280 <send_buffer_to_OLED>
    }
 800378c:	bf00      	nop
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	2000178c 	.word	0x2000178c
 8003798:	20007828 	.word	0x20007828
 800379c:	200057bc 	.word	0x200057bc
 80037a0:	0802302c 	.word	0x0802302c
 80037a4:	2000015c 	.word	0x2000015c
 80037a8:	080237c0 	.word	0x080237c0
 80037ac:	20000168 	.word	0x20000168

080037b0 <SSD1322_Screen_Radio>:

void SSD1322_Screen_Radio(uint8_t *const buffer)
    {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	6078      	str	r0, [r7, #4]
	static uint16_t freq_scaled = 0;
	static uint16_t rssi_scaled = 0;
	static char RDStext[32];

	if(RADIO_IS_ON_back_flag == true || RADIO_IS_ON_front_flag == true)
 80037b8:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <SSD1322_Screen_Radio+0x118>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d004      	beq.n	80037cc <SSD1322_Screen_Radio+0x1c>
 80037c2:	4b42      	ldr	r3, [pc, #264]	; (80038cc <SSD1322_Screen_Radio+0x11c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <SSD1322_Screen_Radio+0x22>
	    {
		RDA5807_Read();
 80037cc:	f003 fe70 	bl	80074b0 <RDA5807_Read>
 80037d0:	e001      	b.n	80037d6 <SSD1322_Screen_Radio+0x26>
	    }
	else
	    {
		RDA5807_RDSinit();
 80037d2:	f003 fe23 	bl	800741c <RDA5807_RDSinit>
	    }

	freq_scaled = map(RDA5807_GetFrequency(), RADIO_MIN_FREQ, RADIO_MAX_FREQ, 20, 200);
 80037d6:	f003 fe01 	bl	80073dc <RDA5807_GetFrequency>
 80037da:	4603      	mov	r3, r0
 80037dc:	4618      	mov	r0, r3
 80037de:	23c8      	movs	r3, #200	; 0xc8
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2314      	movs	r3, #20
 80037e4:	f240 4247 	movw	r2, #1095	; 0x447
 80037e8:	f240 3175 	movw	r1, #885	; 0x375
 80037ec:	f002 fcfa 	bl	80061e4 <map>
 80037f0:	4603      	mov	r3, r0
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <SSD1322_Screen_Radio+0x120>)
 80037f6:	801a      	strh	r2, [r3, #0]
	fill_buffer(buffer, 0);
 80037f8:	2100      	movs	r1, #0
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff f9fc 	bl	8002bf8 <fill_buffer>
	select_font(&FreeSerifBold9pt7b);
 8003800:	4834      	ldr	r0, [pc, #208]	; (80038d4 <SSD1322_Screen_Radio+0x124>)
 8003802:	f7ff fc61 	bl	80030c8 <select_font>

	ChangeDateToArrayChar(RDA5807_GetFrequency());
 8003806:	f003 fde9 	bl	80073dc <RDA5807_GetFrequency>
 800380a:	4603      	mov	r3, r0
 800380c:	4618      	mov	r0, r3
 800380e:	f002 fb57 	bl	8005ec0 <ChangeDateToArrayChar>
	draw_text(buffer, (char*) ConvertArrayCharLong, 20, 13, 5);
 8003812:	2305      	movs	r3, #5
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	230d      	movs	r3, #13
 8003818:	2214      	movs	r2, #20
 800381a:	492f      	ldr	r1, [pc, #188]	; (80038d8 <SSD1322_Screen_Radio+0x128>)
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff fcfb 	bl	8003218 <draw_text>

	/* draw radio info */
	select_font(&FreeSerifBold9pt7b);
 8003822:	482c      	ldr	r0, [pc, #176]	; (80038d4 <SSD1322_Screen_Radio+0x124>)
 8003824:	f7ff fc50 	bl	80030c8 <select_font>
	draw_text(buffer, (char *)StationName, 150, 13, 5);
 8003828:	2305      	movs	r3, #5
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	230d      	movs	r3, #13
 800382e:	2296      	movs	r2, #150	; 0x96
 8003830:	492a      	ldr	r1, [pc, #168]	; (80038dc <SSD1322_Screen_Radio+0x12c>)
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff fcf0 	bl	8003218 <draw_text>
	select_font(&MACIEK_FONT);
 8003838:	4829      	ldr	r0, [pc, #164]	; (80038e0 <SSD1322_Screen_Radio+0x130>)
 800383a:	f7ff fc45 	bl	80030c8 <select_font>
	if(prepare_RDS_text((char *)RDStext) == true)
 800383e:	4829      	ldr	r0, [pc, #164]	; (80038e4 <SSD1322_Screen_Radio+0x134>)
 8003840:	f002 fe58 	bl	80064f4 <prepare_RDS_text>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <SSD1322_Screen_Radio+0xaa>
	    {
		draw_text(buffer, (char *)RDStextbuffer, 20, 32, 5); //zwraca stringa
 800384a:	2305      	movs	r3, #5
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2320      	movs	r3, #32
 8003850:	2214      	movs	r2, #20
 8003852:	4925      	ldr	r1, [pc, #148]	; (80038e8 <SSD1322_Screen_Radio+0x138>)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fcdf 	bl	8003218 <draw_text>
//			//zrobić wtedy zmianę co 2 sec
//		    }
	    }

	/* Scale for frequency */
	draw_freq_scale(buffer, freq_scaled);
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <SSD1322_Screen_Radio+0x120>)
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f001 ffa5 	bl	80057b0 <draw_freq_scale>

	/* Draw RSSI wskaźnik */
	rssi_scaled = map(RDA5807_GetRSSI(), 0, 63, 0, 63);
 8003866:	f003 fdcd 	bl	8007404 <RDA5807_GetRSSI>
 800386a:	4603      	mov	r3, r0
 800386c:	4618      	mov	r0, r3
 800386e:	233f      	movs	r3, #63	; 0x3f
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2300      	movs	r3, #0
 8003874:	223f      	movs	r2, #63	; 0x3f
 8003876:	2100      	movs	r1, #0
 8003878:	f002 fcb4 	bl	80061e4 <map>
 800387c:	4603      	mov	r3, r0
 800387e:	b29a      	uxth	r2, r3
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <SSD1322_Screen_Radio+0x13c>)
 8003882:	801a      	strh	r2, [r3, #0]
	draw_rect_filled(buffer, 0, 62 - rssi_scaled, 10, 63, 5);
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <SSD1322_Screen_Radio+0x13c>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800388c:	b29a      	uxth	r2, r3
 800388e:	2305      	movs	r3, #5
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	233f      	movs	r3, #63	; 0x3f
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	230a      	movs	r3, #10
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fb05 	bl	8002eaa <draw_rect_filled>
	/* Draw antenna */
	select_font(&Custon_chars);
 80038a0:	4813      	ldr	r0, [pc, #76]	; (80038f0 <SSD1322_Screen_Radio+0x140>)
 80038a2:	f7ff fc11 	bl	80030c8 <select_font>
	draw_char(buffer, '!', 0, 16, 5); // ! - anntena in custom chars
 80038a6:	2305      	movs	r3, #5
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2310      	movs	r3, #16
 80038ac:	2200      	movs	r2, #0
 80038ae:	2121      	movs	r1, #33	; 0x21
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fc19 	bl	80030e8 <draw_char>

	send_buffer_to_OLED(buffer, 0, 0);
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff fce0 	bl	8003280 <send_buffer_to_OLED>
    }
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200037b9 	.word	0x200037b9
 80038cc:	200077f8 	.word	0x200077f8
 80038d0:	200001a6 	.word	0x200001a6
 80038d4:	0801e420 	.word	0x0801e420
 80038d8:	20000190 	.word	0x20000190
 80038dc:	20000454 	.word	0x20000454
 80038e0:	08023be0 	.word	0x08023be0
 80038e4:	200001a8 	.word	0x200001a8
 80038e8:	200003a4 	.word	0x200003a4
 80038ec:	200001c8 	.word	0x200001c8
 80038f0:	08018464 	.word	0x08018464

080038f4 <SSD1322_Screen_WakeUp>:

void SSD1322_Screen_WakeUp(uint8_t *const buffer)
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
	//zwiększanie głośności podczas budzenia
	fill_buffer(buffer, DISPLAY_BLACK);
 80038fc:	2100      	movs	r1, #0
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff f97a 	bl	8002bf8 <fill_buffer>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003904:	2200      	movs	r2, #0
 8003906:	491e      	ldr	r1, [pc, #120]	; (8003980 <SSD1322_Screen_WakeUp+0x8c>)
 8003908:	481e      	ldr	r0, [pc, #120]	; (8003984 <SSD1322_Screen_WakeUp+0x90>)
 800390a:	f00e ffd9 	bl	80128c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800390e:	2200      	movs	r2, #0
 8003910:	491d      	ldr	r1, [pc, #116]	; (8003988 <SSD1322_Screen_WakeUp+0x94>)
 8003912:	481c      	ldr	r0, [pc, #112]	; (8003984 <SSD1322_Screen_WakeUp+0x90>)
 8003914:	f00f f8be 	bl	8012a94 <HAL_RTC_GetDate>

	uint8_t Hours = sTime.Hours;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <SSD1322_Screen_WakeUp+0x8c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	73fb      	strb	r3, [r7, #15]
	uint8_t Minutes = sTime.Minutes;
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <SSD1322_Screen_WakeUp+0x8c>)
 8003920:	785b      	ldrb	r3, [r3, #1]
 8003922:	73bb      	strb	r3, [r7, #14]
	uint8_t Seconds = sTime.Seconds;
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <SSD1322_Screen_WakeUp+0x8c>)
 8003926:	789b      	ldrb	r3, [r3, #2]
 8003928:	737b      	strb	r3, [r7, #13]

	uint8_t Mode = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	733b      	strb	r3, [r7, #12]

	select_font(&FreeSerifBoldItalic9pt7b);
 800392e:	4817      	ldr	r0, [pc, #92]	; (800398c <SSD1322_Screen_WakeUp+0x98>)
 8003930:	f7ff fbca 	bl	80030c8 <select_font>
	draw_text(buffer, "WSTAWAJ !!!", 2, 58, 5);
 8003934:	2305      	movs	r3, #5
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	233a      	movs	r3, #58	; 0x3a
 800393a:	2202      	movs	r2, #2
 800393c:	4914      	ldr	r1, [pc, #80]	; (8003990 <SSD1322_Screen_WakeUp+0x9c>)
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fc6a 	bl	8003218 <draw_text>
	ChangeDateToArrayCharTime(ConvertArrayCharTime, Hours, Minutes, Seconds, Mode);
 8003944:	7b78      	ldrb	r0, [r7, #13]
 8003946:	7bba      	ldrb	r2, [r7, #14]
 8003948:	7bf9      	ldrb	r1, [r7, #15]
 800394a:	7b3b      	ldrb	r3, [r7, #12]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	4603      	mov	r3, r0
 8003950:	4810      	ldr	r0, [pc, #64]	; (8003994 <SSD1322_Screen_WakeUp+0xa0>)
 8003952:	f002 fb41 	bl	8005fd8 <ChangeDateToArrayCharTime>
	select_font(&FreeSerifBoldItalic24pt7b);
 8003956:	4810      	ldr	r0, [pc, #64]	; (8003998 <SSD1322_Screen_WakeUp+0xa4>)
 8003958:	f7ff fbb6 	bl	80030c8 <select_font>
	draw_text(buffer, (char*) ConvertArrayCharTime, 2, 33, 5);
 800395c:	2305      	movs	r3, #5
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2321      	movs	r3, #33	; 0x21
 8003962:	2202      	movs	r2, #2
 8003964:	490b      	ldr	r1, [pc, #44]	; (8003994 <SSD1322_Screen_WakeUp+0xa0>)
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fc56 	bl	8003218 <draw_text>
	//dodać budzik który bedzie sie ruszal, czyli odswiezac i zmieniac go dwa razy na sekunde
	//poprzez togglowanie flagi
	//albo usunac napis wstawaj i dac tylko czas i animacje budzika
	send_buffer_to_OLED(buffer, 0, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	2100      	movs	r1, #0
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff fc85 	bl	8003280 <send_buffer_to_OLED>
    }
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000178c 	.word	0x2000178c
 8003984:	20007828 	.word	0x20007828
 8003988:	200057bc 	.word	0x200057bc
 800398c:	08020f88 	.word	0x08020f88
 8003990:	08017dd4 	.word	0x08017dd4
 8003994:	2000015c 	.word	0x2000015c
 8003998:	08020760 	.word	0x08020760

0800399c <SSD1322_Screen_FFT>:

void SSD1322_Screen_FFT(uint8_t *const buffer, __attribute__((__unused__)) uint8_t *const FFT_out_buffer)
    {
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
	FFT_calc_done = 0;
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <SSD1322_Screen_FFT+0xe8>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
	select_font(&FreeSerif9pt7b);
 80039ac:	4836      	ldr	r0, [pc, #216]	; (8003a88 <SSD1322_Screen_FFT+0xec>)
 80039ae:	f7ff fb8b 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 80039b2:	2100      	movs	r1, #0
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff f91f 	bl	8002bf8 <fill_buffer>
//		    draw_text(buffer, (char*)FFT_back_right_str, 80, 12, 5);
//		break;
//		default:
//		break;
//	    }
	uint8_t j = 10; //begin of first prążek
 80039ba:	230a      	movs	r3, #10
 80039bc:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 22; i++)
 80039be:	2300      	movs	r3, #0
 80039c0:	73bb      	strb	r3, [r7, #14]
 80039c2:	e02f      	b.n	8003a24 <SSD1322_Screen_FFT+0x88>
	    {
		if ((63 - OutFreqArray[i]) < 13) //set max heigh of prążek
 80039c4:	7bbb      	ldrb	r3, [r7, #14]
 80039c6:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <SSD1322_Screen_FFT+0xf0>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	dc0e      	bgt.n	80039f0 <SSD1322_Screen_FFT+0x54>
		    {
			draw_rect_filled(buffer, j, 10, j + 5, 63, 5);
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	b299      	uxth	r1, r3
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3305      	adds	r3, #5
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2205      	movs	r2, #5
 80039e0:	9201      	str	r2, [sp, #4]
 80039e2:	223f      	movs	r2, #63	; 0x3f
 80039e4:	9200      	str	r2, [sp, #0]
 80039e6:	220a      	movs	r2, #10
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fa5e 	bl	8002eaa <draw_rect_filled>
 80039ee:	e013      	b.n	8003a18 <SSD1322_Screen_FFT+0x7c>
		    }
		else
		    {
			draw_rect_filled(buffer, j, 60 - OutFreqArray[i], j + 5, 63, 5);
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	b299      	uxth	r1, r3
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <SSD1322_Screen_FFT+0xf0>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3305      	adds	r3, #5
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2005      	movs	r0, #5
 8003a0c:	9001      	str	r0, [sp, #4]
 8003a0e:	203f      	movs	r0, #63	; 0x3f
 8003a10:	9000      	str	r0, [sp, #0]
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fa49 	bl	8002eaa <draw_rect_filled>
		    }
		j = j + 10;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	330a      	adds	r3, #10
 8003a1c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 22; i++)
 8003a1e:	7bbb      	ldrb	r3, [r7, #14]
 8003a20:	3301      	adds	r3, #1
 8003a22:	73bb      	strb	r3, [r7, #14]
 8003a24:	7bbb      	ldrb	r3, [r7, #14]
 8003a26:	2b15      	cmp	r3, #21
 8003a28:	d9cc      	bls.n	80039c4 <SSD1322_Screen_FFT+0x28>
	    }

	select_font(&TomThumb);
 8003a2a:	4819      	ldr	r0, [pc, #100]	; (8003a90 <SSD1322_Screen_FFT+0xf4>)
 8003a2c:	f7ff fb4c 	bl	80030c8 <select_font>
	draw_text(buffer, "50", 10, 5, 5);
 8003a30:	2305      	movs	r3, #5
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	2305      	movs	r3, #5
 8003a36:	220a      	movs	r2, #10
 8003a38:	4916      	ldr	r1, [pc, #88]	; (8003a94 <SSD1322_Screen_FFT+0xf8>)
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fbec 	bl	8003218 <draw_text>
	draw_text(buffer, "200", 60, 5, 5);
 8003a40:	2305      	movs	r3, #5
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2305      	movs	r3, #5
 8003a46:	223c      	movs	r2, #60	; 0x3c
 8003a48:	4913      	ldr	r1, [pc, #76]	; (8003a98 <SSD1322_Screen_FFT+0xfc>)
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fbe4 	bl	8003218 <draw_text>
	draw_text(buffer, "2k", 100, 5, 5);
 8003a50:	2305      	movs	r3, #5
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2305      	movs	r3, #5
 8003a56:	2264      	movs	r2, #100	; 0x64
 8003a58:	4910      	ldr	r1, [pc, #64]	; (8003a9c <SSD1322_Screen_FFT+0x100>)
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff fbdc 	bl	8003218 <draw_text>
	draw_text(buffer, "20k", 150, 5, 5);
 8003a60:	2305      	movs	r3, #5
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2305      	movs	r3, #5
 8003a66:	2296      	movs	r2, #150	; 0x96
 8003a68:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <SSD1322_Screen_FFT+0x104>)
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fbd4 	bl	8003218 <draw_text>

	send_buffer_to_OLED(buffer, 0, 0);
 8003a70:	2200      	movs	r2, #0
 8003a72:	2100      	movs	r1, #0
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fc03 	bl	8003280 <send_buffer_to_OLED>
    }
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	200001f9 	.word	0x200001f9
 8003a88:	0801dc8c 	.word	0x0801dc8c
 8003a8c:	200077fc 	.word	0x200077fc
 8003a90:	08023f98 	.word	0x08023f98
 8003a94:	08017de0 	.word	0x08017de0
 8003a98:	08017de4 	.word	0x08017de4
 8003a9c:	08017de8 	.word	0x08017de8
 8003aa0:	08017dec 	.word	0x08017dec

08003aa4 <SSD1322_Screen_UVMeter>:

void SSD1322_Screen_UVMeter(uint8_t *const buffer, UV_meter_t left_channel, UV_meter_t right_channel, const uint8_t mode)
    {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	4608      	mov	r0, r1
 8003aae:	4611      	mov	r1, r2
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	813b      	strh	r3, [r7, #8]
 8003aba:	4613      	mov	r3, r2
 8003abc:	71fb      	strb	r3, [r7, #7]
	//efekt spadającej wartości peak do włączenia
	select_font(&FreeSerifItalic9pt7b);
 8003abe:	4821      	ldr	r0, [pc, #132]	; (8003b44 <SSD1322_Screen_UVMeter+0xa0>)
 8003ac0:	f7ff fb02 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff f896 	bl	8002bf8 <fill_buffer>
	left_channel = map(left_channel, 20, 2100, 25, 254); //dodać zabezpieczenie przed przekroczeniem zakresów
 8003acc:	8978      	ldrh	r0, [r7, #10]
 8003ace:	23fe      	movs	r3, #254	; 0xfe
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2319      	movs	r3, #25
 8003ad4:	f640 0234 	movw	r2, #2100	; 0x834
 8003ad8:	2114      	movs	r1, #20
 8003ada:	f002 fb83 	bl	80061e4 <map>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
	right_channel = map(right_channel, 20, 2100, 25, 254);
 8003ae2:	8938      	ldrh	r0, [r7, #8]
 8003ae4:	23fe      	movs	r3, #254	; 0xfe
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2319      	movs	r3, #25
 8003aea:	f640 0234 	movw	r2, #2100	; 0x834
 8003aee:	2114      	movs	r1, #20
 8003af0:	f002 fb78 	bl	80061e4 <map>
 8003af4:	4603      	mov	r3, r0
 8003af6:	813b      	strh	r3, [r7, #8]
	else if(mode == UV_METER_BACK)
	    {
		//draw back label
	    }

	draw_UV_rectangle_scale(buffer, left_channel, right_channel);
 8003af8:	893a      	ldrh	r2, [r7, #8]
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	4619      	mov	r1, r3
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f001 fdc1 	bl	8005686 <draw_UV_rectangle_scale>
	draw_UV_lines_scale(buffer, left_channel, right_channel);
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f001 fe0f 	bl	800572e <draw_UV_lines_scale>

	draw_char(buffer, 'L', 2, 23, 10); // powinien być wyświetlany czy to jest lewy front czy prawy front
 8003b10:	230a      	movs	r3, #10
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2317      	movs	r3, #23
 8003b16:	2202      	movs	r2, #2
 8003b18:	214c      	movs	r1, #76	; 0x4c
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff fae4 	bl	80030e8 <draw_char>
	draw_char(buffer, 'P', 2, 55, 10);
 8003b20:	230a      	movs	r3, #10
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2337      	movs	r3, #55	; 0x37
 8003b26:	2202      	movs	r2, #2
 8003b28:	2150      	movs	r1, #80	; 0x50
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff fadc 	bl	80030e8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fba3 	bl	8003280 <send_buffer_to_OLED>
    }
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	080237c0 	.word	0x080237c0

08003b48 <SSD1322_Screen_OFF>:

void SSD1322_Screen_OFF(uint8_t *const buffer)
    {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
	select_font(&FreeSerif9pt7b);
 8003b50:	480b      	ldr	r0, [pc, #44]	; (8003b80 <SSD1322_Screen_OFF+0x38>)
 8003b52:	f7ff fab9 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 8003b56:	2100      	movs	r1, #0
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff f84d 	bl	8002bf8 <fill_buffer>
	draw_text(buffer, "Screen_OFF  (:", 5, 32, 5);
 8003b5e:	2305      	movs	r3, #5
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2320      	movs	r3, #32
 8003b64:	2205      	movs	r2, #5
 8003b66:	4907      	ldr	r1, [pc, #28]	; (8003b84 <SSD1322_Screen_OFF+0x3c>)
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff fb55 	bl	8003218 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2100      	movs	r1, #0
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fb84 	bl	8003280 <send_buffer_to_OLED>
    }
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	0801dc8c 	.word	0x0801dc8c
 8003b84:	08017df0 	.word	0x08017df0

08003b88 <SSD1322_Screen_GoodBye>:

void SSD1322_Screen_GoodBye(uint8_t *const buffer)
    {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
	//dodać argument z wyświetlanym imieniem użytkownika i pożegnanie do niego
	fill_buffer(buffer, 0);
 8003b90:	2100      	movs	r1, #0
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff f830 	bl	8002bf8 <fill_buffer>
	select_font(&FreeSerif9pt7b);
 8003b98:	4809      	ldr	r0, [pc, #36]	; (8003bc0 <SSD1322_Screen_GoodBye+0x38>)
 8003b9a:	f7ff fa95 	bl	80030c8 <select_font>
	draw_text(buffer, "GoodBye  (:", 5, 32, 5);
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2320      	movs	r3, #32
 8003ba4:	2205      	movs	r2, #5
 8003ba6:	4907      	ldr	r1, [pc, #28]	; (8003bc4 <SSD1322_Screen_GoodBye+0x3c>)
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fb35 	bl	8003218 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fb64 	bl	8003280 <send_buffer_to_OLED>
    }
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	0801dc8c 	.word	0x0801dc8c
 8003bc4:	08017e00 	.word	0x08017e00

08003bc8 <SSD1322_Screen_SetClock>:

void SSD1322_Screen_SetClock(uint8_t *const buffer)
    {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
	fill_buffer(buffer, 0);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff f810 	bl	8002bf8 <fill_buffer>
	select_font(&FreeSerif9pt7b);
 8003bd8:	4809      	ldr	r0, [pc, #36]	; (8003c00 <SSD1322_Screen_SetClock+0x38>)
 8003bda:	f7ff fa75 	bl	80030c8 <select_font>
	draw_text(buffer, "SetClock  (:", 5, 32, 5);
 8003bde:	2305      	movs	r3, #5
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2320      	movs	r3, #32
 8003be4:	2205      	movs	r2, #5
 8003be6:	4907      	ldr	r1, [pc, #28]	; (8003c04 <SSD1322_Screen_SetClock+0x3c>)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff fb15 	bl	8003218 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 8003bee:	2200      	movs	r2, #0
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fb44 	bl	8003280 <send_buffer_to_OLED>
    }
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	0801dc8c 	.word	0x0801dc8c
 8003c04:	08017e0c 	.word	0x08017e0c

08003c08 <SSD1322_Screen_SetAlarm>:

void SSD1322_Screen_SetAlarm(uint8_t *const buffer)
    {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	6078      	str	r0, [r7, #4]
	/* Alaways reset display buffer to zero*/
	fill_buffer(buffer, DISPLAY_BLACK);
 8003c10:	2100      	movs	r1, #0
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe fff0 	bl	8002bf8 <fill_buffer>
	select_font(&FreeSerifItalic9pt7b);
 8003c18:	48a1      	ldr	r0, [pc, #644]	; (8003ea0 <SSD1322_Screen_SetAlarm+0x298>)
 8003c1a:	f7ff fa55 	bl	80030c8 <select_font>

	/* Checks if display mode is set to preview set alarms or modify them  */
	if (PreviewAlarm == true)
 8003c1e:	4ba1      	ldr	r3, [pc, #644]	; (8003ea4 <SSD1322_Screen_SetAlarm+0x29c>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 808c 	beq.w	8003d40 <SSD1322_Screen_SetAlarm+0x138>
	    {
		/* Drawing a pointer to selected ALARM.  */
		if(alarm_set_A_or_B == true) 	draw_text(buffer, "--->", 135, 25, 5);
 8003c28:	4b9f      	ldr	r3, [pc, #636]	; (8003ea8 <SSD1322_Screen_SetAlarm+0x2a0>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <SSD1322_Screen_SetAlarm+0x38>
 8003c30:	2305      	movs	r3, #5
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2319      	movs	r3, #25
 8003c36:	2287      	movs	r2, #135	; 0x87
 8003c38:	499c      	ldr	r1, [pc, #624]	; (8003eac <SSD1322_Screen_SetAlarm+0x2a4>)
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff faec 	bl	8003218 <draw_text>
		if(alarm_set_A_or_B == false) 	draw_text(buffer, "--->", 135, 55, 5);
 8003c40:	4b99      	ldr	r3, [pc, #612]	; (8003ea8 <SSD1322_Screen_SetAlarm+0x2a0>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f083 0301 	eor.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <SSD1322_Screen_SetAlarm+0x56>
 8003c4e:	2305      	movs	r3, #5
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2337      	movs	r3, #55	; 0x37
 8003c54:	2287      	movs	r2, #135	; 0x87
 8003c56:	4995      	ldr	r1, [pc, #596]	; (8003eac <SSD1322_Screen_SetAlarm+0x2a4>)
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fadd 	bl	8003218 <draw_text>

		/* Drawing filled rectangle if alarm A is SET otherwise just a rectangle */
		if(IS_ALARM_SET_A == false)	draw_rect(buffer, 240, 15, 250, 25, 5);
 8003c5e:	4b94      	ldr	r3, [pc, #592]	; (8003eb0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	f083 0301 	eor.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <SSD1322_Screen_SetAlarm+0x78>
 8003c6c:	2305      	movs	r3, #5
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	2319      	movs	r3, #25
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	23fa      	movs	r3, #250	; 0xfa
 8003c76:	220f      	movs	r2, #15
 8003c78:	21f0      	movs	r1, #240	; 0xf0
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff f8e0 	bl	8002e40 <draw_rect>
		if(IS_ALARM_SET_A == true)	draw_rect_filled(buffer, 240, 15, 250, 25, 5); //może zmienić na X
 8003c80:	4b8b      	ldr	r3, [pc, #556]	; (8003eb0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <SSD1322_Screen_SetAlarm+0x94>
 8003c88:	2305      	movs	r3, #5
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	2319      	movs	r3, #25
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	23fa      	movs	r3, #250	; 0xfa
 8003c92:	220f      	movs	r2, #15
 8003c94:	21f0      	movs	r1, #240	; 0xf0
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff f907 	bl	8002eaa <draw_rect_filled>
		//draw_rect	(buffer, x0, y0, x1, y1, 15);

		/* Drawing filled rectangle if alarm B is SET otherwise just a rectangle */
		if(IS_ALARM_SET_B == false)	draw_rect(buffer, 240, 45, 250, 55, 5);
 8003c9c:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <SSD1322_Screen_SetAlarm+0x2ac>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f083 0301 	eor.w	r3, r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <SSD1322_Screen_SetAlarm+0xb8>
 8003caa:	2305      	movs	r3, #5
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	2337      	movs	r3, #55	; 0x37
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	23fa      	movs	r3, #250	; 0xfa
 8003cb4:	222d      	movs	r2, #45	; 0x2d
 8003cb6:	21f0      	movs	r1, #240	; 0xf0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff f8c1 	bl	8002e40 <draw_rect>
 8003cbe:	e009      	b.n	8003cd4 <SSD1322_Screen_SetAlarm+0xcc>
		else 				draw_rect_filled(buffer, 240, 45, 250, 55, 5); //może zmienić na X
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	2337      	movs	r3, #55	; 0x37
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	23fa      	movs	r3, #250	; 0xfa
 8003cca:	222d      	movs	r2, #45	; 0x2d
 8003ccc:	21f0      	movs	r1, #240	; 0xf0
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7ff f8eb 	bl	8002eaa <draw_rect_filled>

		/* Drawing a pointer to selected ALARM.  */
		draw_text(buffer, "Alarm A", 172, 25, 5);
 8003cd4:	2305      	movs	r3, #5
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2319      	movs	r3, #25
 8003cda:	22ac      	movs	r2, #172	; 0xac
 8003cdc:	4976      	ldr	r1, [pc, #472]	; (8003eb8 <SSD1322_Screen_SetAlarm+0x2b0>)
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fa9a 	bl	8003218 <draw_text>
		draw_text(buffer, "Alarm B", 172, 55, 5);
 8003ce4:	2305      	movs	r3, #5
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2337      	movs	r3, #55	; 0x37
 8003cea:	22ac      	movs	r2, #172	; 0xac
 8003cec:	4973      	ldr	r1, [pc, #460]	; (8003ebc <SSD1322_Screen_SetAlarm+0x2b4>)
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fa92 	bl	8003218 <draw_text>

		/* Drawing a pointer to selected ALARM.  */
		select_font(&FreeSerifItalic24pt7b);
 8003cf4:	4872      	ldr	r0, [pc, #456]	; (8003ec0 <SSD1322_Screen_SetAlarm+0x2b8>)
 8003cf6:	f7ff f9e7 	bl	80030c8 <select_font>
		ChangeDateToArrayCharTime(ConvertArrayCharTime, Alarm.AlarmTime.Hours, Alarm.AlarmTime.Minutes, 0, 1);
 8003cfa:	4b72      	ldr	r3, [pc, #456]	; (8003ec4 <SSD1322_Screen_SetAlarm+0x2bc>)
 8003cfc:	7819      	ldrb	r1, [r3, #0]
 8003cfe:	4b71      	ldr	r3, [pc, #452]	; (8003ec4 <SSD1322_Screen_SetAlarm+0x2bc>)
 8003d00:	785a      	ldrb	r2, [r3, #1]
 8003d02:	2301      	movs	r3, #1
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2300      	movs	r3, #0
 8003d08:	486f      	ldr	r0, [pc, #444]	; (8003ec8 <SSD1322_Screen_SetAlarm+0x2c0>)
 8003d0a:	f002 f965 	bl	8005fd8 <ChangeDateToArrayCharTime>
		draw_text(buffer, (char*) ConvertArrayCharTime, 5, 32, 5);
 8003d0e:	2305      	movs	r3, #5
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2320      	movs	r3, #32
 8003d14:	2205      	movs	r2, #5
 8003d16:	496c      	ldr	r1, [pc, #432]	; (8003ec8 <SSD1322_Screen_SetAlarm+0x2c0>)
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fa7d 	bl	8003218 <draw_text>

		/* Drawing alarm mode */
		select_font(&FreeSerifItalic9pt7b);
 8003d1e:	4860      	ldr	r0, [pc, #384]	; (8003ea0 <SSD1322_Screen_SetAlarm+0x298>)
 8003d20:	f7ff f9d2 	bl	80030c8 <select_font>
		Set_Alarm_Mode(RTC_typeOfAlarm);
 8003d24:	4b69      	ldr	r3, [pc, #420]	; (8003ecc <SSD1322_Screen_SetAlarm+0x2c4>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f005 f9b5 	bl	8009098 <Set_Alarm_Mode>
		draw_text(buffer, (char*) AlarmMode, 5, 60, 5);
 8003d2e:	2305      	movs	r3, #5
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	233c      	movs	r3, #60	; 0x3c
 8003d34:	2205      	movs	r2, #5
 8003d36:	4966      	ldr	r1, [pc, #408]	; (8003ed0 <SSD1322_Screen_SetAlarm+0x2c8>)
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fa6d 	bl	8003218 <draw_text>
 8003d3e:	e0a5      	b.n	8003e8c <SSD1322_Screen_SetAlarm+0x284>
	    }
	else if(PreviewAlarm == false)
 8003d40:	4b58      	ldr	r3, [pc, #352]	; (8003ea4 <SSD1322_Screen_SetAlarm+0x29c>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	f083 0301 	eor.w	r3, r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 809e 	beq.w	8003e8c <SSD1322_Screen_SetAlarm+0x284>
	    {
		if((IS_ALARM_SET_A == false) && (IS_ALARM_SET_B == false))
 8003d50:	4b57      	ldr	r3, [pc, #348]	; (8003eb0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f083 0301 	eor.w	r3, r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01a      	beq.n	8003d94 <SSD1322_Screen_SetAlarm+0x18c>
 8003d5e:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <SSD1322_Screen_SetAlarm+0x2ac>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <SSD1322_Screen_SetAlarm+0x18c>
		    {
			select_font(&FreeMonoOblique24pt7b);
 8003d6c:	4859      	ldr	r0, [pc, #356]	; (8003ed4 <SSD1322_Screen_SetAlarm+0x2cc>)
 8003d6e:	f7ff f9ab 	bl	80030c8 <select_font>
			draw_text(buffer, "ALARMY", 2, 30, 5);
 8003d72:	2305      	movs	r3, #5
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	231e      	movs	r3, #30
 8003d78:	2202      	movs	r2, #2
 8003d7a:	4957      	ldr	r1, [pc, #348]	; (8003ed8 <SSD1322_Screen_SetAlarm+0x2d0>)
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fa4b 	bl	8003218 <draw_text>
			draw_text(buffer, "OFF", 2, 62, 5);
 8003d82:	2305      	movs	r3, #5
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	233e      	movs	r3, #62	; 0x3e
 8003d88:	2202      	movs	r2, #2
 8003d8a:	4954      	ldr	r1, [pc, #336]	; (8003edc <SSD1322_Screen_SetAlarm+0x2d4>)
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fa43 	bl	8003218 <draw_text>
 8003d92:	e07b      	b.n	8003e8c <SSD1322_Screen_SetAlarm+0x284>
		    }
		else
		    {	//tutaj zmienic czcionkę na ładną
			if (IS_ALARM_SET_A == true)
 8003d94:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d022      	beq.n	8003de2 <SSD1322_Screen_SetAlarm+0x1da>
			    {
				select_font(&FreeSerif9pt7b);
 8003d9c:	4850      	ldr	r0, [pc, #320]	; (8003ee0 <SSD1322_Screen_SetAlarm+0x2d8>)
 8003d9e:	f7ff f993 	bl	80030c8 <select_font>
				ChangeDateToArrayCharTime(ConvertArrayCharTime, Alarm_A.AlarmTime.Hours, Alarm_A.AlarmTime.Minutes, 0, 1);
 8003da2:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <SSD1322_Screen_SetAlarm+0x2dc>)
 8003da4:	7819      	ldrb	r1, [r3, #0]
 8003da6:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <SSD1322_Screen_SetAlarm+0x2dc>)
 8003da8:	785a      	ldrb	r2, [r3, #1]
 8003daa:	2301      	movs	r3, #1
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2300      	movs	r3, #0
 8003db0:	4845      	ldr	r0, [pc, #276]	; (8003ec8 <SSD1322_Screen_SetAlarm+0x2c0>)
 8003db2:	f002 f911 	bl	8005fd8 <ChangeDateToArrayCharTime>
				draw_text(buffer, (char*)buffer, 2, 30, 5);
 8003db6:	2305      	movs	r3, #5
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	231e      	movs	r3, #30
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fa29 	bl	8003218 <draw_text>
				Set_Alarm_Mode(RTC_typeOfAlarm_A);
 8003dc6:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <SSD1322_Screen_SetAlarm+0x2e0>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f005 f964 	bl	8009098 <Set_Alarm_Mode>
				draw_text(buffer, (char*) AlarmMode, 55, 30, 5);
 8003dd0:	2305      	movs	r3, #5
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	231e      	movs	r3, #30
 8003dd6:	2237      	movs	r2, #55	; 0x37
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <SSD1322_Screen_SetAlarm+0x2c8>)
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fa1c 	bl	8003218 <draw_text>
 8003de0:	e00e      	b.n	8003e00 <SSD1322_Screen_SetAlarm+0x1f8>
			    }
			else if(IS_ALARM_SET_A == false)
 8003de2:	4b33      	ldr	r3, [pc, #204]	; (8003eb0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <SSD1322_Screen_SetAlarm+0x1f8>
			    {
				draw_text(buffer, "OFF", 2, 30, 5);
 8003df0:	2305      	movs	r3, #5
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	231e      	movs	r3, #30
 8003df6:	2202      	movs	r2, #2
 8003df8:	4938      	ldr	r1, [pc, #224]	; (8003edc <SSD1322_Screen_SetAlarm+0x2d4>)
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fa0c 	bl	8003218 <draw_text>
			    }
			if (IS_ALARM_SET_B == true)
 8003e00:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <SSD1322_Screen_SetAlarm+0x2ac>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d022      	beq.n	8003e4e <SSD1322_Screen_SetAlarm+0x246>
			    {
				select_font(&FreeSerif9pt7b);
 8003e08:	4835      	ldr	r0, [pc, #212]	; (8003ee0 <SSD1322_Screen_SetAlarm+0x2d8>)
 8003e0a:	f7ff f95d 	bl	80030c8 <select_font>
				ChangeDateToArrayCharTime(ConvertArrayCharTime, Alarm_B.AlarmTime.Hours, Alarm_B.AlarmTime.Minutes, 0, 1);
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <SSD1322_Screen_SetAlarm+0x2e4>)
 8003e10:	7819      	ldrb	r1, [r3, #0]
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <SSD1322_Screen_SetAlarm+0x2e4>)
 8003e14:	785a      	ldrb	r2, [r3, #1]
 8003e16:	2301      	movs	r3, #1
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	482a      	ldr	r0, [pc, #168]	; (8003ec8 <SSD1322_Screen_SetAlarm+0x2c0>)
 8003e1e:	f002 f8db 	bl	8005fd8 <ChangeDateToArrayCharTime>
				draw_text(buffer, (char*)ConvertArrayCharTime, 2, 60, 5);
 8003e22:	2305      	movs	r3, #5
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	233c      	movs	r3, #60	; 0x3c
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4927      	ldr	r1, [pc, #156]	; (8003ec8 <SSD1322_Screen_SetAlarm+0x2c0>)
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff f9f3 	bl	8003218 <draw_text>
				Set_Alarm_Mode(RTC_typeOfAlarm_B);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <SSD1322_Screen_SetAlarm+0x2e8>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f005 f92e 	bl	8009098 <Set_Alarm_Mode>
				draw_text(buffer, (char*) AlarmMode, 55, 60, 5);
 8003e3c:	2305      	movs	r3, #5
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	233c      	movs	r3, #60	; 0x3c
 8003e42:	2237      	movs	r2, #55	; 0x37
 8003e44:	4922      	ldr	r1, [pc, #136]	; (8003ed0 <SSD1322_Screen_SetAlarm+0x2c8>)
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff f9e6 	bl	8003218 <draw_text>
 8003e4c:	e00e      	b.n	8003e6c <SSD1322_Screen_SetAlarm+0x264>
			    }
			else if(IS_ALARM_SET_B == false)
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <SSD1322_Screen_SetAlarm+0x2ac>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	f083 0301 	eor.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <SSD1322_Screen_SetAlarm+0x264>
			    {
				draw_text(buffer, "OFF", 2, 60, 5);
 8003e5c:	2305      	movs	r3, #5
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	233c      	movs	r3, #60	; 0x3c
 8003e62:	2202      	movs	r2, #2
 8003e64:	491d      	ldr	r1, [pc, #116]	; (8003edc <SSD1322_Screen_SetAlarm+0x2d4>)
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff f9d6 	bl	8003218 <draw_text>
			    }
			draw_text(buffer, "Alarm A", 190, 30, 5);
 8003e6c:	2305      	movs	r3, #5
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	231e      	movs	r3, #30
 8003e72:	22be      	movs	r2, #190	; 0xbe
 8003e74:	4910      	ldr	r1, [pc, #64]	; (8003eb8 <SSD1322_Screen_SetAlarm+0x2b0>)
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff f9ce 	bl	8003218 <draw_text>
			draw_text(buffer, "Alarm B", 190, 60, 5);
 8003e7c:	2305      	movs	r3, #5
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	233c      	movs	r3, #60	; 0x3c
 8003e82:	22be      	movs	r2, #190	; 0xbe
 8003e84:	490d      	ldr	r1, [pc, #52]	; (8003ebc <SSD1322_Screen_SetAlarm+0x2b4>)
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff f9c6 	bl	8003218 <draw_text>
		    }
	    }

	send_buffer_to_OLED(buffer, 0, 0);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff f9f5 	bl	8003280 <send_buffer_to_OLED>
    }
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	080237c0 	.word	0x080237c0
 8003ea4:	200000ad 	.word	0x200000ad
 8003ea8:	200000ac 	.word	0x200000ac
 8003eac:	08017e1c 	.word	0x08017e1c
 8003eb0:	200002ae 	.word	0x200002ae
 8003eb4:	200004f6 	.word	0x200004f6
 8003eb8:	08017e24 	.word	0x08017e24
 8003ebc:	08017e2c 	.word	0x08017e2c
 8003ec0:	0802302c 	.word	0x0802302c
 8003ec4:	2000074c 	.word	0x2000074c
 8003ec8:	2000015c 	.word	0x2000015c
 8003ecc:	2000050c 	.word	0x2000050c
 8003ed0:	2000055c 	.word	0x2000055c
 8003ed4:	0801a0a0 	.word	0x0801a0a0
 8003ed8:	08017e34 	.word	0x08017e34
 8003edc:	08017e3c 	.word	0x08017e3c
 8003ee0:	0801dc8c 	.word	0x0801dc8c
 8003ee4:	20000718 	.word	0x20000718
 8003ee8:	20000508 	.word	0x20000508
 8003eec:	200077c8 	.word	0x200077c8
 8003ef0:	2000050b 	.word	0x2000050b

08003ef4 <SSD1322_Screen_Settings>:

void SSD1322_Screen_Settings(uint8_t *const buffer)
    {
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	6078      	str	r0, [r7, #4]
	select_font(&FreeMonoOblique9pt7b);
 8003efc:	482f      	ldr	r0, [pc, #188]	; (8003fbc <SSD1322_Screen_Settings+0xc8>)
 8003efe:	f7ff f8e3 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7fe fe77 	bl	8002bf8 <fill_buffer>

	if (settings_page == PAGE_SETTINGS_1)
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <SSD1322_Screen_Settings+0xcc>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d12e      	bne.n	8003f70 <SSD1322_Screen_Settings+0x7c>
	    {
		draw_text(buffer, "Screen time:", 15, 15, 5);
 8003f12:	2305      	movs	r3, #5
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	230f      	movs	r3, #15
 8003f18:	220f      	movs	r2, #15
 8003f1a:	492a      	ldr	r1, [pc, #168]	; (8003fc4 <SSD1322_Screen_Settings+0xd0>)
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff f97b 	bl	8003218 <draw_text>
		draw_text(buffer, "Alarm A:", 15, 30, 5);
 8003f22:	2305      	movs	r3, #5
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	231e      	movs	r3, #30
 8003f28:	220f      	movs	r2, #15
 8003f2a:	4927      	ldr	r1, [pc, #156]	; (8003fc8 <SSD1322_Screen_Settings+0xd4>)
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff f973 	bl	8003218 <draw_text>
		draw_text(buffer, "Alarm B:", 15, 45, 5);
 8003f32:	2305      	movs	r3, #5
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	232d      	movs	r3, #45	; 0x2d
 8003f38:	220f      	movs	r2, #15
 8003f3a:	4924      	ldr	r1, [pc, #144]	; (8003fcc <SSD1322_Screen_Settings+0xd8>)
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff f96b 	bl	8003218 <draw_text>
		draw_text(buffer, "User Name:", 15, 60, 5);
 8003f42:	2305      	movs	r3, #5
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	233c      	movs	r3, #60	; 0x3c
 8003f48:	220f      	movs	r2, #15
 8003f4a:	4921      	ldr	r1, [pc, #132]	; (8003fd0 <SSD1322_Screen_Settings+0xdc>)
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff f963 	bl	8003218 <draw_text>

		draw_refreshTime(buffer);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f001 fda4 	bl	8005aa0 <draw_refreshTime>
		draw_alarmsSource(buffer);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f001 fc97 	bl	800588c <draw_alarmsSource>
		draw_text(buffer, (char *)user_name, 125, 60, 5);
 8003f5e:	2305      	movs	r3, #5
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	233c      	movs	r3, #60	; 0x3c
 8003f64:	227d      	movs	r2, #125	; 0x7d
 8003f66:	491b      	ldr	r1, [pc, #108]	; (8003fd4 <SSD1322_Screen_Settings+0xe0>)
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff f955 	bl	8003218 <draw_text>
 8003f6e:	e019      	b.n	8003fa4 <SSD1322_Screen_Settings+0xb0>
	    }
	else if(settings_page == PAGE_SETTINGS_2)
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <SSD1322_Screen_Settings+0xcc>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d115      	bne.n	8003fa4 <SSD1322_Screen_Settings+0xb0>
	    {
		draw_text(buffer, "Display mode:", 15, 15, 5);
 8003f78:	2305      	movs	r3, #5
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	230f      	movs	r3, #15
 8003f7e:	220f      	movs	r2, #15
 8003f80:	4915      	ldr	r1, [pc, #84]	; (8003fd8 <SSD1322_Screen_Settings+0xe4>)
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff f948 	bl	8003218 <draw_text>
		draw_text(buffer, "Power LED:", 15, 30, 5);
 8003f88:	2305      	movs	r3, #5
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	231e      	movs	r3, #30
 8003f8e:	220f      	movs	r2, #15
 8003f90:	4912      	ldr	r1, [pc, #72]	; (8003fdc <SSD1322_Screen_Settings+0xe8>)
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff f940 	bl	8003218 <draw_text>
		//another case for Instat power off/slow change volume to zero
		draw_powerLED(buffer);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f001 fdf9 	bl	8005b90 <draw_powerLED>
		draw_displayMode(buffer);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 fe56 	bl	8005c50 <draw_displayMode>
//		draw_text(buffer, "User Name:", 15, 60, 5);


	    }

	draw_pointer(buffer);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 fd1f 	bl	80059e8 <draw_pointer>
	send_buffer_to_OLED(buffer, 0, 0);
 8003faa:	2200      	movs	r2, #0
 8003fac:	2100      	movs	r1, #0
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff f966 	bl	8003280 <send_buffer_to_OLED>
    }
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	0801a780 	.word	0x0801a780
 8003fc0:	200001a2 	.word	0x200001a2
 8003fc4:	08017e40 	.word	0x08017e40
 8003fc8:	08017e50 	.word	0x08017e50
 8003fcc:	08017e5c 	.word	0x08017e5c
 8003fd0:	08017e68 	.word	0x08017e68
 8003fd4:	200004fc 	.word	0x200004fc
 8003fd8:	08017e74 	.word	0x08017e74
 8003fdc:	08017e84 	.word	0x08017e84

08003fe0 <SSD1322_Screen_USB>:

void SSD1322_Screen_USB(uint8_t *const buffer)
    {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
	select_font(&FreeSerif9pt7b);
 8003fe8:	480b      	ldr	r0, [pc, #44]	; (8004018 <SSD1322_Screen_USB+0x38>)
 8003fea:	f7ff f86d 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fe fe01 	bl	8002bf8 <fill_buffer>
	draw_text(buffer, "USB", 5, 32, 5);
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2320      	movs	r3, #32
 8003ffc:	2205      	movs	r2, #5
 8003ffe:	4907      	ldr	r1, [pc, #28]	; (800401c <SSD1322_Screen_USB+0x3c>)
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff f909 	bl	8003218 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 8004006:	2200      	movs	r2, #0
 8004008:	2100      	movs	r1, #0
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff f938 	bl	8003280 <send_buffer_to_OLED>
    }
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	0801dc8c 	.word	0x0801dc8c
 800401c:	08017e90 	.word	0x08017e90

08004020 <SSD1322_Screen_Time_Bouncing>:

void SSD1322_Screen_Time_Bouncing(uint8_t *const buffer)
    {
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
	static uint32_t random_y_from = 20; 	//nubmer beetwen 0...63
	static uint32_t random_x_to = 0; 	//number beetwen 0...254
	static uint32_t random_y_to = 0; 	//nubmer beetwen 0...63
	//static volatile uint8_t bouncing_flag;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004028:	2200      	movs	r2, #0
 800402a:	4919      	ldr	r1, [pc, #100]	; (8004090 <SSD1322_Screen_Time_Bouncing+0x70>)
 800402c:	4819      	ldr	r0, [pc, #100]	; (8004094 <SSD1322_Screen_Time_Bouncing+0x74>)
 800402e:	f00e fc47 	bl	80128c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004032:	2200      	movs	r2, #0
 8004034:	4918      	ldr	r1, [pc, #96]	; (8004098 <SSD1322_Screen_Time_Bouncing+0x78>)
 8004036:	4817      	ldr	r0, [pc, #92]	; (8004094 <SSD1322_Screen_Time_Bouncing+0x74>)
 8004038:	f00e fd2c 	bl	8012a94 <HAL_RTC_GetDate>
	select_font(&FreeSansBold9pt7b);
 800403c:	4817      	ldr	r0, [pc, #92]	; (800409c <SSD1322_Screen_Time_Bouncing+0x7c>)
 800403e:	f7ff f843 	bl	80030c8 <select_font>

	if (get_random_coords(&random_x_to, &random_y_to) == true)
 8004042:	4917      	ldr	r1, [pc, #92]	; (80040a0 <SSD1322_Screen_Time_Bouncing+0x80>)
 8004044:	4817      	ldr	r0, [pc, #92]	; (80040a4 <SSD1322_Screen_Time_Bouncing+0x84>)
 8004046:	f002 fac1 	bl	80065cc <get_random_coords>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <SSD1322_Screen_Time_Bouncing+0x66>
	    {
		make_array(buffer, random_x_from, random_y_from, random_x_to, random_y_to, 5);
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <SSD1322_Screen_Time_Bouncing+0x88>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b299      	uxth	r1, r3
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <SSD1322_Screen_Time_Bouncing+0x8c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	b29a      	uxth	r2, r3
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <SSD1322_Screen_Time_Bouncing+0x84>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	b298      	uxth	r0, r3
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <SSD1322_Screen_Time_Bouncing+0x80>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	2405      	movs	r4, #5
 800406a:	9401      	str	r4, [sp, #4]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4603      	mov	r3, r0
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f002 faf1 	bl	8006658 <make_array>
		random_x_from = random_x_to;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <SSD1322_Screen_Time_Bouncing+0x84>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <SSD1322_Screen_Time_Bouncing+0x88>)
 800407c:	6013      	str	r3, [r2, #0]
		random_y_from = random_y_to;
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <SSD1322_Screen_Time_Bouncing+0x80>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <SSD1322_Screen_Time_Bouncing+0x8c>)
 8004084:	6013      	str	r3, [r2, #0]
	    }
    }
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	bf00      	nop
 8004090:	2000178c 	.word	0x2000178c
 8004094:	20007828 	.word	0x20007828
 8004098:	200057bc 	.word	0x200057bc
 800409c:	0801b6e0 	.word	0x0801b6e0
 80040a0:	200001d0 	.word	0x200001d0
 80040a4:	200001cc 	.word	0x200001cc
 80040a8:	200001d4 	.word	0x200001d4
 80040ac:	20000090 	.word	0x20000090

080040b0 <SSD1322_Screen_SetInput>:

void SSD1322_Screen_SetInput(uint8_t *const buffer)
    {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	6078      	str	r0, [r7, #4]
	select_font(&FreeSerif9pt7b);
 80040b8:	4859      	ldr	r0, [pc, #356]	; (8004220 <SSD1322_Screen_SetInput+0x170>)
 80040ba:	f7ff f805 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 80040be:	2100      	movs	r1, #0
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fe fd99 	bl	8002bf8 <fill_buffer>
	draw_text(buffer, "Front input:", 10, 20, 5);
 80040c6:	2305      	movs	r3, #5
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	2314      	movs	r3, #20
 80040cc:	220a      	movs	r2, #10
 80040ce:	4955      	ldr	r1, [pc, #340]	; (8004224 <SSD1322_Screen_SetInput+0x174>)
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff f8a1 	bl	8003218 <draw_text>
	draw_text(buffer, "Back  input:", 10, 50, 5);
 80040d6:	2305      	movs	r3, #5
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	2332      	movs	r3, #50	; 0x32
 80040dc:	220a      	movs	r2, #10
 80040de:	4952      	ldr	r1, [pc, #328]	; (8004228 <SSD1322_Screen_SetInput+0x178>)
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff f899 	bl	8003218 <draw_text>
	switch (TDA7719_config.set_input_front)
 80040e6:	4b51      	ldr	r3, [pc, #324]	; (800422c <SSD1322_Screen_SetInput+0x17c>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	d843      	bhi.n	8004178 <SSD1322_Screen_SetInput+0xc8>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <SSD1322_Screen_SetInput+0x48>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	08004151 	.word	0x08004151
 80040fc:	08004115 	.word	0x08004115
 8004100:	08004129 	.word	0x08004129
 8004104:	08004179 	.word	0x08004179
 8004108:	08004179 	.word	0x08004179
 800410c:	0800413d 	.word	0x0800413d
 8004110:	08004165 	.word	0x08004165
	    {
		case JACK_1:
		    draw_text(buffer, (char *)Jack_1, 100, 20, 5);
 8004114:	4b46      	ldr	r3, [pc, #280]	; (8004230 <SSD1322_Screen_SetInput+0x180>)
 8004116:	6819      	ldr	r1, [r3, #0]
 8004118:	2305      	movs	r3, #5
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2314      	movs	r3, #20
 800411e:	2264      	movs	r2, #100	; 0x64
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff f879 	bl	8003218 <draw_text>
		break;
 8004126:	e028      	b.n	800417a <SSD1322_Screen_SetInput+0xca>
		case JACK_2:
		    draw_text(buffer, (char *)Jack_2, 100, 20, 5);
 8004128:	4b42      	ldr	r3, [pc, #264]	; (8004234 <SSD1322_Screen_SetInput+0x184>)
 800412a:	6819      	ldr	r1, [r3, #0]
 800412c:	2305      	movs	r3, #5
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2314      	movs	r3, #20
 8004132:	2264      	movs	r2, #100	; 0x64
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff f86f 	bl	8003218 <draw_text>
		break;
 800413a:	e01e      	b.n	800417a <SSD1322_Screen_SetInput+0xca>
		case RADIO:
		    draw_text(buffer, (char *)Radio, 100, 20, 5);
 800413c:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <SSD1322_Screen_SetInput+0x188>)
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	2305      	movs	r3, #5
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2314      	movs	r3, #20
 8004146:	2264      	movs	r2, #100	; 0x64
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff f865 	bl	8003218 <draw_text>
		break;
 800414e:	e014      	b.n	800417a <SSD1322_Screen_SetInput+0xca>
		case BLUETOOTH:
		    draw_text(buffer, (char *)Bluetooth, 100, 20, 5);
 8004150:	4b3a      	ldr	r3, [pc, #232]	; (800423c <SSD1322_Screen_SetInput+0x18c>)
 8004152:	6819      	ldr	r1, [r3, #0]
 8004154:	2305      	movs	r3, #5
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2314      	movs	r3, #20
 800415a:	2264      	movs	r2, #100	; 0x64
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff f85b 	bl	8003218 <draw_text>
		break;
 8004162:	e00a      	b.n	800417a <SSD1322_Screen_SetInput+0xca>
		case MICROPHONE:
		    draw_text(buffer, (char *)Microphone, 100, 20, 5);
 8004164:	4b36      	ldr	r3, [pc, #216]	; (8004240 <SSD1322_Screen_SetInput+0x190>)
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	2305      	movs	r3, #5
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2314      	movs	r3, #20
 800416e:	2264      	movs	r2, #100	; 0x64
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff f851 	bl	8003218 <draw_text>
		break;
 8004176:	e000      	b.n	800417a <SSD1322_Screen_SetInput+0xca>
		default:
		break;
 8004178:	bf00      	nop
	    }

	switch (TDA7719_config.set_input_back)
 800417a:	4b2c      	ldr	r3, [pc, #176]	; (800422c <SSD1322_Screen_SetInput+0x17c>)
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b06      	cmp	r3, #6
 8004182:	d843      	bhi.n	800420c <SSD1322_Screen_SetInput+0x15c>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <SSD1322_Screen_SetInput+0xdc>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041e5 	.word	0x080041e5
 8004190:	080041a9 	.word	0x080041a9
 8004194:	080041bd 	.word	0x080041bd
 8004198:	0800420d 	.word	0x0800420d
 800419c:	0800420d 	.word	0x0800420d
 80041a0:	080041d1 	.word	0x080041d1
 80041a4:	080041f9 	.word	0x080041f9
	    {
		case JACK_1:
		    draw_text(buffer, (char *)Jack_1, 100, 50, 5);
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <SSD1322_Screen_SetInput+0x180>)
 80041aa:	6819      	ldr	r1, [r3, #0]
 80041ac:	2305      	movs	r3, #5
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2332      	movs	r3, #50	; 0x32
 80041b2:	2264      	movs	r2, #100	; 0x64
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff f82f 	bl	8003218 <draw_text>
		break;
 80041ba:	e028      	b.n	800420e <SSD1322_Screen_SetInput+0x15e>
		case JACK_2:
		    draw_text(buffer, (char *)Jack_2, 100, 50, 5);
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <SSD1322_Screen_SetInput+0x184>)
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	2305      	movs	r3, #5
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2332      	movs	r3, #50	; 0x32
 80041c6:	2264      	movs	r2, #100	; 0x64
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff f825 	bl	8003218 <draw_text>
		break;
 80041ce:	e01e      	b.n	800420e <SSD1322_Screen_SetInput+0x15e>
		case RADIO:
		    draw_text(buffer, (char *)Radio, 100, 50, 5);
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <SSD1322_Screen_SetInput+0x188>)
 80041d2:	6819      	ldr	r1, [r3, #0]
 80041d4:	2305      	movs	r3, #5
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2332      	movs	r3, #50	; 0x32
 80041da:	2264      	movs	r2, #100	; 0x64
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff f81b 	bl	8003218 <draw_text>
		break;
 80041e2:	e014      	b.n	800420e <SSD1322_Screen_SetInput+0x15e>
		case BLUETOOTH:
		    draw_text(buffer, (char *)Bluetooth, 100, 50, 5);
 80041e4:	4b15      	ldr	r3, [pc, #84]	; (800423c <SSD1322_Screen_SetInput+0x18c>)
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	2305      	movs	r3, #5
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2332      	movs	r3, #50	; 0x32
 80041ee:	2264      	movs	r2, #100	; 0x64
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff f811 	bl	8003218 <draw_text>
		break;
 80041f6:	e00a      	b.n	800420e <SSD1322_Screen_SetInput+0x15e>
		case MICROPHONE:
		    draw_text(buffer, (char *)Microphone, 100, 50, 5);
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <SSD1322_Screen_SetInput+0x190>)
 80041fa:	6819      	ldr	r1, [r3, #0]
 80041fc:	2305      	movs	r3, #5
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	2332      	movs	r3, #50	; 0x32
 8004202:	2264      	movs	r2, #100	; 0x64
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff f807 	bl	8003218 <draw_text>
		break;
 800420a:	e000      	b.n	800420e <SSD1322_Screen_SetInput+0x15e>
		default:
		break;
 800420c:	bf00      	nop
	    }
	//TDA7719_config.set_input_front = TDA7719_config.audio_source;

	send_buffer_to_OLED(buffer, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff f834 	bl	8003280 <send_buffer_to_OLED>
    }
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	0801dc8c 	.word	0x0801dc8c
 8004224:	08017e94 	.word	0x08017e94
 8004228:	08017ea4 	.word	0x08017ea4
 800422c:	20000544 	.word	0x20000544
 8004230:	20000058 	.word	0x20000058
 8004234:	2000005c 	.word	0x2000005c
 8004238:	20000060 	.word	0x20000060
 800423c:	20000064 	.word	0x20000064
 8004240:	20000068 	.word	0x20000068

08004244 <SSD1322_Screen_Encoder_Volume_Front>:

void SSD1322_Screen_Encoder_Volume_Front(uint8_t *const buffer)
    {
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af02      	add	r7, sp, #8
 800424a:	6078      	str	r0, [r7, #4]
	fill_buffer(buffer, 0);
 800424c:	2100      	movs	r1, #0
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fe fcd2 	bl	8002bf8 <fill_buffer>
	select_font(&TomThumb);
 8004254:	4818      	ldr	r0, [pc, #96]	; (80042b8 <SSD1322_Screen_Encoder_Volume_Front+0x74>)
 8004256:	f7fe ff37 	bl	80030c8 <select_font>
	draw_char(buffer, '0'  , 195, 53, 5);
 800425a:	2305      	movs	r3, #5
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2335      	movs	r3, #53	; 0x35
 8004260:	22c3      	movs	r2, #195	; 0xc3
 8004262:	2130      	movs	r1, #48	; 0x30
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fe ff3f 	bl	80030e8 <draw_char>
	draw_text(buffer, "-80", 2  , 53, 5);
 800426a:	2305      	movs	r3, #5
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2335      	movs	r3, #53	; 0x35
 8004270:	2202      	movs	r2, #2
 8004272:	4912      	ldr	r1, [pc, #72]	; (80042bc <SSD1322_Screen_Encoder_Volume_Front+0x78>)
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fe ffcf 	bl	8003218 <draw_text>
	draw_text(buffer, "+15", 225, 53, 5);
 800427a:	2305      	movs	r3, #5
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2335      	movs	r3, #53	; 0x35
 8004280:	22e1      	movs	r2, #225	; 0xe1
 8004282:	490f      	ldr	r1, [pc, #60]	; (80042c0 <SSD1322_Screen_Encoder_Volume_Front+0x7c>)
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fe ffc7 	bl	8003218 <draw_text>
	select_font(&FreeSerifItalic9pt7b);
 800428a:	480e      	ldr	r0, [pc, #56]	; (80042c4 <SSD1322_Screen_Encoder_Volume_Front+0x80>)
 800428c:	f7fe ff1c 	bl	80030c8 <select_font>
	draw_text(buffer, "dB", 235, 63, 5);
 8004290:	2305      	movs	r3, #5
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	233f      	movs	r3, #63	; 0x3f
 8004296:	22eb      	movs	r2, #235	; 0xeb
 8004298:	490b      	ldr	r1, [pc, #44]	; (80042c8 <SSD1322_Screen_Encoder_Volume_Front+0x84>)
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe ffbc 	bl	8003218 <draw_text>
	draw_encoder_volume_front_scale(buffer);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fa71 	bl	8004788 <draw_encoder_volume_front_scale>

	send_buffer_to_OLED(buffer, 0, 0);
 80042a6:	2200      	movs	r2, #0
 80042a8:	2100      	movs	r1, #0
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe ffe8 	bl	8003280 <send_buffer_to_OLED>
    }
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	08023f98 	.word	0x08023f98
 80042bc:	08017eb4 	.word	0x08017eb4
 80042c0:	08017eb8 	.word	0x08017eb8
 80042c4:	080237c0 	.word	0x080237c0
 80042c8:	08017ebc 	.word	0x08017ebc

080042cc <SSD1322_Screen_Encoder_Volume_Back>:

void SSD1322_Screen_Encoder_Volume_Back(uint8_t *const buffer)
    {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	6078      	str	r0, [r7, #4]
	fill_buffer(buffer, 0);
 80042d4:	2100      	movs	r1, #0
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fe fc8e 	bl	8002bf8 <fill_buffer>
	select_font(&TomThumb);
 80042dc:	4818      	ldr	r0, [pc, #96]	; (8004340 <SSD1322_Screen_Encoder_Volume_Back+0x74>)
 80042de:	f7fe fef3 	bl	80030c8 <select_font>
	draw_char(buffer, '0'  , 195, 53, 5);
 80042e2:	2305      	movs	r3, #5
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2335      	movs	r3, #53	; 0x35
 80042e8:	22c3      	movs	r2, #195	; 0xc3
 80042ea:	2130      	movs	r1, #48	; 0x30
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fe fefb 	bl	80030e8 <draw_char>
	draw_text(buffer, "-80", 2  , 53, 5);
 80042f2:	2305      	movs	r3, #5
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	2335      	movs	r3, #53	; 0x35
 80042f8:	2202      	movs	r2, #2
 80042fa:	4912      	ldr	r1, [pc, #72]	; (8004344 <SSD1322_Screen_Encoder_Volume_Back+0x78>)
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fe ff8b 	bl	8003218 <draw_text>
	draw_text(buffer, "+15", 225, 53, 5);
 8004302:	2305      	movs	r3, #5
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2335      	movs	r3, #53	; 0x35
 8004308:	22e1      	movs	r2, #225	; 0xe1
 800430a:	490f      	ldr	r1, [pc, #60]	; (8004348 <SSD1322_Screen_Encoder_Volume_Back+0x7c>)
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7fe ff83 	bl	8003218 <draw_text>
	select_font(&FreeSerifItalic9pt7b);
 8004312:	480e      	ldr	r0, [pc, #56]	; (800434c <SSD1322_Screen_Encoder_Volume_Back+0x80>)
 8004314:	f7fe fed8 	bl	80030c8 <select_font>
	draw_text(buffer, "dB", 235, 63, 5);
 8004318:	2305      	movs	r3, #5
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	233f      	movs	r3, #63	; 0x3f
 800431e:	22eb      	movs	r2, #235	; 0xeb
 8004320:	490b      	ldr	r1, [pc, #44]	; (8004350 <SSD1322_Screen_Encoder_Volume_Back+0x84>)
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fe ff78 	bl	8003218 <draw_text>
	draw_encoder_volume_back_scale(buffer);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fc61 	bl	8004bf0 <draw_encoder_volume_back_scale>

	send_buffer_to_OLED(buffer, 0, 0);
 800432e:	2200      	movs	r2, #0
 8004330:	2100      	movs	r1, #0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe ffa4 	bl	8003280 <send_buffer_to_OLED>
    }
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	08023f98 	.word	0x08023f98
 8004344:	08017eb4 	.word	0x08017eb4
 8004348:	08017eb8 	.word	0x08017eb8
 800434c:	080237c0 	.word	0x080237c0
 8004350:	08017ebc 	.word	0x08017ebc

08004354 <SSD1322_Screen_Encoder_Loudness>:

void SSD1322_Screen_Encoder_Loudness(uint8_t *const buffer)
    {
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 10; ++i)
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e006      	b.n	8004370 <SSD1322_Screen_Encoder_Loudness+0x1c>
	    {
		display_gain_tab[i] = 0;
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <SSD1322_Screen_Encoder_Loudness+0x80>)
 8004366:	2100      	movs	r1, #0
 8004368:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	3301      	adds	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b09      	cmp	r3, #9
 8004374:	d9f5      	bls.n	8004362 <SSD1322_Screen_Encoder_Loudness+0xe>
	    }

	select_font(&FreeSerif9pt7b);
 8004376:	4818      	ldr	r0, [pc, #96]	; (80043d8 <SSD1322_Screen_Encoder_Loudness+0x84>)
 8004378:	f7fe fea6 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 800437c:	2100      	movs	r1, #0
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fe fc3a 	bl	8002bf8 <fill_buffer>
	draw_text(buffer, "LOUDNESS", 70, 15, 5);
 8004384:	2305      	movs	r3, #5
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	230f      	movs	r3, #15
 800438a:	2246      	movs	r2, #70	; 0x46
 800438c:	4913      	ldr	r1, [pc, #76]	; (80043dc <SSD1322_Screen_Encoder_Loudness+0x88>)
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe ff42 	bl	8003218 <draw_text>
	select_font(&FreeSans9pt7b);
 8004394:	4812      	ldr	r0, [pc, #72]	; (80043e0 <SSD1322_Screen_Encoder_Loudness+0x8c>)
 8004396:	f7fe fe97 	bl	80030c8 <select_font>
	draw_text(buffer, "Mid freq:", 25, 40, 5);
 800439a:	2305      	movs	r3, #5
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	2328      	movs	r3, #40	; 0x28
 80043a0:	2219      	movs	r2, #25
 80043a2:	4910      	ldr	r1, [pc, #64]	; (80043e4 <SSD1322_Screen_Encoder_Loudness+0x90>)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fe ff37 	bl	8003218 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 80043aa:	2305      	movs	r3, #5
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	233f      	movs	r3, #63	; 0x3f
 80043b0:	2232      	movs	r2, #50	; 0x32
 80043b2:	490d      	ldr	r1, [pc, #52]	; (80043e8 <SSD1322_Screen_Encoder_Loudness+0x94>)
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fe ff2f 	bl	8003218 <draw_text>
	draw_gain_and_freq_loudness(buffer);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fdd0 	bl	8004f60 <draw_gain_and_freq_loudness>

	send_buffer_to_OLED(buffer, 0, 0);
 80043c0:	2200      	movs	r2, #0
 80043c2:	2100      	movs	r1, #0
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7fe ff5b 	bl	8003280 <send_buffer_to_OLED>
    }
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000198 	.word	0x20000198
 80043d8:	0801dc8c 	.word	0x0801dc8c
 80043dc:	08017ec0 	.word	0x08017ec0
 80043e0:	0801af08 	.word	0x0801af08
 80043e4:	08017ecc 	.word	0x08017ecc
 80043e8:	08017ed8 	.word	0x08017ed8

080043ec <SSD1322_Screen_Encoder_Treble>:

void SSD1322_Screen_Encoder_Treble(uint8_t *const buffer)
    {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 10; ++i)
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e006      	b.n	8004408 <SSD1322_Screen_Encoder_Treble+0x1c>
	    {
		display_gain_tab[i] = 0;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	4a3d      	ldr	r2, [pc, #244]	; (80044f4 <SSD1322_Screen_Encoder_Treble+0x108>)
 80043fe:	2100      	movs	r1, #0
 8004400:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	3301      	adds	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b09      	cmp	r3, #9
 800440c:	d9f5      	bls.n	80043fa <SSD1322_Screen_Encoder_Treble+0xe>
	    }

	select_font(&FreeSerif9pt7b);	//niby można wyświetlać wykres
 800440e:	483a      	ldr	r0, [pc, #232]	; (80044f8 <SSD1322_Screen_Encoder_Treble+0x10c>)
 8004410:	f7fe fe5a 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 8004414:	2100      	movs	r1, #0
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe fbee 	bl	8002bf8 <fill_buffer>
	draw_text(buffer, "TREBLE", 70, 15, 5);
 800441c:	2305      	movs	r3, #5
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	230f      	movs	r3, #15
 8004422:	2246      	movs	r2, #70	; 0x46
 8004424:	4935      	ldr	r1, [pc, #212]	; (80044fc <SSD1322_Screen_Encoder_Treble+0x110>)
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fe fef6 	bl	8003218 <draw_text>
	select_font(&FreeSans9pt7b);
 800442c:	4834      	ldr	r0, [pc, #208]	; (8004500 <SSD1322_Screen_Encoder_Treble+0x114>)
 800442e:	f7fe fe4b 	bl	80030c8 <select_font>
	draw_text(buffer, "Mid freq:", 25, 40, 5);
 8004432:	2305      	movs	r3, #5
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	2328      	movs	r3, #40	; 0x28
 8004438:	2219      	movs	r2, #25
 800443a:	4932      	ldr	r1, [pc, #200]	; (8004504 <SSD1322_Screen_Encoder_Treble+0x118>)
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fe feeb 	bl	8003218 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 8004442:	2305      	movs	r3, #5
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	233f      	movs	r3, #63	; 0x3f
 8004448:	2232      	movs	r2, #50	; 0x32
 800444a:	492f      	ldr	r1, [pc, #188]	; (8004508 <SSD1322_Screen_Encoder_Treble+0x11c>)
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fe fee3 	bl	8003218 <draw_text>
	draw_gain_and_freq(encoderFilterTreble.gain - 16);
 8004452:	4b2e      	ldr	r3, [pc, #184]	; (800450c <SSD1322_Screen_Encoder_Treble+0x120>)
 8004454:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	3b10      	subs	r3, #16
 800445c:	b2db      	uxtb	r3, r3
 800445e:	b25b      	sxtb	r3, r3
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fe1b 	bl	800509c <draw_gain_and_freq>
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 8004466:	2305      	movs	r3, #5
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	233f      	movs	r3, #63	; 0x3f
 800446c:	2264      	movs	r2, #100	; 0x64
 800446e:	4921      	ldr	r1, [pc, #132]	; (80044f4 <SSD1322_Screen_Encoder_Treble+0x108>)
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7fe fed1 	bl	8003218 <draw_text>

	switch (encoderFilterTreble.centerFreq)
 8004476:	4b25      	ldr	r3, [pc, #148]	; (800450c <SSD1322_Screen_Encoder_Treble+0x120>)
 8004478:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d82f      	bhi.n	80044e0 <SSD1322_Screen_Encoder_Treble+0xf4>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <SSD1322_Screen_Encoder_Treble+0x9c>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	08004499 	.word	0x08004499
 800448c:	080044ab 	.word	0x080044ab
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044cf 	.word	0x080044cf
	    {
		case 0:		//00 - flat
		    draw_text(buffer, "10 kHz", 100, 40, 5);
 8004498:	2305      	movs	r3, #5
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2328      	movs	r3, #40	; 0x28
 800449e:	2264      	movs	r2, #100	; 0x64
 80044a0:	491b      	ldr	r1, [pc, #108]	; (8004510 <SSD1322_Screen_Encoder_Treble+0x124>)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fe feb8 	bl	8003218 <draw_text>
		break;
 80044a8:	e01b      	b.n	80044e2 <SSD1322_Screen_Encoder_Treble+0xf6>
		case 1:		//01  - 400 Hz
		    draw_text(buffer, "12,5 kHz", 100, 40, 5);
 80044aa:	2305      	movs	r3, #5
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2328      	movs	r3, #40	; 0x28
 80044b0:	2264      	movs	r2, #100	; 0x64
 80044b2:	4918      	ldr	r1, [pc, #96]	; (8004514 <SSD1322_Screen_Encoder_Treble+0x128>)
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fe feaf 	bl	8003218 <draw_text>
		break;
 80044ba:	e012      	b.n	80044e2 <SSD1322_Screen_Encoder_Treble+0xf6>
		case 2:		//10  - 800 Hz
		    draw_text(buffer, "15 kHz", 100, 40, 5);
 80044bc:	2305      	movs	r3, #5
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2328      	movs	r3, #40	; 0x28
 80044c2:	2264      	movs	r2, #100	; 0x64
 80044c4:	4914      	ldr	r1, [pc, #80]	; (8004518 <SSD1322_Screen_Encoder_Treble+0x12c>)
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fe fea6 	bl	8003218 <draw_text>
		break;
 80044cc:	e009      	b.n	80044e2 <SSD1322_Screen_Encoder_Treble+0xf6>
		case 3:		//11  - 2400 Hz
		    draw_text(buffer, "17.5 kHz", 100, 40, 5);
 80044ce:	2305      	movs	r3, #5
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2328      	movs	r3, #40	; 0x28
 80044d4:	2264      	movs	r2, #100	; 0x64
 80044d6:	4911      	ldr	r1, [pc, #68]	; (800451c <SSD1322_Screen_Encoder_Treble+0x130>)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fe fe9d 	bl	8003218 <draw_text>
		break;
 80044de:	e000      	b.n	80044e2 <SSD1322_Screen_Encoder_Treble+0xf6>
		default:
		break;
 80044e0:	bf00      	nop
	    }
	send_buffer_to_OLED(buffer, 0, 0);
 80044e2:	2200      	movs	r2, #0
 80044e4:	2100      	movs	r1, #0
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fe feca 	bl	8003280 <send_buffer_to_OLED>
    }
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000198 	.word	0x20000198
 80044f8:	0801dc8c 	.word	0x0801dc8c
 80044fc:	08017ee0 	.word	0x08017ee0
 8004500:	0801af08 	.word	0x0801af08
 8004504:	08017ecc 	.word	0x08017ecc
 8004508:	08017ed8 	.word	0x08017ed8
 800450c:	2000052c 	.word	0x2000052c
 8004510:	08017ee8 	.word	0x08017ee8
 8004514:	08017ef0 	.word	0x08017ef0
 8004518:	08017efc 	.word	0x08017efc
 800451c:	08017f04 	.word	0x08017f04

08004520 <SSD1322_Screen_Encoder_Middle>:

void SSD1322_Screen_Encoder_Middle(uint8_t *const buffer)
    {
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 10; ++i)
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e006      	b.n	800453c <SSD1322_Screen_Encoder_Middle+0x1c>
	    {
		display_gain_tab[i] = 0;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	4a3d      	ldr	r2, [pc, #244]	; (8004628 <SSD1322_Screen_Encoder_Middle+0x108>)
 8004532:	2100      	movs	r1, #0
 8004534:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	3301      	adds	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b09      	cmp	r3, #9
 8004540:	d9f5      	bls.n	800452e <SSD1322_Screen_Encoder_Middle+0xe>
	    }

	select_font(&FreeSerif9pt7b);	//niby można wyświetlać wykres
 8004542:	483a      	ldr	r0, [pc, #232]	; (800462c <SSD1322_Screen_Encoder_Middle+0x10c>)
 8004544:	f7fe fdc0 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 8004548:	2100      	movs	r1, #0
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fe fb54 	bl	8002bf8 <fill_buffer>
	draw_text(buffer, "MIDDLE", 70, 15, 5);
 8004550:	2305      	movs	r3, #5
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	230f      	movs	r3, #15
 8004556:	2246      	movs	r2, #70	; 0x46
 8004558:	4935      	ldr	r1, [pc, #212]	; (8004630 <SSD1322_Screen_Encoder_Middle+0x110>)
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fe fe5c 	bl	8003218 <draw_text>
	select_font(&FreeSans9pt7b);
 8004560:	4834      	ldr	r0, [pc, #208]	; (8004634 <SSD1322_Screen_Encoder_Middle+0x114>)
 8004562:	f7fe fdb1 	bl	80030c8 <select_font>
	draw_text(buffer, "Q fact:", 25, 40, 5);
 8004566:	2305      	movs	r3, #5
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	2328      	movs	r3, #40	; 0x28
 800456c:	2219      	movs	r2, #25
 800456e:	4932      	ldr	r1, [pc, #200]	; (8004638 <SSD1322_Screen_Encoder_Middle+0x118>)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fe fe51 	bl	8003218 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 8004576:	2305      	movs	r3, #5
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	233f      	movs	r3, #63	; 0x3f
 800457c:	2232      	movs	r2, #50	; 0x32
 800457e:	492f      	ldr	r1, [pc, #188]	; (800463c <SSD1322_Screen_Encoder_Middle+0x11c>)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fe fe49 	bl	8003218 <draw_text>
	draw_gain_and_freq(encoderFilterMiddle.gain - 16);
 8004586:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <SSD1322_Screen_Encoder_Middle+0x120>)
 8004588:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	3b10      	subs	r3, #16
 8004590:	b2db      	uxtb	r3, r3
 8004592:	b25b      	sxtb	r3, r3
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fd81 	bl	800509c <draw_gain_and_freq>
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 800459a:	2305      	movs	r3, #5
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	233f      	movs	r3, #63	; 0x3f
 80045a0:	2264      	movs	r2, #100	; 0x64
 80045a2:	4921      	ldr	r1, [pc, #132]	; (8004628 <SSD1322_Screen_Encoder_Middle+0x108>)
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fe fe37 	bl	8003218 <draw_text>

	switch (encoderFilterMiddle.centerFreq)
 80045aa:	4b25      	ldr	r3, [pc, #148]	; (8004640 <SSD1322_Screen_Encoder_Middle+0x120>)
 80045ac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d82f      	bhi.n	8004614 <SSD1322_Screen_Encoder_Middle+0xf4>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <SSD1322_Screen_Encoder_Middle+0x9c>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045df 	.word	0x080045df
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	08004603 	.word	0x08004603
	    {
		case 0:
		    draw_text(buffer, "0.5", 100, 40, 5);
 80045cc:	2305      	movs	r3, #5
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2328      	movs	r3, #40	; 0x28
 80045d2:	2264      	movs	r2, #100	; 0x64
 80045d4:	491b      	ldr	r1, [pc, #108]	; (8004644 <SSD1322_Screen_Encoder_Middle+0x124>)
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fe fe1e 	bl	8003218 <draw_text>
		break;
 80045dc:	e01b      	b.n	8004616 <SSD1322_Screen_Encoder_Middle+0xf6>
		case 1:
		    draw_text(buffer, "0.75", 100, 40, 5);
 80045de:	2305      	movs	r3, #5
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	2328      	movs	r3, #40	; 0x28
 80045e4:	2264      	movs	r2, #100	; 0x64
 80045e6:	4918      	ldr	r1, [pc, #96]	; (8004648 <SSD1322_Screen_Encoder_Middle+0x128>)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fe fe15 	bl	8003218 <draw_text>
		break;
 80045ee:	e012      	b.n	8004616 <SSD1322_Screen_Encoder_Middle+0xf6>
		case 2:
		    draw_text(buffer, "1", 100, 40, 5);
 80045f0:	2305      	movs	r3, #5
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2328      	movs	r3, #40	; 0x28
 80045f6:	2264      	movs	r2, #100	; 0x64
 80045f8:	4914      	ldr	r1, [pc, #80]	; (800464c <SSD1322_Screen_Encoder_Middle+0x12c>)
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fe fe0c 	bl	8003218 <draw_text>
		break;
 8004600:	e009      	b.n	8004616 <SSD1322_Screen_Encoder_Middle+0xf6>
		case 3:
		    draw_text(buffer, "1.25", 100, 40, 5);
 8004602:	2305      	movs	r3, #5
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2328      	movs	r3, #40	; 0x28
 8004608:	2264      	movs	r2, #100	; 0x64
 800460a:	4911      	ldr	r1, [pc, #68]	; (8004650 <SSD1322_Screen_Encoder_Middle+0x130>)
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fe fe03 	bl	8003218 <draw_text>
		break;
 8004612:	e000      	b.n	8004616 <SSD1322_Screen_Encoder_Middle+0xf6>
		default:
		break;
 8004614:	bf00      	nop
	    }
	send_buffer_to_OLED(buffer, 0, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	2100      	movs	r1, #0
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fe fe30 	bl	8003280 <send_buffer_to_OLED>
    }
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000198 	.word	0x20000198
 800462c:	0801dc8c 	.word	0x0801dc8c
 8004630:	08017f10 	.word	0x08017f10
 8004634:	0801af08 	.word	0x0801af08
 8004638:	08017f18 	.word	0x08017f18
 800463c:	08017ed8 	.word	0x08017ed8
 8004640:	20000510 	.word	0x20000510
 8004644:	08017f20 	.word	0x08017f20
 8004648:	08017f24 	.word	0x08017f24
 800464c:	08017d48 	.word	0x08017d48
 8004650:	08017f2c 	.word	0x08017f2c

08004654 <SSD1322_Screen_Encoder_Bass>:

void SSD1322_Screen_Encoder_Bass(uint8_t *const buffer)
    {
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af02      	add	r7, sp, #8
 800465a:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 10; ++i)
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e006      	b.n	8004670 <SSD1322_Screen_Encoder_Bass+0x1c>
	    {
		display_gain_tab[i] = 0;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	4a3d      	ldr	r2, [pc, #244]	; (800475c <SSD1322_Screen_Encoder_Bass+0x108>)
 8004666:	2100      	movs	r1, #0
 8004668:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	3301      	adds	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b09      	cmp	r3, #9
 8004674:	d9f5      	bls.n	8004662 <SSD1322_Screen_Encoder_Bass+0xe>
	    }

	select_font(&FreeSerif9pt7b);	//niby można wyświetlać wykres
 8004676:	483a      	ldr	r0, [pc, #232]	; (8004760 <SSD1322_Screen_Encoder_Bass+0x10c>)
 8004678:	f7fe fd26 	bl	80030c8 <select_font>
	fill_buffer(buffer, 0);
 800467c:	2100      	movs	r1, #0
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fe faba 	bl	8002bf8 <fill_buffer>
	draw_text(buffer, "BASS", 70, 15, 5);
 8004684:	2305      	movs	r3, #5
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	230f      	movs	r3, #15
 800468a:	2246      	movs	r2, #70	; 0x46
 800468c:	4935      	ldr	r1, [pc, #212]	; (8004764 <SSD1322_Screen_Encoder_Bass+0x110>)
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe fdc2 	bl	8003218 <draw_text>
	select_font(&FreeSans9pt7b);
 8004694:	4834      	ldr	r0, [pc, #208]	; (8004768 <SSD1322_Screen_Encoder_Bass+0x114>)
 8004696:	f7fe fd17 	bl	80030c8 <select_font>
	draw_text(buffer, "Q fact:", 25, 40, 5);
 800469a:	2305      	movs	r3, #5
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2328      	movs	r3, #40	; 0x28
 80046a0:	2219      	movs	r2, #25
 80046a2:	4932      	ldr	r1, [pc, #200]	; (800476c <SSD1322_Screen_Encoder_Bass+0x118>)
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fe fdb7 	bl	8003218 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 80046aa:	2305      	movs	r3, #5
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	233f      	movs	r3, #63	; 0x3f
 80046b0:	2232      	movs	r2, #50	; 0x32
 80046b2:	492f      	ldr	r1, [pc, #188]	; (8004770 <SSD1322_Screen_Encoder_Bass+0x11c>)
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fe fdaf 	bl	8003218 <draw_text>
	draw_gain_and_freq(encoderFilterBass.gain - 16);
 80046ba:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <SSD1322_Screen_Encoder_Bass+0x120>)
 80046bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	3b10      	subs	r3, #16
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	b25b      	sxtb	r3, r3
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fce7 	bl	800509c <draw_gain_and_freq>
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 80046ce:	2305      	movs	r3, #5
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	233f      	movs	r3, #63	; 0x3f
 80046d4:	2264      	movs	r2, #100	; 0x64
 80046d6:	4921      	ldr	r1, [pc, #132]	; (800475c <SSD1322_Screen_Encoder_Bass+0x108>)
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fe fd9d 	bl	8003218 <draw_text>

	switch (encoderFilterBass.centerFreq)
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <SSD1322_Screen_Encoder_Bass+0x120>)
 80046e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d82f      	bhi.n	8004748 <SSD1322_Screen_Encoder_Bass+0xf4>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <SSD1322_Screen_Encoder_Bass+0x9c>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004713 	.word	0x08004713
 80046f8:	08004725 	.word	0x08004725
 80046fc:	08004737 	.word	0x08004737
	    {
		case 0:
		    draw_text(buffer, "1.0", 100, 40, 5);
 8004700:	2305      	movs	r3, #5
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2328      	movs	r3, #40	; 0x28
 8004706:	2264      	movs	r2, #100	; 0x64
 8004708:	491b      	ldr	r1, [pc, #108]	; (8004778 <SSD1322_Screen_Encoder_Bass+0x124>)
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe fd84 	bl	8003218 <draw_text>
		break;
 8004710:	e01b      	b.n	800474a <SSD1322_Screen_Encoder_Bass+0xf6>
		case 1:
		    draw_text(buffer, "1.25", 100, 40, 5);
 8004712:	2305      	movs	r3, #5
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2328      	movs	r3, #40	; 0x28
 8004718:	2264      	movs	r2, #100	; 0x64
 800471a:	4918      	ldr	r1, [pc, #96]	; (800477c <SSD1322_Screen_Encoder_Bass+0x128>)
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fe fd7b 	bl	8003218 <draw_text>
		break;
 8004722:	e012      	b.n	800474a <SSD1322_Screen_Encoder_Bass+0xf6>
		case 2:
		    draw_text(buffer, "1.5", 100, 40, 5);
 8004724:	2305      	movs	r3, #5
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	2328      	movs	r3, #40	; 0x28
 800472a:	2264      	movs	r2, #100	; 0x64
 800472c:	4914      	ldr	r1, [pc, #80]	; (8004780 <SSD1322_Screen_Encoder_Bass+0x12c>)
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe fd72 	bl	8003218 <draw_text>
		break;
 8004734:	e009      	b.n	800474a <SSD1322_Screen_Encoder_Bass+0xf6>
		case 3:
		    draw_text(buffer, "2.0", 100, 40, 5);
 8004736:	2305      	movs	r3, #5
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2328      	movs	r3, #40	; 0x28
 800473c:	2264      	movs	r2, #100	; 0x64
 800473e:	4911      	ldr	r1, [pc, #68]	; (8004784 <SSD1322_Screen_Encoder_Bass+0x130>)
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fe fd69 	bl	8003218 <draw_text>
		break;
 8004746:	e000      	b.n	800474a <SSD1322_Screen_Encoder_Bass+0xf6>
		default:
		break;
 8004748:	bf00      	nop
	    }
	send_buffer_to_OLED(buffer, 0, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2100      	movs	r1, #0
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fe fd96 	bl	8003280 <send_buffer_to_OLED>
    }
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000198 	.word	0x20000198
 8004760:	0801dc8c 	.word	0x0801dc8c
 8004764:	08017f34 	.word	0x08017f34
 8004768:	0801af08 	.word	0x0801af08
 800476c:	08017f18 	.word	0x08017f18
 8004770:	08017ed8 	.word	0x08017ed8
 8004774:	20000534 	.word	0x20000534
 8004778:	08017f3c 	.word	0x08017f3c
 800477c:	08017f2c 	.word	0x08017f2c
 8004780:	08017f40 	.word	0x08017f40
 8004784:	08017f44 	.word	0x08017f44

08004788 <draw_encoder_volume_front_scale>:
//--------------------------------------------------------------
// Some random things to draw
//--------------------------------------------------------------

void draw_encoder_volume_front_scale(uint8_t *const buffer)
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af02      	add	r7, sp, #8
 800478e:	6078      	str	r0, [r7, #4]
	static uint16_t Volume1;
	static uint16_t Volume2;
	static uint16_t Volume3;
	static uint8_t i;

	switch (encoderVolFront.audioOutputState)
 8004790:	4ba5      	ldr	r3, [pc, #660]	; (8004a28 <draw_encoder_volume_front_scale+0x2a0>)
 8004792:	799b      	ldrb	r3, [r3, #6]
 8004794:	2b06      	cmp	r3, #6
 8004796:	f200 8217 	bhi.w	8004bc8 <draw_encoder_volume_front_scale+0x440>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <draw_encoder_volume_front_scale+0x18>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047bd 	.word	0x080047bd
 80047a4:	080049fb 	.word	0x080049fb
 80047a8:	08004897 	.word	0x08004897
 80047ac:	08004953 	.word	0x08004953
 80047b0:	08004bc9 	.word	0x08004bc9
 80047b4:	08004a8d 	.word	0x08004a8d
 80047b8:	08004b2b 	.word	0x08004b2b
	    {
	    case MASTER:
		Volume = map(encoderVolFront.volumeMaster, 0, 94, 5, 230);
 80047bc:	4b9a      	ldr	r3, [pc, #616]	; (8004a28 <draw_encoder_volume_front_scale+0x2a0>)
 80047be:	f993 3000 	ldrsb.w	r3, [r3]
 80047c2:	4618      	mov	r0, r3
 80047c4:	23e6      	movs	r3, #230	; 0xe6
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	2305      	movs	r3, #5
 80047ca:	225e      	movs	r2, #94	; 0x5e
 80047cc:	2100      	movs	r1, #0
 80047ce:	f001 fd09 	bl	80061e4 <map>
 80047d2:	4603      	mov	r3, r0
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	4b95      	ldr	r3, [pc, #596]	; (8004a2c <draw_encoder_volume_front_scale+0x2a4>)
 80047d8:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume Master", 70, 15, 5);
 80047da:	2305      	movs	r3, #5
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	230f      	movs	r3, #15
 80047e0:	2246      	movs	r2, #70	; 0x46
 80047e2:	4993      	ldr	r1, [pc, #588]	; (8004a30 <draw_encoder_volume_front_scale+0x2a8>)
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe fd17 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume, 62, 5);
 80047ea:	4b90      	ldr	r3, [pc, #576]	; (8004a2c <draw_encoder_volume_front_scale+0x2a4>)
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	2205      	movs	r2, #5
 80047f0:	9201      	str	r2, [sp, #4]
 80047f2:	223e      	movs	r2, #62	; 0x3e
 80047f4:	9200      	str	r2, [sp, #0]
 80047f6:	2238      	movs	r2, #56	; 0x38
 80047f8:	2105      	movs	r1, #5
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fe fb55 	bl	8002eaa <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 8004800:	2214      	movs	r2, #20
 8004802:	2103      	movs	r1, #3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fdf6 	bl	80053f6 <draw_speaker_left>
		draw_speaker_right(buffer, 243, 20);
 800480a:	2214      	movs	r2, #20
 800480c:	21f3      	movs	r1, #243	; 0xf3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fe91 	bl	8005536 <draw_speaker_right>
		draw_speaker_left(buffer, 10, 43);
 8004814:	222b      	movs	r2, #43	; 0x2b
 8004816:	210a      	movs	r1, #10
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fdec 	bl	80053f6 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 800481e:	222b      	movs	r2, #43	; 0x2b
 8004820:	21ec      	movs	r1, #236	; 0xec
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fe87 	bl	8005536 <draw_speaker_right>
		draw_nutka1(buffer, 21, 10);
 8004828:	220a      	movs	r2, #10
 800482a:	2115      	movs	r1, #21
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fcc5 	bl	80051bc <draw_nutka1>
//		draw_nutka3(buffer, 26, 18);
		draw_nutka2(buffer, 31, 8);
 8004832:	2208      	movs	r2, #8
 8004834:	211f      	movs	r1, #31
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fd20 	bl	800527c <draw_nutka2>
		draw_nutka4(buffer, 32, 25);
 800483c:	2219      	movs	r2, #25
 800483e:	2120      	movs	r1, #32
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fd5c 	bl	80052fe <draw_nutka4>
		for ( i = Volume; i < 230; i++)
 8004846:	4b79      	ldr	r3, [pc, #484]	; (8004a2c <draw_encoder_volume_front_scale+0x2a4>)
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	4b79      	ldr	r3, [pc, #484]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e01c      	b.n	800488c <draw_encoder_volume_front_scale+0x104>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004852:	4b78      	ldr	r3, [pc, #480]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	4b78      	ldr	r3, [pc, #480]	; (8004a38 <draw_encoder_volume_front_scale+0x2b0>)
 8004858:	fba3 1302 	umull	r1, r3, r3, r2
 800485c:	0899      	lsrs	r1, r3, #2
 800485e:	460b      	mov	r3, r1
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <draw_encoder_volume_front_scale+0xf8>
 800486c:	4b71      	ldr	r3, [pc, #452]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	b299      	uxth	r1, r3
 8004872:	2303      	movs	r3, #3
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	233e      	movs	r3, #62	; 0x3e
 8004878:	2238      	movs	r2, #56	; 0x38
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe fa68 	bl	8002d50 <draw_vline>
		for ( i = Volume; i < 230; i++)
 8004880:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	b2da      	uxtb	r2, r3
 8004888:	4b6a      	ldr	r3, [pc, #424]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	4b69      	ldr	r3, [pc, #420]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2be5      	cmp	r3, #229	; 0xe5
 8004892:	d9de      	bls.n	8004852 <draw_encoder_volume_front_scale+0xca>
		    }
		break;
 8004894:	e199      	b.n	8004bca <draw_encoder_volume_front_scale+0x442>
	    case MASTER_V2:
		Volume = map(encoderVolFront.volumeMaster, 0, 94, 5, 230);
 8004896:	4b64      	ldr	r3, [pc, #400]	; (8004a28 <draw_encoder_volume_front_scale+0x2a0>)
 8004898:	f993 3000 	ldrsb.w	r3, [r3]
 800489c:	4618      	mov	r0, r3
 800489e:	23e6      	movs	r3, #230	; 0xe6
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	2305      	movs	r3, #5
 80048a4:	225e      	movs	r2, #94	; 0x5e
 80048a6:	2100      	movs	r1, #0
 80048a8:	f001 fc9c 	bl	80061e4 <map>
 80048ac:	4603      	mov	r3, r0
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	4b5e      	ldr	r3, [pc, #376]	; (8004a2c <draw_encoder_volume_front_scale+0x2a4>)
 80048b2:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume Master", 70, 15, 5);
 80048b4:	2305      	movs	r3, #5
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	230f      	movs	r3, #15
 80048ba:	2246      	movs	r2, #70	; 0x46
 80048bc:	495c      	ldr	r1, [pc, #368]	; (8004a30 <draw_encoder_volume_front_scale+0x2a8>)
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fe fcaa 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume, 62, 5);
 80048c4:	4b59      	ldr	r3, [pc, #356]	; (8004a2c <draw_encoder_volume_front_scale+0x2a4>)
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	2205      	movs	r2, #5
 80048ca:	9201      	str	r2, [sp, #4]
 80048cc:	223e      	movs	r2, #62	; 0x3e
 80048ce:	9200      	str	r2, [sp, #0]
 80048d0:	2238      	movs	r2, #56	; 0x38
 80048d2:	2105      	movs	r1, #5
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe fae8 	bl	8002eaa <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 80048da:	2214      	movs	r2, #20
 80048dc:	2103      	movs	r1, #3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fd89 	bl	80053f6 <draw_speaker_left>
		draw_speaker_right(buffer, 243, 20);
 80048e4:	2214      	movs	r2, #20
 80048e6:	21f3      	movs	r1, #243	; 0xf3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fe24 	bl	8005536 <draw_speaker_right>
		draw_speaker_left(buffer, 10, 43);
 80048ee:	222b      	movs	r2, #43	; 0x2b
 80048f0:	210a      	movs	r1, #10
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fd7f 	bl	80053f6 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 80048f8:	222b      	movs	r2, #43	; 0x2b
 80048fa:	21ec      	movs	r1, #236	; 0xec
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fe1a 	bl	8005536 <draw_speaker_right>
		for ( i = Volume; i < 230; i++)
 8004902:	4b4a      	ldr	r3, [pc, #296]	; (8004a2c <draw_encoder_volume_front_scale+0x2a4>)
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b2da      	uxtb	r2, r3
 8004908:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e01c      	b.n	8004948 <draw_encoder_volume_front_scale+0x1c0>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 800490e:	4b49      	ldr	r3, [pc, #292]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	4b49      	ldr	r3, [pc, #292]	; (8004a38 <draw_encoder_volume_front_scale+0x2b0>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	0899      	lsrs	r1, r3, #2
 800491a:	460b      	mov	r3, r1
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <draw_encoder_volume_front_scale+0x1b4>
 8004928:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	b299      	uxth	r1, r3
 800492e:	2303      	movs	r3, #3
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	233e      	movs	r3, #62	; 0x3e
 8004934:	2238      	movs	r2, #56	; 0x38
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fe fa0a 	bl	8002d50 <draw_vline>
		for ( i = Volume; i < 230; i++)
 800493c:	4b3d      	ldr	r3, [pc, #244]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2be5      	cmp	r3, #229	; 0xe5
 800494e:	d9de      	bls.n	800490e <draw_encoder_volume_front_scale+0x186>
		    }
		break;
 8004950:	e13b      	b.n	8004bca <draw_encoder_volume_front_scale+0x442>
	    case NORMAL:
		Volume3 = map(encoderVolFront.volumeLeftRight, 0, 94, 5, 230);
 8004952:	4b35      	ldr	r3, [pc, #212]	; (8004a28 <draw_encoder_volume_front_scale+0x2a0>)
 8004954:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004958:	4618      	mov	r0, r3
 800495a:	23e6      	movs	r3, #230	; 0xe6
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2305      	movs	r3, #5
 8004960:	225e      	movs	r2, #94	; 0x5e
 8004962:	2100      	movs	r1, #0
 8004964:	f001 fc3e 	bl	80061e4 <map>
 8004968:	4603      	mov	r3, r0
 800496a:	b29a      	uxth	r2, r3
 800496c:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <draw_encoder_volume_front_scale+0x2b4>)
 800496e:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume front", 70, 15, 5);
 8004970:	2305      	movs	r3, #5
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	230f      	movs	r3, #15
 8004976:	2246      	movs	r2, #70	; 0x46
 8004978:	4931      	ldr	r1, [pc, #196]	; (8004a40 <draw_encoder_volume_front_scale+0x2b8>)
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fe fc4c 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume3, 62, 5);
 8004980:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <draw_encoder_volume_front_scale+0x2b4>)
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	2205      	movs	r2, #5
 8004986:	9201      	str	r2, [sp, #4]
 8004988:	223e      	movs	r2, #62	; 0x3e
 800498a:	9200      	str	r2, [sp, #0]
 800498c:	2238      	movs	r2, #56	; 0x38
 800498e:	2105      	movs	r1, #5
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7fe fa8a 	bl	8002eaa <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 8004996:	2214      	movs	r2, #20
 8004998:	2103      	movs	r1, #3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fd2b 	bl	80053f6 <draw_speaker_left>
		draw_speaker_right(buffer, 243, 20);
 80049a0:	2214      	movs	r2, #20
 80049a2:	21f3      	movs	r1, #243	; 0xf3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fdc6 	bl	8005536 <draw_speaker_right>
		for ( i = Volume3; i < 230; i++)
 80049aa:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <draw_encoder_volume_front_scale+0x2b4>)
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e01c      	b.n	80049f0 <draw_encoder_volume_front_scale+0x268>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 80049b6:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <draw_encoder_volume_front_scale+0x2b0>)
 80049bc:	fba3 1302 	umull	r1, r3, r3, r2
 80049c0:	0899      	lsrs	r1, r3, #2
 80049c2:	460b      	mov	r3, r1
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <draw_encoder_volume_front_scale+0x25c>
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	b299      	uxth	r1, r3
 80049d6:	2303      	movs	r3, #3
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	233e      	movs	r3, #62	; 0x3e
 80049dc:	2238      	movs	r2, #56	; 0x38
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fe f9b6 	bl	8002d50 <draw_vline>
		for ( i = Volume3; i < 230; i++)
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	3301      	adds	r3, #1
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2be5      	cmp	r3, #229	; 0xe5
 80049f6:	d9de      	bls.n	80049b6 <draw_encoder_volume_front_scale+0x22e>
		    }
		break;
 80049f8:	e0e7      	b.n	8004bca <draw_encoder_volume_front_scale+0x442>
	    case MUTE:
		draw_text(buffer, "Volume MUTED", 70, 15, 5);
 80049fa:	2305      	movs	r3, #5
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	230f      	movs	r3, #15
 8004a00:	2246      	movs	r2, #70	; 0x46
 8004a02:	4910      	ldr	r1, [pc, #64]	; (8004a44 <draw_encoder_volume_front_scale+0x2bc>)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fe fc07 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, 6, 62, 5);
 8004a0a:	2305      	movs	r3, #5
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	233e      	movs	r3, #62	; 0x3e
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	2306      	movs	r3, #6
 8004a14:	2238      	movs	r2, #56	; 0x38
 8004a16:	2105      	movs	r1, #5
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fe fa46 	bl	8002eaa <draw_rect_filled>
		for ( i = 0; i < 230; i++)
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <draw_encoder_volume_front_scale+0x2ac>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e02d      	b.n	8004a82 <draw_encoder_volume_front_scale+0x2fa>
 8004a26:	bf00      	nop
 8004a28:	20000554 	.word	0x20000554
 8004a2c:	200001d8 	.word	0x200001d8
 8004a30:	08017f48 	.word	0x08017f48
 8004a34:	200001da 	.word	0x200001da
 8004a38:	cccccccd 	.word	0xcccccccd
 8004a3c:	200001dc 	.word	0x200001dc
 8004a40:	08017f58 	.word	0x08017f58
 8004a44:	08017f68 	.word	0x08017f68
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004a48:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004a4a:	781a      	ldrb	r2, [r3, #0]
 8004a4c:	4b62      	ldr	r3, [pc, #392]	; (8004bd8 <draw_encoder_volume_front_scale+0x450>)
 8004a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a52:	0899      	lsrs	r1, r3, #2
 8004a54:	460b      	mov	r3, r1
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <draw_encoder_volume_front_scale+0x2ee>
 8004a62:	4b5c      	ldr	r3, [pc, #368]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	b299      	uxth	r1, r3
 8004a68:	2303      	movs	r3, #3
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	233e      	movs	r3, #62	; 0x3e
 8004a6e:	2238      	movs	r2, #56	; 0x38
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fe f96d 	bl	8002d50 <draw_vline>
		for ( i = 0; i < 230; i++)
 8004a76:	4b57      	ldr	r3, [pc, #348]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b55      	ldr	r3, [pc, #340]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	4b54      	ldr	r3, [pc, #336]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2be5      	cmp	r3, #229	; 0xe5
 8004a88:	d9de      	bls.n	8004a48 <draw_encoder_volume_front_scale+0x2c0>
		    }
		break;
 8004a8a:	e09e      	b.n	8004bca <draw_encoder_volume_front_scale+0x442>
	    case ATTE_LEFT:
		Volume1 = map(encoderVolFront.volumeLeft, 0, 94, 5, 230);
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <draw_encoder_volume_front_scale+0x454>)
 8004a8e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004a92:	4618      	mov	r0, r3
 8004a94:	23e6      	movs	r3, #230	; 0xe6
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2305      	movs	r3, #5
 8004a9a:	225e      	movs	r2, #94	; 0x5e
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f001 fba1 	bl	80061e4 <map>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	4b4e      	ldr	r3, [pc, #312]	; (8004be0 <draw_encoder_volume_front_scale+0x458>)
 8004aa8:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume front left", 70, 15, 5);
 8004aaa:	2305      	movs	r3, #5
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	230f      	movs	r3, #15
 8004ab0:	2246      	movs	r2, #70	; 0x46
 8004ab2:	494c      	ldr	r1, [pc, #304]	; (8004be4 <draw_encoder_volume_front_scale+0x45c>)
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7fe fbaf 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume1, 62, 5);
 8004aba:	4b49      	ldr	r3, [pc, #292]	; (8004be0 <draw_encoder_volume_front_scale+0x458>)
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	2205      	movs	r2, #5
 8004ac0:	9201      	str	r2, [sp, #4]
 8004ac2:	223e      	movs	r2, #62	; 0x3e
 8004ac4:	9200      	str	r2, [sp, #0]
 8004ac6:	2238      	movs	r2, #56	; 0x38
 8004ac8:	2105      	movs	r1, #5
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fe f9ed 	bl	8002eaa <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 8004ad0:	2214      	movs	r2, #20
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fc8e 	bl	80053f6 <draw_speaker_left>
		for ( i = Volume1; i < 230; i++)
 8004ada:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <draw_encoder_volume_front_scale+0x458>)
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	4b3c      	ldr	r3, [pc, #240]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	e01c      	b.n	8004b20 <draw_encoder_volume_front_scale+0x398>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	4b3b      	ldr	r3, [pc, #236]	; (8004bd8 <draw_encoder_volume_front_scale+0x450>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	0899      	lsrs	r1, r3, #2
 8004af2:	460b      	mov	r3, r1
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <draw_encoder_volume_front_scale+0x38c>
 8004b00:	4b34      	ldr	r3, [pc, #208]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b299      	uxth	r1, r3
 8004b06:	2303      	movs	r3, #3
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	233e      	movs	r3, #62	; 0x3e
 8004b0c:	2238      	movs	r2, #56	; 0x38
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fe f91e 	bl	8002d50 <draw_vline>
		for ( i = Volume1; i < 230; i++)
 8004b14:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	4b2c      	ldr	r3, [pc, #176]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2be5      	cmp	r3, #229	; 0xe5
 8004b26:	d9de      	bls.n	8004ae6 <draw_encoder_volume_front_scale+0x35e>
		    }
		break;
 8004b28:	e04f      	b.n	8004bca <draw_encoder_volume_front_scale+0x442>
	    case ATTE_RIGHT:
		Volume2 = map(encoderVolFront.volumeRight, 0, 94, 5, 230);
 8004b2a:	4b2c      	ldr	r3, [pc, #176]	; (8004bdc <draw_encoder_volume_front_scale+0x454>)
 8004b2c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004b30:	4618      	mov	r0, r3
 8004b32:	23e6      	movs	r3, #230	; 0xe6
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2305      	movs	r3, #5
 8004b38:	225e      	movs	r2, #94	; 0x5e
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	f001 fb52 	bl	80061e4 <map>
 8004b40:	4603      	mov	r3, r0
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <draw_encoder_volume_front_scale+0x460>)
 8004b46:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume front right", 70, 15, 5);
 8004b48:	2305      	movs	r3, #5
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	230f      	movs	r3, #15
 8004b4e:	2246      	movs	r2, #70	; 0x46
 8004b50:	4926      	ldr	r1, [pc, #152]	; (8004bec <draw_encoder_volume_front_scale+0x464>)
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe fb60 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume2, 62, 5);
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <draw_encoder_volume_front_scale+0x460>)
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	2205      	movs	r2, #5
 8004b5e:	9201      	str	r2, [sp, #4]
 8004b60:	223e      	movs	r2, #62	; 0x3e
 8004b62:	9200      	str	r2, [sp, #0]
 8004b64:	2238      	movs	r2, #56	; 0x38
 8004b66:	2105      	movs	r1, #5
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fe f99e 	bl	8002eaa <draw_rect_filled>
		draw_speaker_right(buffer, 243, 20);
 8004b6e:	2214      	movs	r2, #20
 8004b70:	21f3      	movs	r1, #243	; 0xf3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fcdf 	bl	8005536 <draw_speaker_right>
		for ( i = Volume2; i < 230; i++)
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <draw_encoder_volume_front_scale+0x460>)
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e01c      	b.n	8004bbe <draw_encoder_volume_front_scale+0x436>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004b84:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004b86:	781a      	ldrb	r2, [r3, #0]
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <draw_encoder_volume_front_scale+0x450>)
 8004b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8e:	0899      	lsrs	r1, r3, #2
 8004b90:	460b      	mov	r3, r1
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <draw_encoder_volume_front_scale+0x42a>
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b299      	uxth	r1, r3
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	233e      	movs	r3, #62	; 0x3e
 8004baa:	2238      	movs	r2, #56	; 0x38
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fe f8cf 	bl	8002d50 <draw_vline>
		for ( i = Volume2; i < 230; i++)
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <draw_encoder_volume_front_scale+0x44c>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2be5      	cmp	r3, #229	; 0xe5
 8004bc4:	d9de      	bls.n	8004b84 <draw_encoder_volume_front_scale+0x3fc>
		    }
		break;
 8004bc6:	e000      	b.n	8004bca <draw_encoder_volume_front_scale+0x442>
	    default:
		break;
 8004bc8:	bf00      	nop
	    }

    }
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200001da 	.word	0x200001da
 8004bd8:	cccccccd 	.word	0xcccccccd
 8004bdc:	20000554 	.word	0x20000554
 8004be0:	200001de 	.word	0x200001de
 8004be4:	08017f78 	.word	0x08017f78
 8004be8:	200001e0 	.word	0x200001e0
 8004bec:	08017f8c 	.word	0x08017f8c

08004bf0 <draw_encoder_volume_back_scale>:


void draw_encoder_volume_back_scale(uint8_t *const buffer)
    {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
	static uint16_t Volume1;
	static uint16_t Volume2;
	static uint16_t Volume3;
	static uint8_t i;

	switch (encoderVolBack.audioOutputState)
 8004bf8:	4ba2      	ldr	r3, [pc, #648]	; (8004e84 <draw_encoder_volume_back_scale+0x294>)
 8004bfa:	799b      	ldrb	r3, [r3, #6]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	2b05      	cmp	r3, #5
 8004c00:	f200 819f 	bhi.w	8004f42 <draw_encoder_volume_back_scale+0x352>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <draw_encoder_volume_back_scale+0x1c>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004d75 	.word	0x08004d75
 8004c10:	08004f43 	.word	0x08004f43
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004ccd 	.word	0x08004ccd
 8004c1c:	08004de5 	.word	0x08004de5
 8004c20:	08004ea5 	.word	0x08004ea5
	    {
	    case NORMAL:
		Volume3 = map(encoderVolBack.volumeLeftRight, 0, 94, 5, 230);
 8004c24:	4b97      	ldr	r3, [pc, #604]	; (8004e84 <draw_encoder_volume_back_scale+0x294>)
 8004c26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	23e6      	movs	r3, #230	; 0xe6
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	2305      	movs	r3, #5
 8004c32:	225e      	movs	r2, #94	; 0x5e
 8004c34:	2100      	movs	r1, #0
 8004c36:	f001 fad5 	bl	80061e4 <map>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	4b92      	ldr	r3, [pc, #584]	; (8004e88 <draw_encoder_volume_back_scale+0x298>)
 8004c40:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume back", 70, 15, 5);
 8004c42:	2305      	movs	r3, #5
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	230f      	movs	r3, #15
 8004c48:	2246      	movs	r2, #70	; 0x46
 8004c4a:	4990      	ldr	r1, [pc, #576]	; (8004e8c <draw_encoder_volume_back_scale+0x29c>)
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fe fae3 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume3, 62, 5);
 8004c52:	4b8d      	ldr	r3, [pc, #564]	; (8004e88 <draw_encoder_volume_back_scale+0x298>)
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	2205      	movs	r2, #5
 8004c58:	9201      	str	r2, [sp, #4]
 8004c5a:	223e      	movs	r2, #62	; 0x3e
 8004c5c:	9200      	str	r2, [sp, #0]
 8004c5e:	2238      	movs	r2, #56	; 0x38
 8004c60:	2105      	movs	r1, #5
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fe f921 	bl	8002eaa <draw_rect_filled>
		draw_speaker_left(buffer, 10, 43);
 8004c68:	222b      	movs	r2, #43	; 0x2b
 8004c6a:	210a      	movs	r1, #10
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fbc2 	bl	80053f6 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 8004c72:	222b      	movs	r2, #43	; 0x2b
 8004c74:	21ec      	movs	r1, #236	; 0xec
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fc5d 	bl	8005536 <draw_speaker_right>
		for ( i = Volume3; i < 230; i++)
 8004c7c:	4b82      	ldr	r3, [pc, #520]	; (8004e88 <draw_encoder_volume_back_scale+0x298>)
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4b83      	ldr	r3, [pc, #524]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e01c      	b.n	8004cc2 <draw_encoder_volume_back_scale+0xd2>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004c88:	4b81      	ldr	r3, [pc, #516]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <draw_encoder_volume_back_scale+0x2a4>)
 8004c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c92:	0899      	lsrs	r1, r3, #2
 8004c94:	460b      	mov	r3, r1
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <draw_encoder_volume_back_scale+0xc6>
 8004ca2:	4b7b      	ldr	r3, [pc, #492]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b299      	uxth	r1, r3
 8004ca8:	2303      	movs	r3, #3
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	233e      	movs	r3, #62	; 0x3e
 8004cae:	2238      	movs	r2, #56	; 0x38
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fe f84d 	bl	8002d50 <draw_vline>
		for ( i = Volume3; i < 230; i++)
 8004cb6:	4b76      	ldr	r3, [pc, #472]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	4b74      	ldr	r3, [pc, #464]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	4b73      	ldr	r3, [pc, #460]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2be5      	cmp	r3, #229	; 0xe5
 8004cc8:	d9de      	bls.n	8004c88 <draw_encoder_volume_back_scale+0x98>
		    }
		break;
 8004cca:	e13b      	b.n	8004f44 <draw_encoder_volume_back_scale+0x354>
	    case NORMAL_V2:
		Volume3 = map(encoderVolBack.volumeLeftRight, 0, 94, 5, 230);
 8004ccc:	4b6d      	ldr	r3, [pc, #436]	; (8004e84 <draw_encoder_volume_back_scale+0x294>)
 8004cce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	23e6      	movs	r3, #230	; 0xe6
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2305      	movs	r3, #5
 8004cda:	225e      	movs	r2, #94	; 0x5e
 8004cdc:	2100      	movs	r1, #0
 8004cde:	f001 fa81 	bl	80061e4 <map>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <draw_encoder_volume_back_scale+0x298>)
 8004ce8:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume back", 70, 15, 5);
 8004cea:	2305      	movs	r3, #5
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	230f      	movs	r3, #15
 8004cf0:	2246      	movs	r2, #70	; 0x46
 8004cf2:	4966      	ldr	r1, [pc, #408]	; (8004e8c <draw_encoder_volume_back_scale+0x29c>)
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fe fa8f 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume3, 62, 5);
 8004cfa:	4b63      	ldr	r3, [pc, #396]	; (8004e88 <draw_encoder_volume_back_scale+0x298>)
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	2205      	movs	r2, #5
 8004d00:	9201      	str	r2, [sp, #4]
 8004d02:	223e      	movs	r2, #62	; 0x3e
 8004d04:	9200      	str	r2, [sp, #0]
 8004d06:	2238      	movs	r2, #56	; 0x38
 8004d08:	2105      	movs	r1, #5
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fe f8cd 	bl	8002eaa <draw_rect_filled>
		draw_speaker_left(buffer, 10, 43);
 8004d10:	222b      	movs	r2, #43	; 0x2b
 8004d12:	210a      	movs	r1, #10
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fb6e 	bl	80053f6 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 8004d1a:	222b      	movs	r2, #43	; 0x2b
 8004d1c:	21ec      	movs	r1, #236	; 0xec
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fc09 	bl	8005536 <draw_speaker_right>
		for ( i = Volume3; i < 230; i++)
 8004d24:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <draw_encoder_volume_back_scale+0x298>)
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	e01c      	b.n	8004d6a <draw_encoder_volume_back_scale+0x17a>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004d30:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	4b57      	ldr	r3, [pc, #348]	; (8004e94 <draw_encoder_volume_back_scale+0x2a4>)
 8004d36:	fba3 1302 	umull	r1, r3, r3, r2
 8004d3a:	0899      	lsrs	r1, r3, #2
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <draw_encoder_volume_back_scale+0x16e>
 8004d4a:	4b51      	ldr	r3, [pc, #324]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	b299      	uxth	r1, r3
 8004d50:	2303      	movs	r3, #3
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	233e      	movs	r3, #62	; 0x3e
 8004d56:	2238      	movs	r2, #56	; 0x38
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7fd fff9 	bl	8002d50 <draw_vline>
		for ( i = Volume3; i < 230; i++)
 8004d5e:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	4b4a      	ldr	r3, [pc, #296]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2be5      	cmp	r3, #229	; 0xe5
 8004d70:	d9de      	bls.n	8004d30 <draw_encoder_volume_back_scale+0x140>
		    }
		break;
 8004d72:	e0e7      	b.n	8004f44 <draw_encoder_volume_back_scale+0x354>
	    case MUTE:
		draw_text(buffer, "Volume MUTED", 70, 15, 5);
 8004d74:	2305      	movs	r3, #5
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	230f      	movs	r3, #15
 8004d7a:	2246      	movs	r2, #70	; 0x46
 8004d7c:	4946      	ldr	r1, [pc, #280]	; (8004e98 <draw_encoder_volume_back_scale+0x2a8>)
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fe fa4a 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, 6, 62, 5);
 8004d84:	2305      	movs	r3, #5
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	233e      	movs	r3, #62	; 0x3e
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	2306      	movs	r3, #6
 8004d8e:	2238      	movs	r2, #56	; 0x38
 8004d90:	2105      	movs	r1, #5
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fe f889 	bl	8002eaa <draw_rect_filled>
		for ( i = 0; i < 230; i++)
 8004d98:	4b3d      	ldr	r3, [pc, #244]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e01c      	b.n	8004dda <draw_encoder_volume_back_scale+0x1ea>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004da0:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004da2:	781a      	ldrb	r2, [r3, #0]
 8004da4:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <draw_encoder_volume_back_scale+0x2a4>)
 8004da6:	fba3 1302 	umull	r1, r3, r3, r2
 8004daa:	0899      	lsrs	r1, r3, #2
 8004dac:	460b      	mov	r3, r1
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <draw_encoder_volume_back_scale+0x1de>
 8004dba:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b299      	uxth	r1, r3
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	233e      	movs	r3, #62	; 0x3e
 8004dc6:	2238      	movs	r2, #56	; 0x38
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fd ffc1 	bl	8002d50 <draw_vline>
		for ( i = 0; i < 230; i++)
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	4b2d      	ldr	r3, [pc, #180]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2be5      	cmp	r3, #229	; 0xe5
 8004de0:	d9de      	bls.n	8004da0 <draw_encoder_volume_back_scale+0x1b0>
		    }
		break;
 8004de2:	e0af      	b.n	8004f44 <draw_encoder_volume_back_scale+0x354>
	    case ATTE_LEFT:
		Volume1 = map(encoderVolBack.volumeLeft, 0, 94, 5, 230);
 8004de4:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <draw_encoder_volume_back_scale+0x294>)
 8004de6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004dea:	4618      	mov	r0, r3
 8004dec:	23e6      	movs	r3, #230	; 0xe6
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2305      	movs	r3, #5
 8004df2:	225e      	movs	r2, #94	; 0x5e
 8004df4:	2100      	movs	r1, #0
 8004df6:	f001 f9f5 	bl	80061e4 <map>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <draw_encoder_volume_back_scale+0x2ac>)
 8004e00:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume back left", 70, 15, 5);
 8004e02:	2305      	movs	r3, #5
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	230f      	movs	r3, #15
 8004e08:	2246      	movs	r2, #70	; 0x46
 8004e0a:	4925      	ldr	r1, [pc, #148]	; (8004ea0 <draw_encoder_volume_back_scale+0x2b0>)
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fe fa03 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume1, 62, 5);
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <draw_encoder_volume_back_scale+0x2ac>)
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	2205      	movs	r2, #5
 8004e18:	9201      	str	r2, [sp, #4]
 8004e1a:	223e      	movs	r2, #62	; 0x3e
 8004e1c:	9200      	str	r2, [sp, #0]
 8004e1e:	2238      	movs	r2, #56	; 0x38
 8004e20:	2105      	movs	r1, #5
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fe f841 	bl	8002eaa <draw_rect_filled>
		draw_speaker_left(buffer, 10, 43);
 8004e28:	222b      	movs	r2, #43	; 0x2b
 8004e2a:	210a      	movs	r1, #10
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fae2 	bl	80053f6 <draw_speaker_left>
		for ( i = Volume1; i < 230; i++)
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <draw_encoder_volume_back_scale+0x2ac>)
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	4b15      	ldr	r3, [pc, #84]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	e01c      	b.n	8004e78 <draw_encoder_volume_back_scale+0x288>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <draw_encoder_volume_back_scale+0x2a4>)
 8004e44:	fba3 1302 	umull	r1, r3, r3, r2
 8004e48:	0899      	lsrs	r1, r3, #2
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <draw_encoder_volume_back_scale+0x27c>
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b299      	uxth	r1, r3
 8004e5e:	2303      	movs	r3, #3
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	233e      	movs	r3, #62	; 0x3e
 8004e64:	2238      	movs	r2, #56	; 0x38
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fd ff72 	bl	8002d50 <draw_vline>
		for ( i = Volume1; i < 230; i++)
 8004e6c:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <draw_encoder_volume_back_scale+0x2a0>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2be5      	cmp	r3, #229	; 0xe5
 8004e7e:	d9de      	bls.n	8004e3e <draw_encoder_volume_back_scale+0x24e>
		    }
		break;
 8004e80:	e060      	b.n	8004f44 <draw_encoder_volume_back_scale+0x354>
 8004e82:	bf00      	nop
 8004e84:	20000518 	.word	0x20000518
 8004e88:	200001e2 	.word	0x200001e2
 8004e8c:	08017fa0 	.word	0x08017fa0
 8004e90:	200001e4 	.word	0x200001e4
 8004e94:	cccccccd 	.word	0xcccccccd
 8004e98:	08017f68 	.word	0x08017f68
 8004e9c:	200001e6 	.word	0x200001e6
 8004ea0:	08017fac 	.word	0x08017fac
	    case ATTE_RIGHT:
		Volume2 = map(encoderVolBack.volumeRight, 0, 94, 5, 230);
 8004ea4:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <draw_encoder_volume_back_scale+0x35c>)
 8004ea6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	23e6      	movs	r3, #230	; 0xe6
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2305      	movs	r3, #5
 8004eb2:	225e      	movs	r2, #94	; 0x5e
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f001 f995 	bl	80061e4 <map>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <draw_encoder_volume_back_scale+0x360>)
 8004ec0:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume Back right", 70, 15, 5);
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	230f      	movs	r3, #15
 8004ec8:	2246      	movs	r2, #70	; 0x46
 8004eca:	4922      	ldr	r1, [pc, #136]	; (8004f54 <draw_encoder_volume_back_scale+0x364>)
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fe f9a3 	bl	8003218 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume2, 62, 5);
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	; (8004f50 <draw_encoder_volume_back_scale+0x360>)
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	2205      	movs	r2, #5
 8004ed8:	9201      	str	r2, [sp, #4]
 8004eda:	223e      	movs	r2, #62	; 0x3e
 8004edc:	9200      	str	r2, [sp, #0]
 8004ede:	2238      	movs	r2, #56	; 0x38
 8004ee0:	2105      	movs	r1, #5
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fd ffe1 	bl	8002eaa <draw_rect_filled>
		draw_speaker_right(buffer, 236, 43);
 8004ee8:	222b      	movs	r2, #43	; 0x2b
 8004eea:	21ec      	movs	r1, #236	; 0xec
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fb22 	bl	8005536 <draw_speaker_right>
		for ( i = Volume2; i < 230; i++)
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <draw_encoder_volume_back_scale+0x360>)
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <draw_encoder_volume_back_scale+0x368>)
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e01c      	b.n	8004f38 <draw_encoder_volume_back_scale+0x348>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004efe:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <draw_encoder_volume_back_scale+0x368>)
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <draw_encoder_volume_back_scale+0x36c>)
 8004f04:	fba3 1302 	umull	r1, r3, r3, r2
 8004f08:	0899      	lsrs	r1, r3, #2
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d109      	bne.n	8004f2c <draw_encoder_volume_back_scale+0x33c>
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <draw_encoder_volume_back_scale+0x368>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	b299      	uxth	r1, r3
 8004f1e:	2303      	movs	r3, #3
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	233e      	movs	r3, #62	; 0x3e
 8004f24:	2238      	movs	r2, #56	; 0x38
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fd ff12 	bl	8002d50 <draw_vline>
		for ( i = Volume2; i < 230; i++)
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <draw_encoder_volume_back_scale+0x368>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <draw_encoder_volume_back_scale+0x368>)
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <draw_encoder_volume_back_scale+0x368>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2be5      	cmp	r3, #229	; 0xe5
 8004f3e:	d9de      	bls.n	8004efe <draw_encoder_volume_back_scale+0x30e>
		    }
		break;
 8004f40:	e000      	b.n	8004f44 <draw_encoder_volume_back_scale+0x354>
	    default:
		break;
 8004f42:	bf00      	nop
	    }

    }
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000518 	.word	0x20000518
 8004f50:	200001e8 	.word	0x200001e8
 8004f54:	08017fc0 	.word	0x08017fc0
 8004f58:	200001e4 	.word	0x200001e4
 8004f5c:	cccccccd 	.word	0xcccccccd

08004f60 <draw_gain_and_freq_loudness>:


void draw_gain_and_freq_loudness(uint8_t *const buffer)
    {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	6078      	str	r0, [r7, #4]
	if ((encoderFilterLoudness.gain > 0))
 8004f68:	4b45      	ldr	r3, [pc, #276]	; (8005080 <draw_gain_and_freq_loudness+0x120>)
 8004f6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	dd36      	ble.n	8004fe0 <draw_gain_and_freq_loudness+0x80>
	    {
		if (encoderFilterLoudness.gain > 10)
 8004f72:	4b43      	ldr	r3, [pc, #268]	; (8005080 <draw_gain_and_freq_loudness+0x120>)
 8004f74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004f78:	2b0a      	cmp	r3, #10
 8004f7a:	dd1f      	ble.n	8004fbc <draw_gain_and_freq_loudness+0x5c>
		    {
			display_gain_tab[0] = ASCII_PLUS;
 8004f7c:	4b41      	ldr	r3, [pc, #260]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004f7e:	222b      	movs	r2, #43	; 0x2b
 8004f80:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, encoderFilterLoudness.gain);
 8004f82:	4b3f      	ldr	r3, [pc, #252]	; (8005080 <draw_gain_and_freq_loudness+0x120>)
 8004f84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f001 f8f9 	bl	8006184 <SplitNumberToDignits>
 8004f92:	4603      	mov	r3, r0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3330      	adds	r3, #48	; 0x30
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4b3a      	ldr	r3, [pc, #232]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004f9c:	705a      	strb	r2, [r3, #1]
			display_gain_tab[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, encoderFilterLoudness.gain);
 8004f9e:	4b38      	ldr	r3, [pc, #224]	; (8005080 <draw_gain_and_freq_loudness+0x120>)
 8004fa0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f001 f8eb 	bl	8006184 <SplitNumberToDignits>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	3330      	adds	r3, #48	; 0x30
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	4b33      	ldr	r3, [pc, #204]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004fb8:	709a      	strb	r2, [r3, #2]
 8004fba:	e014      	b.n	8004fe6 <draw_gain_and_freq_loudness+0x86>
		    }
		else
		    {
			display_gain_tab[0] = ASCII_PLUS;
 8004fbc:	4b31      	ldr	r3, [pc, #196]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004fbe:	222b      	movs	r2, #43	; 0x2b
 8004fc0:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, encoderFilterLoudness.gain);
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <draw_gain_and_freq_loudness+0x120>)
 8004fc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004fc8:	b21b      	sxth	r3, r3
 8004fca:	4619      	mov	r1, r3
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f001 f8d9 	bl	8006184 <SplitNumberToDignits>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	3330      	adds	r3, #48	; 0x30
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4b2a      	ldr	r3, [pc, #168]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004fdc:	705a      	strb	r2, [r3, #1]
 8004fde:	e002      	b.n	8004fe6 <draw_gain_and_freq_loudness+0x86>
		    }
	    }
	else 	//gain == 0
	    {
		display_gain_tab[0] = ASCII_DIGIT_OFFSET;
 8004fe0:	4b28      	ldr	r3, [pc, #160]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004fe2:	2230      	movs	r2, #48	; 0x30
 8004fe4:	701a      	strb	r2, [r3, #0]
	    }

	strcat(display_gain_tab, " dB");
 8004fe6:	4827      	ldr	r0, [pc, #156]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004fe8:	f7fb f974 	bl	80002d4 <strlen>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b24      	ldr	r3, [pc, #144]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	4a24      	ldr	r2, [pc, #144]	; (8005088 <draw_gain_and_freq_loudness+0x128>)
 8004ff6:	6810      	ldr	r0, [r2, #0]
 8004ff8:	6018      	str	r0, [r3, #0]
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 8004ffa:	2305      	movs	r3, #5
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	233f      	movs	r3, #63	; 0x3f
 8005000:	2264      	movs	r2, #100	; 0x64
 8005002:	4920      	ldr	r1, [pc, #128]	; (8005084 <draw_gain_and_freq_loudness+0x124>)
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fe f907 	bl	8003218 <draw_text>

	switch (encoderFilterLoudness.centerFreq)
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <draw_gain_and_freq_loudness+0x120>)
 800500c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d82f      	bhi.n	8005074 <draw_gain_and_freq_loudness+0x114>
 8005014:	a201      	add	r2, pc, #4	; (adr r2, 800501c <draw_gain_and_freq_loudness+0xbc>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	0800502d 	.word	0x0800502d
 8005020:	0800503f 	.word	0x0800503f
 8005024:	08005051 	.word	0x08005051
 8005028:	08005063 	.word	0x08005063
	    {
		case 0:		//00 - flat
		    draw_text(buffer, "Flat", 100, 40, 5);
 800502c:	2305      	movs	r3, #5
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2328      	movs	r3, #40	; 0x28
 8005032:	2264      	movs	r2, #100	; 0x64
 8005034:	4915      	ldr	r1, [pc, #84]	; (800508c <draw_gain_and_freq_loudness+0x12c>)
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fe f8ee 	bl	8003218 <draw_text>
		break;
 800503c:	e01b      	b.n	8005076 <draw_gain_and_freq_loudness+0x116>
		case 1:		//01  - 400 Hz
		    draw_text(buffer, "400 Hz", 100, 40, 5);
 800503e:	2305      	movs	r3, #5
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	2328      	movs	r3, #40	; 0x28
 8005044:	2264      	movs	r2, #100	; 0x64
 8005046:	4912      	ldr	r1, [pc, #72]	; (8005090 <draw_gain_and_freq_loudness+0x130>)
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fe f8e5 	bl	8003218 <draw_text>
		break;
 800504e:	e012      	b.n	8005076 <draw_gain_and_freq_loudness+0x116>
		case 2:		//10  - 800 Hz
		    draw_text(buffer, "800 Hz", 100, 40, 5);
 8005050:	2305      	movs	r3, #5
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	2328      	movs	r3, #40	; 0x28
 8005056:	2264      	movs	r2, #100	; 0x64
 8005058:	490e      	ldr	r1, [pc, #56]	; (8005094 <draw_gain_and_freq_loudness+0x134>)
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe f8dc 	bl	8003218 <draw_text>
		break;
 8005060:	e009      	b.n	8005076 <draw_gain_and_freq_loudness+0x116>
		case 3:		//11  - 2400 Hz
		    draw_text(buffer, "2400 Hz", 100, 40, 5);
 8005062:	2305      	movs	r3, #5
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2328      	movs	r3, #40	; 0x28
 8005068:	2264      	movs	r2, #100	; 0x64
 800506a:	490b      	ldr	r1, [pc, #44]	; (8005098 <draw_gain_and_freq_loudness+0x138>)
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fe f8d3 	bl	8003218 <draw_text>
		break;
 8005072:	e000      	b.n	8005076 <draw_gain_and_freq_loudness+0x116>
		default:
		break;
 8005074:	bf00      	nop
	    }
    }
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	2000053c 	.word	0x2000053c
 8005084:	20000198 	.word	0x20000198
 8005088:	08017fd4 	.word	0x08017fd4
 800508c:	08017fd8 	.word	0x08017fd8
 8005090:	08017fe0 	.word	0x08017fe0
 8005094:	08017fe8 	.word	0x08017fe8
 8005098:	08017ff0 	.word	0x08017ff0

0800509c <draw_gain_and_freq>:


void draw_gain_and_freq(int8_t gainValue)
    {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	71fb      	strb	r3, [r7, #7]
	if (gainValue < 0)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da39      	bge.n	8005122 <draw_gain_and_freq+0x86>
	    {
		gainValue = abs(gainValue);
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bfb8      	it	lt
 80050b6:	425b      	neglt	r3, r3
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	71fb      	strb	r3, [r7, #7]
		if (gainValue > 10)
 80050bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c0:	2b0a      	cmp	r3, #10
 80050c2:	dd1d      	ble.n	8005100 <draw_gain_and_freq+0x64>
		    {
			display_gain_tab[0] = ASCII_MINUS;
 80050c4:	4b3b      	ldr	r3, [pc, #236]	; (80051b4 <draw_gain_and_freq+0x118>)
 80050c6:	222d      	movs	r2, #45	; 0x2d
 80050c8:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, gainValue);
 80050ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ce:	b21b      	sxth	r3, r3
 80050d0:	4619      	mov	r1, r3
 80050d2:	2001      	movs	r0, #1
 80050d4:	f001 f856 	bl	8006184 <SplitNumberToDignits>
 80050d8:	4603      	mov	r3, r0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	3330      	adds	r3, #48	; 0x30
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <draw_gain_and_freq+0x118>)
 80050e2:	705a      	strb	r2, [r3, #1]
			display_gain_tab[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 80050e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	4619      	mov	r1, r3
 80050ec:	2000      	movs	r0, #0
 80050ee:	f001 f849 	bl	8006184 <SplitNumberToDignits>
 80050f2:	4603      	mov	r3, r0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	3330      	adds	r3, #48	; 0x30
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <draw_gain_and_freq+0x118>)
 80050fc:	709a      	strb	r2, [r3, #2]
 80050fe:	e04a      	b.n	8005196 <draw_gain_and_freq+0xfa>
		    }
		else
		    {
			display_gain_tab[0] = ASCII_MINUS;
 8005100:	4b2c      	ldr	r3, [pc, #176]	; (80051b4 <draw_gain_and_freq+0x118>)
 8005102:	222d      	movs	r2, #45	; 0x2d
 8005104:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	b21b      	sxth	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	2000      	movs	r0, #0
 8005110:	f001 f838 	bl	8006184 <SplitNumberToDignits>
 8005114:	4603      	mov	r3, r0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	3330      	adds	r3, #48	; 0x30
 800511a:	b2da      	uxtb	r2, r3
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <draw_gain_and_freq+0x118>)
 800511e:	705a      	strb	r2, [r3, #1]
 8005120:	e039      	b.n	8005196 <draw_gain_and_freq+0xfa>
		    }
	    }
	else if((gainValue > 0))
 8005122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	dd32      	ble.n	8005190 <draw_gain_and_freq+0xf4>
	    {
		if (gainValue > 10)
 800512a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512e:	2b0a      	cmp	r3, #10
 8005130:	dd1d      	ble.n	800516e <draw_gain_and_freq+0xd2>
		    {
			display_gain_tab[0] = ASCII_PLUS;
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <draw_gain_and_freq+0x118>)
 8005134:	222b      	movs	r2, #43	; 0x2b
 8005136:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, gainValue);
 8005138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513c:	b21b      	sxth	r3, r3
 800513e:	4619      	mov	r1, r3
 8005140:	2001      	movs	r0, #1
 8005142:	f001 f81f 	bl	8006184 <SplitNumberToDignits>
 8005146:	4603      	mov	r3, r0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	3330      	adds	r3, #48	; 0x30
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <draw_gain_and_freq+0x118>)
 8005150:	705a      	strb	r2, [r3, #1]
			display_gain_tab[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	b21b      	sxth	r3, r3
 8005158:	4619      	mov	r1, r3
 800515a:	2000      	movs	r0, #0
 800515c:	f001 f812 	bl	8006184 <SplitNumberToDignits>
 8005160:	4603      	mov	r3, r0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	3330      	adds	r3, #48	; 0x30
 8005166:	b2da      	uxtb	r2, r3
 8005168:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <draw_gain_and_freq+0x118>)
 800516a:	709a      	strb	r2, [r3, #2]
 800516c:	e013      	b.n	8005196 <draw_gain_and_freq+0xfa>
		    }
		else
		    {
			display_gain_tab[0] = ASCII_PLUS;
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <draw_gain_and_freq+0x118>)
 8005170:	222b      	movs	r2, #43	; 0x2b
 8005172:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 8005174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005178:	b21b      	sxth	r3, r3
 800517a:	4619      	mov	r1, r3
 800517c:	2000      	movs	r0, #0
 800517e:	f001 f801 	bl	8006184 <SplitNumberToDignits>
 8005182:	4603      	mov	r3, r0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	3330      	adds	r3, #48	; 0x30
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <draw_gain_and_freq+0x118>)
 800518c:	705a      	strb	r2, [r3, #1]
 800518e:	e002      	b.n	8005196 <draw_gain_and_freq+0xfa>
		    }
	    }
	else 	//gain == 0
	    {
		display_gain_tab[0] = ASCII_DIGIT_OFFSET;
 8005190:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <draw_gain_and_freq+0x118>)
 8005192:	2230      	movs	r2, #48	; 0x30
 8005194:	701a      	strb	r2, [r3, #0]
	    }

	strcat(display_gain_tab, " dB");
 8005196:	4807      	ldr	r0, [pc, #28]	; (80051b4 <draw_gain_and_freq+0x118>)
 8005198:	f7fb f89c 	bl	80002d4 <strlen>
 800519c:	4603      	mov	r3, r0
 800519e:	461a      	mov	r2, r3
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <draw_gain_and_freq+0x118>)
 80051a2:	4413      	add	r3, r2
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <draw_gain_and_freq+0x11c>)
 80051a6:	6810      	ldr	r0, [r2, #0]
 80051a8:	6018      	str	r0, [r3, #0]
    }
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000198 	.word	0x20000198
 80051b8:	08017fd4 	.word	0x08017fd4

080051bc <draw_nutka1>:

//heigh - 6 pixels, width - 8 pixels
void draw_nutka1(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 80051bc:	b590      	push	{r4, r7, lr}
 80051be:	b085      	sub	sp, #20
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	807b      	strh	r3, [r7, #2]
 80051c8:	4613      	mov	r3, r2
 80051ca:	803b      	strh	r3, [r7, #0]
	draw_rect_filled(buffer, begin_x, begin_y, begin_x + 1, begin_y + 1, 5);			// x = 19   y = 19
 80051cc:	8879      	ldrh	r1, [r7, #2]
 80051ce:	883a      	ldrh	r2, [r7, #0]
 80051d0:	887b      	ldrh	r3, [r7, #2]
 80051d2:	3301      	adds	r3, #1
 80051d4:	b298      	uxth	r0, r3
 80051d6:	883b      	ldrh	r3, [r7, #0]
 80051d8:	3301      	adds	r3, #1
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2405      	movs	r4, #5
 80051de:	9401      	str	r4, [sp, #4]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4603      	mov	r3, r0
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fd fe60 	bl	8002eaa <draw_rect_filled>
	draw_rect_filled(buffer, begin_x + 4, begin_y, begin_x + 5 , begin_y + 1, 5);
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	3304      	adds	r3, #4
 80051ee:	b299      	uxth	r1, r3
 80051f0:	883a      	ldrh	r2, [r7, #0]
 80051f2:	887b      	ldrh	r3, [r7, #2]
 80051f4:	3305      	adds	r3, #5
 80051f6:	b298      	uxth	r0, r3
 80051f8:	883b      	ldrh	r3, [r7, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2405      	movs	r4, #5
 8005200:	9401      	str	r4, [sp, #4]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	4603      	mov	r3, r0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fd fe4f 	bl	8002eaa <draw_rect_filled>
	      draw_hline(buffer, begin_y - 5 , begin_x + 2, begin_x + 7, 5);
 800520c:	883b      	ldrh	r3, [r7, #0]
 800520e:	3b05      	subs	r3, #5
 8005210:	b299      	uxth	r1, r3
 8005212:	887b      	ldrh	r3, [r7, #2]
 8005214:	3302      	adds	r3, #2
 8005216:	b29a      	uxth	r2, r3
 8005218:	887b      	ldrh	r3, [r7, #2]
 800521a:	3307      	adds	r3, #7
 800521c:	b29b      	uxth	r3, r3
 800521e:	2005      	movs	r0, #5
 8005220:	9000      	str	r0, [sp, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fd fdd0 	bl	8002dc8 <draw_hline>
	      draw_vline(buffer, begin_x + 1 , begin_y - 1, begin_y - 4, 5);
 8005228:	887b      	ldrh	r3, [r7, #2]
 800522a:	3301      	adds	r3, #1
 800522c:	b299      	uxth	r1, r3
 800522e:	883b      	ldrh	r3, [r7, #0]
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	883b      	ldrh	r3, [r7, #0]
 8005236:	3b04      	subs	r3, #4
 8005238:	b29b      	uxth	r3, r3
 800523a:	2005      	movs	r0, #5
 800523c:	9000      	str	r0, [sp, #0]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fd fd86 	bl	8002d50 <draw_vline>
	      draw_vline(buffer, begin_x + 5,  begin_y - 1, begin_y - 4, 5);
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	3305      	adds	r3, #5
 8005248:	b299      	uxth	r1, r3
 800524a:	883b      	ldrh	r3, [r7, #0]
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	883b      	ldrh	r3, [r7, #0]
 8005252:	3b04      	subs	r3, #4
 8005254:	b29b      	uxth	r3, r3
 8005256:	2005      	movs	r0, #5
 8005258:	9000      	str	r0, [sp, #0]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd fd78 	bl	8002d50 <draw_vline>
	      draw_pixel(buffer, begin_x + 2, begin_y - 4, 5);
 8005260:	887b      	ldrh	r3, [r7, #2]
 8005262:	3302      	adds	r3, #2
 8005264:	b299      	uxth	r1, r3
 8005266:	883b      	ldrh	r3, [r7, #0]
 8005268:	3b04      	subs	r3, #4
 800526a:	b29a      	uxth	r2, r3
 800526c:	2305      	movs	r3, #5
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fd fcf2 	bl	8002c58 <draw_pixel>
    }
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	bd90      	pop	{r4, r7, pc}

0800527c <draw_nutka2>:

//heigh - 5 pixels, width - 4 pixels
void draw_nutka2(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b085      	sub	sp, #20
 8005280:	af02      	add	r7, sp, #8
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]
 8005288:	4613      	mov	r3, r2
 800528a:	803b      	strh	r3, [r7, #0]
	draw_rect_filled(buffer, begin_x, begin_y, begin_x + 1, begin_y + 1, 5);
 800528c:	8879      	ldrh	r1, [r7, #2]
 800528e:	883a      	ldrh	r2, [r7, #0]
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	3301      	adds	r3, #1
 8005294:	b298      	uxth	r0, r3
 8005296:	883b      	ldrh	r3, [r7, #0]
 8005298:	3301      	adds	r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	2405      	movs	r4, #5
 800529e:	9401      	str	r4, [sp, #4]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	4603      	mov	r3, r0
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fd fe00 	bl	8002eaa <draw_rect_filled>
	draw_vline(buffer, begin_x + 1, begin_y - 1, begin_y - 3, 5);
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	3301      	adds	r3, #1
 80052ae:	b299      	uxth	r1, r3
 80052b0:	883b      	ldrh	r3, [r7, #0]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	883b      	ldrh	r3, [r7, #0]
 80052b8:	3b03      	subs	r3, #3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2005      	movs	r0, #5
 80052be:	9000      	str	r0, [sp, #0]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fd fd45 	bl	8002d50 <draw_vline>
	draw_hline(buffer, begin_y - 4, begin_x + 1, begin_x + 4, 5);
 80052c6:	883b      	ldrh	r3, [r7, #0]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	b299      	uxth	r1, r3
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	3301      	adds	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	887b      	ldrh	r3, [r7, #2]
 80052d4:	3304      	adds	r3, #4
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2005      	movs	r0, #5
 80052da:	9000      	str	r0, [sp, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fd fd73 	bl	8002dc8 <draw_hline>
	draw_pixel(buffer, begin_x + 4, begin_y - 3, 5);
 80052e2:	887b      	ldrh	r3, [r7, #2]
 80052e4:	3304      	adds	r3, #4
 80052e6:	b299      	uxth	r1, r3
 80052e8:	883b      	ldrh	r3, [r7, #0]
 80052ea:	3b03      	subs	r3, #3
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	2305      	movs	r3, #5
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fd fcb1 	bl	8002c58 <draw_pixel>
    }
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd90      	pop	{r4, r7, pc}

080052fe <draw_nutka4>:
	draw_pixel(buffer, begin_x + 5, begin_y - 5, 5);
    }

//heigh - 8 pixels, width - 11 pixels
void draw_nutka4(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 80052fe:	b590      	push	{r4, r7, lr}
 8005300:	b085      	sub	sp, #20
 8005302:	af02      	add	r7, sp, #8
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	807b      	strh	r3, [r7, #2]
 800530a:	4613      	mov	r3, r2
 800530c:	803b      	strh	r3, [r7, #0]
	draw_rect_filled(buffer, begin_x + 1, begin_y, begin_x + 2, begin_y + 2, 5);
 800530e:	887b      	ldrh	r3, [r7, #2]
 8005310:	3301      	adds	r3, #1
 8005312:	b299      	uxth	r1, r3
 8005314:	883a      	ldrh	r2, [r7, #0]
 8005316:	887b      	ldrh	r3, [r7, #2]
 8005318:	3302      	adds	r3, #2
 800531a:	b298      	uxth	r0, r3
 800531c:	883b      	ldrh	r3, [r7, #0]
 800531e:	3302      	adds	r3, #2
 8005320:	b29b      	uxth	r3, r3
 8005322:	2405      	movs	r4, #5
 8005324:	9401      	str	r4, [sp, #4]
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4603      	mov	r3, r0
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fd fdbd 	bl	8002eaa <draw_rect_filled>
	draw_rect_filled(buffer, begin_x + 6, begin_y, begin_x + 8, begin_y + 2, 5);
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	3306      	adds	r3, #6
 8005334:	b299      	uxth	r1, r3
 8005336:	883a      	ldrh	r2, [r7, #0]
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	3308      	adds	r3, #8
 800533c:	b298      	uxth	r0, r3
 800533e:	883b      	ldrh	r3, [r7, #0]
 8005340:	3302      	adds	r3, #2
 8005342:	b29b      	uxth	r3, r3
 8005344:	2405      	movs	r4, #5
 8005346:	9401      	str	r4, [sp, #4]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4603      	mov	r3, r0
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fd fdac 	bl	8002eaa <draw_rect_filled>
	draw_vline(buffer, begin_x + 2, begin_y - 1, begin_y - 6, 5);
 8005352:	887b      	ldrh	r3, [r7, #2]
 8005354:	3302      	adds	r3, #2
 8005356:	b299      	uxth	r1, r3
 8005358:	883b      	ldrh	r3, [r7, #0]
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	883b      	ldrh	r3, [r7, #0]
 8005360:	3b06      	subs	r3, #6
 8005362:	b29b      	uxth	r3, r3
 8005364:	2005      	movs	r0, #5
 8005366:	9000      	str	r0, [sp, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fd fcf1 	bl	8002d50 <draw_vline>
	draw_vline(buffer, begin_x + 8, begin_y - 1, begin_y - 7, 5);
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	3308      	adds	r3, #8
 8005372:	b299      	uxth	r1, r3
 8005374:	883b      	ldrh	r3, [r7, #0]
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	883b      	ldrh	r3, [r7, #0]
 800537c:	3b07      	subs	r3, #7
 800537e:	b29b      	uxth	r3, r3
 8005380:	2005      	movs	r0, #5
 8005382:	9000      	str	r0, [sp, #0]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fd fce3 	bl	8002d50 <draw_vline>
	draw_hline(buffer, begin_y - 7, begin_x + 3, begin_x + 10, 5);
 800538a:	883b      	ldrh	r3, [r7, #0]
 800538c:	3b07      	subs	r3, #7
 800538e:	b299      	uxth	r1, r3
 8005390:	887b      	ldrh	r3, [r7, #2]
 8005392:	3303      	adds	r3, #3
 8005394:	b29a      	uxth	r2, r3
 8005396:	887b      	ldrh	r3, [r7, #2]
 8005398:	330a      	adds	r3, #10
 800539a:	b29b      	uxth	r3, r3
 800539c:	2005      	movs	r0, #5
 800539e:	9000      	str	r0, [sp, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fd fd11 	bl	8002dc8 <draw_hline>
	draw_pixel(buffer, begin_x + 3, begin_y - 6, 5);
 80053a6:	887b      	ldrh	r3, [r7, #2]
 80053a8:	3303      	adds	r3, #3
 80053aa:	b299      	uxth	r1, r3
 80053ac:	883b      	ldrh	r3, [r7, #0]
 80053ae:	3b06      	subs	r3, #6
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	2305      	movs	r3, #5
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fd fc4f 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x + 10, begin_y - 6, 5);
 80053ba:	887b      	ldrh	r3, [r7, #2]
 80053bc:	330a      	adds	r3, #10
 80053be:	b299      	uxth	r1, r3
 80053c0:	883b      	ldrh	r3, [r7, #0]
 80053c2:	3b06      	subs	r3, #6
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	2305      	movs	r3, #5
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7fd fc45 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x, begin_y + 1, 5);
 80053ce:	8879      	ldrh	r1, [r7, #2]
 80053d0:	883b      	ldrh	r3, [r7, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	2305      	movs	r3, #5
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fd fc3d 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x, begin_y + 2, 5);
 80053de:	8879      	ldrh	r1, [r7, #2]
 80053e0:	883b      	ldrh	r3, [r7, #0]
 80053e2:	3302      	adds	r3, #2
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	2305      	movs	r3, #5
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fd fc35 	bl	8002c58 <draw_pixel>
    }
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}

080053f6 <draw_speaker_left>:

    }

//heigh - 11 pixels, width - 19 pixels
void draw_speaker_left(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af02      	add	r7, sp, #8
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	807b      	strh	r3, [r7, #2]
 8005402:	4613      	mov	r3, r2
 8005404:	803b      	strh	r3, [r7, #0]
	draw_hline(buffer, begin_y, begin_x + 2, begin_x + 11, 5);
 8005406:	8839      	ldrh	r1, [r7, #0]
 8005408:	887b      	ldrh	r3, [r7, #2]
 800540a:	3302      	adds	r3, #2
 800540c:	b29a      	uxth	r2, r3
 800540e:	887b      	ldrh	r3, [r7, #2]
 8005410:	330b      	adds	r3, #11
 8005412:	b29b      	uxth	r3, r3
 8005414:	2005      	movs	r0, #5
 8005416:	9000      	str	r0, [sp, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7fd fcd5 	bl	8002dc8 <draw_hline>
	draw_hline(buffer, begin_y - 16, begin_x + 3, begin_x  + 11, 5);
 800541e:	883b      	ldrh	r3, [r7, #0]
 8005420:	3b10      	subs	r3, #16
 8005422:	b299      	uxth	r1, r3
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	3303      	adds	r3, #3
 8005428:	b29a      	uxth	r2, r3
 800542a:	887b      	ldrh	r3, [r7, #2]
 800542c:	330b      	adds	r3, #11
 800542e:	b29b      	uxth	r3, r3
 8005430:	2005      	movs	r0, #5
 8005432:	9000      	str	r0, [sp, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7fd fcc7 	bl	8002dc8 <draw_hline>
	draw_vline(buffer, begin_x + 3, begin_y , begin_y - 16, 5);
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	3303      	adds	r3, #3
 800543e:	b299      	uxth	r1, r3
 8005440:	883a      	ldrh	r2, [r7, #0]
 8005442:	883b      	ldrh	r3, [r7, #0]
 8005444:	3b10      	subs	r3, #16
 8005446:	b29b      	uxth	r3, r3
 8005448:	2005      	movs	r0, #5
 800544a:	9000      	str	r0, [sp, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fd fc7f 	bl	8002d50 <draw_vline>
	draw_vline(buffer, begin_x + 12, begin_y, begin_y - 16, 5);
 8005452:	887b      	ldrh	r3, [r7, #2]
 8005454:	330c      	adds	r3, #12
 8005456:	b299      	uxth	r1, r3
 8005458:	883a      	ldrh	r2, [r7, #0]
 800545a:	883b      	ldrh	r3, [r7, #0]
 800545c:	3b10      	subs	r3, #16
 800545e:	b29b      	uxth	r3, r3
 8005460:	2005      	movs	r0, #5
 8005462:	9000      	str	r0, [sp, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fd fc73 	bl	8002d50 <draw_vline>
	draw_pixel(buffer, begin_x + 1, begin_y - 1, 5);
 800546a:	887b      	ldrh	r3, [r7, #2]
 800546c:	3301      	adds	r3, #1
 800546e:	b299      	uxth	r1, r3
 8005470:	883b      	ldrh	r3, [r7, #0]
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	2305      	movs	r3, #5
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fd fbed 	bl	8002c58 <draw_pixel>
	draw_vline(buffer, begin_x, begin_y - 2, begin_y - 19, 5);
 800547e:	8879      	ldrh	r1, [r7, #2]
 8005480:	883b      	ldrh	r3, [r7, #0]
 8005482:	3b02      	subs	r3, #2
 8005484:	b29a      	uxth	r2, r3
 8005486:	883b      	ldrh	r3, [r7, #0]
 8005488:	3b13      	subs	r3, #19
 800548a:	b29b      	uxth	r3, r3
 800548c:	2005      	movs	r0, #5
 800548e:	9000      	str	r0, [sp, #0]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fd fc5d 	bl	8002d50 <draw_vline>
	draw_hline(buffer, begin_y - 19, begin_x, begin_x + 9 , 5);
 8005496:	883b      	ldrh	r3, [r7, #0]
 8005498:	3b13      	subs	r3, #19
 800549a:	b299      	uxth	r1, r3
 800549c:	887a      	ldrh	r2, [r7, #2]
 800549e:	887b      	ldrh	r3, [r7, #2]
 80054a0:	3309      	adds	r3, #9
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2005      	movs	r0, #5
 80054a6:	9000      	str	r0, [sp, #0]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7fd fc8d 	bl	8002dc8 <draw_hline>
	draw_pixel(buffer, begin_x + 10, begin_y - 18, 5);
 80054ae:	887b      	ldrh	r3, [r7, #2]
 80054b0:	330a      	adds	r3, #10
 80054b2:	b299      	uxth	r1, r3
 80054b4:	883b      	ldrh	r3, [r7, #0]
 80054b6:	3b12      	subs	r3, #18
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	2305      	movs	r3, #5
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fd fbcb 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x + 11, begin_y - 17, 5);
 80054c2:	887b      	ldrh	r3, [r7, #2]
 80054c4:	330b      	adds	r3, #11
 80054c6:	b299      	uxth	r1, r3
 80054c8:	883b      	ldrh	r3, [r7, #0]
 80054ca:	3b11      	subs	r3, #17
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	2305      	movs	r3, #5
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fd fbc1 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x + 1, begin_y - 18, 5);
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	3301      	adds	r3, #1
 80054da:	b299      	uxth	r1, r3
 80054dc:	883b      	ldrh	r3, [r7, #0]
 80054de:	3b12      	subs	r3, #18
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	2305      	movs	r3, #5
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fd fbb7 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x + 2, begin_y  - 17, 5);
 80054ea:	887b      	ldrh	r3, [r7, #2]
 80054ec:	3302      	adds	r3, #2
 80054ee:	b299      	uxth	r1, r3
 80054f0:	883b      	ldrh	r3, [r7, #0]
 80054f2:	3b11      	subs	r3, #17
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	2305      	movs	r3, #5
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fd fbad 	bl	8002c58 <draw_pixel>
	draw_circle(buffer,begin_x + 8, begin_y - 5, 2, 5);
 80054fe:	887b      	ldrh	r3, [r7, #2]
 8005500:	3308      	adds	r3, #8
 8005502:	b299      	uxth	r1, r3
 8005504:	883b      	ldrh	r3, [r7, #0]
 8005506:	3b05      	subs	r3, #5
 8005508:	b29a      	uxth	r2, r3
 800550a:	2305      	movs	r3, #5
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2302      	movs	r3, #2
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fd fcfb 	bl	8002f0c <draw_circle>
	draw_circle(buffer,begin_x + 8, begin_y - 12, 1, 5);
 8005516:	887b      	ldrh	r3, [r7, #2]
 8005518:	3308      	adds	r3, #8
 800551a:	b299      	uxth	r1, r3
 800551c:	883b      	ldrh	r3, [r7, #0]
 800551e:	3b0c      	subs	r3, #12
 8005520:	b29a      	uxth	r2, r3
 8005522:	2305      	movs	r3, #5
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2301      	movs	r3, #1
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fd fcef 	bl	8002f0c <draw_circle>
    }
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <draw_speaker_right>:

//heigh - 11 pixels, width - 19 pixels
void draw_speaker_right(uint8_t *const buffer,const int16_t begin_x, const int16_t begin_y)
    {
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af02      	add	r7, sp, #8
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	807b      	strh	r3, [r7, #2]
 8005542:	4613      	mov	r3, r2
 8005544:	803b      	strh	r3, [r7, #0]
	draw_hline(buffer, begin_y, begin_x, begin_x + 8, 5);
 8005546:	8839      	ldrh	r1, [r7, #0]
 8005548:	887a      	ldrh	r2, [r7, #2]
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	3308      	adds	r3, #8
 800554e:	b29b      	uxth	r3, r3
 8005550:	2005      	movs	r0, #5
 8005552:	9000      	str	r0, [sp, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fd fc37 	bl	8002dc8 <draw_hline>
	draw_hline(buffer, begin_y - 16, begin_x, begin_x + 8, 5);
 800555a:	883b      	ldrh	r3, [r7, #0]
 800555c:	3b10      	subs	r3, #16
 800555e:	b299      	uxth	r1, r3
 8005560:	887a      	ldrh	r2, [r7, #2]
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	3308      	adds	r3, #8
 8005566:	b29b      	uxth	r3, r3
 8005568:	2005      	movs	r0, #5
 800556a:	9000      	str	r0, [sp, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fd fc2b 	bl	8002dc8 <draw_hline>
	draw_vline(buffer, begin_x, begin_y, begin_y - 16, 5);
 8005572:	8879      	ldrh	r1, [r7, #2]
 8005574:	883a      	ldrh	r2, [r7, #0]
 8005576:	883b      	ldrh	r3, [r7, #0]
 8005578:	3b10      	subs	r3, #16
 800557a:	b29b      	uxth	r3, r3
 800557c:	2005      	movs	r0, #5
 800557e:	9000      	str	r0, [sp, #0]
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7fd fbe5 	bl	8002d50 <draw_vline>
	draw_vline(buffer, begin_x + 9, begin_y, begin_y - 16, 5);
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	3309      	adds	r3, #9
 800558a:	b299      	uxth	r1, r3
 800558c:	883a      	ldrh	r2, [r7, #0]
 800558e:	883b      	ldrh	r3, [r7, #0]
 8005590:	3b10      	subs	r3, #16
 8005592:	b29b      	uxth	r3, r3
 8005594:	2005      	movs	r0, #5
 8005596:	9000      	str	r0, [sp, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fd fbd9 	bl	8002d50 <draw_vline>
	draw_pixel(buffer, begin_x + 1, begin_y - 17, 5);
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	3301      	adds	r3, #1
 80055a2:	b299      	uxth	r1, r3
 80055a4:	883b      	ldrh	r3, [r7, #0]
 80055a6:	3b11      	subs	r3, #17
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	2305      	movs	r3, #5
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fd fb53 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x + 2, begin_y - 18, 5);
 80055b2:	887b      	ldrh	r3, [r7, #2]
 80055b4:	3302      	adds	r3, #2
 80055b6:	b299      	uxth	r1, r3
 80055b8:	883b      	ldrh	r3, [r7, #0]
 80055ba:	3b12      	subs	r3, #18
 80055bc:	b29a      	uxth	r2, r3
 80055be:	2305      	movs	r3, #5
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7fd fb49 	bl	8002c58 <draw_pixel>
	draw_hline(buffer, begin_y - 19, begin_x + 3, begin_x + 11, 5);
 80055c6:	883b      	ldrh	r3, [r7, #0]
 80055c8:	3b13      	subs	r3, #19
 80055ca:	b299      	uxth	r1, r3
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	3303      	adds	r3, #3
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	330b      	adds	r3, #11
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2005      	movs	r0, #5
 80055da:	9000      	str	r0, [sp, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fd fbf3 	bl	8002dc8 <draw_hline>
	draw_pixel(buffer, begin_x + 9 , begin_y - 17, 5);
 80055e2:	887b      	ldrh	r3, [r7, #2]
 80055e4:	3309      	adds	r3, #9
 80055e6:	b299      	uxth	r1, r3
 80055e8:	883b      	ldrh	r3, [r7, #0]
 80055ea:	3b11      	subs	r3, #17
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	2305      	movs	r3, #5
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fd fb31 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x + 10, begin_y - 18, 5);
 80055f6:	887b      	ldrh	r3, [r7, #2]
 80055f8:	330a      	adds	r3, #10
 80055fa:	b299      	uxth	r1, r3
 80055fc:	883b      	ldrh	r3, [r7, #0]
 80055fe:	3b12      	subs	r3, #18
 8005600:	b29a      	uxth	r2, r3
 8005602:	2305      	movs	r3, #5
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fd fb27 	bl	8002c58 <draw_pixel>
	draw_vline(buffer, begin_x + 12, begin_y - 3, begin_y - 19, 5);
 800560a:	887b      	ldrh	r3, [r7, #2]
 800560c:	330c      	adds	r3, #12
 800560e:	b299      	uxth	r1, r3
 8005610:	883b      	ldrh	r3, [r7, #0]
 8005612:	3b03      	subs	r3, #3
 8005614:	b29a      	uxth	r2, r3
 8005616:	883b      	ldrh	r3, [r7, #0]
 8005618:	3b13      	subs	r3, #19
 800561a:	b29b      	uxth	r3, r3
 800561c:	2005      	movs	r0, #5
 800561e:	9000      	str	r0, [sp, #0]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fd fb95 	bl	8002d50 <draw_vline>
	draw_pixel(buffer, begin_x + 10, begin_y - 1, 5);
 8005626:	887b      	ldrh	r3, [r7, #2]
 8005628:	330a      	adds	r3, #10
 800562a:	b299      	uxth	r1, r3
 800562c:	883b      	ldrh	r3, [r7, #0]
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	2305      	movs	r3, #5
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fd fb0f 	bl	8002c58 <draw_pixel>
	draw_pixel(buffer, begin_x + 11, begin_y - 2, 5);
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	330b      	adds	r3, #11
 800563e:	b299      	uxth	r1, r3
 8005640:	883b      	ldrh	r3, [r7, #0]
 8005642:	3b02      	subs	r3, #2
 8005644:	b29a      	uxth	r2, r3
 8005646:	2305      	movs	r3, #5
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fd fb05 	bl	8002c58 <draw_pixel>
	draw_circle(buffer,begin_x + 4, begin_y - 5, 2, 5);
 800564e:	887b      	ldrh	r3, [r7, #2]
 8005650:	3304      	adds	r3, #4
 8005652:	b299      	uxth	r1, r3
 8005654:	883b      	ldrh	r3, [r7, #0]
 8005656:	3b05      	subs	r3, #5
 8005658:	b29a      	uxth	r2, r3
 800565a:	2305      	movs	r3, #5
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2302      	movs	r3, #2
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fd fc53 	bl	8002f0c <draw_circle>
	draw_circle(buffer,begin_x + 4, begin_y - 12, 1, 5);
 8005666:	887b      	ldrh	r3, [r7, #2]
 8005668:	3304      	adds	r3, #4
 800566a:	b299      	uxth	r1, r3
 800566c:	883b      	ldrh	r3, [r7, #0]
 800566e:	3b0c      	subs	r3, #12
 8005670:	b29a      	uxth	r2, r3
 8005672:	2305      	movs	r3, #5
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	2301      	movs	r3, #1
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7fd fc47 	bl	8002f0c <draw_circle>
    }
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <draw_UV_rectangle_scale>:


void draw_UV_rectangle_scale(uint8_t *const buffer, const UV_meter_t left_channel, const UV_meter_t right_channel)
    {
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af02      	add	r7, sp, #8
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	807b      	strh	r3, [r7, #2]
 8005692:	4613      	mov	r3, r2
 8005694:	803b      	strh	r3, [r7, #0]
	for (uint16_t a = 20; a < 254; a = a + 18)
 8005696:	2314      	movs	r3, #20
 8005698:	81fb      	strh	r3, [r7, #14]
 800569a:	e040      	b.n	800571e <draw_UV_rectangle_scale+0x98>
	    {
		if (left_channel < (a + 18))
 800569c:	89fb      	ldrh	r3, [r7, #14]
 800569e:	f103 0211 	add.w	r2, r3, #17
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	db0c      	blt.n	80056c2 <draw_UV_rectangle_scale+0x3c>
		    {
			draw_rect_filled(buffer, a, 16, a + 14, 26, 1);
 80056a8:	89fb      	ldrh	r3, [r7, #14]
 80056aa:	330e      	adds	r3, #14
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	89f9      	ldrh	r1, [r7, #14]
 80056b0:	2201      	movs	r2, #1
 80056b2:	9201      	str	r2, [sp, #4]
 80056b4:	221a      	movs	r2, #26
 80056b6:	9200      	str	r2, [sp, #0]
 80056b8:	2210      	movs	r2, #16
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fd fbf5 	bl	8002eaa <draw_rect_filled>
 80056c0:	e00b      	b.n	80056da <draw_UV_rectangle_scale+0x54>
		    }
		else
		    {
			draw_rect_filled(buffer, a, 16, a + 14, 26, 10);
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	330e      	adds	r3, #14
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	89f9      	ldrh	r1, [r7, #14]
 80056ca:	220a      	movs	r2, #10
 80056cc:	9201      	str	r2, [sp, #4]
 80056ce:	221a      	movs	r2, #26
 80056d0:	9200      	str	r2, [sp, #0]
 80056d2:	2210      	movs	r2, #16
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7fd fbe8 	bl	8002eaa <draw_rect_filled>
		    }

		if(right_channel < (a + 18))
 80056da:	89fb      	ldrh	r3, [r7, #14]
 80056dc:	f103 0211 	add.w	r2, r3, #17
 80056e0:	883b      	ldrh	r3, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	db0c      	blt.n	8005700 <draw_UV_rectangle_scale+0x7a>
		    {
			draw_rect_filled(buffer, a, 40, a + 14, 50, 1);
 80056e6:	89fb      	ldrh	r3, [r7, #14]
 80056e8:	330e      	adds	r3, #14
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	89f9      	ldrh	r1, [r7, #14]
 80056ee:	2201      	movs	r2, #1
 80056f0:	9201      	str	r2, [sp, #4]
 80056f2:	2232      	movs	r2, #50	; 0x32
 80056f4:	9200      	str	r2, [sp, #0]
 80056f6:	2228      	movs	r2, #40	; 0x28
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fd fbd6 	bl	8002eaa <draw_rect_filled>
 80056fe:	e00b      	b.n	8005718 <draw_UV_rectangle_scale+0x92>
		    }
		else
		    {
			draw_rect_filled(buffer, a, 40, a + 14, 50, 10);
 8005700:	89fb      	ldrh	r3, [r7, #14]
 8005702:	330e      	adds	r3, #14
 8005704:	b29b      	uxth	r3, r3
 8005706:	89f9      	ldrh	r1, [r7, #14]
 8005708:	220a      	movs	r2, #10
 800570a:	9201      	str	r2, [sp, #4]
 800570c:	2232      	movs	r2, #50	; 0x32
 800570e:	9200      	str	r2, [sp, #0]
 8005710:	2228      	movs	r2, #40	; 0x28
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fd fbc9 	bl	8002eaa <draw_rect_filled>
	for (uint16_t a = 20; a < 254; a = a + 18)
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	3312      	adds	r3, #18
 800571c:	81fb      	strh	r3, [r7, #14]
 800571e:	89fb      	ldrh	r3, [r7, #14]
 8005720:	2bfd      	cmp	r3, #253	; 0xfd
 8005722:	d9bb      	bls.n	800569c <draw_UV_rectangle_scale+0x16>
		    }
	    }
    }
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <draw_UV_lines_scale>:


void draw_UV_lines_scale(uint8_t *const buffer, const UV_meter_t left_channel, const UV_meter_t right_channel)
    {
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af02      	add	r7, sp, #8
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	807b      	strh	r3, [r7, #2]
 800573a:	4613      	mov	r3, r2
 800573c:	803b      	strh	r3, [r7, #0]
	for (uint16_t b = 20; b < 254; b = b + 3)
 800573e:	2314      	movs	r3, #20
 8005740:	81fb      	strh	r3, [r7, #14]
 8005742:	e02c      	b.n	800579e <draw_UV_lines_scale+0x70>
	    {
		if (left_channel < b)
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	89fb      	ldrh	r3, [r7, #14]
 8005748:	429a      	cmp	r2, r3
 800574a:	d208      	bcs.n	800575e <draw_UV_lines_scale+0x30>
		    {
			draw_vline(buffer, b, 10, 3, 1);
 800574c:	89f9      	ldrh	r1, [r7, #14]
 800574e:	2301      	movs	r3, #1
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2303      	movs	r3, #3
 8005754:	220a      	movs	r2, #10
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7fd fafa 	bl	8002d50 <draw_vline>
 800575c:	e007      	b.n	800576e <draw_UV_lines_scale+0x40>
		    }
		else
		    {
			draw_vline(buffer, b, 10, 3, 10);
 800575e:	89f9      	ldrh	r1, [r7, #14]
 8005760:	230a      	movs	r3, #10
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2303      	movs	r3, #3
 8005766:	220a      	movs	r2, #10
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fd faf1 	bl	8002d50 <draw_vline>
		    }
		if(right_channel < b)
 800576e:	883a      	ldrh	r2, [r7, #0]
 8005770:	89fb      	ldrh	r3, [r7, #14]
 8005772:	429a      	cmp	r2, r3
 8005774:	d208      	bcs.n	8005788 <draw_UV_lines_scale+0x5a>
		    {

			draw_vline(buffer, b, 63, 56, 1);
 8005776:	89f9      	ldrh	r1, [r7, #14]
 8005778:	2301      	movs	r3, #1
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	2338      	movs	r3, #56	; 0x38
 800577e:	223f      	movs	r2, #63	; 0x3f
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fd fae5 	bl	8002d50 <draw_vline>
 8005786:	e007      	b.n	8005798 <draw_UV_lines_scale+0x6a>
		    }
		else
		    {

			draw_vline(buffer, b, 63, 56, 10);
 8005788:	89f9      	ldrh	r1, [r7, #14]
 800578a:	230a      	movs	r3, #10
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2338      	movs	r3, #56	; 0x38
 8005790:	223f      	movs	r2, #63	; 0x3f
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fd fadc 	bl	8002d50 <draw_vline>
	for (uint16_t b = 20; b < 254; b = b + 3)
 8005798:	89fb      	ldrh	r3, [r7, #14]
 800579a:	3303      	adds	r3, #3
 800579c:	81fb      	strh	r3, [r7, #14]
 800579e:	89fb      	ldrh	r3, [r7, #14]
 80057a0:	2bfd      	cmp	r3, #253	; 0xfd
 80057a2:	d9cf      	bls.n	8005744 <draw_UV_lines_scale+0x16>
		    }
	    }
    }
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <draw_freq_scale>:


void draw_freq_scale(uint8_t *const buffer,uint16_t freq_scaled)
    {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	807b      	strh	r3, [r7, #2]
	for (uint8_t i = 40; i < 220; i++)
 80057bc:	2328      	movs	r3, #40	; 0x28
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e03f      	b.n	8005842 <draw_freq_scale+0x92>
	    {
		if (i % 5 == 0)
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	4b2c      	ldr	r3, [pc, #176]	; (8005878 <draw_freq_scale+0xc8>)
 80057c6:	fba3 1302 	umull	r1, r3, r3, r2
 80057ca:	0899      	lsrs	r1, r3, #2
 80057cc:	460b      	mov	r3, r1
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <draw_freq_scale+0x3c>
		    {
			draw_vline(buffer, i, 63, 60, 5);
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	b299      	uxth	r1, r3
 80057de:	2305      	movs	r3, #5
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	233c      	movs	r3, #60	; 0x3c
 80057e4:	223f      	movs	r2, #63	; 0x3f
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fd fab2 	bl	8002d50 <draw_vline>
		    }

		if (i % 15 == 0)
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	4b23      	ldr	r3, [pc, #140]	; (800587c <draw_freq_scale+0xcc>)
 80057f0:	fba3 1302 	umull	r1, r3, r3, r2
 80057f4:	08d9      	lsrs	r1, r3, #3
 80057f6:	460b      	mov	r3, r1
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a5b      	subs	r3, r3, r1
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d108      	bne.n	8005816 <draw_freq_scale+0x66>
		    {
			draw_vline(buffer, i, 57, 63, 5);
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	b299      	uxth	r1, r3
 8005808:	2305      	movs	r3, #5
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	233f      	movs	r3, #63	; 0x3f
 800580e:	2239      	movs	r2, #57	; 0x39
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fd fa9d 	bl	8002d50 <draw_vline>
		    }
		if (freq_scaled == i - 20)
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	3b14      	subs	r3, #20
 800581c:	429a      	cmp	r2, r3
 800581e:	d10d      	bne.n	800583c <draw_freq_scale+0x8c>
		    {
			//draw_vline(buffer, i, 53, 63, 5);
			draw_rect_filled(buffer, i, 52, i+1, 63, 10);
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	b299      	uxth	r1, r3
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	b29b      	uxth	r3, r3
 8005828:	3301      	adds	r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	220a      	movs	r2, #10
 800582e:	9201      	str	r2, [sp, #4]
 8005830:	223f      	movs	r2, #63	; 0x3f
 8005832:	9200      	str	r2, [sp, #0]
 8005834:	2234      	movs	r2, #52	; 0x34
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fd fb37 	bl	8002eaa <draw_rect_filled>
	for (uint8_t i = 40; i < 220; i++)
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	3301      	adds	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2bdb      	cmp	r3, #219	; 0xdb
 8005846:	d9bc      	bls.n	80057c2 <draw_freq_scale+0x12>
		    }
	    }

	select_font(&TomThumb);
 8005848:	480d      	ldr	r0, [pc, #52]	; (8005880 <draw_freq_scale+0xd0>)
 800584a:	f7fd fc3d 	bl	80030c8 <select_font>
	draw_text(buffer, "87,0", 33, 51, 5);
 800584e:	2305      	movs	r3, #5
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	2333      	movs	r3, #51	; 0x33
 8005854:	2221      	movs	r2, #33	; 0x21
 8005856:	490b      	ldr	r1, [pc, #44]	; (8005884 <draw_freq_scale+0xd4>)
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fd fcdd 	bl	8003218 <draw_text>
	draw_text(buffer, "108,0", 210, 51, 5);
 800585e:	2305      	movs	r3, #5
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	2333      	movs	r3, #51	; 0x33
 8005864:	22d2      	movs	r2, #210	; 0xd2
 8005866:	4908      	ldr	r1, [pc, #32]	; (8005888 <draw_freq_scale+0xd8>)
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fd fcd5 	bl	8003218 <draw_text>
    }
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	cccccccd 	.word	0xcccccccd
 800587c:	88888889 	.word	0x88888889
 8005880:	08023f98 	.word	0x08023f98
 8005884:	08017ff8 	.word	0x08017ff8
 8005888:	08018000 	.word	0x08018000

0800588c <draw_alarmsSource>:


void draw_alarmsSource(uint8_t *const buffer)
    {
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af02      	add	r7, sp, #8
 8005892:	6078      	str	r0, [r7, #4]

	select_font(&FreeMonoOblique9pt7b);
 8005894:	484d      	ldr	r0, [pc, #308]	; (80059cc <draw_alarmsSource+0x140>)
 8005896:	f7fd fc17 	bl	80030c8 <select_font>
	switch (SettingsUserMenu.AlarmSource_A)
 800589a:	4b4d      	ldr	r3, [pc, #308]	; (80059d0 <draw_alarmsSource+0x144>)
 800589c:	789b      	ldrb	r3, [r3, #2]
 800589e:	2b06      	cmp	r3, #6
 80058a0:	d842      	bhi.n	8005928 <draw_alarmsSource+0x9c>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <draw_alarmsSource+0x1c>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	08005901 	.word	0x08005901
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	08005929 	.word	0x08005929
 80058b8:	08005929 	.word	0x08005929
 80058bc:	080058ed 	.word	0x080058ed
 80058c0:	08005915 	.word	0x08005915
	    {
	    case JACK_1:
		draw_text(buffer, (char*) Jack_1, 110, 30, 5);
 80058c4:	4b43      	ldr	r3, [pc, #268]	; (80059d4 <draw_alarmsSource+0x148>)
 80058c6:	6819      	ldr	r1, [r3, #0]
 80058c8:	2305      	movs	r3, #5
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	231e      	movs	r3, #30
 80058ce:	226e      	movs	r2, #110	; 0x6e
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fd fca1 	bl	8003218 <draw_text>
		break;
 80058d6:	e028      	b.n	800592a <draw_alarmsSource+0x9e>
	    case JACK_2:
		draw_text(buffer, (char*) Jack_2, 110, 30, 5);
 80058d8:	4b3f      	ldr	r3, [pc, #252]	; (80059d8 <draw_alarmsSource+0x14c>)
 80058da:	6819      	ldr	r1, [r3, #0]
 80058dc:	2305      	movs	r3, #5
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	231e      	movs	r3, #30
 80058e2:	226e      	movs	r2, #110	; 0x6e
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7fd fc97 	bl	8003218 <draw_text>
		break;
 80058ea:	e01e      	b.n	800592a <draw_alarmsSource+0x9e>
	    case RADIO:
		draw_text(buffer, (char*) Radio, 110, 30, 5);
 80058ec:	4b3b      	ldr	r3, [pc, #236]	; (80059dc <draw_alarmsSource+0x150>)
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	2305      	movs	r3, #5
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	231e      	movs	r3, #30
 80058f6:	226e      	movs	r2, #110	; 0x6e
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fd fc8d 	bl	8003218 <draw_text>
		break;
 80058fe:	e014      	b.n	800592a <draw_alarmsSource+0x9e>
	    case BLUETOOTH:
		draw_text(buffer, (char*) Bluetooth, 110, 30, 5);
 8005900:	4b37      	ldr	r3, [pc, #220]	; (80059e0 <draw_alarmsSource+0x154>)
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	2305      	movs	r3, #5
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	231e      	movs	r3, #30
 800590a:	226e      	movs	r2, #110	; 0x6e
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fd fc83 	bl	8003218 <draw_text>
		break;
 8005912:	e00a      	b.n	800592a <draw_alarmsSource+0x9e>
	    case MICROPHONE:
		draw_text(buffer, (char*) Microphone, 110, 30, 5);
 8005914:	4b33      	ldr	r3, [pc, #204]	; (80059e4 <draw_alarmsSource+0x158>)
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	2305      	movs	r3, #5
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	231e      	movs	r3, #30
 800591e:	226e      	movs	r2, #110	; 0x6e
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fd fc79 	bl	8003218 <draw_text>
		break;
 8005926:	e000      	b.n	800592a <draw_alarmsSource+0x9e>
	    default:
		break;
 8005928:	bf00      	nop
	    }

	select_font(&FreeMonoOblique9pt7b);
 800592a:	4828      	ldr	r0, [pc, #160]	; (80059cc <draw_alarmsSource+0x140>)
 800592c:	f7fd fbcc 	bl	80030c8 <select_font>
	switch (SettingsUserMenu.AlarmSource_B)
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <draw_alarmsSource+0x144>)
 8005932:	78db      	ldrb	r3, [r3, #3]
 8005934:	2b06      	cmp	r3, #6
 8005936:	d843      	bhi.n	80059c0 <draw_alarmsSource+0x134>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <draw_alarmsSource+0xb4>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005999 	.word	0x08005999
 8005944:	0800595d 	.word	0x0800595d
 8005948:	08005971 	.word	0x08005971
 800594c:	080059c1 	.word	0x080059c1
 8005950:	080059c1 	.word	0x080059c1
 8005954:	08005985 	.word	0x08005985
 8005958:	080059ad 	.word	0x080059ad
	    {
	    case JACK_1:
		draw_text(buffer, (char*) Jack_1, 110, 45, 5);
 800595c:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <draw_alarmsSource+0x148>)
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	2305      	movs	r3, #5
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	232d      	movs	r3, #45	; 0x2d
 8005966:	226e      	movs	r2, #110	; 0x6e
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7fd fc55 	bl	8003218 <draw_text>
		break;
 800596e:	e028      	b.n	80059c2 <draw_alarmsSource+0x136>
	    case JACK_2:
		draw_text(buffer, (char*) Jack_2, 110, 45, 5);
 8005970:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <draw_alarmsSource+0x14c>)
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	2305      	movs	r3, #5
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	232d      	movs	r3, #45	; 0x2d
 800597a:	226e      	movs	r2, #110	; 0x6e
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fd fc4b 	bl	8003218 <draw_text>
		break;
 8005982:	e01e      	b.n	80059c2 <draw_alarmsSource+0x136>
	    case RADIO:
		draw_text(buffer, (char*) Radio, 110, 45, 5);
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <draw_alarmsSource+0x150>)
 8005986:	6819      	ldr	r1, [r3, #0]
 8005988:	2305      	movs	r3, #5
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	232d      	movs	r3, #45	; 0x2d
 800598e:	226e      	movs	r2, #110	; 0x6e
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fd fc41 	bl	8003218 <draw_text>
		break;
 8005996:	e014      	b.n	80059c2 <draw_alarmsSource+0x136>
	    case BLUETOOTH:
		draw_text(buffer, (char*) Bluetooth, 110, 45, 5);
 8005998:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <draw_alarmsSource+0x154>)
 800599a:	6819      	ldr	r1, [r3, #0]
 800599c:	2305      	movs	r3, #5
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	232d      	movs	r3, #45	; 0x2d
 80059a2:	226e      	movs	r2, #110	; 0x6e
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7fd fc37 	bl	8003218 <draw_text>
		break;
 80059aa:	e00a      	b.n	80059c2 <draw_alarmsSource+0x136>
	    case MICROPHONE:
		draw_text(buffer, (char*) Microphone, 110, 45, 5);
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <draw_alarmsSource+0x158>)
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	2305      	movs	r3, #5
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	232d      	movs	r3, #45	; 0x2d
 80059b6:	226e      	movs	r2, #110	; 0x6e
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7fd fc2d 	bl	8003218 <draw_text>
		break;
 80059be:	e000      	b.n	80059c2 <draw_alarmsSource+0x136>
	    default:
		break;
 80059c0:	bf00      	nop
	    }
    }
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	0801a780 	.word	0x0801a780
 80059d0:	20007c18 	.word	0x20007c18
 80059d4:	20000058 	.word	0x20000058
 80059d8:	2000005c 	.word	0x2000005c
 80059dc:	20000060 	.word	0x20000060
 80059e0:	20000064 	.word	0x20000064
 80059e4:	20000068 	.word	0x20000068

080059e8 <draw_pointer>:


void draw_pointer(uint8_t *const buffer)
    {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	6078      	str	r0, [r7, #4]

	select_font(&FreeSerif24pt7b);
 80059f0:	4828      	ldr	r0, [pc, #160]	; (8005a94 <draw_pointer+0xac>)
 80059f2:	f7fd fb69 	bl	80030c8 <select_font>
	switch (SettingsUserMenu.SETTINGS_USER_MENU)
 80059f6:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <draw_pointer+0xb0>)
 80059f8:	7c1b      	ldrb	r3, [r3, #16]
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d844      	bhi.n	8005a88 <draw_pointer+0xa0>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <draw_pointer+0x1c>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a2f 	.word	0x08005a2f
 8005a08:	08005a41 	.word	0x08005a41
 8005a0c:	08005a1d 	.word	0x08005a1d
 8005a10:	08005a53 	.word	0x08005a53
 8005a14:	08005a65 	.word	0x08005a65
 8005a18:	08005a77 	.word	0x08005a77
	    {
	    case REFRESH_SCREEN_TIME:
		draw_text(buffer, ".", 2, 11, 5);
 8005a1c:	2305      	movs	r3, #5
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	230b      	movs	r3, #11
 8005a22:	2202      	movs	r2, #2
 8005a24:	491d      	ldr	r1, [pc, #116]	; (8005a9c <draw_pointer+0xb4>)
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd fbf6 	bl	8003218 <draw_text>
		break;
 8005a2c:	e02d      	b.n	8005a8a <draw_pointer+0xa2>
	    case ALARM_SOURCE_A:
		draw_text(buffer, ".", 2, 26, 5);
 8005a2e:	2305      	movs	r3, #5
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	231a      	movs	r3, #26
 8005a34:	2202      	movs	r2, #2
 8005a36:	4919      	ldr	r1, [pc, #100]	; (8005a9c <draw_pointer+0xb4>)
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fd fbed 	bl	8003218 <draw_text>
		break;
 8005a3e:	e024      	b.n	8005a8a <draw_pointer+0xa2>
	    case ALARM_SOURCE_B:
		draw_text(buffer, ".", 2, 41, 5);
 8005a40:	2305      	movs	r3, #5
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2329      	movs	r3, #41	; 0x29
 8005a46:	2202      	movs	r2, #2
 8005a48:	4914      	ldr	r1, [pc, #80]	; (8005a9c <draw_pointer+0xb4>)
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fd fbe4 	bl	8003218 <draw_text>
		break;
 8005a50:	e01b      	b.n	8005a8a <draw_pointer+0xa2>
	    case USER_NAME:
		draw_text(buffer, ".", 2, 56, 5);
 8005a52:	2305      	movs	r3, #5
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2338      	movs	r3, #56	; 0x38
 8005a58:	2202      	movs	r2, #2
 8005a5a:	4910      	ldr	r1, [pc, #64]	; (8005a9c <draw_pointer+0xb4>)
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fd fbdb 	bl	8003218 <draw_text>
		break;
 8005a62:	e012      	b.n	8005a8a <draw_pointer+0xa2>
	    case DISPLAY_MODE_ON_OFF:
		draw_text(buffer, ".", 2, 11, 5);
 8005a64:	2305      	movs	r3, #5
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	230b      	movs	r3, #11
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	490b      	ldr	r1, [pc, #44]	; (8005a9c <draw_pointer+0xb4>)
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fd fbd2 	bl	8003218 <draw_text>
		break;
 8005a74:	e009      	b.n	8005a8a <draw_pointer+0xa2>
	    case POWER_LED:
		draw_text(buffer, ".", 2, 26, 5);
 8005a76:	2305      	movs	r3, #5
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	231a      	movs	r3, #26
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	4907      	ldr	r1, [pc, #28]	; (8005a9c <draw_pointer+0xb4>)
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fd fbc9 	bl	8003218 <draw_text>
		break;
 8005a86:	e000      	b.n	8005a8a <draw_pointer+0xa2>
	    default:
		break;
 8005a88:	bf00      	nop
	    }
    }
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	0801d54c 	.word	0x0801d54c
 8005a98:	20007c18 	.word	0x20007c18
 8005a9c:	08018008 	.word	0x08018008

08005aa0 <draw_refreshTime>:


void draw_refreshTime(uint8_t *const buffer)
    {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	6078      	str	r0, [r7, #4]
	switch (SettingsUserMenu.RefreshScreenTime)
 8005aa8:	4b32      	ldr	r3, [pc, #200]	; (8005b74 <draw_refreshTime+0xd4>)
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d050      	beq.n	8005b56 <draw_refreshTime+0xb6>
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	da56      	bge.n	8005b68 <draw_refreshTime+0xc8>
 8005aba:	f24d 62d9 	movw	r2, #55001	; 0xd6d9
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01c      	beq.n	8005afc <draw_refreshTime+0x5c>
 8005ac2:	f24d 62d9 	movw	r2, #55001	; 0xd6d9
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	dc4e      	bgt.n	8005b68 <draw_refreshTime+0xc8>
 8005aca:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01d      	beq.n	8005b0e <draw_refreshTime+0x6e>
 8005ad2:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	dc46      	bgt.n	8005b68 <draw_refreshTime+0xc8>
 8005ada:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01e      	beq.n	8005b20 <draw_refreshTime+0x80>
 8005ae2:	f646 326c 	movw	r2, #27500	; 0x6b6c
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	dc3e      	bgt.n	8005b68 <draw_refreshTime+0xc8>
 8005aea:	f241 12e4 	movw	r2, #4580	; 0x11e4
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d028      	beq.n	8005b44 <draw_refreshTime+0xa4>
 8005af2:	f243 52b6 	movw	r2, #13750	; 0x35b6
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01b      	beq.n	8005b32 <draw_refreshTime+0x92>
		break;
	    case 65535:
		draw_text(buffer, "OFF", 160, 15, 5);
		break;
	    default:
		break;
 8005afa:	e035      	b.n	8005b68 <draw_refreshTime+0xc8>
		draw_text(buffer, "240 s", 160, 15, 5);
 8005afc:	2305      	movs	r3, #5
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	230f      	movs	r3, #15
 8005b02:	22a0      	movs	r2, #160	; 0xa0
 8005b04:	491c      	ldr	r1, [pc, #112]	; (8005b78 <draw_refreshTime+0xd8>)
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fd fb86 	bl	8003218 <draw_text>
		break;
 8005b0c:	e02d      	b.n	8005b6a <draw_refreshTime+0xca>
		draw_text(buffer, "120 s", 160, 15, 5);
 8005b0e:	2305      	movs	r3, #5
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	230f      	movs	r3, #15
 8005b14:	22a0      	movs	r2, #160	; 0xa0
 8005b16:	4919      	ldr	r1, [pc, #100]	; (8005b7c <draw_refreshTime+0xdc>)
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fd fb7d 	bl	8003218 <draw_text>
		break;
 8005b1e:	e024      	b.n	8005b6a <draw_refreshTime+0xca>
		draw_text(buffer, "60 s", 160, 15, 5);
 8005b20:	2305      	movs	r3, #5
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	230f      	movs	r3, #15
 8005b26:	22a0      	movs	r2, #160	; 0xa0
 8005b28:	4915      	ldr	r1, [pc, #84]	; (8005b80 <draw_refreshTime+0xe0>)
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fd fb74 	bl	8003218 <draw_text>
		break;
 8005b30:	e01b      	b.n	8005b6a <draw_refreshTime+0xca>
		draw_text(buffer, "30 s", 160, 15, 5);
 8005b32:	2305      	movs	r3, #5
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	230f      	movs	r3, #15
 8005b38:	22a0      	movs	r2, #160	; 0xa0
 8005b3a:	4912      	ldr	r1, [pc, #72]	; (8005b84 <draw_refreshTime+0xe4>)
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fd fb6b 	bl	8003218 <draw_text>
		break;
 8005b42:	e012      	b.n	8005b6a <draw_refreshTime+0xca>
		draw_text(buffer, "10 s", 160, 15, 5);
 8005b44:	2305      	movs	r3, #5
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	230f      	movs	r3, #15
 8005b4a:	22a0      	movs	r2, #160	; 0xa0
 8005b4c:	490e      	ldr	r1, [pc, #56]	; (8005b88 <draw_refreshTime+0xe8>)
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fd fb62 	bl	8003218 <draw_text>
		break;
 8005b54:	e009      	b.n	8005b6a <draw_refreshTime+0xca>
		draw_text(buffer, "OFF", 160, 15, 5);
 8005b56:	2305      	movs	r3, #5
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	230f      	movs	r3, #15
 8005b5c:	22a0      	movs	r2, #160	; 0xa0
 8005b5e:	490b      	ldr	r1, [pc, #44]	; (8005b8c <draw_refreshTime+0xec>)
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fd fb59 	bl	8003218 <draw_text>
		break;
 8005b66:	e000      	b.n	8005b6a <draw_refreshTime+0xca>
		break;
 8005b68:	bf00      	nop
	    }
    }
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20007c18 	.word	0x20007c18
 8005b78:	0801800c 	.word	0x0801800c
 8005b7c:	08018014 	.word	0x08018014
 8005b80:	0801801c 	.word	0x0801801c
 8005b84:	08018024 	.word	0x08018024
 8005b88:	0801802c 	.word	0x0801802c
 8005b8c:	08017e3c 	.word	0x08017e3c

08005b90 <draw_powerLED>:


void draw_powerLED(uint8_t *const buffer)
    {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	6078      	str	r0, [r7, #4]

	select_font(&FreeMonoOblique9pt7b);
 8005b98:	4826      	ldr	r0, [pc, #152]	; (8005c34 <draw_powerLED+0xa4>)
 8005b9a:	f7fd fa95 	bl	80030c8 <select_font>
	switch (SettingsUserMenu.Power_LED)
 8005b9e:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <draw_powerLED+0xa8>)
 8005ba0:	795b      	ldrb	r3, [r3, #5]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d83f      	bhi.n	8005c28 <draw_powerLED+0x98>
 8005ba8:	a201      	add	r2, pc, #4	; (adr r2, 8005bb0 <draw_powerLED+0x20>)
 8005baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bae:	bf00      	nop
 8005bb0:	08005bc5 	.word	0x08005bc5
 8005bb4:	08005bd9 	.word	0x08005bd9
 8005bb8:	08005bed 	.word	0x08005bed
 8005bbc:	08005c01 	.word	0x08005c01
 8005bc0:	08005c15 	.word	0x08005c15
	    {
	    case POWER_OFF:
		draw_text(buffer, (char*) Power_OFF_str, 125, 30, 5);
 8005bc4:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <draw_powerLED+0xac>)
 8005bc6:	6819      	ldr	r1, [r3, #0]
 8005bc8:	2305      	movs	r3, #5
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	231e      	movs	r3, #30
 8005bce:	227d      	movs	r2, #125	; 0x7d
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fd fb21 	bl	8003218 <draw_text>
		break;
 8005bd6:	e028      	b.n	8005c2a <draw_powerLED+0x9a>
	    case POWER_ON:
		draw_text(buffer, (char*) Power_ON_str, 125, 30, 5);
 8005bd8:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <draw_powerLED+0xb0>)
 8005bda:	6819      	ldr	r1, [r3, #0]
 8005bdc:	2305      	movs	r3, #5
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	231e      	movs	r3, #30
 8005be2:	227d      	movs	r2, #125	; 0x7d
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7fd fb17 	bl	8003218 <draw_text>
		break;
 8005bea:	e01e      	b.n	8005c2a <draw_powerLED+0x9a>
	    case Always_OFF:
		draw_text(buffer, (char*) Always_OFF_str, 125, 30, 5);
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <draw_powerLED+0xb4>)
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	2305      	movs	r3, #5
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	231e      	movs	r3, #30
 8005bf6:	227d      	movs	r2, #125	; 0x7d
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fd fb0d 	bl	8003218 <draw_text>
		break;
 8005bfe:	e014      	b.n	8005c2a <draw_powerLED+0x9a>
	    case Always_ON:
		draw_text(buffer, (char*) Always_ON_str, 125, 30, 5);
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <draw_powerLED+0xb8>)
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	2305      	movs	r3, #5
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	231e      	movs	r3, #30
 8005c0a:	227d      	movs	r2, #125	; 0x7d
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fd fb03 	bl	8003218 <draw_text>
		break;
 8005c12:	e00a      	b.n	8005c2a <draw_powerLED+0x9a>
	    case Change_brigh:
		draw_text(buffer, (char*) Change_brigh_str, 125, 30, 5);
 8005c14:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <draw_powerLED+0xbc>)
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	2305      	movs	r3, #5
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	231e      	movs	r3, #30
 8005c1e:	227d      	movs	r2, #125	; 0x7d
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fd faf9 	bl	8003218 <draw_text>
		break;
 8005c26:	e000      	b.n	8005c2a <draw_powerLED+0x9a>
	    default:
		break;
 8005c28:	bf00      	nop
	    }
    }
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	0801a780 	.word	0x0801a780
 8005c38:	20007c18 	.word	0x20007c18
 8005c3c:	2000006c 	.word	0x2000006c
 8005c40:	20000070 	.word	0x20000070
 8005c44:	20000074 	.word	0x20000074
 8005c48:	20000078 	.word	0x20000078
 8005c4c:	2000007c 	.word	0x2000007c

08005c50 <draw_displayMode>:


void draw_displayMode(uint8_t *const buffer)
    {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	6078      	str	r0, [r7, #4]
	select_font(&FreeMonoOblique9pt7b);
 8005c58:	4820      	ldr	r0, [pc, #128]	; (8005cdc <draw_displayMode+0x8c>)
 8005c5a:	f7fd fa35 	bl	80030c8 <select_font>
	switch (SettingsUserMenu.Display_mode)
 8005c5e:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <draw_displayMode+0x90>)
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d833      	bhi.n	8005cd0 <draw_displayMode+0x80>
 8005c68:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <draw_displayMode+0x20>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c95 	.word	0x08005c95
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005cbd 	.word	0x08005cbd
	    {
	    case Disp_normal:
		draw_text(buffer, (char*) Disp_normal_str, 160, 15, 5);
 8005c80:	4b18      	ldr	r3, [pc, #96]	; (8005ce4 <draw_displayMode+0x94>)
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	2305      	movs	r3, #5
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	230f      	movs	r3, #15
 8005c8a:	22a0      	movs	r2, #160	; 0xa0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fd fac3 	bl	8003218 <draw_text>
		break;
 8005c92:	e01e      	b.n	8005cd2 <draw_displayMode+0x82>
	    case Disp_changing:
		draw_text(buffer, (char*) Disp_changing_str, 160, 15, 5);
 8005c94:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <draw_displayMode+0x98>)
 8005c96:	6819      	ldr	r1, [r3, #0]
 8005c98:	2305      	movs	r3, #5
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	230f      	movs	r3, #15
 8005c9e:	22a0      	movs	r2, #160	; 0xa0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fd fab9 	bl	8003218 <draw_text>
		break;
 8005ca6:	e014      	b.n	8005cd2 <draw_displayMode+0x82>
	    case Disp_standby:
		draw_text(buffer, (char*) Disp_standby_str, 160, 15, 5);
 8005ca8:	4b10      	ldr	r3, [pc, #64]	; (8005cec <draw_displayMode+0x9c>)
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	2305      	movs	r3, #5
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	230f      	movs	r3, #15
 8005cb2:	22a0      	movs	r2, #160	; 0xa0
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7fd faaf 	bl	8003218 <draw_text>
		break;
 8005cba:	e00a      	b.n	8005cd2 <draw_displayMode+0x82>
	    case Disp_time:
		draw_text(buffer, (char*) Disp_time_str, 160, 15, 5);
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <draw_displayMode+0xa0>)
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	2305      	movs	r3, #5
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	230f      	movs	r3, #15
 8005cc6:	22a0      	movs	r2, #160	; 0xa0
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7fd faa5 	bl	8003218 <draw_text>
		break;
 8005cce:	e000      	b.n	8005cd2 <draw_displayMode+0x82>
	    default:
		break;
 8005cd0:	bf00      	nop
	    }
    }
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	0801a780 	.word	0x0801a780
 8005ce0:	20007c18 	.word	0x20007c18
 8005ce4:	20000080 	.word	0x20000080
 8005ce8:	20000084 	.word	0x20000084
 8005cec:	20000088 	.word	0x20000088
 8005cf0:	2000008c 	.word	0x2000008c

08005cf4 <set_saved_display>:
// Operation on display state fuctions
//--------------------------------------------------------------


void set_saved_display(TIM_HandleTypeDef *htim)
    {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	encoderVolFront.audioOutputState = MASTER;
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <set_saved_display+0x3c>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	719a      	strb	r2, [r3, #6]
	encoderVolBack.audioOutputState = NORMAL;
 8005d02:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <set_saved_display+0x40>)
 8005d04:	2203      	movs	r2, #3
 8005d06:	719a      	strb	r2, [r3, #6]
	SSD1322_Screen_State = SSD1322_Screen_State_Saved;
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <set_saved_display+0x44>)
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <set_saved_display+0x48>)
 8005d0e:	701a      	strb	r2, [r3, #0]
	SSD1322_Screen_State_Saved = 0;
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <set_saved_display+0x44>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Stop_IT(&htim15, TIM_CHANNEL_2);
 8005d16:	2104      	movs	r1, #4
 8005d18:	4809      	ldr	r0, [pc, #36]	; (8005d40 <set_saved_display+0x4c>)
 8005d1a:	f00e f88d 	bl	8013e38 <HAL_TIM_OC_Stop_IT>
	htim->Instance->CNT = 0;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
    }
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000554 	.word	0x20000554
 8005d34:	20000518 	.word	0x20000518
 8005d38:	20000506 	.word	0x20000506
 8005d3c:	200004f8 	.word	0x200004f8
 8005d40:	200079b8 	.word	0x200079b8

08005d44 <save_current_display_state>:


void save_current_display_state(SSD1322_Screen_t  Screen_State)
    {
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
	if (SSD1322_Screen_State != Screen_State)
 8005d4e:	4b23      	ldr	r3, [pc, #140]	; (8005ddc <save_current_display_state+0x98>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	79fa      	ldrb	r2, [r7, #7]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d03a      	beq.n	8005dce <save_current_display_state+0x8a>
	    {
		if (SSD1322_Screen_State != (11)
 8005d58:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <save_current_display_state+0x98>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b0b      	cmp	r3, #11
 8005d5e:	d033      	beq.n	8005dc8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 20 && SSD1322_Screen_State != 21
 8005d60:	4b1e      	ldr	r3, [pc, #120]	; (8005ddc <save_current_display_state+0x98>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b14      	cmp	r3, #20
 8005d66:	d02f      	beq.n	8005dc8 <save_current_display_state+0x84>
 8005d68:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <save_current_display_state+0x98>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b15      	cmp	r3, #21
 8005d6e:	d02b      	beq.n	8005dc8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 22 && SSD1322_Screen_State != 23
 8005d70:	4b1a      	ldr	r3, [pc, #104]	; (8005ddc <save_current_display_state+0x98>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b16      	cmp	r3, #22
 8005d76:	d027      	beq.n	8005dc8 <save_current_display_state+0x84>
 8005d78:	4b18      	ldr	r3, [pc, #96]	; (8005ddc <save_current_display_state+0x98>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b17      	cmp	r3, #23
 8005d7e:	d023      	beq.n	8005dc8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 24 && SSD1322_Screen_State != 30
 8005d80:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <save_current_display_state+0x98>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b18      	cmp	r3, #24
 8005d86:	d01f      	beq.n	8005dc8 <save_current_display_state+0x84>
 8005d88:	4b14      	ldr	r3, [pc, #80]	; (8005ddc <save_current_display_state+0x98>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b1e      	cmp	r3, #30
 8005d8e:	d01b      	beq.n	8005dc8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 31 && SSD1322_Screen_State != 32
 8005d90:	4b12      	ldr	r3, [pc, #72]	; (8005ddc <save_current_display_state+0x98>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b1f      	cmp	r3, #31
 8005d96:	d017      	beq.n	8005dc8 <save_current_display_state+0x84>
 8005d98:	4b10      	ldr	r3, [pc, #64]	; (8005ddc <save_current_display_state+0x98>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d013      	beq.n	8005dc8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 33 && SSD1322_Screen_State != 34
 8005da0:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <save_current_display_state+0x98>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b21      	cmp	r3, #33	; 0x21
 8005da6:	d00f      	beq.n	8005dc8 <save_current_display_state+0x84>
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <save_current_display_state+0x98>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b22      	cmp	r3, #34	; 0x22
 8005dae:	d00b      	beq.n	8005dc8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 35 && SSD1322_Screen_State != 36)
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <save_current_display_state+0x98>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b23      	cmp	r3, #35	; 0x23
 8005db6:	d007      	beq.n	8005dc8 <save_current_display_state+0x84>
 8005db8:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <save_current_display_state+0x98>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b24      	cmp	r3, #36	; 0x24
 8005dbe:	d003      	beq.n	8005dc8 <save_current_display_state+0x84>
		    {
			SSD1322_Screen_State_Saved = SSD1322_Screen_State;
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <save_current_display_state+0x98>)
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <save_current_display_state+0x9c>)
 8005dc6:	701a      	strb	r2, [r3, #0]
		    }
		SSD1322_Screen_State = Screen_State;
 8005dc8:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <save_current_display_state+0x98>)
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	7013      	strb	r3, [r2, #0]
	    }
    }
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	200004f8 	.word	0x200004f8
 8005de0:	20000506 	.word	0x20000506

08005de4 <change_display_state>:


void change_display_state(TIM_HandleTypeDef *htim)
    {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
	if (SettingsUserMenu.RefreshScreenTime != 65535) // change display if timer is set
 8005dec:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <change_display_state+0x8c>)
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d037      	beq.n	8005e68 <change_display_state+0x84>
	    {
		if ((SSD1322_Screen_State >= SSD1322_SCREEN_TIME)
 8005df8:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <change_display_state+0x90>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d033      	beq.n	8005e68 <change_display_state+0x84>
			&& (SSD1322_Screen_State <= SSD1322_SCREEN_TIME_BOUNCING))
 8005e00:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <change_display_state+0x90>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b05      	cmp	r3, #5
 8005e06:	d82f      	bhi.n	8005e68 <change_display_state+0x84>
		    {
			SSD1322_Screen_State++;
 8005e08:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <change_display_state+0x90>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <change_display_state+0x90>)
 8005e12:	701a      	strb	r2, [r3, #0]
			if (SSD1322_SCREEN_SETINPUT == SSD1322_Screen_State)
 8005e14:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <change_display_state+0x90>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b06      	cmp	r3, #6
 8005e1a:	d102      	bne.n	8005e22 <change_display_state+0x3e>
			    SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 8005e1c:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <change_display_state+0x90>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
			htim->Instance->CNT = 0;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	625a      	str	r2, [r3, #36]	; 0x24

			/* Check if ADC is needed */
			if ((SSD1322_Screen_State == SSD1322_SCREEN_UVMETER)
 8005e2a:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <change_display_state+0x90>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d003      	beq.n	8005e3a <change_display_state+0x56>
				|| (SSD1322_Screen_State == SSD1322_SCREEN_FFT))
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <change_display_state+0x90>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d10d      	bne.n	8005e56 <change_display_state+0x72>
			    {
				HAL_TIM_Base_Start(&htim6);
 8005e3a:	480f      	ldr	r0, [pc, #60]	; (8005e78 <change_display_state+0x94>)
 8005e3c:	f00d fdc2 	bl	80139c4 <HAL_TIM_Base_Start>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_SamplesTEST, UV_meter_numb_of_chan);
 8005e40:	4b0e      	ldr	r3, [pc, #56]	; (8005e7c <change_display_state+0x98>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	490e      	ldr	r1, [pc, #56]	; (8005e80 <change_display_state+0x9c>)
 8005e48:	480e      	ldr	r0, [pc, #56]	; (8005e84 <change_display_state+0xa0>)
 8005e4a:	f007 fae3 	bl	800d414 <HAL_ADC_Start_DMA>
				ADC_IS_ON_flag = true;
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <change_display_state+0xa4>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Stop_DMA(&hadc1);
				ADC_IS_ON_flag = false;
			    }
		    }
	    }
    }
 8005e54:	e008      	b.n	8005e68 <change_display_state+0x84>
				HAL_TIM_Base_Stop(&htim6);
 8005e56:	4808      	ldr	r0, [pc, #32]	; (8005e78 <change_display_state+0x94>)
 8005e58:	f00d fe1c 	bl	8013a94 <HAL_TIM_Base_Stop>
				HAL_ADC_Stop_DMA(&hadc1);
 8005e5c:	4809      	ldr	r0, [pc, #36]	; (8005e84 <change_display_state+0xa0>)
 8005e5e:	f007 fb8d 	bl	800d57c <HAL_ADC_Stop_DMA>
				ADC_IS_ON_flag = false;
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <change_display_state+0xa4>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
    }
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20007c18 	.word	0x20007c18
 8005e74:	200004f8 	.word	0x200004f8
 8005e78:	20007ae8 	.word	0x20007ae8
 8005e7c:	200000b0 	.word	0x200000b0
 8005e80:	200057c0 	.word	0x200057c0
 8005e84:	200005e0 	.word	0x200005e0
 8005e88:	200001f8 	.word	0x200001f8

08005e8c <refresh_timer_state>:


void refresh_timer_state(void)
    {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
	if (TIM_CHANNEL_STATE_GET(&htim15, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_READY)
 8005e90:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <refresh_timer_state+0x30>)
 8005e92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d103      	bne.n	8005ea4 <refresh_timer_state+0x18>
	    {
		HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_2);
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	4807      	ldr	r0, [pc, #28]	; (8005ebc <refresh_timer_state+0x30>)
 8005ea0:	f00d fe76 	bl	8013b90 <HAL_TIM_OC_Start_IT>
	    }
	if (TIM_CHANNEL_STATE_GET(&htim15, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <refresh_timer_state+0x30>)
 8005ea6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d103      	bne.n	8005eb8 <refresh_timer_state+0x2c>
	    {
		htim15.Instance->CNT = 0;
 8005eb0:	4b02      	ldr	r3, [pc, #8]	; (8005ebc <refresh_timer_state+0x30>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24
	    }
    }
 8005eb8:	bf00      	nop
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	200079b8 	.word	0x200079b8

08005ec0 <ChangeDateToArrayChar>:


void ChangeDateToArrayChar(uint16_t frq)
    {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	80fb      	strh	r3, [r7, #6]
	if (frq >= RADIO_100MHZ_FREQ && frq <= RADIO_MAX_FREQ)
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ed0:	d33a      	bcc.n	8005f48 <ChangeDateToArrayChar+0x88>
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 8005ed8:	d236      	bcs.n	8005f48 <ChangeDateToArrayChar+0x88>
	    {
		ConvertArrayCharLong[4] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, frq);
 8005eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f000 f94f 	bl	8006184 <SplitNumberToDignits>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	3330      	adds	r3, #48	; 0x30
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	4b39      	ldr	r3, [pc, #228]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005ef0:	711a      	strb	r2, [r3, #4]
		ConvertArrayCharLong[3] = PRZECINEK;
 8005ef2:	4b38      	ldr	r3, [pc, #224]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005ef4:	222c      	movs	r2, #44	; 0x2c
 8005ef6:	70da      	strb	r2, [r3, #3]
		ConvertArrayCharLong[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, frq);
 8005ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005efc:	4619      	mov	r1, r3
 8005efe:	2001      	movs	r0, #1
 8005f00:	f000 f940 	bl	8006184 <SplitNumberToDignits>
 8005f04:	4603      	mov	r3, r0
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	3330      	adds	r3, #48	; 0x30
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	4b31      	ldr	r3, [pc, #196]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005f0e:	709a      	strb	r2, [r3, #2]
		ConvertArrayCharLong[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(2, frq);
 8005f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f14:	4619      	mov	r1, r3
 8005f16:	2002      	movs	r0, #2
 8005f18:	f000 f934 	bl	8006184 <SplitNumberToDignits>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	3330      	adds	r3, #48	; 0x30
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005f26:	705a      	strb	r2, [r3, #1]
		ConvertArrayCharLong[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(3, frq);
 8005f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	2003      	movs	r0, #3
 8005f30:	f000 f928 	bl	8006184 <SplitNumberToDignits>
 8005f34:	4603      	mov	r3, r0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	3330      	adds	r3, #48	; 0x30
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005f3e:	701a      	strb	r2, [r3, #0]
		ConvertArrayCharLong[5] = ASCII_NULL;
 8005f40:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	715a      	strb	r2, [r3, #5]
 8005f46:	e040      	b.n	8005fca <ChangeDateToArrayChar+0x10a>
	    }
	else if (frq < RADIO_100MHZ_FREQ && frq >= RADIO_MIN_FREQ)
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f4e:	d22e      	bcs.n	8005fae <ChangeDateToArrayChar+0xee>
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	f5b3 7f5d 	cmp.w	r3, #884	; 0x374
 8005f56:	d92a      	bls.n	8005fae <ChangeDateToArrayChar+0xee>
	    {
		ConvertArrayCharLong[3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, frq);
 8005f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f000 f910 	bl	8006184 <SplitNumberToDignits>
 8005f64:	4603      	mov	r3, r0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	3330      	adds	r3, #48	; 0x30
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	4b19      	ldr	r3, [pc, #100]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005f6e:	70da      	strb	r2, [r3, #3]
		ConvertArrayCharLong[2] = PRZECINEK;
 8005f70:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005f72:	222c      	movs	r2, #44	; 0x2c
 8005f74:	709a      	strb	r2, [r3, #2]
		ConvertArrayCharLong[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, frq);
 8005f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	f000 f901 	bl	8006184 <SplitNumberToDignits>
 8005f82:	4603      	mov	r3, r0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	3330      	adds	r3, #48	; 0x30
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005f8c:	705a      	strb	r2, [r3, #1]
		ConvertArrayCharLong[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(2, frq);
 8005f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f92:	4619      	mov	r1, r3
 8005f94:	2002      	movs	r0, #2
 8005f96:	f000 f8f5 	bl	8006184 <SplitNumberToDignits>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	3330      	adds	r3, #48	; 0x30
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005fa4:	701a      	strb	r2, [r3, #0]
		ConvertArrayCharLong[4] = ASCII_NULL;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	711a      	strb	r2, [r3, #4]
 8005fac:	e00d      	b.n	8005fca <ChangeDateToArrayChar+0x10a>
	    }
	else //Invalid frq value
	    {
		for (uint8_t i = 0; i < 5; ++i)
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
 8005fb2:	e006      	b.n	8005fc2 <ChangeDateToArrayChar+0x102>
		    {
			ConvertArrayCharLong[i] = 0;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <ChangeDateToArrayChar+0x114>)
 8005fb8:	2100      	movs	r1, #0
 8005fba:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 5; ++i)
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d9f5      	bls.n	8005fb4 <ChangeDateToArrayChar+0xf4>
		    }
	    }
    }
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000190 	.word	0x20000190

08005fd8 <ChangeDateToArrayCharTime>:


void ChangeDateToArrayCharTime(char *arrayChar, uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t mode)

    {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	70fb      	strb	r3, [r7, #3]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70bb      	strb	r3, [r7, #2]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	707b      	strb	r3, [r7, #1]
	if (hours < 9)
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d857      	bhi.n	80060a8 <ChangeDateToArrayCharTime+0xd0>
	    {
		arrayChar[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, hours);
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	b21b      	sxth	r3, r3
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	2000      	movs	r0, #0
 8006000:	f000 f8c0 	bl	8006184 <SplitNumberToDignits>
 8006004:	4603      	mov	r3, r0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	3330      	adds	r3, #48	; 0x30
 800600a:	b2da      	uxtb	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	701a      	strb	r2, [r3, #0]
		arrayChar[1] = ASCII_DWUKROPEK;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3301      	adds	r3, #1
 8006014:	223a      	movs	r2, #58	; 0x3a
 8006016:	701a      	strb	r2, [r3, #0]
		arrayChar[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, minutes);
 8006018:	78bb      	ldrb	r3, [r7, #2]
 800601a:	b21b      	sxth	r3, r3
 800601c:	4619      	mov	r1, r3
 800601e:	2001      	movs	r0, #1
 8006020:	f000 f8b0 	bl	8006184 <SplitNumberToDignits>
 8006024:	4603      	mov	r3, r0
 8006026:	b2da      	uxtb	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3302      	adds	r3, #2
 800602c:	3230      	adds	r2, #48	; 0x30
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]
		arrayChar[3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, minutes);
 8006032:	78bb      	ldrb	r3, [r7, #2]
 8006034:	b21b      	sxth	r3, r3
 8006036:	4619      	mov	r1, r3
 8006038:	2000      	movs	r0, #0
 800603a:	f000 f8a3 	bl	8006184 <SplitNumberToDignits>
 800603e:	4603      	mov	r3, r0
 8006040:	b2da      	uxtb	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3303      	adds	r3, #3
 8006046:	3230      	adds	r2, #48	; 0x30
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
		if (0 == mode)
 800604c:	7c3b      	ldrb	r3, [r7, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d122      	bne.n	8006098 <ChangeDateToArrayCharTime+0xc0>
		    {
			arrayChar[4] = ASCII_DWUKROPEK;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	223a      	movs	r2, #58	; 0x3a
 8006058:	701a      	strb	r2, [r3, #0]
			arrayChar[5] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, seconds);
 800605a:	787b      	ldrb	r3, [r7, #1]
 800605c:	b21b      	sxth	r3, r3
 800605e:	4619      	mov	r1, r3
 8006060:	2001      	movs	r0, #1
 8006062:	f000 f88f 	bl	8006184 <SplitNumberToDignits>
 8006066:	4603      	mov	r3, r0
 8006068:	b2da      	uxtb	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3305      	adds	r3, #5
 800606e:	3230      	adds	r2, #48	; 0x30
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
			arrayChar[6] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, seconds);
 8006074:	787b      	ldrb	r3, [r7, #1]
 8006076:	b21b      	sxth	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	2000      	movs	r0, #0
 800607c:	f000 f882 	bl	8006184 <SplitNumberToDignits>
 8006080:	4603      	mov	r3, r0
 8006082:	b2da      	uxtb	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3306      	adds	r3, #6
 8006088:	3230      	adds	r2, #48	; 0x30
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
			arrayChar[7] = ASCII_NULL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3307      	adds	r3, #7
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
		    {
			arrayChar[5] = ASCII_NULL;
		    }
	    }

    }
 8006096:	e071      	b.n	800617c <ChangeDateToArrayCharTime+0x1a4>
		else if (1 == mode)
 8006098:	7c3b      	ldrb	r3, [r7, #16]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d16e      	bne.n	800617c <ChangeDateToArrayCharTime+0x1a4>
			arrayChar[4] = ASCII_NULL;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	2200      	movs	r2, #0
 80060a4:	701a      	strb	r2, [r3, #0]
    }
 80060a6:	e069      	b.n	800617c <ChangeDateToArrayCharTime+0x1a4>
	else if (hours <= 24 && hours >= 10)
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	2b18      	cmp	r3, #24
 80060ac:	d866      	bhi.n	800617c <ChangeDateToArrayCharTime+0x1a4>
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	2b09      	cmp	r3, #9
 80060b2:	d963      	bls.n	800617c <ChangeDateToArrayCharTime+0x1a4>
		arrayChar[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, hours);
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	b21b      	sxth	r3, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	2001      	movs	r0, #1
 80060bc:	f000 f862 	bl	8006184 <SplitNumberToDignits>
 80060c0:	4603      	mov	r3, r0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	3330      	adds	r3, #48	; 0x30
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	701a      	strb	r2, [r3, #0]
		arrayChar[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, hours);
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	b21b      	sxth	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	2000      	movs	r0, #0
 80060d4:	f000 f856 	bl	8006184 <SplitNumberToDignits>
 80060d8:	4603      	mov	r3, r0
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3301      	adds	r3, #1
 80060e0:	3230      	adds	r2, #48	; 0x30
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
		arrayChar[2] = ASCII_DWUKROPEK;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3302      	adds	r3, #2
 80060ea:	223a      	movs	r2, #58	; 0x3a
 80060ec:	701a      	strb	r2, [r3, #0]
		arrayChar[3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, minutes);
 80060ee:	78bb      	ldrb	r3, [r7, #2]
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	4619      	mov	r1, r3
 80060f4:	2001      	movs	r0, #1
 80060f6:	f000 f845 	bl	8006184 <SplitNumberToDignits>
 80060fa:	4603      	mov	r3, r0
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3303      	adds	r3, #3
 8006102:	3230      	adds	r2, #48	; 0x30
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
		arrayChar[4] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, minutes);
 8006108:	78bb      	ldrb	r3, [r7, #2]
 800610a:	b21b      	sxth	r3, r3
 800610c:	4619      	mov	r1, r3
 800610e:	2000      	movs	r0, #0
 8006110:	f000 f838 	bl	8006184 <SplitNumberToDignits>
 8006114:	4603      	mov	r3, r0
 8006116:	b2da      	uxtb	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	3230      	adds	r2, #48	; 0x30
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
		if (0 == mode)
 8006122:	7c3b      	ldrb	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d122      	bne.n	800616e <ChangeDateToArrayCharTime+0x196>
			arrayChar[5] = ASCII_DWUKROPEK;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3305      	adds	r3, #5
 800612c:	223a      	movs	r2, #58	; 0x3a
 800612e:	701a      	strb	r2, [r3, #0]
			arrayChar[6] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, seconds);
 8006130:	787b      	ldrb	r3, [r7, #1]
 8006132:	b21b      	sxth	r3, r3
 8006134:	4619      	mov	r1, r3
 8006136:	2001      	movs	r0, #1
 8006138:	f000 f824 	bl	8006184 <SplitNumberToDignits>
 800613c:	4603      	mov	r3, r0
 800613e:	b2da      	uxtb	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3306      	adds	r3, #6
 8006144:	3230      	adds	r2, #48	; 0x30
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
			arrayChar[7] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, seconds);
 800614a:	787b      	ldrb	r3, [r7, #1]
 800614c:	b21b      	sxth	r3, r3
 800614e:	4619      	mov	r1, r3
 8006150:	2000      	movs	r0, #0
 8006152:	f000 f817 	bl	8006184 <SplitNumberToDignits>
 8006156:	4603      	mov	r3, r0
 8006158:	b2da      	uxtb	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3307      	adds	r3, #7
 800615e:	3230      	adds	r2, #48	; 0x30
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
			arrayChar[8] = ASCII_NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3308      	adds	r3, #8
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
    }
 800616c:	e006      	b.n	800617c <ChangeDateToArrayCharTime+0x1a4>
		else if (1 == mode)
 800616e:	7c3b      	ldrb	r3, [r7, #16]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d103      	bne.n	800617c <ChangeDateToArrayCharTime+0x1a4>
			arrayChar[5] = ASCII_NULL;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3305      	adds	r3, #5
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
    }
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <SplitNumberToDignits>:

//
int16_t SplitNumberToDignits(int16_t position, int16_t number)
    {
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	460a      	mov	r2, r1
 800618e:	80fb      	strh	r3, [r7, #6]
 8006190:	4613      	mov	r3, r2
 8006192:	80bb      	strh	r3, [r7, #4]
	while(position--)
 8006194:	e008      	b.n	80061a8 <SplitNumberToDignits+0x24>
	    number /= 10;
 8006196:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800619a:	4a11      	ldr	r2, [pc, #68]	; (80061e0 <SplitNumberToDignits+0x5c>)
 800619c:	fb82 1203 	smull	r1, r2, r2, r3
 80061a0:	1092      	asrs	r2, r2, #2
 80061a2:	17db      	asrs	r3, r3, #31
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	80bb      	strh	r3, [r7, #4]
	while(position--)
 80061a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	3a01      	subs	r2, #1
 80061b0:	b292      	uxth	r2, r2
 80061b2:	80fa      	strh	r2, [r7, #6]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1ee      	bne.n	8006196 <SplitNumberToDignits+0x12>
	return number % 10;
 80061b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <SplitNumberToDignits+0x5c>)
 80061be:	fb83 1302 	smull	r1, r3, r3, r2
 80061c2:	1099      	asrs	r1, r3, #2
 80061c4:	17d3      	asrs	r3, r2, #31
 80061c6:	1ac9      	subs	r1, r1, r3
 80061c8:	460b      	mov	r3, r1
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	b21b      	sxth	r3, r3
    }
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	66666667 	.word	0x66666667

080061e4 <map>:

//
uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min,
	uint32_t out_max)
    {
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	69b9      	ldr	r1, [r7, #24]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	1a8a      	subs	r2, r1, r2
 80061fe:	fb02 f203 	mul.w	r2, r2, r3
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	1acb      	subs	r3, r1, r3
 8006208:	fbb2 f2f3 	udiv	r2, r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	4413      	add	r3, r2
    }
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <ConvertDateToBuffer>:

void ConvertDateToBuffer(uint16_t Year, uint8_t Month, uint8_t WeekDay, uint8_t Date)
    {
 800621c:	b590      	push	{r4, r7, lr}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	4611      	mov	r1, r2
 8006228:	461a      	mov	r2, r3
 800622a:	4623      	mov	r3, r4
 800622c:	80fb      	strh	r3, [r7, #6]
 800622e:	4603      	mov	r3, r0
 8006230:	717b      	strb	r3, [r7, #5]
 8006232:	460b      	mov	r3, r1
 8006234:	713b      	strb	r3, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 40; ++i)
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e006      	b.n	8006252 <ConvertDateToBuffer+0x36>
	    {
		TestingArray[i] = 0;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	4a97      	ldr	r2, [pc, #604]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006248:	2100      	movs	r1, #0
 800624a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 40; ++i)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	3301      	adds	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b27      	cmp	r3, #39	; 0x27
 8006256:	d9f5      	bls.n	8006244 <ConvertDateToBuffer+0x28>
	    }
	switch (WeekDay)
 8006258:	793b      	ldrb	r3, [r7, #4]
 800625a:	3b01      	subs	r3, #1
 800625c:	2b06      	cmp	r3, #6
 800625e:	d842      	bhi.n	80062e6 <ConvertDateToBuffer+0xca>
 8006260:	a201      	add	r2, pc, #4	; (adr r2, 8006268 <ConvertDateToBuffer+0x4c>)
 8006262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006266:	bf00      	nop
 8006268:	08006285 	.word	0x08006285
 800626c:	08006293 	.word	0x08006293
 8006270:	080062a1 	.word	0x080062a1
 8006274:	080062af 	.word	0x080062af
 8006278:	080062bd 	.word	0x080062bd
 800627c:	080062cb 	.word	0x080062cb
 8006280:	080062d9 	.word	0x080062d9
	    {
	    case 1:
		strcat(TestingArray, Poniedzialek);
 8006284:	4b88      	ldr	r3, [pc, #544]	; (80064a8 <ConvertDateToBuffer+0x28c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4619      	mov	r1, r3
 800628a:	4886      	ldr	r0, [pc, #536]	; (80064a4 <ConvertDateToBuffer+0x288>)
 800628c:	f00f fcf2 	bl	8015c74 <strcat>
		break;
 8006290:	e02a      	b.n	80062e8 <ConvertDateToBuffer+0xcc>
	    case 2:
		strcat(TestingArray, Wtorek);
 8006292:	4b86      	ldr	r3, [pc, #536]	; (80064ac <ConvertDateToBuffer+0x290>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	4882      	ldr	r0, [pc, #520]	; (80064a4 <ConvertDateToBuffer+0x288>)
 800629a:	f00f fceb 	bl	8015c74 <strcat>
		break;
 800629e:	e023      	b.n	80062e8 <ConvertDateToBuffer+0xcc>
	    case 3:
		strcat(TestingArray, Sroda);
 80062a0:	4b83      	ldr	r3, [pc, #524]	; (80064b0 <ConvertDateToBuffer+0x294>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	487f      	ldr	r0, [pc, #508]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80062a8:	f00f fce4 	bl	8015c74 <strcat>
		break;
 80062ac:	e01c      	b.n	80062e8 <ConvertDateToBuffer+0xcc>
	    case 4:
		strcat(TestingArray, Czwartek);
 80062ae:	4b81      	ldr	r3, [pc, #516]	; (80064b4 <ConvertDateToBuffer+0x298>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4619      	mov	r1, r3
 80062b4:	487b      	ldr	r0, [pc, #492]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80062b6:	f00f fcdd 	bl	8015c74 <strcat>
		break;
 80062ba:	e015      	b.n	80062e8 <ConvertDateToBuffer+0xcc>
	    case 5:
		strcat(TestingArray, Piatek);
 80062bc:	4b7e      	ldr	r3, [pc, #504]	; (80064b8 <ConvertDateToBuffer+0x29c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4619      	mov	r1, r3
 80062c2:	4878      	ldr	r0, [pc, #480]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80062c4:	f00f fcd6 	bl	8015c74 <strcat>
		break;
 80062c8:	e00e      	b.n	80062e8 <ConvertDateToBuffer+0xcc>
	    case 6:
		strcat(TestingArray, Sobota);
 80062ca:	4b7c      	ldr	r3, [pc, #496]	; (80064bc <ConvertDateToBuffer+0x2a0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4619      	mov	r1, r3
 80062d0:	4874      	ldr	r0, [pc, #464]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80062d2:	f00f fccf 	bl	8015c74 <strcat>
		break;
 80062d6:	e007      	b.n	80062e8 <ConvertDateToBuffer+0xcc>
	    case 7:
		strcat(TestingArray, Niedziela);
 80062d8:	4b79      	ldr	r3, [pc, #484]	; (80064c0 <ConvertDateToBuffer+0x2a4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	4871      	ldr	r0, [pc, #452]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80062e0:	f00f fcc8 	bl	8015c74 <strcat>
		break;
 80062e4:	e000      	b.n	80062e8 <ConvertDateToBuffer+0xcc>
	    default:
		break;
 80062e6:	bf00      	nop
	    }

	temp = strlen(TestingArray);
 80062e8:	486e      	ldr	r0, [pc, #440]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80062ea:	f7f9 fff3 	bl	80002d4 <strlen>
 80062ee:	4603      	mov	r3, r0
 80062f0:	73bb      	strb	r3, [r7, #14]
	TestingArray[temp] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, Date);
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	4619      	mov	r1, r3
 80062f8:	2001      	movs	r0, #1
 80062fa:	f7ff ff43 	bl	8006184 <SplitNumberToDignits>
 80062fe:	4603      	mov	r3, r0
 8006300:	b2da      	uxtb	r2, r3
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	3230      	adds	r2, #48	; 0x30
 8006306:	b2d1      	uxtb	r1, r2
 8006308:	4a66      	ldr	r2, [pc, #408]	; (80064a4 <ConvertDateToBuffer+0x288>)
 800630a:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, Date);
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	b21b      	sxth	r3, r3
 8006310:	4619      	mov	r1, r3
 8006312:	2000      	movs	r0, #0
 8006314:	f7ff ff36 	bl	8006184 <SplitNumberToDignits>
 8006318:	4603      	mov	r3, r0
 800631a:	b2da      	uxtb	r2, r3
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	3301      	adds	r3, #1
 8006320:	3230      	adds	r2, #48	; 0x30
 8006322:	b2d1      	uxtb	r1, r2
 8006324:	4a5f      	ldr	r2, [pc, #380]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006326:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 2] = PRZECINEK;
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	3302      	adds	r3, #2
 800632c:	4a5d      	ldr	r2, [pc, #372]	; (80064a4 <ConvertDateToBuffer+0x288>)
 800632e:	212c      	movs	r1, #44	; 0x2c
 8006330:	54d1      	strb	r1, [r2, r3]

	switch (Month)
 8006332:	797b      	ldrb	r3, [r7, #5]
 8006334:	3b01      	subs	r3, #1
 8006336:	2b0b      	cmp	r3, #11
 8006338:	d86e      	bhi.n	8006418 <ConvertDateToBuffer+0x1fc>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <ConvertDateToBuffer+0x124>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006371 	.word	0x08006371
 8006344:	0800637f 	.word	0x0800637f
 8006348:	0800638d 	.word	0x0800638d
 800634c:	0800639b 	.word	0x0800639b
 8006350:	080063a9 	.word	0x080063a9
 8006354:	080063b7 	.word	0x080063b7
 8006358:	080063c5 	.word	0x080063c5
 800635c:	080063d3 	.word	0x080063d3
 8006360:	080063e1 	.word	0x080063e1
 8006364:	080063ef 	.word	0x080063ef
 8006368:	080063fd 	.word	0x080063fd
 800636c:	0800640b 	.word	0x0800640b
	    {
	    case 1:
		strcat(TestingArray, Styczen);
 8006370:	4b54      	ldr	r3, [pc, #336]	; (80064c4 <ConvertDateToBuffer+0x2a8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4619      	mov	r1, r3
 8006376:	484b      	ldr	r0, [pc, #300]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006378:	f00f fc7c 	bl	8015c74 <strcat>
		break;
 800637c:	e04d      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 2:
		strcat(TestingArray, Luty);
 800637e:	4b52      	ldr	r3, [pc, #328]	; (80064c8 <ConvertDateToBuffer+0x2ac>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4619      	mov	r1, r3
 8006384:	4847      	ldr	r0, [pc, #284]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006386:	f00f fc75 	bl	8015c74 <strcat>
		break;
 800638a:	e046      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 3:
		strcat(TestingArray, Marzec);
 800638c:	4b4f      	ldr	r3, [pc, #316]	; (80064cc <ConvertDateToBuffer+0x2b0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4619      	mov	r1, r3
 8006392:	4844      	ldr	r0, [pc, #272]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006394:	f00f fc6e 	bl	8015c74 <strcat>
		break;
 8006398:	e03f      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 4:
		strcat(TestingArray, Kwiecien);
 800639a:	4b4d      	ldr	r3, [pc, #308]	; (80064d0 <ConvertDateToBuffer+0x2b4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	4840      	ldr	r0, [pc, #256]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80063a2:	f00f fc67 	bl	8015c74 <strcat>
		break;
 80063a6:	e038      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 5:
		strcat(TestingArray, Maj);
 80063a8:	4b4a      	ldr	r3, [pc, #296]	; (80064d4 <ConvertDateToBuffer+0x2b8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4619      	mov	r1, r3
 80063ae:	483d      	ldr	r0, [pc, #244]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80063b0:	f00f fc60 	bl	8015c74 <strcat>
		break;
 80063b4:	e031      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 6:
		strcat(TestingArray, Czerwiec);
 80063b6:	4b48      	ldr	r3, [pc, #288]	; (80064d8 <ConvertDateToBuffer+0x2bc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	4839      	ldr	r0, [pc, #228]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80063be:	f00f fc59 	bl	8015c74 <strcat>
		break;
 80063c2:	e02a      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 7:
		strcat(TestingArray, Lipiec);
 80063c4:	4b45      	ldr	r3, [pc, #276]	; (80064dc <ConvertDateToBuffer+0x2c0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4619      	mov	r1, r3
 80063ca:	4836      	ldr	r0, [pc, #216]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80063cc:	f00f fc52 	bl	8015c74 <strcat>
		break;
 80063d0:	e023      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 8:
		strcat(TestingArray, Sierpien);
 80063d2:	4b43      	ldr	r3, [pc, #268]	; (80064e0 <ConvertDateToBuffer+0x2c4>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4832      	ldr	r0, [pc, #200]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80063da:	f00f fc4b 	bl	8015c74 <strcat>
		break;
 80063de:	e01c      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 9:
		strcat(TestingArray, Wrzesien);
 80063e0:	4b40      	ldr	r3, [pc, #256]	; (80064e4 <ConvertDateToBuffer+0x2c8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	482f      	ldr	r0, [pc, #188]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80063e8:	f00f fc44 	bl	8015c74 <strcat>
		break;
 80063ec:	e015      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 10:
		strcat(TestingArray, Pazdziernik);
 80063ee:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <ConvertDateToBuffer+0x2cc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	482b      	ldr	r0, [pc, #172]	; (80064a4 <ConvertDateToBuffer+0x288>)
 80063f6:	f00f fc3d 	bl	8015c74 <strcat>
		break;
 80063fa:	e00e      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 11:
		strcat(TestingArray, Listopad);
 80063fc:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <ConvertDateToBuffer+0x2d0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4619      	mov	r1, r3
 8006402:	4828      	ldr	r0, [pc, #160]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006404:	f00f fc36 	bl	8015c74 <strcat>
		break;
 8006408:	e007      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    case 12:
		strcat(TestingArray, Grudzien);
 800640a:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <ConvertDateToBuffer+0x2d4>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	4824      	ldr	r0, [pc, #144]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006412:	f00f fc2f 	bl	8015c74 <strcat>
		break;
 8006416:	e000      	b.n	800641a <ConvertDateToBuffer+0x1fe>
	    default:
		break;
 8006418:	bf00      	nop
	    }
	temp = strlen(TestingArray);
 800641a:	4822      	ldr	r0, [pc, #136]	; (80064a4 <ConvertDateToBuffer+0x288>)
 800641c:	f7f9 ff5a 	bl	80002d4 <strlen>
 8006420:	4603      	mov	r3, r0
 8006422:	73bb      	strb	r3, [r7, #14]
	TestingArray[temp] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(3, Year);
 8006424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006428:	4619      	mov	r1, r3
 800642a:	2003      	movs	r0, #3
 800642c:	f7ff feaa 	bl	8006184 <SplitNumberToDignits>
 8006430:	4603      	mov	r3, r0
 8006432:	b2da      	uxtb	r2, r3
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	3230      	adds	r2, #48	; 0x30
 8006438:	b2d1      	uxtb	r1, r2
 800643a:	4a1a      	ldr	r2, [pc, #104]	; (80064a4 <ConvertDateToBuffer+0x288>)
 800643c:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(2, Year);
 800643e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006442:	4619      	mov	r1, r3
 8006444:	2002      	movs	r0, #2
 8006446:	f7ff fe9d 	bl	8006184 <SplitNumberToDignits>
 800644a:	4603      	mov	r3, r0
 800644c:	b2da      	uxtb	r2, r3
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	3301      	adds	r3, #1
 8006452:	3230      	adds	r2, #48	; 0x30
 8006454:	b2d1      	uxtb	r1, r2
 8006456:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006458:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, Year);
 800645a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800645e:	4619      	mov	r1, r3
 8006460:	2001      	movs	r0, #1
 8006462:	f7ff fe8f 	bl	8006184 <SplitNumberToDignits>
 8006466:	4603      	mov	r3, r0
 8006468:	b2da      	uxtb	r2, r3
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	3302      	adds	r3, #2
 800646e:	3230      	adds	r2, #48	; 0x30
 8006470:	b2d1      	uxtb	r1, r2
 8006472:	4a0c      	ldr	r2, [pc, #48]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006474:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, Year);
 8006476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800647a:	4619      	mov	r1, r3
 800647c:	2000      	movs	r0, #0
 800647e:	f7ff fe81 	bl	8006184 <SplitNumberToDignits>
 8006482:	4603      	mov	r3, r0
 8006484:	b2da      	uxtb	r2, r3
 8006486:	7bbb      	ldrb	r3, [r7, #14]
 8006488:	3303      	adds	r3, #3
 800648a:	3230      	adds	r2, #48	; 0x30
 800648c:	b2d1      	uxtb	r1, r2
 800648e:	4a05      	ldr	r2, [pc, #20]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006490:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 4] = ASCII_NULL;
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	3304      	adds	r3, #4
 8006496:	4a03      	ldr	r2, [pc, #12]	; (80064a4 <ConvertDateToBuffer+0x288>)
 8006498:	2100      	movs	r1, #0
 800649a:	54d1      	strb	r1, [r2, r3]
    }
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd90      	pop	{r4, r7, pc}
 80064a4:	20000168 	.word	0x20000168
 80064a8:	2000000c 	.word	0x2000000c
 80064ac:	20000010 	.word	0x20000010
 80064b0:	20000014 	.word	0x20000014
 80064b4:	20000018 	.word	0x20000018
 80064b8:	2000001c 	.word	0x2000001c
 80064bc:	20000020 	.word	0x20000020
 80064c0:	20000024 	.word	0x20000024
 80064c4:	20000028 	.word	0x20000028
 80064c8:	2000002c 	.word	0x2000002c
 80064cc:	20000030 	.word	0x20000030
 80064d0:	20000034 	.word	0x20000034
 80064d4:	20000038 	.word	0x20000038
 80064d8:	2000003c 	.word	0x2000003c
 80064dc:	20000040 	.word	0x20000040
 80064e0:	20000044 	.word	0x20000044
 80064e4:	20000048 	.word	0x20000048
 80064e8:	2000004c 	.word	0x2000004c
 80064ec:	20000050 	.word	0x20000050
 80064f0:	20000054 	.word	0x20000054

080064f4 <prepare_RDS_text>:


_Bool prepare_RDS_text(char *RDS_text)
    {
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

	//if first chars are empty spaces then its not a good string to display
	if ((RDStextbuffer[0] == ' ') && (RDStextbuffer[1] == ' ') && (RDStextbuffer[2] == ' ') && (RDStextbuffer[3] == ' '))
 80064fc:	4b32      	ldr	r3, [pc, #200]	; (80065c8 <prepare_RDS_text+0xd4>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b20      	cmp	r3, #32
 8006502:	d10d      	bne.n	8006520 <prepare_RDS_text+0x2c>
 8006504:	4b30      	ldr	r3, [pc, #192]	; (80065c8 <prepare_RDS_text+0xd4>)
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b20      	cmp	r3, #32
 800650a:	d109      	bne.n	8006520 <prepare_RDS_text+0x2c>
 800650c:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <prepare_RDS_text+0xd4>)
 800650e:	789b      	ldrb	r3, [r3, #2]
 8006510:	2b20      	cmp	r3, #32
 8006512:	d105      	bne.n	8006520 <prepare_RDS_text+0x2c>
 8006514:	4b2c      	ldr	r3, [pc, #176]	; (80065c8 <prepare_RDS_text+0xd4>)
 8006516:	78db      	ldrb	r3, [r3, #3]
 8006518:	2b20      	cmp	r3, #32
 800651a:	d101      	bne.n	8006520 <prepare_RDS_text+0x2c>
	    {
		return false;
 800651c:	2300      	movs	r3, #0
 800651e:	e04d      	b.n	80065bc <prepare_RDS_text+0xc8>
	    }
	if ((RDStextbuffer[0] == 0x00) && (RDStextbuffer[1] == 0x00) && (RDStextbuffer[2] == 0x00) && (RDStextbuffer[3] == 0x00))
 8006520:	4b29      	ldr	r3, [pc, #164]	; (80065c8 <prepare_RDS_text+0xd4>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <prepare_RDS_text+0x50>
 8006528:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <prepare_RDS_text+0xd4>)
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <prepare_RDS_text+0x50>
 8006530:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <prepare_RDS_text+0xd4>)
 8006532:	789b      	ldrb	r3, [r3, #2]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <prepare_RDS_text+0x50>
 8006538:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <prepare_RDS_text+0xd4>)
 800653a:	78db      	ldrb	r3, [r3, #3]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <prepare_RDS_text+0x50>
	    {
		return false;
 8006540:	2300      	movs	r3, #0
 8006542:	e03b      	b.n	80065bc <prepare_RDS_text+0xc8>
	    }
	//checks for end of the string
	for (uint8_t i = 0; i < 66; i++)
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e034      	b.n	80065b4 <prepare_RDS_text+0xc0>
	    {
		if (RDStextbuffer[i] == ' ' && RDStextbuffer[i + 1] == ' ' && RDStextbuffer[i + 2] == ' '&& RDStextbuffer[i + 3] == ' '&& RDStextbuffer[i + 4] == ' '&& RDStextbuffer[i + 5] == ' ')
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <prepare_RDS_text+0xd4>)
 800654e:	5cd3      	ldrb	r3, [r2, r3]
 8006550:	2b20      	cmp	r3, #32
 8006552:	d12c      	bne.n	80065ae <prepare_RDS_text+0xba>
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	3301      	adds	r3, #1
 8006558:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <prepare_RDS_text+0xd4>)
 800655a:	5cd3      	ldrb	r3, [r2, r3]
 800655c:	2b20      	cmp	r3, #32
 800655e:	d126      	bne.n	80065ae <prepare_RDS_text+0xba>
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	3302      	adds	r3, #2
 8006564:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <prepare_RDS_text+0xd4>)
 8006566:	5cd3      	ldrb	r3, [r2, r3]
 8006568:	2b20      	cmp	r3, #32
 800656a:	d120      	bne.n	80065ae <prepare_RDS_text+0xba>
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	3303      	adds	r3, #3
 8006570:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <prepare_RDS_text+0xd4>)
 8006572:	5cd3      	ldrb	r3, [r2, r3]
 8006574:	2b20      	cmp	r3, #32
 8006576:	d11a      	bne.n	80065ae <prepare_RDS_text+0xba>
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	3304      	adds	r3, #4
 800657c:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <prepare_RDS_text+0xd4>)
 800657e:	5cd3      	ldrb	r3, [r2, r3]
 8006580:	2b20      	cmp	r3, #32
 8006582:	d114      	bne.n	80065ae <prepare_RDS_text+0xba>
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	3305      	adds	r3, #5
 8006588:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <prepare_RDS_text+0xd4>)
 800658a:	5cd3      	ldrb	r3, [r2, r3]
 800658c:	2b20      	cmp	r3, #32
 800658e:	d10e      	bne.n	80065ae <prepare_RDS_text+0xba>
		    {

			RDStextbuffer[i] = 0x00; //add end of the string
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	4a0d      	ldr	r2, [pc, #52]	; (80065c8 <prepare_RDS_text+0xd4>)
 8006594:	2100      	movs	r1, #0
 8006596:	54d1      	strb	r1, [r2, r3]
			if(i > 40)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b28      	cmp	r3, #40	; 0x28
 800659c:	d907      	bls.n	80065ae <prepare_RDS_text+0xba>
			    {
				RDS_text[i - 39] = RDStextbuffer[i];
 800659e:	7bfa      	ldrb	r2, [r7, #15]
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	3b27      	subs	r3, #39	; 0x27
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	440b      	add	r3, r1
 80065a8:	4907      	ldr	r1, [pc, #28]	; (80065c8 <prepare_RDS_text+0xd4>)
 80065aa:	5c8a      	ldrb	r2, [r1, r2]
 80065ac:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 66; i++)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	3301      	adds	r3, #1
 80065b2:	73fb      	strb	r3, [r7, #15]
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2b41      	cmp	r3, #65	; 0x41
 80065b8:	d9c7      	bls.n	800654a <prepare_RDS_text+0x56>
			    }
		    }

	    }

	return true;
 80065ba:	2301      	movs	r3, #1
    }
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	200003a4 	.word	0x200003a4

080065cc <get_random_coords>:


_Bool  get_random_coords(uint32_t *random_x, uint32_t *random_y)
    {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
	 uint32_t temp;
	 static uint32_t random2;

	if (hrng.ErrorCode == 2) //dać inny warunek, uniwersalny
 80065d6:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <get_random_coords+0x84>)
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d105      	bne.n	80065ea <get_random_coords+0x1e>
	    {
		HAL_RNG_DeInit(&hrng);
 80065de:	481c      	ldr	r0, [pc, #112]	; (8006650 <get_random_coords+0x84>)
 80065e0:	f00b ff8a 	bl	80124f8 <HAL_RNG_DeInit>
		HAL_RNG_Init(&hrng);
 80065e4:	481a      	ldr	r0, [pc, #104]	; (8006650 <get_random_coords+0x84>)
 80065e6:	f00b fedd 	bl	80123a4 <HAL_RNG_Init>
	    }

	HAL_RNG_GenerateRandomNumber(&hrng, &random2);
 80065ea:	491a      	ldr	r1, [pc, #104]	; (8006654 <get_random_coords+0x88>)
 80065ec:	4818      	ldr	r0, [pc, #96]	; (8006650 <get_random_coords+0x84>)
 80065ee:	f00b ffe7 	bl	80125c0 <HAL_RNG_GenerateRandomNumber>
	if (hrng.Instance->SR == 1) //new random data ready
 80065f2:	4b17      	ldr	r3, [pc, #92]	; (8006650 <get_random_coords+0x84>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d123      	bne.n	8006644 <get_random_coords+0x78>
	    {
		temp = hrng.RandomNumber;
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <get_random_coords+0x84>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	60fb      	str	r3, [r7, #12]
		*random_x = (uint8_t) temp; 	   //get 8 bits
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]
		*random_y = (uint8_t)(temp >> 26); //get other 6 bits
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	0e9b      	lsrs	r3, r3, #26
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	601a      	str	r2, [r3, #0]
		//don't let the clock be outside of display
		if(*random_x >= 195)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2bc2      	cmp	r3, #194	; 0xc2
 800661e:	d905      	bls.n	800662c <get_random_coords+0x60>
		    {
			*random_x -= 59;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f1a3 023b 	sub.w	r2, r3, #59	; 0x3b
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	601a      	str	r2, [r3, #0]
		    }
		if(*random_y <=  13)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b0d      	cmp	r3, #13
 8006632:	d805      	bhi.n	8006640 <get_random_coords+0x74>
		    {
			*random_y += 13;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f103 020d 	add.w	r2, r3, #13
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	601a      	str	r2, [r3, #0]
		    }
		return true;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <get_random_coords+0x7a>
	    }
	return false;
 8006644:	2300      	movs	r3, #0
    }
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20007814 	.word	0x20007814
 8006654:	200001ec 	.word	0x200001ec

08006658 <make_array>:


void make_array(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	4608      	mov	r0, r1
 8006662:	4611      	mov	r1, r2
 8006664:	461a      	mov	r2, r3
 8006666:	4603      	mov	r3, r0
 8006668:	817b      	strh	r3, [r7, #10]
 800666a:	460b      	mov	r3, r1
 800666c:	813b      	strh	r3, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	80fb      	strh	r3, [r7, #6]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8006672:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006674:	893b      	ldrh	r3, [r7, #8]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800667c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8006680:	88f9      	ldrh	r1, [r7, #6]
 8006682:	897b      	ldrh	r3, [r7, #10]
 8006684:	1acb      	subs	r3, r1, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfb8      	it	lt
 800668a:	425b      	neglt	r3, r3
 800668c:	429a      	cmp	r2, r3
 800668e:	bfcc      	ite	gt
 8006690:	2301      	movgt	r3, #1
 8006692:	2300      	movle	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	837b      	strh	r3, [r7, #26]
	if (steep == 1)
 8006698:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10b      	bne.n	80066b8 <make_array+0x60>
	{
		uint16_t tmp = y0;
 80066a0:	893b      	ldrh	r3, [r7, #8]
 80066a2:	833b      	strh	r3, [r7, #24]
		y0 = x0;
 80066a4:	897b      	ldrh	r3, [r7, #10]
 80066a6:	813b      	strh	r3, [r7, #8]
		x0 = tmp;
 80066a8:	8b3b      	ldrh	r3, [r7, #24]
 80066aa:	817b      	strh	r3, [r7, #10]
		tmp = y1;
 80066ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066ae:	833b      	strh	r3, [r7, #24]
		y1 = x1;
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	853b      	strh	r3, [r7, #40]	; 0x28
		x1 = tmp;
 80066b4:	8b3b      	ldrh	r3, [r7, #24]
 80066b6:	80fb      	strh	r3, [r7, #6]
	}

	if (x0 > x1) //określa kierunek rysowania linii
 80066b8:	897a      	ldrh	r2, [r7, #10]
 80066ba:	88fb      	ldrh	r3, [r7, #6]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d90b      	bls.n	80066d8 <make_array+0x80>
	{
		uint16_t tmp = x0;
 80066c0:	897b      	ldrh	r3, [r7, #10]
 80066c2:	82fb      	strh	r3, [r7, #22]
		x0 = x1;
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	817b      	strh	r3, [r7, #10]
		x1 = tmp;
 80066c8:	8afb      	ldrh	r3, [r7, #22]
 80066ca:	80fb      	strh	r3, [r7, #6]
		tmp = y0;
 80066cc:	893b      	ldrh	r3, [r7, #8]
 80066ce:	82fb      	strh	r3, [r7, #22]
		y0 = y1;
 80066d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066d2:	813b      	strh	r3, [r7, #8]
		y1 = tmp;
 80066d4:	8afb      	ldrh	r3, [r7, #22]
 80066d6:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	int16_t dx, dy;
	dx = x1 - x0;
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	897b      	ldrh	r3, [r7, #10]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	b29b      	uxth	r3, r3
 80066e0:	82bb      	strh	r3, [r7, #20]
	dy = abs(y1 - y0);
 80066e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80066e4:	893b      	ldrh	r3, [r7, #8]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bfb8      	it	lt
 80066ec:	425b      	neglt	r3, r3
 80066ee:	827b      	strh	r3, [r7, #18]

	int16_t err = dx / 2;
 80066f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80066f4:	0fda      	lsrs	r2, r3, #31
 80066f6:	4413      	add	r3, r2
 80066f8:	105b      	asrs	r3, r3, #1
 80066fa:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 80066fc:	893a      	ldrh	r2, [r7, #8]
 80066fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006700:	429a      	cmp	r2, r3
 8006702:	d202      	bcs.n	800670a <make_array+0xb2>
	{
		ystep = 1;
 8006704:	2301      	movs	r3, #1
 8006706:	83bb      	strh	r3, [r7, #28]
 8006708:	e071      	b.n	80067ee <make_array+0x196>
	}
	else
	{
		ystep = -1;
 800670a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800670e:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++)
 8006710:	e06d      	b.n	80067ee <make_array+0x196>
	{
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8006712:	2200      	movs	r2, #0
 8006714:	493b      	ldr	r1, [pc, #236]	; (8006804 <make_array+0x1ac>)
 8006716:	483c      	ldr	r0, [pc, #240]	; (8006808 <make_array+0x1b0>)
 8006718:	f00c f8d2 	bl	80128c0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800671c:	2200      	movs	r2, #0
 800671e:	493b      	ldr	r1, [pc, #236]	; (800680c <make_array+0x1b4>)
 8006720:	4839      	ldr	r0, [pc, #228]	; (8006808 <make_array+0x1b0>)
 8006722:	f00c f9b7 	bl	8012a94 <HAL_RTC_GetDate>

		if (steep)
 8006726:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d025      	beq.n	800677a <make_array+0x122>
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 800672e:	4b38      	ldr	r3, [pc, #224]	; (8006810 <make_array+0x1b8>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b05      	cmp	r3, #5
 8006734:	d160      	bne.n	80067f8 <make_array+0x1a0>
			fill_buffer(frame_buffer, 0);
 8006736:	2100      	movs	r1, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7fc fa5d 	bl	8002bf8 <fill_buffer>
			HAL_Delay(50);
 800673e:	2032      	movs	r0, #50	; 0x32
 8006740:	f006 fa9a 	bl	800cc78 <HAL_Delay>
			ChangeDateToArrayCharTime(ConvertArrayCharTime, sTime.Hours, sTime.Minutes, sTime.Seconds, 0);
 8006744:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <make_array+0x1ac>)
 8006746:	7819      	ldrb	r1, [r3, #0]
 8006748:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <make_array+0x1ac>)
 800674a:	785a      	ldrb	r2, [r3, #1]
 800674c:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <make_array+0x1ac>)
 800674e:	789b      	ldrb	r3, [r3, #2]
 8006750:	2000      	movs	r0, #0
 8006752:	9000      	str	r0, [sp, #0]
 8006754:	482f      	ldr	r0, [pc, #188]	; (8006814 <make_array+0x1bc>)
 8006756:	f7ff fc3f 	bl	8005fd8 <ChangeDateToArrayCharTime>
			draw_text(frame_buffer, (char*) ConvertArrayCharTime, y0, x0, brightness);
 800675a:	8979      	ldrh	r1, [r7, #10]
 800675c:	893a      	ldrh	r2, [r7, #8]
 800675e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	460b      	mov	r3, r1
 8006766:	492b      	ldr	r1, [pc, #172]	; (8006814 <make_array+0x1bc>)
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7fc fd55 	bl	8003218 <draw_text>
			send_buffer_to_OLED(frame_buffer, 0, 0);
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7fc fd84 	bl	8003280 <send_buffer_to_OLED>
 8006778:	e024      	b.n	80067c4 <make_array+0x16c>
		}
		else
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 800677a:	4b25      	ldr	r3, [pc, #148]	; (8006810 <make_array+0x1b8>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	2b05      	cmp	r3, #5
 8006780:	d13c      	bne.n	80067fc <make_array+0x1a4>
			fill_buffer(frame_buffer, 0);
 8006782:	2100      	movs	r1, #0
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7fc fa37 	bl	8002bf8 <fill_buffer>
			HAL_Delay(50);
 800678a:	2032      	movs	r0, #50	; 0x32
 800678c:	f006 fa74 	bl	800cc78 <HAL_Delay>
			ChangeDateToArrayCharTime(ConvertArrayCharTime, sTime.Hours, sTime.Minutes, sTime.Seconds, 0);
 8006790:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <make_array+0x1ac>)
 8006792:	7819      	ldrb	r1, [r3, #0]
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <make_array+0x1ac>)
 8006796:	785a      	ldrb	r2, [r3, #1]
 8006798:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <make_array+0x1ac>)
 800679a:	789b      	ldrb	r3, [r3, #2]
 800679c:	2000      	movs	r0, #0
 800679e:	9000      	str	r0, [sp, #0]
 80067a0:	481c      	ldr	r0, [pc, #112]	; (8006814 <make_array+0x1bc>)
 80067a2:	f7ff fc19 	bl	8005fd8 <ChangeDateToArrayCharTime>
			draw_text(frame_buffer, (char*) ConvertArrayCharTime, x0, y0, brightness);
 80067a6:	8939      	ldrh	r1, [r7, #8]
 80067a8:	897a      	ldrh	r2, [r7, #10]
 80067aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	460b      	mov	r3, r1
 80067b2:	4918      	ldr	r1, [pc, #96]	; (8006814 <make_array+0x1bc>)
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7fc fd2f 	bl	8003218 <draw_text>
			send_buffer_to_OLED(frame_buffer, 0, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7fc fd5e 	bl	8003280 <send_buffer_to_OLED>
			//można dodać flagę volatile która jest sprawdzana jeżeli zmieniono ekran
		}
		err -= dy;
 80067c4:	8bfa      	ldrh	r2, [r7, #30]
 80067c6:	8a7b      	ldrh	r3, [r7, #18]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 80067ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da08      	bge.n	80067e8 <make_array+0x190>
		{
			y0 += ystep;
 80067d6:	8bba      	ldrh	r2, [r7, #28]
 80067d8:	893b      	ldrh	r3, [r7, #8]
 80067da:	4413      	add	r3, r2
 80067dc:	813b      	strh	r3, [r7, #8]
			err += dx;
 80067de:	8bfa      	ldrh	r2, [r7, #30]
 80067e0:	8abb      	ldrh	r3, [r7, #20]
 80067e2:	4413      	add	r3, r2
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++)
 80067e8:	897b      	ldrh	r3, [r7, #10]
 80067ea:	3301      	adds	r3, #1
 80067ec:	817b      	strh	r3, [r7, #10]
 80067ee:	897a      	ldrh	r2, [r7, #10]
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d98d      	bls.n	8006712 <make_array+0xba>
 80067f6:	e002      	b.n	80067fe <make_array+0x1a6>
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 80067f8:	bf00      	nop
 80067fa:	e000      	b.n	80067fe <make_array+0x1a6>
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 80067fc:	bf00      	nop
		}
	}
}
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	2000178c 	.word	0x2000178c
 8006808:	20007828 	.word	0x20007828
 800680c:	200057bc 	.word	0x200057bc
 8006810:	200004f8 	.word	0x200004f8
 8006814:	2000015c 	.word	0x2000015c

08006818 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite(uint16_t size, uint16_t offset)
    {
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	460a      	mov	r2, r1
 8006822:	80fb      	strh	r3, [r7, #6]
 8006824:	4613      	mov	r3, r2
 8006826:	80bb      	strh	r3, [r7, #4]
	if ((size + offset) < PAGE_SIZE)
 8006828:	88fa      	ldrh	r2, [r7, #6]
 800682a:	88bb      	ldrh	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	2b3f      	cmp	r3, #63	; 0x3f
 8006830:	dc01      	bgt.n	8006836 <bytestowrite+0x1e>
	    return size;
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	e003      	b.n	800683e <bytestowrite+0x26>
	else
	    return PAGE_SIZE - offset;
 8006836:	88bb      	ldrh	r3, [r7, #4]
 8006838:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800683c:	b29b      	uxth	r3, r3
    }
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <EEPROM_Write>:
 *  @param[in] offset -  start byte offset in the page. Range from 0 to PAGE_SIZE-1
 *  @param[in] data is the pointer to the data to write in bytes
 *  @param[in] size is the size of the data
 */
void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
    {
 800684c:	b580      	push	{r7, lr}
 800684e:	b08e      	sub	sp, #56	; 0x38
 8006850:	af04      	add	r7, sp, #16
 8006852:	60ba      	str	r2, [r7, #8]
 8006854:	461a      	mov	r2, r3
 8006856:	4603      	mov	r3, r0
 8006858:	81fb      	strh	r3, [r7, #14]
 800685a:	460b      	mov	r3, r1
 800685c:	81bb      	strh	r3, [r7, #12]
 800685e:	4613      	mov	r3, r2
 8006860:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE) / log(2);
 8006862:	2306      	movs	r3, #6
 8006864:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8006866:	89fb      	ldrh	r3, [r7, #14]
 8006868:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	89bb      	ldrh	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	da00      	bge.n	8006876 <EEPROM_Write+0x2a>
 8006874:	333f      	adds	r3, #63	; 0x3f
 8006876:	119b      	asrs	r3, r3, #6
 8006878:	b29a      	uxth	r2, r3
 800687a:	89fb      	ldrh	r3, [r7, #14]
 800687c:	4413      	add	r3, r2
 800687e:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage - startPage) + 1;
 8006880:	8b7a      	ldrh	r2, [r7, #26]
 8006882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	b29b      	uxth	r3, r3
 8006888:	3301      	adds	r3, #1
 800688a:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i = 0; i < numofpages; i++)
 8006890:	2300      	movs	r3, #0
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	e034      	b.n	8006900 <EEPROM_Write+0xb4>
	    {
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage << paddrposition | offset;
 8006896:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	b21a      	sxth	r2, r3
 80068a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	b21b      	sxth	r3, r3
 80068a8:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 80068aa:	89ba      	ldrh	r2, [r7, #12]
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff ffb1 	bl	8006818 <bytestowrite>
 80068b6:	4603      	mov	r3, r0
 80068b8:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000); // write the data to the EEPROM
 80068ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	4413      	add	r3, r2
 80068c0:	8af9      	ldrh	r1, [r7, #22]
 80068c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068c6:	9202      	str	r2, [sp, #8]
 80068c8:	8aba      	ldrh	r2, [r7, #20]
 80068ca:	9201      	str	r2, [sp, #4]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	2302      	movs	r3, #2
 80068d0:	460a      	mov	r2, r1
 80068d2:	21a0      	movs	r1, #160	; 0xa0
 80068d4:	480f      	ldr	r0, [pc, #60]	; (8006914 <EEPROM_Write+0xc8>)
 80068d6:	f009 fa59 	bl	800fd8c <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 80068da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068dc:	3301      	adds	r3, #1
 80068de:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;   // since we will be writing to a new page, so offset will be 0
 80068e0:	2300      	movs	r3, #0
 80068e2:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;  // reduce the size of the bytes
 80068e4:	88fa      	ldrh	r2, [r7, #6]
 80068e6:	8abb      	ldrh	r3, [r7, #20]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 80068ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068ee:	8abb      	ldrh	r3, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay(5);  // Write cycle delay (5ms)
 80068f4:	2005      	movs	r0, #5
 80068f6:	f006 f9bf 	bl	800cc78 <HAL_Delay>
	for (int i = 0; i < numofpages; i++)
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	3301      	adds	r3, #1
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	8b3b      	ldrh	r3, [r7, #24]
 8006902:	6a3a      	ldr	r2, [r7, #32]
 8006904:	429a      	cmp	r2, r3
 8006906:	dbc6      	blt.n	8006896 <EEPROM_Write+0x4a>
	    }
    }
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	200006bc 	.word	0x200006bc

08006918 <EEPROM_Read>:
 *  @param[in] offset -  start byte offset in the page. Range from 0 to PAGE_SIZE-1
 *  @param[in] data is the pointer to the data to write in bytes
 *  @param[in] size is the size of the data
 */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
    {
 8006918:	b580      	push	{r7, lr}
 800691a:	b08e      	sub	sp, #56	; 0x38
 800691c:	af04      	add	r7, sp, #16
 800691e:	60ba      	str	r2, [r7, #8]
 8006920:	461a      	mov	r2, r3
 8006922:	4603      	mov	r3, r0
 8006924:	81fb      	strh	r3, [r7, #14]
 8006926:	460b      	mov	r3, r1
 8006928:	81bb      	strh	r3, [r7, #12]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE) / log(2);
 800692e:	2306      	movs	r3, #6
 8006930:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8006932:	89fb      	ldrh	r3, [r7, #14]
 8006934:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8006936:	88fa      	ldrh	r2, [r7, #6]
 8006938:	89bb      	ldrh	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	da00      	bge.n	8006942 <EEPROM_Read+0x2a>
 8006940:	333f      	adds	r3, #63	; 0x3f
 8006942:	119b      	asrs	r3, r3, #6
 8006944:	b29a      	uxth	r2, r3
 8006946:	89fb      	ldrh	r3, [r7, #14]
 8006948:	4413      	add	r3, r2
 800694a:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage - startPage) + 1;
 800694c:	8b7a      	ldrh	r2, [r7, #26]
 800694e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	b29b      	uxth	r3, r3
 8006954:	3301      	adds	r3, #1
 8006956:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i < numofpages; i++)
 800695c:	2300      	movs	r3, #0
 800695e:	623b      	str	r3, [r7, #32]
 8006960:	e031      	b.n	80069c6 <EEPROM_Read+0xae>
	    {
		uint16_t MemAddress = startPage << paddrposition | offset;
 8006962:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	b21a      	sxth	r2, r3
 800696c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	b21b      	sxth	r3, r3
 8006974:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 8006976:	89ba      	ldrh	r2, [r7, #12]
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff ff4b 	bl	8006818 <bytestowrite>
 8006982:	4603      	mov	r3, r0
 8006984:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 8006986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	4413      	add	r3, r2
 800698c:	8af9      	ldrh	r1, [r7, #22]
 800698e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006992:	9202      	str	r2, [sp, #8]
 8006994:	8aba      	ldrh	r2, [r7, #20]
 8006996:	9201      	str	r2, [sp, #4]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	2302      	movs	r3, #2
 800699c:	460a      	mov	r2, r1
 800699e:	21a0      	movs	r1, #160	; 0xa0
 80069a0:	480d      	ldr	r0, [pc, #52]	; (80069d8 <EEPROM_Read+0xc0>)
 80069a2:	f009 fb07 	bl	800ffb4 <HAL_I2C_Mem_Read>
		startPage += 1;
 80069a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069a8:	3301      	adds	r3, #1
 80069aa:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 80069b0:	88fa      	ldrh	r2, [r7, #6]
 80069b2:	8abb      	ldrh	r3, [r7, #20]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80069b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069ba:	8abb      	ldrh	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i = 0; i < numofpages; i++)
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	3301      	adds	r3, #1
 80069c4:	623b      	str	r3, [r7, #32]
 80069c6:	8b3b      	ldrh	r3, [r7, #24]
 80069c8:	6a3a      	ldr	r2, [r7, #32]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	dbc9      	blt.n	8006962 <EEPROM_Read+0x4a>
	    }
    }
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	3728      	adds	r7, #40	; 0x28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	200006bc 	.word	0x200006bc

080069dc <EEPROM_PageErase>:
 *  @brief Clears given eeprom page
 *
 *  @param[in] page - number of the start page. Range from 0 to PAGE_NUM-1
 */
void EEPROM_PageErase(uint16_t page)
    {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b098      	sub	sp, #96	; 0x60
 80069e0:	af04      	add	r7, sp, #16
 80069e2:	4603      	mov	r3, r0
 80069e4:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE) / log(2);
 80069e6:	2306      	movs	r3, #6
 80069e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page << paddrposition;
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data, 0xff, PAGE_SIZE);
 80069f6:	f107 0308 	add.w	r3, r7, #8
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	21ff      	movs	r1, #255	; 0xff
 80069fe:	4618      	mov	r0, r3
 8006a00:	f00f f910 	bl	8015c24 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 10);
 8006a04:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8006a08:	230a      	movs	r3, #10
 8006a0a:	9302      	str	r3, [sp, #8]
 8006a0c:	2340      	movs	r3, #64	; 0x40
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	2302      	movs	r3, #2
 8006a18:	21a0      	movs	r1, #160	; 0xa0
 8006a1a:	4803      	ldr	r0, [pc, #12]	; (8006a28 <EEPROM_PageErase+0x4c>)
 8006a1c:	f009 f9b6 	bl	800fd8c <HAL_I2C_Mem_Write>

	//HAL_Delay(5);  // write cycle delay
    }
 8006a20:	bf00      	nop
 8006a22:	3750      	adds	r7, #80	; 0x50
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	200006bc 	.word	0x200006bc

08006a2c <EEPROM_Read_UserSetting>:

/* Reads the single Float/Integer values from the EEPROM
 * @returns the float/integer value
 */
void EEPROM_Read_UserSetting(savedUserSettings_t *savedUser)
    {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	EEPROM_Read(PAGE_0, Byte_0, (uint8_t*) &savedUser->stationSaved_1, 1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	2301      	movs	r3, #1
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	f7ff ff6b 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_0, Byte_1, (uint8_t*) &savedUser->stationSaved_2, sizeof(savedUser->stationSaved_2));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	1d1a      	adds	r2, r3, #4
 8006a46:	2302      	movs	r3, #2
 8006a48:	2101      	movs	r1, #1
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f7ff ff64 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_0, Byte_2, (uint8_t*) &savedUser->stationSaved_3, sizeof(savedUser->stationSaved_3));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1d9a      	adds	r2, r3, #6
 8006a54:	2302      	movs	r3, #2
 8006a56:	2102      	movs	r1, #2
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f7ff ff5d 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_0, Byte_3, (uint8_t*) &savedUser->displayRefreshTime, sizeof(savedUser->displayRefreshTime));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f103 0208 	add.w	r2, r3, #8
 8006a64:	2302      	movs	r3, #2
 8006a66:	2103      	movs	r1, #3
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f7ff ff55 	bl	8006918 <EEPROM_Read>

	savedUser->radio_freq     = savedUser->radio_freq     + FREQ_OFFSET;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	f203 3366 	addw	r3, r3, #870	; 0x366
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	801a      	strh	r2, [r3, #0]
	savedUser->stationSaved_1 = savedUser->stationSaved_1 + FREQ_OFFSET;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	f203 3366 	addw	r3, r3, #870	; 0x366
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	805a      	strh	r2, [r3, #2]
	savedUser->stationSaved_2 = savedUser->stationSaved_2 + FREQ_OFFSET;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	889b      	ldrh	r3, [r3, #4]
 8006a8e:	f203 3366 	addw	r3, r3, #870	; 0x366
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	809a      	strh	r2, [r3, #4]
    }
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <EEPROM_Save_UserSetting>:

void EEPROM_Save_UserSetting(savedUserSettings_t *savedUser)
    {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	EEPROM_PageErase(PAGE_0);
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f7ff ff97 	bl	80069dc <EEPROM_PageErase>

	savedUser->radio_freq     = savedUser->radio_freq     - FREQ_OFFSET;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	801a      	strh	r2, [r3, #0]
	savedUser->stationSaved_1 = savedUser->stationSaved_1 - FREQ_OFFSET;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	885b      	ldrh	r3, [r3, #2]
 8006ac0:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	805a      	strh	r2, [r3, #2]
	savedUser->stationSaved_2 = savedUser->stationSaved_2 - FREQ_OFFSET;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	889b      	ldrh	r3, [r3, #4]
 8006ace:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	809a      	strh	r2, [r3, #4]

	EEPROM_Write(PAGE_0, Byte_0, (uint8_t*) &savedUser->stationSaved_1, 1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	2301      	movs	r3, #1
 8006ade:	2100      	movs	r1, #0
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	f7ff feb3 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_1, (uint8_t*) &savedUser->stationSaved_2, 1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	2301      	movs	r3, #1
 8006aec:	2101      	movs	r1, #1
 8006aee:	2000      	movs	r0, #0
 8006af0:	f7ff feac 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_2, (uint8_t*) &savedUser->stationSaved_3, 1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	1d9a      	adds	r2, r3, #6
 8006af8:	2301      	movs	r3, #1
 8006afa:	2102      	movs	r1, #2
 8006afc:	2000      	movs	r0, #0
 8006afe:	f7ff fea5 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_3, (uint8_t*) &savedUser->displayRefreshTime, 1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f103 0208 	add.w	r2, r3, #8
 8006b08:	2301      	movs	r3, #1
 8006b0a:	2103      	movs	r1, #3
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	f7ff fe9d 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_4, (uint8_t*) &savedUser->radio_freq, 1);
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	2301      	movs	r3, #1
 8006b16:	2104      	movs	r1, #4
 8006b18:	2000      	movs	r0, #0
 8006b1a:	f7ff fe97 	bl	800684c <EEPROM_Write>
    }
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <EEPROM_Read_VolumeSettings>:

void EEPROM_Read_VolumeSettings(encoder_t *encoderVolFront, encoder_t *encoderVolBack)
    {
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
	EEPROM_Read(PAGE_1, Byte_0, (uint8_t*) &encoderVolFront->volumeMaster, sizeof(encoderVolFront->volumeMaster));
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	2301      	movs	r3, #1
 8006b34:	2100      	movs	r1, #0
 8006b36:	2001      	movs	r0, #1
 8006b38:	f7ff feee 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_1, (uint8_t*) &encoderVolFront->volumeLeftRight,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	2301      	movs	r3, #1
 8006b42:	2101      	movs	r1, #1
 8006b44:	2001      	movs	r0, #1
 8006b46:	f7ff fee7 	bl	8006918 <EEPROM_Read>
		sizeof(encoderVolFront->volumeLeftRight));
	EEPROM_Read(PAGE_1, Byte_2, (uint8_t*) &encoderVolFront->volumeRight, sizeof(encoderVolFront->volumeRight));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	1cda      	adds	r2, r3, #3
 8006b4e:	2301      	movs	r3, #1
 8006b50:	2102      	movs	r1, #2
 8006b52:	2001      	movs	r0, #1
 8006b54:	f7ff fee0 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_3, (uint8_t*) &encoderVolFront->volumeLeft, sizeof(encoderVolFront->volumeLeft));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	1c9a      	adds	r2, r3, #2
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	2103      	movs	r1, #3
 8006b60:	2001      	movs	r0, #1
 8006b62:	f7ff fed9 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_4, (uint8_t*) &encoderVolBack->volumeLeftRight,
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	2104      	movs	r1, #4
 8006b6e:	2001      	movs	r0, #1
 8006b70:	f7ff fed2 	bl	8006918 <EEPROM_Read>
		sizeof(encoderVolBack->volumeLeftRight));
	EEPROM_Read(PAGE_1, Byte_5, (uint8_t*) &encoderVolBack->volumeRight, sizeof(encoderVolBack->volumeRight));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	1cda      	adds	r2, r3, #3
 8006b78:	2301      	movs	r3, #1
 8006b7a:	2105      	movs	r1, #5
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7ff fecb 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_6, (uint8_t*) &encoderVolBack->volumeLeft, sizeof(encoderVolBack->volumeLeft));
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	1c9a      	adds	r2, r3, #2
 8006b86:	2301      	movs	r3, #1
 8006b88:	2106      	movs	r1, #6
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	f7ff fec4 	bl	8006918 <EEPROM_Read>
    }
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <EEPROM_Save_VolumeSettings>:

void EEPROM_Save_VolumeSettings(encoder_t *encoderVolFront, encoder_t *encoderVolBack)
    {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	EEPROM_PageErase(PAGE_1);
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	f7ff ff1a 	bl	80069dc <EEPROM_PageErase>

	EEPROM_Write(PAGE_1, Byte_0, (uint8_t*) &encoderVolFront->volumeMaster, 1);
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	2301      	movs	r3, #1
 8006bac:	2100      	movs	r1, #0
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f7ff fe4c 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_1, (uint8_t*) &encoderVolFront->volumeLeftRight, 1);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	2301      	movs	r3, #1
 8006bba:	2101      	movs	r1, #1
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f7ff fe45 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_2, (uint8_t*) &encoderVolFront->volumeRight, 1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	1cda      	adds	r2, r3, #3
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	2102      	movs	r1, #2
 8006bca:	2001      	movs	r0, #1
 8006bcc:	f7ff fe3e 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_3, (uint8_t*) &encoderVolFront->volumeLeft, 1);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	1c9a      	adds	r2, r3, #2
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f7ff fe37 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_4, (uint8_t*) &encoderVolBack->volumeLeftRight, 1);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	2301      	movs	r3, #1
 8006be4:	2104      	movs	r1, #4
 8006be6:	2001      	movs	r0, #1
 8006be8:	f7ff fe30 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_5, (uint8_t*) &encoderVolBack->volumeRight, 1);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	1cda      	adds	r2, r3, #3
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	2105      	movs	r1, #5
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	f7ff fe29 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_6, (uint8_t*) &encoderVolBack->volumeLeft, 1);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	1c9a      	adds	r2, r3, #2
 8006bfe:	2301      	movs	r3, #1
 8006c00:	2106      	movs	r1, #6
 8006c02:	2001      	movs	r0, #1
 8006c04:	f7ff fe22 	bl	800684c <EEPROM_Write>
    }
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <EEPROM_Read_FilterSettings>:

void EEPROM_Read_FilterSettings(encoderFilter_t *encoderFilterTreble, encoderFilter_t *encoderFilterMiddle,
	encoderFilter_t *encoderFilterBass, encoderFilter_t *encoderFilterLoudness)
    {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
	EEPROM_Read(PAGE_2, Byte_0, (uint8_t*) &encoderFilterTreble->gain, 1);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	2301      	movs	r3, #1
 8006c24:	2100      	movs	r1, #0
 8006c26:	2002      	movs	r0, #2
 8006c28:	f7ff fe76 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_1, (uint8_t*) &encoderFilterTreble->centerFreq, 1);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	1c9a      	adds	r2, r3, #2
 8006c30:	2301      	movs	r3, #1
 8006c32:	2101      	movs	r1, #1
 8006c34:	2002      	movs	r0, #2
 8006c36:	f7ff fe6f 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_2, (uint8_t*) &encoderFilterMiddle->gain, 1);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	2301      	movs	r3, #1
 8006c40:	2102      	movs	r1, #2
 8006c42:	2002      	movs	r0, #2
 8006c44:	f7ff fe68 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_3, (uint8_t*) &encoderFilterMiddle->centerFreq, 1);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	1c9a      	adds	r2, r3, #2
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	2103      	movs	r1, #3
 8006c50:	2002      	movs	r0, #2
 8006c52:	f7ff fe61 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_4, (uint8_t*) &encoderFilterBass->gain, 1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	2104      	movs	r1, #4
 8006c5e:	2002      	movs	r0, #2
 8006c60:	f7ff fe5a 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_5, (uint8_t*) &encoderFilterBass->centerFreq, 1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	1c9a      	adds	r2, r3, #2
 8006c68:	2301      	movs	r3, #1
 8006c6a:	2105      	movs	r1, #5
 8006c6c:	2002      	movs	r0, #2
 8006c6e:	f7ff fe53 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_6, (uint8_t*) &encoderFilterLoudness->gain, 1);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	2301      	movs	r3, #1
 8006c78:	2106      	movs	r1, #6
 8006c7a:	2002      	movs	r0, #2
 8006c7c:	f7ff fe4c 	bl	8006918 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_6, (uint8_t*) &encoderFilterLoudness->centerFreq, 1);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	1c9a      	adds	r2, r3, #2
 8006c84:	2301      	movs	r3, #1
 8006c86:	2106      	movs	r1, #6
 8006c88:	2002      	movs	r0, #2
 8006c8a:	f7ff fe45 	bl	8006918 <EEPROM_Read>
    }
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <EEPROM_Save_FilterSettings>:

void EEPROM_Save_FilterSettings(encoderFilter_t *encoderFilterTreble, encoderFilter_t *encoderFilterMiddle,
	encoderFilter_t *encoderFilterBass, encoderFilter_t *encoderFilterLoudness)
    {
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	603b      	str	r3, [r7, #0]
	EEPROM_PageErase(PAGE_2);
 8006ca4:	2002      	movs	r0, #2
 8006ca6:	f7ff fe99 	bl	80069dc <EEPROM_PageErase>

	EEPROM_Write(PAGE_2, Byte_0, (uint8_t*) &encoderFilterTreble->gain, sizeof(encoderFilterTreble->gain));
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	2301      	movs	r3, #1
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	2002      	movs	r0, #2
 8006cb4:	f7ff fdca 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_1, (uint8_t*) &encoderFilterTreble->centerFreq,
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	1c9a      	adds	r2, r3, #2
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	2002      	movs	r0, #2
 8006cc2:	f7ff fdc3 	bl	800684c <EEPROM_Write>
		sizeof(encoderFilterTreble->centerFreq));
	EEPROM_Write(PAGE_2, Byte_2, (uint8_t*) &encoderFilterMiddle->gain, sizeof(encoderFilterMiddle->gain));
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	2301      	movs	r3, #1
 8006ccc:	2102      	movs	r1, #2
 8006cce:	2002      	movs	r0, #2
 8006cd0:	f7ff fdbc 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_3, (uint8_t*) &encoderFilterMiddle->centerFreq,
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	1c9a      	adds	r2, r3, #2
 8006cd8:	2301      	movs	r3, #1
 8006cda:	2103      	movs	r1, #3
 8006cdc:	2002      	movs	r0, #2
 8006cde:	f7ff fdb5 	bl	800684c <EEPROM_Write>
		sizeof(encoderFilterMiddle->centerFreq));
	EEPROM_Write(PAGE_2, Byte_4, (uint8_t*) &encoderFilterBass->gain, sizeof(encoderFilterBass->gain));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	2104      	movs	r1, #4
 8006cea:	2002      	movs	r0, #2
 8006cec:	f7ff fdae 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_5, (uint8_t*) &encoderFilterBass->centerFreq, sizeof(encoderFilterBass->centerFreq));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	1c9a      	adds	r2, r3, #2
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	2105      	movs	r1, #5
 8006cf8:	2002      	movs	r0, #2
 8006cfa:	f7ff fda7 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_6, (uint8_t*) &encoderFilterLoudness->gain, sizeof(encoderFilterLoudness->gain));
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	2301      	movs	r3, #1
 8006d04:	2106      	movs	r1, #6
 8006d06:	2002      	movs	r0, #2
 8006d08:	f7ff fda0 	bl	800684c <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_7, (uint8_t*) &encoderFilterLoudness->centerFreq,
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	1c9a      	adds	r2, r3, #2
 8006d10:	2301      	movs	r3, #1
 8006d12:	2107      	movs	r1, #7
 8006d14:	2002      	movs	r0, #2
 8006d16:	f7ff fd99 	bl	800684c <EEPROM_Write>
		sizeof(encoderFilterLoudness->centerFreq));
    }
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <read_user_settings_on_init>:



void read_user_settings_on_init(void)
    {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
	 EEPROM_Read_UserSetting(&savedUserSettings);
 8006d28:	4807      	ldr	r0, [pc, #28]	; (8006d48 <read_user_settings_on_init+0x24>)
 8006d2a:	f7ff fe7f 	bl	8006a2c <EEPROM_Read_UserSetting>
	 EEPROM_Save_VolumeSettings(&encoderVolFront, &encoderVolBack);
 8006d2e:	4907      	ldr	r1, [pc, #28]	; (8006d4c <read_user_settings_on_init+0x28>)
 8006d30:	4807      	ldr	r0, [pc, #28]	; (8006d50 <read_user_settings_on_init+0x2c>)
 8006d32:	f7ff ff31 	bl	8006b98 <EEPROM_Save_VolumeSettings>
	 EEPROM_Save_FilterSettings(&encoderFilterTreble, &encoderFilterMiddle, &encoderFilterBass, &encoderFilterLoudness);
 8006d36:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <read_user_settings_on_init+0x30>)
 8006d38:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <read_user_settings_on_init+0x34>)
 8006d3a:	4908      	ldr	r1, [pc, #32]	; (8006d5c <read_user_settings_on_init+0x38>)
 8006d3c:	4808      	ldr	r0, [pc, #32]	; (8006d60 <read_user_settings_on_init+0x3c>)
 8006d3e:	f7ff ffaa 	bl	8006c96 <EEPROM_Save_FilterSettings>
    }
 8006d42:	bf00      	nop
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000520 	.word	0x20000520
 8006d4c:	20000518 	.word	0x20000518
 8006d50:	20000554 	.word	0x20000554
 8006d54:	2000053c 	.word	0x2000053c
 8006d58:	20000534 	.word	0x20000534
 8006d5c:	20000510 	.word	0x20000510
 8006d60:	2000052c 	.word	0x2000052c

08006d64 <encoders_init>:



// Is called only when system starts
void encoders_init(void)
    {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8006d68:	213c      	movs	r1, #60	; 0x3c
 8006d6a:	480a      	ldr	r0, [pc, #40]	; (8006d94 <encoders_init+0x30>)
 8006d6c:	f00d fb56 	bl	801441c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8006d70:	213c      	movs	r1, #60	; 0x3c
 8006d72:	4809      	ldr	r0, [pc, #36]	; (8006d98 <encoders_init+0x34>)
 8006d74:	f00d fb52 	bl	801441c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8006d78:	213c      	movs	r1, #60	; 0x3c
 8006d7a:	4808      	ldr	r0, [pc, #32]	; (8006d9c <encoders_init+0x38>)
 8006d7c:	f00d fb4e 	bl	801441c <HAL_TIM_Encoder_Start_IT>
//	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8006d80:	213c      	movs	r1, #60	; 0x3c
 8006d82:	4807      	ldr	r0, [pc, #28]	; (8006da0 <encoders_init+0x3c>)
 8006d84:	f00d fb4a 	bl	801441c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8006d88:	213c      	movs	r1, #60	; 0x3c
 8006d8a:	4806      	ldr	r0, [pc, #24]	; (8006da4 <encoders_init+0x40>)
 8006d8c:	f00d fb46 	bl	801441c <HAL_TIM_Encoder_Start_IT>
    }
 8006d90:	bf00      	nop
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20007b34 	.word	0x20007b34
 8006d98:	20007b80 	.word	0x20007b80
 8006d9c:	20007a9c 	.word	0x20007a9c
 8006da0:	20007a50 	.word	0x20007a50
 8006da4:	20007920 	.word	0x20007920

08006da8 <volume_front_encoder_used>:

//
void volume_front_encoder_used(void)
    {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_VOLUME_FRONT);
 8006dac:	201e      	movs	r0, #30
 8006dae:	f7fe ffc9 	bl	8005d44 <save_current_display_state>
	refresh_timer_state();
 8006db2:	f7ff f86b 	bl	8005e8c <refresh_timer_state>

	switch (encoderVolFront.audioOutputState)
 8006db6:	4b3f      	ldr	r3, [pc, #252]	; (8006eb4 <volume_front_encoder_used+0x10c>)
 8006db8:	799b      	ldrb	r3, [r3, #6]
 8006dba:	2b06      	cmp	r3, #6
 8006dbc:	d877      	bhi.n	8006eae <volume_front_encoder_used+0x106>
 8006dbe:	a201      	add	r2, pc, #4	; (adr r2, 8006dc4 <volume_front_encoder_used+0x1c>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	08006eaf 	.word	0x08006eaf
 8006dcc:	08006e1f 	.word	0x08006e1f
 8006dd0:	08006e5d 	.word	0x08006e5d
 8006dd4:	08006eaf 	.word	0x08006eaf
 8006dd8:	08006e7b 	.word	0x08006e7b
 8006ddc:	08006e95 	.word	0x08006e95
	    {
	    case MASTER:
		Check_Volume_Range_Front(&encoderVolFront.volumeMaster, 94);
 8006de0:	215e      	movs	r1, #94	; 0x5e
 8006de2:	4834      	ldr	r0, [pc, #208]	; (8006eb4 <volume_front_encoder_used+0x10c>)
 8006de4:	f004 fc22 	bl	800b62c <Check_Volume_Range_Front>
		if (encoderVolFront.volumeMaster >= 80)
 8006de8:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <volume_front_encoder_used+0x10c>)
 8006dea:	f993 3000 	ldrsb.w	r3, [r3]
 8006dee:	2b4f      	cmp	r3, #79	; 0x4f
 8006df0:	dd03      	ble.n	8006dfa <volume_front_encoder_used+0x52>
		    volumeMasterFlag = 1;
 8006df2:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <volume_front_encoder_used+0x110>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e002      	b.n	8006e00 <volume_front_encoder_used+0x58>
		else
		    volumeMasterFlag = 0;
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <volume_front_encoder_used+0x110>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	701a      	strb	r2, [r3, #0]
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackRight);
 8006e00:	4b2e      	ldr	r3, [pc, #184]	; (8006ebc <volume_front_encoder_used+0x114>)
 8006e02:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006e06:	4b2e      	ldr	r3, [pc, #184]	; (8006ec0 <volume_front_encoder_used+0x118>)
 8006e08:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006e0c:	4b2d      	ldr	r3, [pc, #180]	; (8006ec4 <volume_front_encoder_used+0x11c>)
 8006e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e12:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <volume_front_encoder_used+0x120>)
 8006e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e18:	f004 fb8e 	bl	800b538 <TDA7719_SetVolume_Master>
		break;
 8006e1c:	e048      	b.n	8006eb0 <volume_front_encoder_used+0x108>
	    case MUTE:
		//jak wyłącze przerwanie on enkodera to teraz nie bedzie tutaj kod wchodził
		//więc może jakieś zerowanie rejestru CNT.
		break;
	    case MASTER_V2:
		Check_Volume_Range_Front(&encoderVolFront.volumeMaster, 94);
 8006e1e:	215e      	movs	r1, #94	; 0x5e
 8006e20:	4824      	ldr	r0, [pc, #144]	; (8006eb4 <volume_front_encoder_used+0x10c>)
 8006e22:	f004 fc03 	bl	800b62c <Check_Volume_Range_Front>
		if (encoderVolFront.volumeMaster >= 80)
 8006e26:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <volume_front_encoder_used+0x10c>)
 8006e28:	f993 3000 	ldrsb.w	r3, [r3]
 8006e2c:	2b4f      	cmp	r3, #79	; 0x4f
 8006e2e:	dd03      	ble.n	8006e38 <volume_front_encoder_used+0x90>
		    volumeMasterFlag = 1;
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <volume_front_encoder_used+0x110>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	e002      	b.n	8006e3e <volume_front_encoder_used+0x96>
		else
		    volumeMasterFlag = 0;
 8006e38:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <volume_front_encoder_used+0x110>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	701a      	strb	r2, [r3, #0]
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackRight);
 8006e3e:	4b1f      	ldr	r3, [pc, #124]	; (8006ebc <volume_front_encoder_used+0x114>)
 8006e40:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006e44:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <volume_front_encoder_used+0x118>)
 8006e46:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006e4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <volume_front_encoder_used+0x11c>)
 8006e4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006e50:	4b1d      	ldr	r3, [pc, #116]	; (8006ec8 <volume_front_encoder_used+0x120>)
 8006e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e56:	f004 fb6f 	bl	800b538 <TDA7719_SetVolume_Master>
		break;
 8006e5a:	e029      	b.n	8006eb0 <volume_front_encoder_used+0x108>
	    case NORMAL:
		Check_Volume_Range_Front(&encoderVolFront.volumeLeftRight, 79);
 8006e5c:	214f      	movs	r1, #79	; 0x4f
 8006e5e:	481b      	ldr	r0, [pc, #108]	; (8006ecc <volume_front_encoder_used+0x124>)
 8006e60:	f004 fbe4 	bl	800b62c <Check_Volume_Range_Front>
		TDA7719_SetVolumeFront_LeftRight(tempVolFrontLeft, tempVolFrontRight);
 8006e64:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <volume_front_encoder_used+0x114>)
 8006e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e6a:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <volume_front_encoder_used+0x118>)
 8006e6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006e70:	4611      	mov	r1, r2
 8006e72:	4618      	mov	r0, r3
 8006e74:	f004 fbae 	bl	800b5d4 <TDA7719_SetVolumeFront_LeftRight>
		break;
 8006e78:	e01a      	b.n	8006eb0 <volume_front_encoder_used+0x108>
	    case ATTE_LEFT:
		Check_Volume_Range_Front(&encoderVolFront.volumeLeft, 79);
 8006e7a:	214f      	movs	r1, #79	; 0x4f
 8006e7c:	4814      	ldr	r0, [pc, #80]	; (8006ed0 <volume_front_encoder_used+0x128>)
 8006e7e:	f004 fbd5 	bl	800b62c <Check_Volume_Range_Front>
		TDA7719_SetVolume_LeftFront(tempVolFrontLeft, 0); //0 - 79
 8006e82:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <volume_front_encoder_used+0x114>)
 8006e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fcc3 	bl	8008818 <TDA7719_SetVolume_LeftFront>
		break;
 8006e92:	e00d      	b.n	8006eb0 <volume_front_encoder_used+0x108>
	    case ATTE_RIGHT:
		Check_Volume_Range_Front(&encoderVolFront.volumeRight, 79);
 8006e94:	214f      	movs	r1, #79	; 0x4f
 8006e96:	480f      	ldr	r0, [pc, #60]	; (8006ed4 <volume_front_encoder_used+0x12c>)
 8006e98:	f004 fbc8 	bl	800b62c <Check_Volume_Range_Front>
		TDA7719_SetVolume_RightFront(tempVolFrontRight, 0);
 8006e9c:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <volume_front_encoder_used+0x118>)
 8006e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ea2:	b25b      	sxtb	r3, r3
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f001 fcf0 	bl	800888c <TDA7719_SetVolume_RightFront>
		break;
 8006eac:	e000      	b.n	8006eb0 <volume_front_encoder_used+0x108>
	    default:
		break;
 8006eae:	bf00      	nop
	    }
    }
 8006eb0:	bf00      	nop
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000554 	.word	0x20000554
 8006eb8:	20000450 	.word	0x20000450
 8006ebc:	20000468 	.word	0x20000468
 8006ec0:	20000246 	.word	0x20000246
 8006ec4:	200002b0 	.word	0x200002b0
 8006ec8:	2000046a 	.word	0x2000046a
 8006ecc:	20000555 	.word	0x20000555
 8006ed0:	20000556 	.word	0x20000556
 8006ed4:	20000557 	.word	0x20000557

08006ed8 <volume_back_encoder_used>:

//
void volume_back_encoder_used(void)
    {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_VOLUME_BACK);
 8006edc:	201f      	movs	r0, #31
 8006ede:	f7fe ff31 	bl	8005d44 <save_current_display_state>
	refresh_timer_state();
 8006ee2:	f7fe ffd3 	bl	8005e8c <refresh_timer_state>
	//dodać też to kiedy wciśnięty będzie przycisk
	switch (encoderVolBack.audioOutputState)
 8006ee6:	4b28      	ldr	r3, [pc, #160]	; (8006f88 <volume_back_encoder_used+0xb0>)
 8006ee8:	799b      	ldrb	r3, [r3, #6]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d847      	bhi.n	8006f80 <volume_back_encoder_used+0xa8>
 8006ef0:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <volume_back_encoder_used+0x20>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f2f 	.word	0x08006f2f
 8006f08:	08006f4d 	.word	0x08006f4d
 8006f0c:	08006f67 	.word	0x08006f67
	    {
	    case NORMAL:
		Check_Volume_Range_Back(&encoderVolBack.volumeLeftRight, 79);
 8006f10:	214f      	movs	r1, #79	; 0x4f
 8006f12:	481e      	ldr	r0, [pc, #120]	; (8006f8c <volume_back_encoder_used+0xb4>)
 8006f14:	f004 fc0e 	bl	800b734 <Check_Volume_Range_Back>
		TDA7719_SetVolumeBack_LeftRight(tempVolBackLeft, tempVolBackRight);
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <volume_back_encoder_used+0xb8>)
 8006f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <volume_back_encoder_used+0xbc>)
 8006f20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f004 fbd8 	bl	800b6dc <TDA7719_SetVolumeBack_LeftRight>
		break;
 8006f2c:	e029      	b.n	8006f82 <volume_back_encoder_used+0xaa>
	    case MUTE:
		//no action for encoder
		break;
	    case NORMAL_V2:
		Check_Volume_Range_Back(&encoderVolBack.volumeLeftRight, 79);
 8006f2e:	214f      	movs	r1, #79	; 0x4f
 8006f30:	4816      	ldr	r0, [pc, #88]	; (8006f8c <volume_back_encoder_used+0xb4>)
 8006f32:	f004 fbff 	bl	800b734 <Check_Volume_Range_Back>
		TDA7719_SetVolumeBack_LeftRight(tempVolBackLeft, tempVolBackRight);
 8006f36:	4b16      	ldr	r3, [pc, #88]	; (8006f90 <volume_back_encoder_used+0xb8>)
 8006f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f3c:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <volume_back_encoder_used+0xbc>)
 8006f3e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f004 fbc9 	bl	800b6dc <TDA7719_SetVolumeBack_LeftRight>
		break;
 8006f4a:	e01a      	b.n	8006f82 <volume_back_encoder_used+0xaa>
	    case ATTE_LEFT:
		Check_Volume_Range_Back(&encoderVolBack.volumeLeft, 79);
 8006f4c:	214f      	movs	r1, #79	; 0x4f
 8006f4e:	4812      	ldr	r0, [pc, #72]	; (8006f98 <volume_back_encoder_used+0xc0>)
 8006f50:	f004 fbf0 	bl	800b734 <Check_Volume_Range_Back>
		TDA7719_SetVolume_LeftRear(tempVolBackLeft, 0);
 8006f54:	4b0e      	ldr	r3, [pc, #56]	; (8006f90 <volume_back_encoder_used+0xb8>)
 8006f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f5a:	b25b      	sxtb	r3, r3
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fcce 	bl	8008900 <TDA7719_SetVolume_LeftRear>
		break;
 8006f64:	e00d      	b.n	8006f82 <volume_back_encoder_used+0xaa>
	    case ATTE_RIGHT:
		Check_Volume_Range_Back(&encoderVolBack.volumeRight, 79);
 8006f66:	214f      	movs	r1, #79	; 0x4f
 8006f68:	480c      	ldr	r0, [pc, #48]	; (8006f9c <volume_back_encoder_used+0xc4>)
 8006f6a:	f004 fbe3 	bl	800b734 <Check_Volume_Range_Back>
		TDA7719_SetVolume_RightRear(tempVolBackLeft, 0);
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <volume_back_encoder_used+0xb8>)
 8006f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 fcfb 	bl	8008974 <TDA7719_SetVolume_RightRear>
		break;
 8006f7e:	e000      	b.n	8006f82 <volume_back_encoder_used+0xaa>
	    default:
		break;
 8006f80:	bf00      	nop
	    }
    }
 8006f82:	bf00      	nop
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000518 	.word	0x20000518
 8006f8c:	20000519 	.word	0x20000519
 8006f90:	200002b0 	.word	0x200002b0
 8006f94:	2000046a 	.word	0x2000046a
 8006f98:	2000051a 	.word	0x2000051a
 8006f9c:	2000051b 	.word	0x2000051b

08006fa0 <loudness_encoder_used>:

//
void loudness_encoder_used(void)
    {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_LOUDNESS);
 8006fa4:	2020      	movs	r0, #32
 8006fa6:	f7fe fecd 	bl	8005d44 <save_current_display_state>
	refresh_timer_state();
 8006faa:	f7fe ff6f 	bl	8005e8c <refresh_timer_state>

	switch (encoderFilterLoudness.buttonControl)
 8006fae:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <loudness_encoder_used+0x84>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d81e      	bhi.n	8006ff4 <loudness_encoder_used+0x54>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <loudness_encoder_used+0x1c>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fd7 	.word	0x08006fd7
 8006fc4:	08006fe1 	.word	0x08006fe1
 8006fc8:	08006feb 	.word	0x08006feb
	    {
	    case SET_GAIN:
		Check_Loudness_Param_Range(&encoderFilterLoudness.gain, 15);
 8006fcc:	210f      	movs	r1, #15
 8006fce:	4816      	ldr	r0, [pc, #88]	; (8007028 <loudness_encoder_used+0x88>)
 8006fd0:	f004 fc08 	bl	800b7e4 <Check_Loudness_Param_Range>
		break;
 8006fd4:	e012      	b.n	8006ffc <loudness_encoder_used+0x5c>
	    case SET_CENTER_FREQ:
		Check_Loudness_Param_Range(&encoderFilterLoudness.centerFreq, 3);
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	4814      	ldr	r0, [pc, #80]	; (800702c <loudness_encoder_used+0x8c>)
 8006fda:	f004 fc03 	bl	800b7e4 <Check_Loudness_Param_Range>
		break;
 8006fde:	e00d      	b.n	8006ffc <loudness_encoder_used+0x5c>
	    case SET_SOFT_STEP:
		Check_Loudness_Param_Range(&encoderFilterLoudness.soft_step, 1);
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	4813      	ldr	r0, [pc, #76]	; (8007030 <loudness_encoder_used+0x90>)
 8006fe4:	f004 fbfe 	bl	800b7e4 <Check_Loudness_Param_Range>
		break;
 8006fe8:	e008      	b.n	8006ffc <loudness_encoder_used+0x5c>
	    case SET_HIGH_BOOST:
		Check_Loudness_Param_Range(&encoderFilterLoudness.high_boost, 1);
 8006fea:	2101      	movs	r1, #1
 8006fec:	4811      	ldr	r0, [pc, #68]	; (8007034 <loudness_encoder_used+0x94>)
 8006fee:	f004 fbf9 	bl	800b7e4 <Check_Loudness_Param_Range>
		break;
 8006ff2:	e003      	b.n	8006ffc <loudness_encoder_used+0x5c>
	    default:
		encoderFilterLoudness.buttonControl = SET_GAIN;
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <loudness_encoder_used+0x84>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
		break;
 8006ffa:	bf00      	nop
	    }
	TDA7719_SetLoudness(encoderFilterLoudness.gain, encoderFilterLoudness.centerFreq,
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <loudness_encoder_used+0x84>)
 8006ffe:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8007002:	4b08      	ldr	r3, [pc, #32]	; (8007024 <loudness_encoder_used+0x84>)
 8007004:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8007008:	b2d9      	uxtb	r1, r3
		encoderFilterLoudness.high_boost, encoderFilterLoudness.soft_step);
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <loudness_encoder_used+0x84>)
 800700c:	f993 3004 	ldrsb.w	r3, [r3, #4]
	TDA7719_SetLoudness(encoderFilterLoudness.gain, encoderFilterLoudness.centerFreq,
 8007010:	b2da      	uxtb	r2, r3
		encoderFilterLoudness.high_boost, encoderFilterLoudness.soft_step);
 8007012:	4b04      	ldr	r3, [pc, #16]	; (8007024 <loudness_encoder_used+0x84>)
 8007014:	f993 3003 	ldrsb.w	r3, [r3, #3]
	TDA7719_SetLoudness(encoderFilterLoudness.gain, encoderFilterLoudness.centerFreq,
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f000 ffff 	bl	800801c <TDA7719_SetLoudness>
    }
 800701e:	bf00      	nop
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	2000053c 	.word	0x2000053c
 8007028:	2000053d 	.word	0x2000053d
 800702c:	2000053e 	.word	0x2000053e
 8007030:	2000053f 	.word	0x2000053f
 8007034:	20000540 	.word	0x20000540

08007038 <bass_encoder_used>:

//
void bass_encoder_used(void)
    {
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_BASS);
 800703c:	2023      	movs	r0, #35	; 0x23
 800703e:	f7fe fe81 	bl	8005d44 <save_current_display_state>
	refresh_timer_state();
 8007042:	f7fe ff23 	bl	8005e8c <refresh_timer_state>

	switch (encoderFilterBass.buttonControl)
 8007046:	4b19      	ldr	r3, [pc, #100]	; (80070ac <bass_encoder_used+0x74>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d010      	beq.n	8007070 <bass_encoder_used+0x38>
 800704e:	2b02      	cmp	r3, #2
 8007050:	dc13      	bgt.n	800707a <bass_encoder_used+0x42>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <bass_encoder_used+0x24>
 8007056:	2b01      	cmp	r3, #1
 8007058:	d005      	beq.n	8007066 <bass_encoder_used+0x2e>
 800705a:	e00e      	b.n	800707a <bass_encoder_used+0x42>
	    {
	    case SET_GAIN:
		Check_Bass_Param_Range(&encoderFilterBass.gain, 30);
 800705c:	211e      	movs	r1, #30
 800705e:	4814      	ldr	r0, [pc, #80]	; (80070b0 <bass_encoder_used+0x78>)
 8007060:	f004 fc18 	bl	800b894 <Check_Bass_Param_Range>
		break;
 8007064:	e00d      	b.n	8007082 <bass_encoder_used+0x4a>
	    case SET_CENTER_FREQ:
		Check_Bass_Param_Range(&encoderFilterBass.centerFreq, 3);
 8007066:	2103      	movs	r1, #3
 8007068:	4812      	ldr	r0, [pc, #72]	; (80070b4 <bass_encoder_used+0x7c>)
 800706a:	f004 fc13 	bl	800b894 <Check_Bass_Param_Range>
		break;
 800706e:	e008      	b.n	8007082 <bass_encoder_used+0x4a>
	    case SET_SOFT_STEP:
		Check_Bass_Param_Range(&encoderFilterBass.soft_step, 1);
 8007070:	2101      	movs	r1, #1
 8007072:	4811      	ldr	r0, [pc, #68]	; (80070b8 <bass_encoder_used+0x80>)
 8007074:	f004 fc0e 	bl	800b894 <Check_Bass_Param_Range>
		break;
 8007078:	e003      	b.n	8007082 <bass_encoder_used+0x4a>
	    default:
		encoderFilterBass.buttonControl = SET_GAIN;
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <bass_encoder_used+0x74>)
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
		break;
 8007080:	bf00      	nop
	    }
	TDA7719_SetBass(encoderFilterBass.gain - 16, encoderFilterBass.centerFreq, encoderFilterBass.soft_step);
 8007082:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <bass_encoder_used+0x74>)
 8007084:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	3b10      	subs	r3, #16
 800708c:	b2db      	uxtb	r3, r3
 800708e:	b25b      	sxtb	r3, r3
 8007090:	4a06      	ldr	r2, [pc, #24]	; (80070ac <bass_encoder_used+0x74>)
 8007092:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8007096:	b2d1      	uxtb	r1, r2
 8007098:	4a04      	ldr	r2, [pc, #16]	; (80070ac <bass_encoder_used+0x74>)
 800709a:	f992 2003 	ldrsb.w	r2, [r2, #3]
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fad1 	bl	8008648 <TDA7719_SetBass>
    }
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000534 	.word	0x20000534
 80070b0:	20000535 	.word	0x20000535
 80070b4:	20000536 	.word	0x20000536
 80070b8:	20000537 	.word	0x20000537

080070bc <middle_encoder_used>:

//
void middle_encoder_used(void)
    {
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_MIDDLE);
 80070c0:	2022      	movs	r0, #34	; 0x22
 80070c2:	f7fe fe3f 	bl	8005d44 <save_current_display_state>
	refresh_timer_state();
 80070c6:	f7fe fee1 	bl	8005e8c <refresh_timer_state>
	switch (encoderFilterMiddle.buttonControl)
 80070ca:	4b17      	ldr	r3, [pc, #92]	; (8007128 <middle_encoder_used+0x6c>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d010      	beq.n	80070f4 <middle_encoder_used+0x38>
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	dc13      	bgt.n	80070fe <middle_encoder_used+0x42>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <middle_encoder_used+0x24>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d005      	beq.n	80070ea <middle_encoder_used+0x2e>
		break;
	    case SET_SOFT_STEP:
		Check_Middle_Param_Range(&encoderFilterMiddle.soft_step, 1);
		break;
	    default:
		break;
 80070de:	e00e      	b.n	80070fe <middle_encoder_used+0x42>
		Check_Middle_Param_Range(&encoderFilterMiddle.gain, 30);
 80070e0:	211e      	movs	r1, #30
 80070e2:	4812      	ldr	r0, [pc, #72]	; (800712c <middle_encoder_used+0x70>)
 80070e4:	f004 fc2e 	bl	800b944 <Check_Middle_Param_Range>
		break;
 80070e8:	e00a      	b.n	8007100 <middle_encoder_used+0x44>
		Check_Middle_Param_Range(&encoderFilterMiddle.centerFreq, 3);
 80070ea:	2103      	movs	r1, #3
 80070ec:	4810      	ldr	r0, [pc, #64]	; (8007130 <middle_encoder_used+0x74>)
 80070ee:	f004 fc29 	bl	800b944 <Check_Middle_Param_Range>
		break;
 80070f2:	e005      	b.n	8007100 <middle_encoder_used+0x44>
		Check_Middle_Param_Range(&encoderFilterMiddle.soft_step, 1);
 80070f4:	2101      	movs	r1, #1
 80070f6:	480f      	ldr	r0, [pc, #60]	; (8007134 <middle_encoder_used+0x78>)
 80070f8:	f004 fc24 	bl	800b944 <Check_Middle_Param_Range>
		break;
 80070fc:	e000      	b.n	8007100 <middle_encoder_used+0x44>
		break;
 80070fe:	bf00      	nop
	    }
	TDA7719_SetMiddle(encoderFilterMiddle.gain - 16, encoderFilterMiddle.centerFreq, encoderFilterMiddle.soft_step);
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <middle_encoder_used+0x6c>)
 8007102:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	3b10      	subs	r3, #16
 800710a:	b2db      	uxtb	r3, r3
 800710c:	b25b      	sxtb	r3, r3
 800710e:	4a06      	ldr	r2, [pc, #24]	; (8007128 <middle_encoder_used+0x6c>)
 8007110:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8007114:	b2d1      	uxtb	r1, r2
 8007116:	4a04      	ldr	r2, [pc, #16]	; (8007128 <middle_encoder_used+0x6c>)
 8007118:	f992 2003 	ldrsb.w	r2, [r2, #3]
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f9aa 	bl	8008478 <TDA7719_SetMiddle>
    }
 8007124:	bf00      	nop
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000510 	.word	0x20000510
 800712c:	20000511 	.word	0x20000511
 8007130:	20000512 	.word	0x20000512
 8007134:	20000513 	.word	0x20000513

08007138 <treble_encoder_used>:

//
void treble_encoder_used(void)
    {
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_TREBLE);
 800713c:	2021      	movs	r0, #33	; 0x21
 800713e:	f7fe fe01 	bl	8005d44 <save_current_display_state>
	refresh_timer_state();
 8007142:	f7fe fea3 	bl	8005e8c <refresh_timer_state>

	switch (encoderFilterTreble.buttonControl)
 8007146:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <treble_encoder_used+0x6c>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d010      	beq.n	8007170 <treble_encoder_used+0x38>
 800714e:	2b02      	cmp	r3, #2
 8007150:	dc13      	bgt.n	800717a <treble_encoder_used+0x42>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <treble_encoder_used+0x24>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d005      	beq.n	8007166 <treble_encoder_used+0x2e>
		break;
	    case SET_SOFT_STEP:
		Check_Treble_Param_Range(&encoderFilterTreble.soft_step, 1);
		break;
	    default:
		break;
 800715a:	e00e      	b.n	800717a <treble_encoder_used+0x42>
		Check_Treble_Param_Range(&encoderFilterTreble.gain, 30);
 800715c:	211e      	movs	r1, #30
 800715e:	4812      	ldr	r0, [pc, #72]	; (80071a8 <treble_encoder_used+0x70>)
 8007160:	f004 fc48 	bl	800b9f4 <Check_Treble_Param_Range>
		break;
 8007164:	e00a      	b.n	800717c <treble_encoder_used+0x44>
		Check_Treble_Param_Range(&encoderFilterTreble.centerFreq, 3);
 8007166:	2103      	movs	r1, #3
 8007168:	4810      	ldr	r0, [pc, #64]	; (80071ac <treble_encoder_used+0x74>)
 800716a:	f004 fc43 	bl	800b9f4 <Check_Treble_Param_Range>
		break;
 800716e:	e005      	b.n	800717c <treble_encoder_used+0x44>
		Check_Treble_Param_Range(&encoderFilterTreble.soft_step, 1);
 8007170:	2101      	movs	r1, #1
 8007172:	480f      	ldr	r0, [pc, #60]	; (80071b0 <treble_encoder_used+0x78>)
 8007174:	f004 fc3e 	bl	800b9f4 <Check_Treble_Param_Range>
		break;
 8007178:	e000      	b.n	800717c <treble_encoder_used+0x44>
		break;
 800717a:	bf00      	nop
	    }
	TDA7719_SetTreble(encoderFilterTreble.gain - 16, encoderFilterTreble.centerFreq, encoderFilterTreble.soft_step);
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <treble_encoder_used+0x6c>)
 800717e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	3b10      	subs	r3, #16
 8007186:	b2db      	uxtb	r3, r3
 8007188:	b25b      	sxtb	r3, r3
 800718a:	4a06      	ldr	r2, [pc, #24]	; (80071a4 <treble_encoder_used+0x6c>)
 800718c:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8007190:	b2d1      	uxtb	r1, r2
 8007192:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <treble_encoder_used+0x6c>)
 8007194:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f001 f884 	bl	80082a8 <TDA7719_SetTreble>
    }
 80071a0:	bf00      	nop
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	2000052c 	.word	0x2000052c
 80071a8:	2000052d 	.word	0x2000052d
 80071ac:	2000052e 	.word	0x2000052e
 80071b0:	2000052f 	.word	0x2000052f

080071b4 <RDA5807_WriteAllRegs>:
// 0000 1100 0000 0000
// 1000 0100 1101 1011
// 0100 0000 0000 0000

void RDA5807_WriteAllRegs(void)
    {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af02      	add	r7, sp, #8
	uint8_t i;
	uint8_t x = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 12; i = i + 2)
 80071be:	2300      	movs	r3, #0
 80071c0:	71fb      	strb	r3, [r7, #7]
 80071c2:	e00e      	b.n	80071e2 <RDA5807_WriteAllRegs+0x2e>
	    {
		I2C_BUFF[i] = RDA5807M_WriteReg[x] >> 8;
 80071c4:	79bb      	ldrb	r3, [r7, #6]
 80071c6:	4a19      	ldr	r2, [pc, #100]	; (800722c <RDA5807_WriteAllRegs+0x78>)
 80071c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071cc:	0a1a      	lsrs	r2, r3, #8
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	b2d1      	uxtb	r1, r2
 80071d2:	4a17      	ldr	r2, [pc, #92]	; (8007230 <RDA5807_WriteAllRegs+0x7c>)
 80071d4:	54d1      	strb	r1, [r2, r3]
		x++;
 80071d6:	79bb      	ldrb	r3, [r7, #6]
 80071d8:	3301      	adds	r3, #1
 80071da:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 12; i = i + 2)
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	3302      	adds	r3, #2
 80071e0:	71fb      	strb	r3, [r7, #7]
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	2b0b      	cmp	r3, #11
 80071e6:	d9ed      	bls.n	80071c4 <RDA5807_WriteAllRegs+0x10>
	    }

	x = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	71bb      	strb	r3, [r7, #6]

	for (i = 1; i < 13; i = i + 2)
 80071ec:	2301      	movs	r3, #1
 80071ee:	71fb      	strb	r3, [r7, #7]
 80071f0:	e00d      	b.n	800720e <RDA5807_WriteAllRegs+0x5a>
	    {
		I2C_BUFF[i] = RDA5807M_WriteReg[x] & 0xFF;
 80071f2:	79bb      	ldrb	r3, [r7, #6]
 80071f4:	4a0d      	ldr	r2, [pc, #52]	; (800722c <RDA5807_WriteAllRegs+0x78>)
 80071f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	b2d1      	uxtb	r1, r2
 80071fe:	4a0c      	ldr	r2, [pc, #48]	; (8007230 <RDA5807_WriteAllRegs+0x7c>)
 8007200:	54d1      	strb	r1, [r2, r3]
		x++;
 8007202:	79bb      	ldrb	r3, [r7, #6]
 8007204:	3301      	adds	r3, #1
 8007206:	71bb      	strb	r3, [r7, #6]
	for (i = 1; i < 13; i = i + 2)
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	3302      	adds	r3, #2
 800720c:	71fb      	strb	r3, [r7, #7]
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d9ee      	bls.n	80071f2 <RDA5807_WriteAllRegs+0x3e>
	    }

	HAL_I2C_Master_Transmit(&hi2c2, RDASequential << 1, (void *)&I2C_BUFF, sizeof(I2C_BUFF),10);
 8007214:	230a      	movs	r3, #10
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	2310      	movs	r3, #16
 800721a:	4a05      	ldr	r2, [pc, #20]	; (8007230 <RDA5807_WriteAllRegs+0x7c>)
 800721c:	2120      	movs	r1, #32
 800721e:	4805      	ldr	r0, [pc, #20]	; (8007234 <RDA5807_WriteAllRegs+0x80>)
 8007220:	f008 fbca 	bl	800f9b8 <HAL_I2C_Master_Transmit>

    }
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	2000047c 	.word	0x2000047c
 8007230:	200004a4 	.word	0x200004a4
 8007234:	200006bc 	.word	0x200006bc

08007238 <RDA5807_Init>:

void RDA5807_Init(void)
    {
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < 6; i++)
 800723e:	2300      	movs	r3, #0
 8007240:	71fb      	strb	r3, [r7, #7]
 8007242:	e00a      	b.n	800725a <RDA5807_Init+0x22>
	    {
		RDA5807M_WriteReg[i] = RDA5807M_WriteRegDef[i];
 8007244:	79fa      	ldrb	r2, [r7, #7]
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	490b      	ldr	r1, [pc, #44]	; (8007278 <RDA5807_Init+0x40>)
 800724a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800724e:	490b      	ldr	r1, [pc, #44]	; (800727c <RDA5807_Init+0x44>)
 8007250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t i = 0; i < 6; i++)
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	3301      	adds	r3, #1
 8007258:	71fb      	strb	r3, [r7, #7]
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	2b05      	cmp	r3, #5
 800725e:	d9f1      	bls.n	8007244 <RDA5807_Init+0xc>
	    }
	RDA5807_Volume(StartingVolume);
 8007260:	2004      	movs	r0, #4
 8007262:	f000 f839 	bl	80072d8 <RDA5807_Volume>
	RDA5807_SetFrequency(DefaultFreq);
 8007266:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8007280 <RDA5807_Init+0x48>
 800726a:	f000 f871 	bl	8007350 <RDA5807_SetFrequency>
    }
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000094 	.word	0x20000094
 800727c:	2000047c 	.word	0x2000047c
 8007280:	42ae0000 	.word	0x42ae0000

08007284 <RDA5807_PowerOn>:

void RDA5807_PowerOn(void)
    {
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
	RDA5807M_WriteReg[1] = RDA5807M_WriteReg[1] | 0x0010;
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <RDA5807_PowerOn+0x34>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f043 0310 	orr.w	r3, r3, #16
 8007290:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <RDA5807_PowerOn+0x34>)
 8007292:	6053      	str	r3, [r2, #4]
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] | RDA_POWER;
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <RDA5807_PowerOn+0x34>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f043 0301 	orr.w	r3, r3, #1
 800729c:	4a06      	ldr	r2, [pc, #24]	; (80072b8 <RDA5807_PowerOn+0x34>)
 800729e:	6013      	str	r3, [r2, #0]
	RDA5807_WriteAllRegs();
 80072a0:	f7ff ff88 	bl	80071b4 <RDA5807_WriteAllRegs>
	RDA5807M_WriteReg[1] = RDA5807M_WriteReg[1] & 0xFFEF;	//Disable tune after PowerOn operation
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <RDA5807_PowerOn+0x34>)
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80072ac:	4013      	ands	r3, r2
 80072ae:	4a02      	ldr	r2, [pc, #8]	; (80072b8 <RDA5807_PowerOn+0x34>)
 80072b0:	6053      	str	r3, [r2, #4]
    }
 80072b2:	bf00      	nop
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	2000047c 	.word	0x2000047c

080072bc <RDA5807_PowerOff>:

void RDA5807_PowerOff(void)
    {
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] ^ RDA_POWER;
 80072c0:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <RDA5807_PowerOff+0x18>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f083 0301 	eor.w	r3, r3, #1
 80072c8:	4a02      	ldr	r2, [pc, #8]	; (80072d4 <RDA5807_PowerOff+0x18>)
 80072ca:	6013      	str	r3, [r2, #0]
	RDA5807_WriteAllRegs();
 80072cc:	f7ff ff72 	bl	80071b4 <RDA5807_WriteAllRegs>
    }
 80072d0:	bf00      	nop
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	2000047c 	.word	0x2000047c

080072d8 <RDA5807_Volume>:
	RDA5807_Init();
	RDA5807_PowerOn();
    }

void RDA5807_Volume(int8_t vol)
    {
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	71fb      	strb	r3, [r7, #7]
	if (vol > 15)
 80072e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	dd01      	ble.n	80072ee <RDA5807_Volume+0x16>
	    {
		vol = 15;			//Volume is already at 15 level
 80072ea:	230f      	movs	r3, #15
 80072ec:	71fb      	strb	r3, [r7, #7]
	    }
	if (vol < 0)
 80072ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	da01      	bge.n	80072fa <RDA5807_Volume+0x22>
	    {
		vol = 0;			//Volume is already at 0 level
 80072f6:	2300      	movs	r3, #0
 80072f8:	71fb      	strb	r3, [r7, #7]
	    }
	RDA5807M_WriteReg[3] = (RDA5807M_WriteReg[3] & 0xFFF0) | vol;   // Set New Volume
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <RDA5807_Volume+0x44>)
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8007302:	4013      	ands	r3, r2
 8007304:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8007308:	4313      	orrs	r3, r2
 800730a:	4a04      	ldr	r2, [pc, #16]	; (800731c <RDA5807_Volume+0x44>)
 800730c:	60d3      	str	r3, [r2, #12]
	RDA5807_WriteAllRegs();
 800730e:	f7ff ff51 	bl	80071b4 <RDA5807_WriteAllRegs>
    }
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000047c 	.word	0x2000047c

08007320 <RDA5807_SeekUp>:
	    }
	RDA5807_WriteAllRegs();
    }

void RDA5807_SeekUp(void)
    {
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] | RDA_SEEK_UP;   // Set Seek Up
 8007324:	4b08      	ldr	r3, [pc, #32]	; (8007348 <RDA5807_SeekUp+0x28>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800732c:	4a06      	ldr	r2, [pc, #24]	; (8007348 <RDA5807_SeekUp+0x28>)
 800732e:	6013      	str	r3, [r2, #0]
	RDA5807_WriteAllRegs();
 8007330:	f7ff ff40 	bl	80071b4 <RDA5807_WriteAllRegs>
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] & RDA_SEEK_STOP;   // Disable Seek
 8007334:	4b04      	ldr	r3, [pc, #16]	; (8007348 <RDA5807_SeekUp+0x28>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800733c:	4013      	ands	r3, r2
 800733e:	4a02      	ldr	r2, [pc, #8]	; (8007348 <RDA5807_SeekUp+0x28>)
 8007340:	6013      	str	r3, [r2, #0]
    }
 8007342:	bf00      	nop
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	2000047c 	.word	0x2000047c
 800734c:	00000000 	.word	0x00000000

08007350 <RDA5807_SetFrequency>:
	RDA5807_WriteAllRegs();
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] & RDA_SEEK_STOP;   // Disable Seek
    }

void RDA5807_SetFrequency(float Freq)
    {
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	ed87 0a01 	vstr	s0, [r7, #4]
	int Channel;
	Channel = ((Freq/10) - StartingFreq) / 0.1;
 800735a:	edd7 7a01 	vldr	s15, [r7, #4]
 800735e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007362:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007366:	ee16 0a90 	vmov	r0, s13
 800736a:	f7f9 f975 	bl	8000658 <__aeabi_f2d>
 800736e:	a317      	add	r3, pc, #92	; (adr r3, 80073cc <RDA5807_SetFrequency+0x7c>)
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	f7f9 f810 	bl	8000398 <__aeabi_dsub>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4610      	mov	r0, r2
 800737e:	4619      	mov	r1, r3
 8007380:	a314      	add	r3, pc, #80	; (adr r3, 80073d4 <RDA5807_SetFrequency+0x84>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f7f9 fae9 	bl	800095c <__aeabi_ddiv>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	4610      	mov	r0, r2
 8007390:	4619      	mov	r1, r3
 8007392:	f7f9 fc53 	bl	8000c3c <__aeabi_d2iz>
 8007396:	4603      	mov	r3, r0
 8007398:	60fb      	str	r3, [r7, #12]
	Channel = Channel & 0x03FF;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a0:	60fb      	str	r3, [r7, #12]
	RDA5807M_WriteReg[1] = Channel * 64 + 0x10;  // Channel + TUNE-Bit + Band=00(87-108) + Space=00(100kHz)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	019b      	lsls	r3, r3, #6
 80073a6:	3310      	adds	r3, #16
 80073a8:	461a      	mov	r2, r3
 80073aa:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <RDA5807_SetFrequency+0x78>)
 80073ac:	605a      	str	r2, [r3, #4]
	RDA5807_WriteAllRegs();
 80073ae:	f7ff ff01 	bl	80071b4 <RDA5807_WriteAllRegs>
	RDA5807M_WriteReg[1] = RDA5807M_WriteReg[1] & RDA_TUNE_OFF;
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <RDA5807_SetFrequency+0x78>)
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80073ba:	4013      	ands	r3, r2
 80073bc:	4a02      	ldr	r2, [pc, #8]	; (80073c8 <RDA5807_SetFrequency+0x78>)
 80073be:	6053      	str	r3, [r2, #4]
    }
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	2000047c 	.word	0x2000047c
 80073cc:	00000000 	.word	0x00000000
 80073d0:	4055c000 	.word	0x4055c000
 80073d4:	9999999a 	.word	0x9999999a
 80073d8:	3fb99999 	.word	0x3fb99999

080073dc <RDA5807_GetFrequency>:

uint16_t RDA5807_GetFrequency(void)
    {
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
	return (freq / 100);
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <RDA5807_GetFrequency+0x20>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a06      	ldr	r2, [pc, #24]	; (8007400 <RDA5807_GetFrequency+0x24>)
 80073e6:	fb82 1203 	smull	r1, r2, r2, r3
 80073ea:	1152      	asrs	r2, r2, #5
 80073ec:	17db      	asrs	r3, r3, #31
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	b29b      	uxth	r3, r3
    }
 80073f2:	4618      	mov	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	20000258 	.word	0x20000258
 8007400:	51eb851f 	.word	0x51eb851f

08007404 <RDA5807_GetRSSI>:

uint16_t RDA5807_GetRSSI(void)
    {
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
	return signal;
 8007408:	4b03      	ldr	r3, [pc, #12]	; (8007418 <RDA5807_GetRSSI+0x14>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
    }
 800740e:	4618      	mov	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	20000390 	.word	0x20000390

0800741c <RDA5807_RDSinit>:
	    }
	RDA5807_WriteAllRegs();
    }

void RDA5807_RDSinit()
    {
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
	strcpy(StationName, "        ");
 8007420:	4a18      	ldr	r2, [pc, #96]	; (8007484 <RDA5807_RDSinit+0x68>)
 8007422:	4b19      	ldr	r3, [pc, #100]	; (8007488 <RDA5807_RDSinit+0x6c>)
 8007424:	cb03      	ldmia	r3!, {r0, r1}
 8007426:	6010      	str	r0, [r2, #0]
 8007428:	6051      	str	r1, [r2, #4]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	7213      	strb	r3, [r2, #8]
	strcpy(PSName, "        ");
 800742e:	4a17      	ldr	r2, [pc, #92]	; (800748c <RDA5807_RDSinit+0x70>)
 8007430:	4b15      	ldr	r3, [pc, #84]	; (8007488 <RDA5807_RDSinit+0x6c>)
 8007432:	cb03      	ldmia	r3!, {r0, r1}
 8007434:	6010      	str	r0, [r2, #0]
 8007436:	6051      	str	r1, [r2, #4]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	7213      	strb	r3, [r2, #8]
	strcpy(PSName1, "        ");
 800743c:	4a14      	ldr	r2, [pc, #80]	; (8007490 <RDA5807_RDSinit+0x74>)
 800743e:	4b12      	ldr	r3, [pc, #72]	; (8007488 <RDA5807_RDSinit+0x6c>)
 8007440:	cb03      	ldmia	r3!, {r0, r1}
 8007442:	6010      	str	r0, [r2, #0]
 8007444:	6051      	str	r1, [r2, #4]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	7213      	strb	r3, [r2, #8]
	strcpy(PSName2, "        ");
 800744a:	4a12      	ldr	r2, [pc, #72]	; (8007494 <RDA5807_RDSinit+0x78>)
 800744c:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <RDA5807_RDSinit+0x6c>)
 800744e:	cb03      	ldmia	r3!, {r0, r1}
 8007450:	6010      	str	r0, [r2, #0]
 8007452:	6051      	str	r1, [r2, #4]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	7213      	strb	r3, [r2, #8]
	memset(RDStext, '\0', sizeof(RDStext));
 8007458:	2242      	movs	r2, #66	; 0x42
 800745a:	2100      	movs	r1, #0
 800745c:	480e      	ldr	r0, [pc, #56]	; (8007498 <RDA5807_RDSinit+0x7c>)
 800745e:	f00e fbe1 	bl	8015c24 <memset>
	memset(RDStextbuffer, '\0', sizeof(RDStextbuffer));
 8007462:	2242      	movs	r2, #66	; 0x42
 8007464:	2100      	movs	r1, #0
 8007466:	480d      	ldr	r0, [pc, #52]	; (800749c <RDA5807_RDSinit+0x80>)
 8007468:	f00e fbdc 	bl	8015c24 <memset>
	lastTextIDX = 0;
 800746c:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <RDA5807_RDSinit+0x84>)
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
	mins = 0;
 8007472:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <RDA5807_RDSinit+0x88>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
	sprintf(CTtime, "CT --:--");
 8007478:	490b      	ldr	r1, [pc, #44]	; (80074a8 <RDA5807_RDSinit+0x8c>)
 800747a:	480c      	ldr	r0, [pc, #48]	; (80074ac <RDA5807_RDSinit+0x90>)
 800747c:	f00e fbda 	bl	8015c34 <siprintf>
    }
 8007480:	bf00      	nop
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000454 	.word	0x20000454
 8007488:	08018034 	.word	0x08018034
 800748c:	200002a4 	.word	0x200002a4
 8007490:	200003f8 	.word	0x200003f8
 8007494:	2000023c 	.word	0x2000023c
 8007498:	2000025c 	.word	0x2000025c
 800749c:	200003a4 	.word	0x200003a4
 80074a0:	2000036c 	.word	0x2000036c
 80074a4:	200003e8 	.word	0x200003e8
 80074a8:	08018040 	.word	0x08018040
 80074ac:	200003ec 	.word	0x200003ec

080074b0 <RDA5807_Read>:


// Read all RDA5807 registers
void RDA5807_Read()
    {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af02      	add	r7, sp, #8
	RDAstatus =  HAL_I2C_Master_Receive(&hi2c2, RDASequential << 1, (void *)&I2C_BUFF, 2*7, 100);
 80074b6:	2364      	movs	r3, #100	; 0x64
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	230e      	movs	r3, #14
 80074bc:	4a85      	ldr	r2, [pc, #532]	; (80076d4 <RDA5807_Read+0x224>)
 80074be:	2120      	movs	r1, #32
 80074c0:	4885      	ldr	r0, [pc, #532]	; (80076d8 <RDA5807_Read+0x228>)
 80074c2:	f008 fb6d 	bl	800fba0 <HAL_I2C_Master_Receive>
 80074c6:	4603      	mov	r3, r0
 80074c8:	461a      	mov	r2, r3
 80074ca:	4b84      	ldr	r3, [pc, #528]	; (80076dc <RDA5807_Read+0x22c>)
 80074cc:	601a      	str	r2, [r3, #0]
	int i = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < 6; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	e012      	b.n	80074fe <RDA5807_Read+0x4e>
	    {
		RDA5807M_ReadReg[i] = ((I2C_BUFF[i * 2] << 8) | I2C_BUFF[(i * 2) + 1]);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4a7d      	ldr	r2, [pc, #500]	; (80076d4 <RDA5807_Read+0x224>)
 80074de:	5cd3      	ldrb	r3, [r2, r3]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	0052      	lsls	r2, r2, #1
 80074e6:	3201      	adds	r2, #1
 80074e8:	497a      	ldr	r1, [pc, #488]	; (80076d4 <RDA5807_Read+0x224>)
 80074ea:	5c8a      	ldrb	r2, [r1, r2]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	4a7b      	ldr	r2, [pc, #492]	; (80076e0 <RDA5807_Read+0x230>)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for ( i = 0; i < 6; i++)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3301      	adds	r3, #1
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b05      	cmp	r3, #5
 8007502:	dde9      	ble.n	80074d8 <RDA5807_Read+0x28>
	    }

	//RDS Text data blocks
	block1 = RDA5807M_ReadReg[2];
 8007504:	4b76      	ldr	r3, [pc, #472]	; (80076e0 <RDA5807_Read+0x230>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	461a      	mov	r2, r3
 800750a:	4b76      	ldr	r3, [pc, #472]	; (80076e4 <RDA5807_Read+0x234>)
 800750c:	601a      	str	r2, [r3, #0]
	block2 = RDA5807M_ReadReg[3];
 800750e:	4b74      	ldr	r3, [pc, #464]	; (80076e0 <RDA5807_Read+0x230>)
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	461a      	mov	r2, r3
 8007514:	4b74      	ldr	r3, [pc, #464]	; (80076e8 <RDA5807_Read+0x238>)
 8007516:	601a      	str	r2, [r3, #0]
	block3 = RDA5807M_ReadReg[4];
 8007518:	4b71      	ldr	r3, [pc, #452]	; (80076e0 <RDA5807_Read+0x230>)
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	461a      	mov	r2, r3
 800751e:	4b73      	ldr	r3, [pc, #460]	; (80076ec <RDA5807_Read+0x23c>)
 8007520:	601a      	str	r2, [r3, #0]
	block4 = RDA5807M_ReadReg[5];
 8007522:	4b6f      	ldr	r3, [pc, #444]	; (80076e0 <RDA5807_Read+0x230>)
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	461a      	mov	r2, r3
 8007528:	4b71      	ldr	r3, [pc, #452]	; (80076f0 <RDA5807_Read+0x240>)
 800752a:	601a      	str	r2, [r3, #0]

	rdsready      = RDA5807M_ReadReg[0] & 0x8000;				//if rdsready != 0 rds data are ready
 800752c:	4b6c      	ldr	r3, [pc, #432]	; (80076e0 <RDA5807_Read+0x230>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007534:	4a6f      	ldr	r2, [pc, #444]	; (80076f4 <RDA5807_Read+0x244>)
 8007536:	6013      	str	r3, [r2, #0]
	tuneok        = RDA5807M_ReadReg[0] & 0x4000;				//if tuneok != 0 seek/tune completed
 8007538:	4b69      	ldr	r3, [pc, #420]	; (80076e0 <RDA5807_Read+0x230>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007540:	4a6d      	ldr	r2, [pc, #436]	; (80076f8 <RDA5807_Read+0x248>)
 8007542:	6013      	str	r3, [r2, #0]
	nochannel     = RDA5807M_ReadReg[0] & 0x2000;				//if nochannel != 0 no channel found
 8007544:	4b66      	ldr	r3, [pc, #408]	; (80076e0 <RDA5807_Read+0x230>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800754c:	4a6b      	ldr	r2, [pc, #428]	; (80076fc <RDA5807_Read+0x24c>)
 800754e:	6013      	str	r3, [r2, #0]
	rdssynchro    = RDA5807M_ReadReg[0] & 0x1000;				//if rdssynchro = 1000 rds decoder syncrhonized
 8007550:	4b63      	ldr	r3, [pc, #396]	; (80076e0 <RDA5807_Read+0x230>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007558:	4a69      	ldr	r2, [pc, #420]	; (8007700 <RDA5807_Read+0x250>)
 800755a:	6013      	str	r3, [r2, #0]
	stereo        = RDA5807M_ReadReg[0] & 0x0400; 				//if stereo = 0 station is mono else stereo
 800755c:	4b60      	ldr	r3, [pc, #384]	; (80076e0 <RDA5807_Read+0x230>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007564:	4a67      	ldr	r2, [pc, #412]	; (8007704 <RDA5807_Read+0x254>)
 8007566:	6013      	str	r3, [r2, #0]
	freq          = (((RDA5807M_ReadReg[0] & 0x03FF) * 100) + 87000);	//return freq ex 102600KHz > 102.6MHz
 8007568:	4b5d      	ldr	r3, [pc, #372]	; (80076e0 <RDA5807_Read+0x230>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007570:	2264      	movs	r2, #100	; 0x64
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	f503 33a9 	add.w	r3, r3, #86528	; 0x15200
 800757a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800757e:	461a      	mov	r2, r3
 8007580:	4b61      	ldr	r3, [pc, #388]	; (8007708 <RDA5807_Read+0x258>)
 8007582:	601a      	str	r2, [r3, #0]
	signal        = RDA5807M_ReadReg[1] >> 9;				//return signal strength rssi
 8007584:	4b56      	ldr	r3, [pc, #344]	; (80076e0 <RDA5807_Read+0x230>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	0a5b      	lsrs	r3, r3, #9
 800758a:	461a      	mov	r2, r3
 800758c:	4b5f      	ldr	r3, [pc, #380]	; (800770c <RDA5807_Read+0x25c>)
 800758e:	601a      	str	r2, [r3, #0]
	fmready       = RDA5807M_ReadReg[1] & 0x0008; 				//if fmready = 8 > fm is ready
 8007590:	4b53      	ldr	r3, [pc, #332]	; (80076e0 <RDA5807_Read+0x230>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	4a5d      	ldr	r2, [pc, #372]	; (8007710 <RDA5807_Read+0x260>)
 800759a:	6013      	str	r3, [r2, #0]
	fmstation     = RDA5807M_ReadReg[1] & 0x0100; 				//if fmstation = 100 fm station is true
 800759c:	4b50      	ldr	r3, [pc, #320]	; (80076e0 <RDA5807_Read+0x230>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a4:	4a5b      	ldr	r2, [pc, #364]	; (8007714 <RDA5807_Read+0x264>)
 80075a6:	6013      	str	r3, [r2, #0]
	rdsblockerror = RDA5807M_ReadReg[1] & 0x000C;				//check for rds blocks errors
 80075a8:	4b4d      	ldr	r3, [pc, #308]	; (80076e0 <RDA5807_Read+0x230>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f003 030c 	and.w	r3, r3, #12
 80075b0:	4a59      	ldr	r2, [pc, #356]	; (8007718 <RDA5807_Read+0x268>)
 80075b2:	6013      	str	r3, [r2, #0]
										//00= 0 errors,01= 1~2 errors requiring correction
										//10= 3~5 errors requiring correction
										//11= 6+ errors or error in checkword, correction not possible.

	if (rdssynchro != 0x1000)
 80075b4:	4b52      	ldr	r3, [pc, #328]	; (8007700 <RDA5807_Read+0x250>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075bc:	d001      	beq.n	80075c2 <RDA5807_Read+0x112>
	    {  // RDS not synchronised or tuning changed, reset all the RDS info.
		RDA5807_RDSinit();
 80075be:	f7ff ff2d 	bl	800741c <RDA5807_RDSinit>
	    }

	// analyzing Block 2
	rdsGroupType = 0x0A | ((block2 & 0xF000) >> 8) | ((block2 & 0x0800) >> 11);
 80075c2:	4b49      	ldr	r3, [pc, #292]	; (80076e8 <RDA5807_Read+0x238>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	121b      	asrs	r3, r3, #8
 80075c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075cc:	f043 020a 	orr.w	r2, r3, #10
 80075d0:	4b45      	ldr	r3, [pc, #276]	; (80076e8 <RDA5807_Read+0x238>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	12db      	asrs	r3, r3, #11
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	4313      	orrs	r3, r2
 80075dc:	4a4f      	ldr	r2, [pc, #316]	; (800771c <RDA5807_Read+0x26c>)
 80075de:	6013      	str	r3, [r2, #0]
	rdsTP = (block2 & 0x0400);
 80075e0:	4b41      	ldr	r3, [pc, #260]	; (80076e8 <RDA5807_Read+0x238>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e8:	4a4d      	ldr	r2, [pc, #308]	; (8007720 <RDA5807_Read+0x270>)
 80075ea:	6013      	str	r3, [r2, #0]
	rdsPTY = (block2 & 0x0400);
 80075ec:	4b3e      	ldr	r3, [pc, #248]	; (80076e8 <RDA5807_Read+0x238>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f4:	4a4b      	ldr	r2, [pc, #300]	; (8007724 <RDA5807_Read+0x274>)
 80075f6:	6013      	str	r3, [r2, #0]
	switch (rdsGroupType)
 80075f8:	4b48      	ldr	r3, [pc, #288]	; (800771c <RDA5807_Read+0x26c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2bea      	cmp	r3, #234	; 0xea
 80075fe:	f000 81dd 	beq.w	80079bc <RDA5807_Read+0x50c>
 8007602:	2bea      	cmp	r3, #234	; 0xea
 8007604:	f300 8204 	bgt.w	8007a10 <RDA5807_Read+0x560>
 8007608:	2bca      	cmp	r3, #202	; 0xca
 800760a:	f000 8203 	beq.w	8007a14 <RDA5807_Read+0x564>
 800760e:	2bca      	cmp	r3, #202	; 0xca
 8007610:	f300 81fe 	bgt.w	8007a10 <RDA5807_Read+0x560>
 8007614:	2baa      	cmp	r3, #170	; 0xaa
 8007616:	f000 81ff 	beq.w	8007a18 <RDA5807_Read+0x568>
 800761a:	2baa      	cmp	r3, #170	; 0xaa
 800761c:	f300 81f8 	bgt.w	8007a10 <RDA5807_Read+0x560>
 8007620:	2b8a      	cmp	r3, #138	; 0x8a
 8007622:	f000 81fb 	beq.w	8007a1c <RDA5807_Read+0x56c>
 8007626:	2b8a      	cmp	r3, #138	; 0x8a
 8007628:	f300 81f2 	bgt.w	8007a10 <RDA5807_Read+0x560>
 800762c:	2b6a      	cmp	r3, #106	; 0x6a
 800762e:	f000 81f7 	beq.w	8007a20 <RDA5807_Read+0x570>
 8007632:	2b6a      	cmp	r3, #106	; 0x6a
 8007634:	f300 81ec 	bgt.w	8007a10 <RDA5807_Read+0x560>
 8007638:	2b4a      	cmp	r3, #74	; 0x4a
 800763a:	f000 814e 	beq.w	80078da <RDA5807_Read+0x42a>
 800763e:	2b4a      	cmp	r3, #74	; 0x4a
 8007640:	f300 81e6 	bgt.w	8007a10 <RDA5807_Read+0x560>
 8007644:	2b0b      	cmp	r3, #11
 8007646:	dc02      	bgt.n	800764e <RDA5807_Read+0x19e>
 8007648:	2b0a      	cmp	r3, #10
 800764a:	da04      	bge.n	8007656 <RDA5807_Read+0x1a6>
		// IH
		break;

	    default:

		break;
 800764c:	e1e0      	b.n	8007a10 <RDA5807_Read+0x560>
	switch (rdsGroupType)
 800764e:	2b2a      	cmp	r3, #42	; 0x2a
 8007650:	f000 80b7 	beq.w	80077c2 <RDA5807_Read+0x312>
		break;
 8007654:	e1dc      	b.n	8007a10 <RDA5807_Read+0x560>
		idx = 2 * (block2 & 0x0003);
 8007656:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <RDA5807_Read+0x238>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	4a31      	ldr	r2, [pc, #196]	; (8007728 <RDA5807_Read+0x278>)
 8007662:	6013      	str	r3, [r2, #0]
		c1 = block4 >> 8;
 8007664:	4b22      	ldr	r3, [pc, #136]	; (80076f0 <RDA5807_Read+0x240>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	121b      	asrs	r3, r3, #8
 800766a:	b2da      	uxtb	r2, r3
 800766c:	4b2f      	ldr	r3, [pc, #188]	; (800772c <RDA5807_Read+0x27c>)
 800766e:	701a      	strb	r2, [r3, #0]
		c2 = block4 & 0x00FF;
 8007670:	4b1f      	ldr	r3, [pc, #124]	; (80076f0 <RDA5807_Read+0x240>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	4b2e      	ldr	r3, [pc, #184]	; (8007730 <RDA5807_Read+0x280>)
 8007678:	701a      	strb	r2, [r3, #0]
		if ((PSName1[idx] == c1) && (PSName1[idx + 1] == c2))
 800767a:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <RDA5807_Read+0x278>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a2d      	ldr	r2, [pc, #180]	; (8007734 <RDA5807_Read+0x284>)
 8007680:	5cd2      	ldrb	r2, [r2, r3]
 8007682:	4b2a      	ldr	r3, [pc, #168]	; (800772c <RDA5807_Read+0x27c>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d178      	bne.n	800777c <RDA5807_Read+0x2cc>
 800768a:	4b27      	ldr	r3, [pc, #156]	; (8007728 <RDA5807_Read+0x278>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3301      	adds	r3, #1
 8007690:	4a28      	ldr	r2, [pc, #160]	; (8007734 <RDA5807_Read+0x284>)
 8007692:	5cd2      	ldrb	r2, [r2, r3]
 8007694:	4b26      	ldr	r3, [pc, #152]	; (8007730 <RDA5807_Read+0x280>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d16f      	bne.n	800777c <RDA5807_Read+0x2cc>
			PSName2[idx] = c1;
 800769c:	4b22      	ldr	r3, [pc, #136]	; (8007728 <RDA5807_Read+0x278>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a22      	ldr	r2, [pc, #136]	; (800772c <RDA5807_Read+0x27c>)
 80076a2:	7811      	ldrb	r1, [r2, #0]
 80076a4:	4a24      	ldr	r2, [pc, #144]	; (8007738 <RDA5807_Read+0x288>)
 80076a6:	54d1      	strb	r1, [r2, r3]
			PSName2[idx + 1] = c2;
 80076a8:	4b1f      	ldr	r3, [pc, #124]	; (8007728 <RDA5807_Read+0x278>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	4a20      	ldr	r2, [pc, #128]	; (8007730 <RDA5807_Read+0x280>)
 80076b0:	7811      	ldrb	r1, [r2, #0]
 80076b2:	4a21      	ldr	r2, [pc, #132]	; (8007738 <RDA5807_Read+0x288>)
 80076b4:	54d1      	strb	r1, [r2, r3]
			PSName2[8] = '\0';
 80076b6:	4b20      	ldr	r3, [pc, #128]	; (8007738 <RDA5807_Read+0x288>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	721a      	strb	r2, [r3, #8]
			if (strcmp(PSName1, PSName2) == 0)
 80076bc:	491e      	ldr	r1, [pc, #120]	; (8007738 <RDA5807_Read+0x288>)
 80076be:	481d      	ldr	r0, [pc, #116]	; (8007734 <RDA5807_Read+0x284>)
 80076c0:	f7f8 fdfe 	bl	80002c0 <strcmp>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d158      	bne.n	800777c <RDA5807_Read+0x2cc>
				int8_t n = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	70fb      	strb	r3, [r7, #3]
				for (i = 0; i < (8); i++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
 80076d2:	e050      	b.n	8007776 <RDA5807_Read+0x2c6>
 80076d4:	200004a4 	.word	0x200004a4
 80076d8:	200006bc 	.word	0x200006bc
 80076dc:	200001f0 	.word	0x200001f0
 80076e0:	200002d0 	.word	0x200002d0
 80076e4:	2000024c 	.word	0x2000024c
 80076e8:	20000460 	.word	0x20000460
 80076ec:	2000044c 	.word	0x2000044c
 80076f0:	20000250 	.word	0x20000250
 80076f4:	200002cc 	.word	0x200002cc
 80076f8:	200002b4 	.word	0x200002b4
 80076fc:	20000398 	.word	0x20000398
 8007700:	20000464 	.word	0x20000464
 8007704:	2000049c 	.word	0x2000049c
 8007708:	20000258 	.word	0x20000258
 800770c:	20000390 	.word	0x20000390
 8007710:	20000248 	.word	0x20000248
 8007714:	20000478 	.word	0x20000478
 8007718:	200004a0 	.word	0x200004a0
 800771c:	2000039c 	.word	0x2000039c
 8007720:	2000038c 	.word	0x2000038c
 8007724:	20000474 	.word	0x20000474
 8007728:	200003a0 	.word	0x200003a0
 800772c:	20000394 	.word	0x20000394
 8007730:	20000254 	.word	0x20000254
 8007734:	200003f8 	.word	0x200003f8
 8007738:	2000023c 	.word	0x2000023c
					if (PSName2[i] > 31 && PSName2[i] < 127)
 800773c:	4aa0      	ldr	r2, [pc, #640]	; (80079c0 <RDA5807_Read+0x510>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b1f      	cmp	r3, #31
 8007746:	d913      	bls.n	8007770 <RDA5807_Read+0x2c0>
 8007748:	4a9d      	ldr	r2, [pc, #628]	; (80079c0 <RDA5807_Read+0x510>)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b7e      	cmp	r3, #126	; 0x7e
 8007752:	d80d      	bhi.n	8007770 <RDA5807_Read+0x2c0>
						StationName[n] = PSName2[i];
 8007754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007758:	4999      	ldr	r1, [pc, #612]	; (80079c0 <RDA5807_Read+0x510>)
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	440a      	add	r2, r1
 800775e:	7811      	ldrb	r1, [r2, #0]
 8007760:	4a98      	ldr	r2, [pc, #608]	; (80079c4 <RDA5807_Read+0x514>)
 8007762:	54d1      	strb	r1, [r2, r3]
						n++;
 8007764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3301      	adds	r3, #1
 800776c:	b2db      	uxtb	r3, r3
 800776e:	70fb      	strb	r3, [r7, #3]
				for (i = 0; i < (8); i++)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3301      	adds	r3, #1
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b07      	cmp	r3, #7
 800777a:	dddf      	ble.n	800773c <RDA5807_Read+0x28c>
		if ((PSName1[idx] != c1) || (PSName1[idx + 1] != c2))
 800777c:	4b92      	ldr	r3, [pc, #584]	; (80079c8 <RDA5807_Read+0x518>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a92      	ldr	r2, [pc, #584]	; (80079cc <RDA5807_Read+0x51c>)
 8007782:	5cd2      	ldrb	r2, [r2, r3]
 8007784:	4b92      	ldr	r3, [pc, #584]	; (80079d0 <RDA5807_Read+0x520>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d109      	bne.n	80077a0 <RDA5807_Read+0x2f0>
 800778c:	4b8e      	ldr	r3, [pc, #568]	; (80079c8 <RDA5807_Read+0x518>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3301      	adds	r3, #1
 8007792:	4a8e      	ldr	r2, [pc, #568]	; (80079cc <RDA5807_Read+0x51c>)
 8007794:	5cd2      	ldrb	r2, [r2, r3]
 8007796:	4b8f      	ldr	r3, [pc, #572]	; (80079d4 <RDA5807_Read+0x524>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	f000 8142 	beq.w	8007a24 <RDA5807_Read+0x574>
			PSName1[idx] = c1;
 80077a0:	4b89      	ldr	r3, [pc, #548]	; (80079c8 <RDA5807_Read+0x518>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a8a      	ldr	r2, [pc, #552]	; (80079d0 <RDA5807_Read+0x520>)
 80077a6:	7811      	ldrb	r1, [r2, #0]
 80077a8:	4a88      	ldr	r2, [pc, #544]	; (80079cc <RDA5807_Read+0x51c>)
 80077aa:	54d1      	strb	r1, [r2, r3]
			PSName1[idx + 1] = c2;
 80077ac:	4b86      	ldr	r3, [pc, #536]	; (80079c8 <RDA5807_Read+0x518>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3301      	adds	r3, #1
 80077b2:	4a88      	ldr	r2, [pc, #544]	; (80079d4 <RDA5807_Read+0x524>)
 80077b4:	7811      	ldrb	r1, [r2, #0]
 80077b6:	4a85      	ldr	r2, [pc, #532]	; (80079cc <RDA5807_Read+0x51c>)
 80077b8:	54d1      	strb	r1, [r2, r3]
			PSName1[8] = '\0';
 80077ba:	4b84      	ldr	r3, [pc, #528]	; (80079cc <RDA5807_Read+0x51c>)
 80077bc:	2200      	movs	r2, #0
 80077be:	721a      	strb	r2, [r3, #8]
		break;
 80077c0:	e130      	b.n	8007a24 <RDA5807_Read+0x574>
		textAB = (block2 & 0x0010);
 80077c2:	4b85      	ldr	r3, [pc, #532]	; (80079d8 <RDA5807_Read+0x528>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0310 	and.w	r3, r3, #16
 80077ca:	4a84      	ldr	r2, [pc, #528]	; (80079dc <RDA5807_Read+0x52c>)
 80077cc:	6013      	str	r3, [r2, #0]
		idx = 4 * (block2 & 0x000F);
 80077ce:	4b82      	ldr	r3, [pc, #520]	; (80079d8 <RDA5807_Read+0x528>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a7b      	ldr	r2, [pc, #492]	; (80079c8 <RDA5807_Read+0x518>)
 80077da:	6013      	str	r3, [r2, #0]
		if (idx < lastTextIDX)
 80077dc:	4b7a      	ldr	r3, [pc, #488]	; (80079c8 <RDA5807_Read+0x518>)
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4b7f      	ldr	r3, [pc, #508]	; (80079e0 <RDA5807_Read+0x530>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	da28      	bge.n	800783a <RDA5807_Read+0x38a>
			int8_t n = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	70bb      	strb	r3, [r7, #2]
			for (i = 0; i < strlen(RDStextbuffer); i++)
 80077ec:	2300      	movs	r3, #0
 80077ee:	607b      	str	r3, [r7, #4]
 80077f0:	e01c      	b.n	800782c <RDA5807_Read+0x37c>
				if (RDStextbuffer[i] > 31 && RDStextbuffer[i] < 127)
 80077f2:	4a7c      	ldr	r2, [pc, #496]	; (80079e4 <RDA5807_Read+0x534>)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b1f      	cmp	r3, #31
 80077fc:	d913      	bls.n	8007826 <RDA5807_Read+0x376>
 80077fe:	4a79      	ldr	r2, [pc, #484]	; (80079e4 <RDA5807_Read+0x534>)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b7e      	cmp	r3, #126	; 0x7e
 8007808:	d80d      	bhi.n	8007826 <RDA5807_Read+0x376>
					RDStext[n] = RDStextbuffer[i];
 800780a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800780e:	4975      	ldr	r1, [pc, #468]	; (80079e4 <RDA5807_Read+0x534>)
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	440a      	add	r2, r1
 8007814:	7811      	ldrb	r1, [r2, #0]
 8007816:	4a74      	ldr	r2, [pc, #464]	; (80079e8 <RDA5807_Read+0x538>)
 8007818:	54d1      	strb	r1, [r2, r3]
					n++;
 800781a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	3301      	adds	r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	70bb      	strb	r3, [r7, #2]
			for (i = 0; i < strlen(RDStextbuffer); i++)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3301      	adds	r3, #1
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	486d      	ldr	r0, [pc, #436]	; (80079e4 <RDA5807_Read+0x534>)
 800782e:	f7f8 fd51 	bl	80002d4 <strlen>
 8007832:	4602      	mov	r2, r0
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d8db      	bhi.n	80077f2 <RDA5807_Read+0x342>
		lastTextIDX = idx;
 800783a:	4b63      	ldr	r3, [pc, #396]	; (80079c8 <RDA5807_Read+0x518>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a68      	ldr	r2, [pc, #416]	; (80079e0 <RDA5807_Read+0x530>)
 8007840:	6013      	str	r3, [r2, #0]
		if (textAB != lasttextAB)
 8007842:	4b66      	ldr	r3, [pc, #408]	; (80079dc <RDA5807_Read+0x52c>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b69      	ldr	r3, [pc, #420]	; (80079ec <RDA5807_Read+0x53c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d00d      	beq.n	800786a <RDA5807_Read+0x3ba>
			lasttextAB = textAB;
 800784e:	4b63      	ldr	r3, [pc, #396]	; (80079dc <RDA5807_Read+0x52c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a66      	ldr	r2, [pc, #408]	; (80079ec <RDA5807_Read+0x53c>)
 8007854:	6013      	str	r3, [r2, #0]
			memset(RDStextbuffer, 0, sizeof(RDStextbuffer));
 8007856:	2242      	movs	r2, #66	; 0x42
 8007858:	2100      	movs	r1, #0
 800785a:	4862      	ldr	r0, [pc, #392]	; (80079e4 <RDA5807_Read+0x534>)
 800785c:	f00e f9e2 	bl	8015c24 <memset>
			memset(RDStext, '\0', sizeof(RDStext));
 8007860:	2242      	movs	r2, #66	; 0x42
 8007862:	2100      	movs	r1, #0
 8007864:	4860      	ldr	r0, [pc, #384]	; (80079e8 <RDA5807_Read+0x538>)
 8007866:	f00e f9dd 	bl	8015c24 <memset>
		if (rdsblockerror < 4)
 800786a:	4b61      	ldr	r3, [pc, #388]	; (80079f0 <RDA5807_Read+0x540>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b03      	cmp	r3, #3
 8007870:	f300 80da 	bgt.w	8007a28 <RDA5807_Read+0x578>
			RDStextbuffer[idx] = (block3 >> 8);
 8007874:	4b5f      	ldr	r3, [pc, #380]	; (80079f4 <RDA5807_Read+0x544>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	121a      	asrs	r2, r3, #8
 800787a:	4b53      	ldr	r3, [pc, #332]	; (80079c8 <RDA5807_Read+0x518>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	b2d1      	uxtb	r1, r2
 8007880:	4a58      	ldr	r2, [pc, #352]	; (80079e4 <RDA5807_Read+0x534>)
 8007882:	54d1      	strb	r1, [r2, r3]
			idx++;
 8007884:	4b50      	ldr	r3, [pc, #320]	; (80079c8 <RDA5807_Read+0x518>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	4a4f      	ldr	r2, [pc, #316]	; (80079c8 <RDA5807_Read+0x518>)
 800788c:	6013      	str	r3, [r2, #0]
			RDStextbuffer[idx] = (block3 & 0x00FF);
 800788e:	4b59      	ldr	r3, [pc, #356]	; (80079f4 <RDA5807_Read+0x544>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4b4d      	ldr	r3, [pc, #308]	; (80079c8 <RDA5807_Read+0x518>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	b2d1      	uxtb	r1, r2
 8007898:	4a52      	ldr	r2, [pc, #328]	; (80079e4 <RDA5807_Read+0x534>)
 800789a:	54d1      	strb	r1, [r2, r3]
			idx++;
 800789c:	4b4a      	ldr	r3, [pc, #296]	; (80079c8 <RDA5807_Read+0x518>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	4a49      	ldr	r2, [pc, #292]	; (80079c8 <RDA5807_Read+0x518>)
 80078a4:	6013      	str	r3, [r2, #0]
			RDStextbuffer[idx] = (block4 >> 8);
 80078a6:	4b54      	ldr	r3, [pc, #336]	; (80079f8 <RDA5807_Read+0x548>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	121a      	asrs	r2, r3, #8
 80078ac:	4b46      	ldr	r3, [pc, #280]	; (80079c8 <RDA5807_Read+0x518>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	b2d1      	uxtb	r1, r2
 80078b2:	4a4c      	ldr	r2, [pc, #304]	; (80079e4 <RDA5807_Read+0x534>)
 80078b4:	54d1      	strb	r1, [r2, r3]
			idx++;
 80078b6:	4b44      	ldr	r3, [pc, #272]	; (80079c8 <RDA5807_Read+0x518>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	4a42      	ldr	r2, [pc, #264]	; (80079c8 <RDA5807_Read+0x518>)
 80078be:	6013      	str	r3, [r2, #0]
			RDStextbuffer[idx] = (block4 & 0x00FF);
 80078c0:	4b4d      	ldr	r3, [pc, #308]	; (80079f8 <RDA5807_Read+0x548>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	4b40      	ldr	r3, [pc, #256]	; (80079c8 <RDA5807_Read+0x518>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	b2d1      	uxtb	r1, r2
 80078ca:	4a46      	ldr	r2, [pc, #280]	; (80079e4 <RDA5807_Read+0x534>)
 80078cc:	54d1      	strb	r1, [r2, r3]
			idx++;
 80078ce:	4b3e      	ldr	r3, [pc, #248]	; (80079c8 <RDA5807_Read+0x518>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a3c      	ldr	r2, [pc, #240]	; (80079c8 <RDA5807_Read+0x518>)
 80078d6:	6013      	str	r3, [r2, #0]
		break;
 80078d8:	e0a6      	b.n	8007a28 <RDA5807_Read+0x578>
		if (rdsblockerror < 3)
 80078da:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <RDA5807_Read+0x540>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	dc21      	bgt.n	8007926 <RDA5807_Read+0x476>
			offset = (block4) & 0x3F; // 6 bits
 80078e2:	4b45      	ldr	r3, [pc, #276]	; (80079f8 <RDA5807_Read+0x548>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ea:	4a44      	ldr	r2, [pc, #272]	; (80079fc <RDA5807_Read+0x54c>)
 80078ec:	6013      	str	r3, [r2, #0]
			mins = (block4 >> 6) & 0x3F; // 6 bits
 80078ee:	4b42      	ldr	r3, [pc, #264]	; (80079f8 <RDA5807_Read+0x548>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	119b      	asrs	r3, r3, #6
 80078f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078f8:	4a41      	ldr	r2, [pc, #260]	; (8007a00 <RDA5807_Read+0x550>)
 80078fa:	6013      	str	r3, [r2, #0]
			mins += 60 * (((block3 & 0x0001) << 4) | ((block4 >> 12) & 0x0F));
 80078fc:	4b3d      	ldr	r3, [pc, #244]	; (80079f4 <RDA5807_Read+0x544>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	f003 0210 	and.w	r2, r3, #16
 8007906:	4b3c      	ldr	r3, [pc, #240]	; (80079f8 <RDA5807_Read+0x548>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	131b      	asrs	r3, r3, #12
 800790c:	f003 030f 	and.w	r3, r3, #15
 8007910:	431a      	orrs	r2, r3
 8007912:	4613      	mov	r3, r2
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	461a      	mov	r2, r3
 800791c:	4b38      	ldr	r3, [pc, #224]	; (8007a00 <RDA5807_Read+0x550>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4413      	add	r3, r2
 8007922:	4a37      	ldr	r2, [pc, #220]	; (8007a00 <RDA5807_Read+0x550>)
 8007924:	6013      	str	r3, [r2, #0]
		if (offset & 0x20)
 8007926:	4b35      	ldr	r3, [pc, #212]	; (80079fc <RDA5807_Read+0x54c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <RDA5807_Read+0x4a0>
			mins -= 30 * (offset & 0x1F);
 8007932:	4b32      	ldr	r3, [pc, #200]	; (80079fc <RDA5807_Read+0x54c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 021f 	and.w	r2, r3, #31
 800793a:	4613      	mov	r3, r2
 800793c:	0112      	lsls	r2, r2, #4
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	461a      	mov	r2, r3
 8007944:	4b2e      	ldr	r3, [pc, #184]	; (8007a00 <RDA5807_Read+0x550>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4413      	add	r3, r2
 800794a:	4a2d      	ldr	r2, [pc, #180]	; (8007a00 <RDA5807_Read+0x550>)
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	e00d      	b.n	800796c <RDA5807_Read+0x4bc>
			mins += 30 * (offset & 0x1F);
 8007950:	4b2a      	ldr	r3, [pc, #168]	; (80079fc <RDA5807_Read+0x54c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 021f 	and.w	r2, r3, #31
 8007958:	4613      	mov	r3, r2
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	461a      	mov	r2, r3
 8007962:	4b27      	ldr	r3, [pc, #156]	; (8007a00 <RDA5807_Read+0x550>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4413      	add	r3, r2
 8007968:	4a25      	ldr	r2, [pc, #148]	; (8007a00 <RDA5807_Read+0x550>)
 800796a:	6013      	str	r3, [r2, #0]
		if (mins > 0 && mins < 1500)
 800796c:	4b24      	ldr	r3, [pc, #144]	; (8007a00 <RDA5807_Read+0x550>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	dd5b      	ble.n	8007a2c <RDA5807_Read+0x57c>
 8007974:	4b22      	ldr	r3, [pc, #136]	; (8007a00 <RDA5807_Read+0x550>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f240 52db 	movw	r2, #1499	; 0x5db
 800797c:	4293      	cmp	r3, r2
 800797e:	dc55      	bgt.n	8007a2c <RDA5807_Read+0x57c>
			sprintf(CTtime, "CT %2d:%02d", (mins / 60), (mins % 60));  // CT time formatted string
 8007980:	4b1f      	ldr	r3, [pc, #124]	; (8007a00 <RDA5807_Read+0x550>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a1f      	ldr	r2, [pc, #124]	; (8007a04 <RDA5807_Read+0x554>)
 8007986:	fb82 1203 	smull	r1, r2, r2, r3
 800798a:	441a      	add	r2, r3
 800798c:	1152      	asrs	r2, r2, #5
 800798e:	17db      	asrs	r3, r3, #31
 8007990:	1ad0      	subs	r0, r2, r3
 8007992:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <RDA5807_Read+0x550>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b1b      	ldr	r3, [pc, #108]	; (8007a04 <RDA5807_Read+0x554>)
 8007998:	fb83 1302 	smull	r1, r3, r3, r2
 800799c:	4413      	add	r3, r2
 800799e:	1159      	asrs	r1, r3, #5
 80079a0:	17d3      	asrs	r3, r2, #31
 80079a2:	1ac9      	subs	r1, r1, r3
 80079a4:	460b      	mov	r3, r1
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	1a5b      	subs	r3, r3, r1
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	1ad1      	subs	r1, r2, r3
 80079ae:	460b      	mov	r3, r1
 80079b0:	4602      	mov	r2, r0
 80079b2:	4915      	ldr	r1, [pc, #84]	; (8007a08 <RDA5807_Read+0x558>)
 80079b4:	4815      	ldr	r0, [pc, #84]	; (8007a0c <RDA5807_Read+0x55c>)
 80079b6:	f00e f93d 	bl	8015c34 <siprintf>
		break;
 80079ba:	e037      	b.n	8007a2c <RDA5807_Read+0x57c>
		break;
 80079bc:	bf00      	nop
 80079be:	e036      	b.n	8007a2e <RDA5807_Read+0x57e>
 80079c0:	2000023c 	.word	0x2000023c
 80079c4:	20000454 	.word	0x20000454
 80079c8:	200003a0 	.word	0x200003a0
 80079cc:	200003f8 	.word	0x200003f8
 80079d0:	20000394 	.word	0x20000394
 80079d4:	20000254 	.word	0x20000254
 80079d8:	20000460 	.word	0x20000460
 80079dc:	20000470 	.word	0x20000470
 80079e0:	2000036c 	.word	0x2000036c
 80079e4:	200003a4 	.word	0x200003a4
 80079e8:	2000025c 	.word	0x2000025c
 80079ec:	20000370 	.word	0x20000370
 80079f0:	200004a0 	.word	0x200004a0
 80079f4:	2000044c 	.word	0x2000044c
 80079f8:	20000250 	.word	0x20000250
 80079fc:	2000046c 	.word	0x2000046c
 8007a00:	200003e8 	.word	0x200003e8
 8007a04:	88888889 	.word	0x88888889
 8007a08:	0801804c 	.word	0x0801804c
 8007a0c:	200003ec 	.word	0x200003ec
		break;
 8007a10:	bf00      	nop
 8007a12:	e00c      	b.n	8007a2e <RDA5807_Read+0x57e>
		break;
 8007a14:	bf00      	nop
 8007a16:	e00a      	b.n	8007a2e <RDA5807_Read+0x57e>
		break;
 8007a18:	bf00      	nop
 8007a1a:	e008      	b.n	8007a2e <RDA5807_Read+0x57e>
		break;
 8007a1c:	bf00      	nop
 8007a1e:	e006      	b.n	8007a2e <RDA5807_Read+0x57e>
		break;
 8007a20:	bf00      	nop
 8007a22:	e004      	b.n	8007a2e <RDA5807_Read+0x57e>
		break;
 8007a24:	bf00      	nop
 8007a26:	e002      	b.n	8007a2e <RDA5807_Read+0x57e>
		break;
 8007a28:	bf00      	nop
 8007a2a:	e000      	b.n	8007a2e <RDA5807_Read+0x57e>
		break;
 8007a2c:	bf00      	nop
	    }
    }
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop

08007a38 <TDA7719_init>:
// Function definitions
//--------------------------------------------------------------

//Function used for prototyping and initialing preamp on startup of MCU
void TDA7719_init(void)
    {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x7) | (5 & 0x7);		//Main source selector - input IN1
 8007a3c:	4ba4      	ldr	r3, [pc, #656]	; (8007cd0 <TDA7719_init+0x298>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	f023 0307 	bic.w	r3, r3, #7
 8007a46:	b25b      	sxtb	r3, r3
 8007a48:	f043 0305 	orr.w	r3, r3, #5
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	4b9f      	ldr	r3, [pc, #636]	; (8007cd0 <TDA7719_init+0x298>)
 8007a52:	701a      	strb	r2, [r3, #0]
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x8) | ((1 << 3) & 0x8);	//MD1/2 confg for main selector - MD2
 8007a54:	4b9e      	ldr	r3, [pc, #632]	; (8007cd0 <TDA7719_init+0x298>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f043 0308 	orr.w	r3, r3, #8
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	4b9c      	ldr	r3, [pc, #624]	; (8007cd0 <TDA7719_init+0x298>)
 8007a60:	701a      	strb	r2, [r3, #0]
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x10) | ((0 << 4) & 0x10); 	// main source input gain select - +3dB
 8007a62:	4b9b      	ldr	r3, [pc, #620]	; (8007cd0 <TDA7719_init+0x298>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f023 0310 	bic.w	r3, r3, #16
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	4b98      	ldr	r3, [pc, #608]	; (8007cd0 <TDA7719_init+0x298>)
 8007a6e:	701a      	strb	r2, [r3, #0]
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0xE0) | ((0b101 << 5) & 0xE0); 	// CFG5
 8007a70:	4b97      	ldr	r3, [pc, #604]	; (8007cd0 <TDA7719_init+0x298>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	b25b      	sxtb	r3, r3
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	b25b      	sxtb	r3, r3
 8007a7c:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8007a80:	b25b      	sxtb	r3, r3
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	4b92      	ldr	r3, [pc, #584]	; (8007cd0 <TDA7719_init+0x298>)
 8007a86:	701a      	strb	r2, [r3, #0]
	I2C_send(TDA7719_INPUT, TDA7719_registers[TDA7719_INPUT]);
 8007a88:	4b91      	ldr	r3, [pc, #580]	; (8007cd0 <TDA7719_init+0x298>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	2000      	movs	r0, #0
 8007a90:	f001 f880 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x7) | (2 & 0x7);		//second source selector - IN2
 8007a94:	4b8e      	ldr	r3, [pc, #568]	; (8007cd0 <TDA7719_init+0x298>)
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	b25b      	sxtb	r3, r3
 8007aa0:	f043 0302 	orr.w	r3, r3, #2
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	4b89      	ldr	r3, [pc, #548]	; (8007cd0 <TDA7719_init+0x298>)
 8007aaa:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x8) | ((0 << 3) & 0x8);	//MD1/2 config for 2nd - MD2
 8007aac:	4b88      	ldr	r3, [pc, #544]	; (8007cd0 <TDA7719_init+0x298>)
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	f023 0308 	bic.w	r3, r3, #8
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	4b86      	ldr	r3, [pc, #536]	; (8007cd0 <TDA7719_init+0x298>)
 8007ab8:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x10) | ((0 << 4) & 0x10);	//2nd Source input gain - +3dB
 8007aba:	4b85      	ldr	r3, [pc, #532]	; (8007cd0 <TDA7719_init+0x298>)
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	f023 0310 	bic.w	r3, r3, #16
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <TDA7719_init+0x298>)
 8007ac6:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x20) | ((1 << 5) & 0x20);	//QD2 Bypass (front) - OFF
 8007ac8:	4b81      	ldr	r3, [pc, #516]	; (8007cd0 <TDA7719_init+0x298>)
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	f043 0320 	orr.w	r3, r3, #32
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	4b7f      	ldr	r3, [pc, #508]	; (8007cd0 <TDA7719_init+0x298>)
 8007ad4:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x40) | ((1 << 6) & 0x40);	//QD3 Bypass (rear) - OFF
 8007ad6:	4b7e      	ldr	r3, [pc, #504]	; (8007cd0 <TDA7719_init+0x298>)
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	4b7b      	ldr	r3, [pc, #492]	; (8007cd0 <TDA7719_init+0x298>)
 8007ae2:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x80) | ((1 << 7) & 0x80); 	//QD4 Bypass (Subwoofer) - OFF
 8007ae4:	4b7a      	ldr	r3, [pc, #488]	; (8007cd0 <TDA7719_init+0x298>)
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	4b78      	ldr	r3, [pc, #480]	; (8007cd0 <TDA7719_init+0x298>)
 8007af0:	705a      	strb	r2, [r3, #1]
	I2C_send(TDA7719_INPUT_2, TDA7719_registers[TDA7719_INPUT_2]);
 8007af2:	4b77      	ldr	r3, [pc, #476]	; (8007cd0 <TDA7719_init+0x298>)
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	4619      	mov	r1, r3
 8007af8:	2001      	movs	r0, #1
 8007afa:	f001 f84b 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_MIX_SOUR] = (TDA7719_registers[TDA7719_MIX_SOUR] & ~0x7) | (0 & 0x7); 	//Mixing Source Selector - IN0
 8007afe:	4b74      	ldr	r3, [pc, #464]	; (8007cd0 <TDA7719_init+0x298>)
 8007b00:	789b      	ldrb	r3, [r3, #2]
 8007b02:	f023 0307 	bic.w	r3, r3, #7
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	4b71      	ldr	r3, [pc, #452]	; (8007cd0 <TDA7719_init+0x298>)
 8007b0a:	709a      	strb	r2, [r3, #2]
	TDA7719_registers[TDA7719_MIX_SOUR] = (TDA7719_registers[TDA7719_MIX_SOUR] & ~0xF8) | ((0<< 3) & 0xF8);	//Mixing attenuator - 0dB
 8007b0c:	4b70      	ldr	r3, [pc, #448]	; (8007cd0 <TDA7719_init+0x298>)
 8007b0e:	789b      	ldrb	r3, [r3, #2]
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	4b6e      	ldr	r3, [pc, #440]	; (8007cd0 <TDA7719_init+0x298>)
 8007b18:	709a      	strb	r2, [r3, #2]
	I2C_send(TDA7719_MIX_SOUR, TDA7719_registers[TDA7719_MIX_SOUR]);
 8007b1a:	4b6d      	ldr	r3, [pc, #436]	; (8007cd0 <TDA7719_init+0x298>)
 8007b1c:	789b      	ldrb	r3, [r3, #2]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	2002      	movs	r0, #2
 8007b22:	f001 f837 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x1) | ((1 << 0) & 0x1);	//Mix to Front left - OFF
 8007b26:	4b6a      	ldr	r3, [pc, #424]	; (8007cd0 <TDA7719_init+0x298>)
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	f043 0301 	orr.w	r3, r3, #1
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	4b67      	ldr	r3, [pc, #412]	; (8007cd0 <TDA7719_init+0x298>)
 8007b32:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x2) | ((1 << 1) & 0x2);	//Mix to front right - OFF
 8007b34:	4b66      	ldr	r3, [pc, #408]	; (8007cd0 <TDA7719_init+0x298>)
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	f043 0302 	orr.w	r3, r3, #2
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	4b64      	ldr	r3, [pc, #400]	; (8007cd0 <TDA7719_init+0x298>)
 8007b40:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x4) | ((1 << 2) & 0x4);	//Mix to Rear left - OFF
 8007b42:	4b63      	ldr	r3, [pc, #396]	; (8007cd0 <TDA7719_init+0x298>)
 8007b44:	78db      	ldrb	r3, [r3, #3]
 8007b46:	f043 0304 	orr.w	r3, r3, #4
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	4b60      	ldr	r3, [pc, #384]	; (8007cd0 <TDA7719_init+0x298>)
 8007b4e:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x8) | ((1 << 3) & 0x8);	//Mix to Rear right - OFF
 8007b50:	4b5f      	ldr	r3, [pc, #380]	; (8007cd0 <TDA7719_init+0x298>)
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	f043 0308 	orr.w	r3, r3, #8
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	4b5d      	ldr	r3, [pc, #372]	; (8007cd0 <TDA7719_init+0x298>)
 8007b5c:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x10) | ((0 << 4) & 0x10);//Rear speaker input confg - Direct path/2nd source   1 - Main signal
 8007b5e:	4b5c      	ldr	r3, [pc, #368]	; (8007cd0 <TDA7719_init+0x298>)
 8007b60:	78db      	ldrb	r3, [r3, #3]
 8007b62:	f023 0310 	bic.w	r3, r3, #16
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	4b59      	ldr	r3, [pc, #356]	; (8007cd0 <TDA7719_init+0x298>)
 8007b6a:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x20) | ((1 << 5) & 0x20);//Reference output select - internal Vre 3V3
 8007b6c:	4b58      	ldr	r3, [pc, #352]	; (8007cd0 <TDA7719_init+0x298>)
 8007b6e:	78db      	ldrb	r3, [r3, #3]
 8007b70:	f043 0320 	orr.w	r3, r3, #32
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	4b56      	ldr	r3, [pc, #344]	; (8007cd0 <TDA7719_init+0x298>)
 8007b78:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x40) | ((1 << 6) & 0x40); //Level meter reset - RESET
 8007b7a:	4b55      	ldr	r3, [pc, #340]	; (8007cd0 <TDA7719_init+0x298>)
 8007b7c:	78db      	ldrb	r3, [r3, #3]
 8007b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	4b52      	ldr	r3, [pc, #328]	; (8007cd0 <TDA7719_init+0x298>)
 8007b86:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x80) | ((1 << 7) & 0x80); //DC offset Detector - DC offset detector
 8007b88:	4b51      	ldr	r3, [pc, #324]	; (8007cd0 <TDA7719_init+0x298>)
 8007b8a:	78db      	ldrb	r3, [r3, #3]
 8007b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	4b4f      	ldr	r3, [pc, #316]	; (8007cd0 <TDA7719_init+0x298>)
 8007b94:	70da      	strb	r2, [r3, #3]
	I2C_send(TDA7719_MIX_CONT, TDA7719_registers[TDA7719_MIX_CONT]);
 8007b96:	4b4e      	ldr	r3, [pc, #312]	; (8007cd0 <TDA7719_init+0x298>)
 8007b98:	78db      	ldrb	r3, [r3, #3]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	2003      	movs	r0, #3
 8007b9e:	f000 fff9 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x1) | ((1 << 0) & 0x1);		//Soft mute - OFF
 8007ba2:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <TDA7719_init+0x298>)
 8007ba4:	791b      	ldrb	r3, [r3, #4]
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	4b48      	ldr	r3, [pc, #288]	; (8007cd0 <TDA7719_init+0x298>)
 8007bae:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x2) | ((0 << 1) & 0x2);		//Pin influence for mute - IIC
 8007bb0:	4b47      	ldr	r3, [pc, #284]	; (8007cd0 <TDA7719_init+0x298>)
 8007bb2:	791b      	ldrb	r3, [r3, #4]
 8007bb4:	f023 0302 	bic.w	r3, r3, #2
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	4b45      	ldr	r3, [pc, #276]	; (8007cd0 <TDA7719_init+0x298>)
 8007bbc:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0xC) | ((0 << 2) & 0xC);		//Soft Mute Time - 0.48ms
 8007bbe:	4b44      	ldr	r3, [pc, #272]	; (8007cd0 <TDA7719_init+0x298>)
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	f023 030c 	bic.w	r3, r3, #12
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <TDA7719_init+0x298>)
 8007bca:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x10) | ((1 << 4) & 0x10);	//Subwoofer input config - Bass Output
 8007bcc:	4b40      	ldr	r3, [pc, #256]	; (8007cd0 <TDA7719_init+0x298>)
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	f043 0310 	orr.w	r3, r3, #16
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	4b3e      	ldr	r3, [pc, #248]	; (8007cd0 <TDA7719_init+0x298>)
 8007bd8:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x20) | ((1 << 5) & 0x20);	//Subwoofer enable (OUTL3 & OUTR3) - OFF
 8007bda:	4b3d      	ldr	r3, [pc, #244]	; (8007cd0 <TDA7719_init+0x298>)
 8007bdc:	791b      	ldrb	r3, [r3, #4]
 8007bde:	f043 0320 	orr.w	r3, r3, #32
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	4b3a      	ldr	r3, [pc, #232]	; (8007cd0 <TDA7719_init+0x298>)
 8007be6:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x40) | ((1 << 6) & 0x40);	//Fast charge - OFF
 8007be8:	4b39      	ldr	r3, [pc, #228]	; (8007cd0 <TDA7719_init+0x298>)
 8007bea:	791b      	ldrb	r3, [r3, #4]
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	4b37      	ldr	r3, [pc, #220]	; (8007cd0 <TDA7719_init+0x298>)
 8007bf4:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x80) | ((1 << 7) & 0x80);	//Anti-alias filter - OFF
 8007bf6:	4b36      	ldr	r3, [pc, #216]	; (8007cd0 <TDA7719_init+0x298>)
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	4b33      	ldr	r3, [pc, #204]	; (8007cd0 <TDA7719_init+0x298>)
 8007c02:	711a      	strb	r2, [r3, #4]
	I2C_send(TDA7719_MUTE , TDA7719_registers[TDA7719_MUTE]);
 8007c04:	4b32      	ldr	r3, [pc, #200]	; (8007cd0 <TDA7719_init+0x298>)
 8007c06:	791b      	ldrb	r3, [r3, #4]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	2004      	movs	r0, #4
 8007c0c:	f000 ffc2 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x1) | ((1 << 0) & 0x1);	//Loudness soft step - OFF
 8007c10:	4b2f      	ldr	r3, [pc, #188]	; (8007cd0 <TDA7719_init+0x298>)
 8007c12:	795b      	ldrb	r3, [r3, #5]
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	4b2d      	ldr	r3, [pc, #180]	; (8007cd0 <TDA7719_init+0x298>)
 8007c1c:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x2) | ((1 << 1) & 0x2);	//Volume soft step - OFF
 8007c1e:	4b2c      	ldr	r3, [pc, #176]	; (8007cd0 <TDA7719_init+0x298>)
 8007c20:	795b      	ldrb	r3, [r3, #5]
 8007c22:	f043 0302 	orr.w	r3, r3, #2
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	4b29      	ldr	r3, [pc, #164]	; (8007cd0 <TDA7719_init+0x298>)
 8007c2a:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x4) | ((1 << 2) & 0x4);	//Treble soft step - OFF
 8007c2c:	4b28      	ldr	r3, [pc, #160]	; (8007cd0 <TDA7719_init+0x298>)
 8007c2e:	795b      	ldrb	r3, [r3, #5]
 8007c30:	f043 0304 	orr.w	r3, r3, #4
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <TDA7719_init+0x298>)
 8007c38:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x8) | ((1 << 3) & 0x8);	//Middle soft step - OFF
 8007c3a:	4b25      	ldr	r3, [pc, #148]	; (8007cd0 <TDA7719_init+0x298>)
 8007c3c:	795b      	ldrb	r3, [r3, #5]
 8007c3e:	f043 0308 	orr.w	r3, r3, #8
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	4b22      	ldr	r3, [pc, #136]	; (8007cd0 <TDA7719_init+0x298>)
 8007c46:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x10) | ((1 << 4) & 0x10);	//Bass soft step - OFF
 8007c48:	4b21      	ldr	r3, [pc, #132]	; (8007cd0 <TDA7719_init+0x298>)
 8007c4a:	795b      	ldrb	r3, [r3, #5]
 8007c4c:	f043 0310 	orr.w	r3, r3, #16
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	4b1f      	ldr	r3, [pc, #124]	; (8007cd0 <TDA7719_init+0x298>)
 8007c54:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x20) | ((1 << 5) & 0x20);	//Speaker LF soft step - OFF
 8007c56:	4b1e      	ldr	r3, [pc, #120]	; (8007cd0 <TDA7719_init+0x298>)
 8007c58:	795b      	ldrb	r3, [r3, #5]
 8007c5a:	f043 0320 	orr.w	r3, r3, #32
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <TDA7719_init+0x298>)
 8007c62:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x40) | ((1 << 6) & 0x40);	//Speaker RF soft step - OFF
 8007c64:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <TDA7719_init+0x298>)
 8007c66:	795b      	ldrb	r3, [r3, #5]
 8007c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	4b18      	ldr	r3, [pc, #96]	; (8007cd0 <TDA7719_init+0x298>)
 8007c70:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x80) | ((1 << 7) & 0x80);	//Speaker RF soft step - OFF
 8007c72:	4b17      	ldr	r3, [pc, #92]	; (8007cd0 <TDA7719_init+0x298>)
 8007c74:	795b      	ldrb	r3, [r3, #5]
 8007c76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <TDA7719_init+0x298>)
 8007c7e:	715a      	strb	r2, [r3, #5]
	I2C_send(TDA7719_SOFT_1 , TDA7719_registers[TDA7719_SOFT_1]);
 8007c80:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <TDA7719_init+0x298>)
 8007c82:	795b      	ldrb	r3, [r3, #5]
 8007c84:	4619      	mov	r1, r3
 8007c86:	2005      	movs	r0, #5
 8007c88:	f000 ff84 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x1) | ((1 << 0) & 0x1);	//Speaker RR soft step - OFF
 8007c8c:	4b10      	ldr	r3, [pc, #64]	; (8007cd0 <TDA7719_init+0x298>)
 8007c8e:	799b      	ldrb	r3, [r3, #6]
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	4b0e      	ldr	r3, [pc, #56]	; (8007cd0 <TDA7719_init+0x298>)
 8007c98:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x2) | ((1 << 1) & 0x2);	//Subwoofer left soft step - OFF
 8007c9a:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <TDA7719_init+0x298>)
 8007c9c:	799b      	ldrb	r3, [r3, #6]
 8007c9e:	f043 0302 	orr.w	r3, r3, #2
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <TDA7719_init+0x298>)
 8007ca6:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x4) | ((1 << 2) & 0x4);	//Subwoofer right soft step - OFF
 8007ca8:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <TDA7719_init+0x298>)
 8007caa:	799b      	ldrb	r3, [r3, #6]
 8007cac:	f043 0304 	orr.w	r3, r3, #4
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <TDA7719_init+0x298>)
 8007cb4:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x8) | ((1 << 3) & 0x8);	//soft step time - 10ms
 8007cb6:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <TDA7719_init+0x298>)
 8007cb8:	799b      	ldrb	r3, [r3, #6]
 8007cba:	f043 0308 	orr.w	r3, r3, #8
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	4b03      	ldr	r3, [pc, #12]	; (8007cd0 <TDA7719_init+0x298>)
 8007cc2:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x30) | ((0 << 4) & 0x30);	//Zero-comparator window size - +100mV
 8007cc4:	4b02      	ldr	r3, [pc, #8]	; (8007cd0 <TDA7719_init+0x298>)
 8007cc6:	799b      	ldrb	r3, [r3, #6]
 8007cc8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007ccc:	e002      	b.n	8007cd4 <TDA7719_init+0x29c>
 8007cce:	bf00      	nop
 8007cd0:	20000374 	.word	0x20000374
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	4b8b      	ldr	r3, [pc, #556]	; (8007f04 <TDA7719_init+0x4cc>)
 8007cd8:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0xC0) | ((3 << 6) & 0xC0);	//Spike rejection time constant - 44us
 8007cda:	4b8a      	ldr	r3, [pc, #552]	; (8007f04 <TDA7719_init+0x4cc>)
 8007cdc:	799b      	ldrb	r3, [r3, #6]
 8007cde:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	4b87      	ldr	r3, [pc, #540]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ce6:	719a      	strb	r2, [r3, #6]
	I2C_send(TDA7719_SOFT_2 , TDA7719_registers[TDA7719_SOFT_2]);
 8007ce8:	4b86      	ldr	r3, [pc, #536]	; (8007f04 <TDA7719_init+0x4cc>)
 8007cea:	799b      	ldrb	r3, [r3, #6]
 8007cec:	4619      	mov	r1, r3
 8007cee:	2006      	movs	r0, #6
 8007cf0:	f000 ff50 	bl	8008b94 <I2C_send>


	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x30) | ((0b1111 << 4) & 0x30);	//Loudness attenuation - 0dB
 8007cf4:	4b83      	ldr	r3, [pc, #524]	; (8007f04 <TDA7719_init+0x4cc>)
 8007cf6:	79db      	ldrb	r3, [r3, #7]
 8007cf8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	4b81      	ldr	r3, [pc, #516]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d00:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x40) | ((0 << 6) & 0x40);	//Center frequency - Flat
 8007d02:	4b80      	ldr	r3, [pc, #512]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d04:	79db      	ldrb	r3, [r3, #7]
 8007d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	4b7d      	ldr	r3, [pc, #500]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d0e:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x80) | ((0 << 7) & 0x80);	//High boost - OFF
 8007d10:	4b7c      	ldr	r3, [pc, #496]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d12:	79db      	ldrb	r3, [r3, #7]
 8007d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	4b7a      	ldr	r3, [pc, #488]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d1c:	71da      	strb	r2, [r3, #7]
	I2C_send(TDA7719_LOUD , TDA7719_registers[TDA7719_LOUD]);
 8007d1e:	4b79      	ldr	r3, [pc, #484]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d20:	79db      	ldrb	r3, [r3, #7]
 8007d22:	4619      	mov	r1, r3
 8007d24:	2007      	movs	r0, #7
 8007d26:	f000 ff35 	bl	8008b94 <I2C_send>


	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x1F) | ((0b11100 << 0) & 0x1F);	//Volume gain/attenuation - 0dB
 8007d2a:	4b76      	ldr	r3, [pc, #472]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d2c:	7a1b      	ldrb	r3, [r3, #8]
 8007d2e:	b25b      	sxtb	r3, r3
 8007d30:	f023 031f 	bic.w	r3, r3, #31
 8007d34:	b25b      	sxtb	r3, r3
 8007d36:	f043 031c 	orr.w	r3, r3, #28
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	4b71      	ldr	r3, [pc, #452]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d40:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x40) | ((0 << 6) & 0x40);		//Output gain - 0dB
 8007d42:	4b70      	ldr	r3, [pc, #448]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d44:	7a1b      	ldrb	r3, [r3, #8]
 8007d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	4b6d      	ldr	r3, [pc, #436]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d4e:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x80) | ((1 << 7) & 0x80);		//soft step action - wait
 8007d50:	4b6c      	ldr	r3, [pc, #432]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d52:	7a1b      	ldrb	r3, [r3, #8]
 8007d54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	4b6a      	ldr	r3, [pc, #424]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d5c:	721a      	strb	r2, [r3, #8]
	I2C_send(TDA7719_VOL , TDA7719_registers[TDA7719_VOL]);
 8007d5e:	4b69      	ldr	r3, [pc, #420]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d60:	7a1b      	ldrb	r3, [r3, #8]
 8007d62:	4619      	mov	r1, r3
 8007d64:	2008      	movs	r0, #8
 8007d66:	f000 ff15 	bl	8008b94 <I2C_send>


	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x1F) | ((0b11111 << 0) & 0x1F);//Treble filter gain/attenuation - 0dB
 8007d6a:	4b66      	ldr	r3, [pc, #408]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d6c:	7a5b      	ldrb	r3, [r3, #9]
 8007d6e:	f043 031f 	orr.w	r3, r3, #31
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	4b63      	ldr	r3, [pc, #396]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d76:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x60) | ((0b11 << 5) & 0x60);	//treble center freq - 12.5kHz
 8007d78:	4b62      	ldr	r3, [pc, #392]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d7a:	7a5b      	ldrb	r3, [r3, #9]
 8007d7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	4b60      	ldr	r3, [pc, #384]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d84:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x80) | ((1 << 7) & 0x80);	//Soft step action - wait
 8007d86:	4b5f      	ldr	r3, [pc, #380]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d88:	7a5b      	ldrb	r3, [r3, #9]
 8007d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	4b5c      	ldr	r3, [pc, #368]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d92:	725a      	strb	r2, [r3, #9]
	I2C_send(TDA7719_TRBLE , TDA7719_registers[TDA7719_TRBLE]);
 8007d94:	4b5b      	ldr	r3, [pc, #364]	; (8007f04 <TDA7719_init+0x4cc>)
 8007d96:	7a5b      	ldrb	r3, [r3, #9]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	2009      	movs	r0, #9
 8007d9c:	f000 fefa 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x1F) | ((0b11111 << 0) & 0x1F);//Middle filter gain/attenuation - 0dB
 8007da0:	4b58      	ldr	r3, [pc, #352]	; (8007f04 <TDA7719_init+0x4cc>)
 8007da2:	7a9b      	ldrb	r3, [r3, #10]
 8007da4:	f043 031f 	orr.w	r3, r3, #31
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	4b56      	ldr	r3, [pc, #344]	; (8007f04 <TDA7719_init+0x4cc>)
 8007dac:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x60) | ((0b11 << 5) & 0x60);	//middle q factor - 0.75
 8007dae:	4b55      	ldr	r3, [pc, #340]	; (8007f04 <TDA7719_init+0x4cc>)
 8007db0:	7a9b      	ldrb	r3, [r3, #10]
 8007db2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	4b52      	ldr	r3, [pc, #328]	; (8007f04 <TDA7719_init+0x4cc>)
 8007dba:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 8007dbc:	4b51      	ldr	r3, [pc, #324]	; (8007f04 <TDA7719_init+0x4cc>)
 8007dbe:	7a9b      	ldrb	r3, [r3, #10]
 8007dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	4b4f      	ldr	r3, [pc, #316]	; (8007f04 <TDA7719_init+0x4cc>)
 8007dc8:	729a      	strb	r2, [r3, #10]
	I2C_send(TDA7719_MIDDLE , TDA7719_registers[TDA7719_MIDDLE]);
 8007dca:	4b4e      	ldr	r3, [pc, #312]	; (8007f04 <TDA7719_init+0x4cc>)
 8007dcc:	7a9b      	ldrb	r3, [r3, #10]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	200a      	movs	r0, #10
 8007dd2:	f000 fedf 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x1F) | ((0b11111 << 0) & 0x1F);	//Bass filter gain/attenuation - 0dB
 8007dd6:	4b4b      	ldr	r3, [pc, #300]	; (8007f04 <TDA7719_init+0x4cc>)
 8007dd8:	7adb      	ldrb	r3, [r3, #11]
 8007dda:	f043 031f 	orr.w	r3, r3, #31
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	4b48      	ldr	r3, [pc, #288]	; (8007f04 <TDA7719_init+0x4cc>)
 8007de2:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x60) | ((0b11 << 5) & 0x60);	//Bass Q factor - 1.25
 8007de4:	4b47      	ldr	r3, [pc, #284]	; (8007f04 <TDA7719_init+0x4cc>)
 8007de6:	7adb      	ldrb	r3, [r3, #11]
 8007de8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4b45      	ldr	r3, [pc, #276]	; (8007f04 <TDA7719_init+0x4cc>)
 8007df0:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x80) | ((1 << 7) & 0x80);	//Soft step action - wait
 8007df2:	4b44      	ldr	r3, [pc, #272]	; (8007f04 <TDA7719_init+0x4cc>)
 8007df4:	7adb      	ldrb	r3, [r3, #11]
 8007df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	4b41      	ldr	r3, [pc, #260]	; (8007f04 <TDA7719_init+0x4cc>)
 8007dfe:	72da      	strb	r2, [r3, #11]
	I2C_send(TDA7719_BASS , TDA7719_registers[TDA7719_BASS]);
 8007e00:	4b40      	ldr	r3, [pc, #256]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e02:	7adb      	ldrb	r3, [r3, #11]
 8007e04:	4619      	mov	r1, r3
 8007e06:	200b      	movs	r0, #11
 8007e08:	f000 fec4 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x3) | ((0 << 0) & 0x3);	//Subwoofer Cut-off frequency - Flat
 8007e0c:	4b3d      	ldr	r3, [pc, #244]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e0e:	7b1b      	ldrb	r3, [r3, #12]
 8007e10:	f023 0303 	bic.w	r3, r3, #3
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	4b3b      	ldr	r3, [pc, #236]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e18:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x4) | ((0 << 2) & 0x4);	//Subwoofer output phase - 0deg
 8007e1a:	4b3a      	ldr	r3, [pc, #232]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e1c:	7b1b      	ldrb	r3, [r3, #12]
 8007e1e:	f023 0304 	bic.w	r3, r3, #4
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	4b37      	ldr	r3, [pc, #220]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e26:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x18) | ((0 << 3) & 0x18);	//Middle Center Frequency - 500Hz
 8007e28:	4b36      	ldr	r3, [pc, #216]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e2a:	7b1b      	ldrb	r3, [r3, #12]
 8007e2c:	f023 0318 	bic.w	r3, r3, #24
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	4b34      	ldr	r3, [pc, #208]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e34:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x60) | ((0 << 5) & 0x60);	//Bass center Frequency - 60 Hz
 8007e36:	4b33      	ldr	r3, [pc, #204]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e38:	7b1b      	ldrb	r3, [r3, #12]
 8007e3a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b30      	ldr	r3, [pc, #192]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e42:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x80) | ((0 << 7) & 0x80);	//Bass DC mode - OFF
 8007e44:	4b2f      	ldr	r3, [pc, #188]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e46:	7b1b      	ldrb	r3, [r3, #12]
 8007e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	4b2d      	ldr	r3, [pc, #180]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e50:	731a      	strb	r2, [r3, #12]
	I2C_send(TDA7719_SUB_M_B , TDA7719_registers[TDA7719_SUB_M_B]);
 8007e52:	4b2c      	ldr	r3, [pc, #176]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e54:	7b1b      	ldrb	r3, [r3, #12]
 8007e56:	4619      	mov	r1, r3
 8007e58:	200c      	movs	r0, #12
 8007e5a:	f000 fe9b 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation left front - 0dB
 8007e5e:	4b29      	ldr	r3, [pc, #164]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e60:	7b5b      	ldrb	r3, [r3, #13]
 8007e62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	4b26      	ldr	r3, [pc, #152]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e6a:	735a      	strb	r2, [r3, #13]
	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x80) | ((1 << 7) & 0x80);	//Soft step action - wait
 8007e6c:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e6e:	7b5b      	ldrb	r3, [r3, #13]
 8007e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	4b23      	ldr	r3, [pc, #140]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e78:	735a      	strb	r2, [r3, #13]
	I2C_send(TDA7719_ATT_LF , TDA7719_registers[TDA7719_ATT_LF]);
 8007e7a:	4b22      	ldr	r3, [pc, #136]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e7c:	7b5b      	ldrb	r3, [r3, #13]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	200d      	movs	r0, #13
 8007e82:	f000 fe87 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation right front - 0dB
 8007e86:	4b1f      	ldr	r3, [pc, #124]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e88:	7b9b      	ldrb	r3, [r3, #14]
 8007e8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e92:	739a      	strb	r2, [r3, #14]
	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <TDA7719_init+0x4cc>)
 8007e96:	7b9b      	ldrb	r3, [r3, #14]
 8007e98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	4b19      	ldr	r3, [pc, #100]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ea0:	739a      	strb	r2, [r3, #14]
	I2C_send(TDA7719_ATT_RF , TDA7719_registers[TDA7719_ATT_RF]);
 8007ea2:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ea4:	7b9b      	ldrb	r3, [r3, #14]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	200e      	movs	r0, #14
 8007eaa:	f000 fe73 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation left rear - 0dB
 8007eae:	4b15      	ldr	r3, [pc, #84]	; (8007f04 <TDA7719_init+0x4cc>)
 8007eb0:	7bdb      	ldrb	r3, [r3, #15]
 8007eb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	4b12      	ldr	r3, [pc, #72]	; (8007f04 <TDA7719_init+0x4cc>)
 8007eba:	73da      	strb	r2, [r3, #15]
	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 8007ebc:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ebe:	7bdb      	ldrb	r3, [r3, #15]
 8007ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	4b0f      	ldr	r3, [pc, #60]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ec8:	73da      	strb	r2, [r3, #15]
	I2C_send(TDA7719_ATT_LR , TDA7719_registers[TDA7719_ATT_LR]);
 8007eca:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ecc:	7bdb      	ldrb	r3, [r3, #15]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	200f      	movs	r0, #15
 8007ed2:	f000 fe5f 	bl	8008b94 <I2C_send>

	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation right rear - 0dB
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ed8:	7c1b      	ldrb	r3, [r3, #16]
 8007eda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	4b08      	ldr	r3, [pc, #32]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ee2:	741a      	strb	r2, [r3, #16]
	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 8007ee4:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ee6:	7c1b      	ldrb	r3, [r3, #16]
 8007ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	4b05      	ldr	r3, [pc, #20]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ef0:	741a      	strb	r2, [r3, #16]
	I2C_send(TDA7719_ATT_RR , TDA7719_registers[TDA7719_ATT_RR]);
 8007ef2:	4b04      	ldr	r3, [pc, #16]	; (8007f04 <TDA7719_init+0x4cc>)
 8007ef4:	7c1b      	ldrb	r3, [r3, #16]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	2010      	movs	r0, #16
 8007efa:	f000 fe4b 	bl	8008b94 <I2C_send>

	//subwoofer gain/attenuation - left
	//subwoofer gain/attenuation - right
    }
 8007efe:	bf00      	nop
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000374 	.word	0x20000374

08007f08 <TDA7719_SetMainInput>:
 *  tutaj opis konkretnych ustawień i które wybrano i przypisane
 *
 *  @param[in] input value beetween 0-7
 */
void TDA7719_SetMainInput(int8_t const input)
    {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	71fb      	strb	r3, [r7, #7]
	if(input < 0 || input > 7)return;
 8007f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	db19      	blt.n	8007f4e <TDA7719_SetMainInput+0x46>
 8007f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	dc15      	bgt.n	8007f4e <TDA7719_SetMainInput+0x46>

	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x7) | (input & 0x7);
 8007f22:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <TDA7719_SetMainInput+0x50>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	f023 0307 	bic.w	r3, r3, #7
 8007f2c:	b25a      	sxtb	r2, r3
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	b25b      	sxtb	r3, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <TDA7719_SetMainInput+0x50>)
 8007f3e:	701a      	strb	r2, [r3, #0]
	I2C_send(TDA7719_INPUT , TDA7719_registers[TDA7719_INPUT]);
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <TDA7719_SetMainInput+0x50>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	2000      	movs	r0, #0
 8007f48:	f000 fe24 	bl	8008b94 <I2C_send>
 8007f4c:	e000      	b.n	8007f50 <TDA7719_SetMainInput+0x48>
	if(input < 0 || input > 7)return;
 8007f4e:	bf00      	nop
    }
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000374 	.word	0x20000374

08007f5c <TDA7719_SetSecondInput>:
 *  tutaj spis konfiguracji
 *
 *  @param[in] input, uint8_t 0...7
 */
void TDA7719_SetSecondInput(int8_t const input)
    {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	71fb      	strb	r3, [r7, #7]
	if(input < 0 || input > 7)return;
 8007f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	db19      	blt.n	8007fa2 <TDA7719_SetSecondInput+0x46>
 8007f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f72:	2b07      	cmp	r3, #7
 8007f74:	dc15      	bgt.n	8007fa2 <TDA7719_SetSecondInput+0x46>

	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x7) | (input & 0x7);
 8007f76:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <TDA7719_SetSecondInput+0x50>)
 8007f78:	785b      	ldrb	r3, [r3, #1]
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	f023 0307 	bic.w	r3, r3, #7
 8007f80:	b25a      	sxtb	r2, r3
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	b25b      	sxtb	r3, r3
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	b25b      	sxtb	r3, r3
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <TDA7719_SetSecondInput+0x50>)
 8007f92:	705a      	strb	r2, [r3, #1]
	I2C_send(TDA7719_INPUT_2 , TDA7719_registers[TDA7719_INPUT_2]);
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <TDA7719_SetSecondInput+0x50>)
 8007f96:	785b      	ldrb	r3, [r3, #1]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	f000 fdfa 	bl	8008b94 <I2C_send>
 8007fa0:	e000      	b.n	8007fa4 <TDA7719_SetSecondInput+0x48>
	if(input < 0 || input > 7)return;
 8007fa2:	bf00      	nop
    }
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000374 	.word	0x20000374

08007fb0 <TDA7719_SetSoftMute>:
 *  @param[in] Soft Mute - 1 OFF, 0 - ON
 *
 *  @param[in]
 */
void TDA7719_SetSoftMute(_Bool const Mute_ON_OFF, uint8_t const SoftMuteTime)
    {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	460a      	mov	r2, r1
 8007fba:	71fb      	strb	r3, [r7, #7]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	71bb      	strb	r3, [r7, #6]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x1) | ((Mute_ON_OFF << 0) & 0x1);
 8007fc0:	4b15      	ldr	r3, [pc, #84]	; (8008018 <TDA7719_SetSoftMute+0x68>)
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	b25b      	sxtb	r3, r3
 8007fc6:	f023 0301 	bic.w	r3, r3, #1
 8007fca:	b25a      	sxtb	r2, r3
 8007fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	b25b      	sxtb	r3, r3
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	b25b      	sxtb	r3, r3
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <TDA7719_SetSoftMute+0x68>)
 8007fde:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0xC) | ((SoftMuteTime << 2) & 0xC);
 8007fe0:	4b0d      	ldr	r3, [pc, #52]	; (8008018 <TDA7719_SetSoftMute+0x68>)
 8007fe2:	791b      	ldrb	r3, [r3, #4]
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	f023 030c 	bic.w	r3, r3, #12
 8007fea:	b25a      	sxtb	r2, r3
 8007fec:	79bb      	ldrb	r3, [r7, #6]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	b25b      	sxtb	r3, r3
 8007ff2:	f003 030c 	and.w	r3, r3, #12
 8007ff6:	b25b      	sxtb	r3, r3
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	b25b      	sxtb	r3, r3
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <TDA7719_SetSoftMute+0x68>)
 8008000:	711a      	strb	r2, [r3, #4]
	I2C_send(TDA7719_MUTE , TDA7719_registers[TDA7719_MUTE]);
 8008002:	4b05      	ldr	r3, [pc, #20]	; (8008018 <TDA7719_SetSoftMute+0x68>)
 8008004:	791b      	ldrb	r3, [r3, #4]
 8008006:	4619      	mov	r1, r3
 8008008:	2004      	movs	r0, #4
 800800a:	f000 fdc3 	bl	8008b94 <I2C_send>
    }
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000374 	.word	0x20000374

0800801c <TDA7719_SetLoudness>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetLoudness(int8_t loud_att, uint8_t const loud_f, uint8_t const loud_b, const uint8_t loud_s)
    {
 800801c:	b590      	push	{r4, r7, lr}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	4611      	mov	r1, r2
 8008028:	461a      	mov	r2, r3
 800802a:	4623      	mov	r3, r4
 800802c:	71fb      	strb	r3, [r7, #7]
 800802e:	4603      	mov	r3, r0
 8008030:	71bb      	strb	r3, [r7, #6]
 8008032:	460b      	mov	r3, r1
 8008034:	717b      	strb	r3, [r7, #5]
 8008036:	4613      	mov	r3, r2
 8008038:	713b      	strb	r3, [r7, #4]
	loud_att = abs(loud_att);
 800803a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb8      	it	lt
 8008042:	425b      	neglt	r3, r3
 8008044:	b2db      	uxtb	r3, r3
 8008046:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0xF) | ((loud_att << 0) & 0xF);
 8008048:	4b24      	ldr	r3, [pc, #144]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 800804a:	79db      	ldrb	r3, [r3, #7]
 800804c:	b25b      	sxtb	r3, r3
 800804e:	f023 030f 	bic.w	r3, r3, #15
 8008052:	b25a      	sxtb	r2, r3
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	b25b      	sxtb	r3, r3
 800805c:	4313      	orrs	r3, r2
 800805e:	b25b      	sxtb	r3, r3
 8008060:	b2da      	uxtb	r2, r3
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 8008064:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x30) | ((loud_f   << 4) & 0x30);
 8008066:	4b1d      	ldr	r3, [pc, #116]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 8008068:	79db      	ldrb	r3, [r3, #7]
 800806a:	b25b      	sxtb	r3, r3
 800806c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008070:	b25a      	sxtb	r2, r3
 8008072:	79bb      	ldrb	r3, [r7, #6]
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	b25b      	sxtb	r3, r3
 8008078:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800807c:	b25b      	sxtb	r3, r3
 800807e:	4313      	orrs	r3, r2
 8008080:	b25b      	sxtb	r3, r3
 8008082:	b2da      	uxtb	r2, r3
 8008084:	4b15      	ldr	r3, [pc, #84]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 8008086:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x40) | ((loud_b   << 6) & 0x40);
 8008088:	4b14      	ldr	r3, [pc, #80]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 800808a:	79db      	ldrb	r3, [r3, #7]
 800808c:	b25b      	sxtb	r3, r3
 800808e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008092:	b25a      	sxtb	r2, r3
 8008094:	797b      	ldrb	r3, [r7, #5]
 8008096:	019b      	lsls	r3, r3, #6
 8008098:	b25b      	sxtb	r3, r3
 800809a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809e:	b25b      	sxtb	r3, r3
 80080a0:	4313      	orrs	r3, r2
 80080a2:	b25b      	sxtb	r3, r3
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	4b0d      	ldr	r3, [pc, #52]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 80080a8:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x80) | ((loud_s   << 7) & 0x80);
 80080aa:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 80080ac:	79db      	ldrb	r3, [r3, #7]
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080b4:	b25a      	sxtb	r2, r3
 80080b6:	793b      	ldrb	r3, [r7, #4]
 80080b8:	01db      	lsls	r3, r3, #7
 80080ba:	b25b      	sxtb	r3, r3
 80080bc:	4313      	orrs	r3, r2
 80080be:	b25b      	sxtb	r3, r3
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	4b06      	ldr	r3, [pc, #24]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 80080c4:	71da      	strb	r2, [r3, #7]

	I2C_send(TDA7719_LOUD , TDA7719_registers[TDA7719_LOUD]);
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <TDA7719_SetLoudness+0xc0>)
 80080c8:	79db      	ldrb	r3, [r3, #7]
 80080ca:	4619      	mov	r1, r3
 80080cc:	2007      	movs	r0, #7
 80080ce:	f000 fd61 	bl	8008b94 <I2C_send>
    }
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd90      	pop	{r4, r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000374 	.word	0x20000374

080080e0 <TDA7719_SetVolume>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume(int8_t gain, uint8_t const out_gain, uint8_t const soft_step)
    {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
 80080ea:	460b      	mov	r3, r1
 80080ec:	71bb      	strb	r3, [r7, #6]
 80080ee:	4613      	mov	r3, r2
 80080f0:	717b      	strb	r3, [r7, #5]
	switch(gain)
 80080f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f6:	330f      	adds	r3, #15
 80080f8:	2b1e      	cmp	r3, #30
 80080fa:	f200 809b 	bhi.w	8008234 <TDA7719_SetVolume+0x154>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <TDA7719_SetVolume+0x24>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008181 	.word	0x08008181
 8008108:	08008187 	.word	0x08008187
 800810c:	0800818d 	.word	0x0800818d
 8008110:	08008193 	.word	0x08008193
 8008114:	08008199 	.word	0x08008199
 8008118:	0800819f 	.word	0x0800819f
 800811c:	080081a5 	.word	0x080081a5
 8008120:	080081ab 	.word	0x080081ab
 8008124:	080081b1 	.word	0x080081b1
 8008128:	080081b7 	.word	0x080081b7
 800812c:	080081bd 	.word	0x080081bd
 8008130:	080081c3 	.word	0x080081c3
 8008134:	080081c9 	.word	0x080081c9
 8008138:	08008235 	.word	0x08008235
 800813c:	080081cf 	.word	0x080081cf
 8008140:	080081d5 	.word	0x080081d5
 8008144:	080081db 	.word	0x080081db
 8008148:	080081e1 	.word	0x080081e1
 800814c:	080081e7 	.word	0x080081e7
 8008150:	080081ed 	.word	0x080081ed
 8008154:	080081f3 	.word	0x080081f3
 8008158:	080081f9 	.word	0x080081f9
 800815c:	080081ff 	.word	0x080081ff
 8008160:	08008205 	.word	0x08008205
 8008164:	0800820b 	.word	0x0800820b
 8008168:	08008211 	.word	0x08008211
 800816c:	08008217 	.word	0x08008217
 8008170:	0800821d 	.word	0x0800821d
 8008174:	08008223 	.word	0x08008223
 8008178:	08008229 	.word	0x08008229
 800817c:	0800822f 	.word	0x0800822f
	{
	    case -15:gain = 0b00000000;break;
 8008180:	2300      	movs	r3, #0
 8008182:	71fb      	strb	r3, [r7, #7]
 8008184:	e056      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -14:gain = 0b00000001;break;
 8008186:	2301      	movs	r3, #1
 8008188:	71fb      	strb	r3, [r7, #7]
 800818a:	e053      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -13:gain = 0b00000010;break;
 800818c:	2302      	movs	r3, #2
 800818e:	71fb      	strb	r3, [r7, #7]
 8008190:	e050      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -12:gain = 0b00000011;break;
 8008192:	2303      	movs	r3, #3
 8008194:	71fb      	strb	r3, [r7, #7]
 8008196:	e04d      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -11:gain = 0b00000100;break;
 8008198:	2304      	movs	r3, #4
 800819a:	71fb      	strb	r3, [r7, #7]
 800819c:	e04a      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -10:gain = 0b00000101;break;
 800819e:	2305      	movs	r3, #5
 80081a0:	71fb      	strb	r3, [r7, #7]
 80081a2:	e047      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -9:gain = 0b00000110;break;
 80081a4:	2306      	movs	r3, #6
 80081a6:	71fb      	strb	r3, [r7, #7]
 80081a8:	e044      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -8:gain = 0b00000111;break;
 80081aa:	2307      	movs	r3, #7
 80081ac:	71fb      	strb	r3, [r7, #7]
 80081ae:	e041      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -7:gain = 0b00001000;break;
 80081b0:	2308      	movs	r3, #8
 80081b2:	71fb      	strb	r3, [r7, #7]
 80081b4:	e03e      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -6:gain = 0b00001001;break;
 80081b6:	2309      	movs	r3, #9
 80081b8:	71fb      	strb	r3, [r7, #7]
 80081ba:	e03b      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -5:gain = 0b00001010;break;
 80081bc:	230a      	movs	r3, #10
 80081be:	71fb      	strb	r3, [r7, #7]
 80081c0:	e038      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -4:gain = 0b00001011;break;
 80081c2:	230b      	movs	r3, #11
 80081c4:	71fb      	strb	r3, [r7, #7]
 80081c6:	e035      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -3:gain = 0b00001100;break;
 80081c8:	230c      	movs	r3, #12
 80081ca:	71fb      	strb	r3, [r7, #7]
 80081cc:	e032      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case -1:gain = 0b00001110;break;
 80081ce:	230e      	movs	r3, #14
 80081d0:	71fb      	strb	r3, [r7, #7]
 80081d2:	e02f      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 0:gain = 0b00001111;break;
 80081d4:	230f      	movs	r3, #15
 80081d6:	71fb      	strb	r3, [r7, #7]
 80081d8:	e02c      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 1:gain = 0b00011110;break;
 80081da:	231e      	movs	r3, #30
 80081dc:	71fb      	strb	r3, [r7, #7]
 80081de:	e029      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 2:gain = 0b00011101;break;
 80081e0:	231d      	movs	r3, #29
 80081e2:	71fb      	strb	r3, [r7, #7]
 80081e4:	e026      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 3:gain = 0b00011100;break;
 80081e6:	231c      	movs	r3, #28
 80081e8:	71fb      	strb	r3, [r7, #7]
 80081ea:	e023      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 4:gain = 0b00011011;break;
 80081ec:	231b      	movs	r3, #27
 80081ee:	71fb      	strb	r3, [r7, #7]
 80081f0:	e020      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 5:gain = 0b00011010;break;
 80081f2:	231a      	movs	r3, #26
 80081f4:	71fb      	strb	r3, [r7, #7]
 80081f6:	e01d      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 6:gain = 0b00011001;break;
 80081f8:	2319      	movs	r3, #25
 80081fa:	71fb      	strb	r3, [r7, #7]
 80081fc:	e01a      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 7:gain = 0b00011000;break;
 80081fe:	2318      	movs	r3, #24
 8008200:	71fb      	strb	r3, [r7, #7]
 8008202:	e017      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 8:gain = 0b00010111;break;
 8008204:	2317      	movs	r3, #23
 8008206:	71fb      	strb	r3, [r7, #7]
 8008208:	e014      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 9:gain = 0b00010110;break;
 800820a:	2316      	movs	r3, #22
 800820c:	71fb      	strb	r3, [r7, #7]
 800820e:	e011      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 10:gain = 0b00010101;break;
 8008210:	2315      	movs	r3, #21
 8008212:	71fb      	strb	r3, [r7, #7]
 8008214:	e00e      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 11:gain = 0b00010100;break;
 8008216:	2314      	movs	r3, #20
 8008218:	71fb      	strb	r3, [r7, #7]
 800821a:	e00b      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 12:gain = 0b00010011;break;
 800821c:	2313      	movs	r3, #19
 800821e:	71fb      	strb	r3, [r7, #7]
 8008220:	e008      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 13:gain = 0b00010010;break;
 8008222:	2312      	movs	r3, #18
 8008224:	71fb      	strb	r3, [r7, #7]
 8008226:	e005      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 14:gain = 0b00010001;break;
 8008228:	2311      	movs	r3, #17
 800822a:	71fb      	strb	r3, [r7, #7]
 800822c:	e002      	b.n	8008234 <TDA7719_SetVolume+0x154>
	    case 15:gain = 0b00010000;break;
 800822e:	2310      	movs	r3, #16
 8008230:	71fb      	strb	r3, [r7, #7]
 8008232:	bf00      	nop
	}
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x1F) | ((gain << 0) & 0x1F);
 8008234:	4b1b      	ldr	r3, [pc, #108]	; (80082a4 <TDA7719_SetVolume+0x1c4>)
 8008236:	7a1b      	ldrb	r3, [r3, #8]
 8008238:	b25b      	sxtb	r3, r3
 800823a:	f023 031f 	bic.w	r3, r3, #31
 800823e:	b25a      	sxtb	r2, r3
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	b25b      	sxtb	r3, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	b25b      	sxtb	r3, r3
 800824c:	b2da      	uxtb	r2, r3
 800824e:	4b15      	ldr	r3, [pc, #84]	; (80082a4 <TDA7719_SetVolume+0x1c4>)
 8008250:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x40) | ((out_gain << 6) & 0x40);
 8008252:	4b14      	ldr	r3, [pc, #80]	; (80082a4 <TDA7719_SetVolume+0x1c4>)
 8008254:	7a1b      	ldrb	r3, [r3, #8]
 8008256:	b25b      	sxtb	r3, r3
 8008258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825c:	b25a      	sxtb	r2, r3
 800825e:	79bb      	ldrb	r3, [r7, #6]
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	b25b      	sxtb	r3, r3
 8008264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008268:	b25b      	sxtb	r3, r3
 800826a:	4313      	orrs	r3, r2
 800826c:	b25b      	sxtb	r3, r3
 800826e:	b2da      	uxtb	r2, r3
 8008270:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <TDA7719_SetVolume+0x1c4>)
 8008272:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x80) | ((soft_step << 7) & 0x80);
 8008274:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <TDA7719_SetVolume+0x1c4>)
 8008276:	7a1b      	ldrb	r3, [r3, #8]
 8008278:	b25b      	sxtb	r3, r3
 800827a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827e:	b25a      	sxtb	r2, r3
 8008280:	797b      	ldrb	r3, [r7, #5]
 8008282:	01db      	lsls	r3, r3, #7
 8008284:	b25b      	sxtb	r3, r3
 8008286:	4313      	orrs	r3, r2
 8008288:	b25b      	sxtb	r3, r3
 800828a:	b2da      	uxtb	r2, r3
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <TDA7719_SetVolume+0x1c4>)
 800828e:	721a      	strb	r2, [r3, #8]

	I2C_send(TDA7719_VOL , TDA7719_registers[TDA7719_VOL]);
 8008290:	4b04      	ldr	r3, [pc, #16]	; (80082a4 <TDA7719_SetVolume+0x1c4>)
 8008292:	7a1b      	ldrb	r3, [r3, #8]
 8008294:	4619      	mov	r1, r3
 8008296:	2008      	movs	r0, #8
 8008298:	f000 fc7c 	bl	8008b94 <I2C_send>
    }
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000374 	.word	0x20000374

080082a8 <TDA7719_SetTreble>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetTreble(int8_t gain_treb, uint8_t const treb_f, uint8_t const soft_treb)
    {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	71fb      	strb	r3, [r7, #7]
 80082b2:	460b      	mov	r3, r1
 80082b4:	71bb      	strb	r3, [r7, #6]
 80082b6:	4613      	mov	r3, r2
 80082b8:	717b      	strb	r3, [r7, #5]
	switch(gain_treb)
 80082ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082be:	330f      	adds	r3, #15
 80082c0:	2b1e      	cmp	r3, #30
 80082c2:	f200 809e 	bhi.w	8008402 <TDA7719_SetTreble+0x15a>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <TDA7719_SetTreble+0x24>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	08008349 	.word	0x08008349
 80082d0:	0800834f 	.word	0x0800834f
 80082d4:	08008355 	.word	0x08008355
 80082d8:	0800835b 	.word	0x0800835b
 80082dc:	08008361 	.word	0x08008361
 80082e0:	08008367 	.word	0x08008367
 80082e4:	0800836d 	.word	0x0800836d
 80082e8:	08008373 	.word	0x08008373
 80082ec:	08008379 	.word	0x08008379
 80082f0:	0800837f 	.word	0x0800837f
 80082f4:	08008385 	.word	0x08008385
 80082f8:	0800838b 	.word	0x0800838b
 80082fc:	08008391 	.word	0x08008391
 8008300:	08008397 	.word	0x08008397
 8008304:	0800839d 	.word	0x0800839d
 8008308:	080083a3 	.word	0x080083a3
 800830c:	080083a9 	.word	0x080083a9
 8008310:	080083af 	.word	0x080083af
 8008314:	080083b5 	.word	0x080083b5
 8008318:	080083bb 	.word	0x080083bb
 800831c:	080083c1 	.word	0x080083c1
 8008320:	080083c7 	.word	0x080083c7
 8008324:	080083cd 	.word	0x080083cd
 8008328:	080083d3 	.word	0x080083d3
 800832c:	080083d9 	.word	0x080083d9
 8008330:	080083df 	.word	0x080083df
 8008334:	080083e5 	.word	0x080083e5
 8008338:	080083eb 	.word	0x080083eb
 800833c:	080083f1 	.word	0x080083f1
 8008340:	080083f7 	.word	0x080083f7
 8008344:	080083fd 	.word	0x080083fd
	{
	    case -15:gain_treb = 0b00000000;break;
 8008348:	2300      	movs	r3, #0
 800834a:	71fb      	strb	r3, [r7, #7]
 800834c:	e059      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -14:gain_treb = 0b00000001;break;
 800834e:	2301      	movs	r3, #1
 8008350:	71fb      	strb	r3, [r7, #7]
 8008352:	e056      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -13:gain_treb = 0b00000010;break;
 8008354:	2302      	movs	r3, #2
 8008356:	71fb      	strb	r3, [r7, #7]
 8008358:	e053      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -12:gain_treb = 0b00000011;break;
 800835a:	2303      	movs	r3, #3
 800835c:	71fb      	strb	r3, [r7, #7]
 800835e:	e050      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -11:gain_treb = 0b00000100;break;
 8008360:	2304      	movs	r3, #4
 8008362:	71fb      	strb	r3, [r7, #7]
 8008364:	e04d      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -10:gain_treb = 0b00000101;break;
 8008366:	2305      	movs	r3, #5
 8008368:	71fb      	strb	r3, [r7, #7]
 800836a:	e04a      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -9:gain_treb = 0b00000110;break;
 800836c:	2306      	movs	r3, #6
 800836e:	71fb      	strb	r3, [r7, #7]
 8008370:	e047      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -8:gain_treb = 0b00000111;break;
 8008372:	2307      	movs	r3, #7
 8008374:	71fb      	strb	r3, [r7, #7]
 8008376:	e044      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -7:gain_treb = 0b00001000;break;
 8008378:	2308      	movs	r3, #8
 800837a:	71fb      	strb	r3, [r7, #7]
 800837c:	e041      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -6:gain_treb = 0b00001001;break;
 800837e:	2309      	movs	r3, #9
 8008380:	71fb      	strb	r3, [r7, #7]
 8008382:	e03e      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -5:gain_treb = 0b00001010;break;
 8008384:	230a      	movs	r3, #10
 8008386:	71fb      	strb	r3, [r7, #7]
 8008388:	e03b      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -4:gain_treb = 0b00001011;break;
 800838a:	230b      	movs	r3, #11
 800838c:	71fb      	strb	r3, [r7, #7]
 800838e:	e038      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -3:gain_treb = 0b00001100;break;
 8008390:	230c      	movs	r3, #12
 8008392:	71fb      	strb	r3, [r7, #7]
 8008394:	e035      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -2:gain_treb = 0b00001101;break;
 8008396:	230d      	movs	r3, #13
 8008398:	71fb      	strb	r3, [r7, #7]
 800839a:	e032      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case -1:gain_treb = 0b00001110;break;
 800839c:	230e      	movs	r3, #14
 800839e:	71fb      	strb	r3, [r7, #7]
 80083a0:	e02f      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 0:gain_treb = 0b00001111;break;
 80083a2:	230f      	movs	r3, #15
 80083a4:	71fb      	strb	r3, [r7, #7]
 80083a6:	e02c      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 1:gain_treb = 0b00011110;break;
 80083a8:	231e      	movs	r3, #30
 80083aa:	71fb      	strb	r3, [r7, #7]
 80083ac:	e029      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 2:gain_treb = 0b00011101;break;
 80083ae:	231d      	movs	r3, #29
 80083b0:	71fb      	strb	r3, [r7, #7]
 80083b2:	e026      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 3:gain_treb = 0b00011100;break;
 80083b4:	231c      	movs	r3, #28
 80083b6:	71fb      	strb	r3, [r7, #7]
 80083b8:	e023      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 4:gain_treb = 0b00011011;break;
 80083ba:	231b      	movs	r3, #27
 80083bc:	71fb      	strb	r3, [r7, #7]
 80083be:	e020      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 5:gain_treb = 0b00011010;break;
 80083c0:	231a      	movs	r3, #26
 80083c2:	71fb      	strb	r3, [r7, #7]
 80083c4:	e01d      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 6:gain_treb = 0b00011001;break;
 80083c6:	2319      	movs	r3, #25
 80083c8:	71fb      	strb	r3, [r7, #7]
 80083ca:	e01a      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 7:gain_treb = 0b00011000;break;
 80083cc:	2318      	movs	r3, #24
 80083ce:	71fb      	strb	r3, [r7, #7]
 80083d0:	e017      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 8:gain_treb = 0b00010111;break;
 80083d2:	2317      	movs	r3, #23
 80083d4:	71fb      	strb	r3, [r7, #7]
 80083d6:	e014      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 9:gain_treb = 0b00010110;break;
 80083d8:	2316      	movs	r3, #22
 80083da:	71fb      	strb	r3, [r7, #7]
 80083dc:	e011      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 10:gain_treb = 0b00010101;break;
 80083de:	2315      	movs	r3, #21
 80083e0:	71fb      	strb	r3, [r7, #7]
 80083e2:	e00e      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 11:gain_treb = 0b00010100;break;
 80083e4:	2314      	movs	r3, #20
 80083e6:	71fb      	strb	r3, [r7, #7]
 80083e8:	e00b      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 12:gain_treb = 0b00010011;break;
 80083ea:	2313      	movs	r3, #19
 80083ec:	71fb      	strb	r3, [r7, #7]
 80083ee:	e008      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 13:gain_treb = 0b00010010;break;
 80083f0:	2312      	movs	r3, #18
 80083f2:	71fb      	strb	r3, [r7, #7]
 80083f4:	e005      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 14:gain_treb = 0b00010001;break;
 80083f6:	2311      	movs	r3, #17
 80083f8:	71fb      	strb	r3, [r7, #7]
 80083fa:	e002      	b.n	8008402 <TDA7719_SetTreble+0x15a>
	    case 15:gain_treb = 0b00010000;break;
 80083fc:	2310      	movs	r3, #16
 80083fe:	71fb      	strb	r3, [r7, #7]
 8008400:	bf00      	nop
	}
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x1F) | ((gain_treb << 0) & 0x1F);
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <TDA7719_SetTreble+0x1cc>)
 8008404:	7a5b      	ldrb	r3, [r3, #9]
 8008406:	b25b      	sxtb	r3, r3
 8008408:	f023 031f 	bic.w	r3, r3, #31
 800840c:	b25a      	sxtb	r2, r3
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	b25b      	sxtb	r3, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	b25b      	sxtb	r3, r3
 800841a:	b2da      	uxtb	r2, r3
 800841c:	4b15      	ldr	r3, [pc, #84]	; (8008474 <TDA7719_SetTreble+0x1cc>)
 800841e:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x60) | ((treb_f << 5) & 0x60);
 8008420:	4b14      	ldr	r3, [pc, #80]	; (8008474 <TDA7719_SetTreble+0x1cc>)
 8008422:	7a5b      	ldrb	r3, [r3, #9]
 8008424:	b25b      	sxtb	r3, r3
 8008426:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800842a:	b25a      	sxtb	r2, r3
 800842c:	79bb      	ldrb	r3, [r7, #6]
 800842e:	015b      	lsls	r3, r3, #5
 8008430:	b25b      	sxtb	r3, r3
 8008432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008436:	b25b      	sxtb	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	b25b      	sxtb	r3, r3
 800843c:	b2da      	uxtb	r2, r3
 800843e:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <TDA7719_SetTreble+0x1cc>)
 8008440:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x80) | ((soft_treb << 7) & 0x80);
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <TDA7719_SetTreble+0x1cc>)
 8008444:	7a5b      	ldrb	r3, [r3, #9]
 8008446:	b25b      	sxtb	r3, r3
 8008448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844c:	b25a      	sxtb	r2, r3
 800844e:	797b      	ldrb	r3, [r7, #5]
 8008450:	01db      	lsls	r3, r3, #7
 8008452:	b25b      	sxtb	r3, r3
 8008454:	4313      	orrs	r3, r2
 8008456:	b25b      	sxtb	r3, r3
 8008458:	b2da      	uxtb	r2, r3
 800845a:	4b06      	ldr	r3, [pc, #24]	; (8008474 <TDA7719_SetTreble+0x1cc>)
 800845c:	725a      	strb	r2, [r3, #9]

	I2C_send(TDA7719_TRBLE , TDA7719_registers[TDA7719_TRBLE]);
 800845e:	4b05      	ldr	r3, [pc, #20]	; (8008474 <TDA7719_SetTreble+0x1cc>)
 8008460:	7a5b      	ldrb	r3, [r3, #9]
 8008462:	4619      	mov	r1, r3
 8008464:	2009      	movs	r0, #9
 8008466:	f000 fb95 	bl	8008b94 <I2C_send>
    }
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000374 	.word	0x20000374

08008478 <TDA7719_SetMiddle>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetMiddle(int8_t gain_mid,  uint8_t const mid_q,  uint8_t const soft_mid)
    {
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	71fb      	strb	r3, [r7, #7]
 8008482:	460b      	mov	r3, r1
 8008484:	71bb      	strb	r3, [r7, #6]
 8008486:	4613      	mov	r3, r2
 8008488:	717b      	strb	r3, [r7, #5]
	switch(gain_mid)
 800848a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800848e:	330f      	adds	r3, #15
 8008490:	2b1e      	cmp	r3, #30
 8008492:	f200 809e 	bhi.w	80085d2 <TDA7719_SetMiddle+0x15a>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <TDA7719_SetMiddle+0x24>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	08008519 	.word	0x08008519
 80084a0:	0800851f 	.word	0x0800851f
 80084a4:	08008525 	.word	0x08008525
 80084a8:	0800852b 	.word	0x0800852b
 80084ac:	08008531 	.word	0x08008531
 80084b0:	08008537 	.word	0x08008537
 80084b4:	0800853d 	.word	0x0800853d
 80084b8:	08008543 	.word	0x08008543
 80084bc:	08008549 	.word	0x08008549
 80084c0:	0800854f 	.word	0x0800854f
 80084c4:	08008555 	.word	0x08008555
 80084c8:	0800855b 	.word	0x0800855b
 80084cc:	08008561 	.word	0x08008561
 80084d0:	08008567 	.word	0x08008567
 80084d4:	0800856d 	.word	0x0800856d
 80084d8:	08008573 	.word	0x08008573
 80084dc:	08008579 	.word	0x08008579
 80084e0:	0800857f 	.word	0x0800857f
 80084e4:	08008585 	.word	0x08008585
 80084e8:	0800858b 	.word	0x0800858b
 80084ec:	08008591 	.word	0x08008591
 80084f0:	08008597 	.word	0x08008597
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	080085a3 	.word	0x080085a3
 80084fc:	080085a9 	.word	0x080085a9
 8008500:	080085af 	.word	0x080085af
 8008504:	080085b5 	.word	0x080085b5
 8008508:	080085bb 	.word	0x080085bb
 800850c:	080085c1 	.word	0x080085c1
 8008510:	080085c7 	.word	0x080085c7
 8008514:	080085cd 	.word	0x080085cd
	{
	    case -15:gain_mid = 0b00000000;break;
 8008518:	2300      	movs	r3, #0
 800851a:	71fb      	strb	r3, [r7, #7]
 800851c:	e059      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -14:gain_mid = 0b00000001;break;
 800851e:	2301      	movs	r3, #1
 8008520:	71fb      	strb	r3, [r7, #7]
 8008522:	e056      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -13:gain_mid = 0b00000010;break;
 8008524:	2302      	movs	r3, #2
 8008526:	71fb      	strb	r3, [r7, #7]
 8008528:	e053      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -12:gain_mid = 0b00000011;break;
 800852a:	2303      	movs	r3, #3
 800852c:	71fb      	strb	r3, [r7, #7]
 800852e:	e050      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -11:gain_mid = 0b00000100;break;
 8008530:	2304      	movs	r3, #4
 8008532:	71fb      	strb	r3, [r7, #7]
 8008534:	e04d      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -10:gain_mid = 0b00000101;break;
 8008536:	2305      	movs	r3, #5
 8008538:	71fb      	strb	r3, [r7, #7]
 800853a:	e04a      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -9:gain_mid = 0b00000110;break;
 800853c:	2306      	movs	r3, #6
 800853e:	71fb      	strb	r3, [r7, #7]
 8008540:	e047      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -8:gain_mid = 0b00000111;break;
 8008542:	2307      	movs	r3, #7
 8008544:	71fb      	strb	r3, [r7, #7]
 8008546:	e044      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -7:gain_mid = 0b00001000;break;
 8008548:	2308      	movs	r3, #8
 800854a:	71fb      	strb	r3, [r7, #7]
 800854c:	e041      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -6:gain_mid = 0b00001001;break;
 800854e:	2309      	movs	r3, #9
 8008550:	71fb      	strb	r3, [r7, #7]
 8008552:	e03e      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -5:gain_mid = 0b00001010;break;
 8008554:	230a      	movs	r3, #10
 8008556:	71fb      	strb	r3, [r7, #7]
 8008558:	e03b      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -4:gain_mid = 0b00001011;break;
 800855a:	230b      	movs	r3, #11
 800855c:	71fb      	strb	r3, [r7, #7]
 800855e:	e038      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -3:gain_mid = 0b00001100;break;
 8008560:	230c      	movs	r3, #12
 8008562:	71fb      	strb	r3, [r7, #7]
 8008564:	e035      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -2:gain_mid = 0b00001101;break;
 8008566:	230d      	movs	r3, #13
 8008568:	71fb      	strb	r3, [r7, #7]
 800856a:	e032      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case -1:gain_mid = 0b00001110;break;
 800856c:	230e      	movs	r3, #14
 800856e:	71fb      	strb	r3, [r7, #7]
 8008570:	e02f      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 0:gain_mid = 0b00001111;break;
 8008572:	230f      	movs	r3, #15
 8008574:	71fb      	strb	r3, [r7, #7]
 8008576:	e02c      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 1:gain_mid = 0b00011110;break;
 8008578:	231e      	movs	r3, #30
 800857a:	71fb      	strb	r3, [r7, #7]
 800857c:	e029      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 2:gain_mid = 0b00011101;break;
 800857e:	231d      	movs	r3, #29
 8008580:	71fb      	strb	r3, [r7, #7]
 8008582:	e026      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 3:gain_mid = 0b00011100;break;
 8008584:	231c      	movs	r3, #28
 8008586:	71fb      	strb	r3, [r7, #7]
 8008588:	e023      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 4:gain_mid = 0b00011011;break;
 800858a:	231b      	movs	r3, #27
 800858c:	71fb      	strb	r3, [r7, #7]
 800858e:	e020      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 5:gain_mid = 0b00011010;break;
 8008590:	231a      	movs	r3, #26
 8008592:	71fb      	strb	r3, [r7, #7]
 8008594:	e01d      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 6:gain_mid = 0b00011001;break;
 8008596:	2319      	movs	r3, #25
 8008598:	71fb      	strb	r3, [r7, #7]
 800859a:	e01a      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 7:gain_mid = 0b00011000;break;
 800859c:	2318      	movs	r3, #24
 800859e:	71fb      	strb	r3, [r7, #7]
 80085a0:	e017      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 8:gain_mid = 0b00010111;break;
 80085a2:	2317      	movs	r3, #23
 80085a4:	71fb      	strb	r3, [r7, #7]
 80085a6:	e014      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 9:gain_mid = 0b00010110;break;
 80085a8:	2316      	movs	r3, #22
 80085aa:	71fb      	strb	r3, [r7, #7]
 80085ac:	e011      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 10:gain_mid = 0b00010101;break;
 80085ae:	2315      	movs	r3, #21
 80085b0:	71fb      	strb	r3, [r7, #7]
 80085b2:	e00e      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 11:gain_mid = 0b00010100;break;
 80085b4:	2314      	movs	r3, #20
 80085b6:	71fb      	strb	r3, [r7, #7]
 80085b8:	e00b      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 12:gain_mid = 0b00010011;break;
 80085ba:	2313      	movs	r3, #19
 80085bc:	71fb      	strb	r3, [r7, #7]
 80085be:	e008      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 13:gain_mid = 0b00010010;break;
 80085c0:	2312      	movs	r3, #18
 80085c2:	71fb      	strb	r3, [r7, #7]
 80085c4:	e005      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 14:gain_mid = 0b00010001;break;
 80085c6:	2311      	movs	r3, #17
 80085c8:	71fb      	strb	r3, [r7, #7]
 80085ca:	e002      	b.n	80085d2 <TDA7719_SetMiddle+0x15a>
	    case 15:gain_mid = 0b00010000;break;
 80085cc:	2310      	movs	r3, #16
 80085ce:	71fb      	strb	r3, [r7, #7]
 80085d0:	bf00      	nop
	}
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x1F) | ((gain_mid << 0) & 0x1F);
 80085d2:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <TDA7719_SetMiddle+0x1cc>)
 80085d4:	7a9b      	ldrb	r3, [r3, #10]
 80085d6:	b25b      	sxtb	r3, r3
 80085d8:	f023 031f 	bic.w	r3, r3, #31
 80085dc:	b25a      	sxtb	r2, r3
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	f003 031f 	and.w	r3, r3, #31
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	4313      	orrs	r3, r2
 80085e8:	b25b      	sxtb	r3, r3
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	4b15      	ldr	r3, [pc, #84]	; (8008644 <TDA7719_SetMiddle+0x1cc>)
 80085ee:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x60) | ((mid_q << 5) & 0x60);
 80085f0:	4b14      	ldr	r3, [pc, #80]	; (8008644 <TDA7719_SetMiddle+0x1cc>)
 80085f2:	7a9b      	ldrb	r3, [r3, #10]
 80085f4:	b25b      	sxtb	r3, r3
 80085f6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80085fa:	b25a      	sxtb	r2, r3
 80085fc:	79bb      	ldrb	r3, [r7, #6]
 80085fe:	015b      	lsls	r3, r3, #5
 8008600:	b25b      	sxtb	r3, r3
 8008602:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008606:	b25b      	sxtb	r3, r3
 8008608:	4313      	orrs	r3, r2
 800860a:	b25b      	sxtb	r3, r3
 800860c:	b2da      	uxtb	r2, r3
 800860e:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <TDA7719_SetMiddle+0x1cc>)
 8008610:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x80) | ((soft_mid << 7) & 0x80);
 8008612:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <TDA7719_SetMiddle+0x1cc>)
 8008614:	7a9b      	ldrb	r3, [r3, #10]
 8008616:	b25b      	sxtb	r3, r3
 8008618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861c:	b25a      	sxtb	r2, r3
 800861e:	797b      	ldrb	r3, [r7, #5]
 8008620:	01db      	lsls	r3, r3, #7
 8008622:	b25b      	sxtb	r3, r3
 8008624:	4313      	orrs	r3, r2
 8008626:	b25b      	sxtb	r3, r3
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <TDA7719_SetMiddle+0x1cc>)
 800862c:	729a      	strb	r2, [r3, #10]
	I2C_send(TDA7719_MIDDLE , TDA7719_registers[TDA7719_MIDDLE]);
 800862e:	4b05      	ldr	r3, [pc, #20]	; (8008644 <TDA7719_SetMiddle+0x1cc>)
 8008630:	7a9b      	ldrb	r3, [r3, #10]
 8008632:	4619      	mov	r1, r3
 8008634:	200a      	movs	r0, #10
 8008636:	f000 faad 	bl	8008b94 <I2C_send>
    }
 800863a:	bf00      	nop
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000374 	.word	0x20000374

08008648 <TDA7719_SetBass>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetBass(int8_t gain_bass, uint8_t const bass_q, uint8_t const soft_bass)
    {
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	71fb      	strb	r3, [r7, #7]
 8008652:	460b      	mov	r3, r1
 8008654:	71bb      	strb	r3, [r7, #6]
 8008656:	4613      	mov	r3, r2
 8008658:	717b      	strb	r3, [r7, #5]
	switch(gain_bass)
 800865a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865e:	330f      	adds	r3, #15
 8008660:	2b1e      	cmp	r3, #30
 8008662:	f200 809e 	bhi.w	80087a2 <TDA7719_SetBass+0x15a>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <TDA7719_SetBass+0x24>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086e9 	.word	0x080086e9
 8008670:	080086ef 	.word	0x080086ef
 8008674:	080086f5 	.word	0x080086f5
 8008678:	080086fb 	.word	0x080086fb
 800867c:	08008701 	.word	0x08008701
 8008680:	08008707 	.word	0x08008707
 8008684:	0800870d 	.word	0x0800870d
 8008688:	08008713 	.word	0x08008713
 800868c:	08008719 	.word	0x08008719
 8008690:	0800871f 	.word	0x0800871f
 8008694:	08008725 	.word	0x08008725
 8008698:	0800872b 	.word	0x0800872b
 800869c:	08008731 	.word	0x08008731
 80086a0:	08008737 	.word	0x08008737
 80086a4:	0800873d 	.word	0x0800873d
 80086a8:	08008743 	.word	0x08008743
 80086ac:	08008749 	.word	0x08008749
 80086b0:	0800874f 	.word	0x0800874f
 80086b4:	08008755 	.word	0x08008755
 80086b8:	0800875b 	.word	0x0800875b
 80086bc:	08008761 	.word	0x08008761
 80086c0:	08008767 	.word	0x08008767
 80086c4:	0800876d 	.word	0x0800876d
 80086c8:	08008773 	.word	0x08008773
 80086cc:	08008779 	.word	0x08008779
 80086d0:	0800877f 	.word	0x0800877f
 80086d4:	08008785 	.word	0x08008785
 80086d8:	0800878b 	.word	0x0800878b
 80086dc:	08008791 	.word	0x08008791
 80086e0:	08008797 	.word	0x08008797
 80086e4:	0800879d 	.word	0x0800879d
	{
	    case -15:gain_bass = 0b00000000;break;
 80086e8:	2300      	movs	r3, #0
 80086ea:	71fb      	strb	r3, [r7, #7]
 80086ec:	e059      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -14:gain_bass = 0b00000001;break;
 80086ee:	2301      	movs	r3, #1
 80086f0:	71fb      	strb	r3, [r7, #7]
 80086f2:	e056      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -13:gain_bass = 0b00000010;break;
 80086f4:	2302      	movs	r3, #2
 80086f6:	71fb      	strb	r3, [r7, #7]
 80086f8:	e053      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -12:gain_bass = 0b00000011;break;
 80086fa:	2303      	movs	r3, #3
 80086fc:	71fb      	strb	r3, [r7, #7]
 80086fe:	e050      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -11:gain_bass = 0b00000100;break;
 8008700:	2304      	movs	r3, #4
 8008702:	71fb      	strb	r3, [r7, #7]
 8008704:	e04d      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -10:gain_bass = 0b00000101;break;
 8008706:	2305      	movs	r3, #5
 8008708:	71fb      	strb	r3, [r7, #7]
 800870a:	e04a      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -9:gain_bass  = 0b00000110;break;
 800870c:	2306      	movs	r3, #6
 800870e:	71fb      	strb	r3, [r7, #7]
 8008710:	e047      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -8:gain_bass  = 0b00000111;break;
 8008712:	2307      	movs	r3, #7
 8008714:	71fb      	strb	r3, [r7, #7]
 8008716:	e044      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -7:gain_bass  = 0b00001000;break;
 8008718:	2308      	movs	r3, #8
 800871a:	71fb      	strb	r3, [r7, #7]
 800871c:	e041      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -6:gain_bass  = 0b00001001;break;
 800871e:	2309      	movs	r3, #9
 8008720:	71fb      	strb	r3, [r7, #7]
 8008722:	e03e      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -5:gain_bass  = 0b00001010;break;
 8008724:	230a      	movs	r3, #10
 8008726:	71fb      	strb	r3, [r7, #7]
 8008728:	e03b      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -4:gain_bass  = 0b00001011;break;
 800872a:	230b      	movs	r3, #11
 800872c:	71fb      	strb	r3, [r7, #7]
 800872e:	e038      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -3:gain_bass  = 0b00001100;break;
 8008730:	230c      	movs	r3, #12
 8008732:	71fb      	strb	r3, [r7, #7]
 8008734:	e035      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -2:gain_bass  = 0b00001101;break;
 8008736:	230d      	movs	r3, #13
 8008738:	71fb      	strb	r3, [r7, #7]
 800873a:	e032      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case -1:gain_bass  = 0b00001110;break;
 800873c:	230e      	movs	r3, #14
 800873e:	71fb      	strb	r3, [r7, #7]
 8008740:	e02f      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 0:gain_bass   = 0b00001111;break;
 8008742:	230f      	movs	r3, #15
 8008744:	71fb      	strb	r3, [r7, #7]
 8008746:	e02c      	b.n	80087a2 <TDA7719_SetBass+0x15a>

	    case 1:gain_bass   = 0b00011110;break;
 8008748:	231e      	movs	r3, #30
 800874a:	71fb      	strb	r3, [r7, #7]
 800874c:	e029      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 2:gain_bass   = 0b00011101;break;
 800874e:	231d      	movs	r3, #29
 8008750:	71fb      	strb	r3, [r7, #7]
 8008752:	e026      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 3:gain_bass   = 0b00011100;break;
 8008754:	231c      	movs	r3, #28
 8008756:	71fb      	strb	r3, [r7, #7]
 8008758:	e023      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 4:gain_bass   = 0b00011011;break;
 800875a:	231b      	movs	r3, #27
 800875c:	71fb      	strb	r3, [r7, #7]
 800875e:	e020      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 5:gain_bass   = 0b00011010;break;
 8008760:	231a      	movs	r3, #26
 8008762:	71fb      	strb	r3, [r7, #7]
 8008764:	e01d      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 6:gain_bass   = 0b00011001;break;
 8008766:	2319      	movs	r3, #25
 8008768:	71fb      	strb	r3, [r7, #7]
 800876a:	e01a      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 7:gain_bass   = 0b00011000;break;
 800876c:	2318      	movs	r3, #24
 800876e:	71fb      	strb	r3, [r7, #7]
 8008770:	e017      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 8:gain_bass   = 0b00010111;break;
 8008772:	2317      	movs	r3, #23
 8008774:	71fb      	strb	r3, [r7, #7]
 8008776:	e014      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 9:gain_bass   = 0b00010110;break;
 8008778:	2316      	movs	r3, #22
 800877a:	71fb      	strb	r3, [r7, #7]
 800877c:	e011      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 10:gain_bass  = 0b00010101;break;
 800877e:	2315      	movs	r3, #21
 8008780:	71fb      	strb	r3, [r7, #7]
 8008782:	e00e      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 11:gain_bass  = 0b00010100;break;
 8008784:	2314      	movs	r3, #20
 8008786:	71fb      	strb	r3, [r7, #7]
 8008788:	e00b      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 12:gain_bass  = 0b00010011;break;
 800878a:	2313      	movs	r3, #19
 800878c:	71fb      	strb	r3, [r7, #7]
 800878e:	e008      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 13:gain_bass  = 0b00010010;break;
 8008790:	2312      	movs	r3, #18
 8008792:	71fb      	strb	r3, [r7, #7]
 8008794:	e005      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 14:gain_bass  = 0b00010001;break;
 8008796:	2311      	movs	r3, #17
 8008798:	71fb      	strb	r3, [r7, #7]
 800879a:	e002      	b.n	80087a2 <TDA7719_SetBass+0x15a>
	    case 15:gain_bass  = 0b00010000;break;
 800879c:	2310      	movs	r3, #16
 800879e:	71fb      	strb	r3, [r7, #7]
 80087a0:	bf00      	nop
	}
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x1F) | ((gain_bass << 0) & 0x1F);
 80087a2:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <TDA7719_SetBass+0x1cc>)
 80087a4:	7adb      	ldrb	r3, [r3, #11]
 80087a6:	b25b      	sxtb	r3, r3
 80087a8:	f023 031f 	bic.w	r3, r3, #31
 80087ac:	b25a      	sxtb	r2, r3
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	b25b      	sxtb	r3, r3
 80087b6:	4313      	orrs	r3, r2
 80087b8:	b25b      	sxtb	r3, r3
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	4b15      	ldr	r3, [pc, #84]	; (8008814 <TDA7719_SetBass+0x1cc>)
 80087be:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x60) | ((bass_q << 5) & 0x60);
 80087c0:	4b14      	ldr	r3, [pc, #80]	; (8008814 <TDA7719_SetBass+0x1cc>)
 80087c2:	7adb      	ldrb	r3, [r3, #11]
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80087ca:	b25a      	sxtb	r2, r3
 80087cc:	79bb      	ldrb	r3, [r7, #6]
 80087ce:	015b      	lsls	r3, r3, #5
 80087d0:	b25b      	sxtb	r3, r3
 80087d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d6:	b25b      	sxtb	r3, r3
 80087d8:	4313      	orrs	r3, r2
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	b2da      	uxtb	r2, r3
 80087de:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <TDA7719_SetBass+0x1cc>)
 80087e0:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x80) | ((soft_bass << 7) & 0x80);
 80087e2:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <TDA7719_SetBass+0x1cc>)
 80087e4:	7adb      	ldrb	r3, [r3, #11]
 80087e6:	b25b      	sxtb	r3, r3
 80087e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ec:	b25a      	sxtb	r2, r3
 80087ee:	797b      	ldrb	r3, [r7, #5]
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	4313      	orrs	r3, r2
 80087f6:	b25b      	sxtb	r3, r3
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	4b06      	ldr	r3, [pc, #24]	; (8008814 <TDA7719_SetBass+0x1cc>)
 80087fc:	72da      	strb	r2, [r3, #11]
	I2C_send(TDA7719_BASS , TDA7719_registers[TDA7719_BASS]);
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <TDA7719_SetBass+0x1cc>)
 8008800:	7adb      	ldrb	r3, [r3, #11]
 8008802:	4619      	mov	r1, r3
 8008804:	200b      	movs	r0, #11
 8008806:	f000 f9c5 	bl	8008b94 <I2C_send>
    }
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20000374 	.word	0x20000374

08008818 <TDA7719_SetVolume_LeftFront>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_LeftFront(int8_t LeftFront, uint8_t const soft_lf)
    {
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	460a      	mov	r2, r1
 8008822:	71fb      	strb	r3, [r7, #7]
 8008824:	4613      	mov	r3, r2
 8008826:	71bb      	strb	r3, [r7, #6]
	LeftFront = abs(LeftFront) + 0b00010000;
 8008828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882c:	2b00      	cmp	r3, #0
 800882e:	bfb8      	it	lt
 8008830:	425b      	neglt	r3, r3
 8008832:	b2db      	uxtb	r3, r3
 8008834:	3310      	adds	r3, #16
 8008836:	b2db      	uxtb	r3, r3
 8008838:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x7F) | ((LeftFront << 0) & 0x7F);
 800883a:	4b13      	ldr	r3, [pc, #76]	; (8008888 <TDA7719_SetVolume_LeftFront+0x70>)
 800883c:	7b5b      	ldrb	r3, [r3, #13]
 800883e:	b25b      	sxtb	r3, r3
 8008840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008844:	b25a      	sxtb	r2, r3
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884c:	b25b      	sxtb	r3, r3
 800884e:	4313      	orrs	r3, r2
 8008850:	b25b      	sxtb	r3, r3
 8008852:	b2da      	uxtb	r2, r3
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <TDA7719_SetVolume_LeftFront+0x70>)
 8008856:	735a      	strb	r2, [r3, #13]
	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x80) | ((soft_lf << 7) & 0x80);
 8008858:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <TDA7719_SetVolume_LeftFront+0x70>)
 800885a:	7b5b      	ldrb	r3, [r3, #13]
 800885c:	b25b      	sxtb	r3, r3
 800885e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008862:	b25a      	sxtb	r2, r3
 8008864:	79bb      	ldrb	r3, [r7, #6]
 8008866:	01db      	lsls	r3, r3, #7
 8008868:	b25b      	sxtb	r3, r3
 800886a:	4313      	orrs	r3, r2
 800886c:	b25b      	sxtb	r3, r3
 800886e:	b2da      	uxtb	r2, r3
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <TDA7719_SetVolume_LeftFront+0x70>)
 8008872:	735a      	strb	r2, [r3, #13]

	I2C_send(TDA7719_ATT_LF , TDA7719_registers[TDA7719_ATT_LF]);
 8008874:	4b04      	ldr	r3, [pc, #16]	; (8008888 <TDA7719_SetVolume_LeftFront+0x70>)
 8008876:	7b5b      	ldrb	r3, [r3, #13]
 8008878:	4619      	mov	r1, r3
 800887a:	200d      	movs	r0, #13
 800887c:	f000 f98a 	bl	8008b94 <I2C_send>
    }
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20000374 	.word	0x20000374

0800888c <TDA7719_SetVolume_RightFront>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_RightFront(int8_t RightFront, uint8_t const soft_rf)
    {
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	460a      	mov	r2, r1
 8008896:	71fb      	strb	r3, [r7, #7]
 8008898:	4613      	mov	r3, r2
 800889a:	71bb      	strb	r3, [r7, #6]
	RightFront = abs(RightFront) + 0b00010000;
 800889c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfb8      	it	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	3310      	adds	r3, #16
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x7F) | ((RightFront << 0) & 0x7F);
 80088ae:	4b13      	ldr	r3, [pc, #76]	; (80088fc <TDA7719_SetVolume_RightFront+0x70>)
 80088b0:	7b9b      	ldrb	r3, [r3, #14]
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088b8:	b25a      	sxtb	r2, r3
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c0:	b25b      	sxtb	r3, r3
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <TDA7719_SetVolume_RightFront+0x70>)
 80088ca:	739a      	strb	r2, [r3, #14]
	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x80) | ((soft_rf << 7) & 0x80);
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <TDA7719_SetVolume_RightFront+0x70>)
 80088ce:	7b9b      	ldrb	r3, [r3, #14]
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d6:	b25a      	sxtb	r2, r3
 80088d8:	79bb      	ldrb	r3, [r7, #6]
 80088da:	01db      	lsls	r3, r3, #7
 80088dc:	b25b      	sxtb	r3, r3
 80088de:	4313      	orrs	r3, r2
 80088e0:	b25b      	sxtb	r3, r3
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <TDA7719_SetVolume_RightFront+0x70>)
 80088e6:	739a      	strb	r2, [r3, #14]

	I2C_send(TDA7719_ATT_RF , TDA7719_registers[TDA7719_ATT_RF]);
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <TDA7719_SetVolume_RightFront+0x70>)
 80088ea:	7b9b      	ldrb	r3, [r3, #14]
 80088ec:	4619      	mov	r1, r3
 80088ee:	200e      	movs	r0, #14
 80088f0:	f000 f950 	bl	8008b94 <I2C_send>
    }
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000374 	.word	0x20000374

08008900 <TDA7719_SetVolume_LeftRear>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_LeftRear(int8_t LeftRear, uint8_t const soft_lr)
    {
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	460a      	mov	r2, r1
 800890a:	71fb      	strb	r3, [r7, #7]
 800890c:	4613      	mov	r3, r2
 800890e:	71bb      	strb	r3, [r7, #6]
	LeftRear = abs(LeftRear) + 0b00010000;
 8008910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008914:	2b00      	cmp	r3, #0
 8008916:	bfb8      	it	lt
 8008918:	425b      	neglt	r3, r3
 800891a:	b2db      	uxtb	r3, r3
 800891c:	3310      	adds	r3, #16
 800891e:	b2db      	uxtb	r3, r3
 8008920:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x7F) | ((LeftRear << 0) & 0x7F);
 8008922:	4b13      	ldr	r3, [pc, #76]	; (8008970 <TDA7719_SetVolume_LeftRear+0x70>)
 8008924:	7bdb      	ldrb	r3, [r3, #15]
 8008926:	b25b      	sxtb	r3, r3
 8008928:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800892c:	b25a      	sxtb	r2, r3
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008934:	b25b      	sxtb	r3, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	b25b      	sxtb	r3, r3
 800893a:	b2da      	uxtb	r2, r3
 800893c:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <TDA7719_SetVolume_LeftRear+0x70>)
 800893e:	73da      	strb	r2, [r3, #15]
	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x80) | ((soft_lr << 7) & 0x80);
 8008940:	4b0b      	ldr	r3, [pc, #44]	; (8008970 <TDA7719_SetVolume_LeftRear+0x70>)
 8008942:	7bdb      	ldrb	r3, [r3, #15]
 8008944:	b25b      	sxtb	r3, r3
 8008946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800894a:	b25a      	sxtb	r2, r3
 800894c:	79bb      	ldrb	r3, [r7, #6]
 800894e:	01db      	lsls	r3, r3, #7
 8008950:	b25b      	sxtb	r3, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	b25b      	sxtb	r3, r3
 8008956:	b2da      	uxtb	r2, r3
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <TDA7719_SetVolume_LeftRear+0x70>)
 800895a:	73da      	strb	r2, [r3, #15]

	I2C_send(TDA7719_ATT_LR , TDA7719_registers[TDA7719_ATT_LR]);
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <TDA7719_SetVolume_LeftRear+0x70>)
 800895e:	7bdb      	ldrb	r3, [r3, #15]
 8008960:	4619      	mov	r1, r3
 8008962:	200f      	movs	r0, #15
 8008964:	f000 f916 	bl	8008b94 <I2C_send>
    }
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000374 	.word	0x20000374

08008974 <TDA7719_SetVolume_RightRear>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_RightRear(int8_t RightRear, uint8_t const soft_rr)
    {
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	460a      	mov	r2, r1
 800897e:	71fb      	strb	r3, [r7, #7]
 8008980:	4613      	mov	r3, r2
 8008982:	71bb      	strb	r3, [r7, #6]

	RightRear = abs(RightRear) + 0b00010000;
 8008984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfb8      	it	lt
 800898c:	425b      	neglt	r3, r3
 800898e:	b2db      	uxtb	r3, r3
 8008990:	3310      	adds	r3, #16
 8008992:	b2db      	uxtb	r3, r3
 8008994:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x7F) | ((RightRear << 0) & 0x7F);
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <TDA7719_SetVolume_RightRear+0x70>)
 8008998:	7c1b      	ldrb	r3, [r3, #16]
 800899a:	b25b      	sxtb	r3, r3
 800899c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089a0:	b25a      	sxtb	r2, r3
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a8:	b25b      	sxtb	r3, r3
 80089aa:	4313      	orrs	r3, r2
 80089ac:	b25b      	sxtb	r3, r3
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	4b0c      	ldr	r3, [pc, #48]	; (80089e4 <TDA7719_SetVolume_RightRear+0x70>)
 80089b2:	741a      	strb	r2, [r3, #16]
	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x80) | ((soft_rr << 7) & 0x80);
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <TDA7719_SetVolume_RightRear+0x70>)
 80089b6:	7c1b      	ldrb	r3, [r3, #16]
 80089b8:	b25b      	sxtb	r3, r3
 80089ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089be:	b25a      	sxtb	r2, r3
 80089c0:	79bb      	ldrb	r3, [r7, #6]
 80089c2:	01db      	lsls	r3, r3, #7
 80089c4:	b25b      	sxtb	r3, r3
 80089c6:	4313      	orrs	r3, r2
 80089c8:	b25b      	sxtb	r3, r3
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <TDA7719_SetVolume_RightRear+0x70>)
 80089ce:	741a      	strb	r2, [r3, #16]

	I2C_send(TDA7719_ATT_RR , TDA7719_registers[TDA7719_ATT_RR]);
 80089d0:	4b04      	ldr	r3, [pc, #16]	; (80089e4 <TDA7719_SetVolume_RightRear+0x70>)
 80089d2:	7c1b      	ldrb	r3, [r3, #16]
 80089d4:	4619      	mov	r1, r3
 80089d6:	2010      	movs	r0, #16
 80089d8:	f000 f8dc 	bl	8008b94 <I2C_send>
    }
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20000374 	.word	0x20000374

080089e8 <check_volumes_ranges>:
    }



void check_volumes_ranges(void)
    {
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
	if (volumeMasterFlag == 1)
 80089ec:	4b62      	ldr	r3, [pc, #392]	; (8008b78 <check_volumes_ranges+0x190>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d13c      	bne.n	8008a6e <check_volumes_ranges+0x86>
	    {
		tempVolFrontLeft  = (encoderVolFront.volumeLeft - 79)  + (encoderVolFront.volumeLeftRight - 79);
 80089f4:	4b61      	ldr	r3, [pc, #388]	; (8008b7c <check_volumes_ranges+0x194>)
 80089f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	4b5f      	ldr	r3, [pc, #380]	; (8008b7c <check_volumes_ranges+0x194>)
 80089fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4413      	add	r3, r2
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b9e      	subs	r3, #158	; 0x9e
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	b21a      	sxth	r2, r3
 8008a0e:	4b5c      	ldr	r3, [pc, #368]	; (8008b80 <check_volumes_ranges+0x198>)
 8008a10:	801a      	strh	r2, [r3, #0]
		tempVolFrontRight = (encoderVolFront.volumeRight - 79) + (encoderVolFront.volumeLeftRight - 79);
 8008a12:	4b5a      	ldr	r3, [pc, #360]	; (8008b7c <check_volumes_ranges+0x194>)
 8008a14:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	4b58      	ldr	r3, [pc, #352]	; (8008b7c <check_volumes_ranges+0x194>)
 8008a1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b9e      	subs	r3, #158	; 0x9e
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	b21a      	sxth	r2, r3
 8008a2c:	4b55      	ldr	r3, [pc, #340]	; (8008b84 <check_volumes_ranges+0x19c>)
 8008a2e:	801a      	strh	r2, [r3, #0]
		tempVolBackLeft   = (encoderVolBack.volumeLeft - 79)   + (encoderVolBack.volumeLeftRight - 79);
 8008a30:	4b55      	ldr	r3, [pc, #340]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008a32:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	4b53      	ldr	r3, [pc, #332]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008a3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	4413      	add	r3, r2
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b9e      	subs	r3, #158	; 0x9e
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	b21a      	sxth	r2, r3
 8008a4a:	4b50      	ldr	r3, [pc, #320]	; (8008b8c <check_volumes_ranges+0x1a4>)
 8008a4c:	801a      	strh	r2, [r3, #0]
		tempVolBackRight  = (encoderVolBack.volumeRight - 79)  + (encoderVolBack.volumeLeftRight - 79);
 8008a4e:	4b4e      	ldr	r3, [pc, #312]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008a50:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	4b4c      	ldr	r3, [pc, #304]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008a58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	4413      	add	r3, r2
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	3b9e      	subs	r3, #158	; 0x9e
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	b21a      	sxth	r2, r3
 8008a68:	4b49      	ldr	r3, [pc, #292]	; (8008b90 <check_volumes_ranges+0x1a8>)
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	e057      	b.n	8008b1e <check_volumes_ranges+0x136>
	    }
	else if (volumeMasterFlag == 0)
 8008a6e:	4b42      	ldr	r3, [pc, #264]	; (8008b78 <check_volumes_ranges+0x190>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d153      	bne.n	8008b1e <check_volumes_ranges+0x136>
	    {
		tempVolFrontLeft  = (encoderVolFront.volumeMaster - 79) + (encoderVolFront.volumeLeft - 79)  + (encoderVolFront.volumeLeftRight - 79);
 8008a76:	4b41      	ldr	r3, [pc, #260]	; (8008b7c <check_volumes_ranges+0x194>)
 8008a78:	f993 3000 	ldrsb.w	r3, [r3]
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	4b3f      	ldr	r3, [pc, #252]	; (8008b7c <check_volumes_ranges+0x194>)
 8008a80:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	4413      	add	r3, r2
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	4b3c      	ldr	r3, [pc, #240]	; (8008b7c <check_volumes_ranges+0x194>)
 8008a8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	4413      	add	r3, r2
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	3bed      	subs	r3, #237	; 0xed
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b21a      	sxth	r2, r3
 8008a9c:	4b38      	ldr	r3, [pc, #224]	; (8008b80 <check_volumes_ranges+0x198>)
 8008a9e:	801a      	strh	r2, [r3, #0]
		tempVolFrontRight = (encoderVolFront.volumeMaster - 79) + (encoderVolFront.volumeRight - 79) + (encoderVolFront.volumeLeftRight - 79);
 8008aa0:	4b36      	ldr	r3, [pc, #216]	; (8008b7c <check_volumes_ranges+0x194>)
 8008aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	4b34      	ldr	r3, [pc, #208]	; (8008b7c <check_volumes_ranges+0x194>)
 8008aaa:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	4413      	add	r3, r2
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	4b31      	ldr	r3, [pc, #196]	; (8008b7c <check_volumes_ranges+0x194>)
 8008ab6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	4413      	add	r3, r2
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	3bed      	subs	r3, #237	; 0xed
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	b21a      	sxth	r2, r3
 8008ac6:	4b2f      	ldr	r3, [pc, #188]	; (8008b84 <check_volumes_ranges+0x19c>)
 8008ac8:	801a      	strh	r2, [r3, #0]
		tempVolBackLeft   = (encoderVolFront.volumeMaster - 79) + (encoderVolBack.volumeLeft - 79)   + (encoderVolBack.volumeLeftRight - 79);
 8008aca:	4b2c      	ldr	r3, [pc, #176]	; (8008b7c <check_volumes_ranges+0x194>)
 8008acc:	f993 3000 	ldrsb.w	r3, [r3]
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	4b2d      	ldr	r3, [pc, #180]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008ad4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	4b2a      	ldr	r3, [pc, #168]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008ae0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3bed      	subs	r3, #237	; 0xed
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	b21a      	sxth	r2, r3
 8008af0:	4b26      	ldr	r3, [pc, #152]	; (8008b8c <check_volumes_ranges+0x1a4>)
 8008af2:	801a      	strh	r2, [r3, #0]
		tempVolBackRight  = (encoderVolFront.volumeMaster - 79) + (encoderVolBack.volumeRight - 79)  + (encoderVolBack.volumeLeftRight - 79);
 8008af4:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <check_volumes_ranges+0x194>)
 8008af6:	f993 3000 	ldrsb.w	r3, [r3]
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	4b22      	ldr	r3, [pc, #136]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008afe:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4413      	add	r3, r2
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	4b1f      	ldr	r3, [pc, #124]	; (8008b88 <check_volumes_ranges+0x1a0>)
 8008b0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4413      	add	r3, r2
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	3bed      	subs	r3, #237	; 0xed
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	b21a      	sxth	r2, r3
 8008b1a:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <check_volumes_ranges+0x1a8>)
 8008b1c:	801a      	strh	r2, [r3, #0]
	    }

	if (tempVolFrontLeft  <= -79)tempVolFrontLeft  = -79;
 8008b1e:	4b18      	ldr	r3, [pc, #96]	; (8008b80 <check_volumes_ranges+0x198>)
 8008b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b24:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 8008b28:	da03      	bge.n	8008b32 <check_volumes_ranges+0x14a>
 8008b2a:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <check_volumes_ranges+0x198>)
 8008b2c:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 8008b30:	801a      	strh	r2, [r3, #0]
	if (tempVolFrontRight <= -79)tempVolFrontRight = -79;
 8008b32:	4b14      	ldr	r3, [pc, #80]	; (8008b84 <check_volumes_ranges+0x19c>)
 8008b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b38:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 8008b3c:	da03      	bge.n	8008b46 <check_volumes_ranges+0x15e>
 8008b3e:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <check_volumes_ranges+0x19c>)
 8008b40:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 8008b44:	801a      	strh	r2, [r3, #0]
	if (tempVolBackLeft   <= -79)tempVolBackLeft   = -79;
 8008b46:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <check_volumes_ranges+0x1a4>)
 8008b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b4c:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 8008b50:	da03      	bge.n	8008b5a <check_volumes_ranges+0x172>
 8008b52:	4b0e      	ldr	r3, [pc, #56]	; (8008b8c <check_volumes_ranges+0x1a4>)
 8008b54:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 8008b58:	801a      	strh	r2, [r3, #0]
	if (tempVolBackRight  <= -79)tempVolBackRight  = -79;
 8008b5a:	4b0d      	ldr	r3, [pc, #52]	; (8008b90 <check_volumes_ranges+0x1a8>)
 8008b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b60:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 8008b64:	da03      	bge.n	8008b6e <check_volumes_ranges+0x186>
 8008b66:	4b0a      	ldr	r3, [pc, #40]	; (8008b90 <check_volumes_ranges+0x1a8>)
 8008b68:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 8008b6c:	801a      	strh	r2, [r3, #0]
    }
 8008b6e:	bf00      	nop
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20000450 	.word	0x20000450
 8008b7c:	20000554 	.word	0x20000554
 8008b80:	20000468 	.word	0x20000468
 8008b84:	20000246 	.word	0x20000246
 8008b88:	20000518 	.word	0x20000518
 8008b8c:	200002b0 	.word	0x200002b0
 8008b90:	2000046a 	.word	0x2000046a

08008b94 <I2C_send>:


//====================== Communication with TDA7719 device via I2C ========================//
static void I2C_send(uint8_t const SubAddress, uint8_t const Data)
    {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	460a      	mov	r2, r1
 8008b9e:	71fb      	strb	r3, [r7, #7]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	71bb      	strb	r3, [r7, #6]
	uint8_t tab_to_send[2];
	tab_to_send[0] = SubAddress;
 8008ba4:	79fb      	ldrb	r3, [r7, #7]
 8008ba6:	733b      	strb	r3, [r7, #12]
	tab_to_send[1] = Data;
 8008ba8:	79bb      	ldrb	r3, [r7, #6]
 8008baa:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c2, TDA7719_address, tab_to_send, 2,10);
 8008bac:	f107 020c 	add.w	r2, r7, #12
 8008bb0:	230a      	movs	r3, #10
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	2188      	movs	r1, #136	; 0x88
 8008bb8:	4803      	ldr	r0, [pc, #12]	; (8008bc8 <I2C_send+0x34>)
 8008bba:	f006 fefd 	bl	800f9b8 <HAL_I2C_Master_Transmit>

    }
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	200006bc 	.word	0x200006bc

08008bcc <RTC_Alarm_activated_routine>:
	Alarm_.AlarmDateWeekDay = 1;
    }

//
void RTC_Alarm_activated_routine()
    {
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
	SSD1322_Screen_State = SSD1322_SCREEN_WakeUp;
 8008bd0:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <RTC_Alarm_activated_routine+0x14>)
 8008bd2:	2214      	movs	r2, #20
 8008bd4:	701a      	strb	r2, [r3, #0]
	//init preamp
	//init display
	//init radio
    }
 8008bd6:	bf00      	nop
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	200004f8 	.word	0x200004f8

08008be4 <HAL_RTCEx_AlarmBEventCallback>:

//
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
    {
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8008bec:	2200      	movs	r2, #0
 8008bee:	4937      	ldr	r1, [pc, #220]	; (8008ccc <HAL_RTCEx_AlarmBEventCallback+0xe8>)
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f009 fe65 	bl	80128c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4935      	ldr	r1, [pc, #212]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f009 ff4a 	bl	8012a94 <HAL_RTC_GetDate>

	switch (RTC_typeOfAlarm_B)
 8008c00:	4b34      	ldr	r3, [pc, #208]	; (8008cd4 <HAL_RTCEx_AlarmBEventCallback+0xf0>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	3b01      	subs	r3, #1
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d84a      	bhi.n	8008ca0 <HAL_RTCEx_AlarmBEventCallback+0xbc>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <HAL_RTCEx_AlarmBEventCallback+0x2c>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c25 	.word	0x08008c25
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	08008cb9 	.word	0x08008cb9
 8008c1c:	08008c57 	.word	0x08008c57
 8008c20:	08008c85 	.word	0x08008c85
	    {
	    case ONLY_ONE_TIME_ALARM:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	699a      	ldr	r2, [r3, #24]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c32:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_B = false;
 8008c34:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <HAL_RTCEx_AlarmBEventCallback+0xf4>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 8008c3a:	f7ff ffc7 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008c3e:	e040      	b.n	8008cc2 <HAL_RTCEx_AlarmBEventCallback+0xde>
	    case ONLY_WEEKENDS_ALARM:
		if ((sDate.WeekDay == RTC_WEEKDAY_SATURDAY)
 8008c40:	4b23      	ldr	r3, [pc, #140]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b06      	cmp	r3, #6
 8008c46:	d003      	beq.n	8008c50 <HAL_RTCEx_AlarmBEventCallback+0x6c>
		|| (sDate.WeekDay == RTC_WEEKDAY_SUNDAY))
 8008c48:	4b21      	ldr	r3, [pc, #132]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b07      	cmp	r3, #7
 8008c4e:	d135      	bne.n	8008cbc <HAL_RTCEx_AlarmBEventCallback+0xd8>
		    RTC_Alarm_activated_routine();
 8008c50:	f7ff ffbc 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008c54:	e032      	b.n	8008cbc <HAL_RTCEx_AlarmBEventCallback+0xd8>
	    case EVERYDAY_ALARM:
		//keep interupt on
		break;
	    case MON_to_FRI_ALARM: //go to alarm routine if it is not weekend
		if((sDate.WeekDay == RTC_WEEKDAY_MONDAY)
 8008c56:	4b1e      	ldr	r3, [pc, #120]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d00f      	beq.n	8008c7e <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_TUESDAY)
 8008c5e:	4b1c      	ldr	r3, [pc, #112]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d00b      	beq.n	8008c7e <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_WEDNESDAY)
 8008c66:	4b1a      	ldr	r3, [pc, #104]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d007      	beq.n	8008c7e <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_THURSDAY)
 8008c6e:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d003      	beq.n	8008c7e <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_FRIDAY))
 8008c76:	4b16      	ldr	r3, [pc, #88]	; (8008cd0 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	2b05      	cmp	r3, #5
 8008c7c:	d120      	bne.n	8008cc0 <HAL_RTCEx_AlarmBEventCallback+0xdc>
		    RTC_Alarm_activated_routine();
 8008c7e:	f7ff ffa5 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008c82:	e01d      	b.n	8008cc0 <HAL_RTCEx_AlarmBEventCallback+0xdc>
	    case EXACT_DATE_ALRAM: //trzeba dzień
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699a      	ldr	r2, [r3, #24]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c92:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008c94:	4b11      	ldr	r3, [pc, #68]	; (8008cdc <HAL_RTCEx_AlarmBEventCallback+0xf8>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 8008c9a:	f7ff ff97 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008c9e:	e010      	b.n	8008cc2 <HAL_RTCEx_AlarmBEventCallback+0xde>
	    default:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699a      	ldr	r2, [r3, #24]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cae:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008cb0:	4b0a      	ldr	r3, [pc, #40]	; (8008cdc <HAL_RTCEx_AlarmBEventCallback+0xf8>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]
		break;
 8008cb6:	e004      	b.n	8008cc2 <HAL_RTCEx_AlarmBEventCallback+0xde>
		break;
 8008cb8:	bf00      	nop
 8008cba:	e002      	b.n	8008cc2 <HAL_RTCEx_AlarmBEventCallback+0xde>
		break;
 8008cbc:	bf00      	nop
 8008cbe:	e000      	b.n	8008cc2 <HAL_RTCEx_AlarmBEventCallback+0xde>
		break;
 8008cc0:	bf00      	nop
	    }

    }
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	2000178c 	.word	0x2000178c
 8008cd0:	200057bc 	.word	0x200057bc
 8008cd4:	2000050b 	.word	0x2000050b
 8008cd8:	200004f6 	.word	0x200004f6
 8008cdc:	200002ae 	.word	0x200002ae

08008ce0 <HAL_RTC_AlarmAEventCallback>:

//
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
    {
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4937      	ldr	r1, [pc, #220]	; (8008dc8 <HAL_RTC_AlarmAEventCallback+0xe8>)
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f009 fde7 	bl	80128c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	4935      	ldr	r1, [pc, #212]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f009 fecc 	bl	8012a94 <HAL_RTC_GetDate>

	switch (RTC_typeOfAlarm_A)
 8008cfc:	4b34      	ldr	r3, [pc, #208]	; (8008dd0 <HAL_RTC_AlarmAEventCallback+0xf0>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d84a      	bhi.n	8008d9c <HAL_RTC_AlarmAEventCallback+0xbc>
 8008d06:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <HAL_RTC_AlarmAEventCallback+0x2c>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d21 	.word	0x08008d21
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	08008db5 	.word	0x08008db5
 8008d18:	08008d53 	.word	0x08008d53
 8008d1c:	08008d81 	.word	0x08008d81
	    {
	    case ONLY_ONE_TIME_ALARM:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699a      	ldr	r2, [r3, #24]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d2e:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008d30:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <HAL_RTC_AlarmAEventCallback+0xf4>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 8008d36:	f7ff ff49 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008d3a:	e040      	b.n	8008dbe <HAL_RTC_AlarmAEventCallback+0xde>
	    case ONLY_WEEKENDS_ALARM:
		if ((sDate.WeekDay == RTC_WEEKDAY_SATURDAY)
 8008d3c:	4b23      	ldr	r3, [pc, #140]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	2b06      	cmp	r3, #6
 8008d42:	d003      	beq.n	8008d4c <HAL_RTC_AlarmAEventCallback+0x6c>
		|| (sDate.WeekDay == RTC_WEEKDAY_SUNDAY))
 8008d44:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b07      	cmp	r3, #7
 8008d4a:	d135      	bne.n	8008db8 <HAL_RTC_AlarmAEventCallback+0xd8>
		    RTC_Alarm_activated_routine();
 8008d4c:	f7ff ff3e 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008d50:	e032      	b.n	8008db8 <HAL_RTC_AlarmAEventCallback+0xd8>
	    case EVERYDAY_ALARM:
		//keep interupt on
		break;
	    case MON_to_FRI_ALARM: //go to alarm routine if it is not weekend
		if((sDate.WeekDay == RTC_WEEKDAY_MONDAY)
 8008d52:	4b1e      	ldr	r3, [pc, #120]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d00f      	beq.n	8008d7a <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_TUESDAY)
 8008d5a:	4b1c      	ldr	r3, [pc, #112]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d00b      	beq.n	8008d7a <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_WEDNESDAY)
 8008d62:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d007      	beq.n	8008d7a <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_THURSDAY)
 8008d6a:	4b18      	ldr	r3, [pc, #96]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d003      	beq.n	8008d7a <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_FRIDAY))
 8008d72:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <HAL_RTC_AlarmAEventCallback+0xec>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d120      	bne.n	8008dbc <HAL_RTC_AlarmAEventCallback+0xdc>
		    RTC_Alarm_activated_routine();
 8008d7a:	f7ff ff27 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008d7e:	e01d      	b.n	8008dbc <HAL_RTC_AlarmAEventCallback+0xdc>
	    case EXACT_DATE_ALRAM: //trzeba dzień
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699a      	ldr	r2, [r3, #24]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d8e:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008d90:	4b10      	ldr	r3, [pc, #64]	; (8008dd4 <HAL_RTC_AlarmAEventCallback+0xf4>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 8008d96:	f7ff ff19 	bl	8008bcc <RTC_Alarm_activated_routine>
		break;
 8008d9a:	e010      	b.n	8008dbe <HAL_RTC_AlarmAEventCallback+0xde>
	    default:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008daa:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008dac:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <HAL_RTC_AlarmAEventCallback+0xf4>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	701a      	strb	r2, [r3, #0]
		break;
 8008db2:	e004      	b.n	8008dbe <HAL_RTC_AlarmAEventCallback+0xde>
		break;
 8008db4:	bf00      	nop
 8008db6:	e002      	b.n	8008dbe <HAL_RTC_AlarmAEventCallback+0xde>
		break;
 8008db8:	bf00      	nop
 8008dba:	e000      	b.n	8008dbe <HAL_RTC_AlarmAEventCallback+0xde>
		break;
 8008dbc:	bf00      	nop
	    }
	//ustawia jakąś flagę, która trzeba potem wyłączyć przyciskiem
	// dodać ifa, switcha albo funkcje która zwraca typ alarmu
	//wylaczyc alarm w zaleznosci od ustawienia
	//sprawdzić czy przekaznik jest wlaczony i zalączyć muzykę w zależności od ustawień
    }
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2000178c 	.word	0x2000178c
 8008dcc:	200057bc 	.word	0x200057bc
 8008dd0:	20000508 	.word	0x20000508
 8008dd4:	200002ae 	.word	0x200002ae

08008dd8 <switch_change_time>:

//
void switch_change_time(Clock_Data_Change_t Clock, _Bool add_subb)
    {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	460a      	mov	r2, r1
 8008de2:	71fb      	strb	r3, [r7, #7]
 8008de4:	4613      	mov	r3, r2
 8008de6:	71bb      	strb	r3, [r7, #6]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8008de8:	2200      	movs	r2, #0
 8008dea:	499d      	ldr	r1, [pc, #628]	; (8009060 <switch_change_time+0x288>)
 8008dec:	489d      	ldr	r0, [pc, #628]	; (8009064 <switch_change_time+0x28c>)
 8008dee:	f009 fd67 	bl	80128c0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8008df2:	2200      	movs	r2, #0
 8008df4:	499c      	ldr	r1, [pc, #624]	; (8009068 <switch_change_time+0x290>)
 8008df6:	489b      	ldr	r0, [pc, #620]	; (8009064 <switch_change_time+0x28c>)
 8008df8:	f009 fe4c 	bl	8012a94 <HAL_RTC_GetDate>

	switch (Clock)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	2b07      	cmp	r3, #7
 8008e02:	f200 811e 	bhi.w	8009042 <switch_change_time+0x26a>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <switch_change_time+0x34>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e2d 	.word	0x08008e2d
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008eed 	.word	0x08008eed
 8008e18:	08008f65 	.word	0x08008f65
 8008e1c:	08009043 	.word	0x08009043
 8008e20:	08008ead 	.word	0x08008ead
 8008e24:	08008fb5 	.word	0x08008fb5
 8008e28:	08009005 	.word	0x08009005
	    {
	    case HOUR:
		if(add_subb)sTime.Hours--;
 8008e2c:	79bb      	ldrb	r3, [r7, #6]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d006      	beq.n	8008e40 <switch_change_time+0x68>
 8008e32:	4b8b      	ldr	r3, [pc, #556]	; (8009060 <switch_change_time+0x288>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	4b89      	ldr	r3, [pc, #548]	; (8009060 <switch_change_time+0x288>)
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e005      	b.n	8008e4c <switch_change_time+0x74>
		else sTime.Hours++;
 8008e40:	4b87      	ldr	r3, [pc, #540]	; (8009060 <switch_change_time+0x288>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	4b85      	ldr	r3, [pc, #532]	; (8009060 <switch_change_time+0x288>)
 8008e4a:	701a      	strb	r2, [r3, #0]
		if(sTime.Hours == UINT8_MAX) sTime.Hours = 23;
 8008e4c:	4b84      	ldr	r3, [pc, #528]	; (8009060 <switch_change_time+0x288>)
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2bff      	cmp	r3, #255	; 0xff
 8008e52:	d102      	bne.n	8008e5a <switch_change_time+0x82>
 8008e54:	4b82      	ldr	r3, [pc, #520]	; (8009060 <switch_change_time+0x288>)
 8008e56:	2217      	movs	r2, #23
 8008e58:	701a      	strb	r2, [r3, #0]
		if (IS_RTC_HOUR24(sTime.Hours)!= true) sTime.Hours = 0x00;
 8008e5a:	4b81      	ldr	r3, [pc, #516]	; (8009060 <switch_change_time+0x288>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2b17      	cmp	r3, #23
 8008e60:	f240 80f1 	bls.w	8009046 <switch_change_time+0x26e>
 8008e64:	4b7e      	ldr	r3, [pc, #504]	; (8009060 <switch_change_time+0x288>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
		break;
 8008e6a:	e0ec      	b.n	8009046 <switch_change_time+0x26e>
	    case MINUTE:
		if(add_subb)sTime.Minutes--;
 8008e6c:	79bb      	ldrb	r3, [r7, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d006      	beq.n	8008e80 <switch_change_time+0xa8>
 8008e72:	4b7b      	ldr	r3, [pc, #492]	; (8009060 <switch_change_time+0x288>)
 8008e74:	785b      	ldrb	r3, [r3, #1]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	4b79      	ldr	r3, [pc, #484]	; (8009060 <switch_change_time+0x288>)
 8008e7c:	705a      	strb	r2, [r3, #1]
 8008e7e:	e005      	b.n	8008e8c <switch_change_time+0xb4>
		else sTime.Minutes++;
 8008e80:	4b77      	ldr	r3, [pc, #476]	; (8009060 <switch_change_time+0x288>)
 8008e82:	785b      	ldrb	r3, [r3, #1]
 8008e84:	3301      	adds	r3, #1
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	4b75      	ldr	r3, [pc, #468]	; (8009060 <switch_change_time+0x288>)
 8008e8a:	705a      	strb	r2, [r3, #1]
		if(sTime.Minutes == UINT8_MAX) sTime.Minutes = 59;
 8008e8c:	4b74      	ldr	r3, [pc, #464]	; (8009060 <switch_change_time+0x288>)
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2bff      	cmp	r3, #255	; 0xff
 8008e92:	d102      	bne.n	8008e9a <switch_change_time+0xc2>
 8008e94:	4b72      	ldr	r3, [pc, #456]	; (8009060 <switch_change_time+0x288>)
 8008e96:	223b      	movs	r2, #59	; 0x3b
 8008e98:	705a      	strb	r2, [r3, #1]
		if (IS_RTC_MINUTES(sTime.Minutes)!= true) sTime.Minutes = 0x00;
 8008e9a:	4b71      	ldr	r3, [pc, #452]	; (8009060 <switch_change_time+0x288>)
 8008e9c:	785b      	ldrb	r3, [r3, #1]
 8008e9e:	2b3b      	cmp	r3, #59	; 0x3b
 8008ea0:	f240 80d3 	bls.w	800904a <switch_change_time+0x272>
 8008ea4:	4b6e      	ldr	r3, [pc, #440]	; (8009060 <switch_change_time+0x288>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	705a      	strb	r2, [r3, #1]
		break;
 8008eaa:	e0ce      	b.n	800904a <switch_change_time+0x272>
	    case SECOND:
		if(add_subb)sTime.Seconds--;
 8008eac:	79bb      	ldrb	r3, [r7, #6]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d006      	beq.n	8008ec0 <switch_change_time+0xe8>
 8008eb2:	4b6b      	ldr	r3, [pc, #428]	; (8009060 <switch_change_time+0x288>)
 8008eb4:	789b      	ldrb	r3, [r3, #2]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	4b69      	ldr	r3, [pc, #420]	; (8009060 <switch_change_time+0x288>)
 8008ebc:	709a      	strb	r2, [r3, #2]
 8008ebe:	e005      	b.n	8008ecc <switch_change_time+0xf4>
		else sTime.Seconds++;
 8008ec0:	4b67      	ldr	r3, [pc, #412]	; (8009060 <switch_change_time+0x288>)
 8008ec2:	789b      	ldrb	r3, [r3, #2]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	4b65      	ldr	r3, [pc, #404]	; (8009060 <switch_change_time+0x288>)
 8008eca:	709a      	strb	r2, [r3, #2]
		if(sTime.Seconds == UINT8_MAX) sTime.Seconds = 59;
 8008ecc:	4b64      	ldr	r3, [pc, #400]	; (8009060 <switch_change_time+0x288>)
 8008ece:	789b      	ldrb	r3, [r3, #2]
 8008ed0:	2bff      	cmp	r3, #255	; 0xff
 8008ed2:	d102      	bne.n	8008eda <switch_change_time+0x102>
 8008ed4:	4b62      	ldr	r3, [pc, #392]	; (8009060 <switch_change_time+0x288>)
 8008ed6:	223b      	movs	r2, #59	; 0x3b
 8008ed8:	709a      	strb	r2, [r3, #2]
		if (IS_RTC_SECONDS(sTime.Seconds)!= true) sTime.Seconds = 0x00;
 8008eda:	4b61      	ldr	r3, [pc, #388]	; (8009060 <switch_change_time+0x288>)
 8008edc:	789b      	ldrb	r3, [r3, #2]
 8008ede:	2b3b      	cmp	r3, #59	; 0x3b
 8008ee0:	f240 80b5 	bls.w	800904e <switch_change_time+0x276>
 8008ee4:	4b5e      	ldr	r3, [pc, #376]	; (8009060 <switch_change_time+0x288>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	709a      	strb	r2, [r3, #2]
		break;
 8008eea:	e0b0      	b.n	800904e <switch_change_time+0x276>
	    case DAYWEEK:
		if(add_subb)sDate.WeekDay--;
 8008eec:	79bb      	ldrb	r3, [r7, #6]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d006      	beq.n	8008f00 <switch_change_time+0x128>
 8008ef2:	4b5d      	ldr	r3, [pc, #372]	; (8009068 <switch_change_time+0x290>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	4b5b      	ldr	r3, [pc, #364]	; (8009068 <switch_change_time+0x290>)
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	e005      	b.n	8008f0c <switch_change_time+0x134>
		else sDate.WeekDay++;
 8008f00:	4b59      	ldr	r3, [pc, #356]	; (8009068 <switch_change_time+0x290>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	3301      	adds	r3, #1
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	4b57      	ldr	r3, [pc, #348]	; (8009068 <switch_change_time+0x290>)
 8008f0a:	701a      	strb	r2, [r3, #0]
		if(sDate.WeekDay == UINT8_MAX) sDate.WeekDay = 7;
 8008f0c:	4b56      	ldr	r3, [pc, #344]	; (8009068 <switch_change_time+0x290>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2bff      	cmp	r3, #255	; 0xff
 8008f12:	d102      	bne.n	8008f1a <switch_change_time+0x142>
 8008f14:	4b54      	ldr	r3, [pc, #336]	; (8009068 <switch_change_time+0x290>)
 8008f16:	2207      	movs	r2, #7
 8008f18:	701a      	strb	r2, [r3, #0]
		if (IS_RTC_WEEKDAY(sDate.WeekDay)!= true) sDate.WeekDay = 0x00;
 8008f1a:	4b53      	ldr	r3, [pc, #332]	; (8009068 <switch_change_time+0x290>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d017      	beq.n	8008f52 <switch_change_time+0x17a>
 8008f22:	4b51      	ldr	r3, [pc, #324]	; (8009068 <switch_change_time+0x290>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d013      	beq.n	8008f52 <switch_change_time+0x17a>
 8008f2a:	4b4f      	ldr	r3, [pc, #316]	; (8009068 <switch_change_time+0x290>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d00f      	beq.n	8008f52 <switch_change_time+0x17a>
 8008f32:	4b4d      	ldr	r3, [pc, #308]	; (8009068 <switch_change_time+0x290>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d00b      	beq.n	8008f52 <switch_change_time+0x17a>
 8008f3a:	4b4b      	ldr	r3, [pc, #300]	; (8009068 <switch_change_time+0x290>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	d007      	beq.n	8008f52 <switch_change_time+0x17a>
 8008f42:	4b49      	ldr	r3, [pc, #292]	; (8009068 <switch_change_time+0x290>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b06      	cmp	r3, #6
 8008f48:	d003      	beq.n	8008f52 <switch_change_time+0x17a>
 8008f4a:	4b47      	ldr	r3, [pc, #284]	; (8009068 <switch_change_time+0x290>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b07      	cmp	r3, #7
 8008f50:	d101      	bne.n	8008f56 <switch_change_time+0x17e>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <switch_change_time+0x180>
 8008f56:	2300      	movs	r3, #0
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d07a      	beq.n	8009052 <switch_change_time+0x27a>
 8008f5c:	4b42      	ldr	r3, [pc, #264]	; (8009068 <switch_change_time+0x290>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
		break;
 8008f62:	e076      	b.n	8009052 <switch_change_time+0x27a>
	    case DAY:
		if(add_subb)sDate.Date--;
 8008f64:	79bb      	ldrb	r3, [r7, #6]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d006      	beq.n	8008f78 <switch_change_time+0x1a0>
 8008f6a:	4b3f      	ldr	r3, [pc, #252]	; (8009068 <switch_change_time+0x290>)
 8008f6c:	789b      	ldrb	r3, [r3, #2]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	4b3d      	ldr	r3, [pc, #244]	; (8009068 <switch_change_time+0x290>)
 8008f74:	709a      	strb	r2, [r3, #2]
 8008f76:	e005      	b.n	8008f84 <switch_change_time+0x1ac>
		else sDate.Date++;
 8008f78:	4b3b      	ldr	r3, [pc, #236]	; (8009068 <switch_change_time+0x290>)
 8008f7a:	789b      	ldrb	r3, [r3, #2]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	4b39      	ldr	r3, [pc, #228]	; (8009068 <switch_change_time+0x290>)
 8008f82:	709a      	strb	r2, [r3, #2]
		if(sDate.Date == UINT8_MAX) sDate.Date = 30;
 8008f84:	4b38      	ldr	r3, [pc, #224]	; (8009068 <switch_change_time+0x290>)
 8008f86:	789b      	ldrb	r3, [r3, #2]
 8008f88:	2bff      	cmp	r3, #255	; 0xff
 8008f8a:	d102      	bne.n	8008f92 <switch_change_time+0x1ba>
 8008f8c:	4b36      	ldr	r3, [pc, #216]	; (8009068 <switch_change_time+0x290>)
 8008f8e:	221e      	movs	r2, #30
 8008f90:	709a      	strb	r2, [r3, #2]
		if (IS_RTC_DATE(sDate.Date)!= true) sDate.Date = 0x00;
 8008f92:	4b35      	ldr	r3, [pc, #212]	; (8009068 <switch_change_time+0x290>)
 8008f94:	789b      	ldrb	r3, [r3, #2]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <switch_change_time+0x1ce>
 8008f9a:	4b33      	ldr	r3, [pc, #204]	; (8009068 <switch_change_time+0x290>)
 8008f9c:	789b      	ldrb	r3, [r3, #2]
 8008f9e:	2b1f      	cmp	r3, #31
 8008fa0:	d801      	bhi.n	8008fa6 <switch_change_time+0x1ce>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <switch_change_time+0x1d0>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d054      	beq.n	8009056 <switch_change_time+0x27e>
 8008fac:	4b2e      	ldr	r3, [pc, #184]	; (8009068 <switch_change_time+0x290>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	709a      	strb	r2, [r3, #2]
		break;
 8008fb2:	e050      	b.n	8009056 <switch_change_time+0x27e>
	    case MONTH:
		if(add_subb)sDate.Month--;
 8008fb4:	79bb      	ldrb	r3, [r7, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d006      	beq.n	8008fc8 <switch_change_time+0x1f0>
 8008fba:	4b2b      	ldr	r3, [pc, #172]	; (8009068 <switch_change_time+0x290>)
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	4b29      	ldr	r3, [pc, #164]	; (8009068 <switch_change_time+0x290>)
 8008fc4:	705a      	strb	r2, [r3, #1]
 8008fc6:	e005      	b.n	8008fd4 <switch_change_time+0x1fc>
		else sDate.Month++;
 8008fc8:	4b27      	ldr	r3, [pc, #156]	; (8009068 <switch_change_time+0x290>)
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	4b25      	ldr	r3, [pc, #148]	; (8009068 <switch_change_time+0x290>)
 8008fd2:	705a      	strb	r2, [r3, #1]
		if(sDate.Month == UINT8_MAX) sDate.Month = 12;
 8008fd4:	4b24      	ldr	r3, [pc, #144]	; (8009068 <switch_change_time+0x290>)
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2bff      	cmp	r3, #255	; 0xff
 8008fda:	d102      	bne.n	8008fe2 <switch_change_time+0x20a>
 8008fdc:	4b22      	ldr	r3, [pc, #136]	; (8009068 <switch_change_time+0x290>)
 8008fde:	220c      	movs	r2, #12
 8008fe0:	705a      	strb	r2, [r3, #1]
		if (IS_RTC_MONTH(sDate.Month)!= true) sDate.Month = 0x00;
 8008fe2:	4b21      	ldr	r3, [pc, #132]	; (8009068 <switch_change_time+0x290>)
 8008fe4:	785b      	ldrb	r3, [r3, #1]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d005      	beq.n	8008ff6 <switch_change_time+0x21e>
 8008fea:	4b1f      	ldr	r3, [pc, #124]	; (8009068 <switch_change_time+0x290>)
 8008fec:	785b      	ldrb	r3, [r3, #1]
 8008fee:	2b0c      	cmp	r3, #12
 8008ff0:	d801      	bhi.n	8008ff6 <switch_change_time+0x21e>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <switch_change_time+0x220>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d02e      	beq.n	800905a <switch_change_time+0x282>
 8008ffc:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <switch_change_time+0x290>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	705a      	strb	r2, [r3, #1]
		break;
 8009002:	e02a      	b.n	800905a <switch_change_time+0x282>
	    case YEAR:
		if(add_subb)sDate.Year--;
 8009004:	79bb      	ldrb	r3, [r7, #6]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d006      	beq.n	8009018 <switch_change_time+0x240>
 800900a:	4b17      	ldr	r3, [pc, #92]	; (8009068 <switch_change_time+0x290>)
 800900c:	78db      	ldrb	r3, [r3, #3]
 800900e:	3b01      	subs	r3, #1
 8009010:	b2da      	uxtb	r2, r3
 8009012:	4b15      	ldr	r3, [pc, #84]	; (8009068 <switch_change_time+0x290>)
 8009014:	70da      	strb	r2, [r3, #3]
 8009016:	e005      	b.n	8009024 <switch_change_time+0x24c>
		else sDate.Year++;
 8009018:	4b13      	ldr	r3, [pc, #76]	; (8009068 <switch_change_time+0x290>)
 800901a:	78db      	ldrb	r3, [r3, #3]
 800901c:	3301      	adds	r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	4b11      	ldr	r3, [pc, #68]	; (8009068 <switch_change_time+0x290>)
 8009022:	70da      	strb	r2, [r3, #3]
		if(sDate.Year == UINT8_MAX) sDate.Year = 0;
 8009024:	4b10      	ldr	r3, [pc, #64]	; (8009068 <switch_change_time+0x290>)
 8009026:	78db      	ldrb	r3, [r3, #3]
 8009028:	2bff      	cmp	r3, #255	; 0xff
 800902a:	d102      	bne.n	8009032 <switch_change_time+0x25a>
 800902c:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <switch_change_time+0x290>)
 800902e:	2200      	movs	r2, #0
 8009030:	70da      	strb	r2, [r3, #3]
		if (IS_RTC_YEAR(sDate.Year)!= true) sDate.Year = 0x00;
 8009032:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <switch_change_time+0x290>)
 8009034:	78db      	ldrb	r3, [r3, #3]
 8009036:	2b63      	cmp	r3, #99	; 0x63
 8009038:	d918      	bls.n	800906c <switch_change_time+0x294>
 800903a:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <switch_change_time+0x290>)
 800903c:	2200      	movs	r2, #0
 800903e:	70da      	strb	r2, [r3, #3]
		break;
 8009040:	e014      	b.n	800906c <switch_change_time+0x294>
	    default:
		//reset all values
		break;
 8009042:	bf00      	nop
 8009044:	e013      	b.n	800906e <switch_change_time+0x296>
		break;
 8009046:	bf00      	nop
 8009048:	e011      	b.n	800906e <switch_change_time+0x296>
		break;
 800904a:	bf00      	nop
 800904c:	e00f      	b.n	800906e <switch_change_time+0x296>
		break;
 800904e:	bf00      	nop
 8009050:	e00d      	b.n	800906e <switch_change_time+0x296>
		break;
 8009052:	bf00      	nop
 8009054:	e00b      	b.n	800906e <switch_change_time+0x296>
		break;
 8009056:	bf00      	nop
 8009058:	e009      	b.n	800906e <switch_change_time+0x296>
		break;
 800905a:	bf00      	nop
 800905c:	e007      	b.n	800906e <switch_change_time+0x296>
 800905e:	bf00      	nop
 8009060:	2000178c 	.word	0x2000178c
 8009064:	20007828 	.word	0x20007828
 8009068:	200057bc 	.word	0x200057bc
		break;
 800906c:	bf00      	nop
	    }
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800906e:	2200      	movs	r2, #0
 8009070:	4906      	ldr	r1, [pc, #24]	; (800908c <switch_change_time+0x2b4>)
 8009072:	4807      	ldr	r0, [pc, #28]	; (8009090 <switch_change_time+0x2b8>)
 8009074:	f009 fb84 	bl	8012780 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8009078:	2200      	movs	r2, #0
 800907a:	4906      	ldr	r1, [pc, #24]	; (8009094 <switch_change_time+0x2bc>)
 800907c:	4804      	ldr	r0, [pc, #16]	; (8009090 <switch_change_time+0x2b8>)
 800907e:	f009 fc81 	bl	8012984 <HAL_RTC_SetDate>
    }
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	2000178c 	.word	0x2000178c
 8009090:	20007828 	.word	0x20007828
 8009094:	200057bc 	.word	0x200057bc

08009098 <Set_Alarm_Mode>:

//
void Set_Alarm_Mode(RTC_typeOfAlarm_t typeOfAlarm)
    {
 8009098:	b4b0      	push	{r4, r5, r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
	// zrobic z napisow consty
	switch (typeOfAlarm)
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d839      	bhi.n	800911e <Set_Alarm_Mode+0x86>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <Set_Alarm_Mode+0x18>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	080090c5 	.word	0x080090c5
 80090b4:	080090d5 	.word	0x080090d5
 80090b8:	080090e5 	.word	0x080090e5
 80090bc:	080090f9 	.word	0x080090f9
 80090c0:	0800910b 	.word	0x0800910b
	    {
	    case ONLY_ONE_TIME_ALARM:
		strcpy(AlarmMode, "Jeden raz");
 80090c4:	4a19      	ldr	r2, [pc, #100]	; (800912c <Set_Alarm_Mode+0x94>)
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <Set_Alarm_Mode+0x98>)
 80090c8:	cb03      	ldmia	r3!, {r0, r1}
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	6051      	str	r1, [r2, #4]
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	8113      	strh	r3, [r2, #8]
		break;
 80090d2:	e025      	b.n	8009120 <Set_Alarm_Mode+0x88>
	    case ONLY_WEEKENDS_ALARM:
		strcpy(AlarmMode, "Weekendy");
 80090d4:	4a15      	ldr	r2, [pc, #84]	; (800912c <Set_Alarm_Mode+0x94>)
 80090d6:	4b17      	ldr	r3, [pc, #92]	; (8009134 <Set_Alarm_Mode+0x9c>)
 80090d8:	cb03      	ldmia	r3!, {r0, r1}
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	6051      	str	r1, [r2, #4]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	7213      	strb	r3, [r2, #8]
		break;
 80090e2:	e01d      	b.n	8009120 <Set_Alarm_Mode+0x88>
	    case EVERYDAY_ALARM:
		strcpy(AlarmMode, "Codziennie");
 80090e4:	4a11      	ldr	r2, [pc, #68]	; (800912c <Set_Alarm_Mode+0x94>)
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <Set_Alarm_Mode+0xa0>)
 80090e8:	cb03      	ldmia	r3!, {r0, r1}
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	6051      	str	r1, [r2, #4]
 80090ee:	8819      	ldrh	r1, [r3, #0]
 80090f0:	789b      	ldrb	r3, [r3, #2]
 80090f2:	8111      	strh	r1, [r2, #8]
 80090f4:	7293      	strb	r3, [r2, #10]
		break;
 80090f6:	e013      	b.n	8009120 <Set_Alarm_Mode+0x88>
	    case MON_to_FRI_ALARM:
		strcpy(AlarmMode, "Pon-Pt");
 80090f8:	4b0c      	ldr	r3, [pc, #48]	; (800912c <Set_Alarm_Mode+0x94>)
 80090fa:	4a10      	ldr	r2, [pc, #64]	; (800913c <Set_Alarm_Mode+0xa4>)
 80090fc:	6810      	ldr	r0, [r2, #0]
 80090fe:	6018      	str	r0, [r3, #0]
 8009100:	8891      	ldrh	r1, [r2, #4]
 8009102:	7992      	ldrb	r2, [r2, #6]
 8009104:	8099      	strh	r1, [r3, #4]
 8009106:	719a      	strb	r2, [r3, #6]
		break;
 8009108:	e00a      	b.n	8009120 <Set_Alarm_Mode+0x88>
	    case EXACT_DATE_ALRAM:
		strcpy(AlarmMode, "Konkretny Dzien");
 800910a:	4a08      	ldr	r2, [pc, #32]	; (800912c <Set_Alarm_Mode+0x94>)
 800910c:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <Set_Alarm_Mode+0xa8>)
 800910e:	4614      	mov	r4, r2
 8009110:	461d      	mov	r5, r3
 8009112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009114:	6020      	str	r0, [r4, #0]
 8009116:	6061      	str	r1, [r4, #4]
 8009118:	60a2      	str	r2, [r4, #8]
 800911a:	60e3      	str	r3, [r4, #12]
		break;
 800911c:	e000      	b.n	8009120 <Set_Alarm_Mode+0x88>
	    default:
		break;
 800911e:	bf00      	nop
	    }
    }
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bcb0      	pop	{r4, r5, r7}
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	2000055c 	.word	0x2000055c
 8009130:	08018058 	.word	0x08018058
 8009134:	08018064 	.word	0x08018064
 8009138:	08018070 	.word	0x08018070
 800913c:	0801807c 	.word	0x0801807c
 8009140:	08018084 	.word	0x08018084

08009144 <switch_change_alarm>:

//
void switch_change_alarm(AlarmDataChange_t AlarmDataChange, _Bool add_subb)
    {
 8009144:	b5b0      	push	{r4, r5, r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	460a      	mov	r2, r1
 800914e:	71fb      	strb	r3, [r7, #7]
 8009150:	4613      	mov	r3, r2
 8009152:	71bb      	strb	r3, [r7, #6]
	//dodać wyswietlanie ustawionego alarmu, może jednocześnie albo wybieralnie
	//w wyswietlaniu użyć HAL_RTC_GetAlarm
	switch (AlarmDataChange)
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	3b01      	subs	r3, #1
 8009158:	2b05      	cmp	r3, #5
 800915a:	f200 81af 	bhi.w	80094bc <switch_change_alarm+0x378>
 800915e:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <switch_change_alarm+0x20>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	0800917d 	.word	0x0800917d
 8009168:	080091bd 	.word	0x080091bd
 800916c:	080091fd 	.word	0x080091fd
 8009170:	0800930b 	.word	0x0800930b
 8009174:	08009383 	.word	0x08009383
 8009178:	080094a5 	.word	0x080094a5
	    {
	    case HOUR_ALARM:
		if(add_subb == true)Alarm.AlarmTime.Hours--;
 800917c:	79bb      	ldrb	r3, [r7, #6]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d006      	beq.n	8009190 <switch_change_alarm+0x4c>
 8009182:	4ba5      	ldr	r3, [pc, #660]	; (8009418 <switch_change_alarm+0x2d4>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	3b01      	subs	r3, #1
 8009188:	b2da      	uxtb	r2, r3
 800918a:	4ba3      	ldr	r3, [pc, #652]	; (8009418 <switch_change_alarm+0x2d4>)
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e005      	b.n	800919c <switch_change_alarm+0x58>
		else Alarm.AlarmTime.Hours++;
 8009190:	4ba1      	ldr	r3, [pc, #644]	; (8009418 <switch_change_alarm+0x2d4>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	b2da      	uxtb	r2, r3
 8009198:	4b9f      	ldr	r3, [pc, #636]	; (8009418 <switch_change_alarm+0x2d4>)
 800919a:	701a      	strb	r2, [r3, #0]

		if(Alarm.AlarmTime.Hours == UINT8_MAX) Alarm.AlarmTime.Hours = 23;
 800919c:	4b9e      	ldr	r3, [pc, #632]	; (8009418 <switch_change_alarm+0x2d4>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2bff      	cmp	r3, #255	; 0xff
 80091a2:	d102      	bne.n	80091aa <switch_change_alarm+0x66>
 80091a4:	4b9c      	ldr	r3, [pc, #624]	; (8009418 <switch_change_alarm+0x2d4>)
 80091a6:	2217      	movs	r2, #23
 80091a8:	701a      	strb	r2, [r3, #0]

		if (IS_RTC_HOUR24(Alarm.AlarmTime.Hours)!= true) Alarm.AlarmTime.Hours = 0x00;
 80091aa:	4b9b      	ldr	r3, [pc, #620]	; (8009418 <switch_change_alarm+0x2d4>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b17      	cmp	r3, #23
 80091b0:	f240 8186 	bls.w	80094c0 <switch_change_alarm+0x37c>
 80091b4:	4b98      	ldr	r3, [pc, #608]	; (8009418 <switch_change_alarm+0x2d4>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	701a      	strb	r2, [r3, #0]
		break;
 80091ba:	e181      	b.n	80094c0 <switch_change_alarm+0x37c>
	    case MINUTE_ALARM:
		if(add_subb == true)Alarm.AlarmTime.Minutes--;
 80091bc:	79bb      	ldrb	r3, [r7, #6]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <switch_change_alarm+0x8c>
 80091c2:	4b95      	ldr	r3, [pc, #596]	; (8009418 <switch_change_alarm+0x2d4>)
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4b93      	ldr	r3, [pc, #588]	; (8009418 <switch_change_alarm+0x2d4>)
 80091cc:	705a      	strb	r2, [r3, #1]
 80091ce:	e005      	b.n	80091dc <switch_change_alarm+0x98>
		else Alarm.AlarmTime.Minutes++;
 80091d0:	4b91      	ldr	r3, [pc, #580]	; (8009418 <switch_change_alarm+0x2d4>)
 80091d2:	785b      	ldrb	r3, [r3, #1]
 80091d4:	3301      	adds	r3, #1
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	4b8f      	ldr	r3, [pc, #572]	; (8009418 <switch_change_alarm+0x2d4>)
 80091da:	705a      	strb	r2, [r3, #1]
		if(Alarm.AlarmTime.Minutes == UINT8_MAX) Alarm.AlarmTime.Minutes = 59;
 80091dc:	4b8e      	ldr	r3, [pc, #568]	; (8009418 <switch_change_alarm+0x2d4>)
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2bff      	cmp	r3, #255	; 0xff
 80091e2:	d102      	bne.n	80091ea <switch_change_alarm+0xa6>
 80091e4:	4b8c      	ldr	r3, [pc, #560]	; (8009418 <switch_change_alarm+0x2d4>)
 80091e6:	223b      	movs	r2, #59	; 0x3b
 80091e8:	705a      	strb	r2, [r3, #1]
		if (IS_RTC_MINUTES(Alarm.AlarmTime.Minutes)!= true) Alarm.AlarmTime.Minutes = 0x00;
 80091ea:	4b8b      	ldr	r3, [pc, #556]	; (8009418 <switch_change_alarm+0x2d4>)
 80091ec:	785b      	ldrb	r3, [r3, #1]
 80091ee:	2b3b      	cmp	r3, #59	; 0x3b
 80091f0:	f240 8168 	bls.w	80094c4 <switch_change_alarm+0x380>
 80091f4:	4b88      	ldr	r3, [pc, #544]	; (8009418 <switch_change_alarm+0x2d4>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	705a      	strb	r2, [r3, #1]
		break;
 80091fa:	e163      	b.n	80094c4 <switch_change_alarm+0x380>
	    case DAYWEEK_ALARM:
		if (Alarm.AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_WEEKDAY)
 80091fc:	4b86      	ldr	r3, [pc, #536]	; (8009418 <switch_change_alarm+0x2d4>)
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009204:	d14a      	bne.n	800929c <switch_change_alarm+0x158>
		    {
			//dodać zeby wyświetlało także dany dzień tygodnia w tym przypadku
			if(add_subb == true)Alarm.AlarmDateWeekDay--;
 8009206:	79bb      	ldrb	r3, [r7, #6]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d008      	beq.n	800921e <switch_change_alarm+0xda>
 800920c:	4b82      	ldr	r3, [pc, #520]	; (8009418 <switch_change_alarm+0x2d4>)
 800920e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009212:	3b01      	subs	r3, #1
 8009214:	b2da      	uxtb	r2, r3
 8009216:	4b80      	ldr	r3, [pc, #512]	; (8009418 <switch_change_alarm+0x2d4>)
 8009218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800921c:	e007      	b.n	800922e <switch_change_alarm+0xea>
			else Alarm.AlarmDateWeekDay++;
 800921e:	4b7e      	ldr	r3, [pc, #504]	; (8009418 <switch_change_alarm+0x2d4>)
 8009220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009224:	3301      	adds	r3, #1
 8009226:	b2da      	uxtb	r2, r3
 8009228:	4b7b      	ldr	r3, [pc, #492]	; (8009418 <switch_change_alarm+0x2d4>)
 800922a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if(Alarm.AlarmDateWeekDay == UINT8_MAX) Alarm.AlarmDateWeekDay = 7;
 800922e:	4b7a      	ldr	r3, [pc, #488]	; (8009418 <switch_change_alarm+0x2d4>)
 8009230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009234:	2bff      	cmp	r3, #255	; 0xff
 8009236:	d103      	bne.n	8009240 <switch_change_alarm+0xfc>
 8009238:	4b77      	ldr	r3, [pc, #476]	; (8009418 <switch_change_alarm+0x2d4>)
 800923a:	2207      	movs	r2, #7
 800923c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (IS_RTC_WEEKDAY(Alarm.AlarmDateWeekDay)!= true) Alarm.AlarmDateWeekDay = 0x00;
 8009240:	4b75      	ldr	r3, [pc, #468]	; (8009418 <switch_change_alarm+0x2d4>)
 8009242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009246:	2b01      	cmp	r3, #1
 8009248:	d01d      	beq.n	8009286 <switch_change_alarm+0x142>
 800924a:	4b73      	ldr	r3, [pc, #460]	; (8009418 <switch_change_alarm+0x2d4>)
 800924c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009250:	2b02      	cmp	r3, #2
 8009252:	d018      	beq.n	8009286 <switch_change_alarm+0x142>
 8009254:	4b70      	ldr	r3, [pc, #448]	; (8009418 <switch_change_alarm+0x2d4>)
 8009256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800925a:	2b03      	cmp	r3, #3
 800925c:	d013      	beq.n	8009286 <switch_change_alarm+0x142>
 800925e:	4b6e      	ldr	r3, [pc, #440]	; (8009418 <switch_change_alarm+0x2d4>)
 8009260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009264:	2b04      	cmp	r3, #4
 8009266:	d00e      	beq.n	8009286 <switch_change_alarm+0x142>
 8009268:	4b6b      	ldr	r3, [pc, #428]	; (8009418 <switch_change_alarm+0x2d4>)
 800926a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800926e:	2b05      	cmp	r3, #5
 8009270:	d009      	beq.n	8009286 <switch_change_alarm+0x142>
 8009272:	4b69      	ldr	r3, [pc, #420]	; (8009418 <switch_change_alarm+0x2d4>)
 8009274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009278:	2b06      	cmp	r3, #6
 800927a:	d004      	beq.n	8009286 <switch_change_alarm+0x142>
 800927c:	4b66      	ldr	r3, [pc, #408]	; (8009418 <switch_change_alarm+0x2d4>)
 800927e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009282:	2b07      	cmp	r3, #7
 8009284:	d101      	bne.n	800928a <switch_change_alarm+0x146>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <switch_change_alarm+0x148>
 800928a:	2300      	movs	r3, #0
 800928c:	2b01      	cmp	r3, #1
 800928e:	f000 811b 	beq.w	80094c8 <switch_change_alarm+0x384>
 8009292:	4b61      	ldr	r3, [pc, #388]	; (8009418 <switch_change_alarm+0x2d4>)
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (add_subb == true)Alarm.AlarmDateWeekDay--;
			else Alarm.AlarmDateWeekDay++;
			if (Alarm.AlarmDateWeekDay == UINT8_MAX)Alarm.AlarmDateWeekDay = 31;
			if (IS_RTC_DATE(Alarm.AlarmDateWeekDay) != true)Alarm.AlarmDateWeekDay = 0x00;
		    }
		break;
 800929a:	e115      	b.n	80094c8 <switch_change_alarm+0x384>
		else if(Alarm.AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE )
 800929c:	4b5e      	ldr	r3, [pc, #376]	; (8009418 <switch_change_alarm+0x2d4>)
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f040 8111 	bne.w	80094c8 <switch_change_alarm+0x384>
			if (add_subb == true)Alarm.AlarmDateWeekDay--;
 80092a6:	79bb      	ldrb	r3, [r7, #6]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d008      	beq.n	80092be <switch_change_alarm+0x17a>
 80092ac:	4b5a      	ldr	r3, [pc, #360]	; (8009418 <switch_change_alarm+0x2d4>)
 80092ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	4b58      	ldr	r3, [pc, #352]	; (8009418 <switch_change_alarm+0x2d4>)
 80092b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80092bc:	e007      	b.n	80092ce <switch_change_alarm+0x18a>
			else Alarm.AlarmDateWeekDay++;
 80092be:	4b56      	ldr	r3, [pc, #344]	; (8009418 <switch_change_alarm+0x2d4>)
 80092c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092c4:	3301      	adds	r3, #1
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	4b53      	ldr	r3, [pc, #332]	; (8009418 <switch_change_alarm+0x2d4>)
 80092ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (Alarm.AlarmDateWeekDay == UINT8_MAX)Alarm.AlarmDateWeekDay = 31;
 80092ce:	4b52      	ldr	r3, [pc, #328]	; (8009418 <switch_change_alarm+0x2d4>)
 80092d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092d4:	2bff      	cmp	r3, #255	; 0xff
 80092d6:	d103      	bne.n	80092e0 <switch_change_alarm+0x19c>
 80092d8:	4b4f      	ldr	r3, [pc, #316]	; (8009418 <switch_change_alarm+0x2d4>)
 80092da:	221f      	movs	r2, #31
 80092dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (IS_RTC_DATE(Alarm.AlarmDateWeekDay) != true)Alarm.AlarmDateWeekDay = 0x00;
 80092e0:	4b4d      	ldr	r3, [pc, #308]	; (8009418 <switch_change_alarm+0x2d4>)
 80092e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d006      	beq.n	80092f8 <switch_change_alarm+0x1b4>
 80092ea:	4b4b      	ldr	r3, [pc, #300]	; (8009418 <switch_change_alarm+0x2d4>)
 80092ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f0:	2b1f      	cmp	r3, #31
 80092f2:	d801      	bhi.n	80092f8 <switch_change_alarm+0x1b4>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e000      	b.n	80092fa <switch_change_alarm+0x1b6>
 80092f8:	2300      	movs	r3, #0
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	f000 80e4 	beq.w	80094c8 <switch_change_alarm+0x384>
 8009300:	4b45      	ldr	r3, [pc, #276]	; (8009418 <switch_change_alarm+0x2d4>)
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 8009308:	e0de      	b.n	80094c8 <switch_change_alarm+0x384>
	    case MODE_ALARM:
		if(add_subb == true)RTC_typeOfAlarm++;
 800930a:	79bb      	ldrb	r3, [r7, #6]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d006      	beq.n	800931e <switch_change_alarm+0x1da>
 8009310:	4b42      	ldr	r3, [pc, #264]	; (800941c <switch_change_alarm+0x2d8>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	4b40      	ldr	r3, [pc, #256]	; (800941c <switch_change_alarm+0x2d8>)
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e005      	b.n	800932a <switch_change_alarm+0x1e6>
		else RTC_typeOfAlarm--;
 800931e:	4b3f      	ldr	r3, [pc, #252]	; (800941c <switch_change_alarm+0x2d8>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	3b01      	subs	r3, #1
 8009324:	b2da      	uxtb	r2, r3
 8009326:	4b3d      	ldr	r3, [pc, #244]	; (800941c <switch_change_alarm+0x2d8>)
 8009328:	701a      	strb	r2, [r3, #0]
		if (RTC_typeOfAlarm == UINT8_MAX)RTC_typeOfAlarm = 1; //przepełnienie
 800932a:	4b3c      	ldr	r3, [pc, #240]	; (800941c <switch_change_alarm+0x2d8>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2bff      	cmp	r3, #255	; 0xff
 8009330:	d103      	bne.n	800933a <switch_change_alarm+0x1f6>
 8009332:	4b3a      	ldr	r3, [pc, #232]	; (800941c <switch_change_alarm+0x2d8>)
 8009334:	2201      	movs	r2, #1
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	e006      	b.n	8009348 <switch_change_alarm+0x204>
		else if(RTC_typeOfAlarm == 6)RTC_typeOfAlarm = 1;
 800933a:	4b38      	ldr	r3, [pc, #224]	; (800941c <switch_change_alarm+0x2d8>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b06      	cmp	r3, #6
 8009340:	d102      	bne.n	8009348 <switch_change_alarm+0x204>
 8009342:	4b36      	ldr	r3, [pc, #216]	; (800941c <switch_change_alarm+0x2d8>)
 8009344:	2201      	movs	r2, #1
 8009346:	701a      	strb	r2, [r3, #0]
		if((RTC_typeOfAlarm == ONLY_WEEKENDS_ALARM) || (RTC_typeOfAlarm == MON_to_FRI_ALARM))
 8009348:	4b34      	ldr	r3, [pc, #208]	; (800941c <switch_change_alarm+0x2d8>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d003      	beq.n	8009358 <switch_change_alarm+0x214>
 8009350:	4b32      	ldr	r3, [pc, #200]	; (800941c <switch_change_alarm+0x2d8>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b04      	cmp	r3, #4
 8009356:	d104      	bne.n	8009362 <switch_change_alarm+0x21e>
		    Alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8009358:	4b2f      	ldr	r3, [pc, #188]	; (8009418 <switch_change_alarm+0x2d4>)
 800935a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800935e:	625a      	str	r2, [r3, #36]	; 0x24
 8009360:	e002      	b.n	8009368 <switch_change_alarm+0x224>
		else Alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009362:	4b2d      	ldr	r3, [pc, #180]	; (8009418 <switch_change_alarm+0x2d4>)
 8009364:	2200      	movs	r2, #0
 8009366:	625a      	str	r2, [r3, #36]	; 0x24
		if(RTC_typeOfAlarm == EXACT_DATE_ALRAM)Alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009368:	4b2c      	ldr	r3, [pc, #176]	; (800941c <switch_change_alarm+0x2d8>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b05      	cmp	r3, #5
 800936e:	d103      	bne.n	8009378 <switch_change_alarm+0x234>
 8009370:	4b29      	ldr	r3, [pc, #164]	; (8009418 <switch_change_alarm+0x2d4>)
 8009372:	2200      	movs	r2, #0
 8009374:	615a      	str	r2, [r3, #20]
		else Alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
		break;
 8009376:	e0aa      	b.n	80094ce <switch_change_alarm+0x38a>
		else Alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8009378:	4b27      	ldr	r3, [pc, #156]	; (8009418 <switch_change_alarm+0x2d4>)
 800937a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800937e:	615a      	str	r2, [r3, #20]
		break;
 8009380:	e0a5      	b.n	80094ce <switch_change_alarm+0x38a>
	    case SET_ALARM:
		if(add_subb == false)      // button down  alarm_set_A_or_B - true - alarm A, false - alarm B
 8009382:	79bb      	ldrb	r3, [r7, #6]
 8009384:	f083 0301 	eor.w	r3, r3, #1
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <switch_change_alarm+0x262>
		    {
			if(alarm_set_A_or_B == true)alarm_set_A_or_B = false; //dać enum false pierwszy i dać alarm_a
 800938e:	4b24      	ldr	r3, [pc, #144]	; (8009420 <switch_change_alarm+0x2dc>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <switch_change_alarm+0x25a>
 8009396:	4b22      	ldr	r3, [pc, #136]	; (8009420 <switch_change_alarm+0x2dc>)
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
					HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);
					IS_ALARM_SET_B = false;
				    }
			    }
		    }
		break;
 800939c:	e096      	b.n	80094cc <switch_change_alarm+0x388>
			else alarm_set_A_or_B = true;
 800939e:	4b20      	ldr	r3, [pc, #128]	; (8009420 <switch_change_alarm+0x2dc>)
 80093a0:	2201      	movs	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]
		break;
 80093a4:	e092      	b.n	80094cc <switch_change_alarm+0x388>
		else if (add_subb == true) //button up
 80093a6:	79bb      	ldrb	r3, [r7, #6]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 808f 	beq.w	80094cc <switch_change_alarm+0x388>
			if (alarm_set_A_or_B == true)
 80093ae:	4b1c      	ldr	r3, [pc, #112]	; (8009420 <switch_change_alarm+0x2dc>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d03e      	beq.n	8009434 <switch_change_alarm+0x2f0>
				if (IS_ALARM_SET_A == false) //if alarm is set FLAG then deactive by pressing this button
 80093b6:	4b1b      	ldr	r3, [pc, #108]	; (8009424 <switch_change_alarm+0x2e0>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	f083 0301 	eor.w	r3, r3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d01c      	beq.n	80093fe <switch_change_alarm+0x2ba>
					Alarm_A = Alarm;
 80093c4:	4a18      	ldr	r2, [pc, #96]	; (8009428 <switch_change_alarm+0x2e4>)
 80093c6:	4b14      	ldr	r3, [pc, #80]	; (8009418 <switch_change_alarm+0x2d4>)
 80093c8:	4614      	mov	r4, r2
 80093ca:	461d      	mov	r5, r3
 80093cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80093d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Alarm_A.Alarm = RTC_ALARM_A;
 80093dc:	4b12      	ldr	r3, [pc, #72]	; (8009428 <switch_change_alarm+0x2e4>)
 80093de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093e2:	62da      	str	r2, [r3, #44]	; 0x2c
					RTC_typeOfAlarm_A = RTC_typeOfAlarm;
 80093e4:	4b0d      	ldr	r3, [pc, #52]	; (800941c <switch_change_alarm+0x2d8>)
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	4b10      	ldr	r3, [pc, #64]	; (800942c <switch_change_alarm+0x2e8>)
 80093ea:	701a      	strb	r2, [r3, #0]
					HAL_RTC_SetAlarm_IT(&hrtc, &Alarm_A, RTC_FORMAT_BIN);
 80093ec:	2200      	movs	r2, #0
 80093ee:	490e      	ldr	r1, [pc, #56]	; (8009428 <switch_change_alarm+0x2e4>)
 80093f0:	480f      	ldr	r0, [pc, #60]	; (8009430 <switch_change_alarm+0x2ec>)
 80093f2:	f009 fb9d 	bl	8012b30 <HAL_RTC_SetAlarm_IT>
					IS_ALARM_SET_A = true;
 80093f6:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <switch_change_alarm+0x2e0>)
 80093f8:	2201      	movs	r2, #1
 80093fa:	701a      	strb	r2, [r3, #0]
		break;
 80093fc:	e066      	b.n	80094cc <switch_change_alarm+0x388>
				else if (IS_ALARM_SET_A == true)
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <switch_change_alarm+0x2e0>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d062      	beq.n	80094cc <switch_change_alarm+0x388>
					HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8009406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800940a:	4809      	ldr	r0, [pc, #36]	; (8009430 <switch_change_alarm+0x2ec>)
 800940c:	f009 fc88 	bl	8012d20 <HAL_RTC_DeactivateAlarm>
					IS_ALARM_SET_A = false;
 8009410:	4b04      	ldr	r3, [pc, #16]	; (8009424 <switch_change_alarm+0x2e0>)
 8009412:	2200      	movs	r2, #0
 8009414:	701a      	strb	r2, [r3, #0]
		break;
 8009416:	e059      	b.n	80094cc <switch_change_alarm+0x388>
 8009418:	2000074c 	.word	0x2000074c
 800941c:	2000050c 	.word	0x2000050c
 8009420:	200000ac 	.word	0x200000ac
 8009424:	200002ae 	.word	0x200002ae
 8009428:	20000718 	.word	0x20000718
 800942c:	20000508 	.word	0x20000508
 8009430:	20007828 	.word	0x20007828
			else if (alarm_set_A_or_B == false)
 8009434:	4b28      	ldr	r3, [pc, #160]	; (80094d8 <switch_change_alarm+0x394>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f083 0301 	eor.w	r3, r3, #1
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d044      	beq.n	80094cc <switch_change_alarm+0x388>
				if (IS_ALARM_SET_B == false) //if alarm is set FLAG then deactive by pressing this button
 8009442:	4b26      	ldr	r3, [pc, #152]	; (80094dc <switch_change_alarm+0x398>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	f083 0301 	eor.w	r3, r3, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01c      	beq.n	800948a <switch_change_alarm+0x346>
					Alarm_B = Alarm;
 8009450:	4a23      	ldr	r2, [pc, #140]	; (80094e0 <switch_change_alarm+0x39c>)
 8009452:	4b24      	ldr	r3, [pc, #144]	; (80094e4 <switch_change_alarm+0x3a0>)
 8009454:	4614      	mov	r4, r2
 8009456:	461d      	mov	r5, r3
 8009458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800945a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800945c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800945e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009460:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Alarm_B.Alarm = RTC_ALARM_B;
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <switch_change_alarm+0x39c>)
 800946a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c
					RTC_typeOfAlarm_B = RTC_typeOfAlarm;
 8009470:	4b1d      	ldr	r3, [pc, #116]	; (80094e8 <switch_change_alarm+0x3a4>)
 8009472:	781a      	ldrb	r2, [r3, #0]
 8009474:	4b1d      	ldr	r3, [pc, #116]	; (80094ec <switch_change_alarm+0x3a8>)
 8009476:	701a      	strb	r2, [r3, #0]
					HAL_RTC_SetAlarm_IT(&hrtc, &Alarm_B, RTC_FORMAT_BIN);
 8009478:	2200      	movs	r2, #0
 800947a:	4919      	ldr	r1, [pc, #100]	; (80094e0 <switch_change_alarm+0x39c>)
 800947c:	481c      	ldr	r0, [pc, #112]	; (80094f0 <switch_change_alarm+0x3ac>)
 800947e:	f009 fb57 	bl	8012b30 <HAL_RTC_SetAlarm_IT>
					IS_ALARM_SET_B = true;
 8009482:	4b16      	ldr	r3, [pc, #88]	; (80094dc <switch_change_alarm+0x398>)
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
		break;
 8009488:	e020      	b.n	80094cc <switch_change_alarm+0x388>
				else if (IS_ALARM_SET_B == true)
 800948a:	4b14      	ldr	r3, [pc, #80]	; (80094dc <switch_change_alarm+0x398>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d01c      	beq.n	80094cc <switch_change_alarm+0x388>
					HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);
 8009492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009496:	4816      	ldr	r0, [pc, #88]	; (80094f0 <switch_change_alarm+0x3ac>)
 8009498:	f009 fc42 	bl	8012d20 <HAL_RTC_DeactivateAlarm>
					IS_ALARM_SET_B = false;
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <switch_change_alarm+0x398>)
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
		break;
 80094a2:	e013      	b.n	80094cc <switch_change_alarm+0x388>
	    case PREVIEW_ALARM:
		//zmienianie flagi ekarnu
		if(PreviewAlarm == true)PreviewAlarm = false;
 80094a4:	4b13      	ldr	r3, [pc, #76]	; (80094f4 <switch_change_alarm+0x3b0>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <switch_change_alarm+0x370>
 80094ac:	4b11      	ldr	r3, [pc, #68]	; (80094f4 <switch_change_alarm+0x3b0>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
		else PreviewAlarm = true;
		break;
 80094b2:	e00c      	b.n	80094ce <switch_change_alarm+0x38a>
		else PreviewAlarm = true;
 80094b4:	4b0f      	ldr	r3, [pc, #60]	; (80094f4 <switch_change_alarm+0x3b0>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	701a      	strb	r2, [r3, #0]
		break;
 80094ba:	e008      	b.n	80094ce <switch_change_alarm+0x38a>
	    default:
		break;
 80094bc:	bf00      	nop
 80094be:	e006      	b.n	80094ce <switch_change_alarm+0x38a>
		break;
 80094c0:	bf00      	nop
 80094c2:	e004      	b.n	80094ce <switch_change_alarm+0x38a>
		break;
 80094c4:	bf00      	nop
 80094c6:	e002      	b.n	80094ce <switch_change_alarm+0x38a>
		break;
 80094c8:	bf00      	nop
 80094ca:	e000      	b.n	80094ce <switch_change_alarm+0x38a>
		break;
 80094cc:	bf00      	nop
	    }
    }
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bdb0      	pop	{r4, r5, r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200000ac 	.word	0x200000ac
 80094dc:	200004f6 	.word	0x200004f6
 80094e0:	200077c8 	.word	0x200077c8
 80094e4:	2000074c 	.word	0x2000074c
 80094e8:	2000050c 	.word	0x2000050c
 80094ec:	2000050b 	.word	0x2000050b
 80094f0:	20007828 	.word	0x20007828
 80094f4:	200000ad 	.word	0x200000ad

080094f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08a      	sub	sp, #40	; 0x28
 80094fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80094fe:	f107 031c 	add.w	r3, r7, #28
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	605a      	str	r2, [r3, #4]
 8009508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	605a      	str	r2, [r3, #4]
 8009512:	609a      	str	r2, [r3, #8]
 8009514:	60da      	str	r2, [r3, #12]
 8009516:	611a      	str	r2, [r3, #16]
 8009518:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800951a:	4b2f      	ldr	r3, [pc, #188]	; (80095d8 <MX_ADC1_Init+0xe0>)
 800951c:	4a2f      	ldr	r2, [pc, #188]	; (80095dc <MX_ADC1_Init+0xe4>)
 800951e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009520:	4b2d      	ldr	r3, [pc, #180]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009522:	2200      	movs	r2, #0
 8009524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009526:	4b2c      	ldr	r3, [pc, #176]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009528:	2200      	movs	r2, #0
 800952a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800952c:	4b2a      	ldr	r3, [pc, #168]	; (80095d8 <MX_ADC1_Init+0xe0>)
 800952e:	2200      	movs	r2, #0
 8009530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009532:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009534:	2200      	movs	r2, #0
 8009536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009538:	4b27      	ldr	r3, [pc, #156]	; (80095d8 <MX_ADC1_Init+0xe0>)
 800953a:	2204      	movs	r2, #4
 800953c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800953e:	4b26      	ldr	r3, [pc, #152]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009540:	2200      	movs	r2, #0
 8009542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009544:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009546:	2200      	movs	r2, #0
 8009548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800954a:	4b23      	ldr	r3, [pc, #140]	; (80095d8 <MX_ADC1_Init+0xe0>)
 800954c:	2201      	movs	r2, #1
 800954e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009550:	4b21      	ldr	r3, [pc, #132]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009552:	2200      	movs	r2, #0
 8009554:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009558:	4b1f      	ldr	r3, [pc, #124]	; (80095d8 <MX_ADC1_Init+0xe0>)
 800955a:	2200      	movs	r2, #0
 800955c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800955e:	4b1e      	ldr	r3, [pc, #120]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009560:	2200      	movs	r2, #0
 8009562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009564:	4b1c      	ldr	r3, [pc, #112]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800956c:	4b1a      	ldr	r3, [pc, #104]	; (80095d8 <MX_ADC1_Init+0xe0>)
 800956e:	2200      	movs	r2, #0
 8009570:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8009572:	4b19      	ldr	r3, [pc, #100]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800957a:	4817      	ldr	r0, [pc, #92]	; (80095d8 <MX_ADC1_Init+0xe0>)
 800957c:	f003 fdf8 	bl	800d170 <HAL_ADC_Init>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8009586:	f000 fecb 	bl	800a320 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800958a:	2300      	movs	r3, #0
 800958c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800958e:	f107 031c 	add.w	r3, r7, #28
 8009592:	4619      	mov	r1, r3
 8009594:	4810      	ldr	r0, [pc, #64]	; (80095d8 <MX_ADC1_Init+0xe0>)
 8009596:	f005 f8f1 	bl	800e77c <HAL_ADCEx_MultiModeConfigChannel>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80095a0:	f000 febe 	bl	800a320 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80095a4:	4b0e      	ldr	r3, [pc, #56]	; (80095e0 <MX_ADC1_Init+0xe8>)
 80095a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80095a8:	2306      	movs	r3, #6
 80095aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80095ac:	2300      	movs	r3, #0
 80095ae:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80095b0:	237f      	movs	r3, #127	; 0x7f
 80095b2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80095b4:	2304      	movs	r3, #4
 80095b6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80095bc:	1d3b      	adds	r3, r7, #4
 80095be:	4619      	mov	r1, r3
 80095c0:	4805      	ldr	r0, [pc, #20]	; (80095d8 <MX_ADC1_Init+0xe0>)
 80095c2:	f004 fa75 	bl	800dab0 <HAL_ADC_ConfigChannel>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80095cc:	f000 fea8 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80095d0:	bf00      	nop
 80095d2:	3728      	adds	r7, #40	; 0x28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	200005e0 	.word	0x200005e0
 80095dc:	50040000 	.word	0x50040000
 80095e0:	cb840000 	.word	0xcb840000

080095e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80095ea:	463b      	mov	r3, r7
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	605a      	str	r2, [r3, #4]
 80095f2:	609a      	str	r2, [r3, #8]
 80095f4:	60da      	str	r2, [r3, #12]
 80095f6:	611a      	str	r2, [r3, #16]
 80095f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80095fa:	4b3f      	ldr	r3, [pc, #252]	; (80096f8 <MX_ADC2_Init+0x114>)
 80095fc:	4a3f      	ldr	r2, [pc, #252]	; (80096fc <MX_ADC2_Init+0x118>)
 80095fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009600:	4b3d      	ldr	r3, [pc, #244]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009602:	2200      	movs	r2, #0
 8009604:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8009606:	4b3c      	ldr	r3, [pc, #240]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009608:	2200      	movs	r2, #0
 800960a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800960c:	4b3a      	ldr	r3, [pc, #232]	; (80096f8 <MX_ADC2_Init+0x114>)
 800960e:	2200      	movs	r2, #0
 8009610:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8009612:	4b39      	ldr	r3, [pc, #228]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009614:	2201      	movs	r2, #1
 8009616:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009618:	4b37      	ldr	r3, [pc, #220]	; (80096f8 <MX_ADC2_Init+0x114>)
 800961a:	2204      	movs	r2, #4
 800961c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800961e:	4b36      	ldr	r3, [pc, #216]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009620:	2200      	movs	r2, #0
 8009622:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8009624:	4b34      	ldr	r3, [pc, #208]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009626:	2200      	movs	r2, #0
 8009628:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 4;
 800962a:	4b33      	ldr	r3, [pc, #204]	; (80096f8 <MX_ADC2_Init+0x114>)
 800962c:	2204      	movs	r2, #4
 800962e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009630:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8009638:	4b2f      	ldr	r3, [pc, #188]	; (80096f8 <MX_ADC2_Init+0x114>)
 800963a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800963e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8009640:	4b2d      	ldr	r3, [pc, #180]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8009648:	4b2b      	ldr	r3, [pc, #172]	; (80096f8 <MX_ADC2_Init+0x114>)
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009650:	4b29      	ldr	r3, [pc, #164]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009652:	2200      	movs	r2, #0
 8009654:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8009656:	4b28      	ldr	r3, [pc, #160]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800965e:	4826      	ldr	r0, [pc, #152]	; (80096f8 <MX_ADC2_Init+0x114>)
 8009660:	f003 fd86 	bl	800d170 <HAL_ADC_Init>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800966a:	f000 fe59 	bl	800a320 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800966e:	4b24      	ldr	r3, [pc, #144]	; (8009700 <MX_ADC2_Init+0x11c>)
 8009670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009672:	2306      	movs	r3, #6
 8009674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8009676:	2302      	movs	r3, #2
 8009678:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800967a:	237f      	movs	r3, #127	; 0x7f
 800967c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800967e:	2304      	movs	r3, #4
 8009680:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009686:	463b      	mov	r3, r7
 8009688:	4619      	mov	r1, r3
 800968a:	481b      	ldr	r0, [pc, #108]	; (80096f8 <MX_ADC2_Init+0x114>)
 800968c:	f004 fa10 	bl	800dab0 <HAL_ADC_ConfigChannel>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8009696:	f000 fe43 	bl	800a320 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800969a:	4b1a      	ldr	r3, [pc, #104]	; (8009704 <MX_ADC2_Init+0x120>)
 800969c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800969e:	230c      	movs	r3, #12
 80096a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80096a2:	463b      	mov	r3, r7
 80096a4:	4619      	mov	r1, r3
 80096a6:	4814      	ldr	r0, [pc, #80]	; (80096f8 <MX_ADC2_Init+0x114>)
 80096a8:	f004 fa02 	bl	800dab0 <HAL_ADC_ConfigChannel>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 80096b2:	f000 fe35 	bl	800a320 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80096b6:	4b14      	ldr	r3, [pc, #80]	; (8009708 <MX_ADC2_Init+0x124>)
 80096b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80096ba:	2312      	movs	r3, #18
 80096bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80096be:	463b      	mov	r3, r7
 80096c0:	4619      	mov	r1, r3
 80096c2:	480d      	ldr	r0, [pc, #52]	; (80096f8 <MX_ADC2_Init+0x114>)
 80096c4:	f004 f9f4 	bl	800dab0 <HAL_ADC_ConfigChannel>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80096ce:	f000 fe27 	bl	800a320 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80096d2:	4b0e      	ldr	r3, [pc, #56]	; (800970c <MX_ADC2_Init+0x128>)
 80096d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80096d6:	2318      	movs	r3, #24
 80096d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80096da:	463b      	mov	r3, r7
 80096dc:	4619      	mov	r1, r3
 80096de:	4806      	ldr	r0, [pc, #24]	; (80096f8 <MX_ADC2_Init+0x114>)
 80096e0:	f004 f9e6 	bl	800dab0 <HAL_ADC_ConfigChannel>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80096ea:	f000 fe19 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80096ee:	bf00      	nop
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000578 	.word	0x20000578
 80096fc:	50040100 	.word	0x50040100
 8009700:	1d500080 	.word	0x1d500080
 8009704:	21800100 	.word	0x21800100
 8009708:	32601000 	.word	0x32601000
 800970c:	36902000 	.word	0x36902000

08009710 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08c      	sub	sp, #48	; 0x30
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009718:	f107 031c 	add.w	r3, r7, #28
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	605a      	str	r2, [r3, #4]
 8009722:	609a      	str	r2, [r3, #8]
 8009724:	60da      	str	r2, [r3, #12]
 8009726:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a49      	ldr	r2, [pc, #292]	; (8009854 <HAL_ADC_MspInit+0x144>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d116      	bne.n	8009760 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8009732:	4b49      	ldr	r3, [pc, #292]	; (8009858 <HAL_ADC_MspInit+0x148>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3301      	adds	r3, #1
 8009738:	4a47      	ldr	r2, [pc, #284]	; (8009858 <HAL_ADC_MspInit+0x148>)
 800973a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800973c:	4b46      	ldr	r3, [pc, #280]	; (8009858 <HAL_ADC_MspInit+0x148>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b01      	cmp	r3, #1
 8009742:	f040 8083 	bne.w	800984c <HAL_ADC_MspInit+0x13c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8009746:	4b45      	ldr	r3, [pc, #276]	; (800985c <HAL_ADC_MspInit+0x14c>)
 8009748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974a:	4a44      	ldr	r2, [pc, #272]	; (800985c <HAL_ADC_MspInit+0x14c>)
 800974c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009752:	4b42      	ldr	r3, [pc, #264]	; (800985c <HAL_ADC_MspInit+0x14c>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800975a:	61bb      	str	r3, [r7, #24]
 800975c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800975e:	e075      	b.n	800984c <HAL_ADC_MspInit+0x13c>
  else if(adcHandle->Instance==ADC2)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a3e      	ldr	r2, [pc, #248]	; (8009860 <HAL_ADC_MspInit+0x150>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d170      	bne.n	800984c <HAL_ADC_MspInit+0x13c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800976a:	4b3b      	ldr	r3, [pc, #236]	; (8009858 <HAL_ADC_MspInit+0x148>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	4a39      	ldr	r2, [pc, #228]	; (8009858 <HAL_ADC_MspInit+0x148>)
 8009772:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8009774:	4b38      	ldr	r3, [pc, #224]	; (8009858 <HAL_ADC_MspInit+0x148>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d10b      	bne.n	8009794 <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC_CLK_ENABLE();
 800977c:	4b37      	ldr	r3, [pc, #220]	; (800985c <HAL_ADC_MspInit+0x14c>)
 800977e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009780:	4a36      	ldr	r2, [pc, #216]	; (800985c <HAL_ADC_MspInit+0x14c>)
 8009782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009788:	4b34      	ldr	r3, [pc, #208]	; (800985c <HAL_ADC_MspInit+0x14c>)
 800978a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009794:	4b31      	ldr	r3, [pc, #196]	; (800985c <HAL_ADC_MspInit+0x14c>)
 8009796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009798:	4a30      	ldr	r2, [pc, #192]	; (800985c <HAL_ADC_MspInit+0x14c>)
 800979a:	f043 0301 	orr.w	r3, r3, #1
 800979e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097a0:	4b2e      	ldr	r3, [pc, #184]	; (800985c <HAL_ADC_MspInit+0x14c>)
 80097a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097ac:	4b2b      	ldr	r3, [pc, #172]	; (800985c <HAL_ADC_MspInit+0x14c>)
 80097ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b0:	4a2a      	ldr	r2, [pc, #168]	; (800985c <HAL_ADC_MspInit+0x14c>)
 80097b2:	f043 0304 	orr.w	r3, r3, #4
 80097b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097b8:	4b28      	ldr	r3, [pc, #160]	; (800985c <HAL_ADC_MspInit+0x14c>)
 80097ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 80097c4:	238c      	movs	r3, #140	; 0x8c
 80097c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80097c8:	230b      	movs	r3, #11
 80097ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d0:	f107 031c 	add.w	r3, r7, #28
 80097d4:	4619      	mov	r1, r3
 80097d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097da:	f005 fe83 	bl	800f4e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80097de:	2310      	movs	r3, #16
 80097e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80097e2:	230b      	movs	r3, #11
 80097e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097ea:	f107 031c 	add.w	r3, r7, #28
 80097ee:	4619      	mov	r1, r3
 80097f0:	481c      	ldr	r0, [pc, #112]	; (8009864 <HAL_ADC_MspInit+0x154>)
 80097f2:	f005 fe77 	bl	800f4e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 80097f6:	4b1c      	ldr	r3, [pc, #112]	; (8009868 <HAL_ADC_MspInit+0x158>)
 80097f8:	4a1c      	ldr	r2, [pc, #112]	; (800986c <HAL_ADC_MspInit+0x15c>)
 80097fa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <HAL_ADC_MspInit+0x158>)
 80097fe:	2206      	movs	r2, #6
 8009800:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009802:	4b19      	ldr	r3, [pc, #100]	; (8009868 <HAL_ADC_MspInit+0x158>)
 8009804:	2200      	movs	r2, #0
 8009806:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009808:	4b17      	ldr	r3, [pc, #92]	; (8009868 <HAL_ADC_MspInit+0x158>)
 800980a:	2200      	movs	r2, #0
 800980c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800980e:	4b16      	ldr	r3, [pc, #88]	; (8009868 <HAL_ADC_MspInit+0x158>)
 8009810:	2280      	movs	r2, #128	; 0x80
 8009812:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009814:	4b14      	ldr	r3, [pc, #80]	; (8009868 <HAL_ADC_MspInit+0x158>)
 8009816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800981a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800981c:	4b12      	ldr	r3, [pc, #72]	; (8009868 <HAL_ADC_MspInit+0x158>)
 800981e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009822:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8009824:	4b10      	ldr	r3, [pc, #64]	; (8009868 <HAL_ADC_MspInit+0x158>)
 8009826:	2220      	movs	r2, #32
 8009828:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <HAL_ADC_MspInit+0x158>)
 800982c:	2200      	movs	r2, #0
 800982e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8009830:	480d      	ldr	r0, [pc, #52]	; (8009868 <HAL_ADC_MspInit+0x158>)
 8009832:	f005 fb29 	bl	800ee88 <HAL_DMA_Init>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 800983c:	f000 fd70 	bl	800a320 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a09      	ldr	r2, [pc, #36]	; (8009868 <HAL_ADC_MspInit+0x158>)
 8009844:	651a      	str	r2, [r3, #80]	; 0x50
 8009846:	4a08      	ldr	r2, [pc, #32]	; (8009868 <HAL_ADC_MspInit+0x158>)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800984c:	bf00      	nop
 800984e:	3730      	adds	r7, #48	; 0x30
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	50040000 	.word	0x50040000
 8009858:	200001f4 	.word	0x200001f4
 800985c:	40021000 	.word	0x40021000
 8009860:	50040100 	.word	0x50040100
 8009864:	48000800 	.word	0x48000800
 8009868:	20000648 	.word	0x20000648
 800986c:	40020030 	.word	0x40020030

08009870 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08a      	sub	sp, #40	; 0x28
 8009874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8009876:	463b      	mov	r3, r7
 8009878:	2228      	movs	r2, #40	; 0x28
 800987a:	2100      	movs	r1, #0
 800987c:	4618      	mov	r0, r3
 800987e:	f00c f9d1 	bl	8015c24 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8009882:	4b17      	ldr	r3, [pc, #92]	; (80098e0 <MX_DAC1_Init+0x70>)
 8009884:	4a17      	ldr	r2, [pc, #92]	; (80098e4 <MX_DAC1_Init+0x74>)
 8009886:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8009888:	4815      	ldr	r0, [pc, #84]	; (80098e0 <MX_DAC1_Init+0x70>)
 800988a:	f005 f92c 	bl	800eae6 <HAL_DAC_Init>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8009894:	f000 fd44 	bl	800a320 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8009898:	2300      	movs	r3, #0
 800989a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800989c:	2300      	movs	r3, #0
 800989e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80098a8:	2300      	movs	r3, #0
 80098aa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80098ac:	463b      	mov	r3, r7
 80098ae:	2200      	movs	r2, #0
 80098b0:	4619      	mov	r1, r3
 80098b2:	480b      	ldr	r0, [pc, #44]	; (80098e0 <MX_DAC1_Init+0x70>)
 80098b4:	f005 f99e 	bl	800ebf4 <HAL_DAC_ConfigChannel>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80098be:	f000 fd2f 	bl	800a320 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80098c2:	463b      	mov	r3, r7
 80098c4:	2210      	movs	r2, #16
 80098c6:	4619      	mov	r1, r3
 80098c8:	4805      	ldr	r0, [pc, #20]	; (80098e0 <MX_DAC1_Init+0x70>)
 80098ca:	f005 f993 	bl	800ebf4 <HAL_DAC_ConfigChannel>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80098d4:	f000 fd24 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80098d8:	bf00      	nop
 80098da:	3728      	adds	r7, #40	; 0x28
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200006a8 	.word	0x200006a8
 80098e4:	40007400 	.word	0x40007400

080098e8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08a      	sub	sp, #40	; 0x28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098f0:	f107 0314 	add.w	r3, r7, #20
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	605a      	str	r2, [r3, #4]
 80098fa:	609a      	str	r2, [r3, #8]
 80098fc:	60da      	str	r2, [r3, #12]
 80098fe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a15      	ldr	r2, [pc, #84]	; (800995c <HAL_DAC_MspInit+0x74>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d124      	bne.n	8009954 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800990a:	4b15      	ldr	r3, [pc, #84]	; (8009960 <HAL_DAC_MspInit+0x78>)
 800990c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990e:	4a14      	ldr	r2, [pc, #80]	; (8009960 <HAL_DAC_MspInit+0x78>)
 8009910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009914:	6593      	str	r3, [r2, #88]	; 0x58
 8009916:	4b12      	ldr	r3, [pc, #72]	; (8009960 <HAL_DAC_MspInit+0x78>)
 8009918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800991e:	613b      	str	r3, [r7, #16]
 8009920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009922:	4b0f      	ldr	r3, [pc, #60]	; (8009960 <HAL_DAC_MspInit+0x78>)
 8009924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009926:	4a0e      	ldr	r2, [pc, #56]	; (8009960 <HAL_DAC_MspInit+0x78>)
 8009928:	f043 0301 	orr.w	r3, r3, #1
 800992c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800992e:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <HAL_DAC_MspInit+0x78>)
 8009930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800993a:	2330      	movs	r3, #48	; 0x30
 800993c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800993e:	2303      	movs	r3, #3
 8009940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009942:	2300      	movs	r3, #0
 8009944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009946:	f107 0314 	add.w	r3, r7, #20
 800994a:	4619      	mov	r1, r3
 800994c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009950:	f005 fdc8 	bl	800f4e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8009954:	bf00      	nop
 8009956:	3728      	adds	r7, #40	; 0x28
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	40007400 	.word	0x40007400
 8009960:	40021000 	.word	0x40021000

08009964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800996a:	4b0f      	ldr	r3, [pc, #60]	; (80099a8 <MX_DMA_Init+0x44>)
 800996c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800996e:	4a0e      	ldr	r2, [pc, #56]	; (80099a8 <MX_DMA_Init+0x44>)
 8009970:	f043 0304 	orr.w	r3, r3, #4
 8009974:	6493      	str	r3, [r2, #72]	; 0x48
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <MX_DMA_Init+0x44>)
 8009978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800997a:	f003 0304 	and.w	r3, r3, #4
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <MX_DMA_Init+0x44>)
 8009984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009986:	4a08      	ldr	r2, [pc, #32]	; (80099a8 <MX_DMA_Init+0x44>)
 8009988:	f043 0301 	orr.w	r3, r3, #1
 800998c:	6493      	str	r3, [r2, #72]	; 0x48
 800998e:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <MX_DMA_Init+0x44>)
 8009990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	683b      	ldr	r3, [r7, #0]

}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	40021000 	.word	0x40021000

080099ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099b2:	f107 0314 	add.w	r3, r7, #20
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	605a      	str	r2, [r3, #4]
 80099bc:	609a      	str	r2, [r3, #8]
 80099be:	60da      	str	r2, [r3, #12]
 80099c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80099c2:	4b50      	ldr	r3, [pc, #320]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c6:	4a4f      	ldr	r2, [pc, #316]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099c8:	f043 0304 	orr.w	r3, r3, #4
 80099cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099ce:	4b4d      	ldr	r3, [pc, #308]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	613b      	str	r3, [r7, #16]
 80099d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80099da:	4b4a      	ldr	r3, [pc, #296]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099de:	4a49      	ldr	r2, [pc, #292]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099e6:	4b47      	ldr	r3, [pc, #284]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80099f2:	4b44      	ldr	r3, [pc, #272]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f6:	4a43      	ldr	r2, [pc, #268]	; (8009b04 <MX_GPIO_Init+0x158>)
 80099f8:	f043 0301 	orr.w	r3, r3, #1
 80099fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099fe:	4b41      	ldr	r3, [pc, #260]	; (8009b04 <MX_GPIO_Init+0x158>)
 8009a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	60bb      	str	r3, [r7, #8]
 8009a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a0a:	4b3e      	ldr	r3, [pc, #248]	; (8009b04 <MX_GPIO_Init+0x158>)
 8009a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a0e:	4a3d      	ldr	r2, [pc, #244]	; (8009b04 <MX_GPIO_Init+0x158>)
 8009a10:	f043 0302 	orr.w	r3, r3, #2
 8009a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a16:	4b3b      	ldr	r3, [pc, #236]	; (8009b04 <MX_GPIO_Init+0x158>)
 8009a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	607b      	str	r3, [r7, #4]
 8009a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI5_RESET_Pin|SPI5_DC_Pin|SPI5_CS_Pin, GPIO_PIN_RESET);
 8009a22:	2200      	movs	r2, #0
 8009a24:	f24c 0104 	movw	r1, #49156	; 0xc004
 8009a28:	4837      	ldr	r0, [pc, #220]	; (8009b08 <MX_GPIO_Init+0x15c>)
 8009a2a:	f005 ff05 	bl	800f838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2108      	movs	r1, #8
 8009a32:	4836      	ldr	r0, [pc, #216]	; (8009b0c <MX_GPIO_Init+0x160>)
 8009a34:	f005 ff00 	bl	800f838 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI5_RESET_Pin|SPI5_DC_Pin|SPI5_CS_Pin;
 8009a38:	f24c 0304 	movw	r3, #49156	; 0xc004
 8009a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a46:	2300      	movs	r3, #0
 8009a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009a4a:	f107 0314 	add.w	r3, r7, #20
 8009a4e:	4619      	mov	r1, r3
 8009a50:	482d      	ldr	r0, [pc, #180]	; (8009b08 <MX_GPIO_Init+0x15c>)
 8009a52:	f005 fd47 	bl	800f4e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_1_Pin;
 8009a56:	2320      	movs	r3, #32
 8009a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009a5a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8009a64:	f107 0314 	add.w	r3, r7, #20
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4827      	ldr	r0, [pc, #156]	; (8009b08 <MX_GPIO_Init+0x15c>)
 8009a6c:	f005 fd3a 	bl	800f4e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_2_Pin|USER_BUTTON_3_Pin|USER_BUTTON_4_Pin;
 8009a70:	2307      	movs	r3, #7
 8009a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009a74:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a7e:	f107 0314 	add.w	r3, r7, #20
 8009a82:	4619      	mov	r1, r3
 8009a84:	4822      	ldr	r0, [pc, #136]	; (8009b10 <MX_GPIO_Init+0x164>)
 8009a86:	f005 fd2d 	bl	800f4e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_BUTTON_Pin;
 8009a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009a90:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8009a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009a96:	2301      	movs	r3, #1
 8009a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8009a9a:	f107 0314 	add.w	r3, r7, #20
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	481b      	ldr	r0, [pc, #108]	; (8009b10 <MX_GPIO_Init+0x164>)
 8009aa2:	f005 fd1f 	bl	800f4e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_VOLUME_FRONT_Pin|ENCODER_BUTTON_VOLUME_BACK_Pin;
 8009aa6:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8009aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009aac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ab6:	f107 0314 	add.w	r3, r7, #20
 8009aba:	4619      	mov	r1, r3
 8009abc:	4814      	ldr	r0, [pc, #80]	; (8009b10 <MX_GPIO_Init+0x164>)
 8009abe:	f005 fd11 	bl	800f4e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_LOUDNESS_Pin;
 8009ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_BUTTON_LOUDNESS_GPIO_Port, &GPIO_InitStruct);
 8009ad2:	f107 0314 	add.w	r3, r7, #20
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	480b      	ldr	r0, [pc, #44]	; (8009b08 <MX_GPIO_Init+0x15c>)
 8009ada:	f005 fd03 	bl	800f4e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8009ade:	2308      	movs	r3, #8
 8009ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009aea:	2300      	movs	r3, #0
 8009aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8009aee:	f107 0314 	add.w	r3, r7, #20
 8009af2:	4619      	mov	r1, r3
 8009af4:	4805      	ldr	r0, [pc, #20]	; (8009b0c <MX_GPIO_Init+0x160>)
 8009af6:	f005 fcf5 	bl	800f4e4 <HAL_GPIO_Init>

}
 8009afa:	bf00      	nop
 8009afc:	3728      	adds	r7, #40	; 0x28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	40021000 	.word	0x40021000
 8009b08:	48000800 	.word	0x48000800
 8009b0c:	48001c00 	.word	0x48001c00
 8009b10:	48000400 	.word	0x48000400

08009b14 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009b18:	4b1b      	ldr	r3, [pc, #108]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b1a:	4a1c      	ldr	r2, [pc, #112]	; (8009b8c <MX_I2C2_Init+0x78>)
 8009b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8009b1e:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b20:	4a1b      	ldr	r2, [pc, #108]	; (8009b90 <MX_I2C2_Init+0x7c>)
 8009b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009b24:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009b2a:	4b17      	ldr	r3, [pc, #92]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009b30:	4b15      	ldr	r3, [pc, #84]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009b36:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009b3c:	4b12      	ldr	r3, [pc, #72]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009b42:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009b48:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009b4e:	480e      	ldr	r0, [pc, #56]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b50:	f005 fea2 	bl	800f898 <HAL_I2C_Init>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009b5a:	f000 fbe1 	bl	800a320 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009b5e:	2100      	movs	r1, #0
 8009b60:	4809      	ldr	r0, [pc, #36]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b62:	f006 fe61 	bl	8010828 <HAL_I2CEx_ConfigAnalogFilter>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009b6c:	f000 fbd8 	bl	800a320 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009b70:	2100      	movs	r1, #0
 8009b72:	4805      	ldr	r0, [pc, #20]	; (8009b88 <MX_I2C2_Init+0x74>)
 8009b74:	f006 fea3 	bl	80108be <HAL_I2CEx_ConfigDigitalFilter>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009b7e:	f000 fbcf 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009b82:	bf00      	nop
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200006bc 	.word	0x200006bc
 8009b8c:	40005800 	.word	0x40005800
 8009b90:	307075b1 	.word	0x307075b1

08009b94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b0b0      	sub	sp, #192	; 0xc0
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	605a      	str	r2, [r3, #4]
 8009ba6:	609a      	str	r2, [r3, #8]
 8009ba8:	60da      	str	r2, [r3, #12]
 8009baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009bac:	f107 0314 	add.w	r3, r7, #20
 8009bb0:	2298      	movs	r2, #152	; 0x98
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f00c f835 	bl	8015c24 <memset>
  if(i2cHandle->Instance==I2C2)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a21      	ldr	r2, [pc, #132]	; (8009c44 <HAL_I2C_MspInit+0xb0>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d13b      	bne.n	8009c3c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009bc4:	2380      	movs	r3, #128	; 0x80
 8009bc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009bcc:	f107 0314 	add.w	r3, r7, #20
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f007 fe93 	bl	80118fc <HAL_RCCEx_PeriphCLKConfig>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009bdc:	f000 fba0 	bl	800a320 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009be0:	4b19      	ldr	r3, [pc, #100]	; (8009c48 <HAL_I2C_MspInit+0xb4>)
 8009be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be4:	4a18      	ldr	r2, [pc, #96]	; (8009c48 <HAL_I2C_MspInit+0xb4>)
 8009be6:	f043 0302 	orr.w	r3, r3, #2
 8009bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bec:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <HAL_I2C_MspInit+0xb4>)
 8009bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	613b      	str	r3, [r7, #16]
 8009bf6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009bf8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009c00:	2312      	movs	r3, #18
 8009c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009c12:	2304      	movs	r3, #4
 8009c14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	480b      	ldr	r0, [pc, #44]	; (8009c4c <HAL_I2C_MspInit+0xb8>)
 8009c20:	f005 fc60 	bl	800f4e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009c24:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <HAL_I2C_MspInit+0xb4>)
 8009c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c28:	4a07      	ldr	r2, [pc, #28]	; (8009c48 <HAL_I2C_MspInit+0xb4>)
 8009c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8009c30:	4b05      	ldr	r3, [pc, #20]	; (8009c48 <HAL_I2C_MspInit+0xb4>)
 8009c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	37c0      	adds	r7, #192	; 0xc0
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	40005800 	.word	0x40005800
 8009c48:	40021000 	.word	0x40021000
 8009c4c:	48000400 	.word	0x48000400

08009c50 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009c54:	f3bf 8f4f 	dsb	sy
}
 8009c58:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009c5a:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <__NVIC_SystemReset+0x24>)
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009c62:	4904      	ldr	r1, [pc, #16]	; (8009c74 <__NVIC_SystemReset+0x24>)
 8009c64:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <__NVIC_SystemReset+0x28>)
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c6a:	f3bf 8f4f 	dsb	sy
}
 8009c6e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009c70:	bf00      	nop
 8009c72:	e7fd      	b.n	8009c70 <__NVIC_SystemReset+0x20>
 8009c74:	e000ed00 	.word	0xe000ed00
 8009c78:	05fa0004 	.word	0x05fa0004

08009c7c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009c80:	f002 ff85 	bl	800cb8e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8009c84:	f000 f862 	bl	8009d4c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8009c88:	f000 f8b3 	bl	8009df2 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009c8c:	f7ff fe8e 	bl	80099ac <MX_GPIO_Init>
	MX_DMA_Init();
 8009c90:	f7ff fe68 	bl	8009964 <MX_DMA_Init>
	MX_ADC2_Init();
 8009c94:	f7ff fca6 	bl	80095e4 <MX_ADC2_Init>
	MX_ADC1_Init();
 8009c98:	f7ff fc2e 	bl	80094f8 <MX_ADC1_Init>
	MX_DAC1_Init();
 8009c9c:	f7ff fde8 	bl	8009870 <MX_DAC1_Init>
	MX_I2C2_Init();
 8009ca0:	f7ff ff38 	bl	8009b14 <MX_I2C2_Init>
	MX_RTC_Init();
 8009ca4:	f000 fb94 	bl	800a3d0 <MX_RTC_Init>
	MX_SPI3_Init();
 8009ca8:	f000 fc70 	bl	800a58c <MX_SPI3_Init>
	MX_TIM1_Init();
 8009cac:	f000 fe90 	bl	800a9d0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8009cb0:	f000 fee8 	bl	800aa84 <MX_TIM2_Init>
	MX_TIM3_Init();
 8009cb4:	f000 ff3a 	bl	800ab2c <MX_TIM3_Init>
	MX_TIM5_Init();
 8009cb8:	f000 ffe4 	bl	800ac84 <MX_TIM5_Init>
	MX_TIM6_Init();
 8009cbc:	f001 f838 	bl	800ad30 <MX_TIM6_Init>
	MX_TIM8_Init();
 8009cc0:	f001 f86c 	bl	800ad9c <MX_TIM8_Init>
	MX_TIM15_Init();
 8009cc4:	f001 f8c4 	bl	800ae50 <MX_TIM15_Init>
	MX_TIM16_Init();
 8009cc8:	f001 f956 	bl	800af78 <MX_TIM16_Init>
	MX_TIM17_Init();
 8009ccc:	f001 f9cc 	bl	800b068 <MX_TIM17_Init>
	MX_RNG_Init();
 8009cd0:	f000 fb2e 	bl	800a330 <MX_RNG_Init>
	MX_TIM4_Init();
 8009cd4:	f000 ff80 	bl	800abd8 <MX_TIM4_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8009cd8:	f000 f8ba 	bl	8009e50 <MX_NVIC_Init>
	//dodać generowanie sinusoidy z wybieraną HZ
	//zasygnalizować wyłączenie urządzenia
	//przy starcie systemu glośność stopniowo zwiększać
	//możliwość włączania i wyłączania maksymalnie z częstotliwością 0,5s
	//przełączanie przekaźnika z back do słuchawek
	HAL_TIM_OC_Start_IT(&htim15 , TIM_CHANNEL_1);
 8009cdc:	2100      	movs	r1, #0
 8009cde:	4815      	ldr	r0, [pc, #84]	; (8009d34 <main+0xb8>)
 8009ce0:	f009 ff56 	bl	8013b90 <HAL_TIM_OC_Start_IT>
	display_init_on_start(DisplayOLEDBuffer);
 8009ce4:	4814      	ldr	r0, [pc, #80]	; (8009d38 <main+0xbc>)
 8009ce6:	f7f8 ff33 	bl	8002b50 <display_init_on_start>
	set_init_values();
 8009cea:	f000 f9dd 	bl	800a0a8 <set_init_values>
	encoders_init();
 8009cee:	f7fd f839 	bl	8006d64 <encoders_init>
	TDA7719_init();
 8009cf2:	f7fd fea1 	bl	8007a38 <TDA7719_init>
	RDA5807_Init();
 8009cf6:	f7fd fa9f 	bl	8007238 <RDA5807_Init>
	RDA5807_PowerOff();
 8009cfa:	f7fd fadf 	bl	80072bc <RDA5807_PowerOff>
	read_user_settings_on_init();
 8009cfe:	f7fd f811 	bl	8006d24 <read_user_settings_on_init>

	HAL_GPIO_WritePin(LD1_GPIO_Port , LD1_Pin , SET);
 8009d02:	2201      	movs	r2, #1
 8009d04:	2108      	movs	r1, #8
 8009d06:	480d      	ldr	r0, [pc, #52]	; (8009d3c <main+0xc0>)
 8009d08:	f005 fd96 	bl	800f838 <HAL_GPIO_WritePin>
	arm_rfft_fast_init_f32(&FFTHandler , FFT_SAMPLES);
 8009d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009d10:	480b      	ldr	r0, [pc, #44]	; (8009d40 <main+0xc4>)
 8009d12:	f7f8 fb51 	bl	80023b8 <arm_rfft_fast_init_f32>
	HAL_TIM_PWM_Start(&htim16 , TIM_CHANNEL_1);
 8009d16:	2100      	movs	r1, #0
 8009d18:	480a      	ldr	r0, [pc, #40]	; (8009d44 <main+0xc8>)
 8009d1a:	f00a f9d3 	bl	80140c4 <HAL_TIM_PWM_Start>
	while(1)
	{
	    /* USER CODE END WHILE */

	    /* USER CODE BEGIN 3 */
	    change_power_led_brigh();
 8009d1e:	f000 fa8d 	bl	800a23c <change_power_led_brigh>
	    check_FFT_flag();     //if fft flag == 0 then do fft, move to ssd1322_sreen_FFT
 8009d22:	f7f8 fde1 	bl	80028e8 <check_FFT_flag>
	    Refresh_display(SSD1322_Screen_State);
 8009d26:	4b08      	ldr	r3, [pc, #32]	; (8009d48 <main+0xcc>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7f9 fb48 	bl	80033c0 <Refresh_display>
	    change_power_led_brigh();
 8009d30:	e7f5      	b.n	8009d1e <main+0xa2>
 8009d32:	bf00      	nop
 8009d34:	200079b8 	.word	0x200079b8
 8009d38:	200037bc 	.word	0x200037bc
 8009d3c:	48001c00 	.word	0x48001c00
 8009d40:	200037a0 	.word	0x200037a0
 8009d44:	20007bcc 	.word	0x20007bcc
 8009d48:	200004f8 	.word	0x200004f8

08009d4c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b098      	sub	sp, #96	; 0x60
 8009d50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8009d52:	f107 0318 	add.w	r3, r7, #24
 8009d56:	2248      	movs	r2, #72	; 0x48
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f00b ff62 	bl	8015c24 <memset>
		    {
		    0
		    };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8009d60:	1d3b      	adds	r3, r7, #4
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	605a      	str	r2, [r3, #4]
 8009d68:	609a      	str	r2, [r3, #8]
 8009d6a:	60da      	str	r2, [r3, #12]
 8009d6c:	611a      	str	r2, [r3, #16]
		    0
		    };

	/** Configure the main internal regulator output voltage
	 */
	if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f006 fe12 	bl	8010998 <HAL_PWREx_ControlVoltageScaling>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <SystemClock_Config+0x32>
		!= HAL_OK)
	{
	    Error_Handler();
 8009d7a:	f000 fad1 	bl	800a320 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8009d7e:	2318      	movs	r3, #24
 8009d80:	61bb      	str	r3, [r7, #24]
		| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009d82:	2301      	movs	r3, #1
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009d86:	2301      	movs	r3, #1
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009d8e:	2360      	movs	r3, #96	; 0x60
 8009d90:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d92:	2302      	movs	r3, #2
 8009d94:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009d96:	2301      	movs	r3, #1
 8009d98:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 60;
 8009d9e:	233c      	movs	r3, #60	; 0x3c
 8009da0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009da2:	2302      	movs	r3, #2
 8009da4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009da6:	2302      	movs	r3, #2
 8009da8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009daa:	2302      	movs	r3, #2
 8009dac:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009dae:	f107 0318 	add.w	r3, r7, #24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f006 fe94 	bl	8010ae0 <HAL_RCC_OscConfig>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <SystemClock_Config+0x76>
	{
	    Error_Handler();
 8009dbe:	f000 faaf 	bl	800a320 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8009dc2:	230f      	movs	r3, #15
 8009dc4:	607b      	str	r3, [r7, #4]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct , FLASH_LATENCY_5) != HAL_OK)
 8009dd6:	1d3b      	adds	r3, r7, #4
 8009dd8:	2105      	movs	r1, #5
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f007 fb08 	bl	80113f0 <HAL_RCC_ClockConfig>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <SystemClock_Config+0x9e>
	{
	    Error_Handler();
 8009de6:	f000 fa9b 	bl	800a320 <Error_Handler>
	}
    }
 8009dea:	bf00      	nop
 8009dec:	3760      	adds	r7, #96	; 0x60
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
    {
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b0a6      	sub	sp, #152	; 0x98
 8009df6:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8009df8:	463b      	mov	r3, r7
 8009dfa:	2298      	movs	r2, #152	; 0x98
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f00b ff10 	bl	8015c24 <memset>
		    0
		    };

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG | RCC_PERIPHCLK_ADC;
 8009e04:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 8009e08:	603b      	str	r3, [r7, #0]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8009e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8009e12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009e16:	67fb      	str	r3, [r7, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8009e20:	2310      	movs	r3, #16
 8009e22:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8009e24:	2302      	movs	r3, #2
 8009e26:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK
 8009e30:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8009e34:	61fb      	str	r3, [r7, #28]
		| RCC_PLLSAI1_ADC1CLK;
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009e36:	463b      	mov	r3, r7
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f007 fd5f 	bl	80118fc <HAL_RCCEx_PeriphCLKConfig>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <PeriphCommonClock_Config+0x56>
	{
	    Error_Handler();
 8009e44:	f000 fa6c 	bl	800a320 <Error_Handler>
	}
    }
 8009e48:	bf00      	nop
 8009e4a:	3798      	adds	r7, #152	; 0x98
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
    {
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn , 5 , 0);
 8009e54:	2200      	movs	r2, #0
 8009e56:	2105      	movs	r1, #5
 8009e58:	2006      	movs	r0, #6
 8009e5a:	f004 fe0e 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009e5e:	2006      	movs	r0, #6
 8009e60:	f004 fe27 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* EXTI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI1_IRQn , 5 , 0);
 8009e64:	2200      	movs	r2, #0
 8009e66:	2105      	movs	r1, #5
 8009e68:	2007      	movs	r0, #7
 8009e6a:	f004 fe06 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8009e6e:	2007      	movs	r0, #7
 8009e70:	f004 fe1f 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* EXTI2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI2_IRQn , 5 , 0);
 8009e74:	2200      	movs	r2, #0
 8009e76:	2105      	movs	r1, #5
 8009e78:	2008      	movs	r0, #8
 8009e7a:	f004 fdfe 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8009e7e:	2008      	movs	r0, #8
 8009e80:	f004 fe17 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn , 1 , 0);
 8009e84:	2200      	movs	r2, #0
 8009e86:	2101      	movs	r1, #1
 8009e88:	200b      	movs	r0, #11
 8009e8a:	f004 fdf6 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009e8e:	200b      	movs	r0, #11
 8009e90:	f004 fe0f 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn , 1 , 0);
 8009e94:	2200      	movs	r2, #0
 8009e96:	2101      	movs	r1, #1
 8009e98:	200d      	movs	r0, #13
 8009e9a:	f004 fdee 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009e9e:	200d      	movs	r0, #13
 8009ea0:	f004 fe07 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* ADC1_2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC1_2_IRQn , 1 , 0);
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	2012      	movs	r0, #18
 8009eaa:	f004 fde6 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8009eae:	2012      	movs	r0, #18
 8009eb0:	f004 fdff 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* EXTI9_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI9_5_IRQn , 5 , 0);
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2105      	movs	r1, #5
 8009eb8:	2017      	movs	r0, #23
 8009eba:	f004 fdde 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009ebe:	2017      	movs	r0, #23
 8009ec0:	f004 fdf7 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM1_BRK_TIM15_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn , 3 , 0);
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2103      	movs	r1, #3
 8009ec8:	2018      	movs	r0, #24
 8009eca:	f004 fdd6 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8009ece:	2018      	movs	r0, #24
 8009ed0:	f004 fdef 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM1_UP_TIM16_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn , 3 , 0);
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2103      	movs	r1, #3
 8009ed8:	2019      	movs	r0, #25
 8009eda:	f004 fdce 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009ede:	2019      	movs	r0, #25
 8009ee0:	f004 fde7 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn , 3 , 0);
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2103      	movs	r1, #3
 8009ee8:	201a      	movs	r0, #26
 8009eea:	f004 fdc6 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8009eee:	201a      	movs	r0, #26
 8009ef0:	f004 fddf 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM1_CC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_CC_IRQn , 3 , 0);
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2103      	movs	r1, #3
 8009ef8:	201b      	movs	r0, #27
 8009efa:	f004 fdbe 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8009efe:	201b      	movs	r0, #27
 8009f00:	f004 fdd7 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn , 3 , 0);
 8009f04:	2200      	movs	r2, #0
 8009f06:	2103      	movs	r1, #3
 8009f08:	201c      	movs	r0, #28
 8009f0a:	f004 fdb6 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009f0e:	201c      	movs	r0, #28
 8009f10:	f004 fdcf 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn , 3 , 0);
 8009f14:	2200      	movs	r2, #0
 8009f16:	2103      	movs	r1, #3
 8009f18:	201d      	movs	r0, #29
 8009f1a:	f004 fdae 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009f1e:	201d      	movs	r0, #29
 8009f20:	f004 fdc7 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM4_IRQn , 3 , 0);
 8009f24:	2200      	movs	r2, #0
 8009f26:	2103      	movs	r1, #3
 8009f28:	201e      	movs	r0, #30
 8009f2a:	f004 fda6 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009f2e:	201e      	movs	r0, #30
 8009f30:	f004 fdbf 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn , 5 , 0);
 8009f34:	2200      	movs	r2, #0
 8009f36:	2105      	movs	r1, #5
 8009f38:	2028      	movs	r0, #40	; 0x28
 8009f3a:	f004 fd9e 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009f3e:	2028      	movs	r0, #40	; 0x28
 8009f40:	f004 fdb7 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* RTC_Alarm_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn , 5 , 0);
 8009f44:	2200      	movs	r2, #0
 8009f46:	2105      	movs	r1, #5
 8009f48:	2029      	movs	r0, #41	; 0x29
 8009f4a:	f004 fd96 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8009f4e:	2029      	movs	r0, #41	; 0x29
 8009f50:	f004 fdaf 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM8_CC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_CC_IRQn , 3 , 0);
 8009f54:	2200      	movs	r2, #0
 8009f56:	2103      	movs	r1, #3
 8009f58:	202e      	movs	r0, #46	; 0x2e
 8009f5a:	f004 fd8e 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8009f5e:	202e      	movs	r0, #46	; 0x2e
 8009f60:	f004 fda7 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM5_IRQn , 3 , 0);
 8009f64:	2200      	movs	r2, #0
 8009f66:	2103      	movs	r1, #3
 8009f68:	2032      	movs	r0, #50	; 0x32
 8009f6a:	f004 fd86 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8009f6e:	2032      	movs	r0, #50	; 0x32
 8009f70:	f004 fd9f 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* SPI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SPI3_IRQn , 1 , 0);
 8009f74:	2200      	movs	r2, #0
 8009f76:	2101      	movs	r1, #1
 8009f78:	2033      	movs	r0, #51	; 0x33
 8009f7a:	f004 fd7e 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8009f7e:	2033      	movs	r0, #51	; 0x33
 8009f80:	f004 fd97 	bl	800eab2 <HAL_NVIC_EnableIRQ>
	/* TIM6_DAC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn , 0 , 0);
 8009f84:	2200      	movs	r2, #0
 8009f86:	2100      	movs	r1, #0
 8009f88:	2036      	movs	r0, #54	; 0x36
 8009f8a:	f004 fd76 	bl	800ea7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009f8e:	2036      	movs	r0, #54	; 0x36
 8009f90:	f004 fd8f 	bl	800eab2 <HAL_NVIC_EnableIRQ>
    }
 8009f94:	bf00      	nop
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_TIM_OC_DelayElapsedCallback>:
 * - TIM15 - changing screen state if set, comming back to saved screen
 * - TIM16 - PWM timer for power LED
 * - TIM17 - Used for debouncing all buttons
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
	/* Interupt callback after timer counts 3 secs.
	 * Timer is started when any encoder is moved
	 * Refresh display timer or change display mode timer
	 */
	if(htim->Instance == TIM15)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a0f      	ldr	r2, [pc, #60]	; (8009fe4 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d111      	bne.n	8009fce <HAL_TIM_OC_DelayElapsedCallback+0x36>
	{

	    /* Check if interupt is from change display */
	    if(htim->ChannelState[0] == HAL_TIM_CHANNEL_STATE_BUSY)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d102      	bne.n	8009fbc <HAL_TIM_OC_DelayElapsedCallback+0x24>
	    {
		change_display_state(htim);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fb ff14 	bl	8005de4 <change_display_state>
	    }

	    /* Check if interupt is from return to last saved display state */
	    if(htim->ChannelState[1] == HAL_TIM_CHANNEL_STATE_BUSY)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d102      	bne.n	8009fce <HAL_TIM_OC_DelayElapsedCallback+0x36>
	    {
		set_saved_display(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7fb fe93 	bl	8005cf4 <set_saved_display>
	    }
	}

	/* Routine after getting a interupt from GPIO ports */
	if(htim->Instance == TIM17)     //timer 17 is used only for debouncing
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a05      	ldr	r2, [pc, #20]	; (8009fe8 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d101      	bne.n	8009fdc <HAL_TIM_OC_DelayElapsedCallback+0x44>
	{
	    any_buttons_pressed_routine();
 8009fd8:	f001 fd64 	bl	800baa4 <any_buttons_pressed_routine>
	}
    }
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	40014000 	.word	0x40014000
 8009fe8:	40014800 	.word	0x40014800

08009fec <HAL_TIM_IC_CaptureCallback>:

/* Time input capture callback
 * Is called whenever any encoder change it's position (expect for radio encoder)
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
    {
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	display_on_standby_mode();
 8009ff4:	f7f8 fdd6 	bl	8002ba4 <display_on_standby_mode>
	check_volumes_ranges();
 8009ff8:	f7fe fcf6 	bl	80089e8 <check_volumes_ranges>

	/* Volume front encoder */
	if(htim->Instance == TIM2)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a004:	d101      	bne.n	800a00a <HAL_TIM_IC_CaptureCallback+0x1e>
	{
	    volume_front_encoder_used();
 800a006:	f7fc fecf 	bl	8006da8 <volume_front_encoder_used>
	}
	/* Volume back encoder */
	if(htim->Instance == TIM8)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a12      	ldr	r2, [pc, #72]	; (800a058 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d101      	bne.n	800a018 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
	    volume_back_encoder_used();
 800a014:	f7fc ff60 	bl	8006ed8 <volume_back_encoder_used>
	}
	/* Loundness encoder */
	if(htim->Instance == TIM1)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a0f      	ldr	r2, [pc, #60]	; (800a05c <HAL_TIM_IC_CaptureCallback+0x70>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d101      	bne.n	800a026 <HAL_TIM_IC_CaptureCallback+0x3a>
	{
	    loudness_encoder_used();
 800a022:	f7fc ffbd 	bl	8006fa0 <loudness_encoder_used>
	}

	/* Bass encoder */
	if(htim->Instance == TIM4)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a0d      	ldr	r2, [pc, #52]	; (800a060 <HAL_TIM_IC_CaptureCallback+0x74>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d101      	bne.n	800a034 <HAL_TIM_IC_CaptureCallback+0x48>
	{
	    bass_encoder_used();
 800a030:	f7fd f802 	bl	8007038 <bass_encoder_used>
	}

	/* Middle encoder */
	if(htim->Instance == TIM3)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a0a      	ldr	r2, [pc, #40]	; (800a064 <HAL_TIM_IC_CaptureCallback+0x78>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d101      	bne.n	800a042 <HAL_TIM_IC_CaptureCallback+0x56>
	{
	    middle_encoder_used();
 800a03e:	f7fd f83d 	bl	80070bc <middle_encoder_used>
	}

	/* Treble encoder */
	if(htim->Instance == TIM5)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a08      	ldr	r2, [pc, #32]	; (800a068 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d101      	bne.n	800a050 <HAL_TIM_IC_CaptureCallback+0x64>
	{
	    treble_encoder_used();
 800a04c:	f7fd f874 	bl	8007138 <treble_encoder_used>
	/* Radio  encoder */
	//if(htim->Instance == TIM1)
	{
	    //radio_encoder_used();
	}
    }
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	40013400 	.word	0x40013400
 800a05c:	40012c00 	.word	0x40012c00
 800a060:	40000800 	.word	0x40000800
 800a064:	40000400 	.word	0x40000400
 800a068:	40000c00 	.word	0x40000c00

0800a06c <HAL_ADC_ConvCpltCallback>:

// Constains operations needed to calculate FFT and UVmeter - it's using ADC1 perph
// ADC2 is used for monitoring battery voltage while disconnected from main power source
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
    {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <HAL_ADC_ConvCpltCallback+0x34>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d10c      	bne.n	800a098 <HAL_ADC_ConvCpltCallback+0x2c>
	{
	    if(SSD1322_Screen_State == SSD1322_SCREEN_UVMETER)
 800a07e:	4b09      	ldr	r3, [pc, #36]	; (800a0a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b04      	cmp	r3, #4
 800a084:	d102      	bne.n	800a08c <HAL_ADC_ConvCpltCallback+0x20>
	    {
		calc_UVmeter_scale();
 800a086:	f7f6 fe51 	bl	8000d2c <calc_UVmeter_scale>
 800a08a:	e005      	b.n	800a098 <HAL_ADC_ConvCpltCallback+0x2c>
	    }
	    else if(SSD1322_Screen_State == SSD1322_SCREEN_FFT)
 800a08c:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b03      	cmp	r3, #3
 800a092:	d101      	bne.n	800a098 <HAL_ADC_ConvCpltCallback+0x2c>
	    {
		calc_FFT_scale();
 800a094:	f7f8 fa72 	bl	800257c <calc_FFT_scale>
	//adc1 is used for vbat monitoring after power is set off
	if(hadc->Instance == ADC1)
	{

	}
    }
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	50040100 	.word	0x50040100
 800a0a4:	200004f8 	.word	0x200004f8

0800a0a8 <set_init_values>:

// Set init values to specified variables
// temporary function used while prototyping
void set_init_values()
    {
 800a0a8:	b480      	push	{r7}
 800a0aa:	af00      	add	r7, sp, #0
	SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800a0ac:	4b30      	ldr	r3, [pc, #192]	; (800a170 <set_init_values+0xc8>)
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	701a      	strb	r2, [r3, #0]
	AlarmDataChange = 1;
 800a0b2:	4b30      	ldr	r3, [pc, #192]	; (800a174 <set_init_values+0xcc>)
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	701a      	strb	r2, [r3, #0]
	Clock_Data_Time = 1;
 800a0b8:	4b2f      	ldr	r3, [pc, #188]	; (800a178 <set_init_values+0xd0>)
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	701a      	strb	r2, [r3, #0]
	RTC_typeOfAlarm = 1;
 800a0be:	4b2f      	ldr	r3, [pc, #188]	; (800a17c <set_init_values+0xd4>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	701a      	strb	r2, [r3, #0]
	Alarm.AlarmDateWeekDay = 1;
 800a0c4:	4b2e      	ldr	r3, [pc, #184]	; (800a180 <set_init_values+0xd8>)
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	encoderVolFront.audioOutputState = MASTER;
 800a0cc:	4b2d      	ldr	r3, [pc, #180]	; (800a184 <set_init_values+0xdc>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	719a      	strb	r2, [r3, #6]
	encoderVolBack.audioOutputState = NORMAL;
 800a0d2:	4b2d      	ldr	r3, [pc, #180]	; (800a188 <set_init_values+0xe0>)
 800a0d4:	2203      	movs	r2, #3
 800a0d6:	719a      	strb	r2, [r3, #6]
	encoderVolFront.volumeMaster = 79;
 800a0d8:	4b2a      	ldr	r3, [pc, #168]	; (800a184 <set_init_values+0xdc>)
 800a0da:	224f      	movs	r2, #79	; 0x4f
 800a0dc:	701a      	strb	r2, [r3, #0]
	encoderVolFront.volumeLeftRight = 79;
 800a0de:	4b29      	ldr	r3, [pc, #164]	; (800a184 <set_init_values+0xdc>)
 800a0e0:	224f      	movs	r2, #79	; 0x4f
 800a0e2:	705a      	strb	r2, [r3, #1]
	encoderVolFront.volumeLeft = 79;
 800a0e4:	4b27      	ldr	r3, [pc, #156]	; (800a184 <set_init_values+0xdc>)
 800a0e6:	224f      	movs	r2, #79	; 0x4f
 800a0e8:	709a      	strb	r2, [r3, #2]
	encoderVolFront.volumeRight = 79;
 800a0ea:	4b26      	ldr	r3, [pc, #152]	; (800a184 <set_init_values+0xdc>)
 800a0ec:	224f      	movs	r2, #79	; 0x4f
 800a0ee:	70da      	strb	r2, [r3, #3]
	encoderVolBack.volumeLeftRight = 79;
 800a0f0:	4b25      	ldr	r3, [pc, #148]	; (800a188 <set_init_values+0xe0>)
 800a0f2:	224f      	movs	r2, #79	; 0x4f
 800a0f4:	705a      	strb	r2, [r3, #1]
	encoderVolBack.volumeLeft = 79;
 800a0f6:	4b24      	ldr	r3, [pc, #144]	; (800a188 <set_init_values+0xe0>)
 800a0f8:	224f      	movs	r2, #79	; 0x4f
 800a0fa:	709a      	strb	r2, [r3, #2]
	encoderVolBack.volumeRight = 79;
 800a0fc:	4b22      	ldr	r3, [pc, #136]	; (800a188 <set_init_values+0xe0>)
 800a0fe:	224f      	movs	r2, #79	; 0x4f
 800a100:	70da      	strb	r2, [r3, #3]
	encoderFilterLoudness.gain = 15;
 800a102:	4b22      	ldr	r3, [pc, #136]	; (800a18c <set_init_values+0xe4>)
 800a104:	220f      	movs	r2, #15
 800a106:	705a      	strb	r2, [r3, #1]
	encoderFilterLoudness.buttonControl = SET_GAIN;
 800a108:	4b20      	ldr	r3, [pc, #128]	; (800a18c <set_init_values+0xe4>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
	encoderFilterTreble.gain = 10;
 800a10e:	4b20      	ldr	r3, [pc, #128]	; (800a190 <set_init_values+0xe8>)
 800a110:	220a      	movs	r2, #10
 800a112:	705a      	strb	r2, [r3, #1]
	encoderFilterTreble.buttonControl = SET_GAIN;
 800a114:	4b1e      	ldr	r3, [pc, #120]	; (800a190 <set_init_values+0xe8>)
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
	encoderFilterMiddle.gain = 10;
 800a11a:	4b1e      	ldr	r3, [pc, #120]	; (800a194 <set_init_values+0xec>)
 800a11c:	220a      	movs	r2, #10
 800a11e:	705a      	strb	r2, [r3, #1]
	encoderFilterMiddle.buttonControl = SET_GAIN;
 800a120:	4b1c      	ldr	r3, [pc, #112]	; (800a194 <set_init_values+0xec>)
 800a122:	2200      	movs	r2, #0
 800a124:	701a      	strb	r2, [r3, #0]
	TDA7719_config.set_input_front = JACK_1;
 800a126:	4b1c      	ldr	r3, [pc, #112]	; (800a198 <set_init_values+0xf0>)
 800a128:	2201      	movs	r2, #1
 800a12a:	701a      	strb	r2, [r3, #0]
	TDA7719_config.set_input_back = JACK_2;
 800a12c:	4b1a      	ldr	r3, [pc, #104]	; (800a198 <set_init_values+0xf0>)
 800a12e:	2202      	movs	r2, #2
 800a130:	705a      	strb	r2, [r3, #1]
	savedUserSettings.displayRefreshTime = 100;
 800a132:	4b1a      	ldr	r3, [pc, #104]	; (800a19c <set_init_values+0xf4>)
 800a134:	2264      	movs	r2, #100	; 0x64
 800a136:	811a      	strh	r2, [r3, #8]
	RADIO_IS_ON_front_flag = false;
 800a138:	4b19      	ldr	r3, [pc, #100]	; (800a1a0 <set_init_values+0xf8>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	701a      	strb	r2, [r3, #0]
	RADIO_IS_ON_back_flag = false;
 800a13e:	4b19      	ldr	r3, [pc, #100]	; (800a1a4 <set_init_values+0xfc>)
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
	SettingsUserMenu.AlarmSource_A = JACK_1;
 800a144:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <set_init_values+0x100>)
 800a146:	2201      	movs	r2, #1
 800a148:	709a      	strb	r2, [r3, #2]
	SettingsUserMenu.AlarmSource_B = RADIO;
 800a14a:	4b17      	ldr	r3, [pc, #92]	; (800a1a8 <set_init_values+0x100>)
 800a14c:	2205      	movs	r2, #5
 800a14e:	70da      	strb	r2, [r3, #3]
	SettingsUserMenu.RefreshScreenTime = 65535;
 800a150:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <set_init_values+0x100>)
 800a152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a156:	801a      	strh	r2, [r3, #0]
	SettingsUserMenu.Power_LED = 5;
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <set_init_values+0x100>)
 800a15a:	2205      	movs	r2, #5
 800a15c:	715a      	strb	r2, [r3, #5]
	SettingsUserMenu.Display_mode = 1;
 800a15e:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <set_init_values+0x100>)
 800a160:	2201      	movs	r2, #1
 800a162:	711a      	strb	r2, [r3, #4]
    }
 800a164:	bf00      	nop
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	200004f8 	.word	0x200004f8
 800a174:	200004f9 	.word	0x200004f9
 800a178:	2000050a 	.word	0x2000050a
 800a17c:	2000050c 	.word	0x2000050c
 800a180:	2000074c 	.word	0x2000074c
 800a184:	20000554 	.word	0x20000554
 800a188:	20000518 	.word	0x20000518
 800a18c:	2000053c 	.word	0x2000053c
 800a190:	2000052c 	.word	0x2000052c
 800a194:	20000510 	.word	0x20000510
 800a198:	20000544 	.word	0x20000544
 800a19c:	20000520 	.word	0x20000520
 800a1a0:	200077f8 	.word	0x200077f8
 800a1a4:	200037b9 	.word	0x200037b9
 800a1a8:	20007c18 	.word	0x20007c18
 800a1ac:	00000000 	.word	0x00000000

0800a1b0 <calc_pwm>:

// change linear scale to more eye-friendly
float calc_pwm(float val)
    {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	ed87 0a01 	vstr	s0, [r7, #4]
	const float k = 0.1f;
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <calc_pwm+0x80>)
 800a1bc:	60fb      	str	r3, [r7, #12]
	const float x0 = 60.0f;
 800a1be:	4b1d      	ldr	r3, [pc, #116]	; (800a234 <calc_pwm+0x84>)
 800a1c0:	60bb      	str	r3, [r7, #8]
	return 300.0f / (1.0f + exp(-k * (val - x0)));
 800a1c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1c6:	eeb1 7a67 	vneg.f32	s14, s15
 800a1ca:	edd7 6a01 	vldr	s13, [r7, #4]
 800a1ce:	edd7 7a02 	vldr	s15, [r7, #8]
 800a1d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1da:	ee17 0a90 	vmov	r0, s15
 800a1de:	f7f6 fa3b 	bl	8000658 <__aeabi_f2d>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	ec43 2b10 	vmov	d0, r2, r3
 800a1ea:	f00c fa35 	bl	8016658 <exp>
 800a1ee:	ec51 0b10 	vmov	r0, r1, d0
 800a1f2:	f04f 0200 	mov.w	r2, #0
 800a1f6:	4b10      	ldr	r3, [pc, #64]	; (800a238 <calc_pwm+0x88>)
 800a1f8:	f7f6 f8d0 	bl	800039c <__adddf3>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	a109      	add	r1, pc, #36	; (adr r1, 800a228 <calc_pwm+0x78>)
 800a202:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a206:	f7f6 fba9 	bl	800095c <__aeabi_ddiv>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4610      	mov	r0, r2
 800a210:	4619      	mov	r1, r3
 800a212:	f7f6 fd3b 	bl	8000c8c <__aeabi_d2f>
 800a216:	4603      	mov	r3, r0
 800a218:	ee07 3a90 	vmov	s15, r3
    }
 800a21c:	eeb0 0a67 	vmov.f32	s0, s15
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	00000000 	.word	0x00000000
 800a22c:	4072c000 	.word	0x4072c000
 800a230:	3dcccccd 	.word	0x3dcccccd
 800a234:	42700000 	.word	0x42700000
 800a238:	3ff00000 	.word	0x3ff00000

0800a23c <change_power_led_brigh>:

// change power led brightness according to settings
void change_power_led_brigh(void)
    {
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
	//static uint32_t timer_counter;
	static float r;

	//add timer from SysTick

	switch(SettingsUserMenu.Power_LED)
 800a240:	4b30      	ldr	r3, [pc, #192]	; (800a304 <change_power_led_brigh+0xc8>)
 800a242:	795b      	ldrb	r3, [r3, #5]
 800a244:	3b01      	subs	r3, #1
 800a246:	2b04      	cmp	r3, #4
 800a248:	d859      	bhi.n	800a2fe <change_power_led_brigh+0xc2>
 800a24a:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <change_power_led_brigh+0x14>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a2ff 	.word	0x0800a2ff
 800a254:	0800a2ff 	.word	0x0800a2ff
 800a258:	0800a265 	.word	0x0800a265
 800a25c:	0800a26f 	.word	0x0800a26f
 800a260:	0800a279 	.word	0x0800a279
		    //			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, calc_pwm(r));
		    //			led_counter++;
		}
	    break;
	    case Always_OFF:
		__HAL_TIM_SET_COMPARE(&htim16 , TIM_CHANNEL_1 , 0);
 800a264:	4b28      	ldr	r3, [pc, #160]	; (800a308 <change_power_led_brigh+0xcc>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2200      	movs	r2, #0
 800a26a:	635a      	str	r2, [r3, #52]	; 0x34
	    break;
 800a26c:	e048      	b.n	800a300 <change_power_led_brigh+0xc4>

	    case Always_ON:
		__HAL_TIM_SET_COMPARE(&htim16 , TIM_CHANNEL_1 , 255);
 800a26e:	4b26      	ldr	r3, [pc, #152]	; (800a308 <change_power_led_brigh+0xcc>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	22ff      	movs	r2, #255	; 0xff
 800a274:	635a      	str	r2, [r3, #52]	; 0x34
	    break;
 800a276:	e043      	b.n	800a300 <change_power_led_brigh+0xc4>

	    case Change_brigh:
		r = 50 * (1.0f + sin(led_counter / 100.0f));
 800a278:	4b24      	ldr	r3, [pc, #144]	; (800a30c <change_power_led_brigh+0xd0>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	ee07 3a90 	vmov	s15, r3
 800a280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a284:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a310 <change_power_led_brigh+0xd4>
 800a288:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a28c:	ee16 0a90 	vmov	r0, s13
 800a290:	f7f6 f9e2 	bl	8000658 <__aeabi_f2d>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	ec43 2b10 	vmov	d0, r2, r3
 800a29c:	f00c f988 	bl	80165b0 <sin>
 800a2a0:	ec51 0b10 	vmov	r0, r1, d0
 800a2a4:	f04f 0200 	mov.w	r2, #0
 800a2a8:	4b1a      	ldr	r3, [pc, #104]	; (800a314 <change_power_led_brigh+0xd8>)
 800a2aa:	f7f6 f877 	bl	800039c <__adddf3>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f04f 0200 	mov.w	r2, #0
 800a2ba:	4b17      	ldr	r3, [pc, #92]	; (800a318 <change_power_led_brigh+0xdc>)
 800a2bc:	f7f6 fa24 	bl	8000708 <__aeabi_dmul>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	f7f6 fce0 	bl	8000c8c <__aeabi_d2f>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4a13      	ldr	r2, [pc, #76]	; (800a31c <change_power_led_brigh+0xe0>)
 800a2d0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim16 , TIM_CHANNEL_1 , calc_pwm(r));
 800a2d2:	4b12      	ldr	r3, [pc, #72]	; (800a31c <change_power_led_brigh+0xe0>)
 800a2d4:	edd3 7a00 	vldr	s15, [r3]
 800a2d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2dc:	f7ff ff68 	bl	800a1b0 <calc_pwm>
 800a2e0:	eef0 7a40 	vmov.f32	s15, s0
 800a2e4:	4b08      	ldr	r3, [pc, #32]	; (800a308 <change_power_led_brigh+0xcc>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2ec:	ee17 2a90 	vmov	r2, s15
 800a2f0:	635a      	str	r2, [r3, #52]	; 0x34
		led_counter++;
 800a2f2:	4b06      	ldr	r3, [pc, #24]	; (800a30c <change_power_led_brigh+0xd0>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	4a04      	ldr	r2, [pc, #16]	; (800a30c <change_power_led_brigh+0xd0>)
 800a2fa:	6013      	str	r3, [r2, #0]

	    break;
 800a2fc:	e000      	b.n	800a300 <change_power_led_brigh+0xc4>
		//może case gdzie użytkownik podaje parametr określający jasność
	    default:
		break;
 800a2fe:	bf00      	nop
	}
    }
 800a300:	bf00      	nop
 800a302:	bd80      	pop	{r7, pc}
 800a304:	20007c18 	.word	0x20007c18
 800a308:	20007bcc 	.word	0x20007bcc
 800a30c:	200001fc 	.word	0x200001fc
 800a310:	42c80000 	.word	0x42c80000
 800a314:	3ff00000 	.word	0x3ff00000
 800a318:	40490000 	.word	0x40490000
 800a31c:	20000200 	.word	0x20000200

0800a320 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a324:	b672      	cpsid	i
}
 800a326:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	__NOP();
 800a328:	bf00      	nop
	//__bswap16();
	__NVIC_SystemReset();
 800a32a:	f7ff fc91 	bl	8009c50 <__NVIC_SystemReset>
	...

0800a330 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a334:	4b07      	ldr	r3, [pc, #28]	; (800a354 <MX_RNG_Init+0x24>)
 800a336:	4a08      	ldr	r2, [pc, #32]	; (800a358 <MX_RNG_Init+0x28>)
 800a338:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a33a:	4b06      	ldr	r3, [pc, #24]	; (800a354 <MX_RNG_Init+0x24>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a340:	4804      	ldr	r0, [pc, #16]	; (800a354 <MX_RNG_Init+0x24>)
 800a342:	f008 f82f 	bl	80123a4 <HAL_RNG_Init>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800a34c:	f7ff ffe8 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a350:	bf00      	nop
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20007814 	.word	0x20007814
 800a358:	50060800 	.word	0x50060800

0800a35c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a0a      	ldr	r2, [pc, #40]	; (800a394 <HAL_RNG_MspInit+0x38>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d10b      	bne.n	800a386 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800a36e:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <HAL_RNG_MspInit+0x3c>)
 800a370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a372:	4a09      	ldr	r2, [pc, #36]	; (800a398 <HAL_RNG_MspInit+0x3c>)
 800a374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a37a:	4b07      	ldr	r3, [pc, #28]	; (800a398 <HAL_RNG_MspInit+0x3c>)
 800a37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800a386:	bf00      	nop
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	50060800 	.word	0x50060800
 800a398:	40021000 	.word	0x40021000

0800a39c <HAL_RNG_MspDeInit>:

void HAL_RNG_MspDeInit(RNG_HandleTypeDef* rngHandle)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a07      	ldr	r2, [pc, #28]	; (800a3c8 <HAL_RNG_MspDeInit+0x2c>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d105      	bne.n	800a3ba <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 800a3ae:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <HAL_RNG_MspDeInit+0x30>)
 800a3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b2:	4a06      	ldr	r2, [pc, #24]	; (800a3cc <HAL_RNG_MspDeInit+0x30>)
 800a3b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	50060800 	.word	0x50060800
 800a3cc:	40021000 	.word	0x40021000

0800a3d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b092      	sub	sp, #72	; 0x48
 800a3d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a3d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	605a      	str	r2, [r3, #4]
 800a3e0:	609a      	str	r2, [r3, #8]
 800a3e2:	60da      	str	r2, [r3, #12]
 800a3e4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	2230      	movs	r2, #48	; 0x30
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f00b fc17 	bl	8015c24 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a3f6:	4b44      	ldr	r3, [pc, #272]	; (800a508 <MX_RTC_Init+0x138>)
 800a3f8:	4a44      	ldr	r2, [pc, #272]	; (800a50c <MX_RTC_Init+0x13c>)
 800a3fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a3fc:	4b42      	ldr	r3, [pc, #264]	; (800a508 <MX_RTC_Init+0x138>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800a402:	4b41      	ldr	r3, [pc, #260]	; (800a508 <MX_RTC_Init+0x138>)
 800a404:	227f      	movs	r2, #127	; 0x7f
 800a406:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800a408:	4b3f      	ldr	r3, [pc, #252]	; (800a508 <MX_RTC_Init+0x138>)
 800a40a:	22ff      	movs	r2, #255	; 0xff
 800a40c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a40e:	4b3e      	ldr	r3, [pc, #248]	; (800a508 <MX_RTC_Init+0x138>)
 800a410:	2200      	movs	r2, #0
 800a412:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a414:	4b3c      	ldr	r3, [pc, #240]	; (800a508 <MX_RTC_Init+0x138>)
 800a416:	2200      	movs	r2, #0
 800a418:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a41a:	4b3b      	ldr	r3, [pc, #236]	; (800a508 <MX_RTC_Init+0x138>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a420:	4b39      	ldr	r3, [pc, #228]	; (800a508 <MX_RTC_Init+0x138>)
 800a422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a426:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800a428:	4b37      	ldr	r3, [pc, #220]	; (800a508 <MX_RTC_Init+0x138>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a42e:	4836      	ldr	r0, [pc, #216]	; (800a508 <MX_RTC_Init+0x138>)
 800a430:	f008 f916 	bl	8012660 <HAL_RTC_Init>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800a43a:	f7ff ff71 	bl	800a320 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 800a43e:	230a      	movs	r3, #10
 800a440:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 20;
 800a444:	2314      	movs	r3, #20
 800a446:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 45;
 800a44a:	232d      	movs	r3, #45	; 0x2d
 800a44c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a450:	2300      	movs	r3, #0
 800a452:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a454:	2300      	movs	r3, #0
 800a456:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a45c:	2200      	movs	r2, #0
 800a45e:	4619      	mov	r1, r3
 800a460:	4829      	ldr	r0, [pc, #164]	; (800a508 <MX_RTC_Init+0x138>)
 800a462:	f008 f98d 	bl	8012780 <HAL_RTC_SetTime>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800a46c:	f7ff ff58 	bl	800a320 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800a476:	2301      	movs	r3, #1
 800a478:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 21;
 800a482:	2315      	movs	r3, #21
 800a484:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800a488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a48c:	2200      	movs	r2, #0
 800a48e:	4619      	mov	r1, r3
 800a490:	481d      	ldr	r0, [pc, #116]	; (800a508 <MX_RTC_Init+0x138>)
 800a492:	f008 fa77 	bl	8012984 <HAL_RTC_SetDate>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 800a49c:	f7ff ff40 	bl	800a320 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800a4c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	480d      	ldr	r0, [pc, #52]	; (800a508 <MX_RTC_Init+0x138>)
 800a4d4:	f008 fb2c 	bl	8012b30 <HAL_RTC_SetAlarm_IT>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 800a4de:	f7ff ff1f 	bl	800a320 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800a4e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a4e8:	463b      	mov	r3, r7
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4806      	ldr	r0, [pc, #24]	; (800a508 <MX_RTC_Init+0x138>)
 800a4f0:	f008 fb1e 	bl	8012b30 <HAL_RTC_SetAlarm_IT>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 800a4fa:	f7ff ff11 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a4fe:	bf00      	nop
 800a500:	3748      	adds	r7, #72	; 0x48
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20007828 	.word	0x20007828
 800a50c:	40002800 	.word	0x40002800

0800a510 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b0aa      	sub	sp, #168	; 0xa8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a518:	f107 0310 	add.w	r3, r7, #16
 800a51c:	2298      	movs	r2, #152	; 0x98
 800a51e:	2100      	movs	r1, #0
 800a520:	4618      	mov	r0, r3
 800a522:	f00b fb7f 	bl	8015c24 <memset>
  if(rtcHandle->Instance==RTC)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a16      	ldr	r2, [pc, #88]	; (800a584 <HAL_RTC_MspInit+0x74>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d124      	bne.n	800a57a <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a534:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a53a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a53e:	f107 0310 	add.w	r3, r7, #16
 800a542:	4618      	mov	r0, r3
 800a544:	f007 f9da 	bl	80118fc <HAL_RCCEx_PeriphCLKConfig>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800a54e:	f7ff fee7 	bl	800a320 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a552:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <HAL_RTC_MspInit+0x78>)
 800a554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a558:	4a0b      	ldr	r2, [pc, #44]	; (800a588 <HAL_RTC_MspInit+0x78>)
 800a55a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a55e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <HAL_RTC_MspInit+0x78>)
 800a564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a566:	4a08      	ldr	r2, [pc, #32]	; (800a588 <HAL_RTC_MspInit+0x78>)
 800a568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a56c:	6593      	str	r3, [r2, #88]	; 0x58
 800a56e:	4b06      	ldr	r3, [pc, #24]	; (800a588 <HAL_RTC_MspInit+0x78>)
 800a570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800a57a:	bf00      	nop
 800a57c:	37a8      	adds	r7, #168	; 0xa8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	40002800 	.word	0x40002800
 800a588:	40021000 	.word	0x40021000

0800a58c <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a590:	4b1b      	ldr	r3, [pc, #108]	; (800a600 <MX_SPI3_Init+0x74>)
 800a592:	4a1c      	ldr	r2, [pc, #112]	; (800a604 <MX_SPI3_Init+0x78>)
 800a594:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a596:	4b1a      	ldr	r3, [pc, #104]	; (800a600 <MX_SPI3_Init+0x74>)
 800a598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a59c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a59e:	4b18      	ldr	r3, [pc, #96]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a5a4:	4b16      	ldr	r3, [pc, #88]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a5aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5ac:	4b14      	ldr	r3, [pc, #80]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a5b2:	4b13      	ldr	r3, [pc, #76]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a5b8:	4b11      	ldr	r3, [pc, #68]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a5c0:	4b0f      	ldr	r3, [pc, #60]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5c2:	2218      	movs	r2, #24
 800a5c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a5c6:	4b0e      	ldr	r3, [pc, #56]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a5cc:	4b0c      	ldr	r3, [pc, #48]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800a5d8:	4b09      	ldr	r3, [pc, #36]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5da:	2207      	movs	r2, #7
 800a5dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a5de:	4b08      	ldr	r3, [pc, #32]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a5e4:	4b06      	ldr	r3, [pc, #24]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5e6:	2208      	movs	r2, #8
 800a5e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a5ea:	4805      	ldr	r0, [pc, #20]	; (800a600 <MX_SPI3_Init+0x74>)
 800a5ec:	f008 fcfc 	bl	8012fe8 <HAL_SPI_Init>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800a5f6:	f7ff fe93 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a5fa:	bf00      	nop
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	2000785c 	.word	0x2000785c
 800a604:	40003c00 	.word	0x40003c00

0800a608 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	; 0x28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a610:	f107 0314 	add.w	r3, r7, #20
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	605a      	str	r2, [r3, #4]
 800a61a:	609a      	str	r2, [r3, #8]
 800a61c:	60da      	str	r2, [r3, #12]
 800a61e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a2c      	ldr	r2, [pc, #176]	; (800a6d8 <HAL_SPI_MspInit+0xd0>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d151      	bne.n	800a6ce <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a62a:	4b2c      	ldr	r3, [pc, #176]	; (800a6dc <HAL_SPI_MspInit+0xd4>)
 800a62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a62e:	4a2b      	ldr	r2, [pc, #172]	; (800a6dc <HAL_SPI_MspInit+0xd4>)
 800a630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a634:	6593      	str	r3, [r2, #88]	; 0x58
 800a636:	4b29      	ldr	r3, [pc, #164]	; (800a6dc <HAL_SPI_MspInit+0xd4>)
 800a638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a63a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a63e:	613b      	str	r3, [r7, #16]
 800a640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a642:	4b26      	ldr	r3, [pc, #152]	; (800a6dc <HAL_SPI_MspInit+0xd4>)
 800a644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a646:	4a25      	ldr	r2, [pc, #148]	; (800a6dc <HAL_SPI_MspInit+0xd4>)
 800a648:	f043 0304 	orr.w	r3, r3, #4
 800a64c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a64e:	4b23      	ldr	r3, [pc, #140]	; (800a6dc <HAL_SPI_MspInit+0xd4>)
 800a650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	60fb      	str	r3, [r7, #12]
 800a658:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800a65a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a65e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a660:	2302      	movs	r3, #2
 800a662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a668:	2303      	movs	r3, #3
 800a66a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a66c:	2306      	movs	r3, #6
 800a66e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a670:	f107 0314 	add.w	r3, r7, #20
 800a674:	4619      	mov	r1, r3
 800a676:	481a      	ldr	r0, [pc, #104]	; (800a6e0 <HAL_SPI_MspInit+0xd8>)
 800a678:	f004 ff34 	bl	800f4e4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel1;
 800a67c:	4b19      	ldr	r3, [pc, #100]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a67e:	4a1a      	ldr	r2, [pc, #104]	; (800a6e8 <HAL_SPI_MspInit+0xe0>)
 800a680:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800a682:	4b18      	ldr	r3, [pc, #96]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a684:	2210      	movs	r2, #16
 800a686:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a688:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a68a:	2210      	movs	r2, #16
 800a68c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a68e:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a690:	2200      	movs	r2, #0
 800a692:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a694:	4b13      	ldr	r3, [pc, #76]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a696:	2280      	movs	r2, #128	; 0x80
 800a698:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a69a:	4b12      	ldr	r3, [pc, #72]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a6a0:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800a6a6:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a6b2:	480c      	ldr	r0, [pc, #48]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a6b4:	f004 fbe8 	bl	800ee88 <HAL_DMA_Init>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800a6be:	f7ff fe2f 	bl	800a320 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a07      	ldr	r2, [pc, #28]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a6c6:	655a      	str	r2, [r3, #84]	; 0x54
 800a6c8:	4a06      	ldr	r2, [pc, #24]	; (800a6e4 <HAL_SPI_MspInit+0xdc>)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800a6ce:	bf00      	nop
 800a6d0:	3728      	adds	r7, #40	; 0x28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	40003c00 	.word	0x40003c00
 800a6dc:	40021000 	.word	0x40021000
 800a6e0:	48000800 	.word	0x48000800
 800a6e4:	200078c0 	.word	0x200078c0
 800a6e8:	40020008 	.word	0x40020008

0800a6ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6f2:	4b0f      	ldr	r3, [pc, #60]	; (800a730 <HAL_MspInit+0x44>)
 800a6f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6f6:	4a0e      	ldr	r2, [pc, #56]	; (800a730 <HAL_MspInit+0x44>)
 800a6f8:	f043 0301 	orr.w	r3, r3, #1
 800a6fc:	6613      	str	r3, [r2, #96]	; 0x60
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <HAL_MspInit+0x44>)
 800a700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	607b      	str	r3, [r7, #4]
 800a708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a70a:	4b09      	ldr	r3, [pc, #36]	; (800a730 <HAL_MspInit+0x44>)
 800a70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a70e:	4a08      	ldr	r2, [pc, #32]	; (800a730 <HAL_MspInit+0x44>)
 800a710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a714:	6593      	str	r3, [r2, #88]	; 0x58
 800a716:	4b06      	ldr	r3, [pc, #24]	; (800a730 <HAL_MspInit+0x44>)
 800a718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a71e:	603b      	str	r3, [r7, #0]
 800a720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40021000 	.word	0x40021000

0800a734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a738:	e7fe      	b.n	800a738 <NMI_Handler+0x4>

0800a73a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a73a:	b480      	push	{r7}
 800a73c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a73e:	e7fe      	b.n	800a73e <HardFault_Handler+0x4>

0800a740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a744:	e7fe      	b.n	800a744 <MemManage_Handler+0x4>

0800a746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a746:	b480      	push	{r7}
 800a748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a74a:	e7fe      	b.n	800a74a <BusFault_Handler+0x4>

0800a74c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a750:	e7fe      	b.n	800a750 <UsageFault_Handler+0x4>

0800a752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a752:	b480      	push	{r7}
 800a754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a756:	bf00      	nop
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a764:	bf00      	nop
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a76e:	b480      	push	{r7}
 800a770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a772:	bf00      	nop
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a780:	f002 fa5a 	bl	800cc38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a784:	bf00      	nop
 800a786:	bd80      	pop	{r7, pc}

0800a788 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_2_Pin);
 800a78c:	2001      	movs	r0, #1
 800a78e:	f005 f86b 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a792:	bf00      	nop
 800a794:	bd80      	pop	{r7, pc}

0800a796 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_3_Pin);
 800a79a:	2002      	movs	r0, #2
 800a79c:	f005 f864 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800a7a0:	bf00      	nop
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI5_CS_Pin);
 800a7a8:	2004      	movs	r0, #4
 800a7aa:	f005 f85d 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800a7ae:	bf00      	nop
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800a7b8:	4802      	ldr	r0, [pc, #8]	; (800a7c4 <DMA1_Channel1_IRQHandler+0x10>)
 800a7ba:	f004 fd43 	bl	800f244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a7be:	bf00      	nop
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200078c0 	.word	0x200078c0

0800a7c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a7cc:	4802      	ldr	r0, [pc, #8]	; (800a7d8 <DMA1_Channel3_IRQHandler+0x10>)
 800a7ce:	f004 fd39 	bl	800f244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a7d2:	bf00      	nop
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	20000648 	.word	0x20000648

0800a7dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a7e0:	4803      	ldr	r0, [pc, #12]	; (800a7f0 <ADC1_2_IRQHandler+0x14>)
 800a7e2:	f002 ff2d 	bl	800d640 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800a7e6:	4803      	ldr	r0, [pc, #12]	; (800a7f4 <ADC1_2_IRQHandler+0x18>)
 800a7e8:	f002 ff2a 	bl	800d640 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800a7ec:	bf00      	nop
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	200005e0 	.word	0x200005e0
 800a7f4:	20000578 	.word	0x20000578

0800a7f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_1_Pin);
 800a7fc:	2020      	movs	r0, #32
 800a7fe:	f005 f833 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_BUTTON_LOUDNESS_Pin);
 800a802:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a806:	f005 f82f 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a80a:	bf00      	nop
 800a80c:	bd80      	pop	{r7, pc}
	...

0800a810 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a814:	4803      	ldr	r0, [pc, #12]	; (800a824 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800a816:	f009 ff74 	bl	8014702 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800a81a:	4803      	ldr	r0, [pc, #12]	; (800a828 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800a81c:	f009 ff71 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800a820:	bf00      	nop
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20007b34 	.word	0x20007b34
 800a828:	200079b8 	.word	0x200079b8

0800a82c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a830:	4803      	ldr	r0, [pc, #12]	; (800a840 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800a832:	f009 ff66 	bl	8014702 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800a836:	4803      	ldr	r0, [pc, #12]	; (800a844 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800a838:	f009 ff63 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a83c:	bf00      	nop
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20007b34 	.word	0x20007b34
 800a844:	20007bcc 	.word	0x20007bcc

0800a848 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a84c:	4803      	ldr	r0, [pc, #12]	; (800a85c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800a84e:	f009 ff58 	bl	8014702 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800a852:	4803      	ldr	r0, [pc, #12]	; (800a860 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800a854:	f009 ff55 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800a858:	bf00      	nop
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	20007b34 	.word	0x20007b34
 800a860:	20007a04 	.word	0x20007a04

0800a864 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a868:	4802      	ldr	r0, [pc, #8]	; (800a874 <TIM1_CC_IRQHandler+0x10>)
 800a86a:	f009 ff4a 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a86e:	bf00      	nop
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20007b34 	.word	0x20007b34

0800a878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a87c:	4802      	ldr	r0, [pc, #8]	; (800a888 <TIM2_IRQHandler+0x10>)
 800a87e:	f009 ff40 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a882:	bf00      	nop
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20007b80 	.word	0x20007b80

0800a88c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a890:	4802      	ldr	r0, [pc, #8]	; (800a89c <TIM3_IRQHandler+0x10>)
 800a892:	f009 ff36 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a896:	bf00      	nop
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20007a9c 	.word	0x20007a9c

0800a8a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a8a4:	4802      	ldr	r0, [pc, #8]	; (800a8b0 <TIM4_IRQHandler+0x10>)
 800a8a6:	f009 ff2c 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a8aa:	bf00      	nop
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	2000796c 	.word	0x2000796c

0800a8b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(POWER_BUTTON_Pin);
 800a8b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a8bc:	f004 ffd4 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_BUTTON_VOLUME_FRONT_Pin);
 800a8c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a8c4:	f004 ffd0 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPI5_DC_Pin);
 800a8c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a8cc:	f004 ffcc 	bl	800f868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a8d0:	bf00      	nop
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800a8d8:	4802      	ldr	r0, [pc, #8]	; (800a8e4 <RTC_Alarm_IRQHandler+0x10>)
 800a8da:	f008 fa83 	bl	8012de4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800a8de:	bf00      	nop
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20007828 	.word	0x20007828

0800a8e8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a8ec:	4802      	ldr	r0, [pc, #8]	; (800a8f8 <TIM8_CC_IRQHandler+0x10>)
 800a8ee:	f009 ff08 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800a8f2:	bf00      	nop
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20007920 	.word	0x20007920

0800a8fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800a900:	4802      	ldr	r0, [pc, #8]	; (800a90c <TIM5_IRQHandler+0x10>)
 800a902:	f009 fefe 	bl	8014702 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800a906:	bf00      	nop
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	20007a50 	.word	0x20007a50

0800a910 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a914:	4802      	ldr	r0, [pc, #8]	; (800a920 <SPI3_IRQHandler+0x10>)
 800a916:	f008 fd79 	bl	801340c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a91a:	bf00      	nop
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	2000785c 	.word	0x2000785c

0800a924 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a928:	4803      	ldr	r0, [pc, #12]	; (800a938 <TIM6_DAC_IRQHandler+0x14>)
 800a92a:	f009 feea 	bl	8014702 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800a92e:	4803      	ldr	r0, [pc, #12]	; (800a93c <TIM6_DAC_IRQHandler+0x18>)
 800a930:	f004 f8fb 	bl	800eb2a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a934:	bf00      	nop
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20007ae8 	.word	0x20007ae8
 800a93c:	200006a8 	.word	0x200006a8

0800a940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a948:	4a14      	ldr	r2, [pc, #80]	; (800a99c <_sbrk+0x5c>)
 800a94a:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <_sbrk+0x60>)
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a954:	4b13      	ldr	r3, [pc, #76]	; (800a9a4 <_sbrk+0x64>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a95c:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <_sbrk+0x64>)
 800a95e:	4a12      	ldr	r2, [pc, #72]	; (800a9a8 <_sbrk+0x68>)
 800a960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a962:	4b10      	ldr	r3, [pc, #64]	; (800a9a4 <_sbrk+0x64>)
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d207      	bcs.n	800a980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a970:	f00b f92e 	bl	8015bd0 <__errno>
 800a974:	4603      	mov	r3, r0
 800a976:	220c      	movs	r2, #12
 800a978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a97a:	f04f 33ff 	mov.w	r3, #4294967295
 800a97e:	e009      	b.n	800a994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a980:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <_sbrk+0x64>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a986:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <_sbrk+0x64>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4413      	add	r3, r2
 800a98e:	4a05      	ldr	r2, [pc, #20]	; (800a9a4 <_sbrk+0x64>)
 800a990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a992:	68fb      	ldr	r3, [r7, #12]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	20050000 	.word	0x20050000
 800a9a0:	00002000 	.word	0x00002000
 800a9a4:	20000204 	.word	0x20000204
 800a9a8:	20007c40 	.word	0x20007c40

0800a9ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <SystemInit+0x20>)
 800a9b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b6:	4a05      	ldr	r2, [pc, #20]	; (800a9cc <SystemInit+0x20>)
 800a9b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a9c0:	bf00      	nop
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	e000ed00 	.word	0xe000ed00

0800a9d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08c      	sub	sp, #48	; 0x30
 800a9d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a9d6:	f107 030c 	add.w	r3, r7, #12
 800a9da:	2224      	movs	r2, #36	; 0x24
 800a9dc:	2100      	movs	r1, #0
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f00b f920 	bl	8015c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	605a      	str	r2, [r3, #4]
 800a9ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a9ee:	4b23      	ldr	r3, [pc, #140]	; (800aa7c <MX_TIM1_Init+0xac>)
 800a9f0:	4a23      	ldr	r2, [pc, #140]	; (800aa80 <MX_TIM1_Init+0xb0>)
 800a9f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a9f4:	4b21      	ldr	r3, [pc, #132]	; (800aa7c <MX_TIM1_Init+0xac>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9fa:	4b20      	ldr	r3, [pc, #128]	; (800aa7c <MX_TIM1_Init+0xac>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800aa00:	4b1e      	ldr	r3, [pc, #120]	; (800aa7c <MX_TIM1_Init+0xac>)
 800aa02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa08:	4b1c      	ldr	r3, [pc, #112]	; (800aa7c <MX_TIM1_Init+0xac>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800aa0e:	4b1b      	ldr	r3, [pc, #108]	; (800aa7c <MX_TIM1_Init+0xac>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa14:	4b19      	ldr	r3, [pc, #100]	; (800aa7c <MX_TIM1_Init+0xac>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800aa22:	2301      	movs	r3, #1
 800aa24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800aa26:	2300      	movs	r3, #0
 800aa28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800aa32:	2301      	movs	r3, #1
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800aa36:	2300      	movs	r3, #0
 800aa38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800aa3e:	f107 030c 	add.w	r3, r7, #12
 800aa42:	4619      	mov	r1, r3
 800aa44:	480d      	ldr	r0, [pc, #52]	; (800aa7c <MX_TIM1_Init+0xac>)
 800aa46:	f009 fc43 	bl	80142d0 <HAL_TIM_Encoder_Init>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800aa50:	f7ff fc66 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa54:	2300      	movs	r3, #0
 800aa56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800aa60:	463b      	mov	r3, r7
 800aa62:	4619      	mov	r1, r3
 800aa64:	4805      	ldr	r0, [pc, #20]	; (800aa7c <MX_TIM1_Init+0xac>)
 800aa66:	f00a fcad 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800aa70:	f7ff fc56 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800aa74:	bf00      	nop
 800aa76:	3730      	adds	r7, #48	; 0x30
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	20007b34 	.word	0x20007b34
 800aa80:	40012c00 	.word	0x40012c00

0800aa84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b08c      	sub	sp, #48	; 0x30
 800aa88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800aa8a:	f107 030c 	add.w	r3, r7, #12
 800aa8e:	2224      	movs	r2, #36	; 0x24
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f00b f8c6 	bl	8015c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa98:	463b      	mov	r3, r7
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	605a      	str	r2, [r3, #4]
 800aaa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800aaa2:	4b21      	ldr	r3, [pc, #132]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800aaa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aaa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aab0:	4b1d      	ldr	r3, [pc, #116]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 800aab6:	4b1c      	ldr	r3, [pc, #112]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800aab8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aabc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aabe:	4b1a      	ldr	r3, [pc, #104]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aac4:	4b18      	ldr	r3, [pc, #96]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800aace:	2300      	movs	r3, #0
 800aad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800aad2:	2301      	movs	r3, #1
 800aad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800aad6:	2300      	movs	r3, #0
 800aad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800aade:	2300      	movs	r3, #0
 800aae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800aae2:	2301      	movs	r3, #1
 800aae4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800aae6:	2300      	movs	r3, #0
 800aae8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800aaee:	f107 030c 	add.w	r3, r7, #12
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	480c      	ldr	r0, [pc, #48]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800aaf6:	f009 fbeb 	bl	80142d0 <HAL_TIM_Encoder_Init>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800ab00:	f7ff fc0e 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab04:	2300      	movs	r3, #0
 800ab06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ab0c:	463b      	mov	r3, r7
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4805      	ldr	r0, [pc, #20]	; (800ab28 <MX_TIM2_Init+0xa4>)
 800ab12:	f00a fc57 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800ab1c:	f7ff fc00 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ab20:	bf00      	nop
 800ab22:	3730      	adds	r7, #48	; 0x30
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	20007b80 	.word	0x20007b80

0800ab2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08c      	sub	sp, #48	; 0x30
 800ab30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ab32:	f107 030c 	add.w	r3, r7, #12
 800ab36:	2224      	movs	r2, #36	; 0x24
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f00b f872 	bl	8015c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab40:	463b      	mov	r3, r7
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	605a      	str	r2, [r3, #4]
 800ab48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ab4a:	4b21      	ldr	r3, [pc, #132]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800ab4c:	4a21      	ldr	r2, [pc, #132]	; (800abd4 <MX_TIM3_Init+0xa8>)
 800ab4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ab50:	4b1f      	ldr	r3, [pc, #124]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab56:	4b1e      	ldr	r3, [pc, #120]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800ab5c:	4b1c      	ldr	r3, [pc, #112]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800ab5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab64:	4b1a      	ldr	r3, [pc, #104]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab6a:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800ab70:	2301      	movs	r3, #1
 800ab72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ab74:	2300      	movs	r3, #0
 800ab76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ab84:	2300      	movs	r3, #0
 800ab86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800ab94:	f107 030c 	add.w	r3, r7, #12
 800ab98:	4619      	mov	r1, r3
 800ab9a:	480d      	ldr	r0, [pc, #52]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800ab9c:	f009 fb98 	bl	80142d0 <HAL_TIM_Encoder_Init>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800aba6:	f7ff fbbb 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800abaa:	2300      	movs	r3, #0
 800abac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800abae:	2300      	movs	r3, #0
 800abb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800abb2:	463b      	mov	r3, r7
 800abb4:	4619      	mov	r1, r3
 800abb6:	4806      	ldr	r0, [pc, #24]	; (800abd0 <MX_TIM3_Init+0xa4>)
 800abb8:	f00a fc04 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800abc2:	f7ff fbad 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800abc6:	bf00      	nop
 800abc8:	3730      	adds	r7, #48	; 0x30
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	20007a9c 	.word	0x20007a9c
 800abd4:	40000400 	.word	0x40000400

0800abd8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08c      	sub	sp, #48	; 0x30
 800abdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800abde:	f107 030c 	add.w	r3, r7, #12
 800abe2:	2224      	movs	r2, #36	; 0x24
 800abe4:	2100      	movs	r1, #0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f00b f81c 	bl	8015c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abec:	463b      	mov	r3, r7
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	605a      	str	r2, [r3, #4]
 800abf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800abf6:	4b21      	ldr	r3, [pc, #132]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800abf8:	4a21      	ldr	r2, [pc, #132]	; (800ac80 <MX_TIM4_Init+0xa8>)
 800abfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800abfc:	4b1f      	ldr	r3, [pc, #124]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac02:	4b1e      	ldr	r3, [pc, #120]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800ac08:	4b1c      	ldr	r3, [pc, #112]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800ac0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac10:	4b1a      	ldr	r3, [pc, #104]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac16:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800ac18:	2200      	movs	r2, #0
 800ac1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ac20:	2300      	movs	r3, #0
 800ac22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ac24:	2301      	movs	r3, #1
 800ac26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ac30:	2300      	movs	r3, #0
 800ac32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ac34:	2301      	movs	r3, #1
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800ac40:	f107 030c 	add.w	r3, r7, #12
 800ac44:	4619      	mov	r1, r3
 800ac46:	480d      	ldr	r0, [pc, #52]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800ac48:	f009 fb42 	bl	80142d0 <HAL_TIM_Encoder_Init>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800ac52:	f7ff fb65 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac56:	2300      	movs	r3, #0
 800ac58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ac5e:	463b      	mov	r3, r7
 800ac60:	4619      	mov	r1, r3
 800ac62:	4806      	ldr	r0, [pc, #24]	; (800ac7c <MX_TIM4_Init+0xa4>)
 800ac64:	f00a fbae 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800ac6e:	f7ff fb57 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800ac72:	bf00      	nop
 800ac74:	3730      	adds	r7, #48	; 0x30
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	2000796c 	.word	0x2000796c
 800ac80:	40000800 	.word	0x40000800

0800ac84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08c      	sub	sp, #48	; 0x30
 800ac88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ac8a:	f107 030c 	add.w	r3, r7, #12
 800ac8e:	2224      	movs	r2, #36	; 0x24
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f00a ffc6 	bl	8015c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac98:	463b      	mov	r3, r7
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	605a      	str	r2, [r3, #4]
 800aca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800aca2:	4b21      	ldr	r3, [pc, #132]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800aca4:	4a21      	ldr	r2, [pc, #132]	; (800ad2c <MX_TIM5_Init+0xa8>)
 800aca6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800aca8:	4b1f      	ldr	r3, [pc, #124]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800acaa:	2200      	movs	r2, #0
 800acac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800acae:	4b1e      	ldr	r3, [pc, #120]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65534;
 800acb4:	4b1c      	ldr	r3, [pc, #112]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800acb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800acba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800acc2:	4b19      	ldr	r3, [pc, #100]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800acc4:	2200      	movs	r2, #0
 800acc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800acc8:	2301      	movs	r3, #1
 800acca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800accc:	2300      	movs	r3, #0
 800acce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800acd0:	2301      	movs	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800acdc:	2300      	movs	r3, #0
 800acde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ace0:	2301      	movs	r3, #1
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ace4:	2300      	movs	r3, #0
 800ace6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800acec:	f107 030c 	add.w	r3, r7, #12
 800acf0:	4619      	mov	r1, r3
 800acf2:	480d      	ldr	r0, [pc, #52]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800acf4:	f009 faec 	bl	80142d0 <HAL_TIM_Encoder_Init>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800acfe:	f7ff fb0f 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad02:	2300      	movs	r3, #0
 800ad04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4806      	ldr	r0, [pc, #24]	; (800ad28 <MX_TIM5_Init+0xa4>)
 800ad10:	f00a fb58 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800ad1a:	f7ff fb01 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800ad1e:	bf00      	nop
 800ad20:	3730      	adds	r7, #48	; 0x30
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20007a50 	.word	0x20007a50
 800ad2c:	40000c00 	.word	0x40000c00

0800ad30 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad36:	1d3b      	adds	r3, r7, #4
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	605a      	str	r2, [r3, #4]
 800ad3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ad40:	4b14      	ldr	r3, [pc, #80]	; (800ad94 <MX_TIM6_Init+0x64>)
 800ad42:	4a15      	ldr	r2, [pc, #84]	; (800ad98 <MX_TIM6_Init+0x68>)
 800ad44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1357;
 800ad46:	4b13      	ldr	r3, [pc, #76]	; (800ad94 <MX_TIM6_Init+0x64>)
 800ad48:	f240 524d 	movw	r2, #1357	; 0x54d
 800ad4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad4e:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <MX_TIM6_Init+0x64>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 800ad54:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <MX_TIM6_Init+0x64>)
 800ad56:	2201      	movs	r2, #1
 800ad58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad5a:	4b0e      	ldr	r3, [pc, #56]	; (800ad94 <MX_TIM6_Init+0x64>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ad60:	480c      	ldr	r0, [pc, #48]	; (800ad94 <MX_TIM6_Init+0x64>)
 800ad62:	f008 fdd7 	bl	8013914 <HAL_TIM_Base_Init>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800ad6c:	f7ff fad8 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ad70:	2320      	movs	r3, #32
 800ad72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ad78:	1d3b      	adds	r3, r7, #4
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4805      	ldr	r0, [pc, #20]	; (800ad94 <MX_TIM6_Init+0x64>)
 800ad7e:	f00a fb21 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800ad88:	f7ff faca 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	20007ae8 	.word	0x20007ae8
 800ad98:	40001000 	.word	0x40001000

0800ad9c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ada2:	f107 030c 	add.w	r3, r7, #12
 800ada6:	2224      	movs	r2, #36	; 0x24
 800ada8:	2100      	movs	r1, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	f00a ff3a 	bl	8015c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800adb0:	463b      	mov	r3, r7
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	605a      	str	r2, [r3, #4]
 800adb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800adba:	4b23      	ldr	r3, [pc, #140]	; (800ae48 <MX_TIM8_Init+0xac>)
 800adbc:	4a23      	ldr	r2, [pc, #140]	; (800ae4c <MX_TIM8_Init+0xb0>)
 800adbe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800adc0:	4b21      	ldr	r3, [pc, #132]	; (800ae48 <MX_TIM8_Init+0xac>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800adc6:	4b20      	ldr	r3, [pc, #128]	; (800ae48 <MX_TIM8_Init+0xac>)
 800adc8:	2200      	movs	r2, #0
 800adca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800adcc:	4b1e      	ldr	r3, [pc, #120]	; (800ae48 <MX_TIM8_Init+0xac>)
 800adce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800add2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800add4:	4b1c      	ldr	r3, [pc, #112]	; (800ae48 <MX_TIM8_Init+0xac>)
 800add6:	2200      	movs	r2, #0
 800add8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800adda:	4b1b      	ldr	r3, [pc, #108]	; (800ae48 <MX_TIM8_Init+0xac>)
 800addc:	2200      	movs	r2, #0
 800adde:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ade0:	4b19      	ldr	r3, [pc, #100]	; (800ae48 <MX_TIM8_Init+0xac>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800ade6:	2301      	movs	r3, #1
 800ade8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800adea:	2300      	movs	r3, #0
 800adec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800adee:	2301      	movs	r3, #1
 800adf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800adf2:	2300      	movs	r3, #0
 800adf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800adfa:	2300      	movs	r3, #0
 800adfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800adfe:	2301      	movs	r3, #1
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ae02:	2300      	movs	r3, #0
 800ae04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	4619      	mov	r1, r3
 800ae10:	480d      	ldr	r0, [pc, #52]	; (800ae48 <MX_TIM8_Init+0xac>)
 800ae12:	f009 fa5d 	bl	80142d0 <HAL_TIM_Encoder_Init>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800ae1c:	f7ff fa80 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae20:	2300      	movs	r3, #0
 800ae22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ae24:	2300      	movs	r3, #0
 800ae26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ae2c:	463b      	mov	r3, r7
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4805      	ldr	r0, [pc, #20]	; (800ae48 <MX_TIM8_Init+0xac>)
 800ae32:	f00a fac7 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800ae3c:	f7ff fa70 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800ae40:	bf00      	nop
 800ae42:	3730      	adds	r7, #48	; 0x30
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20007920 	.word	0x20007920
 800ae4c:	40013400 	.word	0x40013400

0800ae50 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b096      	sub	sp, #88	; 0x58
 800ae54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ae56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	605a      	str	r2, [r3, #4]
 800ae60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ae62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae66:	2200      	movs	r2, #0
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	605a      	str	r2, [r3, #4]
 800ae6c:	609a      	str	r2, [r3, #8]
 800ae6e:	60da      	str	r2, [r3, #12]
 800ae70:	611a      	str	r2, [r3, #16]
 800ae72:	615a      	str	r2, [r3, #20]
 800ae74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ae76:	1d3b      	adds	r3, r7, #4
 800ae78:	222c      	movs	r2, #44	; 0x2c
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f00a fed1 	bl	8015c24 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800ae82:	4b3b      	ldr	r3, [pc, #236]	; (800af70 <MX_TIM15_Init+0x120>)
 800ae84:	4a3b      	ldr	r2, [pc, #236]	; (800af74 <MX_TIM15_Init+0x124>)
 800ae86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 65535;
 800ae88:	4b39      	ldr	r3, [pc, #228]	; (800af70 <MX_TIM15_Init+0x120>)
 800ae8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae8e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae90:	4b37      	ldr	r3, [pc, #220]	; (800af70 <MX_TIM15_Init+0x120>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800ae96:	4b36      	ldr	r3, [pc, #216]	; (800af70 <MX_TIM15_Init+0x120>)
 800ae98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae9c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800ae9e:	4b34      	ldr	r3, [pc, #208]	; (800af70 <MX_TIM15_Init+0x120>)
 800aea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aea4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800aea6:	4b32      	ldr	r3, [pc, #200]	; (800af70 <MX_TIM15_Init+0x120>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aeac:	4b30      	ldr	r3, [pc, #192]	; (800af70 <MX_TIM15_Init+0x120>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 800aeb2:	482f      	ldr	r0, [pc, #188]	; (800af70 <MX_TIM15_Init+0x120>)
 800aeb4:	f008 fe15 	bl	8013ae2 <HAL_TIM_OC_Init>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <MX_TIM15_Init+0x72>
  {
    Error_Handler();
 800aebe:	f7ff fa2f 	bl	800a320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aec2:	2300      	movs	r3, #0
 800aec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aec6:	2300      	movs	r3, #0
 800aec8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800aeca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aece:	4619      	mov	r1, r3
 800aed0:	4827      	ldr	r0, [pc, #156]	; (800af70 <MX_TIM15_Init+0x120>)
 800aed2:	f00a fa77 	bl	80153c4 <HAL_TIMEx_MasterConfigSynchronization>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d001      	beq.n	800aee0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800aedc:	f7ff fa20 	bl	800a320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800aee0:	2300      	movs	r3, #0
 800aee2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 55000;
 800aee4:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
 800aee8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aeee:	2300      	movs	r3, #0
 800aef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aef2:	2300      	movs	r3, #0
 800aef4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800aef6:	2300      	movs	r3, #0
 800aef8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800aefa:	2300      	movs	r3, #0
 800aefc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aefe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af02:	2200      	movs	r2, #0
 800af04:	4619      	mov	r1, r3
 800af06:	481a      	ldr	r0, [pc, #104]	; (800af70 <MX_TIM15_Init+0x120>)
 800af08:	f009 fd1a 	bl	8014940 <HAL_TIM_OC_ConfigChannel>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800af12:	f7ff fa05 	bl	800a320 <Error_Handler>
  }
  sConfigOC.Pulse = 5500;
 800af16:	f241 537c 	movw	r3, #5500	; 0x157c
 800af1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800af1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af20:	2204      	movs	r2, #4
 800af22:	4619      	mov	r1, r3
 800af24:	4812      	ldr	r0, [pc, #72]	; (800af70 <MX_TIM15_Init+0x120>)
 800af26:	f009 fd0b 	bl	8014940 <HAL_TIM_OC_ConfigChannel>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 800af30:	f7ff f9f6 	bl	800a320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800af34:	2300      	movs	r3, #0
 800af36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800af38:	2300      	movs	r3, #0
 800af3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800af44:	2300      	movs	r3, #0
 800af46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800af48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800af4e:	2300      	movs	r3, #0
 800af50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800af52:	1d3b      	adds	r3, r7, #4
 800af54:	4619      	mov	r1, r3
 800af56:	4806      	ldr	r0, [pc, #24]	; (800af70 <MX_TIM15_Init+0x120>)
 800af58:	f00a fabc 	bl	80154d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800af62:	f7ff f9dd 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800af66:	bf00      	nop
 800af68:	3758      	adds	r7, #88	; 0x58
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	200079b8 	.word	0x200079b8
 800af74:	40014000 	.word	0x40014000

0800af78 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b092      	sub	sp, #72	; 0x48
 800af7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800af7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	605a      	str	r2, [r3, #4]
 800af88:	609a      	str	r2, [r3, #8]
 800af8a:	60da      	str	r2, [r3, #12]
 800af8c:	611a      	str	r2, [r3, #16]
 800af8e:	615a      	str	r2, [r3, #20]
 800af90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800af92:	463b      	mov	r3, r7
 800af94:	222c      	movs	r2, #44	; 0x2c
 800af96:	2100      	movs	r1, #0
 800af98:	4618      	mov	r0, r3
 800af9a:	f00a fe43 	bl	8015c24 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800af9e:	4b30      	ldr	r3, [pc, #192]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afa0:	4a30      	ldr	r2, [pc, #192]	; (800b064 <MX_TIM16_Init+0xec>)
 800afa2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1199;
 800afa4:	4b2e      	ldr	r3, [pc, #184]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afa6:	f240 42af 	movw	r2, #1199	; 0x4af
 800afaa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800afac:	4b2c      	ldr	r3, [pc, #176]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afae:	2200      	movs	r2, #0
 800afb0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800afb2:	4b2b      	ldr	r3, [pc, #172]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800afb8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afba:	4b29      	ldr	r3, [pc, #164]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800afc0:	4b27      	ldr	r3, [pc, #156]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afc6:	4b26      	ldr	r3, [pc, #152]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afc8:	2200      	movs	r2, #0
 800afca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800afcc:	4824      	ldr	r0, [pc, #144]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afce:	f008 fca1 	bl	8013914 <HAL_TIM_Base_Init>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d001      	beq.n	800afdc <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800afd8:	f7ff f9a2 	bl	800a320 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800afdc:	4820      	ldr	r0, [pc, #128]	; (800b060 <MX_TIM16_Init+0xe8>)
 800afde:	f009 f80f 	bl	8014000 <HAL_TIM_PWM_Init>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800afe8:	f7ff f99a 	bl	800a320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800afec:	2360      	movs	r3, #96	; 0x60
 800afee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aff4:	2300      	movs	r3, #0
 800aff6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aff8:	2300      	movs	r3, #0
 800affa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800affc:	2300      	movs	r3, #0
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b000:	2300      	movs	r3, #0
 800b002:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b004:	2300      	movs	r3, #0
 800b006:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b008:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b00c:	2200      	movs	r2, #0
 800b00e:	4619      	mov	r1, r3
 800b010:	4813      	ldr	r0, [pc, #76]	; (800b060 <MX_TIM16_Init+0xe8>)
 800b012:	f009 fd0f 	bl	8014a34 <HAL_TIM_PWM_ConfigChannel>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d001      	beq.n	800b020 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 800b01c:	f7ff f980 	bl	800a320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b020:	2300      	movs	r3, #0
 800b022:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b024:	2300      	movs	r3, #0
 800b026:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b028:	2300      	movs	r3, #0
 800b02a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b030:	2300      	movs	r3, #0
 800b032:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b038:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800b03e:	463b      	mov	r3, r7
 800b040:	4619      	mov	r1, r3
 800b042:	4807      	ldr	r0, [pc, #28]	; (800b060 <MX_TIM16_Init+0xe8>)
 800b044:	f00a fa46 	bl	80154d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800b04e:	f7ff f967 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800b052:	4803      	ldr	r0, [pc, #12]	; (800b060 <MX_TIM16_Init+0xe8>)
 800b054:	f000 fa3a 	bl	800b4cc <HAL_TIM_MspPostInit>

}
 800b058:	bf00      	nop
 800b05a:	3748      	adds	r7, #72	; 0x48
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20007bcc 	.word	0x20007bcc
 800b064:	40014400 	.word	0x40014400

0800b068 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b092      	sub	sp, #72	; 0x48
 800b06c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800b06e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
 800b076:	605a      	str	r2, [r3, #4]
 800b078:	609a      	str	r2, [r3, #8]
 800b07a:	60da      	str	r2, [r3, #12]
 800b07c:	611a      	str	r2, [r3, #16]
 800b07e:	615a      	str	r2, [r3, #20]
 800b080:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b082:	463b      	mov	r3, r7
 800b084:	222c      	movs	r2, #44	; 0x2c
 800b086:	2100      	movs	r1, #0
 800b088:	4618      	mov	r0, r3
 800b08a:	f00a fdcb 	bl	8015c24 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800b08e:	4b2f      	ldr	r3, [pc, #188]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b090:	4a2f      	ldr	r2, [pc, #188]	; (800b150 <MX_TIM17_Init+0xe8>)
 800b092:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2999;
 800b094:	4b2d      	ldr	r3, [pc, #180]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b096:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800b09a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b09c:	4b2b      	ldr	r3, [pc, #172]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 800b0a2:	4b2a      	ldr	r3, [pc, #168]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b0a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b0a8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b0aa:	4b28      	ldr	r3, [pc, #160]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800b0b0:	4b26      	ldr	r3, [pc, #152]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0b6:	4b25      	ldr	r3, [pc, #148]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800b0bc:	4823      	ldr	r0, [pc, #140]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b0be:	f008 fc29 	bl	8013914 <HAL_TIM_Base_Init>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800b0c8:	f7ff f92a 	bl	800a320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800b0cc:	481f      	ldr	r0, [pc, #124]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b0ce:	f008 fd08 	bl	8013ae2 <HAL_TIM_OC_Init>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800b0d8:	f7ff f922 	bl	800a320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 2998;
 800b0e0:	f640 33b6 	movw	r3, #2998	; 0xbb6
 800b0e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b0fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0fe:	2200      	movs	r2, #0
 800b100:	4619      	mov	r1, r3
 800b102:	4812      	ldr	r0, [pc, #72]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b104:	f009 fc1c 	bl	8014940 <HAL_TIM_OC_ConfigChannel>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800b10e:	f7ff f907 	bl	800a320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b112:	2300      	movs	r3, #0
 800b114:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b116:	2300      	movs	r3, #0
 800b118:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b122:	2300      	movs	r3, #0
 800b124:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b12a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b12c:	2300      	movs	r3, #0
 800b12e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800b130:	463b      	mov	r3, r7
 800b132:	4619      	mov	r1, r3
 800b134:	4805      	ldr	r0, [pc, #20]	; (800b14c <MX_TIM17_Init+0xe4>)
 800b136:	f00a f9cd 	bl	80154d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800b140:	f7ff f8ee 	bl	800a320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800b144:	bf00      	nop
 800b146:	3748      	adds	r7, #72	; 0x48
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	20007a04 	.word	0x20007a04
 800b150:	40014800 	.word	0x40014800

0800b154 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b094      	sub	sp, #80	; 0x50
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b15c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	605a      	str	r2, [r3, #4]
 800b166:	609a      	str	r2, [r3, #8]
 800b168:	60da      	str	r2, [r3, #12]
 800b16a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a9a      	ldr	r2, [pc, #616]	; (800b3dc <HAL_TIM_Encoder_MspInit+0x288>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d12a      	bne.n	800b1cc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b176:	4b9a      	ldr	r3, [pc, #616]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b17a:	4a99      	ldr	r2, [pc, #612]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b17c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b180:	6613      	str	r3, [r2, #96]	; 0x60
 800b182:	4b97      	ldr	r3, [pc, #604]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b18a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b18e:	4b94      	ldr	r3, [pc, #592]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b192:	4a93      	ldr	r2, [pc, #588]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b194:	f043 0301 	orr.w	r3, r3, #1
 800b198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b19a:	4b91      	ldr	r3, [pc, #580]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b19c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b1a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b1c6:	f004 f98d 	bl	800f4e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800b1ca:	e103      	b.n	800b3d4 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM2)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d4:	d146      	bne.n	800b264 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b1d6:	4b82      	ldr	r3, [pc, #520]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1da:	4a81      	ldr	r2, [pc, #516]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1dc:	f043 0301 	orr.w	r3, r3, #1
 800b1e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b1e2:	4b7f      	ldr	r3, [pc, #508]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1ee:	4b7c      	ldr	r3, [pc, #496]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f2:	4a7b      	ldr	r2, [pc, #492]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1f4:	f043 0301 	orr.w	r3, r3, #1
 800b1f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1fa:	4b79      	ldr	r3, [pc, #484]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b206:	4b76      	ldr	r3, [pc, #472]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20a:	4a75      	ldr	r2, [pc, #468]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b20c:	f043 0302 	orr.w	r3, r3, #2
 800b210:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b212:	4b73      	ldr	r3, [pc, #460]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b21e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b222:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b224:	2302      	movs	r3, #2
 800b226:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b22c:	2300      	movs	r3, #0
 800b22e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b230:	2301      	movs	r3, #1
 800b232:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b234:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b238:	4619      	mov	r1, r3
 800b23a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b23e:	f004 f951 	bl	800f4e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b242:	2308      	movs	r3, #8
 800b244:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b246:	2302      	movs	r3, #2
 800b248:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b24e:	2300      	movs	r3, #0
 800b250:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b252:	2301      	movs	r3, #1
 800b254:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b25a:	4619      	mov	r1, r3
 800b25c:	4861      	ldr	r0, [pc, #388]	; (800b3e4 <HAL_TIM_Encoder_MspInit+0x290>)
 800b25e:	f004 f941 	bl	800f4e4 <HAL_GPIO_Init>
}
 800b262:	e0b7      	b.n	800b3d4 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM3)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a5f      	ldr	r2, [pc, #380]	; (800b3e8 <HAL_TIM_Encoder_MspInit+0x294>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d128      	bne.n	800b2c0 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b26e:	4b5c      	ldr	r3, [pc, #368]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b272:	4a5b      	ldr	r2, [pc, #364]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b274:	f043 0302 	orr.w	r3, r3, #2
 800b278:	6593      	str	r3, [r2, #88]	; 0x58
 800b27a:	4b59      	ldr	r3, [pc, #356]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	627b      	str	r3, [r7, #36]	; 0x24
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b286:	4b56      	ldr	r3, [pc, #344]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b28a:	4a55      	ldr	r2, [pc, #340]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b28c:	f043 0302 	orr.w	r3, r3, #2
 800b290:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b292:	4b53      	ldr	r3, [pc, #332]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	623b      	str	r3, [r7, #32]
 800b29c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b29e:	2330      	movs	r3, #48	; 0x30
 800b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	484a      	ldr	r0, [pc, #296]	; (800b3e4 <HAL_TIM_Encoder_MspInit+0x290>)
 800b2ba:	f004 f913 	bl	800f4e4 <HAL_GPIO_Init>
}
 800b2be:	e089      	b.n	800b3d4 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM4)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a49      	ldr	r2, [pc, #292]	; (800b3ec <HAL_TIM_Encoder_MspInit+0x298>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d128      	bne.n	800b31c <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b2ca:	4b45      	ldr	r3, [pc, #276]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ce:	4a44      	ldr	r2, [pc, #272]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2d0:	f043 0304 	orr.w	r3, r3, #4
 800b2d4:	6593      	str	r3, [r2, #88]	; 0x58
 800b2d6:	4b42      	ldr	r3, [pc, #264]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2da:	f003 0304 	and.w	r3, r3, #4
 800b2de:	61fb      	str	r3, [r7, #28]
 800b2e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2e2:	4b3f      	ldr	r3, [pc, #252]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e6:	4a3e      	ldr	r2, [pc, #248]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2e8:	f043 0302 	orr.w	r3, r3, #2
 800b2ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2ee:	4b3c      	ldr	r3, [pc, #240]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	61bb      	str	r3, [r7, #24]
 800b2f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b2fa:	23c0      	movs	r3, #192	; 0xc0
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2fe:	2302      	movs	r3, #2
 800b300:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b302:	2300      	movs	r3, #0
 800b304:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b306:	2300      	movs	r3, #0
 800b308:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b30a:	2302      	movs	r3, #2
 800b30c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b30e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b312:	4619      	mov	r1, r3
 800b314:	4833      	ldr	r0, [pc, #204]	; (800b3e4 <HAL_TIM_Encoder_MspInit+0x290>)
 800b316:	f004 f8e5 	bl	800f4e4 <HAL_GPIO_Init>
}
 800b31a:	e05b      	b.n	800b3d4 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM5)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a33      	ldr	r2, [pc, #204]	; (800b3f0 <HAL_TIM_Encoder_MspInit+0x29c>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d129      	bne.n	800b37a <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b326:	4b2e      	ldr	r3, [pc, #184]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32a:	4a2d      	ldr	r2, [pc, #180]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b32c:	f043 0308 	orr.w	r3, r3, #8
 800b330:	6593      	str	r3, [r2, #88]	; 0x58
 800b332:	4b2b      	ldr	r3, [pc, #172]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b33e:	4b28      	ldr	r3, [pc, #160]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b342:	4a27      	ldr	r2, [pc, #156]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b344:	f043 0301 	orr.w	r3, r3, #1
 800b348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b34a:	4b25      	ldr	r3, [pc, #148]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	613b      	str	r3, [r7, #16]
 800b354:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b356:	2303      	movs	r3, #3
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b35a:	2302      	movs	r3, #2
 800b35c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b35e:	2300      	movs	r3, #0
 800b360:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b362:	2300      	movs	r3, #0
 800b364:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b366:	2302      	movs	r3, #2
 800b368:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b36a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b36e:	4619      	mov	r1, r3
 800b370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b374:	f004 f8b6 	bl	800f4e4 <HAL_GPIO_Init>
}
 800b378:	e02c      	b.n	800b3d4 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM8)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a1d      	ldr	r2, [pc, #116]	; (800b3f4 <HAL_TIM_Encoder_MspInit+0x2a0>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d127      	bne.n	800b3d4 <HAL_TIM_Encoder_MspInit+0x280>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b384:	4b16      	ldr	r3, [pc, #88]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b388:	4a15      	ldr	r2, [pc, #84]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b38a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b38e:	6613      	str	r3, [r2, #96]	; 0x60
 800b390:	4b13      	ldr	r3, [pc, #76]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b39c:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3a0:	4a0f      	ldr	r2, [pc, #60]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b3a2:	f043 0304 	orr.w	r3, r3, #4
 800b3a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3a8:	4b0d      	ldr	r3, [pc, #52]	; (800b3e0 <HAL_TIM_Encoder_MspInit+0x28c>)
 800b3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	60bb      	str	r3, [r7, #8]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b3b4:	23c0      	movs	r3, #192	; 0xc0
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	480a      	ldr	r0, [pc, #40]	; (800b3f8 <HAL_TIM_Encoder_MspInit+0x2a4>)
 800b3d0:	f004 f888 	bl	800f4e4 <HAL_GPIO_Init>
}
 800b3d4:	bf00      	nop
 800b3d6:	3750      	adds	r7, #80	; 0x50
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	40012c00 	.word	0x40012c00
 800b3e0:	40021000 	.word	0x40021000
 800b3e4:	48000400 	.word	0x48000400
 800b3e8:	40000400 	.word	0x40000400
 800b3ec:	40000800 	.word	0x40000800
 800b3f0:	40000c00 	.word	0x40000c00
 800b3f4:	40013400 	.word	0x40013400
 800b3f8:	48000800 	.word	0x48000800

0800b3fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a1c      	ldr	r2, [pc, #112]	; (800b47c <HAL_TIM_Base_MspInit+0x80>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d10c      	bne.n	800b428 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b40e:	4b1c      	ldr	r3, [pc, #112]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b412:	4a1b      	ldr	r2, [pc, #108]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b414:	f043 0310 	orr.w	r3, r3, #16
 800b418:	6593      	str	r3, [r2, #88]	; 0x58
 800b41a:	4b19      	ldr	r3, [pc, #100]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b41e:	f003 0310 	and.w	r3, r3, #16
 800b422:	617b      	str	r3, [r7, #20]
 800b424:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800b426:	e022      	b.n	800b46e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a15      	ldr	r2, [pc, #84]	; (800b484 <HAL_TIM_Base_MspInit+0x88>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d10c      	bne.n	800b44c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800b432:	4b13      	ldr	r3, [pc, #76]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b436:	4a12      	ldr	r2, [pc, #72]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b43c:	6613      	str	r3, [r2, #96]	; 0x60
 800b43e:	4b10      	ldr	r3, [pc, #64]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b446:	613b      	str	r3, [r7, #16]
 800b448:	693b      	ldr	r3, [r7, #16]
}
 800b44a:	e010      	b.n	800b46e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM17)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a0d      	ldr	r2, [pc, #52]	; (800b488 <HAL_TIM_Base_MspInit+0x8c>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d10b      	bne.n	800b46e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800b456:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b45a:	4a09      	ldr	r2, [pc, #36]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b45c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b460:	6613      	str	r3, [r2, #96]	; 0x60
 800b462:	4b07      	ldr	r3, [pc, #28]	; (800b480 <HAL_TIM_Base_MspInit+0x84>)
 800b464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
}
 800b46e:	bf00      	nop
 800b470:	371c      	adds	r7, #28
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	40001000 	.word	0x40001000
 800b480:	40021000 	.word	0x40021000
 800b484:	40014400 	.word	0x40014400
 800b488:	40014800 	.word	0x40014800

0800b48c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM15)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a0a      	ldr	r2, [pc, #40]	; (800b4c4 <HAL_TIM_OC_MspInit+0x38>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d10b      	bne.n	800b4b6 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b49e:	4b0a      	ldr	r3, [pc, #40]	; (800b4c8 <HAL_TIM_OC_MspInit+0x3c>)
 800b4a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4a2:	4a09      	ldr	r2, [pc, #36]	; (800b4c8 <HAL_TIM_OC_MspInit+0x3c>)
 800b4a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4a8:	6613      	str	r3, [r2, #96]	; 0x60
 800b4aa:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <HAL_TIM_OC_MspInit+0x3c>)
 800b4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	40014000 	.word	0x40014000
 800b4c8:	40021000 	.word	0x40021000

0800b4cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4d4:	f107 030c 	add.w	r3, r7, #12
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	605a      	str	r2, [r3, #4]
 800b4de:	609a      	str	r2, [r3, #8]
 800b4e0:	60da      	str	r2, [r3, #12]
 800b4e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a11      	ldr	r2, [pc, #68]	; (800b530 <HAL_TIM_MspPostInit+0x64>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d11c      	bne.n	800b528 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4ee:	4b11      	ldr	r3, [pc, #68]	; (800b534 <HAL_TIM_MspPostInit+0x68>)
 800b4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f2:	4a10      	ldr	r2, [pc, #64]	; (800b534 <HAL_TIM_MspPostInit+0x68>)
 800b4f4:	f043 0301 	orr.w	r3, r3, #1
 800b4f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4fa:	4b0e      	ldr	r3, [pc, #56]	; (800b534 <HAL_TIM_MspPostInit+0x68>)
 800b4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4fe:	f003 0301 	and.w	r3, r3, #1
 800b502:	60bb      	str	r3, [r7, #8]
 800b504:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b506:	2340      	movs	r3, #64	; 0x40
 800b508:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b50a:	2302      	movs	r3, #2
 800b50c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b512:	2300      	movs	r3, #0
 800b514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800b516:	230e      	movs	r3, #14
 800b518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b51a:	f107 030c 	add.w	r3, r7, #12
 800b51e:	4619      	mov	r1, r3
 800b520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b524:	f003 ffde 	bl	800f4e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800b528:	bf00      	nop
 800b52a:	3720      	adds	r7, #32
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	40014400 	.word	0x40014400
 800b534:	40021000 	.word	0x40021000

0800b538 <TDA7719_SetVolume_Master>:
// Global functions for encoders
//--------------------------------------------------------------

// Volume master takes into account attenuator of each channel and front and back volume aswell
void TDA7719_SetVolume_Master(const int16_t VolFrontLeft, const int16_t VolFrontRight, const int16_t VolBackLeft, const int16_t VolBackRight)
    {
 800b538:	b590      	push	{r4, r7, lr}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	4608      	mov	r0, r1
 800b542:	4611      	mov	r1, r2
 800b544:	461a      	mov	r2, r3
 800b546:	4623      	mov	r3, r4
 800b548:	80fb      	strh	r3, [r7, #6]
 800b54a:	4603      	mov	r3, r0
 800b54c:	80bb      	strh	r3, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	807b      	strh	r3, [r7, #2]
 800b552:	4613      	mov	r3, r2
 800b554:	803b      	strh	r3, [r7, #0]
	//write to diffrent TDA7719 register depending on value
	if ((encoderVolFront.volumeMaster <= 94) && (encoderVolFront.volumeMaster >= 80))
 800b556:	4b1e      	ldr	r3, [pc, #120]	; (800b5d0 <TDA7719_SetVolume_Master+0x98>)
 800b558:	f993 3000 	ldrsb.w	r3, [r3]
 800b55c:	2b5e      	cmp	r3, #94	; 0x5e
 800b55e:	dc11      	bgt.n	800b584 <TDA7719_SetVolume_Master+0x4c>
 800b560:	4b1b      	ldr	r3, [pc, #108]	; (800b5d0 <TDA7719_SetVolume_Master+0x98>)
 800b562:	f993 3000 	ldrsb.w	r3, [r3]
 800b566:	2b4f      	cmp	r3, #79	; 0x4f
 800b568:	dd0c      	ble.n	800b584 <TDA7719_SetVolume_Master+0x4c>
	    {
		TDA7719_SetVolume((encoderVolFront.volumeMaster) - 79, 0, 0);
 800b56a:	4b19      	ldr	r3, [pc, #100]	; (800b5d0 <TDA7719_SetVolume_Master+0x98>)
 800b56c:	f993 3000 	ldrsb.w	r3, [r3]
 800b570:	b2db      	uxtb	r3, r3
 800b572:	3b4f      	subs	r3, #79	; 0x4f
 800b574:	b2db      	uxtb	r3, r3
 800b576:	b25b      	sxtb	r3, r3
 800b578:	2200      	movs	r2, #0
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fc fdaf 	bl	80080e0 <TDA7719_SetVolume>
		TDA7719_SetVolume_LeftFront ((VolFrontLeft) , 0);
		TDA7719_SetVolume_RightFront((VolFrontRight), 0);
		TDA7719_SetVolume_LeftRear  ((VolBackLeft)  , 0);
		TDA7719_SetVolume_RightRear ((VolBackRight) , 0);
	    }
    }
 800b582:	e021      	b.n	800b5c8 <TDA7719_SetVolume_Master+0x90>
	else if ((encoderVolFront.volumeMaster >= 0 ) && (encoderVolFront.volumeMaster <= 79))
 800b584:	4b12      	ldr	r3, [pc, #72]	; (800b5d0 <TDA7719_SetVolume_Master+0x98>)
 800b586:	f993 3000 	ldrsb.w	r3, [r3]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	db1c      	blt.n	800b5c8 <TDA7719_SetVolume_Master+0x90>
 800b58e:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <TDA7719_SetVolume_Master+0x98>)
 800b590:	f993 3000 	ldrsb.w	r3, [r3]
 800b594:	2b4f      	cmp	r3, #79	; 0x4f
 800b596:	dc17      	bgt.n	800b5c8 <TDA7719_SetVolume_Master+0x90>
		TDA7719_SetVolume_LeftFront ((VolFrontLeft) , 0);
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	b25b      	sxtb	r3, r3
 800b59c:	2100      	movs	r1, #0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fd f93a 	bl	8008818 <TDA7719_SetVolume_LeftFront>
		TDA7719_SetVolume_RightFront((VolFrontRight), 0);
 800b5a4:	88bb      	ldrh	r3, [r7, #4]
 800b5a6:	b25b      	sxtb	r3, r3
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fd f96e 	bl	800888c <TDA7719_SetVolume_RightFront>
		TDA7719_SetVolume_LeftRear  ((VolBackLeft)  , 0);
 800b5b0:	887b      	ldrh	r3, [r7, #2]
 800b5b2:	b25b      	sxtb	r3, r3
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fd f9a2 	bl	8008900 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear ((VolBackRight) , 0);
 800b5bc:	883b      	ldrh	r3, [r7, #0]
 800b5be:	b25b      	sxtb	r3, r3
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fd f9d6 	bl	8008974 <TDA7719_SetVolume_RightRear>
    }
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd90      	pop	{r4, r7, pc}
 800b5d0:	20000554 	.word	0x20000554

0800b5d4 <TDA7719_SetVolumeFront_LeftRight>:

// Sets volume just for both front channels
void TDA7719_SetVolumeFront_LeftRight(const int16_t VolFrontLeft, const int16_t VolFrontRight)
    {
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	460a      	mov	r2, r1
 800b5de:	80fb      	strh	r3, [r7, #6]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	80bb      	strh	r3, [r7, #4]

	if (VolFrontLeft <= -79)
 800b5e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5e8:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b5ec:	da04      	bge.n	800b5f8 <TDA7719_SetVolumeFront_LeftRight+0x24>
		TDA7719_SetVolume_LeftFront(VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	2060      	movs	r0, #96	; 0x60
 800b5f2:	f7fd f911 	bl	8008818 <TDA7719_SetVolume_LeftFront>
 800b5f6:	e005      	b.n	800b604 <TDA7719_SetVolumeFront_LeftRight+0x30>
	else 	TDA7719_SetVolume_LeftFront(VolFrontLeft, 0);
 800b5f8:	88fb      	ldrh	r3, [r7, #6]
 800b5fa:	b25b      	sxtb	r3, r3
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fd f90a 	bl	8008818 <TDA7719_SetVolume_LeftFront>

	if(VolFrontRight <= -79)
 800b604:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b608:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b60c:	da04      	bge.n	800b618 <TDA7719_SetVolumeFront_LeftRight+0x44>
		TDA7719_SetVolume_RightFront(VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b60e:	2100      	movs	r1, #0
 800b610:	2060      	movs	r0, #96	; 0x60
 800b612:	f7fd f93b 	bl	800888c <TDA7719_SetVolume_RightFront>
	else 	TDA7719_SetVolume_RightFront(VolFrontRight, 0);

    }
 800b616:	e005      	b.n	800b624 <TDA7719_SetVolumeFront_LeftRight+0x50>
	else 	TDA7719_SetVolume_RightFront(VolFrontRight, 0);
 800b618:	88bb      	ldrh	r3, [r7, #4]
 800b61a:	b25b      	sxtb	r3, r3
 800b61c:	2100      	movs	r1, #0
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fd f934 	bl	800888c <TDA7719_SetVolume_RightFront>
    }
 800b624:	bf00      	nop
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <Check_Volume_Range_Front>:

// Checks if given value (volume) is given range
// It also increments or decrements value depending on CNT register upgraded by volume front encoder
void Check_Volume_Range_Front(volatile int8_t *const volume, const uint8_t maxVolume)
    {
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff1;
	static uint16_t LastTimerCounter1;

	TimerDiff1 = htim2.Instance->CNT - LastTimerCounter1;
 800b638:	4b25      	ldr	r3, [pc, #148]	; (800b6d0 <Check_Volume_Range_Front+0xa4>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	b29a      	uxth	r2, r3
 800b640:	4b24      	ldr	r3, [pc, #144]	; (800b6d4 <Check_Volume_Range_Front+0xa8>)
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	b29b      	uxth	r3, r3
 800b648:	b21a      	sxth	r2, r3
 800b64a:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <Check_Volume_Range_Front+0xac>)
 800b64c:	801a      	strh	r2, [r3, #0]
	if(TimerDiff1 >= 4 || TimerDiff1 <= -4)
 800b64e:	4b22      	ldr	r3, [pc, #136]	; (800b6d8 <Check_Volume_Range_Front+0xac>)
 800b650:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b654:	2b03      	cmp	r3, #3
 800b656:	dc05      	bgt.n	800b664 <Check_Volume_Range_Front+0x38>
 800b658:	4b1f      	ldr	r3, [pc, #124]	; (800b6d8 <Check_Volume_Range_Front+0xac>)
 800b65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b65e:	f113 0f03 	cmn.w	r3, #3
 800b662:	da2f      	bge.n	800b6c4 <Check_Volume_Range_Front+0x98>
	{
	    TimerDiff1 /= 4;
 800b664:	4b1c      	ldr	r3, [pc, #112]	; (800b6d8 <Check_Volume_Range_Front+0xac>)
 800b666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	da00      	bge.n	800b670 <Check_Volume_Range_Front+0x44>
 800b66e:	3303      	adds	r3, #3
 800b670:	109b      	asrs	r3, r3, #2
 800b672:	b21a      	sxth	r2, r3
 800b674:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <Check_Volume_Range_Front+0xac>)
 800b676:	801a      	strh	r2, [r3, #0]
	    (*volume) += (int8_t) TimerDiff1;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	b25b      	sxtb	r3, r3
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <Check_Volume_Range_Front+0xac>)
 800b682:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b686:	b2db      	uxtb	r3, r3
 800b688:	4413      	add	r3, r2
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	b25a      	sxtb	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	701a      	strb	r2, [r3, #0]
	    if((*volume) > maxVolume) (*volume) = maxVolume;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	b25b      	sxtb	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	78fb      	ldrb	r3, [r7, #3]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	dd03      	ble.n	800b6a8 <Check_Volume_Range_Front+0x7c>
 800b6a0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	701a      	strb	r2, [r3, #0]
	    if((*volume) < 0)  (*volume) = 0;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	b25b      	sxtb	r3, r3
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	da02      	bge.n	800b6b8 <Check_Volume_Range_Front+0x8c>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter1 = htim2.Instance->CNT;
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <Check_Volume_Range_Front+0xa4>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <Check_Volume_Range_Front+0xa8>)
 800b6c2:	801a      	strh	r2, [r3, #0]
	}
    }
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	20007b80 	.word	0x20007b80
 800b6d4:	2000020a 	.word	0x2000020a
 800b6d8:	2000020c 	.word	0x2000020c

0800b6dc <TDA7719_SetVolumeBack_LeftRight>:

// Sets volume just for both back channels
void TDA7719_SetVolumeBack_LeftRight(const int16_t VolBackLeft, const int16_t VolBackRight)
    {
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	460a      	mov	r2, r1
 800b6e6:	80fb      	strh	r3, [r7, #6]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	80bb      	strh	r3, [r7, #4]
	if (VolBackLeft <= -79)
 800b6ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6f0:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b6f4:	da04      	bge.n	800b700 <TDA7719_SetVolumeBack_LeftRight+0x24>
		TDA7719_SetVolume_LeftRear (VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	2060      	movs	r0, #96	; 0x60
 800b6fa:	f7fd f901 	bl	8008900 <TDA7719_SetVolume_LeftRear>
 800b6fe:	e005      	b.n	800b70c <TDA7719_SetVolumeBack_LeftRight+0x30>
	else 	TDA7719_SetVolume_LeftRear (VolBackLeft, 0);
 800b700:	88fb      	ldrh	r3, [r7, #6]
 800b702:	b25b      	sxtb	r3, r3
 800b704:	2100      	movs	r1, #0
 800b706:	4618      	mov	r0, r3
 800b708:	f7fd f8fa 	bl	8008900 <TDA7719_SetVolume_LeftRear>

	if(VolBackRight <= -79)
 800b70c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b710:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b714:	da04      	bge.n	800b720 <TDA7719_SetVolumeBack_LeftRight+0x44>
		TDA7719_SetVolume_RightRear(VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b716:	2100      	movs	r1, #0
 800b718:	2060      	movs	r0, #96	; 0x60
 800b71a:	f7fd f92b 	bl	8008974 <TDA7719_SetVolume_RightRear>
	else 	TDA7719_SetVolume_RightRear(VolBackRight, 0);

    }
 800b71e:	e005      	b.n	800b72c <TDA7719_SetVolumeBack_LeftRight+0x50>
	else 	TDA7719_SetVolume_RightRear(VolBackRight, 0);
 800b720:	88bb      	ldrh	r3, [r7, #4]
 800b722:	b25b      	sxtb	r3, r3
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f7fd f924 	bl	8008974 <TDA7719_SetVolume_RightRear>
    }
 800b72c:	bf00      	nop
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <Check_Volume_Range_Back>:

// Checks if given value (volume) is given range
// It also increments or decrements value depending on CNT register upgraded by volume back encoder
void Check_Volume_Range_Back(volatile int8_t *const volume, const uint8_t maxVolume)
    {
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff2;
	static uint16_t LastTimerCounter2;

	TimerDiff2 = htim8.Instance->CNT - LastTimerCounter2;
 800b740:	4b25      	ldr	r3, [pc, #148]	; (800b7d8 <Check_Volume_Range_Back+0xa4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	b29a      	uxth	r2, r3
 800b748:	4b24      	ldr	r3, [pc, #144]	; (800b7dc <Check_Volume_Range_Back+0xa8>)
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	b29b      	uxth	r3, r3
 800b750:	b21a      	sxth	r2, r3
 800b752:	4b23      	ldr	r3, [pc, #140]	; (800b7e0 <Check_Volume_Range_Back+0xac>)
 800b754:	801a      	strh	r2, [r3, #0]
	if(TimerDiff2 >= 4 || TimerDiff2 <= -4)
 800b756:	4b22      	ldr	r3, [pc, #136]	; (800b7e0 <Check_Volume_Range_Back+0xac>)
 800b758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	dc05      	bgt.n	800b76c <Check_Volume_Range_Back+0x38>
 800b760:	4b1f      	ldr	r3, [pc, #124]	; (800b7e0 <Check_Volume_Range_Back+0xac>)
 800b762:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b766:	f113 0f03 	cmn.w	r3, #3
 800b76a:	da2f      	bge.n	800b7cc <Check_Volume_Range_Back+0x98>
	{
	    TimerDiff2 /= 4;
 800b76c:	4b1c      	ldr	r3, [pc, #112]	; (800b7e0 <Check_Volume_Range_Back+0xac>)
 800b76e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b772:	2b00      	cmp	r3, #0
 800b774:	da00      	bge.n	800b778 <Check_Volume_Range_Back+0x44>
 800b776:	3303      	adds	r3, #3
 800b778:	109b      	asrs	r3, r3, #2
 800b77a:	b21a      	sxth	r2, r3
 800b77c:	4b18      	ldr	r3, [pc, #96]	; (800b7e0 <Check_Volume_Range_Back+0xac>)
 800b77e:	801a      	strh	r2, [r3, #0]
	    (*volume) += (int8_t) TimerDiff2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	b25b      	sxtb	r3, r3
 800b786:	b2da      	uxtb	r2, r3
 800b788:	4b15      	ldr	r3, [pc, #84]	; (800b7e0 <Check_Volume_Range_Back+0xac>)
 800b78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	4413      	add	r3, r2
 800b792:	b2db      	uxtb	r3, r3
 800b794:	b25a      	sxtb	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	701a      	strb	r2, [r3, #0]
	    if((*volume) > maxVolume) (*volume) = maxVolume;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	b25b      	sxtb	r3, r3
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	78fb      	ldrb	r3, [r7, #3]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	dd03      	ble.n	800b7b0 <Check_Volume_Range_Back+0x7c>
 800b7a8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	701a      	strb	r2, [r3, #0]
	    if((*volume) < 0)  (*volume) = 0;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	b25b      	sxtb	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	da02      	bge.n	800b7c0 <Check_Volume_Range_Back+0x8c>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter2 = htim8.Instance->CNT;
 800b7c0:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <Check_Volume_Range_Back+0xa4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	4b04      	ldr	r3, [pc, #16]	; (800b7dc <Check_Volume_Range_Back+0xa8>)
 800b7ca:	801a      	strh	r2, [r3, #0]
	}
    }
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	20007920 	.word	0x20007920
 800b7dc:	2000020e 	.word	0x2000020e
 800b7e0:	20000210 	.word	0x20000210

0800b7e4 <Check_Loudness_Param_Range>:

// Checks if given value (loudness attenuator, center freqency, soft step, high boost) is given range
// It also increments or decrements value depending on CNT register upgraded by loudness encoder
void Check_Loudness_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim1.Instance->CNT - LastTimerCounter3;
 800b7f0:	4b25      	ldr	r3, [pc, #148]	; (800b888 <Check_Loudness_Param_Range+0xa4>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	4b24      	ldr	r3, [pc, #144]	; (800b88c <Check_Loudness_Param_Range+0xa8>)
 800b7fa:	881b      	ldrh	r3, [r3, #0]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	b21a      	sxth	r2, r3
 800b802:	4b23      	ldr	r3, [pc, #140]	; (800b890 <Check_Loudness_Param_Range+0xac>)
 800b804:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800b806:	4b22      	ldr	r3, [pc, #136]	; (800b890 <Check_Loudness_Param_Range+0xac>)
 800b808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b80c:	2b03      	cmp	r3, #3
 800b80e:	dc05      	bgt.n	800b81c <Check_Loudness_Param_Range+0x38>
 800b810:	4b1f      	ldr	r3, [pc, #124]	; (800b890 <Check_Loudness_Param_Range+0xac>)
 800b812:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b816:	f113 0f03 	cmn.w	r3, #3
 800b81a:	da2f      	bge.n	800b87c <Check_Loudness_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800b81c:	4b1c      	ldr	r3, [pc, #112]	; (800b890 <Check_Loudness_Param_Range+0xac>)
 800b81e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b822:	2b00      	cmp	r3, #0
 800b824:	da00      	bge.n	800b828 <Check_Loudness_Param_Range+0x44>
 800b826:	3303      	adds	r3, #3
 800b828:	109b      	asrs	r3, r3, #2
 800b82a:	b21a      	sxth	r2, r3
 800b82c:	4b18      	ldr	r3, [pc, #96]	; (800b890 <Check_Loudness_Param_Range+0xac>)
 800b82e:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	b25b      	sxtb	r3, r3
 800b836:	b2da      	uxtb	r2, r3
 800b838:	4b15      	ldr	r3, [pc, #84]	; (800b890 <Check_Loudness_Param_Range+0xac>)
 800b83a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	4413      	add	r3, r2
 800b842:	b2db      	uxtb	r3, r3
 800b844:	b25a      	sxtb	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	b25b      	sxtb	r3, r3
 800b850:	461a      	mov	r2, r3
 800b852:	78fb      	ldrb	r3, [r7, #3]
 800b854:	429a      	cmp	r2, r3
 800b856:	db03      	blt.n	800b860 <Check_Loudness_Param_Range+0x7c>
 800b858:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0)       (*gain) = 0;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	b25b      	sxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	dc02      	bgt.n	800b870 <Check_Loudness_Param_Range+0x8c>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim1.Instance->CNT;
 800b870:	4b05      	ldr	r3, [pc, #20]	; (800b888 <Check_Loudness_Param_Range+0xa4>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b876:	b29a      	uxth	r2, r3
 800b878:	4b04      	ldr	r3, [pc, #16]	; (800b88c <Check_Loudness_Param_Range+0xa8>)
 800b87a:	801a      	strh	r2, [r3, #0]
	}
    }
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	20007b34 	.word	0x20007b34
 800b88c:	20000212 	.word	0x20000212
 800b890:	20000214 	.word	0x20000214

0800b894 <Check_Bass_Param_Range>:

// Checks if given value (loudness, Bass Q Factor, soft step) is given range
// It also increments or decrements value depending on CNT register upgraded by bass encoder
void Check_Bass_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim1.Instance->CNT - LastTimerCounter3;
 800b8a0:	4b25      	ldr	r3, [pc, #148]	; (800b938 <Check_Bass_Param_Range+0xa4>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	4b24      	ldr	r3, [pc, #144]	; (800b93c <Check_Bass_Param_Range+0xa8>)
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	b21a      	sxth	r2, r3
 800b8b2:	4b23      	ldr	r3, [pc, #140]	; (800b940 <Check_Bass_Param_Range+0xac>)
 800b8b4:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800b8b6:	4b22      	ldr	r3, [pc, #136]	; (800b940 <Check_Bass_Param_Range+0xac>)
 800b8b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	dc05      	bgt.n	800b8cc <Check_Bass_Param_Range+0x38>
 800b8c0:	4b1f      	ldr	r3, [pc, #124]	; (800b940 <Check_Bass_Param_Range+0xac>)
 800b8c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8c6:	f113 0f03 	cmn.w	r3, #3
 800b8ca:	da2f      	bge.n	800b92c <Check_Bass_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800b8cc:	4b1c      	ldr	r3, [pc, #112]	; (800b940 <Check_Bass_Param_Range+0xac>)
 800b8ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	da00      	bge.n	800b8d8 <Check_Bass_Param_Range+0x44>
 800b8d6:	3303      	adds	r3, #3
 800b8d8:	109b      	asrs	r3, r3, #2
 800b8da:	b21a      	sxth	r2, r3
 800b8dc:	4b18      	ldr	r3, [pc, #96]	; (800b940 <Check_Bass_Param_Range+0xac>)
 800b8de:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	b25b      	sxtb	r3, r3
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	4b15      	ldr	r3, [pc, #84]	; (800b940 <Check_Bass_Param_Range+0xac>)
 800b8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8ee:	b2db      	uxtb	r3, r3
 800b8f0:	4413      	add	r3, r2
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	b25a      	sxtb	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	b25b      	sxtb	r3, r3
 800b900:	461a      	mov	r2, r3
 800b902:	78fb      	ldrb	r3, [r7, #3]
 800b904:	429a      	cmp	r2, r3
 800b906:	db03      	blt.n	800b910 <Check_Bass_Param_Range+0x7c>
 800b908:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0) 	   (*gain) = 0;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	b25b      	sxtb	r3, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	dc02      	bgt.n	800b920 <Check_Bass_Param_Range+0x8c>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim1.Instance->CNT;
 800b920:	4b05      	ldr	r3, [pc, #20]	; (800b938 <Check_Bass_Param_Range+0xa4>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b926:	b29a      	uxth	r2, r3
 800b928:	4b04      	ldr	r3, [pc, #16]	; (800b93c <Check_Bass_Param_Range+0xa8>)
 800b92a:	801a      	strh	r2, [r3, #0]
	}
    }
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	20007b34 	.word	0x20007b34
 800b93c:	20000216 	.word	0x20000216
 800b940:	20000218 	.word	0x20000218

0800b944 <Check_Middle_Param_Range>:

// Checks if given value (loudness, middle Q Factor, soft step) is given range
// It also increments or decrements value depending on CNT register upgraded by middle encoder
void Check_Middle_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	460b      	mov	r3, r1
 800b94e:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim3.Instance->CNT - LastTimerCounter3;
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <Check_Middle_Param_Range+0xa4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b956:	b29a      	uxth	r2, r3
 800b958:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <Check_Middle_Param_Range+0xa8>)
 800b95a:	881b      	ldrh	r3, [r3, #0]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	b29b      	uxth	r3, r3
 800b960:	b21a      	sxth	r2, r3
 800b962:	4b23      	ldr	r3, [pc, #140]	; (800b9f0 <Check_Middle_Param_Range+0xac>)
 800b964:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800b966:	4b22      	ldr	r3, [pc, #136]	; (800b9f0 <Check_Middle_Param_Range+0xac>)
 800b968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	dc05      	bgt.n	800b97c <Check_Middle_Param_Range+0x38>
 800b970:	4b1f      	ldr	r3, [pc, #124]	; (800b9f0 <Check_Middle_Param_Range+0xac>)
 800b972:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b976:	f113 0f03 	cmn.w	r3, #3
 800b97a:	da2f      	bge.n	800b9dc <Check_Middle_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800b97c:	4b1c      	ldr	r3, [pc, #112]	; (800b9f0 <Check_Middle_Param_Range+0xac>)
 800b97e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b982:	2b00      	cmp	r3, #0
 800b984:	da00      	bge.n	800b988 <Check_Middle_Param_Range+0x44>
 800b986:	3303      	adds	r3, #3
 800b988:	109b      	asrs	r3, r3, #2
 800b98a:	b21a      	sxth	r2, r3
 800b98c:	4b18      	ldr	r3, [pc, #96]	; (800b9f0 <Check_Middle_Param_Range+0xac>)
 800b98e:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	b25b      	sxtb	r3, r3
 800b996:	b2da      	uxtb	r2, r3
 800b998:	4b15      	ldr	r3, [pc, #84]	; (800b9f0 <Check_Middle_Param_Range+0xac>)
 800b99a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	4413      	add	r3, r2
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	b25a      	sxtb	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	db03      	blt.n	800b9c0 <Check_Middle_Param_Range+0x7c>
 800b9b8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0)  	   (*gain) = 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	b25b      	sxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dc02      	bgt.n	800b9d0 <Check_Middle_Param_Range+0x8c>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim3.Instance->CNT;
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <Check_Middle_Param_Range+0xa4>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <Check_Middle_Param_Range+0xa8>)
 800b9da:	801a      	strh	r2, [r3, #0]
	}
    }
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	20007a9c 	.word	0x20007a9c
 800b9ec:	2000021a 	.word	0x2000021a
 800b9f0:	2000021c 	.word	0x2000021c

0800b9f4 <Check_Treble_Param_Range>:

// Checks if given value (loudness, treble Q Factor, soft step) is given range
// It also increments or decrements value depending on CNT register upgraded by treble encoder
void Check_Treble_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim5.Instance->CNT - LastTimerCounter3;
 800ba00:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <Check_Treble_Param_Range+0xa4>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	4b24      	ldr	r3, [pc, #144]	; (800ba9c <Check_Treble_Param_Range+0xa8>)
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	b21a      	sxth	r2, r3
 800ba12:	4b23      	ldr	r3, [pc, #140]	; (800baa0 <Check_Treble_Param_Range+0xac>)
 800ba14:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800ba16:	4b22      	ldr	r3, [pc, #136]	; (800baa0 <Check_Treble_Param_Range+0xac>)
 800ba18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	dc05      	bgt.n	800ba2c <Check_Treble_Param_Range+0x38>
 800ba20:	4b1f      	ldr	r3, [pc, #124]	; (800baa0 <Check_Treble_Param_Range+0xac>)
 800ba22:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba26:	f113 0f03 	cmn.w	r3, #3
 800ba2a:	da2f      	bge.n	800ba8c <Check_Treble_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800ba2c:	4b1c      	ldr	r3, [pc, #112]	; (800baa0 <Check_Treble_Param_Range+0xac>)
 800ba2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da00      	bge.n	800ba38 <Check_Treble_Param_Range+0x44>
 800ba36:	3303      	adds	r3, #3
 800ba38:	109b      	asrs	r3, r3, #2
 800ba3a:	b21a      	sxth	r2, r3
 800ba3c:	4b18      	ldr	r3, [pc, #96]	; (800baa0 <Check_Treble_Param_Range+0xac>)
 800ba3e:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	b25b      	sxtb	r3, r3
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	4b15      	ldr	r3, [pc, #84]	; (800baa0 <Check_Treble_Param_Range+0xac>)
 800ba4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	4413      	add	r3, r2
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	b25a      	sxtb	r2, r3
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b25b      	sxtb	r3, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	78fb      	ldrb	r3, [r7, #3]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	db03      	blt.n	800ba70 <Check_Treble_Param_Range+0x7c>
 800ba68:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0)	   (*gain) = 0;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	b25b      	sxtb	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	dc02      	bgt.n	800ba80 <Check_Treble_Param_Range+0x8c>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim5.Instance->CNT;
 800ba80:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <Check_Treble_Param_Range+0xa4>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <Check_Treble_Param_Range+0xa8>)
 800ba8a:	801a      	strh	r2, [r3, #0]
	}
    }
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	20007a50 	.word	0x20007a50
 800ba9c:	2000021e 	.word	0x2000021e
 800baa0:	20000220 	.word	0x20000220

0800baa4 <any_buttons_pressed_routine>:

//
void any_buttons_pressed_routine(void)
    {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
	//if(SysTick_CTRL->ENABLE == true)
	if (is_display_on_standby_flag == true)
 800baa8:	4b6f      	ldr	r3, [pc, #444]	; (800bc68 <any_buttons_pressed_routine+0x1c4>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d013      	beq.n	800bada <any_buttons_pressed_routine+0x36>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800bab2:	2200      	movs	r2, #0
 800bab4:	496d      	ldr	r1, [pc, #436]	; (800bc6c <any_buttons_pressed_routine+0x1c8>)
 800bab6:	486e      	ldr	r0, [pc, #440]	; (800bc70 <any_buttons_pressed_routine+0x1cc>)
 800bab8:	f006 ff02 	bl	80128c0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800babc:	2200      	movs	r2, #0
 800babe:	496d      	ldr	r1, [pc, #436]	; (800bc74 <any_buttons_pressed_routine+0x1d0>)
 800bac0:	486b      	ldr	r0, [pc, #428]	; (800bc70 <any_buttons_pressed_routine+0x1cc>)
 800bac2:	f006 ffe7 	bl	8012a94 <HAL_RTC_GetDate>
		SSD1322_API_sleep_off();
 800bac6:	f7f6 fff8 	bl	8002aba <SSD1322_API_sleep_off>
		saved_seconds = sTime.Seconds;
 800baca:	4b68      	ldr	r3, [pc, #416]	; (800bc6c <any_buttons_pressed_routine+0x1c8>)
 800bacc:	789a      	ldrb	r2, [r3, #2]
 800bace:	4b6a      	ldr	r3, [pc, #424]	; (800bc78 <any_buttons_pressed_routine+0x1d4>)
 800bad0:	701a      	strb	r2, [r3, #0]
		saved_minutes = sTime.Minutes;
 800bad2:	4b66      	ldr	r3, [pc, #408]	; (800bc6c <any_buttons_pressed_routine+0x1c8>)
 800bad4:	785a      	ldrb	r2, [r3, #1]
 800bad6:	4b69      	ldr	r3, [pc, #420]	; (800bc7c <any_buttons_pressed_routine+0x1d8>)
 800bad8:	701a      	strb	r2, [r3, #0]
	    }

	button_debou_state = true;
 800bada:	4b69      	ldr	r3, [pc, #420]	; (800bc80 <any_buttons_pressed_routine+0x1dc>)
 800badc:	2201      	movs	r2, #1
 800bade:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Stop_IT(&htim17, TIM_CHANNEL_1);
 800bae0:	2100      	movs	r1, #0
 800bae2:	4868      	ldr	r0, [pc, #416]	; (800bc84 <any_buttons_pressed_routine+0x1e0>)
 800bae4:	f008 f9a8 	bl	8013e38 <HAL_TIM_OC_Stop_IT>
//		HAL_TIM_OC_Start_IT(&htim16, TIM_CHANNEL_1);
	switch (gGPIO_Pin)
 800bae8:	4b67      	ldr	r3, [pc, #412]	; (800bc88 <any_buttons_pressed_routine+0x1e4>)
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baf0:	f000 8099 	beq.w	800bc26 <any_buttons_pressed_routine+0x182>
 800baf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baf8:	f300 80b4 	bgt.w	800bc64 <any_buttons_pressed_routine+0x1c0>
 800bafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb00:	f000 8086 	beq.w	800bc10 <any_buttons_pressed_routine+0x16c>
 800bb04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb08:	f300 80ac 	bgt.w	800bc64 <any_buttons_pressed_routine+0x1c0>
 800bb0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb10:	d054      	beq.n	800bbbc <any_buttons_pressed_routine+0x118>
 800bb12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb16:	f300 80a5 	bgt.w	800bc64 <any_buttons_pressed_routine+0x1c0>
 800bb1a:	2b20      	cmp	r3, #32
 800bb1c:	dc4a      	bgt.n	800bbb4 <any_buttons_pressed_routine+0x110>
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f340 80a0 	ble.w	800bc64 <any_buttons_pressed_routine+0x1c0>
 800bb24:	3b01      	subs	r3, #1
 800bb26:	2b1f      	cmp	r3, #31
 800bb28:	f200 809c 	bhi.w	800bc64 <any_buttons_pressed_routine+0x1c0>
 800bb2c:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <any_buttons_pressed_routine+0x90>)
 800bb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb32:	bf00      	nop
 800bb34:	0800bbf1 	.word	0x0800bbf1
 800bb38:	0800bc05 	.word	0x0800bc05
 800bb3c:	0800bc65 	.word	0x0800bc65
 800bb40:	0800bc0b 	.word	0x0800bc0b
 800bb44:	0800bc65 	.word	0x0800bc65
 800bb48:	0800bc65 	.word	0x0800bc65
 800bb4c:	0800bc65 	.word	0x0800bc65
 800bb50:	0800bc65 	.word	0x0800bc65
 800bb54:	0800bc65 	.word	0x0800bc65
 800bb58:	0800bc65 	.word	0x0800bc65
 800bb5c:	0800bc65 	.word	0x0800bc65
 800bb60:	0800bc65 	.word	0x0800bc65
 800bb64:	0800bc65 	.word	0x0800bc65
 800bb68:	0800bc65 	.word	0x0800bc65
 800bb6c:	0800bc65 	.word	0x0800bc65
 800bb70:	0800bc65 	.word	0x0800bc65
 800bb74:	0800bc65 	.word	0x0800bc65
 800bb78:	0800bc65 	.word	0x0800bc65
 800bb7c:	0800bc65 	.word	0x0800bc65
 800bb80:	0800bc65 	.word	0x0800bc65
 800bb84:	0800bc65 	.word	0x0800bc65
 800bb88:	0800bc65 	.word	0x0800bc65
 800bb8c:	0800bc65 	.word	0x0800bc65
 800bb90:	0800bc65 	.word	0x0800bc65
 800bb94:	0800bc65 	.word	0x0800bc65
 800bb98:	0800bc65 	.word	0x0800bc65
 800bb9c:	0800bc65 	.word	0x0800bc65
 800bba0:	0800bc65 	.word	0x0800bc65
 800bba4:	0800bc65 	.word	0x0800bc65
 800bba8:	0800bc65 	.word	0x0800bc65
 800bbac:	0800bc65 	.word	0x0800bc65
 800bbb0:	0800bbc3 	.word	0x0800bbc3
 800bbb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbb8:	d040      	beq.n	800bc3c <any_buttons_pressed_routine+0x198>
//			    }
//			break;
//		    default:
//			break;
	    }
    }
 800bbba:	e053      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		Power_button_pressed();
 800bbbc:	f000 fb74 	bl	800c2a8 <Power_button_pressed>
		break;
 800bbc0:	e050      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		if (HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin) == GPIO_PIN_RESET)
 800bbc2:	2120      	movs	r1, #32
 800bbc4:	4831      	ldr	r0, [pc, #196]	; (800bc8c <any_buttons_pressed_routine+0x1e8>)
 800bbc6:	f003 fe1f 	bl	800f808 <HAL_GPIO_ReadPin>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d140      	bne.n	800bc52 <any_buttons_pressed_routine+0x1ae>
			SSD1322_Screen_State++;
 800bbd0:	4b2f      	ldr	r3, [pc, #188]	; (800bc90 <any_buttons_pressed_routine+0x1ec>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	4b2d      	ldr	r3, [pc, #180]	; (800bc90 <any_buttons_pressed_routine+0x1ec>)
 800bbda:	701a      	strb	r2, [r3, #0]
			if (ENUM_MAX_USER_DISPLAY == SSD1322_Screen_State) SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800bbdc:	4b2c      	ldr	r3, [pc, #176]	; (800bc90 <any_buttons_pressed_routine+0x1ec>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b0a      	cmp	r3, #10
 800bbe2:	d102      	bne.n	800bbea <any_buttons_pressed_routine+0x146>
 800bbe4:	4b2a      	ldr	r3, [pc, #168]	; (800bc90 <any_buttons_pressed_routine+0x1ec>)
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	701a      	strb	r2, [r3, #0]
			Button_pressed_change_screen();
 800bbea:	f000 f86f 	bl	800bccc <Button_pressed_change_screen>
		break;
 800bbee:	e030      	b.n	800bc52 <any_buttons_pressed_routine+0x1ae>
		if (HAL_GPIO_ReadPin(USER_BUTTON_2_GPIO_Port, USER_BUTTON_2_Pin) == GPIO_PIN_RESET)
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	4828      	ldr	r0, [pc, #160]	; (800bc94 <any_buttons_pressed_routine+0x1f0>)
 800bbf4:	f003 fe08 	bl	800f808 <HAL_GPIO_ReadPin>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d12b      	bne.n	800bc56 <any_buttons_pressed_routine+0x1b2>
			Button_pressed_accept();
 800bbfe:	f000 f8c9 	bl	800bd94 <Button_pressed_accept>
		break;
 800bc02:	e028      	b.n	800bc56 <any_buttons_pressed_routine+0x1b2>
		    Button_pressed_set_down();
 800bc04:	f000 f932 	bl	800be6c <Button_pressed_set_down>
		break;
 800bc08:	e02c      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		    Button_pressed_set_up();
 800bc0a:	f000 f9ad 	bl	800bf68 <Button_pressed_set_up>
		break;
 800bc0e:	e029      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		if (HAL_GPIO_ReadPin(ENCODER_BUTTON_VOLUME_FRONT_GPIO_Port, ENCODER_BUTTON_VOLUME_FRONT_Pin) == GPIO_PIN_RESET)
 800bc10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bc14:	481f      	ldr	r0, [pc, #124]	; (800bc94 <any_buttons_pressed_routine+0x1f0>)
 800bc16:	f003 fdf7 	bl	800f808 <HAL_GPIO_ReadPin>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d11c      	bne.n	800bc5a <any_buttons_pressed_routine+0x1b6>
			Encoder_button_volume_front();
 800bc20:	f000 fa12 	bl	800c048 <Encoder_button_volume_front>
		break;
 800bc24:	e019      	b.n	800bc5a <any_buttons_pressed_routine+0x1b6>
		if (HAL_GPIO_ReadPin(ENCODER_BUTTON_VOLUME_BACK_GPIO_Port, ENCODER_BUTTON_VOLUME_BACK_Pin) == GPIO_PIN_RESET)
 800bc26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc2a:	481a      	ldr	r0, [pc, #104]	; (800bc94 <any_buttons_pressed_routine+0x1f0>)
 800bc2c:	f003 fdec 	bl	800f808 <HAL_GPIO_ReadPin>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d113      	bne.n	800bc5e <any_buttons_pressed_routine+0x1ba>
			Encoder_button_volume_back();
 800bc36:	f000 faa1 	bl	800c17c <Encoder_button_volume_back>
		break;
 800bc3a:	e010      	b.n	800bc5e <any_buttons_pressed_routine+0x1ba>
		if (HAL_GPIO_ReadPin(ENCODER_BUTTON_LOUDNESS_GPIO_Port, ENCODER_BUTTON_LOUDNESS_Pin) == GPIO_PIN_RESET)
 800bc3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc40:	4812      	ldr	r0, [pc, #72]	; (800bc8c <any_buttons_pressed_routine+0x1e8>)
 800bc42:	f003 fde1 	bl	800f808 <HAL_GPIO_ReadPin>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10a      	bne.n	800bc62 <any_buttons_pressed_routine+0x1be>
			Encoder_button_loudness();
 800bc4c:	f000 fafe 	bl	800c24c <Encoder_button_loudness>
		break;
 800bc50:	e007      	b.n	800bc62 <any_buttons_pressed_routine+0x1be>
		break;
 800bc52:	bf00      	nop
 800bc54:	e006      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc56:	bf00      	nop
 800bc58:	e004      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc5a:	bf00      	nop
 800bc5c:	e002      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc5e:	bf00      	nop
 800bc60:	e000      	b.n	800bc64 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc62:	bf00      	nop
    }
 800bc64:	bf00      	nop
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	200001a5 	.word	0x200001a5
 800bc6c:	2000178c 	.word	0x2000178c
 800bc70:	20007828 	.word	0x20007828
 800bc74:	200057bc 	.word	0x200057bc
 800bc78:	200001a3 	.word	0x200001a3
 800bc7c:	200001a4 	.word	0x200001a4
 800bc80:	200000af 	.word	0x200000af
 800bc84:	20007a04 	.word	0x20007a04
 800bc88:	20000748 	.word	0x20000748
 800bc8c:	48000800 	.word	0x48000800
 800bc90:	200004f8 	.word	0x200004f8
 800bc94:	48000400 	.word	0x48000400

0800bc98 <HAL_GPIO_EXTI_Callback>:

//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    {
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	80fb      	strh	r3, [r7, #6]
	// after debouncing time go to timer output compare callback
//	if (states1 == true) // zabezpieczenie przed kolejnym wywołaniem przed zakończeniem timera
	    {
		HAL_TIM_OC_Start_IT(&htim17, TIM_CHANNEL_1);
 800bca2:	2100      	movs	r1, #0
 800bca4:	4806      	ldr	r0, [pc, #24]	; (800bcc0 <HAL_GPIO_EXTI_Callback+0x28>)
 800bca6:	f007 ff73 	bl	8013b90 <HAL_TIM_OC_Start_IT>
		button_debou_state = false;
 800bcaa:	4b06      	ldr	r3, [pc, #24]	; (800bcc4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	701a      	strb	r2, [r3, #0]
		gGPIO_Pin = GPIO_Pin;
 800bcb0:	4a05      	ldr	r2, [pc, #20]	; (800bcc8 <HAL_GPIO_EXTI_Callback+0x30>)
 800bcb2:	88fb      	ldrh	r3, [r7, #6]
 800bcb4:	8013      	strh	r3, [r2, #0]
	    }

    }
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20007a04 	.word	0x20007a04
 800bcc4:	200000af 	.word	0x200000af
 800bcc8:	20000748 	.word	0x20000748

0800bccc <Button_pressed_change_screen>:
//--------------------------------------------------------------


// -_-
void Button_pressed_change_screen(void)
    {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
	if(ADC_IS_ON_flag == true)
 800bcd0:	4b2a      	ldr	r3, [pc, #168]	; (800bd7c <Button_pressed_change_screen+0xb0>)
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d108      	bne.n	800bcec <Button_pressed_change_screen+0x20>
	    {
		HAL_TIM_Base_Stop(&htim6);
 800bcda:	4829      	ldr	r0, [pc, #164]	; (800bd80 <Button_pressed_change_screen+0xb4>)
 800bcdc:	f007 feda 	bl	8013a94 <HAL_TIM_Base_Stop>
		HAL_ADC_Stop_DMA(&hadc1);
 800bce0:	4828      	ldr	r0, [pc, #160]	; (800bd84 <Button_pressed_change_screen+0xb8>)
 800bce2:	f001 fc4b 	bl	800d57c <HAL_ADC_Stop_DMA>
		ADC_IS_ON_flag = false;
 800bce6:	4b25      	ldr	r3, [pc, #148]	; (800bd7c <Button_pressed_change_screen+0xb0>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	701a      	strb	r2, [r3, #0]
	    }


	switch (SSD1322_Screen_State)
 800bcec:	4b26      	ldr	r3, [pc, #152]	; (800bd88 <Button_pressed_change_screen+0xbc>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	3b01      	subs	r3, #1
 800bcf2:	2b0a      	cmp	r3, #10
 800bcf4:	d834      	bhi.n	800bd60 <Button_pressed_change_screen+0x94>
 800bcf6:	a201      	add	r2, pc, #4	; (adr r2, 800bcfc <Button_pressed_change_screen+0x30>)
 800bcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfc:	0800bd71 	.word	0x0800bd71
 800bd00:	0800bd71 	.word	0x0800bd71
 800bd04:	0800bd29 	.word	0x0800bd29
 800bd08:	0800bd45 	.word	0x0800bd45
 800bd0c:	0800bd71 	.word	0x0800bd71
 800bd10:	0800bd71 	.word	0x0800bd71
 800bd14:	0800bd71 	.word	0x0800bd71
 800bd18:	0800bd71 	.word	0x0800bd71
 800bd1c:	0800bd71 	.word	0x0800bd71
 800bd20:	0800bd61 	.word	0x0800bd61
 800bd24:	0800bd71 	.word	0x0800bd71
		break;
	    case SSD1322_SCREEN_RADIO:

		break;
	    case SSD1322_SCREEN_FFT:
		HAL_TIM_Base_Start(&htim6);
 800bd28:	4815      	ldr	r0, [pc, #84]	; (800bd80 <Button_pressed_change_screen+0xb4>)
 800bd2a:	f007 fe4b 	bl	80139c4 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_SamplesTEST, UV_meter_numb_of_chan);
 800bd2e:	4b17      	ldr	r3, [pc, #92]	; (800bd8c <Button_pressed_change_screen+0xc0>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	461a      	mov	r2, r3
 800bd34:	4916      	ldr	r1, [pc, #88]	; (800bd90 <Button_pressed_change_screen+0xc4>)
 800bd36:	4813      	ldr	r0, [pc, #76]	; (800bd84 <Button_pressed_change_screen+0xb8>)
 800bd38:	f001 fb6c 	bl	800d414 <HAL_ADC_Start_DMA>
		ADC_IS_ON_flag = true;
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <Button_pressed_change_screen+0xb0>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	701a      	strb	r2, [r3, #0]
		break;
 800bd42:	e018      	b.n	800bd76 <Button_pressed_change_screen+0xaa>
	    case SSD1322_SCREEN_UVMETER:
		HAL_TIM_Base_Start(&htim6);
 800bd44:	480e      	ldr	r0, [pc, #56]	; (800bd80 <Button_pressed_change_screen+0xb4>)
 800bd46:	f007 fe3d 	bl	80139c4 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_SamplesTEST, UV_meter_numb_of_chan);
 800bd4a:	4b10      	ldr	r3, [pc, #64]	; (800bd8c <Button_pressed_change_screen+0xc0>)
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	490f      	ldr	r1, [pc, #60]	; (800bd90 <Button_pressed_change_screen+0xc4>)
 800bd52:	480c      	ldr	r0, [pc, #48]	; (800bd84 <Button_pressed_change_screen+0xb8>)
 800bd54:	f001 fb5e 	bl	800d414 <HAL_ADC_Start_DMA>
		ADC_IS_ON_flag = true;
 800bd58:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <Button_pressed_change_screen+0xb0>)
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	701a      	strb	r2, [r3, #0]
		//set flag indicating that adc is on
		break;
 800bd5e:	e00a      	b.n	800bd76 <Button_pressed_change_screen+0xaa>
		break;
	    case SSD1322_SCREEN_TIME_BOUNCING:

		break;
	    default:
		if (ENUM_MAX_USER_DISPLAY == SSD1322_Screen_State)
 800bd60:	4b09      	ldr	r3, [pc, #36]	; (800bd88 <Button_pressed_change_screen+0xbc>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b0a      	cmp	r3, #10
 800bd66:	d105      	bne.n	800bd74 <Button_pressed_change_screen+0xa8>
		    {
			SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800bd68:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <Button_pressed_change_screen+0xbc>)
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800bd6e:	e001      	b.n	800bd74 <Button_pressed_change_screen+0xa8>
		break;
 800bd70:	bf00      	nop
 800bd72:	e000      	b.n	800bd76 <Button_pressed_change_screen+0xaa>
		break;
 800bd74:	bf00      	nop
	    }

    }
 800bd76:	bf00      	nop
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	200001f8 	.word	0x200001f8
 800bd80:	20007ae8 	.word	0x20007ae8
 800bd84:	200005e0 	.word	0x200005e0
 800bd88:	200004f8 	.word	0x200004f8
 800bd8c:	200000b0 	.word	0x200000b0
 800bd90:	200057c0 	.word	0x200057c0

0800bd94 <Button_pressed_accept>:

//
void Button_pressed_accept(void)
    {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	af00      	add	r7, sp, #0
	switch (SSD1322_Screen_State)
 800bd98:	4b31      	ldr	r3, [pc, #196]	; (800be60 <Button_pressed_accept+0xcc>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	2b16      	cmp	r3, #22
 800bda0:	d852      	bhi.n	800be48 <Button_pressed_accept+0xb4>
 800bda2:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <Button_pressed_accept+0x14>)
 800bda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda8:	0800be51 	.word	0x0800be51
 800bdac:	0800be05 	.word	0x0800be05
 800bdb0:	0800be51 	.word	0x0800be51
 800bdb4:	0800be51 	.word	0x0800be51
 800bdb8:	0800be49 	.word	0x0800be49
 800bdbc:	0800be49 	.word	0x0800be49
 800bdc0:	0800be0b 	.word	0x0800be0b
 800bdc4:	0800be27 	.word	0x0800be27
 800bdc8:	0800be43 	.word	0x0800be43
 800bdcc:	0800be49 	.word	0x0800be49
 800bdd0:	0800be51 	.word	0x0800be51
 800bdd4:	0800be49 	.word	0x0800be49
 800bdd8:	0800be49 	.word	0x0800be49
 800bddc:	0800be49 	.word	0x0800be49
 800bde0:	0800be49 	.word	0x0800be49
 800bde4:	0800be49 	.word	0x0800be49
 800bde8:	0800be49 	.word	0x0800be49
 800bdec:	0800be49 	.word	0x0800be49
 800bdf0:	0800be49 	.word	0x0800be49
 800bdf4:	0800be51 	.word	0x0800be51
 800bdf8:	0800be49 	.word	0x0800be49
 800bdfc:	0800be51 	.word	0x0800be51
 800be00:	0800be51 	.word	0x0800be51
	    {
	    case SSD1322_SCREEN_TIME:
		break;
	    case SSD1322_SCREEN_RADIO:
		RDA5807_SeekUp();
 800be04:	f7fb fa8c 	bl	8007320 <RDA5807_SeekUp>
		break;
 800be08:	e027      	b.n	800be5a <Button_pressed_accept+0xc6>
	    case SSD1322_SCREEN_OFF:
		break;
	    case SSD1322_SCREEN_GoodBye:
		break;
	    case SSD1322_SCREEN_SETCLOCK:
		Clock_Data_Time++;
 800be0a:	4b16      	ldr	r3, [pc, #88]	; (800be64 <Button_pressed_accept+0xd0>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	3301      	adds	r3, #1
 800be10:	b2da      	uxtb	r2, r3
 800be12:	4b14      	ldr	r3, [pc, #80]	; (800be64 <Button_pressed_accept+0xd0>)
 800be14:	701a      	strb	r2, [r3, #0]
		if (9 == Clock_Data_Time)
 800be16:	4b13      	ldr	r3, [pc, #76]	; (800be64 <Button_pressed_accept+0xd0>)
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	2b09      	cmp	r3, #9
 800be1c:	d11a      	bne.n	800be54 <Button_pressed_accept+0xc0>
		    {
			Clock_Data_Time = 1;
 800be1e:	4b11      	ldr	r3, [pc, #68]	; (800be64 <Button_pressed_accept+0xd0>)
 800be20:	2201      	movs	r2, #1
 800be22:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800be24:	e016      	b.n	800be54 <Button_pressed_accept+0xc0>
	    case SSD1322_SCREEN_SETALARM:
		AlarmDataChange++;
 800be26:	4b10      	ldr	r3, [pc, #64]	; (800be68 <Button_pressed_accept+0xd4>)
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	4b0e      	ldr	r3, [pc, #56]	; (800be68 <Button_pressed_accept+0xd4>)
 800be30:	701a      	strb	r2, [r3, #0]
		if (7 == AlarmDataChange)
 800be32:	4b0d      	ldr	r3, [pc, #52]	; (800be68 <Button_pressed_accept+0xd4>)
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b07      	cmp	r3, #7
 800be38:	d10e      	bne.n	800be58 <Button_pressed_accept+0xc4>
		    {
			AlarmDataChange = 1;
 800be3a:	4b0b      	ldr	r3, [pc, #44]	; (800be68 <Button_pressed_accept+0xd4>)
 800be3c:	2201      	movs	r2, #1
 800be3e:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800be40:	e00a      	b.n	800be58 <Button_pressed_accept+0xc4>
	    case SSD1322_SCREEN_SETTINGS:
		Change_selected_setting();
 800be42:	f000 fb1f 	bl	800c484 <Change_selected_setting>
		break;
 800be46:	e008      	b.n	800be5a <Button_pressed_accept+0xc6>
	    case SSD1322_SCREEN_USB:
		//tutaj akcept wejście w folder albo otworzenie pliku
		//jeżeli brak podpiętego USB to komunikat żeby podłączyć z formatowanie FatFS
		break;
	    default:
		SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800be48:	4b05      	ldr	r3, [pc, #20]	; (800be60 <Button_pressed_accept+0xcc>)
 800be4a:	2201      	movs	r2, #1
 800be4c:	701a      	strb	r2, [r3, #0]
		break;
 800be4e:	e004      	b.n	800be5a <Button_pressed_accept+0xc6>
		break;
 800be50:	bf00      	nop
 800be52:	e002      	b.n	800be5a <Button_pressed_accept+0xc6>
		break;
 800be54:	bf00      	nop
 800be56:	e000      	b.n	800be5a <Button_pressed_accept+0xc6>
		break;
 800be58:	bf00      	nop
	    }
    }
 800be5a:	bf00      	nop
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	200004f8 	.word	0x200004f8
 800be64:	2000050a 	.word	0x2000050a
 800be68:	200004f9 	.word	0x200004f9

0800be6c <Button_pressed_set_down>:

//
void Button_pressed_set_down(void)
    {
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
	switch (SSD1322_Screen_State)
 800be70:	4b38      	ldr	r3, [pc, #224]	; (800bf54 <Button_pressed_set_down+0xe8>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	3b01      	subs	r3, #1
 800be76:	2b16      	cmp	r3, #22
 800be78:	d863      	bhi.n	800bf42 <Button_pressed_set_down+0xd6>
 800be7a:	a201      	add	r2, pc, #4	; (adr r2, 800be80 <Button_pressed_set_down+0x14>)
 800be7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be80:	0800bf43 	.word	0x0800bf43
 800be84:	0800bedd 	.word	0x0800bedd
 800be88:	0800bee3 	.word	0x0800bee3
 800be8c:	0800bee9 	.word	0x0800bee9
 800be90:	0800bf43 	.word	0x0800bf43
 800be94:	0800bf3d 	.word	0x0800bf3d
 800be98:	0800beff 	.word	0x0800beff
 800be9c:	0800bf1b 	.word	0x0800bf1b
 800bea0:	0800bf37 	.word	0x0800bf37
 800bea4:	0800bf43 	.word	0x0800bf43
 800bea8:	0800bf43 	.word	0x0800bf43
 800beac:	0800bf43 	.word	0x0800bf43
 800beb0:	0800bf43 	.word	0x0800bf43
 800beb4:	0800bf43 	.word	0x0800bf43
 800beb8:	0800bf43 	.word	0x0800bf43
 800bebc:	0800bf43 	.word	0x0800bf43
 800bec0:	0800bf43 	.word	0x0800bf43
 800bec4:	0800bf43 	.word	0x0800bf43
 800bec8:	0800bf43 	.word	0x0800bf43
 800becc:	0800bf43 	.word	0x0800bf43
 800bed0:	0800bf43 	.word	0x0800bf43
 800bed4:	0800bf43 	.word	0x0800bf43
 800bed8:	0800bf43 	.word	0x0800bf43
	    {
	    case SSD1322_SCREEN_TIME:
		break;
	    case SSD1322_SCREEN_RADIO:
		Save_Station_Freq_1();
 800bedc:	f000 fa8e 	bl	800c3fc <Save_Station_Freq_1>
		break;
 800bee0:	e036      	b.n	800bf50 <Button_pressed_set_down+0xe4>
	    case SSD1322_SCREEN_WakeUp:
		break;
	    case SSD1322_SCREEN_FFT:
		Change_FFT_source_Down();
 800bee2:	f000 fddf 	bl	800caa4 <Change_FFT_source_Down>
		break;
 800bee6:	e033      	b.n	800bf50 <Button_pressed_set_down+0xe4>
	    case SSD1322_SCREEN_UVMETER:
		if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800bee8:	2102      	movs	r1, #2
 800beea:	481b      	ldr	r0, [pc, #108]	; (800bf58 <Button_pressed_set_down+0xec>)
 800beec:	f003 fc8c 	bl	800f808 <HAL_GPIO_ReadPin>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d127      	bne.n	800bf46 <Button_pressed_set_down+0xda>
		    {
			UV_meter_front_back = UV_METER_BACK;
 800bef6:	4b19      	ldr	r3, [pc, #100]	; (800bf5c <Button_pressed_set_down+0xf0>)
 800bef8:	2201      	movs	r2, #1
 800befa:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800befc:	e023      	b.n	800bf46 <Button_pressed_set_down+0xda>
	    case SSD1322_SCREEN_OFF:
		break;
	    case SSD1322_SCREEN_GoodBye:
		break;
	    case SSD1322_SCREEN_SETCLOCK:
		if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800befe:	2102      	movs	r1, #2
 800bf00:	4815      	ldr	r0, [pc, #84]	; (800bf58 <Button_pressed_set_down+0xec>)
 800bf02:	f003 fc81 	bl	800f808 <HAL_GPIO_ReadPin>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d11e      	bne.n	800bf4a <Button_pressed_set_down+0xde>
		    {
			switch_change_time(Clock_Data_Time, 0);
 800bf0c:	4b14      	ldr	r3, [pc, #80]	; (800bf60 <Button_pressed_set_down+0xf4>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2100      	movs	r1, #0
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fc ff60 	bl	8008dd8 <switch_change_time>
		    }
		break;
 800bf18:	e017      	b.n	800bf4a <Button_pressed_set_down+0xde>
	    case SSD1322_SCREEN_SETALARM:
		if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800bf1a:	2102      	movs	r1, #2
 800bf1c:	480e      	ldr	r0, [pc, #56]	; (800bf58 <Button_pressed_set_down+0xec>)
 800bf1e:	f003 fc73 	bl	800f808 <HAL_GPIO_ReadPin>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d112      	bne.n	800bf4e <Button_pressed_set_down+0xe2>
		    {
			switch_change_alarm(AlarmDataChange, 0);
 800bf28:	4b0e      	ldr	r3, [pc, #56]	; (800bf64 <Button_pressed_set_down+0xf8>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fd f908 	bl	8009144 <switch_change_alarm>
		    }
		break;
 800bf34:	e00b      	b.n	800bf4e <Button_pressed_set_down+0xe2>
	    case SSD1322_SCREEN_SETTINGS:
		Change_Down_Settings();
 800bf36:	f000 fae3 	bl	800c500 <Change_Down_Settings>
		break;
 800bf3a:	e009      	b.n	800bf50 <Button_pressed_set_down+0xe4>
	    case SSD1322_SCREEN_USB:
		break;
	    case SSD1322_SCREEN_SETINPUT:
		Change_Down_Input();
 800bf3c:	f000 fcaa 	bl	800c894 <Change_Down_Input>
		break;
 800bf40:	e006      	b.n	800bf50 <Button_pressed_set_down+0xe4>
	    default:
		break;
 800bf42:	bf00      	nop
 800bf44:	e004      	b.n	800bf50 <Button_pressed_set_down+0xe4>
		break;
 800bf46:	bf00      	nop
 800bf48:	e002      	b.n	800bf50 <Button_pressed_set_down+0xe4>
		break;
 800bf4a:	bf00      	nop
 800bf4c:	e000      	b.n	800bf50 <Button_pressed_set_down+0xe4>
		break;
 800bf4e:	bf00      	nop
	    }
    }
 800bf50:	bf00      	nop
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	200004f8 	.word	0x200004f8
 800bf58:	48000400 	.word	0x48000400
 800bf5c:	200037b8 	.word	0x200037b8
 800bf60:	2000050a 	.word	0x2000050a
 800bf64:	200004f9 	.word	0x200004f9

0800bf68 <Button_pressed_set_up>:

//
void Button_pressed_set_up(void)
    {
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	af00      	add	r7, sp, #0
	switch (SSD1322_Screen_State)
 800bf6c:	4b32      	ldr	r3, [pc, #200]	; (800c038 <Button_pressed_set_up+0xd0>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	2b16      	cmp	r3, #22
 800bf74:	d858      	bhi.n	800c028 <Button_pressed_set_up+0xc0>
 800bf76:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <Button_pressed_set_up+0x14>)
 800bf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7c:	0800c029 	.word	0x0800c029
 800bf80:	0800bfd9 	.word	0x0800bfd9
 800bf84:	0800bfdf 	.word	0x0800bfdf
 800bf88:	0800bfe5 	.word	0x0800bfe5
 800bf8c:	0800c029 	.word	0x0800c029
 800bf90:	0800c023 	.word	0x0800c023
 800bf94:	0800bffb 	.word	0x0800bffb
 800bf98:	0800c001 	.word	0x0800c001
 800bf9c:	0800c01d 	.word	0x0800c01d
 800bfa0:	0800c029 	.word	0x0800c029
 800bfa4:	0800c029 	.word	0x0800c029
 800bfa8:	0800c029 	.word	0x0800c029
 800bfac:	0800c029 	.word	0x0800c029
 800bfb0:	0800c029 	.word	0x0800c029
 800bfb4:	0800c029 	.word	0x0800c029
 800bfb8:	0800c029 	.word	0x0800c029
 800bfbc:	0800c029 	.word	0x0800c029
 800bfc0:	0800c029 	.word	0x0800c029
 800bfc4:	0800c029 	.word	0x0800c029
 800bfc8:	0800c029 	.word	0x0800c029
 800bfcc:	0800c029 	.word	0x0800c029
 800bfd0:	0800c029 	.word	0x0800c029
 800bfd4:	0800c029 	.word	0x0800c029
	    {
	    case SSD1322_SCREEN_TIME:
		break;
	    case SSD1322_SCREEN_RADIO:
		Save_Station_Freq_2();
 800bfd8:	f000 f9cc 	bl	800c374 <Save_Station_Freq_2>
		break;
 800bfdc:	e029      	b.n	800c032 <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_WakeUp:
		break;
	    case SSD1322_SCREEN_FFT:
		Change_FFT_source_Up();
 800bfde:	f000 fd45 	bl	800ca6c <Change_FFT_source_Up>
		break;
 800bfe2:	e026      	b.n	800c032 <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_UVMETER:
		if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800bfe4:	2104      	movs	r1, #4
 800bfe6:	4815      	ldr	r0, [pc, #84]	; (800c03c <Button_pressed_set_up+0xd4>)
 800bfe8:	f003 fc0e 	bl	800f808 <HAL_GPIO_ReadPin>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d11c      	bne.n	800c02c <Button_pressed_set_up+0xc4>
		    {
			UV_meter_front_back = UV_METER_FRONT;
 800bff2:	4b13      	ldr	r3, [pc, #76]	; (800c040 <Button_pressed_set_up+0xd8>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800bff8:	e018      	b.n	800c02c <Button_pressed_set_up+0xc4>
	    case SSD1322_SCREEN_OFF:
		break;
	    case SSD1322_SCREEN_GoodBye:
		break;
	    case SSD1322_SCREEN_SETCLOCK:
		Read_Set_TimeAndDate();
 800bffa:	f000 fd6f 	bl	800cadc <Read_Set_TimeAndDate>
		break;
 800bffe:	e018      	b.n	800c032 <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_SETALARM:
		if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800c000:	2104      	movs	r1, #4
 800c002:	480e      	ldr	r0, [pc, #56]	; (800c03c <Button_pressed_set_up+0xd4>)
 800c004:	f003 fc00 	bl	800f808 <HAL_GPIO_ReadPin>
 800c008:	4603      	mov	r3, r0
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d110      	bne.n	800c030 <Button_pressed_set_up+0xc8>
		    {
			switch_change_alarm(AlarmDataChange, 1);
 800c00e:	4b0d      	ldr	r3, [pc, #52]	; (800c044 <Button_pressed_set_up+0xdc>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2101      	movs	r1, #1
 800c014:	4618      	mov	r0, r3
 800c016:	f7fd f895 	bl	8009144 <switch_change_alarm>
		    }
		break;
 800c01a:	e009      	b.n	800c030 <Button_pressed_set_up+0xc8>
	    case SSD1322_SCREEN_SETTINGS:
		Change_Up_Settings();
 800c01c:	f000 fb50 	bl	800c6c0 <Change_Up_Settings>
		break;
 800c020:	e007      	b.n	800c032 <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_USB:
		break;
	    case SSD1322_SCREEN_SETINPUT:
		Change_Up_Input();
 800c022:	f000 fcad 	bl	800c980 <Change_Up_Input>
		break;
 800c026:	e004      	b.n	800c032 <Button_pressed_set_up+0xca>
	    default:
		break;
 800c028:	bf00      	nop
 800c02a:	e002      	b.n	800c032 <Button_pressed_set_up+0xca>
		break;
 800c02c:	bf00      	nop
 800c02e:	e000      	b.n	800c032 <Button_pressed_set_up+0xca>
		break;
 800c030:	bf00      	nop
	    }
    }
 800c032:	bf00      	nop
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	200004f8 	.word	0x200004f8
 800c03c:	48000400 	.word	0x48000400
 800c040:	200037b8 	.word	0x200037b8
 800c044:	200004f9 	.word	0x200004f9

0800c048 <Encoder_button_volume_front>:
*/
//--------------------------------------------------------------

//
void Encoder_button_volume_front(void)
    {
 800c048:	b580      	push	{r7, lr}
 800c04a:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_VOLUME_FRONT);
 800c04c:	201e      	movs	r0, #30
 800c04e:	f7f9 fe79 	bl	8005d44 <save_current_display_state>
	refresh_timer_state();
 800c052:	f7f9 ff1b 	bl	8005e8c <refresh_timer_state>


	switch (encoderVolFront.audioOutputState)
 800c056:	4b43      	ldr	r3, [pc, #268]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c058:	799b      	ldrb	r3, [r3, #6]
 800c05a:	2b06      	cmp	r3, #6
 800c05c:	d87c      	bhi.n	800c158 <Encoder_button_volume_front+0x110>
 800c05e:	a201      	add	r2, pc, #4	; (adr r2, 800c064 <Encoder_button_volume_front+0x1c>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c081 	.word	0x0800c081
 800c068:	0800c0b1 	.word	0x0800c0b1
 800c06c:	0800c11d 	.word	0x0800c11d
 800c070:	0800c141 	.word	0x0800c141
 800c074:	0800c159 	.word	0x0800c159
 800c078:	0800c149 	.word	0x0800c149
 800c07c:	0800c151 	.word	0x0800c151
	    {
	    case MASTER:
		encoderVolFront.audioOutputState = MUTE;
 800c080:	4b38      	ldr	r3, [pc, #224]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c082:	2201      	movs	r2, #1
 800c084:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftFront (VOLUME_MUTE, 0);
 800c086:	2100      	movs	r1, #0
 800c088:	2060      	movs	r0, #96	; 0x60
 800c08a:	f7fc fbc5 	bl	8008818 <TDA7719_SetVolume_LeftFront>
		TDA7719_SetVolume_RightFront(VOLUME_MUTE, 0);
 800c08e:	2100      	movs	r1, #0
 800c090:	2060      	movs	r0, #96	; 0x60
 800c092:	f7fc fbfb 	bl	800888c <TDA7719_SetVolume_RightFront>
		TDA7719_SetVolume_LeftRear  (VOLUME_MUTE, 0);
 800c096:	2100      	movs	r1, #0
 800c098:	2060      	movs	r0, #96	; 0x60
 800c09a:	f7fc fc31 	bl	8008900 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear (VOLUME_MUTE, 0);
 800c09e:	2100      	movs	r1, #0
 800c0a0:	2060      	movs	r0, #96	; 0x60
 800c0a2:	f7fc fc67 	bl	8008974 <TDA7719_SetVolume_RightRear>
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 800c0a6:	213c      	movs	r1, #60	; 0x3c
 800c0a8:	482f      	ldr	r0, [pc, #188]	; (800c168 <Encoder_button_volume_front+0x120>)
 800c0aa:	f008 fa65 	bl	8014578 <HAL_TIM_Encoder_Stop_IT>
		break;
 800c0ae:	e057      	b.n	800c160 <Encoder_button_volume_front+0x118>
	    case MUTE:
		encoderVolFront.audioOutputState = MASTER_V2;
 800c0b0:	4b2c      	ldr	r3, [pc, #176]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftFront (tempVolFrontLeft, 0);
 800c0b6:	4b2d      	ldr	r3, [pc, #180]	; (800c16c <Encoder_button_volume_front+0x124>)
 800c0b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0bc:	b25b      	sxtb	r3, r3
 800c0be:	2100      	movs	r1, #0
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fc fba9 	bl	8008818 <TDA7719_SetVolume_LeftFront>
		TDA7719_SetVolume_RightFront(tempVolFrontRight, 0);
 800c0c6:	4b2a      	ldr	r3, [pc, #168]	; (800c170 <Encoder_button_volume_front+0x128>)
 800c0c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0cc:	b25b      	sxtb	r3, r3
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fc fbdb 	bl	800888c <TDA7719_SetVolume_RightFront>
		TDA7719_SetVolume_LeftRear  (tempVolBackLeft, 0);
 800c0d6:	4b27      	ldr	r3, [pc, #156]	; (800c174 <Encoder_button_volume_front+0x12c>)
 800c0d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0dc:	b25b      	sxtb	r3, r3
 800c0de:	2100      	movs	r1, #0
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fc fc0d 	bl	8008900 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear (tempVolBackLeft, 0);
 800c0e6:	4b23      	ldr	r3, [pc, #140]	; (800c174 <Encoder_button_volume_front+0x12c>)
 800c0e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0ec:	b25b      	sxtb	r3, r3
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fc fc3f 	bl	8008974 <TDA7719_SetVolume_RightRear>
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackLeft);
 800c0f6:	4b1d      	ldr	r3, [pc, #116]	; (800c16c <Encoder_button_volume_front+0x124>)
 800c0f8:	f9b3 0000 	ldrsh.w	r0, [r3]
 800c0fc:	4b1c      	ldr	r3, [pc, #112]	; (800c170 <Encoder_button_volume_front+0x128>)
 800c0fe:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c102:	4b1c      	ldr	r3, [pc, #112]	; (800c174 <Encoder_button_volume_front+0x12c>)
 800c104:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c108:	4b1a      	ldr	r3, [pc, #104]	; (800c174 <Encoder_button_volume_front+0x12c>)
 800c10a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c10e:	f7ff fa13 	bl	800b538 <TDA7719_SetVolume_Master>
		HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800c112:	213c      	movs	r1, #60	; 0x3c
 800c114:	4814      	ldr	r0, [pc, #80]	; (800c168 <Encoder_button_volume_front+0x120>)
 800c116:	f008 f981 	bl	801441c <HAL_TIM_Encoder_Start_IT>
//		HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_2);
		break;
 800c11a:	e021      	b.n	800c160 <Encoder_button_volume_front+0x118>
	    case MASTER_V2:
		encoderVolFront.audioOutputState = NORMAL;
 800c11c:	4b11      	ldr	r3, [pc, #68]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c11e:	2203      	movs	r2, #3
 800c120:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackRight);
 800c122:	4b12      	ldr	r3, [pc, #72]	; (800c16c <Encoder_button_volume_front+0x124>)
 800c124:	f9b3 0000 	ldrsh.w	r0, [r3]
 800c128:	4b11      	ldr	r3, [pc, #68]	; (800c170 <Encoder_button_volume_front+0x128>)
 800c12a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c12e:	4b11      	ldr	r3, [pc, #68]	; (800c174 <Encoder_button_volume_front+0x12c>)
 800c130:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c134:	4b10      	ldr	r3, [pc, #64]	; (800c178 <Encoder_button_volume_front+0x130>)
 800c136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c13a:	f7ff f9fd 	bl	800b538 <TDA7719_SetVolume_Master>
//		HAL_TIM_OC_Stop_IT(&htim15, TIM_CHANNEL_2);	//zmienić na 5 - 10 sekund
		break;
 800c13e:	e00f      	b.n	800c160 <Encoder_button_volume_front+0x118>
	    case NORMAL:
		encoderVolFront.audioOutputState = ATTE_LEFT;
 800c140:	4b08      	ldr	r3, [pc, #32]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c142:	2205      	movs	r2, #5
 800c144:	719a      	strb	r2, [r3, #6]
		break;
 800c146:	e00b      	b.n	800c160 <Encoder_button_volume_front+0x118>
	    case ATTE_LEFT:
		encoderVolFront.audioOutputState = ATTE_RIGHT;
 800c148:	4b06      	ldr	r3, [pc, #24]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c14a:	2206      	movs	r2, #6
 800c14c:	719a      	strb	r2, [r3, #6]
		break;
 800c14e:	e007      	b.n	800c160 <Encoder_button_volume_front+0x118>
	    case ATTE_RIGHT:
		encoderVolFront.audioOutputState = MASTER;
 800c150:	4b04      	ldr	r3, [pc, #16]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c152:	2200      	movs	r2, #0
 800c154:	719a      	strb	r2, [r3, #6]
		break;
 800c156:	e003      	b.n	800c160 <Encoder_button_volume_front+0x118>
	    default:
		encoderVolFront.audioOutputState = MASTER;
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <Encoder_button_volume_front+0x11c>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	719a      	strb	r2, [r3, #6]
		break;
 800c15e:	bf00      	nop
	    }

    }
 800c160:	bf00      	nop
 800c162:	bd80      	pop	{r7, pc}
 800c164:	20000554 	.word	0x20000554
 800c168:	20007b80 	.word	0x20007b80
 800c16c:	20000468 	.word	0x20000468
 800c170:	20000246 	.word	0x20000246
 800c174:	200002b0 	.word	0x200002b0
 800c178:	2000046a 	.word	0x2000046a

0800c17c <Encoder_button_volume_back>:
//
void Encoder_button_volume_back(void)
    {
 800c17c:	b580      	push	{r7, lr}
 800c17e:	af00      	add	r7, sp, #0
	switch (encoderVolBack.audioOutputState)
 800c180:	4b2e      	ldr	r3, [pc, #184]	; (800c23c <Encoder_button_volume_back+0xc0>)
 800c182:	799b      	ldrb	r3, [r3, #6]
 800c184:	3b01      	subs	r3, #1
 800c186:	2b05      	cmp	r3, #5
 800c188:	d852      	bhi.n	800c230 <Encoder_button_volume_back+0xb4>
 800c18a:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <Encoder_button_volume_back+0x14>)
 800c18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c190:	0800c1c9 	.word	0x0800c1c9
 800c194:	0800c231 	.word	0x0800c231
 800c198:	0800c1a9 	.word	0x0800c1a9
 800c19c:	0800c1f9 	.word	0x0800c1f9
 800c1a0:	0800c221 	.word	0x0800c221
 800c1a4:	0800c229 	.word	0x0800c229
	    {
	    case NORMAL:
		encoderVolBack.audioOutputState = MUTE;
 800c1a8:	4b24      	ldr	r3, [pc, #144]	; (800c23c <Encoder_button_volume_back+0xc0>)
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftRear (VOLUME_MUTE, 0);
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	2060      	movs	r0, #96	; 0x60
 800c1b2:	f7fc fba5 	bl	8008900 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear(VOLUME_MUTE, 0);
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	2060      	movs	r0, #96	; 0x60
 800c1ba:	f7fc fbdb 	bl	8008974 <TDA7719_SetVolume_RightRear>
		HAL_TIM_Encoder_Stop_IT(&htim8, TIM_CHANNEL_ALL);
 800c1be:	213c      	movs	r1, #60	; 0x3c
 800c1c0:	481f      	ldr	r0, [pc, #124]	; (800c240 <Encoder_button_volume_back+0xc4>)
 800c1c2:	f008 f9d9 	bl	8014578 <HAL_TIM_Encoder_Stop_IT>
		break;
 800c1c6:	e037      	b.n	800c238 <Encoder_button_volume_back+0xbc>
	    case MUTE:
		encoderVolBack.audioOutputState = NORMAL_V2;
 800c1c8:	4b1c      	ldr	r3, [pc, #112]	; (800c23c <Encoder_button_volume_back+0xc0>)
 800c1ca:	2204      	movs	r2, #4
 800c1cc:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftRear (tempVolBackLeft, 0);
 800c1ce:	4b1d      	ldr	r3, [pc, #116]	; (800c244 <Encoder_button_volume_back+0xc8>)
 800c1d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1d4:	b25b      	sxtb	r3, r3
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fc fb91 	bl	8008900 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear(tempVolBackRight, 0);
 800c1de:	4b1a      	ldr	r3, [pc, #104]	; (800c248 <Encoder_button_volume_back+0xcc>)
 800c1e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1e4:	b25b      	sxtb	r3, r3
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fc fbc3 	bl	8008974 <TDA7719_SetVolume_RightRear>
		HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800c1ee:	213c      	movs	r1, #60	; 0x3c
 800c1f0:	4813      	ldr	r0, [pc, #76]	; (800c240 <Encoder_button_volume_back+0xc4>)
 800c1f2:	f008 f913 	bl	801441c <HAL_TIM_Encoder_Start_IT>
		break;
 800c1f6:	e01f      	b.n	800c238 <Encoder_button_volume_back+0xbc>
	    case NORMAL_V2:
		encoderVolBack.audioOutputState = ATTE_LEFT;
 800c1f8:	4b10      	ldr	r3, [pc, #64]	; (800c23c <Encoder_button_volume_back+0xc0>)
 800c1fa:	2205      	movs	r2, #5
 800c1fc:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftRear (tempVolBackLeft, 0);
 800c1fe:	4b11      	ldr	r3, [pc, #68]	; (800c244 <Encoder_button_volume_back+0xc8>)
 800c200:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c204:	b25b      	sxtb	r3, r3
 800c206:	2100      	movs	r1, #0
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fc fb79 	bl	8008900 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear(tempVolBackRight, 0);
 800c20e:	4b0e      	ldr	r3, [pc, #56]	; (800c248 <Encoder_button_volume_back+0xcc>)
 800c210:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c214:	b25b      	sxtb	r3, r3
 800c216:	2100      	movs	r1, #0
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fc fbab 	bl	8008974 <TDA7719_SetVolume_RightRear>
		//HAL_TIM_OC_Start_IT(&htim16, TIM_CHANNEL_1);
		break;
 800c21e:	e00b      	b.n	800c238 <Encoder_button_volume_back+0xbc>
	    case ATTE_LEFT:
		encoderVolBack.audioOutputState = ATTE_RIGHT;
 800c220:	4b06      	ldr	r3, [pc, #24]	; (800c23c <Encoder_button_volume_back+0xc0>)
 800c222:	2206      	movs	r2, #6
 800c224:	719a      	strb	r2, [r3, #6]
		break;
 800c226:	e007      	b.n	800c238 <Encoder_button_volume_back+0xbc>
	    case ATTE_RIGHT:
		encoderVolBack.audioOutputState = NORMAL;
 800c228:	4b04      	ldr	r3, [pc, #16]	; (800c23c <Encoder_button_volume_back+0xc0>)
 800c22a:	2203      	movs	r2, #3
 800c22c:	719a      	strb	r2, [r3, #6]
		break;
 800c22e:	e003      	b.n	800c238 <Encoder_button_volume_back+0xbc>
	    default:
		encoderVolBack.audioOutputState = NORMAL;
 800c230:	4b02      	ldr	r3, [pc, #8]	; (800c23c <Encoder_button_volume_back+0xc0>)
 800c232:	2203      	movs	r2, #3
 800c234:	719a      	strb	r2, [r3, #6]
		break;
 800c236:	bf00      	nop
	    }
    }
 800c238:	bf00      	nop
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	20000518 	.word	0x20000518
 800c240:	20007920 	.word	0x20007920
 800c244:	200002b0 	.word	0x200002b0
 800c248:	2000046a 	.word	0x2000046a

0800c24c <Encoder_button_loudness>:
//
void Encoder_button_loudness(void)
    {
 800c24c:	b480      	push	{r7}
 800c24e:	af00      	add	r7, sp, #0
//	save_display_state(SSD1322_SCREEN_ENCODER_LOUDNESS);
//	TIM_state_Cos_tam();

	switch (encoderFilterLoudness.buttonControl)
 800c250:	4b14      	ldr	r3, [pc, #80]	; (800c2a4 <Encoder_button_loudness+0x58>)
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b03      	cmp	r3, #3
 800c256:	d81b      	bhi.n	800c290 <Encoder_button_loudness+0x44>
 800c258:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <Encoder_button_loudness+0x14>)
 800c25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25e:	bf00      	nop
 800c260:	0800c271 	.word	0x0800c271
 800c264:	0800c279 	.word	0x0800c279
 800c268:	0800c281 	.word	0x0800c281
 800c26c:	0800c289 	.word	0x0800c289
	    {
	    case SET_GAIN:
		encoderFilterLoudness.buttonControl = SET_CENTER_FREQ;
 800c270:	4b0c      	ldr	r3, [pc, #48]	; (800c2a4 <Encoder_button_loudness+0x58>)
 800c272:	2201      	movs	r2, #1
 800c274:	701a      	strb	r2, [r3, #0]
		break;
 800c276:	e00f      	b.n	800c298 <Encoder_button_loudness+0x4c>
	    case SET_CENTER_FREQ:
		encoderFilterLoudness.buttonControl = SET_SOFT_STEP;
 800c278:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <Encoder_button_loudness+0x58>)
 800c27a:	2202      	movs	r2, #2
 800c27c:	701a      	strb	r2, [r3, #0]
		break;
 800c27e:	e00b      	b.n	800c298 <Encoder_button_loudness+0x4c>
	    case SET_SOFT_STEP:
		encoderFilterLoudness.buttonControl = SET_HIGH_BOOST;
 800c280:	4b08      	ldr	r3, [pc, #32]	; (800c2a4 <Encoder_button_loudness+0x58>)
 800c282:	2203      	movs	r2, #3
 800c284:	701a      	strb	r2, [r3, #0]
		break;
 800c286:	e007      	b.n	800c298 <Encoder_button_loudness+0x4c>
	    case SET_HIGH_BOOST:
		encoderFilterLoudness.buttonControl = SET_GAIN;
 800c288:	4b06      	ldr	r3, [pc, #24]	; (800c2a4 <Encoder_button_loudness+0x58>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	701a      	strb	r2, [r3, #0]
		break;
 800c28e:	e003      	b.n	800c298 <Encoder_button_loudness+0x4c>
	    default:
		encoderFilterLoudness.buttonControl = SET_GAIN;
 800c290:	4b04      	ldr	r3, [pc, #16]	; (800c2a4 <Encoder_button_loudness+0x58>)
 800c292:	2200      	movs	r2, #0
 800c294:	701a      	strb	r2, [r3, #0]
		break;
 800c296:	bf00      	nop
	    }
    }
 800c298:	bf00      	nop
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	2000053c 	.word	0x2000053c

0800c2a8 <Power_button_pressed>:
		break;
	    }
    }
//
void Power_button_pressed(void)
    {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
	//stopniowo zmniejszać głośność przez kilka sekund - opcja do włączenia w settings
	//w między czasie albo na końcu odpalić ekran pożegnalny

	/* routine after power button is pressed*/
	if(HAL_GPIO_ReadPin(POWER_BUTTON_GPIO_Port, POWER_BUTTON_Pin) == GPIO_PIN_RESET)
 800c2ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c2b0:	4826      	ldr	r0, [pc, #152]	; (800c34c <Power_button_pressed+0xa4>)
 800c2b2:	f003 faa9 	bl	800f808 <HAL_GPIO_ReadPin>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d140      	bne.n	800c33e <Power_button_pressed+0x96>
	    {
		/* if power button is pressed while device is ON*/
		if(POWER_device_state_flag == 1)
 800c2bc:	4b24      	ldr	r3, [pc, #144]	; (800c350 <Power_button_pressed+0xa8>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d11b      	bne.n	800c2fe <Power_button_pressed+0x56>
		    {
			//change global flag
			POWER_device_state_flag = 0;
 800c2c6:	4b22      	ldr	r3, [pc, #136]	; (800c350 <Power_button_pressed+0xa8>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	701a      	strb	r2, [r3, #0]
			//turn off display
			SSD1322_API_sleep_on();
 800c2cc:	f7f6 fbee 	bl	8002aac <SSD1322_API_sleep_on>
			//turn off radio
			RDA5807_PowerOff();
 800c2d0:	f7fa fff4 	bl	80072bc <RDA5807_PowerOff>
			//turn off preamp
			TDA7719_SetSoftMute(0, 1); //change to deinit TDA
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f7fb fe6a 	bl	8007fb0 <TDA7719_SetSoftMute>
			//change power led mode
			SettingsUserMenu.Power_LED = 1;
 800c2dc:	4b1d      	ldr	r3, [pc, #116]	; (800c354 <Power_button_pressed+0xac>)
 800c2de:	2201      	movs	r2, #1
 800c2e0:	715a      	strb	r2, [r3, #5]
			//save to eeprom
			EEPROM_Save_FilterSettings(&encoderFilterTreble, &encoderFilterMiddle, &encoderFilterBass, &encoderFilterLoudness);
 800c2e2:	4b1d      	ldr	r3, [pc, #116]	; (800c358 <Power_button_pressed+0xb0>)
 800c2e4:	4a1d      	ldr	r2, [pc, #116]	; (800c35c <Power_button_pressed+0xb4>)
 800c2e6:	491e      	ldr	r1, [pc, #120]	; (800c360 <Power_button_pressed+0xb8>)
 800c2e8:	481e      	ldr	r0, [pc, #120]	; (800c364 <Power_button_pressed+0xbc>)
 800c2ea:	f7fa fcd4 	bl	8006c96 <EEPROM_Save_FilterSettings>
			EEPROM_Save_UserSetting(&savedUserSettings);
 800c2ee:	481e      	ldr	r0, [pc, #120]	; (800c368 <Power_button_pressed+0xc0>)
 800c2f0:	f7fa fbd6 	bl	8006aa0 <EEPROM_Save_UserSetting>
			EEPROM_Save_VolumeSettings(&encoderVolFront, &encoderVolBack);
 800c2f4:	491d      	ldr	r1, [pc, #116]	; (800c36c <Power_button_pressed+0xc4>)
 800c2f6:	481e      	ldr	r0, [pc, #120]	; (800c370 <Power_button_pressed+0xc8>)
 800c2f8:	f7fa fc4e 	bl	8006b98 <EEPROM_Save_VolumeSettings>
 800c2fc:	e01f      	b.n	800c33e <Power_button_pressed+0x96>
//			__NVIC_DisableIRQ(IRQn);
			//turn off relay
			//HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
		    }

		else if(POWER_device_state_flag == 0) //schować w funkcje, która będzie wywoływana przy starcie systemu, albo przy starcie będzie inny startup routine
 800c2fe:	4b14      	ldr	r3, [pc, #80]	; (800c350 <Power_button_pressed+0xa8>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d11a      	bne.n	800c33e <Power_button_pressed+0x96>
		    {
			POWER_device_state_flag = 1;
 800c308:	4b11      	ldr	r3, [pc, #68]	; (800c350 <Power_button_pressed+0xa8>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	701a      	strb	r2, [r3, #0]
			//turn on display
			SSD1322_API_sleep_on();
 800c30e:	f7f6 fbcd 	bl	8002aac <SSD1322_API_sleep_on>
			//turn on radio
			RDA5807_PowerOn();
 800c312:	f7fa ffb7 	bl	8007284 <RDA5807_PowerOn>
			//RDA5807_Init();
			//turn off preamp
			//TDA7719_init();
			TDA7719_SetSoftMute(1, 1);
 800c316:	2101      	movs	r1, #1
 800c318:	2001      	movs	r0, #1
 800c31a:	f7fb fe49 	bl	8007fb0 <TDA7719_SetSoftMute>
			//change power led mode
			SettingsUserMenu.Power_LED = 1;
 800c31e:	4b0d      	ldr	r3, [pc, #52]	; (800c354 <Power_button_pressed+0xac>)
 800c320:	2201      	movs	r2, #1
 800c322:	715a      	strb	r2, [r3, #5]
			//read from eeprom settings
			EEPROM_Read_FilterSettings(&encoderFilterTreble, &encoderFilterMiddle, &encoderFilterBass, &encoderFilterLoudness);
 800c324:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <Power_button_pressed+0xb0>)
 800c326:	4a0d      	ldr	r2, [pc, #52]	; (800c35c <Power_button_pressed+0xb4>)
 800c328:	490d      	ldr	r1, [pc, #52]	; (800c360 <Power_button_pressed+0xb8>)
 800c32a:	480e      	ldr	r0, [pc, #56]	; (800c364 <Power_button_pressed+0xbc>)
 800c32c:	f7fa fc70 	bl	8006c10 <EEPROM_Read_FilterSettings>
			EEPROM_Read_UserSetting(&savedUserSettings);
 800c330:	480d      	ldr	r0, [pc, #52]	; (800c368 <Power_button_pressed+0xc0>)
 800c332:	f7fa fb7b 	bl	8006a2c <EEPROM_Read_UserSetting>
			EEPROM_Read_VolumeSettings(&encoderVolFront, &encoderVolBack);
 800c336:	490d      	ldr	r1, [pc, #52]	; (800c36c <Power_button_pressed+0xc4>)
 800c338:	480d      	ldr	r0, [pc, #52]	; (800c370 <Power_button_pressed+0xc8>)
 800c33a:	f7fa fbf4 	bl	8006b26 <EEPROM_Read_VolumeSettings>

		    }
	    }

	/* routine after power button is realesed*/
	if(HAL_GPIO_ReadPin(POWER_BUTTON_GPIO_Port, POWER_BUTTON_Pin) == GPIO_PIN_SET)
 800c33e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c342:	4802      	ldr	r0, [pc, #8]	; (800c34c <Power_button_pressed+0xa4>)
 800c344:	f003 fa60 	bl	800f808 <HAL_GPIO_ReadPin>
	    {


	    }
    }
 800c348:	bf00      	nop
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	48000400 	.word	0x48000400
 800c350:	200001fa 	.word	0x200001fa
 800c354:	20007c18 	.word	0x20007c18
 800c358:	2000053c 	.word	0x2000053c
 800c35c:	20000534 	.word	0x20000534
 800c360:	20000510 	.word	0x20000510
 800c364:	2000052c 	.word	0x2000052c
 800c368:	20000520 	.word	0x20000520
 800c36c:	20000518 	.word	0x20000518
 800c370:	20000554 	.word	0x20000554

0800c374 <Save_Station_Freq_2>:
// Static functions definictions
//--------------------------------------------------------------

//
static void Save_Station_Freq_2(void)
    {
 800c374:	b580      	push	{r7, lr}
 800c376:	af00      	add	r7, sp, #0
	static uint32_t button_tim;
	static uint32_t button_tim1;

	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800c378:	2104      	movs	r1, #4
 800c37a:	481c      	ldr	r0, [pc, #112]	; (800c3ec <Save_Station_Freq_2+0x78>)
 800c37c:	f003 fa44 	bl	800f808 <HAL_GPIO_ReadPin>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d104      	bne.n	800c390 <Save_Station_Freq_2+0x1c>
	    {
		button_tim = HAL_GetTick();
 800c386:	f000 fc6b 	bl	800cc60 <HAL_GetTick>
 800c38a:	4603      	mov	r3, r0
 800c38c:	4a18      	ldr	r2, [pc, #96]	; (800c3f0 <Save_Station_Freq_2+0x7c>)
 800c38e:	6013      	str	r3, [r2, #0]
	    }

	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_SET)
 800c390:	2104      	movs	r1, #4
 800c392:	4816      	ldr	r0, [pc, #88]	; (800c3ec <Save_Station_Freq_2+0x78>)
 800c394:	f003 fa38 	bl	800f808 <HAL_GPIO_ReadPin>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d124      	bne.n	800c3e8 <Save_Station_Freq_2+0x74>
	    {
		button_tim1 = HAL_GetTick();
 800c39e:	f000 fc5f 	bl	800cc60 <HAL_GetTick>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	4a13      	ldr	r2, [pc, #76]	; (800c3f4 <Save_Station_Freq_2+0x80>)
 800c3a6:	6013      	str	r3, [r2, #0]

		if (button_tim + 2000 <= button_tim1) //if holded for more than 2 secs
 800c3a8:	4b11      	ldr	r3, [pc, #68]	; (800c3f0 <Save_Station_Freq_2+0x7c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c3b0:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <Save_Station_Freq_2+0x80>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d805      	bhi.n	800c3c4 <Save_Station_Freq_2+0x50>
		    {
			savedUserSettings.stationSaved_2 = RDA5807_GetFrequency();
 800c3b8:	f7fb f810 	bl	80073dc <RDA5807_GetFrequency>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	461a      	mov	r2, r3
 800c3c0:	4b0d      	ldr	r3, [pc, #52]	; (800c3f8 <Save_Station_Freq_2+0x84>)
 800c3c2:	809a      	strh	r2, [r3, #4]
		    }

		if (button_tim + 2000 >= button_tim1) //if holed for less than 2 secs
 800c3c4:	4b0a      	ldr	r3, [pc, #40]	; (800c3f0 <Save_Station_Freq_2+0x7c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c3cc:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <Save_Station_Freq_2+0x80>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d309      	bcc.n	800c3e8 <Save_Station_Freq_2+0x74>
		    {
			RDA5807_SetFrequency(savedUserSettings.stationSaved_2);
 800c3d4:	4b08      	ldr	r3, [pc, #32]	; (800c3f8 <Save_Station_Freq_2+0x84>)
 800c3d6:	889b      	ldrh	r3, [r3, #4]
 800c3d8:	ee07 3a90 	vmov	s15, r3
 800c3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c3e4:	f7fa ffb4 	bl	8007350 <RDA5807_SetFrequency>
		    }
	    }
    }
 800c3e8:	bf00      	nop
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	48000400 	.word	0x48000400
 800c3f0:	20000224 	.word	0x20000224
 800c3f4:	20000228 	.word	0x20000228
 800c3f8:	20000520 	.word	0x20000520

0800c3fc <Save_Station_Freq_1>:

//
static void Save_Station_Freq_1(void)
    {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
	static uint32_t button_timer;
	static uint32_t button_timer1;

	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800c400:	2102      	movs	r1, #2
 800c402:	481c      	ldr	r0, [pc, #112]	; (800c474 <Save_Station_Freq_1+0x78>)
 800c404:	f003 fa00 	bl	800f808 <HAL_GPIO_ReadPin>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d104      	bne.n	800c418 <Save_Station_Freq_1+0x1c>
	    {
		button_timer = HAL_GetTick();
 800c40e:	f000 fc27 	bl	800cc60 <HAL_GetTick>
 800c412:	4603      	mov	r3, r0
 800c414:	4a18      	ldr	r2, [pc, #96]	; (800c478 <Save_Station_Freq_1+0x7c>)
 800c416:	6013      	str	r3, [r2, #0]
	    }

	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_SET)
 800c418:	2102      	movs	r1, #2
 800c41a:	4816      	ldr	r0, [pc, #88]	; (800c474 <Save_Station_Freq_1+0x78>)
 800c41c:	f003 f9f4 	bl	800f808 <HAL_GPIO_ReadPin>
 800c420:	4603      	mov	r3, r0
 800c422:	2b01      	cmp	r3, #1
 800c424:	d124      	bne.n	800c470 <Save_Station_Freq_1+0x74>
	    {
		button_timer1 = HAL_GetTick();
 800c426:	f000 fc1b 	bl	800cc60 <HAL_GetTick>
 800c42a:	4603      	mov	r3, r0
 800c42c:	4a13      	ldr	r2, [pc, #76]	; (800c47c <Save_Station_Freq_1+0x80>)
 800c42e:	6013      	str	r3, [r2, #0]

		if (button_timer + 2000 <= button_timer1) //if holded for more than 2 secs
 800c430:	4b11      	ldr	r3, [pc, #68]	; (800c478 <Save_Station_Freq_1+0x7c>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c438:	4b10      	ldr	r3, [pc, #64]	; (800c47c <Save_Station_Freq_1+0x80>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d805      	bhi.n	800c44c <Save_Station_Freq_1+0x50>
		    {
			savedUserSettings.stationSaved_1 = RDA5807_GetFrequency();
 800c440:	f7fa ffcc 	bl	80073dc <RDA5807_GetFrequency>
 800c444:	4603      	mov	r3, r0
 800c446:	461a      	mov	r2, r3
 800c448:	4b0d      	ldr	r3, [pc, #52]	; (800c480 <Save_Station_Freq_1+0x84>)
 800c44a:	805a      	strh	r2, [r3, #2]
			//EEPROM_Save_UserSetting(&savedUserSettings);
		    }

		if (button_timer + 2000 >= button_timer1) //if holed for less than 2 secs
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <Save_Station_Freq_1+0x7c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c454:	4b09      	ldr	r3, [pc, #36]	; (800c47c <Save_Station_Freq_1+0x80>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d309      	bcc.n	800c470 <Save_Station_Freq_1+0x74>
		    {
			RDA5807_SetFrequency(savedUserSettings.stationSaved_1);
 800c45c:	4b08      	ldr	r3, [pc, #32]	; (800c480 <Save_Station_Freq_1+0x84>)
 800c45e:	885b      	ldrh	r3, [r3, #2]
 800c460:	ee07 3a90 	vmov	s15, r3
 800c464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c468:	eeb0 0a67 	vmov.f32	s0, s15
 800c46c:	f7fa ff70 	bl	8007350 <RDA5807_SetFrequency>
		    }
	    }
    }
 800c470:	bf00      	nop
 800c472:	bd80      	pop	{r7, pc}
 800c474:	48000400 	.word	0x48000400
 800c478:	2000022c 	.word	0x2000022c
 800c47c:	20000230 	.word	0x20000230
 800c480:	20000520 	.word	0x20000520

0800c484 <Change_selected_setting>:

//
static void Change_selected_setting(void)
    {
 800c484:	b480      	push	{r7}
 800c486:	af00      	add	r7, sp, #0
	switch (SettingsUserMenu.SETTINGS_USER_MENU)
 800c488:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <Change_selected_setting+0x74>)
 800c48a:	7c1b      	ldrb	r3, [r3, #16]
 800c48c:	2b05      	cmp	r3, #5
 800c48e:	d82d      	bhi.n	800c4ec <Change_selected_setting+0x68>
 800c490:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <Change_selected_setting+0x14>)
 800c492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c496:	bf00      	nop
 800c498:	0800c4b9 	.word	0x0800c4b9
 800c49c:	0800c4c1 	.word	0x0800c4c1
 800c4a0:	0800c4b1 	.word	0x0800c4b1
 800c4a4:	0800c4c9 	.word	0x0800c4c9
 800c4a8:	0800c4d7 	.word	0x0800c4d7
 800c4ac:	0800c4df 	.word	0x0800c4df
	    {
	    case REFRESH_SCREEN_TIME:
		SettingsUserMenu.SETTINGS_USER_MENU = ALARM_SOURCE_A;
 800c4b0:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <Change_selected_setting+0x74>)
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	741a      	strb	r2, [r3, #16]
		break;
 800c4b6:	e01a      	b.n	800c4ee <Change_selected_setting+0x6a>
	    case ALARM_SOURCE_A:
		SettingsUserMenu.SETTINGS_USER_MENU = ALARM_SOURCE_B;
 800c4b8:	4b0f      	ldr	r3, [pc, #60]	; (800c4f8 <Change_selected_setting+0x74>)
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	741a      	strb	r2, [r3, #16]
		break;
 800c4be:	e016      	b.n	800c4ee <Change_selected_setting+0x6a>
	    case ALARM_SOURCE_B:
		SettingsUserMenu.SETTINGS_USER_MENU = USER_NAME;
 800c4c0:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <Change_selected_setting+0x74>)
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	741a      	strb	r2, [r3, #16]
		break;
 800c4c6:	e012      	b.n	800c4ee <Change_selected_setting+0x6a>
	    case USER_NAME:
		SettingsUserMenu.SETTINGS_USER_MENU = DISPLAY_MODE_ON_OFF;
 800c4c8:	4b0b      	ldr	r3, [pc, #44]	; (800c4f8 <Change_selected_setting+0x74>)
 800c4ca:	2204      	movs	r2, #4
 800c4cc:	741a      	strb	r2, [r3, #16]
		settings_page = PAGE_SETTINGS_2;
 800c4ce:	4b0b      	ldr	r3, [pc, #44]	; (800c4fc <Change_selected_setting+0x78>)
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	701a      	strb	r2, [r3, #0]
		break;
 800c4d4:	e00b      	b.n	800c4ee <Change_selected_setting+0x6a>
	    case DISPLAY_MODE_ON_OFF:
		SettingsUserMenu.SETTINGS_USER_MENU = POWER_LED;
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <Change_selected_setting+0x74>)
 800c4d8:	2205      	movs	r2, #5
 800c4da:	741a      	strb	r2, [r3, #16]
		break;
 800c4dc:	e007      	b.n	800c4ee <Change_selected_setting+0x6a>
	    case POWER_LED:
		SettingsUserMenu.SETTINGS_USER_MENU = REFRESH_SCREEN_TIME;
 800c4de:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <Change_selected_setting+0x74>)
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	741a      	strb	r2, [r3, #16]
		settings_page = PAGE_SETTINGS_1;
 800c4e4:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <Change_selected_setting+0x78>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
		break;
 800c4ea:	e000      	b.n	800c4ee <Change_selected_setting+0x6a>
	    default:
		break;
 800c4ec:	bf00      	nop
	    }
    }
 800c4ee:	bf00      	nop
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	20007c18 	.word	0x20007c18
 800c4fc:	200001a2 	.word	0x200001a2

0800c500 <Change_Down_Settings>:

//
static void Change_Down_Settings(void)
    {
 800c500:	b580      	push	{r7, lr}
 800c502:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800c504:	2102      	movs	r1, #2
 800c506:	4863      	ldr	r0, [pc, #396]	; (800c694 <Change_Down_Settings+0x194>)
 800c508:	f003 f97e 	bl	800f808 <HAL_GPIO_ReadPin>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f040 80b2 	bne.w	800c678 <Change_Down_Settings+0x178>
	    {
	switch (SettingsUserMenu.SETTINGS_USER_MENU)
 800c514:	4b60      	ldr	r3, [pc, #384]	; (800c698 <Change_Down_Settings+0x198>)
 800c516:	7c1b      	ldrb	r3, [r3, #16]
 800c518:	2b05      	cmp	r3, #5
 800c51a:	f200 80af 	bhi.w	800c67c <Change_Down_Settings+0x17c>
 800c51e:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <Change_Down_Settings+0x24>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c53d 	.word	0x0800c53d
 800c528:	0800c569 	.word	0x0800c569
 800c52c:	0800c593 	.word	0x0800c593
 800c530:	0800c5db 	.word	0x0800c5db
 800c534:	0800c5f7 	.word	0x0800c5f7
 800c538:	0800c65d 	.word	0x0800c65d
	    {
	    case ALARM_SOURCE_A:
		SettingsUserMenu.AlarmSource_A ++;
 800c53c:	4b56      	ldr	r3, [pc, #344]	; (800c698 <Change_Down_Settings+0x198>)
 800c53e:	789b      	ldrb	r3, [r3, #2]
 800c540:	3301      	adds	r3, #1
 800c542:	b2da      	uxtb	r2, r3
 800c544:	4b54      	ldr	r3, [pc, #336]	; (800c698 <Change_Down_Settings+0x198>)
 800c546:	709a      	strb	r2, [r3, #2]
		if(SettingsUserMenu.AlarmSource_A == 3) SettingsUserMenu.AlarmSource_A = RADIO;
 800c548:	4b53      	ldr	r3, [pc, #332]	; (800c698 <Change_Down_Settings+0x198>)
 800c54a:	789b      	ldrb	r3, [r3, #2]
 800c54c:	2b03      	cmp	r3, #3
 800c54e:	d102      	bne.n	800c556 <Change_Down_Settings+0x56>
 800c550:	4b51      	ldr	r3, [pc, #324]	; (800c698 <Change_Down_Settings+0x198>)
 800c552:	2205      	movs	r2, #5
 800c554:	709a      	strb	r2, [r3, #2]
		if(SettingsUserMenu.AlarmSource_A == 7) SettingsUserMenu.AlarmSource_A = JACK_1;
 800c556:	4b50      	ldr	r3, [pc, #320]	; (800c698 <Change_Down_Settings+0x198>)
 800c558:	789b      	ldrb	r3, [r3, #2]
 800c55a:	2b07      	cmp	r3, #7
 800c55c:	f040 8090 	bne.w	800c680 <Change_Down_Settings+0x180>
 800c560:	4b4d      	ldr	r3, [pc, #308]	; (800c698 <Change_Down_Settings+0x198>)
 800c562:	2201      	movs	r2, #1
 800c564:	709a      	strb	r2, [r3, #2]
		break;
 800c566:	e08b      	b.n	800c680 <Change_Down_Settings+0x180>
	    case ALARM_SOURCE_B:
		SettingsUserMenu.AlarmSource_B ++;
 800c568:	4b4b      	ldr	r3, [pc, #300]	; (800c698 <Change_Down_Settings+0x198>)
 800c56a:	78db      	ldrb	r3, [r3, #3]
 800c56c:	3301      	adds	r3, #1
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	4b49      	ldr	r3, [pc, #292]	; (800c698 <Change_Down_Settings+0x198>)
 800c572:	70da      	strb	r2, [r3, #3]
		if(SettingsUserMenu.AlarmSource_B == 3) SettingsUserMenu.AlarmSource_B = RADIO;
 800c574:	4b48      	ldr	r3, [pc, #288]	; (800c698 <Change_Down_Settings+0x198>)
 800c576:	78db      	ldrb	r3, [r3, #3]
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d102      	bne.n	800c582 <Change_Down_Settings+0x82>
 800c57c:	4b46      	ldr	r3, [pc, #280]	; (800c698 <Change_Down_Settings+0x198>)
 800c57e:	2205      	movs	r2, #5
 800c580:	70da      	strb	r2, [r3, #3]
		if(SettingsUserMenu.AlarmSource_B == 7) SettingsUserMenu.AlarmSource_B = JACK_1;
 800c582:	4b45      	ldr	r3, [pc, #276]	; (800c698 <Change_Down_Settings+0x198>)
 800c584:	78db      	ldrb	r3, [r3, #3]
 800c586:	2b07      	cmp	r3, #7
 800c588:	d17c      	bne.n	800c684 <Change_Down_Settings+0x184>
 800c58a:	4b43      	ldr	r3, [pc, #268]	; (800c698 <Change_Down_Settings+0x198>)
 800c58c:	2201      	movs	r2, #1
 800c58e:	70da      	strb	r2, [r3, #3]
		break;
 800c590:	e078      	b.n	800c684 <Change_Down_Settings+0x184>
	    case REFRESH_SCREEN_TIME:
		{
		    if (SettingsUserMenu.Display_mode == Disp_normal)
 800c592:	4b41      	ldr	r3, [pc, #260]	; (800c698 <Change_Down_Settings+0x198>)
 800c594:	791b      	ldrb	r3, [r3, #4]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d104      	bne.n	800c5a4 <Change_Down_Settings+0xa4>
			{
			    SettingsUserMenu.RefreshScreenTime = 65535;
 800c59a:	4b3f      	ldr	r3, [pc, #252]	; (800c698 <Change_Down_Settings+0x198>)
 800c59c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5a0:	801a      	strh	r2, [r3, #0]
			    break;
 800c5a2:	e074      	b.n	800c68e <Change_Down_Settings+0x18e>
			}
		    refresh_time--;
 800c5a4:	4b3d      	ldr	r3, [pc, #244]	; (800c69c <Change_Down_Settings+0x19c>)
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	4b3b      	ldr	r3, [pc, #236]	; (800c69c <Change_Down_Settings+0x19c>)
 800c5ae:	701a      	strb	r2, [r3, #0]
		    if(refresh_time == 0) refresh_time = 5;
 800c5b0:	4b3a      	ldr	r3, [pc, #232]	; (800c69c <Change_Down_Settings+0x19c>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <Change_Down_Settings+0xbe>
 800c5b8:	4b38      	ldr	r3, [pc, #224]	; (800c69c <Change_Down_Settings+0x19c>)
 800c5ba:	2205      	movs	r2, #5
 800c5bc:	701a      	strb	r2, [r3, #0]
		    SettingsUserMenu.RefreshScreenTime = refresh_time_values[refresh_time];
 800c5be:	4b37      	ldr	r3, [pc, #220]	; (800c69c <Change_Down_Settings+0x19c>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4b36      	ldr	r3, [pc, #216]	; (800c6a0 <Change_Down_Settings+0x1a0>)
 800c5c6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c5ca:	4b33      	ldr	r3, [pc, #204]	; (800c698 <Change_Down_Settings+0x198>)
 800c5cc:	801a      	strh	r2, [r3, #0]
		    set_change_time_of_display(SettingsUserMenu.RefreshScreenTime);
 800c5ce:	4b32      	ldr	r3, [pc, #200]	; (800c698 <Change_Down_Settings+0x198>)
 800c5d0:	881b      	ldrh	r3, [r3, #0]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7f6 fad4 	bl	8002b80 <set_change_time_of_display>
		}
		break;
 800c5d8:	e059      	b.n	800c68e <Change_Down_Settings+0x18e>
	    case USER_NAME:
		{
		    inc++;
 800c5da:	4b32      	ldr	r3, [pc, #200]	; (800c6a4 <Change_Down_Settings+0x1a4>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	4b30      	ldr	r3, [pc, #192]	; (800c6a4 <Change_Down_Settings+0x1a4>)
 800c5e4:	701a      	strb	r2, [r3, #0]
		    if(inc == 10) inc = 0;
 800c5e6:	4b2f      	ldr	r3, [pc, #188]	; (800c6a4 <Change_Down_Settings+0x1a4>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b0a      	cmp	r3, #10
 800c5ec:	d14c      	bne.n	800c688 <Change_Down_Settings+0x188>
 800c5ee:	4b2d      	ldr	r3, [pc, #180]	; (800c6a4 <Change_Down_Settings+0x1a4>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	701a      	strb	r2, [r3, #0]
		}
		break;
 800c5f4:	e048      	b.n	800c688 <Change_Down_Settings+0x188>
	    case DISPLAY_MODE_ON_OFF:
		{
		    //go to sleep mode after no actions is taken after 3 sec
		    SettingsUserMenu.Display_mode++;
 800c5f6:	4b28      	ldr	r3, [pc, #160]	; (800c698 <Change_Down_Settings+0x198>)
 800c5f8:	791b      	ldrb	r3, [r3, #4]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	4b26      	ldr	r3, [pc, #152]	; (800c698 <Change_Down_Settings+0x198>)
 800c600:	711a      	strb	r2, [r3, #4]
		    if(SettingsUserMenu.Display_mode == 5) SettingsUserMenu.Display_mode = 1;
 800c602:	4b25      	ldr	r3, [pc, #148]	; (800c698 <Change_Down_Settings+0x198>)
 800c604:	791b      	ldrb	r3, [r3, #4]
 800c606:	2b05      	cmp	r3, #5
 800c608:	d102      	bne.n	800c610 <Change_Down_Settings+0x110>
 800c60a:	4b23      	ldr	r3, [pc, #140]	; (800c698 <Change_Down_Settings+0x198>)
 800c60c:	2201      	movs	r2, #1
 800c60e:	711a      	strb	r2, [r3, #4]
		    if(SettingsUserMenu.Display_mode == Disp_normal) SettingsUserMenu.RefreshScreenTime = 65535;
 800c610:	4b21      	ldr	r3, [pc, #132]	; (800c698 <Change_Down_Settings+0x198>)
 800c612:	791b      	ldrb	r3, [r3, #4]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d103      	bne.n	800c620 <Change_Down_Settings+0x120>
 800c618:	4b1f      	ldr	r3, [pc, #124]	; (800c698 <Change_Down_Settings+0x198>)
 800c61a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c61e:	801a      	strh	r2, [r3, #0]
		    if(SettingsUserMenu.Display_mode == Disp_standby)
 800c620:	4b1d      	ldr	r3, [pc, #116]	; (800c698 <Change_Down_Settings+0x198>)
 800c622:	791b      	ldrb	r3, [r3, #4]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d115      	bne.n	800c654 <Change_Down_Settings+0x154>
			{
			    is_display_on_standby_flag = true;
 800c628:	4b1f      	ldr	r3, [pc, #124]	; (800c6a8 <Change_Down_Settings+0x1a8>)
 800c62a:	2201      	movs	r2, #1
 800c62c:	701a      	strb	r2, [r3, #0]
			    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c62e:	2200      	movs	r2, #0
 800c630:	491e      	ldr	r1, [pc, #120]	; (800c6ac <Change_Down_Settings+0x1ac>)
 800c632:	481f      	ldr	r0, [pc, #124]	; (800c6b0 <Change_Down_Settings+0x1b0>)
 800c634:	f006 f944 	bl	80128c0 <HAL_RTC_GetTime>
			    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c638:	2200      	movs	r2, #0
 800c63a:	491e      	ldr	r1, [pc, #120]	; (800c6b4 <Change_Down_Settings+0x1b4>)
 800c63c:	481c      	ldr	r0, [pc, #112]	; (800c6b0 <Change_Down_Settings+0x1b0>)
 800c63e:	f006 fa29 	bl	8012a94 <HAL_RTC_GetDate>
			    saved_seconds = sTime.Seconds;
 800c642:	4b1a      	ldr	r3, [pc, #104]	; (800c6ac <Change_Down_Settings+0x1ac>)
 800c644:	789a      	ldrb	r2, [r3, #2]
 800c646:	4b1c      	ldr	r3, [pc, #112]	; (800c6b8 <Change_Down_Settings+0x1b8>)
 800c648:	701a      	strb	r2, [r3, #0]
			    saved_minutes = sTime.Minutes;
 800c64a:	4b18      	ldr	r3, [pc, #96]	; (800c6ac <Change_Down_Settings+0x1ac>)
 800c64c:	785a      	ldrb	r2, [r3, #1]
 800c64e:	4b1b      	ldr	r3, [pc, #108]	; (800c6bc <Change_Down_Settings+0x1bc>)
 800c650:	701a      	strb	r2, [r3, #0]
		    else
			{
			    is_display_on_standby_flag = false;
			}
		}
		break;
 800c652:	e01c      	b.n	800c68e <Change_Down_Settings+0x18e>
			    is_display_on_standby_flag = false;
 800c654:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <Change_Down_Settings+0x1a8>)
 800c656:	2200      	movs	r2, #0
 800c658:	701a      	strb	r2, [r3, #0]
		break;
 800c65a:	e018      	b.n	800c68e <Change_Down_Settings+0x18e>
	    case POWER_LED:
		{
		    SettingsUserMenu.Power_LED++;
 800c65c:	4b0e      	ldr	r3, [pc, #56]	; (800c698 <Change_Down_Settings+0x198>)
 800c65e:	795b      	ldrb	r3, [r3, #5]
 800c660:	3301      	adds	r3, #1
 800c662:	b2da      	uxtb	r2, r3
 800c664:	4b0c      	ldr	r3, [pc, #48]	; (800c698 <Change_Down_Settings+0x198>)
 800c666:	715a      	strb	r2, [r3, #5]
		    if(SettingsUserMenu.Power_LED == 6) SettingsUserMenu.Power_LED = 1;
 800c668:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <Change_Down_Settings+0x198>)
 800c66a:	795b      	ldrb	r3, [r3, #5]
 800c66c:	2b06      	cmp	r3, #6
 800c66e:	d10d      	bne.n	800c68c <Change_Down_Settings+0x18c>
 800c670:	4b09      	ldr	r3, [pc, #36]	; (800c698 <Change_Down_Settings+0x198>)
 800c672:	2201      	movs	r2, #1
 800c674:	715a      	strb	r2, [r3, #5]
		}
		break;
 800c676:	e009      	b.n	800c68c <Change_Down_Settings+0x18c>
	    default:
		break;
	    }
	    }
 800c678:	bf00      	nop
 800c67a:	e008      	b.n	800c68e <Change_Down_Settings+0x18e>
		break;
 800c67c:	bf00      	nop
 800c67e:	e006      	b.n	800c68e <Change_Down_Settings+0x18e>
		break;
 800c680:	bf00      	nop
 800c682:	e004      	b.n	800c68e <Change_Down_Settings+0x18e>
		break;
 800c684:	bf00      	nop
 800c686:	e002      	b.n	800c68e <Change_Down_Settings+0x18e>
		break;
 800c688:	bf00      	nop
 800c68a:	e000      	b.n	800c68e <Change_Down_Settings+0x18e>
		break;
 800c68c:	bf00      	nop
    }
 800c68e:	bf00      	nop
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	48000400 	.word	0x48000400
 800c698:	20007c18 	.word	0x20007c18
 800c69c:	200000b8 	.word	0x200000b8
 800c6a0:	08018094 	.word	0x08018094
 800c6a4:	20000208 	.word	0x20000208
 800c6a8:	200001a5 	.word	0x200001a5
 800c6ac:	2000178c 	.word	0x2000178c
 800c6b0:	20007828 	.word	0x20007828
 800c6b4:	200057bc 	.word	0x200057bc
 800c6b8:	200001a3 	.word	0x200001a3
 800c6bc:	200001a4 	.word	0x200001a4

0800c6c0 <Change_Up_Settings>:

//
static void Change_Up_Settings(void)
    {
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800c6c4:	2104      	movs	r1, #4
 800c6c6:	4866      	ldr	r0, [pc, #408]	; (800c860 <Change_Up_Settings+0x1a0>)
 800c6c8:	f003 f89e 	bl	800f808 <HAL_GPIO_ReadPin>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f040 80ba 	bne.w	800c848 <Change_Up_Settings+0x188>
	    {
		switch (SettingsUserMenu.SETTINGS_USER_MENU)
 800c6d4:	4b63      	ldr	r3, [pc, #396]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c6d6:	7c1b      	ldrb	r3, [r3, #16]
 800c6d8:	2b05      	cmp	r3, #5
 800c6da:	f200 80b7 	bhi.w	800c84c <Change_Up_Settings+0x18c>
 800c6de:	a201      	add	r2, pc, #4	; (adr r2, 800c6e4 <Change_Up_Settings+0x24>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c6fd 	.word	0x0800c6fd
 800c6e8:	0800c729 	.word	0x0800c729
 800c6ec:	0800c755 	.word	0x0800c755
 800c6f0:	0800c79d 	.word	0x0800c79d
 800c6f4:	0800c7c7 	.word	0x0800c7c7
 800c6f8:	0800c82d 	.word	0x0800c82d
		    {
		    case ALARM_SOURCE_A:
			SettingsUserMenu.AlarmSource_A--;
 800c6fc:	4b59      	ldr	r3, [pc, #356]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c6fe:	789b      	ldrb	r3, [r3, #2]
 800c700:	3b01      	subs	r3, #1
 800c702:	b2da      	uxtb	r2, r3
 800c704:	4b57      	ldr	r3, [pc, #348]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c706:	709a      	strb	r2, [r3, #2]
			if (SettingsUserMenu.AlarmSource_A == 4)
 800c708:	4b56      	ldr	r3, [pc, #344]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c70a:	789b      	ldrb	r3, [r3, #2]
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d102      	bne.n	800c716 <Change_Up_Settings+0x56>
			    SettingsUserMenu.AlarmSource_A = JACK_2;
 800c710:	4b54      	ldr	r3, [pc, #336]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c712:	2202      	movs	r2, #2
 800c714:	709a      	strb	r2, [r3, #2]
			if (SettingsUserMenu.AlarmSource_A == 255)
 800c716:	4b53      	ldr	r3, [pc, #332]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c718:	789b      	ldrb	r3, [r3, #2]
 800c71a:	2bff      	cmp	r3, #255	; 0xff
 800c71c:	f040 8098 	bne.w	800c850 <Change_Up_Settings+0x190>
			    SettingsUserMenu.AlarmSource_A = MICROPHONE;
 800c720:	4b50      	ldr	r3, [pc, #320]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c722:	2206      	movs	r2, #6
 800c724:	709a      	strb	r2, [r3, #2]
			break;
 800c726:	e093      	b.n	800c850 <Change_Up_Settings+0x190>
		    case ALARM_SOURCE_B:
			SettingsUserMenu.AlarmSource_B--;
 800c728:	4b4e      	ldr	r3, [pc, #312]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c72a:	78db      	ldrb	r3, [r3, #3]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	4b4c      	ldr	r3, [pc, #304]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c732:	70da      	strb	r2, [r3, #3]
			if (SettingsUserMenu.AlarmSource_B == 4)
 800c734:	4b4b      	ldr	r3, [pc, #300]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c736:	78db      	ldrb	r3, [r3, #3]
 800c738:	2b04      	cmp	r3, #4
 800c73a:	d102      	bne.n	800c742 <Change_Up_Settings+0x82>
			    SettingsUserMenu.AlarmSource_B = JACK_2;
 800c73c:	4b49      	ldr	r3, [pc, #292]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c73e:	2202      	movs	r2, #2
 800c740:	70da      	strb	r2, [r3, #3]
			if (SettingsUserMenu.AlarmSource_B == 255)
 800c742:	4b48      	ldr	r3, [pc, #288]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c744:	78db      	ldrb	r3, [r3, #3]
 800c746:	2bff      	cmp	r3, #255	; 0xff
 800c748:	f040 8084 	bne.w	800c854 <Change_Up_Settings+0x194>
			    SettingsUserMenu.AlarmSource_B = MICROPHONE;
 800c74c:	4b45      	ldr	r3, [pc, #276]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c74e:	2206      	movs	r2, #6
 800c750:	70da      	strb	r2, [r3, #3]
			break;
 800c752:	e07f      	b.n	800c854 <Change_Up_Settings+0x194>
		    case REFRESH_SCREEN_TIME:
			{
			    if (SettingsUserMenu.Display_mode == Disp_normal)
 800c754:	4b43      	ldr	r3, [pc, #268]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c756:	791b      	ldrb	r3, [r3, #4]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d104      	bne.n	800c766 <Change_Up_Settings+0xa6>
				{
				    SettingsUserMenu.RefreshScreenTime = 65535;
 800c75c:	4b41      	ldr	r3, [pc, #260]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c762:	801a      	strh	r2, [r3, #0]
				    break;
 800c764:	e079      	b.n	800c85a <Change_Up_Settings+0x19a>
				}
			    refresh_time++;
 800c766:	4b40      	ldr	r3, [pc, #256]	; (800c868 <Change_Up_Settings+0x1a8>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	3301      	adds	r3, #1
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	4b3e      	ldr	r3, [pc, #248]	; (800c868 <Change_Up_Settings+0x1a8>)
 800c770:	701a      	strb	r2, [r3, #0]
			    if (refresh_time == 6)refresh_time = 1;
 800c772:	4b3d      	ldr	r3, [pc, #244]	; (800c868 <Change_Up_Settings+0x1a8>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	2b06      	cmp	r3, #6
 800c778:	d102      	bne.n	800c780 <Change_Up_Settings+0xc0>
 800c77a:	4b3b      	ldr	r3, [pc, #236]	; (800c868 <Change_Up_Settings+0x1a8>)
 800c77c:	2201      	movs	r2, #1
 800c77e:	701a      	strb	r2, [r3, #0]
			    SettingsUserMenu.RefreshScreenTime = refresh_time_values[refresh_time];
 800c780:	4b39      	ldr	r3, [pc, #228]	; (800c868 <Change_Up_Settings+0x1a8>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	461a      	mov	r2, r3
 800c786:	4b39      	ldr	r3, [pc, #228]	; (800c86c <Change_Up_Settings+0x1ac>)
 800c788:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c78c:	4b35      	ldr	r3, [pc, #212]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c78e:	801a      	strh	r2, [r3, #0]
			    set_change_time_of_display(SettingsUserMenu.RefreshScreenTime);
 800c790:	4b34      	ldr	r3, [pc, #208]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	4618      	mov	r0, r3
 800c796:	f7f6 f9f3 	bl	8002b80 <set_change_time_of_display>
			}
			break;
 800c79a:	e05e      	b.n	800c85a <Change_Up_Settings+0x19a>
		    case USER_NAME:
			    letter++;
 800c79c:	4b34      	ldr	r3, [pc, #208]	; (800c870 <Change_Up_Settings+0x1b0>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	4b32      	ldr	r3, [pc, #200]	; (800c870 <Change_Up_Settings+0x1b0>)
 800c7a6:	701a      	strb	r2, [r3, #0]
			    if(letter == '{') letter = 'a';
 800c7a8:	4b31      	ldr	r3, [pc, #196]	; (800c870 <Change_Up_Settings+0x1b0>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	2b7b      	cmp	r3, #123	; 0x7b
 800c7ae:	d102      	bne.n	800c7b6 <Change_Up_Settings+0xf6>
 800c7b0:	4b2f      	ldr	r3, [pc, #188]	; (800c870 <Change_Up_Settings+0x1b0>)
 800c7b2:	2261      	movs	r2, #97	; 0x61
 800c7b4:	701a      	strb	r2, [r3, #0]
			    user_name[inc] = letter;
 800c7b6:	4b2f      	ldr	r3, [pc, #188]	; (800c874 <Change_Up_Settings+0x1b4>)
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	4b2c      	ldr	r3, [pc, #176]	; (800c870 <Change_Up_Settings+0x1b0>)
 800c7be:	7819      	ldrb	r1, [r3, #0]
 800c7c0:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <Change_Up_Settings+0x1b8>)
 800c7c2:	5499      	strb	r1, [r3, r2]
			break;
 800c7c4:	e049      	b.n	800c85a <Change_Up_Settings+0x19a>
		    case DISPLAY_MODE_ON_OFF:
			    SettingsUserMenu.Display_mode--;
 800c7c6:	4b27      	ldr	r3, [pc, #156]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c7c8:	791b      	ldrb	r3, [r3, #4]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	4b25      	ldr	r3, [pc, #148]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c7d0:	711a      	strb	r2, [r3, #4]
			    if(SettingsUserMenu.Display_mode == 0) SettingsUserMenu.Display_mode = 4;
 800c7d2:	4b24      	ldr	r3, [pc, #144]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c7d4:	791b      	ldrb	r3, [r3, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <Change_Up_Settings+0x120>
 800c7da:	4b22      	ldr	r3, [pc, #136]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c7dc:	2204      	movs	r2, #4
 800c7de:	711a      	strb	r2, [r3, #4]
			    if(SettingsUserMenu.Display_mode == Disp_normal) SettingsUserMenu.RefreshScreenTime = 65535;
 800c7e0:	4b20      	ldr	r3, [pc, #128]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c7e2:	791b      	ldrb	r3, [r3, #4]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d103      	bne.n	800c7f0 <Change_Up_Settings+0x130>
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c7ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ee:	801a      	strh	r2, [r3, #0]
			    if(SettingsUserMenu.Display_mode == Disp_standby)
 800c7f0:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c7f2:	791b      	ldrb	r3, [r3, #4]
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d115      	bne.n	800c824 <Change_Up_Settings+0x164>
				{
				    is_display_on_standby_flag = true;
 800c7f8:	4b20      	ldr	r3, [pc, #128]	; (800c87c <Change_Up_Settings+0x1bc>)
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	701a      	strb	r2, [r3, #0]
				    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c7fe:	2200      	movs	r2, #0
 800c800:	491f      	ldr	r1, [pc, #124]	; (800c880 <Change_Up_Settings+0x1c0>)
 800c802:	4820      	ldr	r0, [pc, #128]	; (800c884 <Change_Up_Settings+0x1c4>)
 800c804:	f006 f85c 	bl	80128c0 <HAL_RTC_GetTime>
				    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c808:	2200      	movs	r2, #0
 800c80a:	491f      	ldr	r1, [pc, #124]	; (800c888 <Change_Up_Settings+0x1c8>)
 800c80c:	481d      	ldr	r0, [pc, #116]	; (800c884 <Change_Up_Settings+0x1c4>)
 800c80e:	f006 f941 	bl	8012a94 <HAL_RTC_GetDate>
				    saved_seconds = sTime.Seconds;
 800c812:	4b1b      	ldr	r3, [pc, #108]	; (800c880 <Change_Up_Settings+0x1c0>)
 800c814:	789a      	ldrb	r2, [r3, #2]
 800c816:	4b1d      	ldr	r3, [pc, #116]	; (800c88c <Change_Up_Settings+0x1cc>)
 800c818:	701a      	strb	r2, [r3, #0]
				    saved_minutes = sTime.Minutes;
 800c81a:	4b19      	ldr	r3, [pc, #100]	; (800c880 <Change_Up_Settings+0x1c0>)
 800c81c:	785a      	ldrb	r2, [r3, #1]
 800c81e:	4b1c      	ldr	r3, [pc, #112]	; (800c890 <Change_Up_Settings+0x1d0>)
 800c820:	701a      	strb	r2, [r3, #0]
				}
			    else
				{
				    is_display_on_standby_flag = false;
				}
			break;
 800c822:	e01a      	b.n	800c85a <Change_Up_Settings+0x19a>
				    is_display_on_standby_flag = false;
 800c824:	4b15      	ldr	r3, [pc, #84]	; (800c87c <Change_Up_Settings+0x1bc>)
 800c826:	2200      	movs	r2, #0
 800c828:	701a      	strb	r2, [r3, #0]
			break;
 800c82a:	e016      	b.n	800c85a <Change_Up_Settings+0x19a>
		    case POWER_LED:
			    SettingsUserMenu.Power_LED--;
 800c82c:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c82e:	795b      	ldrb	r3, [r3, #5]
 800c830:	3b01      	subs	r3, #1
 800c832:	b2da      	uxtb	r2, r3
 800c834:	4b0b      	ldr	r3, [pc, #44]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c836:	715a      	strb	r2, [r3, #5]
			    if(SettingsUserMenu.Power_LED == 0) SettingsUserMenu.Power_LED = 5;
 800c838:	4b0a      	ldr	r3, [pc, #40]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c83a:	795b      	ldrb	r3, [r3, #5]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10b      	bne.n	800c858 <Change_Up_Settings+0x198>
 800c840:	4b08      	ldr	r3, [pc, #32]	; (800c864 <Change_Up_Settings+0x1a4>)
 800c842:	2205      	movs	r2, #5
 800c844:	715a      	strb	r2, [r3, #5]
			break;
 800c846:	e007      	b.n	800c858 <Change_Up_Settings+0x198>
		    default:
			break;
		    }
	    }
 800c848:	bf00      	nop
 800c84a:	e006      	b.n	800c85a <Change_Up_Settings+0x19a>
			break;
 800c84c:	bf00      	nop
 800c84e:	e004      	b.n	800c85a <Change_Up_Settings+0x19a>
			break;
 800c850:	bf00      	nop
 800c852:	e002      	b.n	800c85a <Change_Up_Settings+0x19a>
			break;
 800c854:	bf00      	nop
 800c856:	e000      	b.n	800c85a <Change_Up_Settings+0x19a>
			break;
 800c858:	bf00      	nop
    }
 800c85a:	bf00      	nop
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	48000400 	.word	0x48000400
 800c864:	20007c18 	.word	0x20007c18
 800c868:	200000b8 	.word	0x200000b8
 800c86c:	08018094 	.word	0x08018094
 800c870:	200000b9 	.word	0x200000b9
 800c874:	20000208 	.word	0x20000208
 800c878:	200004fc 	.word	0x200004fc
 800c87c:	200001a5 	.word	0x200001a5
 800c880:	2000178c 	.word	0x2000178c
 800c884:	20007828 	.word	0x20007828
 800c888:	200057bc 	.word	0x200057bc
 800c88c:	200001a3 	.word	0x200001a3
 800c890:	200001a4 	.word	0x200001a4

0800c894 <Change_Down_Input>:

//
static void Change_Down_Input(void)
    {
 800c894:	b580      	push	{r7, lr}
 800c896:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800c898:	2102      	movs	r1, #2
 800c89a:	4834      	ldr	r0, [pc, #208]	; (800c96c <Change_Down_Input+0xd8>)
 800c89c:	f002 ffb4 	bl	800f808 <HAL_GPIO_ReadPin>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d160      	bne.n	800c968 <Change_Down_Input+0xd4>
	    {
		switch (TDA7719_config.set_input_front)
 800c8a6:	4b32      	ldr	r3, [pc, #200]	; (800c970 <Change_Down_Input+0xdc>)
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	2b06      	cmp	r3, #6
 800c8ae:	d84f      	bhi.n	800c950 <Change_Down_Input+0xbc>
 800c8b0:	a201      	add	r2, pc, #4	; (adr r2, 800c8b8 <Change_Down_Input+0x24>)
 800c8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b6:	bf00      	nop
 800c8b8:	0800c8d5 	.word	0x0800c8d5
 800c8bc:	0800c8dd 	.word	0x0800c8dd
 800c8c0:	0800c8e5 	.word	0x0800c8e5
 800c8c4:	0800c951 	.word	0x0800c951
 800c8c8:	0800c951 	.word	0x0800c951
 800c8cc:	0800c923 	.word	0x0800c923
 800c8d0:	0800c949 	.word	0x0800c949
		    {
		    case BLUETOOTH:
			TDA7719_config.set_input_front = JACK_1;
 800c8d4:	4b26      	ldr	r3, [pc, #152]	; (800c970 <Change_Down_Input+0xdc>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	701a      	strb	r2, [r3, #0]
			break;
 800c8da:	e03e      	b.n	800c95a <Change_Down_Input+0xc6>
		    case JACK_1:
			TDA7719_config.set_input_front = JACK_2;
 800c8dc:	4b24      	ldr	r3, [pc, #144]	; (800c970 <Change_Down_Input+0xdc>)
 800c8de:	2202      	movs	r2, #2
 800c8e0:	701a      	strb	r2, [r3, #0]
			break;
 800c8e2:	e03a      	b.n	800c95a <Change_Down_Input+0xc6>
		    case JACK_2:
			TDA7719_config.set_input_front = RADIO;
 800c8e4:	4b22      	ldr	r3, [pc, #136]	; (800c970 <Change_Down_Input+0xdc>)
 800c8e6:	2205      	movs	r2, #5
 800c8e8:	701a      	strb	r2, [r3, #0]
			RADIO_IS_ON_front_flag = true;
 800c8ea:	4b22      	ldr	r3, [pc, #136]	; (800c974 <Change_Down_Input+0xe0>)
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_front_flag == true && RADIO_IS_ON_back_flag == false)
 800c8f0:	4b20      	ldr	r3, [pc, #128]	; (800c974 <Change_Down_Input+0xe0>)
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d12c      	bne.n	800c954 <Change_Down_Input+0xc0>
 800c8fa:	4b1f      	ldr	r3, [pc, #124]	; (800c978 <Change_Down_Input+0xe4>)
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b00      	cmp	r3, #0
 800c902:	d127      	bne.n	800c954 <Change_Down_Input+0xc0>
			    {
				RDA5807_Init();
 800c904:	f7fa fc98 	bl	8007238 <RDA5807_Init>
				RDA5807_PowerOn();
 800c908:	f7fa fcbc 	bl	8007284 <RDA5807_PowerOn>
				RDA5807_SetFrequency(savedUserSettings.radio_freq);
 800c90c:	4b1b      	ldr	r3, [pc, #108]	; (800c97c <Change_Down_Input+0xe8>)
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	ee07 3a90 	vmov	s15, r3
 800c914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c918:	eeb0 0a67 	vmov.f32	s0, s15
 800c91c:	f7fa fd18 	bl	8007350 <RDA5807_SetFrequency>
				break;
 800c920:	e01b      	b.n	800c95a <Change_Down_Input+0xc6>
			    }
			else
			    break;
		    case RADIO:
			TDA7719_config.set_input_front = MICROPHONE;
 800c922:	4b13      	ldr	r3, [pc, #76]	; (800c970 <Change_Down_Input+0xdc>)
 800c924:	2206      	movs	r2, #6
 800c926:	701a      	strb	r2, [r3, #0]
			RADIO_IS_ON_front_flag = false;
 800c928:	4b12      	ldr	r3, [pc, #72]	; (800c974 <Change_Down_Input+0xe0>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_front_flag == false && RADIO_IS_ON_back_flag == false)
 800c92e:	4b11      	ldr	r3, [pc, #68]	; (800c974 <Change_Down_Input+0xe0>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10f      	bne.n	800c958 <Change_Down_Input+0xc4>
 800c938:	4b0f      	ldr	r3, [pc, #60]	; (800c978 <Change_Down_Input+0xe4>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10a      	bne.n	800c958 <Change_Down_Input+0xc4>
			    {
				RDA5807_PowerOff();
 800c942:	f7fa fcbb 	bl	80072bc <RDA5807_PowerOff>
			    }
			break;
 800c946:	e007      	b.n	800c958 <Change_Down_Input+0xc4>
		    case MICROPHONE:
			TDA7719_config.set_input_front = BLUETOOTH;
 800c948:	4b09      	ldr	r3, [pc, #36]	; (800c970 <Change_Down_Input+0xdc>)
 800c94a:	2200      	movs	r2, #0
 800c94c:	701a      	strb	r2, [r3, #0]
			break;
 800c94e:	e004      	b.n	800c95a <Change_Down_Input+0xc6>
		    default:
			break;
 800c950:	bf00      	nop
 800c952:	e002      	b.n	800c95a <Change_Down_Input+0xc6>
		    }
		TDA7719_SetMainInput(TDA7719_config.set_input_front);
 800c954:	bf00      	nop
 800c956:	e000      	b.n	800c95a <Change_Down_Input+0xc6>
			break;
 800c958:	bf00      	nop
		TDA7719_SetMainInput(TDA7719_config.set_input_front);
 800c95a:	4b05      	ldr	r3, [pc, #20]	; (800c970 <Change_Down_Input+0xdc>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	b25b      	sxtb	r3, r3
 800c962:	4618      	mov	r0, r3
 800c964:	f7fb fad0 	bl	8007f08 <TDA7719_SetMainInput>
	    }
    }
 800c968:	bf00      	nop
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	48000400 	.word	0x48000400
 800c970:	20000544 	.word	0x20000544
 800c974:	200077f8 	.word	0x200077f8
 800c978:	200037b9 	.word	0x200037b9
 800c97c:	20000520 	.word	0x20000520

0800c980 <Change_Up_Input>:

//
static void Change_Up_Input(void)
    {
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800c984:	2104      	movs	r1, #4
 800c986:	4834      	ldr	r0, [pc, #208]	; (800ca58 <Change_Up_Input+0xd8>)
 800c988:	f002 ff3e 	bl	800f808 <HAL_GPIO_ReadPin>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d160      	bne.n	800ca54 <Change_Up_Input+0xd4>
	    {
		switch (TDA7719_config.set_input_back)
 800c992:	4b32      	ldr	r3, [pc, #200]	; (800ca5c <Change_Up_Input+0xdc>)
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b06      	cmp	r3, #6
 800c99a:	d84f      	bhi.n	800ca3c <Change_Up_Input+0xbc>
 800c99c:	a201      	add	r2, pc, #4	; (adr r2, 800c9a4 <Change_Up_Input+0x24>)
 800c99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a2:	bf00      	nop
 800c9a4:	0800c9c1 	.word	0x0800c9c1
 800c9a8:	0800c9c9 	.word	0x0800c9c9
 800c9ac:	0800c9d1 	.word	0x0800c9d1
 800c9b0:	0800ca3d 	.word	0x0800ca3d
 800c9b4:	0800ca3d 	.word	0x0800ca3d
 800c9b8:	0800ca0f 	.word	0x0800ca0f
 800c9bc:	0800ca35 	.word	0x0800ca35
		    {
		    case BLUETOOTH:
			TDA7719_config.set_input_back = JACK_1;
 800c9c0:	4b26      	ldr	r3, [pc, #152]	; (800ca5c <Change_Up_Input+0xdc>)
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	705a      	strb	r2, [r3, #1]
			break;
 800c9c6:	e03e      	b.n	800ca46 <Change_Up_Input+0xc6>
		    case JACK_1:
			TDA7719_config.set_input_back = JACK_2;
 800c9c8:	4b24      	ldr	r3, [pc, #144]	; (800ca5c <Change_Up_Input+0xdc>)
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	705a      	strb	r2, [r3, #1]
			break;
 800c9ce:	e03a      	b.n	800ca46 <Change_Up_Input+0xc6>
		    case JACK_2:
			TDA7719_config.set_input_back = RADIO;
 800c9d0:	4b22      	ldr	r3, [pc, #136]	; (800ca5c <Change_Up_Input+0xdc>)
 800c9d2:	2205      	movs	r2, #5
 800c9d4:	705a      	strb	r2, [r3, #1]
			RADIO_IS_ON_back_flag = true;
 800c9d6:	4b22      	ldr	r3, [pc, #136]	; (800ca60 <Change_Up_Input+0xe0>)
 800c9d8:	2201      	movs	r2, #1
 800c9da:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_back_flag == true && RADIO_IS_ON_front_flag == false)
 800c9dc:	4b20      	ldr	r3, [pc, #128]	; (800ca60 <Change_Up_Input+0xe0>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d12c      	bne.n	800ca40 <Change_Up_Input+0xc0>
 800c9e6:	4b1f      	ldr	r3, [pc, #124]	; (800ca64 <Change_Up_Input+0xe4>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d127      	bne.n	800ca40 <Change_Up_Input+0xc0>
			    {
				RDA5807_Init();
 800c9f0:	f7fa fc22 	bl	8007238 <RDA5807_Init>
				RDA5807_PowerOn();
 800c9f4:	f7fa fc46 	bl	8007284 <RDA5807_PowerOn>
				RDA5807_SetFrequency(savedUserSettings.radio_freq);
 800c9f8:	4b1b      	ldr	r3, [pc, #108]	; (800ca68 <Change_Up_Input+0xe8>)
 800c9fa:	881b      	ldrh	r3, [r3, #0]
 800c9fc:	ee07 3a90 	vmov	s15, r3
 800ca00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca04:	eeb0 0a67 	vmov.f32	s0, s15
 800ca08:	f7fa fca2 	bl	8007350 <RDA5807_SetFrequency>
				break;
 800ca0c:	e01b      	b.n	800ca46 <Change_Up_Input+0xc6>
			    }
			break;
		    case RADIO:
			TDA7719_config.set_input_back = MICROPHONE;
 800ca0e:	4b13      	ldr	r3, [pc, #76]	; (800ca5c <Change_Up_Input+0xdc>)
 800ca10:	2206      	movs	r2, #6
 800ca12:	705a      	strb	r2, [r3, #1]
			RADIO_IS_ON_back_flag = false;
 800ca14:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <Change_Up_Input+0xe0>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_back_flag == false && RADIO_IS_ON_front_flag == false)
 800ca1a:	4b11      	ldr	r3, [pc, #68]	; (800ca60 <Change_Up_Input+0xe0>)
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10f      	bne.n	800ca44 <Change_Up_Input+0xc4>
 800ca24:	4b0f      	ldr	r3, [pc, #60]	; (800ca64 <Change_Up_Input+0xe4>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10a      	bne.n	800ca44 <Change_Up_Input+0xc4>
			    {
				RDA5807_PowerOff();
 800ca2e:	f7fa fc45 	bl	80072bc <RDA5807_PowerOff>
			    }
			break;
 800ca32:	e007      	b.n	800ca44 <Change_Up_Input+0xc4>
		    case MICROPHONE:
			TDA7719_config.set_input_back = BLUETOOTH;
 800ca34:	4b09      	ldr	r3, [pc, #36]	; (800ca5c <Change_Up_Input+0xdc>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	705a      	strb	r2, [r3, #1]
			break;
 800ca3a:	e004      	b.n	800ca46 <Change_Up_Input+0xc6>
		    default:
			break;
 800ca3c:	bf00      	nop
 800ca3e:	e002      	b.n	800ca46 <Change_Up_Input+0xc6>
			break;
 800ca40:	bf00      	nop
 800ca42:	e000      	b.n	800ca46 <Change_Up_Input+0xc6>
			break;
 800ca44:	bf00      	nop
		    }
		TDA7719_SetSecondInput(TDA7719_config.set_input_back);
 800ca46:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <Change_Up_Input+0xdc>)
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	b25b      	sxtb	r3, r3
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fb fa84 	bl	8007f5c <TDA7719_SetSecondInput>
	    }
    }
 800ca54:	bf00      	nop
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	48000400 	.word	0x48000400
 800ca5c:	20000544 	.word	0x20000544
 800ca60:	200037b9 	.word	0x200037b9
 800ca64:	200077f8 	.word	0x200077f8
 800ca68:	20000520 	.word	0x20000520

0800ca6c <Change_FFT_source_Up>:

//
static void Change_FFT_source_Up(void)
    {
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800ca70:	2104      	movs	r1, #4
 800ca72:	480a      	ldr	r0, [pc, #40]	; (800ca9c <Change_FFT_source_Up+0x30>)
 800ca74:	f002 fec8 	bl	800f808 <HAL_GPIO_ReadPin>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10c      	bne.n	800ca98 <Change_FFT_source_Up+0x2c>
	    {
		FFT_channel_source--;
 800ca7e:	4b08      	ldr	r3, [pc, #32]	; (800caa0 <Change_FFT_source_Up+0x34>)
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <Change_FFT_source_Up+0x34>)
 800ca88:	701a      	strb	r2, [r3, #0]
		if (FFT_channel_source == FFT_ch_src_enum_MIN)
 800ca8a:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <Change_FFT_source_Up+0x34>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d102      	bne.n	800ca98 <Change_FFT_source_Up+0x2c>
		    {
			FFT_channel_source = FFT_back_right;
 800ca92:	4b03      	ldr	r3, [pc, #12]	; (800caa0 <Change_FFT_source_Up+0x34>)
 800ca94:	2204      	movs	r2, #4
 800ca96:	701a      	strb	r2, [r3, #0]
		    }
	    }
    }
 800ca98:	bf00      	nop
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	48000400 	.word	0x48000400
 800caa0:	200000ba 	.word	0x200000ba

0800caa4 <Change_FFT_source_Down>:

//
static void Change_FFT_source_Down(void)
    {
 800caa4:	b580      	push	{r7, lr}
 800caa6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800caa8:	2102      	movs	r1, #2
 800caaa:	480a      	ldr	r0, [pc, #40]	; (800cad4 <Change_FFT_source_Down+0x30>)
 800caac:	f002 feac 	bl	800f808 <HAL_GPIO_ReadPin>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10c      	bne.n	800cad0 <Change_FFT_source_Down+0x2c>
	    {
		FFT_channel_source++;
 800cab6:	4b08      	ldr	r3, [pc, #32]	; (800cad8 <Change_FFT_source_Down+0x34>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	3301      	adds	r3, #1
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <Change_FFT_source_Down+0x34>)
 800cac0:	701a      	strb	r2, [r3, #0]
		if (FFT_channel_source >= FFT_ch_src_enum_MAX)
 800cac2:	4b05      	ldr	r3, [pc, #20]	; (800cad8 <Change_FFT_source_Down+0x34>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	d902      	bls.n	800cad0 <Change_FFT_source_Down+0x2c>
		    {
			FFT_channel_source = FFT_front_left;
 800caca:	4b03      	ldr	r3, [pc, #12]	; (800cad8 <Change_FFT_source_Down+0x34>)
 800cacc:	2201      	movs	r2, #1
 800cace:	701a      	strb	r2, [r3, #0]
		    }
	    }
    }
 800cad0:	bf00      	nop
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	48000400 	.word	0x48000400
 800cad8:	200000ba 	.word	0x200000ba

0800cadc <Read_Set_TimeAndDate>:

//
static void Read_Set_TimeAndDate(void)
    {
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800cae0:	2104      	movs	r1, #4
 800cae2:	4811      	ldr	r0, [pc, #68]	; (800cb28 <Read_Set_TimeAndDate+0x4c>)
 800cae4:	f002 fe90 	bl	800f808 <HAL_GPIO_ReadPin>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d119      	bne.n	800cb22 <Read_Set_TimeAndDate+0x46>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800caee:	2200      	movs	r2, #0
 800caf0:	490e      	ldr	r1, [pc, #56]	; (800cb2c <Read_Set_TimeAndDate+0x50>)
 800caf2:	480f      	ldr	r0, [pc, #60]	; (800cb30 <Read_Set_TimeAndDate+0x54>)
 800caf4:	f005 fee4 	bl	80128c0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800caf8:	2200      	movs	r2, #0
 800cafa:	490e      	ldr	r1, [pc, #56]	; (800cb34 <Read_Set_TimeAndDate+0x58>)
 800cafc:	480c      	ldr	r0, [pc, #48]	; (800cb30 <Read_Set_TimeAndDate+0x54>)
 800cafe:	f005 ffc9 	bl	8012a94 <HAL_RTC_GetDate>
		switch_change_time(Clock_Data_Time, 1);
 800cb02:	4b0d      	ldr	r3, [pc, #52]	; (800cb38 <Read_Set_TimeAndDate+0x5c>)
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2101      	movs	r1, #1
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fc f965 	bl	8008dd8 <switch_change_time>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800cb0e:	2200      	movs	r2, #0
 800cb10:	4906      	ldr	r1, [pc, #24]	; (800cb2c <Read_Set_TimeAndDate+0x50>)
 800cb12:	4807      	ldr	r0, [pc, #28]	; (800cb30 <Read_Set_TimeAndDate+0x54>)
 800cb14:	f005 fe34 	bl	8012780 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800cb18:	2200      	movs	r2, #0
 800cb1a:	4906      	ldr	r1, [pc, #24]	; (800cb34 <Read_Set_TimeAndDate+0x58>)
 800cb1c:	4804      	ldr	r0, [pc, #16]	; (800cb30 <Read_Set_TimeAndDate+0x54>)
 800cb1e:	f005 ff31 	bl	8012984 <HAL_RTC_SetDate>
	    }
    }
 800cb22:	bf00      	nop
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	48000400 	.word	0x48000400
 800cb2c:	2000178c 	.word	0x2000178c
 800cb30:	20007828 	.word	0x20007828
 800cb34:	200057bc 	.word	0x200057bc
 800cb38:	2000050a 	.word	0x2000050a

0800cb3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800cb3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cb74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800cb40:	f7fd ff34 	bl	800a9ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800cb44:	480c      	ldr	r0, [pc, #48]	; (800cb78 <LoopForever+0x6>)
  ldr r1, =_edata
 800cb46:	490d      	ldr	r1, [pc, #52]	; (800cb7c <LoopForever+0xa>)
  ldr r2, =_sidata
 800cb48:	4a0d      	ldr	r2, [pc, #52]	; (800cb80 <LoopForever+0xe>)
  movs r3, #0
 800cb4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cb4c:	e002      	b.n	800cb54 <LoopCopyDataInit>

0800cb4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cb4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cb50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cb52:	3304      	adds	r3, #4

0800cb54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cb54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cb56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cb58:	d3f9      	bcc.n	800cb4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cb5a:	4a0a      	ldr	r2, [pc, #40]	; (800cb84 <LoopForever+0x12>)
  ldr r4, =_ebss
 800cb5c:	4c0a      	ldr	r4, [pc, #40]	; (800cb88 <LoopForever+0x16>)
  movs r3, #0
 800cb5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cb60:	e001      	b.n	800cb66 <LoopFillZerobss>

0800cb62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cb62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cb64:	3204      	adds	r2, #4

0800cb66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cb66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cb68:	d3fb      	bcc.n	800cb62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800cb6a:	f009 f837 	bl	8015bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800cb6e:	f7fd f885 	bl	8009c7c <main>

0800cb72 <LoopForever>:

LoopForever:
    b LoopForever
 800cb72:	e7fe      	b.n	800cb72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800cb74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800cb78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cb7c:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800cb80:	08037688 	.word	0x08037688
  ldr r2, =_sbss
 800cb84:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 800cb88:	20007c40 	.word	0x20007c40

0800cb8c <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800cb8c:	e7fe      	b.n	800cb8c <AES_IRQHandler>

0800cb8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b082      	sub	sp, #8
 800cb92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cb98:	2003      	movs	r0, #3
 800cb9a:	f001 ff63 	bl	800ea64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f000 f80e 	bl	800cbc0 <HAL_InitTick>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	71fb      	strb	r3, [r7, #7]
 800cbae:	e001      	b.n	800cbb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800cbb0:	f7fd fd9c 	bl	800a6ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800cbb4:	79fb      	ldrb	r3, [r7, #7]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800cbcc:	4b17      	ldr	r3, [pc, #92]	; (800cc2c <HAL_InitTick+0x6c>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d023      	beq.n	800cc1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800cbd4:	4b16      	ldr	r3, [pc, #88]	; (800cc30 <HAL_InitTick+0x70>)
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	4b14      	ldr	r3, [pc, #80]	; (800cc2c <HAL_InitTick+0x6c>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cbe2:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbea:	4618      	mov	r0, r3
 800cbec:	f001 ff6f 	bl	800eace <HAL_SYSTICK_Config>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10f      	bne.n	800cc16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2b0f      	cmp	r3, #15
 800cbfa:	d809      	bhi.n	800cc10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	f04f 30ff 	mov.w	r0, #4294967295
 800cc04:	f001 ff39 	bl	800ea7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800cc08:	4a0a      	ldr	r2, [pc, #40]	; (800cc34 <HAL_InitTick+0x74>)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	e007      	b.n	800cc20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	73fb      	strb	r3, [r7, #15]
 800cc14:	e004      	b.n	800cc20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800cc16:	2301      	movs	r3, #1
 800cc18:	73fb      	strb	r3, [r7, #15]
 800cc1a:	e001      	b.n	800cc20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	200000c0 	.word	0x200000c0
 800cc30:	200000b4 	.word	0x200000b4
 800cc34:	200000bc 	.word	0x200000bc

0800cc38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cc3c:	4b06      	ldr	r3, [pc, #24]	; (800cc58 <HAL_IncTick+0x20>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	461a      	mov	r2, r3
 800cc42:	4b06      	ldr	r3, [pc, #24]	; (800cc5c <HAL_IncTick+0x24>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4413      	add	r3, r2
 800cc48:	4a04      	ldr	r2, [pc, #16]	; (800cc5c <HAL_IncTick+0x24>)
 800cc4a:	6013      	str	r3, [r2, #0]
}
 800cc4c:	bf00      	nop
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	200000c0 	.word	0x200000c0
 800cc5c:	20007c2c 	.word	0x20007c2c

0800cc60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cc60:	b480      	push	{r7}
 800cc62:	af00      	add	r7, sp, #0
  return uwTick;
 800cc64:	4b03      	ldr	r3, [pc, #12]	; (800cc74 <HAL_GetTick+0x14>)
 800cc66:	681b      	ldr	r3, [r3, #0]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	20007c2c 	.word	0x20007c2c

0800cc78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cc80:	f7ff ffee 	bl	800cc60 <HAL_GetTick>
 800cc84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc90:	d005      	beq.n	800cc9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800cc92:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <HAL_Delay+0x44>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cc9e:	bf00      	nop
 800cca0:	f7ff ffde 	bl	800cc60 <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d8f7      	bhi.n	800cca0 <HAL_Delay+0x28>
  {
  }
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	200000c0 	.word	0x200000c0

0800ccc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	431a      	orrs	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	609a      	str	r2, [r3, #8]
}
 800ccda:	bf00      	nop
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	431a      	orrs	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	609a      	str	r2, [r3, #8]
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
 800cd34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3360      	adds	r3, #96	; 0x60
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	4b08      	ldr	r3, [pc, #32]	; (800cd6c <LL_ADC_SetOffset+0x44>)
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	430a      	orrs	r2, r1
 800cd56:	4313      	orrs	r3, r2
 800cd58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800cd60:	bf00      	nop
 800cd62:	371c      	adds	r7, #28
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	03fff000 	.word	0x03fff000

0800cd70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3360      	adds	r3, #96	; 0x60
 800cd7e:	461a      	mov	r2, r3
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3360      	adds	r3, #96	; 0x60
 800cdac:	461a      	mov	r2, r3
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	431a      	orrs	r2, r3
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800cdc6:	bf00      	nop
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800cdd2:	b480      	push	{r7}
 800cdd4:	b083      	sub	sp, #12
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	431a      	orrs	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	615a      	str	r2, [r3, #20]
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d101      	bne.n	800ce10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e000      	b.n	800ce12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	370c      	adds	r7, #12
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b087      	sub	sp, #28
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	60f8      	str	r0, [r7, #12]
 800ce26:	60b9      	str	r1, [r7, #8]
 800ce28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	3330      	adds	r3, #48	; 0x30
 800ce2e:	461a      	mov	r2, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	f003 030c 	and.w	r3, r3, #12
 800ce3a:	4413      	add	r3, r2
 800ce3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	f003 031f 	and.w	r3, r3, #31
 800ce48:	211f      	movs	r1, #31
 800ce4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce4e:	43db      	mvns	r3, r3
 800ce50:	401a      	ands	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	0e9b      	lsrs	r3, r3, #26
 800ce56:	f003 011f 	and.w	r1, r3, #31
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	f003 031f 	and.w	r3, r3, #31
 800ce60:	fa01 f303 	lsl.w	r3, r1, r3
 800ce64:	431a      	orrs	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ce6a:	bf00      	nop
 800ce6c:	371c      	adds	r7, #28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800ce76:	b480      	push	{r7}
 800ce78:	b083      	sub	sp, #12
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e000      	b.n	800ce90 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3314      	adds	r3, #20
 800ceac:	461a      	mov	r2, r3
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	0e5b      	lsrs	r3, r3, #25
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	f003 0304 	and.w	r3, r3, #4
 800ceb8:	4413      	add	r3, r2
 800ceba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	0d1b      	lsrs	r3, r3, #20
 800cec4:	f003 031f 	and.w	r3, r3, #31
 800cec8:	2107      	movs	r1, #7
 800ceca:	fa01 f303 	lsl.w	r3, r1, r3
 800cece:	43db      	mvns	r3, r3
 800ced0:	401a      	ands	r2, r3
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	0d1b      	lsrs	r3, r3, #20
 800ced6:	f003 031f 	and.w	r3, r3, #31
 800ceda:	6879      	ldr	r1, [r7, #4]
 800cedc:	fa01 f303 	lsl.w	r3, r1, r3
 800cee0:	431a      	orrs	r2, r3
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800cee6:	bf00      	nop
 800cee8:	371c      	adds	r7, #28
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
	...

0800cef4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf0c:	43db      	mvns	r3, r3
 800cf0e:	401a      	ands	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f003 0318 	and.w	r3, r3, #24
 800cf16:	4908      	ldr	r1, [pc, #32]	; (800cf38 <LL_ADC_SetChannelSingleDiff+0x44>)
 800cf18:	40d9      	lsrs	r1, r3
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	400b      	ands	r3, r1
 800cf1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf22:	431a      	orrs	r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800cf2a:	bf00      	nop
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	0007ffff 	.word	0x0007ffff

0800cf3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	f003 031f 	and.w	r3, r3, #31
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800cf84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	6093      	str	r3, [r2, #8]
}
 800cf8c:	bf00      	nop
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfac:	d101      	bne.n	800cfb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e000      	b.n	800cfb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800cfd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cfd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800cfdc:	bf00      	nop
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cffc:	d101      	bne.n	800d002 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800cffe:	2301      	movs	r3, #1
 800d000:	e000      	b.n	800d004 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d024:	f043 0201 	orr.w	r2, r3, #1
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d04c:	f043 0202 	orr.w	r2, r3, #2
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b01      	cmp	r3, #1
 800d072:	d101      	bne.n	800d078 <LL_ADC_IsEnabled+0x18>
 800d074:	2301      	movs	r3, #1
 800d076:	e000      	b.n	800d07a <LL_ADC_IsEnabled+0x1a>
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800d086:	b480      	push	{r7}
 800d088:	b083      	sub	sp, #12
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	f003 0302 	and.w	r3, r3, #2
 800d096:	2b02      	cmp	r3, #2
 800d098:	d101      	bne.n	800d09e <LL_ADC_IsDisableOngoing+0x18>
 800d09a:	2301      	movs	r3, #1
 800d09c:	e000      	b.n	800d0a0 <LL_ADC_IsDisableOngoing+0x1a>
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	689b      	ldr	r3, [r3, #8]
 800d0b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d0c0:	f043 0204 	orr.w	r2, r3, #4
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d0e8:	f043 0210 	orr.w	r2, r3, #16
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800d0f0:	bf00      	nop
 800d0f2:	370c      	adds	r7, #12
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	f003 0304 	and.w	r3, r3, #4
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	d101      	bne.n	800d114 <LL_ADC_REG_IsConversionOngoing+0x18>
 800d110:	2301      	movs	r3, #1
 800d112:	e000      	b.n	800d116 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800d122:	b480      	push	{r7}
 800d124:	b083      	sub	sp, #12
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d132:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d136:	f043 0220 	orr.w	r2, r3, #32
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	f003 0308 	and.w	r3, r3, #8
 800d15a:	2b08      	cmp	r3, #8
 800d15c:	d101      	bne.n	800d162 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d170:	b590      	push	{r4, r7, lr}
 800d172:	b089      	sub	sp, #36	; 0x24
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d178:	2300      	movs	r3, #0
 800d17a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	e134      	b.n	800d3f4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d194:	2b00      	cmp	r3, #0
 800d196:	d109      	bne.n	800d1ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7fc fab9 	bl	8009710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7ff fef1 	bl	800cf98 <LL_ADC_IsDeepPowerDownEnabled>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d004      	beq.n	800d1c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7ff fed7 	bl	800cf74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff ff0c 	bl	800cfe8 <LL_ADC_IsInternalRegulatorEnabled>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d115      	bne.n	800d202 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff fef0 	bl	800cfc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d1e0:	4b86      	ldr	r3, [pc, #536]	; (800d3fc <HAL_ADC_Init+0x28c>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	099b      	lsrs	r3, r3, #6
 800d1e6:	4a86      	ldr	r2, [pc, #536]	; (800d400 <HAL_ADC_Init+0x290>)
 800d1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ec:	099b      	lsrs	r3, r3, #6
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800d1f4:	e002      	b.n	800d1fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1f9      	bne.n	800d1f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff feee 	bl	800cfe8 <LL_ADC_IsInternalRegulatorEnabled>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10d      	bne.n	800d22e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d216:	f043 0210 	orr.w	r2, r3, #16
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d222:	f043 0201 	orr.w	r2, r3, #1
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff ff62 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800d238:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d23e:	f003 0310 	and.w	r3, r3, #16
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 80cd 	bne.w	800d3e2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f040 80c9 	bne.w	800d3e2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800d258:	f043 0202 	orr.w	r2, r3, #2
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f7ff fefb 	bl	800d060 <LL_ADC_IsEnabled>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d110      	bne.n	800d292 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d270:	4864      	ldr	r0, [pc, #400]	; (800d404 <HAL_ADC_Init+0x294>)
 800d272:	f7ff fef5 	bl	800d060 <LL_ADC_IsEnabled>
 800d276:	4604      	mov	r4, r0
 800d278:	4863      	ldr	r0, [pc, #396]	; (800d408 <HAL_ADC_Init+0x298>)
 800d27a:	f7ff fef1 	bl	800d060 <LL_ADC_IsEnabled>
 800d27e:	4603      	mov	r3, r0
 800d280:	4323      	orrs	r3, r4
 800d282:	2b00      	cmp	r3, #0
 800d284:	d105      	bne.n	800d292 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	4619      	mov	r1, r3
 800d28c:	485f      	ldr	r0, [pc, #380]	; (800d40c <HAL_ADC_Init+0x29c>)
 800d28e:	f7ff fd17 	bl	800ccc0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	7e5b      	ldrb	r3, [r3, #25]
 800d296:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800d29c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800d2a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800d2a8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d2b0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d106      	bne.n	800d2ce <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	045b      	lsls	r3, r3, #17
 800d2c8:	69ba      	ldr	r2, [r7, #24]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d009      	beq.n	800d2ea <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2da:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800d2e4:	69ba      	ldr	r2, [r7, #24]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68da      	ldr	r2, [r3, #12]
 800d2f0:	4b47      	ldr	r3, [pc, #284]	; (800d410 <HAL_ADC_Init+0x2a0>)
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	6812      	ldr	r2, [r2, #0]
 800d2f8:	69b9      	ldr	r1, [r7, #24]
 800d2fa:	430b      	orrs	r3, r1
 800d2fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fefa 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800d308:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff ff1b 	bl	800d14a <LL_ADC_INJ_IsConversionOngoing>
 800d314:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d140      	bne.n	800d39e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d13d      	bne.n	800d39e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	7e1b      	ldrb	r3, [r3, #24]
 800d32a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800d32c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d334:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800d336:	4313      	orrs	r3, r2
 800d338:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d344:	f023 0306 	bic.w	r3, r3, #6
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	6812      	ldr	r2, [r2, #0]
 800d34c:	69b9      	ldr	r1, [r7, #24]
 800d34e:	430b      	orrs	r3, r1
 800d350:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d118      	bne.n	800d38e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d366:	f023 0304 	bic.w	r3, r3, #4
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d372:	4311      	orrs	r1, r2
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d378:	4311      	orrs	r1, r2
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d37e:	430a      	orrs	r2, r1
 800d380:	431a      	orrs	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f042 0201 	orr.w	r2, r2, #1
 800d38a:	611a      	str	r2, [r3, #16]
 800d38c:	e007      	b.n	800d39e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f022 0201 	bic.w	r2, r2, #1
 800d39c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d10c      	bne.n	800d3c0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ac:	f023 010f 	bic.w	r1, r3, #15
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	69db      	ldr	r3, [r3, #28]
 800d3b4:	1e5a      	subs	r2, r3, #1
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	430a      	orrs	r2, r1
 800d3bc:	631a      	str	r2, [r3, #48]	; 0x30
 800d3be:	e007      	b.n	800d3d0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f022 020f 	bic.w	r2, r2, #15
 800d3ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3d4:	f023 0303 	bic.w	r3, r3, #3
 800d3d8:	f043 0201 	orr.w	r2, r3, #1
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	659a      	str	r2, [r3, #88]	; 0x58
 800d3e0:	e007      	b.n	800d3f2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3e6:	f043 0210 	orr.w	r2, r3, #16
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800d3f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3724      	adds	r7, #36	; 0x24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd90      	pop	{r4, r7, pc}
 800d3fc:	200000b4 	.word	0x200000b4
 800d400:	053e2d63 	.word	0x053e2d63
 800d404:	50040000 	.word	0x50040000
 800d408:	50040100 	.word	0x50040100
 800d40c:	50040300 	.word	0x50040300
 800d410:	fff0c007 	.word	0xfff0c007

0800d414 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d420:	4850      	ldr	r0, [pc, #320]	; (800d564 <HAL_ADC_Start_DMA+0x150>)
 800d422:	f7ff fd8b 	bl	800cf3c <LL_ADC_GetMultimode>
 800d426:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fe65 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	f040 808e 	bne.w	800d556 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d440:	2b01      	cmp	r3, #1
 800d442:	d101      	bne.n	800d448 <HAL_ADC_Start_DMA+0x34>
 800d444:	2302      	movs	r3, #2
 800d446:	e089      	b.n	800d55c <HAL_ADC_Start_DMA+0x148>
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	2b05      	cmp	r3, #5
 800d45a:	d002      	beq.n	800d462 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b09      	cmp	r3, #9
 800d460:	d172      	bne.n	800d548 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f000 ffdc 	bl	800e420 <ADC_Enable>
 800d468:	4603      	mov	r3, r0
 800d46a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d165      	bne.n	800d53e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d47a:	f023 0301 	bic.w	r3, r3, #1
 800d47e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a37      	ldr	r2, [pc, #220]	; (800d568 <HAL_ADC_Start_DMA+0x154>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d002      	beq.n	800d496 <HAL_ADC_Start_DMA+0x82>
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	e000      	b.n	800d498 <HAL_ADC_Start_DMA+0x84>
 800d496:	4b35      	ldr	r3, [pc, #212]	; (800d56c <HAL_ADC_Start_DMA+0x158>)
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	6812      	ldr	r2, [r2, #0]
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d002      	beq.n	800d4a6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d105      	bne.n	800d4b2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d006      	beq.n	800d4cc <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4c2:	f023 0206 	bic.w	r2, r3, #6
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d4ca:	e002      	b.n	800d4d2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4d6:	4a26      	ldr	r2, [pc, #152]	; (800d570 <HAL_ADC_Start_DMA+0x15c>)
 800d4d8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4de:	4a25      	ldr	r2, [pc, #148]	; (800d574 <HAL_ADC_Start_DMA+0x160>)
 800d4e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4e6:	4a24      	ldr	r2, [pc, #144]	; (800d578 <HAL_ADC_Start_DMA+0x164>)
 800d4e8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	221c      	movs	r2, #28
 800d4f0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f042 0210 	orr.w	r2, r2, #16
 800d508:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	68da      	ldr	r2, [r3, #12]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f042 0201 	orr.w	r2, r2, #1
 800d518:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3340      	adds	r3, #64	; 0x40
 800d524:	4619      	mov	r1, r3
 800d526:	68ba      	ldr	r2, [r7, #8]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f001 fd55 	bl	800efd8 <HAL_DMA_Start_IT>
 800d52e:	4603      	mov	r3, r0
 800d530:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fdb8 	bl	800d0ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800d53c:	e00d      	b.n	800d55a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800d546:	e008      	b.n	800d55a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800d554:	e001      	b.n	800d55a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d556:	2302      	movs	r3, #2
 800d558:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	50040300 	.word	0x50040300
 800d568:	50040100 	.word	0x50040100
 800d56c:	50040000 	.word	0x50040000
 800d570:	0800e5a3 	.word	0x0800e5a3
 800d574:	0800e67b 	.word	0x0800e67b
 800d578:	0800e697 	.word	0x0800e697

0800d57c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d101      	bne.n	800d592 <HAL_ADC_Stop_DMA+0x16>
 800d58e:	2302      	movs	r3, #2
 800d590:	e051      	b.n	800d636 <HAL_ADC_Stop_DMA+0xba>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800d59a:	2103      	movs	r1, #3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fe83 	bl	800e2a8 <ADC_ConversionStop>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d13f      	bne.n	800d62c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68da      	ldr	r2, [r3, #12]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f022 0201 	bic.w	r2, r2, #1
 800d5ba:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d10f      	bne.n	800d5ea <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f001 fd7d 	bl	800f0ce <HAL_DMA_Abort>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d005      	beq.n	800d5ea <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	685a      	ldr	r2, [r3, #4]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f022 0210 	bic.w	r2, r2, #16
 800d5f8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d105      	bne.n	800d60c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 ff6f 	bl	800e4e4 <ADC_Disable>
 800d606:	4603      	mov	r3, r0
 800d608:	73fb      	strb	r3, [r7, #15]
 800d60a:	e002      	b.n	800d612 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f000 ff69 	bl	800e4e4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800d612:	7bfb      	ldrb	r3, [r7, #15]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d109      	bne.n	800d62c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d61c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d620:	f023 0301 	bic.w	r3, r3, #1
 800d624:	f043 0201 	orr.w	r2, r3, #1
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800d634:	7bfb      	ldrb	r3, [r7, #15]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08a      	sub	sp, #40	; 0x28
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800d648:	2300      	movs	r3, #0
 800d64a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d65c:	4882      	ldr	r0, [pc, #520]	; (800d868 <HAL_ADC_IRQHandler+0x228>)
 800d65e:	f7ff fc6d 	bl	800cf3c <LL_ADC_GetMultimode>
 800d662:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	f003 0302 	and.w	r3, r3, #2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d017      	beq.n	800d69e <HAL_ADC_IRQHandler+0x5e>
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d012      	beq.n	800d69e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d67c:	f003 0310 	and.w	r3, r3, #16
 800d680:	2b00      	cmp	r3, #0
 800d682:	d105      	bne.n	800d690 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d688:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f001 f868 	bl	800e766 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2202      	movs	r2, #2
 800d69c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	f003 0304 	and.w	r3, r3, #4
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d004      	beq.n	800d6b2 <HAL_ADC_IRQHandler+0x72>
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	f003 0304 	and.w	r3, r3, #4
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10a      	bne.n	800d6c8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f000 8083 	beq.w	800d7c4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	f003 0308 	and.w	r3, r3, #8
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d07d      	beq.n	800d7c4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6cc:	f003 0310 	and.w	r3, r3, #16
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d105      	bne.n	800d6e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7ff fb87 	bl	800cdf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d062      	beq.n	800d7b6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a5d      	ldr	r2, [pc, #372]	; (800d86c <HAL_ADC_IRQHandler+0x22c>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d002      	beq.n	800d700 <HAL_ADC_IRQHandler+0xc0>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	e000      	b.n	800d702 <HAL_ADC_IRQHandler+0xc2>
 800d700:	4b5b      	ldr	r3, [pc, #364]	; (800d870 <HAL_ADC_IRQHandler+0x230>)
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	6812      	ldr	r2, [r2, #0]
 800d706:	4293      	cmp	r3, r2
 800d708:	d008      	beq.n	800d71c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d005      	beq.n	800d71c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2b05      	cmp	r3, #5
 800d714:	d002      	beq.n	800d71c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	2b09      	cmp	r3, #9
 800d71a:	d104      	bne.n	800d726 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68db      	ldr	r3, [r3, #12]
 800d722:	623b      	str	r3, [r7, #32]
 800d724:	e00c      	b.n	800d740 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a50      	ldr	r2, [pc, #320]	; (800d86c <HAL_ADC_IRQHandler+0x22c>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d002      	beq.n	800d736 <HAL_ADC_IRQHandler+0xf6>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	e000      	b.n	800d738 <HAL_ADC_IRQHandler+0xf8>
 800d736:	4b4e      	ldr	r3, [pc, #312]	; (800d870 <HAL_ADC_IRQHandler+0x230>)
 800d738:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800d740:	6a3b      	ldr	r3, [r7, #32]
 800d742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d746:	2b00      	cmp	r3, #0
 800d748:	d135      	bne.n	800d7b6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f003 0308 	and.w	r3, r3, #8
 800d754:	2b08      	cmp	r3, #8
 800d756:	d12e      	bne.n	800d7b6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fccd 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d11a      	bne.n	800d79e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f022 020c 	bic.w	r2, r2, #12
 800d776:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d77c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d112      	bne.n	800d7b6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d794:	f043 0201 	orr.w	r2, r3, #1
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	659a      	str	r2, [r3, #88]	; 0x58
 800d79c:	e00b      	b.n	800d7b6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7a2:	f043 0210 	orr.w	r2, r3, #16
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ae:	f043 0201 	orr.w	r2, r3, #1
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7fc fc58 	bl	800a06c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	220c      	movs	r2, #12
 800d7c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	f003 0320 	and.w	r3, r3, #32
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d004      	beq.n	800d7d8 <HAL_ADC_IRQHandler+0x198>
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	f003 0320 	and.w	r3, r3, #32
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10b      	bne.n	800d7f0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 809f 	beq.w	800d922 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 8099 	beq.w	800d922 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7f4:	f003 0310 	and.w	r3, r3, #16
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d105      	bne.n	800d808 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7ff fb32 	bl	800ce76 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800d812:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff faed 	bl	800cdf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d81e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a11      	ldr	r2, [pc, #68]	; (800d86c <HAL_ADC_IRQHandler+0x22c>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d002      	beq.n	800d830 <HAL_ADC_IRQHandler+0x1f0>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	e000      	b.n	800d832 <HAL_ADC_IRQHandler+0x1f2>
 800d830:	4b0f      	ldr	r3, [pc, #60]	; (800d870 <HAL_ADC_IRQHandler+0x230>)
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	6812      	ldr	r2, [r2, #0]
 800d836:	4293      	cmp	r3, r2
 800d838:	d008      	beq.n	800d84c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d005      	beq.n	800d84c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	2b06      	cmp	r3, #6
 800d844:	d002      	beq.n	800d84c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	2b07      	cmp	r3, #7
 800d84a:	d104      	bne.n	800d856 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	623b      	str	r3, [r7, #32]
 800d854:	e013      	b.n	800d87e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a04      	ldr	r2, [pc, #16]	; (800d86c <HAL_ADC_IRQHandler+0x22c>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d009      	beq.n	800d874 <HAL_ADC_IRQHandler+0x234>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	e007      	b.n	800d876 <HAL_ADC_IRQHandler+0x236>
 800d866:	bf00      	nop
 800d868:	50040300 	.word	0x50040300
 800d86c:	50040100 	.word	0x50040100
 800d870:	50040000 	.word	0x50040000
 800d874:	4b7d      	ldr	r3, [pc, #500]	; (800da6c <HAL_ADC_IRQHandler+0x42c>)
 800d876:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d047      	beq.n	800d914 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800d884:	6a3b      	ldr	r3, [r7, #32]
 800d886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d007      	beq.n	800d89e <HAL_ADC_IRQHandler+0x25e>
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d03f      	beq.n	800d914 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800d894:	6a3b      	ldr	r3, [r7, #32]
 800d896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d13a      	bne.n	800d914 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a8:	2b40      	cmp	r3, #64	; 0x40
 800d8aa:	d133      	bne.n	800d914 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d12e      	bne.n	800d914 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7ff fc45 	bl	800d14a <LL_ADC_INJ_IsConversionOngoing>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d11a      	bne.n	800d8fc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d8d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d112      	bne.n	800d914 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8f2:	f043 0201 	orr.w	r2, r3, #1
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	659a      	str	r2, [r3, #88]	; 0x58
 800d8fa:	e00b      	b.n	800d914 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d900:	f043 0210 	orr.w	r2, r3, #16
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d90c:	f043 0201 	orr.w	r2, r3, #1
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fefe 	bl	800e716 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2260      	movs	r2, #96	; 0x60
 800d920:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d011      	beq.n	800d950 <HAL_ADC_IRQHandler+0x310>
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00c      	beq.n	800d950 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d93a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 f8a0 	bl	800da88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2280      	movs	r2, #128	; 0x80
 800d94e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d956:	2b00      	cmp	r3, #0
 800d958:	d012      	beq.n	800d980 <HAL_ADC_IRQHandler+0x340>
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00d      	beq.n	800d980 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d968:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 fee4 	bl	800e73e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d97e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d986:	2b00      	cmp	r3, #0
 800d988:	d012      	beq.n	800d9b0 <HAL_ADC_IRQHandler+0x370>
 800d98a:	69bb      	ldr	r3, [r7, #24]
 800d98c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00d      	beq.n	800d9b0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d998:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fed6 	bl	800e752 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800d9b0:	69fb      	ldr	r3, [r7, #28]
 800d9b2:	f003 0310 	and.w	r3, r3, #16
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d036      	beq.n	800da28 <HAL_ADC_IRQHandler+0x3e8>
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	f003 0310 	and.w	r3, r3, #16
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d031      	beq.n	800da28 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d102      	bne.n	800d9d2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	627b      	str	r3, [r7, #36]	; 0x24
 800d9d0:	e014      	b.n	800d9fc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d008      	beq.n	800d9ea <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800d9d8:	4825      	ldr	r0, [pc, #148]	; (800da70 <HAL_ADC_IRQHandler+0x430>)
 800d9da:	f7ff fabd 	bl	800cf58 <LL_ADC_GetMultiDMATransfer>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d9e8:	e008      	b.n	800d9fc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d001      	beq.n	800d9fc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d10e      	bne.n	800da20 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da06:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da12:	f043 0202 	orr.w	r2, r3, #2
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f83e 	bl	800da9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2210      	movs	r2, #16
 800da26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d018      	beq.n	800da64 <HAL_ADC_IRQHandler+0x424>
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d013      	beq.n	800da64 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da40:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da4c:	f043 0208 	orr.w	r2, r3, #8
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da5c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 fe63 	bl	800e72a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800da64:	bf00      	nop
 800da66:	3728      	adds	r7, #40	; 0x28
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	50040000 	.word	0x50040000
 800da70:	50040300 	.word	0x50040300

0800da74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800daa4:	bf00      	nop
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b0b6      	sub	sp, #216	; 0xd8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d101      	bne.n	800dad2 <HAL_ADC_ConfigChannel+0x22>
 800dace:	2302      	movs	r3, #2
 800dad0:	e3d5      	b.n	800e27e <HAL_ADC_ConfigChannel+0x7ce>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7ff fb0c 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f040 83ba 	bne.w	800e260 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	2b05      	cmp	r3, #5
 800daf2:	d824      	bhi.n	800db3e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	3b02      	subs	r3, #2
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d81b      	bhi.n	800db36 <HAL_ADC_ConfigChannel+0x86>
 800dafe:	a201      	add	r2, pc, #4	; (adr r2, 800db04 <HAL_ADC_ConfigChannel+0x54>)
 800db00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db04:	0800db15 	.word	0x0800db15
 800db08:	0800db1d 	.word	0x0800db1d
 800db0c:	0800db25 	.word	0x0800db25
 800db10:	0800db2d 	.word	0x0800db2d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	220c      	movs	r2, #12
 800db18:	605a      	str	r2, [r3, #4]
          break;
 800db1a:	e011      	b.n	800db40 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	2212      	movs	r2, #18
 800db20:	605a      	str	r2, [r3, #4]
          break;
 800db22:	e00d      	b.n	800db40 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2218      	movs	r2, #24
 800db28:	605a      	str	r2, [r3, #4]
          break;
 800db2a:	e009      	b.n	800db40 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db32:	605a      	str	r2, [r3, #4]
          break;
 800db34:	e004      	b.n	800db40 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2206      	movs	r2, #6
 800db3a:	605a      	str	r2, [r3, #4]
          break;
 800db3c:	e000      	b.n	800db40 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800db3e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6818      	ldr	r0, [r3, #0]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	6859      	ldr	r1, [r3, #4]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	461a      	mov	r2, r3
 800db4e:	f7ff f966 	bl	800ce1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff fad0 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800db5c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff faf0 	bl	800d14a <LL_ADC_INJ_IsConversionOngoing>
 800db6a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800db6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800db72:	2b00      	cmp	r3, #0
 800db74:	f040 81c1 	bne.w	800defa <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800db78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f040 81bc 	bne.w	800defa <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db8a:	d10f      	bne.n	800dbac <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6818      	ldr	r0, [r3, #0]
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2200      	movs	r2, #0
 800db96:	4619      	mov	r1, r3
 800db98:	f7ff f980 	bl	800ce9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7ff f914 	bl	800cdd2 <LL_ADC_SetSamplingTimeCommonConfig>
 800dbaa:	e00e      	b.n	800dbca <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6818      	ldr	r0, [r3, #0]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	6819      	ldr	r1, [r3, #0]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	f7ff f96f 	bl	800ce9c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2100      	movs	r1, #0
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff f904 	bl	800cdd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	695a      	ldr	r2, [r3, #20]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	08db      	lsrs	r3, r3, #3
 800dbd6:	f003 0303 	and.w	r3, r3, #3
 800dbda:	005b      	lsls	r3, r3, #1
 800dbdc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	2b04      	cmp	r3, #4
 800dbea:	d00a      	beq.n	800dc02 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6818      	ldr	r0, [r3, #0]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	6919      	ldr	r1, [r3, #16]
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dbfc:	f7ff f894 	bl	800cd28 <LL_ADC_SetOffset>
 800dc00:	e17b      	b.n	800defa <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2100      	movs	r1, #0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff f8b1 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10a      	bne.n	800dc2e <HAL_ADC_ConfigChannel+0x17e>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7ff f8a6 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800dc24:	4603      	mov	r3, r0
 800dc26:	0e9b      	lsrs	r3, r3, #26
 800dc28:	f003 021f 	and.w	r2, r3, #31
 800dc2c:	e01e      	b.n	800dc6c <HAL_ADC_ConfigChannel+0x1bc>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2100      	movs	r1, #0
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff f89b 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc44:	fa93 f3a3 	rbit	r3, r3
 800dc48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800dc4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800dc54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d101      	bne.n	800dc60 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800dc5c:	2320      	movs	r3, #32
 800dc5e:	e004      	b.n	800dc6a <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800dc60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc64:	fab3 f383 	clz	r3, r3
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d105      	bne.n	800dc84 <HAL_ADC_ConfigChannel+0x1d4>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	0e9b      	lsrs	r3, r3, #26
 800dc7e:	f003 031f 	and.w	r3, r3, #31
 800dc82:	e018      	b.n	800dcb6 <HAL_ADC_ConfigChannel+0x206>
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dc90:	fa93 f3a3 	rbit	r3, r3
 800dc94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800dc98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800dca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800dca8:	2320      	movs	r3, #32
 800dcaa:	e004      	b.n	800dcb6 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800dcac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcb0:	fab3 f383 	clz	r3, r3
 800dcb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d106      	bne.n	800dcc8 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7ff f86a 	bl	800cd9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2101      	movs	r1, #1
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7ff f84e 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10a      	bne.n	800dcf4 <HAL_ADC_ConfigChannel+0x244>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2101      	movs	r1, #1
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7ff f843 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800dcea:	4603      	mov	r3, r0
 800dcec:	0e9b      	lsrs	r3, r3, #26
 800dcee:	f003 021f 	and.w	r2, r3, #31
 800dcf2:	e01e      	b.n	800dd32 <HAL_ADC_ConfigChannel+0x282>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7ff f838 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800dd00:	4603      	mov	r3, r0
 800dd02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd0a:	fa93 f3a3 	rbit	r3, r3
 800dd0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800dd12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800dd1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800dd22:	2320      	movs	r3, #32
 800dd24:	e004      	b.n	800dd30 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800dd26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd2a:	fab3 f383 	clz	r3, r3
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d105      	bne.n	800dd4a <HAL_ADC_ConfigChannel+0x29a>
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	0e9b      	lsrs	r3, r3, #26
 800dd44:	f003 031f 	and.w	r3, r3, #31
 800dd48:	e018      	b.n	800dd7c <HAL_ADC_ConfigChannel+0x2cc>
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dd56:	fa93 f3a3 	rbit	r3, r3
 800dd5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800dd5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800dd66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d101      	bne.n	800dd72 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800dd6e:	2320      	movs	r3, #32
 800dd70:	e004      	b.n	800dd7c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800dd72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd76:	fab3 f383 	clz	r3, r3
 800dd7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d106      	bne.n	800dd8e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2200      	movs	r2, #0
 800dd86:	2101      	movs	r1, #1
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff f807 	bl	800cd9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2102      	movs	r1, #2
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe ffeb 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10a      	bne.n	800ddba <HAL_ADC_ConfigChannel+0x30a>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2102      	movs	r1, #2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fe ffe0 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	0e9b      	lsrs	r3, r3, #26
 800ddb4:	f003 021f 	and.w	r2, r3, #31
 800ddb8:	e01e      	b.n	800ddf8 <HAL_ADC_ConfigChannel+0x348>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2102      	movs	r1, #2
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fe ffd5 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddd0:	fa93 f3a3 	rbit	r3, r3
 800ddd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800ddd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800dde0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d101      	bne.n	800ddec <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800dde8:	2320      	movs	r3, #32
 800ddea:	e004      	b.n	800ddf6 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800ddec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddf0:	fab3 f383 	clz	r3, r3
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de00:	2b00      	cmp	r3, #0
 800de02:	d105      	bne.n	800de10 <HAL_ADC_ConfigChannel+0x360>
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	0e9b      	lsrs	r3, r3, #26
 800de0a:	f003 031f 	and.w	r3, r3, #31
 800de0e:	e016      	b.n	800de3e <HAL_ADC_ConfigChannel+0x38e>
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de1c:	fa93 f3a3 	rbit	r3, r3
 800de20:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800de22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800de28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d101      	bne.n	800de34 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800de30:	2320      	movs	r3, #32
 800de32:	e004      	b.n	800de3e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800de34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de38:	fab3 f383 	clz	r3, r3
 800de3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800de3e:	429a      	cmp	r2, r3
 800de40:	d106      	bne.n	800de50 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2200      	movs	r2, #0
 800de48:	2102      	movs	r1, #2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe ffa6 	bl	800cd9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2103      	movs	r1, #3
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe ff8a 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800de5c:	4603      	mov	r3, r0
 800de5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10a      	bne.n	800de7c <HAL_ADC_ConfigChannel+0x3cc>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2103      	movs	r1, #3
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fe ff7f 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800de72:	4603      	mov	r3, r0
 800de74:	0e9b      	lsrs	r3, r3, #26
 800de76:	f003 021f 	and.w	r2, r3, #31
 800de7a:	e017      	b.n	800deac <HAL_ADC_ConfigChannel+0x3fc>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2103      	movs	r1, #3
 800de82:	4618      	mov	r0, r3
 800de84:	f7fe ff74 	bl	800cd70 <LL_ADC_GetOffsetChannel>
 800de88:	4603      	mov	r3, r0
 800de8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de8e:	fa93 f3a3 	rbit	r3, r3
 800de92:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800de94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de96:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800de98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d101      	bne.n	800dea2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800de9e:	2320      	movs	r3, #32
 800dea0:	e003      	b.n	800deaa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800dea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dea4:	fab3 f383 	clz	r3, r3
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d105      	bne.n	800dec4 <HAL_ADC_ConfigChannel+0x414>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	0e9b      	lsrs	r3, r3, #26
 800debe:	f003 031f 	and.w	r3, r3, #31
 800dec2:	e011      	b.n	800dee8 <HAL_ADC_ConfigChannel+0x438>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800deca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800decc:	fa93 f3a3 	rbit	r3, r3
 800ded0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800ded2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ded4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800ded6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d101      	bne.n	800dee0 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800dedc:	2320      	movs	r3, #32
 800dede:	e003      	b.n	800dee8 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800dee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dee2:	fab3 f383 	clz	r3, r3
 800dee6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800dee8:	429a      	cmp	r2, r3
 800deea:	d106      	bne.n	800defa <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2200      	movs	r2, #0
 800def2:	2103      	movs	r1, #3
 800def4:	4618      	mov	r0, r3
 800def6:	f7fe ff51 	bl	800cd9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	4618      	mov	r0, r3
 800df00:	f7ff f8ae 	bl	800d060 <LL_ADC_IsEnabled>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	f040 8140 	bne.w	800e18c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6818      	ldr	r0, [r3, #0]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	6819      	ldr	r1, [r3, #0]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	461a      	mov	r2, r3
 800df1a:	f7fe ffeb 	bl	800cef4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	4a8f      	ldr	r2, [pc, #572]	; (800e160 <HAL_ADC_ConfigChannel+0x6b0>)
 800df24:	4293      	cmp	r3, r2
 800df26:	f040 8131 	bne.w	800e18c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10b      	bne.n	800df52 <HAL_ADC_ConfigChannel+0x4a2>
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	0e9b      	lsrs	r3, r3, #26
 800df40:	3301      	adds	r3, #1
 800df42:	f003 031f 	and.w	r3, r3, #31
 800df46:	2b09      	cmp	r3, #9
 800df48:	bf94      	ite	ls
 800df4a:	2301      	movls	r3, #1
 800df4c:	2300      	movhi	r3, #0
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	e019      	b.n	800df86 <HAL_ADC_ConfigChannel+0x4d6>
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df5a:	fa93 f3a3 	rbit	r3, r3
 800df5e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800df60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df62:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800df64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800df6a:	2320      	movs	r3, #32
 800df6c:	e003      	b.n	800df76 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800df6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df70:	fab3 f383 	clz	r3, r3
 800df74:	b2db      	uxtb	r3, r3
 800df76:	3301      	adds	r3, #1
 800df78:	f003 031f 	and.w	r3, r3, #31
 800df7c:	2b09      	cmp	r3, #9
 800df7e:	bf94      	ite	ls
 800df80:	2301      	movls	r3, #1
 800df82:	2300      	movhi	r3, #0
 800df84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800df86:	2b00      	cmp	r3, #0
 800df88:	d079      	beq.n	800e07e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df92:	2b00      	cmp	r3, #0
 800df94:	d107      	bne.n	800dfa6 <HAL_ADC_ConfigChannel+0x4f6>
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	0e9b      	lsrs	r3, r3, #26
 800df9c:	3301      	adds	r3, #1
 800df9e:	069b      	lsls	r3, r3, #26
 800dfa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800dfa4:	e015      	b.n	800dfd2 <HAL_ADC_ConfigChannel+0x522>
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfae:	fa93 f3a3 	rbit	r3, r3
 800dfb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800dfb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800dfb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800dfbe:	2320      	movs	r3, #32
 800dfc0:	e003      	b.n	800dfca <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800dfc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfc4:	fab3 f383 	clz	r3, r3
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	3301      	adds	r3, #1
 800dfcc:	069b      	lsls	r3, r3, #26
 800dfce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d109      	bne.n	800dff2 <HAL_ADC_ConfigChannel+0x542>
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	0e9b      	lsrs	r3, r3, #26
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	f003 031f 	and.w	r3, r3, #31
 800dfea:	2101      	movs	r1, #1
 800dfec:	fa01 f303 	lsl.w	r3, r1, r3
 800dff0:	e017      	b.n	800e022 <HAL_ADC_ConfigChannel+0x572>
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dffa:	fa93 f3a3 	rbit	r3, r3
 800dffe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800e000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e002:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800e004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800e00a:	2320      	movs	r3, #32
 800e00c:	e003      	b.n	800e016 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800e00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e010:	fab3 f383 	clz	r3, r3
 800e014:	b2db      	uxtb	r3, r3
 800e016:	3301      	adds	r3, #1
 800e018:	f003 031f 	and.w	r3, r3, #31
 800e01c:	2101      	movs	r1, #1
 800e01e:	fa01 f303 	lsl.w	r3, r1, r3
 800e022:	ea42 0103 	orr.w	r1, r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10a      	bne.n	800e048 <HAL_ADC_ConfigChannel+0x598>
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	0e9b      	lsrs	r3, r3, #26
 800e038:	3301      	adds	r3, #1
 800e03a:	f003 021f 	and.w	r2, r3, #31
 800e03e:	4613      	mov	r3, r2
 800e040:	005b      	lsls	r3, r3, #1
 800e042:	4413      	add	r3, r2
 800e044:	051b      	lsls	r3, r3, #20
 800e046:	e018      	b.n	800e07a <HAL_ADC_ConfigChannel+0x5ca>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e050:	fa93 f3a3 	rbit	r3, r3
 800e054:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800e056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e058:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800e05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800e060:	2320      	movs	r3, #32
 800e062:	e003      	b.n	800e06c <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800e064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e066:	fab3 f383 	clz	r3, r3
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	3301      	adds	r3, #1
 800e06e:	f003 021f 	and.w	r2, r3, #31
 800e072:	4613      	mov	r3, r2
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	4413      	add	r3, r2
 800e078:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e07a:	430b      	orrs	r3, r1
 800e07c:	e081      	b.n	800e182 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e086:	2b00      	cmp	r3, #0
 800e088:	d107      	bne.n	800e09a <HAL_ADC_ConfigChannel+0x5ea>
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	0e9b      	lsrs	r3, r3, #26
 800e090:	3301      	adds	r3, #1
 800e092:	069b      	lsls	r3, r3, #26
 800e094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e098:	e015      	b.n	800e0c6 <HAL_ADC_ConfigChannel+0x616>
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	fa93 f3a3 	rbit	r3, r3
 800e0a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800e0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800e0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d101      	bne.n	800e0b6 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800e0b2:	2320      	movs	r3, #32
 800e0b4:	e003      	b.n	800e0be <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	fab3 f383 	clz	r3, r3
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	3301      	adds	r3, #1
 800e0c0:	069b      	lsls	r3, r3, #26
 800e0c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d109      	bne.n	800e0e6 <HAL_ADC_ConfigChannel+0x636>
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	0e9b      	lsrs	r3, r3, #26
 800e0d8:	3301      	adds	r3, #1
 800e0da:	f003 031f 	and.w	r3, r3, #31
 800e0de:	2101      	movs	r1, #1
 800e0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e0e4:	e017      	b.n	800e116 <HAL_ADC_ConfigChannel+0x666>
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	fa93 f3a3 	rbit	r3, r3
 800e0f2:	61fb      	str	r3, [r7, #28]
  return result;
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d101      	bne.n	800e102 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800e0fe:	2320      	movs	r3, #32
 800e100:	e003      	b.n	800e10a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800e102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e104:	fab3 f383 	clz	r3, r3
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	3301      	adds	r3, #1
 800e10c:	f003 031f 	and.w	r3, r3, #31
 800e110:	2101      	movs	r1, #1
 800e112:	fa01 f303 	lsl.w	r3, r1, r3
 800e116:	ea42 0103 	orr.w	r1, r2, r3
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10d      	bne.n	800e142 <HAL_ADC_ConfigChannel+0x692>
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	0e9b      	lsrs	r3, r3, #26
 800e12c:	3301      	adds	r3, #1
 800e12e:	f003 021f 	and.w	r2, r3, #31
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	3b1e      	subs	r3, #30
 800e13a:	051b      	lsls	r3, r3, #20
 800e13c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e140:	e01e      	b.n	800e180 <HAL_ADC_ConfigChannel+0x6d0>
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	fa93 f3a3 	rbit	r3, r3
 800e14e:	613b      	str	r3, [r7, #16]
  return result;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d104      	bne.n	800e164 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800e15a:	2320      	movs	r3, #32
 800e15c:	e006      	b.n	800e16c <HAL_ADC_ConfigChannel+0x6bc>
 800e15e:	bf00      	nop
 800e160:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	fab3 f383 	clz	r3, r3
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	3301      	adds	r3, #1
 800e16e:	f003 021f 	and.w	r2, r3, #31
 800e172:	4613      	mov	r3, r2
 800e174:	005b      	lsls	r3, r3, #1
 800e176:	4413      	add	r3, r2
 800e178:	3b1e      	subs	r3, #30
 800e17a:	051b      	lsls	r3, r3, #20
 800e17c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e180:	430b      	orrs	r3, r1
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	6892      	ldr	r2, [r2, #8]
 800e186:	4619      	mov	r1, r3
 800e188:	f7fe fe88 	bl	800ce9c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	4b3d      	ldr	r3, [pc, #244]	; (800e288 <HAL_ADC_ConfigChannel+0x7d8>)
 800e192:	4013      	ands	r3, r2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d06c      	beq.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800e198:	483c      	ldr	r0, [pc, #240]	; (800e28c <HAL_ADC_ConfigChannel+0x7dc>)
 800e19a:	f7fe fdb7 	bl	800cd0c <LL_ADC_GetCommonPathInternalCh>
 800e19e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a3a      	ldr	r2, [pc, #232]	; (800e290 <HAL_ADC_ConfigChannel+0x7e0>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d127      	bne.n	800e1fc <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800e1ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e1b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d121      	bne.n	800e1fc <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a35      	ldr	r2, [pc, #212]	; (800e294 <HAL_ADC_ConfigChannel+0x7e4>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d157      	bne.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e1c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e1c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	482f      	ldr	r0, [pc, #188]	; (800e28c <HAL_ADC_ConfigChannel+0x7dc>)
 800e1ce:	f7fe fd8a 	bl	800cce6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e1d2:	4b31      	ldr	r3, [pc, #196]	; (800e298 <HAL_ADC_ConfigChannel+0x7e8>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	099b      	lsrs	r3, r3, #6
 800e1d8:	4a30      	ldr	r2, [pc, #192]	; (800e29c <HAL_ADC_ConfigChannel+0x7ec>)
 800e1da:	fba2 2303 	umull	r2, r3, r2, r3
 800e1de:	099b      	lsrs	r3, r3, #6
 800e1e0:	1c5a      	adds	r2, r3, #1
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	4413      	add	r3, r2
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800e1ec:	e002      	b.n	800e1f4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1f9      	bne.n	800e1ee <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800e1fa:	e03a      	b.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a27      	ldr	r2, [pc, #156]	; (800e2a0 <HAL_ADC_ConfigChannel+0x7f0>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d113      	bne.n	800e22e <HAL_ADC_ConfigChannel+0x77e>
 800e206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e20a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d10d      	bne.n	800e22e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a1f      	ldr	r2, [pc, #124]	; (800e294 <HAL_ADC_ConfigChannel+0x7e4>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d12a      	bne.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e21c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e224:	4619      	mov	r1, r3
 800e226:	4819      	ldr	r0, [pc, #100]	; (800e28c <HAL_ADC_ConfigChannel+0x7dc>)
 800e228:	f7fe fd5d 	bl	800cce6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800e22c:	e021      	b.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a1c      	ldr	r2, [pc, #112]	; (800e2a4 <HAL_ADC_ConfigChannel+0x7f4>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d11c      	bne.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800e238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e23c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e240:	2b00      	cmp	r3, #0
 800e242:	d116      	bne.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a12      	ldr	r2, [pc, #72]	; (800e294 <HAL_ADC_ConfigChannel+0x7e4>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d111      	bne.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e24e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e256:	4619      	mov	r1, r3
 800e258:	480c      	ldr	r0, [pc, #48]	; (800e28c <HAL_ADC_ConfigChannel+0x7dc>)
 800e25a:	f7fe fd44 	bl	800cce6 <LL_ADC_SetCommonPathInternalCh>
 800e25e:	e008      	b.n	800e272 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e264:	f043 0220 	orr.w	r2, r3, #32
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800e27a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800e27e:	4618      	mov	r0, r3
 800e280:	37d8      	adds	r7, #216	; 0xd8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	80080000 	.word	0x80080000
 800e28c:	50040300 	.word	0x50040300
 800e290:	c7520000 	.word	0xc7520000
 800e294:	50040000 	.word	0x50040000
 800e298:	200000b4 	.word	0x200000b4
 800e29c:	053e2d63 	.word	0x053e2d63
 800e2a0:	cb840000 	.word	0xcb840000
 800e2a4:	80000001 	.word	0x80000001

0800e2a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b088      	sub	sp, #32
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fe ff1c 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800e2c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fe ff3d 	bl	800d14a <LL_ADC_INJ_IsConversionOngoing>
 800e2d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d103      	bne.n	800e2e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f000 8098 	beq.w	800e410 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d02a      	beq.n	800e344 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	7e5b      	ldrb	r3, [r3, #25]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d126      	bne.n	800e344 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	7e1b      	ldrb	r3, [r3, #24]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d122      	bne.n	800e344 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800e2fe:	2301      	movs	r3, #1
 800e300:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800e302:	e014      	b.n	800e32e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	4a45      	ldr	r2, [pc, #276]	; (800e41c <ADC_ConversionStop+0x174>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d90d      	bls.n	800e328 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e310:	f043 0210 	orr.w	r2, r3, #16
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e31c:	f043 0201 	orr.w	r2, r3, #1
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	e074      	b.n	800e412 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	3301      	adds	r3, #1
 800e32c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e338:	2b40      	cmp	r3, #64	; 0x40
 800e33a:	d1e3      	bne.n	800e304 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2240      	movs	r2, #64	; 0x40
 800e342:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	2b02      	cmp	r3, #2
 800e348:	d014      	beq.n	800e374 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4618      	mov	r0, r3
 800e350:	f7fe fed4 	bl	800d0fc <LL_ADC_REG_IsConversionOngoing>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00c      	beq.n	800e374 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe fe91 	bl	800d086 <LL_ADC_IsDisableOngoing>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d104      	bne.n	800e374 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fe feb0 	bl	800d0d4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	2b01      	cmp	r3, #1
 800e378:	d014      	beq.n	800e3a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fe fee3 	bl	800d14a <LL_ADC_INJ_IsConversionOngoing>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00c      	beq.n	800e3a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fe fe79 	bl	800d086 <LL_ADC_IsDisableOngoing>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d104      	bne.n	800e3a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe febf 	bl	800d122 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d005      	beq.n	800e3b6 <ADC_ConversionStop+0x10e>
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	2b03      	cmp	r3, #3
 800e3ae:	d105      	bne.n	800e3bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800e3b0:	230c      	movs	r3, #12
 800e3b2:	617b      	str	r3, [r7, #20]
        break;
 800e3b4:	e005      	b.n	800e3c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800e3b6:	2308      	movs	r3, #8
 800e3b8:	617b      	str	r3, [r7, #20]
        break;
 800e3ba:	e002      	b.n	800e3c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800e3bc:	2304      	movs	r3, #4
 800e3be:	617b      	str	r3, [r7, #20]
        break;
 800e3c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800e3c2:	f7fe fc4d 	bl	800cc60 <HAL_GetTick>
 800e3c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800e3c8:	e01b      	b.n	800e402 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800e3ca:	f7fe fc49 	bl	800cc60 <HAL_GetTick>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	2b05      	cmp	r3, #5
 800e3d6:	d914      	bls.n	800e402 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	689a      	ldr	r2, [r3, #8]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00d      	beq.n	800e402 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ea:	f043 0210 	orr.w	r2, r3, #16
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3f6:	f043 0201 	orr.w	r2, r3, #1
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	e007      	b.n	800e412 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	689a      	ldr	r2, [r3, #8]
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	4013      	ands	r3, r2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1dc      	bne.n	800e3ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800e410:	2300      	movs	r3, #0
}
 800e412:	4618      	mov	r0, r3
 800e414:	3720      	adds	r7, #32
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	a33fffff 	.word	0xa33fffff

0800e420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe fe17 	bl	800d060 <LL_ADC_IsEnabled>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d14d      	bne.n	800e4d4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689a      	ldr	r2, [r3, #8]
 800e43e:	4b28      	ldr	r3, [pc, #160]	; (800e4e0 <ADC_Enable+0xc0>)
 800e440:	4013      	ands	r3, r2
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00d      	beq.n	800e462 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e44a:	f043 0210 	orr.w	r2, r3, #16
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e456:	f043 0201 	orr.w	r2, r3, #1
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e039      	b.n	800e4d6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe fdd2 	bl	800d010 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800e46c:	f7fe fbf8 	bl	800cc60 <HAL_GetTick>
 800e470:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e472:	e028      	b.n	800e4c6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fe fdf1 	bl	800d060 <LL_ADC_IsEnabled>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d104      	bne.n	800e48e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fe fdc1 	bl	800d010 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e48e:	f7fe fbe7 	bl	800cc60 <HAL_GetTick>
 800e492:	4602      	mov	r2, r0
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	2b02      	cmp	r3, #2
 800e49a:	d914      	bls.n	800e4c6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d00d      	beq.n	800e4c6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4ae:	f043 0210 	orr.w	r2, r3, #16
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ba:	f043 0201 	orr.w	r2, r3, #1
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e007      	b.n	800e4d6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d1cf      	bne.n	800e474 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	8000003f 	.word	0x8000003f

0800e4e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe fdc8 	bl	800d086 <LL_ADC_IsDisableOngoing>
 800e4f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fdaf 	bl	800d060 <LL_ADC_IsEnabled>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d047      	beq.n	800e598 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d144      	bne.n	800e598 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	f003 030d 	and.w	r3, r3, #13
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d10c      	bne.n	800e536 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4618      	mov	r0, r3
 800e522:	f7fe fd89 	bl	800d038 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2203      	movs	r2, #3
 800e52c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800e52e:	f7fe fb97 	bl	800cc60 <HAL_GetTick>
 800e532:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e534:	e029      	b.n	800e58a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53a:	f043 0210 	orr.w	r2, r3, #16
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e546:	f043 0201 	orr.w	r2, r3, #1
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	e023      	b.n	800e59a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800e552:	f7fe fb85 	bl	800cc60 <HAL_GetTick>
 800e556:	4602      	mov	r2, r0
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d914      	bls.n	800e58a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	f003 0301 	and.w	r3, r3, #1
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00d      	beq.n	800e58a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e572:	f043 0210 	orr.w	r2, r3, #16
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e57e:	f043 0201 	orr.w	r2, r3, #1
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e586:	2301      	movs	r3, #1
 800e588:	e007      	b.n	800e59a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	f003 0301 	and.w	r3, r3, #1
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1dc      	bne.n	800e552 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b084      	sub	sp, #16
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ae:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d14b      	bne.n	800e654 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f003 0308 	and.w	r3, r3, #8
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d021      	beq.n	800e61a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fc0c 	bl	800cdf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d032      	beq.n	800e64c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d12b      	bne.n	800e64c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d11f      	bne.n	800e64c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e610:	f043 0201 	orr.w	r2, r3, #1
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	659a      	str	r2, [r3, #88]	; 0x58
 800e618:	e018      	b.n	800e64c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	68db      	ldr	r3, [r3, #12]
 800e620:	f003 0302 	and.w	r3, r3, #2
 800e624:	2b00      	cmp	r3, #0
 800e626:	d111      	bne.n	800e64c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e62c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d105      	bne.n	800e64c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e644:	f043 0201 	orr.w	r2, r3, #1
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f7fb fd0d 	bl	800a06c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800e652:	e00e      	b.n	800e672 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e658:	f003 0310 	and.w	r3, r3, #16
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d003      	beq.n	800e668 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f7ff fa1b 	bl	800da9c <HAL_ADC_ErrorCallback>
}
 800e666:	e004      	b.n	800e672 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e66c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	4798      	blx	r3
}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b084      	sub	sp, #16
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e686:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f7ff f9f3 	bl	800da74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e68e:	bf00      	nop
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b084      	sub	sp, #16
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6b4:	f043 0204 	orr.w	r2, r3, #4
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f7ff f9ed 	bl	800da9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e6c2:	bf00      	nop
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <LL_ADC_IsEnabled>:
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b083      	sub	sp, #12
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d101      	bne.n	800e6e2 <LL_ADC_IsEnabled+0x18>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e000      	b.n	800e6e4 <LL_ADC_IsEnabled+0x1a>
 800e6e2:	2300      	movs	r3, #0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <LL_ADC_REG_IsConversionOngoing>:
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	f003 0304 	and.w	r3, r3, #4
 800e700:	2b04      	cmp	r3, #4
 800e702:	d101      	bne.n	800e708 <LL_ADC_REG_IsConversionOngoing+0x18>
 800e704:	2301      	movs	r3, #1
 800e706:	e000      	b.n	800e70a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800e708:	2300      	movs	r3, #0
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	370c      	adds	r7, #12
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e716:	b480      	push	{r7}
 800e718:	b083      	sub	sp, #12
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800e71e:	bf00      	nop
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800e72a:	b480      	push	{r7}
 800e72c:	b083      	sub	sp, #12
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800e732:	bf00      	nop
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800e746:	bf00      	nop
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800e752:	b480      	push	{r7}
 800e754:	b083      	sub	sp, #12
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800e75a:	bf00      	nop
 800e75c:	370c      	adds	r7, #12
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr

0800e766 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800e766:	b480      	push	{r7}
 800e768:	b083      	sub	sp, #12
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800e76e:	bf00      	nop
 800e770:	370c      	adds	r7, #12
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
	...

0800e77c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800e77c:	b590      	push	{r4, r7, lr}
 800e77e:	b0a1      	sub	sp, #132	; 0x84
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e792:	2b01      	cmp	r3, #1
 800e794:	d101      	bne.n	800e79a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800e796:	2302      	movs	r3, #2
 800e798:	e089      	b.n	800e8ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a42      	ldr	r2, [pc, #264]	; (800e8b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d102      	bne.n	800e7ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800e7b4:	4b41      	ldr	r3, [pc, #260]	; (800e8bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	e001      	b.n	800e7be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d10b      	bne.n	800e7dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7c8:	f043 0220 	orr.w	r2, r3, #32
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e068      	b.n	800e8ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7ff ff86 	bl	800e6f0 <LL_ADC_REG_IsConversionOngoing>
 800e7e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7ff ff80 	bl	800e6f0 <LL_ADC_REG_IsConversionOngoing>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d14a      	bne.n	800e88c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800e7f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d147      	bne.n	800e88c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800e7fc:	4b30      	ldr	r3, [pc, #192]	; (800e8c0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800e7fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d027      	beq.n	800e858 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800e808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	6859      	ldr	r1, [r3, #4]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e81a:	035b      	lsls	r3, r3, #13
 800e81c:	430b      	orrs	r3, r1
 800e81e:	431a      	orrs	r2, r3
 800e820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e822:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800e824:	4824      	ldr	r0, [pc, #144]	; (800e8b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800e826:	f7ff ff50 	bl	800e6ca <LL_ADC_IsEnabled>
 800e82a:	4604      	mov	r4, r0
 800e82c:	4823      	ldr	r0, [pc, #140]	; (800e8bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800e82e:	f7ff ff4c 	bl	800e6ca <LL_ADC_IsEnabled>
 800e832:	4603      	mov	r3, r0
 800e834:	4323      	orrs	r3, r4
 800e836:	2b00      	cmp	r3, #0
 800e838:	d132      	bne.n	800e8a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800e83a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800e842:	f023 030f 	bic.w	r3, r3, #15
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	6811      	ldr	r1, [r2, #0]
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	6892      	ldr	r2, [r2, #8]
 800e84e:	430a      	orrs	r2, r1
 800e850:	431a      	orrs	r2, r3
 800e852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e854:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e856:	e023      	b.n	800e8a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800e858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e85a:	689b      	ldr	r3, [r3, #8]
 800e85c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e860:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e862:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800e864:	4814      	ldr	r0, [pc, #80]	; (800e8b8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800e866:	f7ff ff30 	bl	800e6ca <LL_ADC_IsEnabled>
 800e86a:	4604      	mov	r4, r0
 800e86c:	4813      	ldr	r0, [pc, #76]	; (800e8bc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800e86e:	f7ff ff2c 	bl	800e6ca <LL_ADC_IsEnabled>
 800e872:	4603      	mov	r3, r0
 800e874:	4323      	orrs	r3, r4
 800e876:	2b00      	cmp	r3, #0
 800e878:	d112      	bne.n	800e8a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800e87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800e882:	f023 030f 	bic.w	r3, r3, #15
 800e886:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e888:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e88a:	e009      	b.n	800e8a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e890:	f043 0220 	orr.w	r2, r3, #32
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800e898:	2301      	movs	r3, #1
 800e89a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e89e:	e000      	b.n	800e8a2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e8a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800e8aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3784      	adds	r7, #132	; 0x84
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd90      	pop	{r4, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	50040000 	.word	0x50040000
 800e8bc:	50040100 	.word	0x50040100
 800e8c0:	50040300 	.word	0x50040300

0800e8c4 <__NVIC_SetPriorityGrouping>:
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f003 0307 	and.w	r3, r3, #7
 800e8d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e8d4:	4b0c      	ldr	r3, [pc, #48]	; (800e908 <__NVIC_SetPriorityGrouping+0x44>)
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e8e0:	4013      	ands	r3, r2
 800e8e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e8ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e8f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e8f6:	4a04      	ldr	r2, [pc, #16]	; (800e908 <__NVIC_SetPriorityGrouping+0x44>)
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	60d3      	str	r3, [r2, #12]
}
 800e8fc:	bf00      	nop
 800e8fe:	3714      	adds	r7, #20
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	e000ed00 	.word	0xe000ed00

0800e90c <__NVIC_GetPriorityGrouping>:
{
 800e90c:	b480      	push	{r7}
 800e90e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e910:	4b04      	ldr	r3, [pc, #16]	; (800e924 <__NVIC_GetPriorityGrouping+0x18>)
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	0a1b      	lsrs	r3, r3, #8
 800e916:	f003 0307 	and.w	r3, r3, #7
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr
 800e924:	e000ed00 	.word	0xe000ed00

0800e928 <__NVIC_EnableIRQ>:
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	4603      	mov	r3, r0
 800e930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e936:	2b00      	cmp	r3, #0
 800e938:	db0b      	blt.n	800e952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e93a:	79fb      	ldrb	r3, [r7, #7]
 800e93c:	f003 021f 	and.w	r2, r3, #31
 800e940:	4907      	ldr	r1, [pc, #28]	; (800e960 <__NVIC_EnableIRQ+0x38>)
 800e942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e946:	095b      	lsrs	r3, r3, #5
 800e948:	2001      	movs	r0, #1
 800e94a:	fa00 f202 	lsl.w	r2, r0, r2
 800e94e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e952:	bf00      	nop
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	e000e100 	.word	0xe000e100

0800e964 <__NVIC_SetPriority>:
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	4603      	mov	r3, r0
 800e96c:	6039      	str	r1, [r7, #0]
 800e96e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e974:	2b00      	cmp	r3, #0
 800e976:	db0a      	blt.n	800e98e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	490c      	ldr	r1, [pc, #48]	; (800e9b0 <__NVIC_SetPriority+0x4c>)
 800e97e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e982:	0112      	lsls	r2, r2, #4
 800e984:	b2d2      	uxtb	r2, r2
 800e986:	440b      	add	r3, r1
 800e988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e98c:	e00a      	b.n	800e9a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	b2da      	uxtb	r2, r3
 800e992:	4908      	ldr	r1, [pc, #32]	; (800e9b4 <__NVIC_SetPriority+0x50>)
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	f003 030f 	and.w	r3, r3, #15
 800e99a:	3b04      	subs	r3, #4
 800e99c:	0112      	lsls	r2, r2, #4
 800e99e:	b2d2      	uxtb	r2, r2
 800e9a0:	440b      	add	r3, r1
 800e9a2:	761a      	strb	r2, [r3, #24]
}
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	e000e100 	.word	0xe000e100
 800e9b4:	e000ed00 	.word	0xe000ed00

0800e9b8 <NVIC_EncodePriority>:
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b089      	sub	sp, #36	; 0x24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f003 0307 	and.w	r3, r3, #7
 800e9ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	f1c3 0307 	rsb	r3, r3, #7
 800e9d2:	2b04      	cmp	r3, #4
 800e9d4:	bf28      	it	cs
 800e9d6:	2304      	movcs	r3, #4
 800e9d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	2b06      	cmp	r3, #6
 800e9e0:	d902      	bls.n	800e9e8 <NVIC_EncodePriority+0x30>
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	3b03      	subs	r3, #3
 800e9e6:	e000      	b.n	800e9ea <NVIC_EncodePriority+0x32>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f6:	43da      	mvns	r2, r3
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	401a      	ands	r2, r3
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ea00:	f04f 31ff 	mov.w	r1, #4294967295
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	fa01 f303 	lsl.w	r3, r1, r3
 800ea0a:	43d9      	mvns	r1, r3
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ea10:	4313      	orrs	r3, r2
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3724      	adds	r7, #36	; 0x24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
	...

0800ea20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ea30:	d301      	bcc.n	800ea36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ea32:	2301      	movs	r3, #1
 800ea34:	e00f      	b.n	800ea56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ea36:	4a0a      	ldr	r2, [pc, #40]	; (800ea60 <SysTick_Config+0x40>)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	3b01      	subs	r3, #1
 800ea3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ea3e:	210f      	movs	r1, #15
 800ea40:	f04f 30ff 	mov.w	r0, #4294967295
 800ea44:	f7ff ff8e 	bl	800e964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ea48:	4b05      	ldr	r3, [pc, #20]	; (800ea60 <SysTick_Config+0x40>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ea4e:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <SysTick_Config+0x40>)
 800ea50:	2207      	movs	r2, #7
 800ea52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	e000e010 	.word	0xe000e010

0800ea64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff ff29 	bl	800e8c4 <__NVIC_SetPriorityGrouping>
}
 800ea72:	bf00      	nop
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ea7a:	b580      	push	{r7, lr}
 800ea7c:	b086      	sub	sp, #24
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	4603      	mov	r3, r0
 800ea82:	60b9      	str	r1, [r7, #8]
 800ea84:	607a      	str	r2, [r7, #4]
 800ea86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ea8c:	f7ff ff3e 	bl	800e90c <__NVIC_GetPriorityGrouping>
 800ea90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	68b9      	ldr	r1, [r7, #8]
 800ea96:	6978      	ldr	r0, [r7, #20]
 800ea98:	f7ff ff8e 	bl	800e9b8 <NVIC_EncodePriority>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff ff5d 	bl	800e964 <__NVIC_SetPriority>
}
 800eaaa:	bf00      	nop
 800eaac:	3718      	adds	r7, #24
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b082      	sub	sp, #8
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	4603      	mov	r3, r0
 800eaba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800eabc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7ff ff31 	bl	800e928 <__NVIC_EnableIRQ>
}
 800eac6:	bf00      	nop
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800eace:	b580      	push	{r7, lr}
 800ead0:	b082      	sub	sp, #8
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7ff ffa2 	bl	800ea20 <SysTick_Config>
 800eadc:	4603      	mov	r3, r0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e014      	b.n	800eb22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	791b      	ldrb	r3, [r3, #4]
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d105      	bne.n	800eb0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f7fa feed 	bl	80098e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2202      	movs	r2, #2
 800eb12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}

0800eb2a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b082      	sub	sp, #8
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb40:	d120      	bne.n	800eb84 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb50:	d118      	bne.n	800eb84 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2204      	movs	r2, #4
 800eb56:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	691b      	ldr	r3, [r3, #16]
 800eb5c:	f043 0201 	orr.w	r2, r3, #1
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eb7c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f82d 	bl	800ebde <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb92:	d120      	bne.n	800ebd6 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eba2:	d118      	bne.n	800ebd6 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2204      	movs	r2, #4
 800eba8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	691b      	ldr	r3, [r3, #16]
 800ebae:	f043 0202 	orr.w	r2, r3, #2
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ebbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ebce:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f94f 	bl	800ee74 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800ebd6:	bf00      	nop
 800ebd8:	3708      	adds	r7, #8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}

0800ebde <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800ebde:	b480      	push	{r7}
 800ebe0:	b083      	sub	sp, #12
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800ebe6:	bf00      	nop
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800ec00:	2300      	movs	r3, #0
 800ec02:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	795b      	ldrb	r3, [r3, #5]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d101      	bne.n	800ec10 <HAL_DAC_ConfigChannel+0x1c>
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	e12a      	b.n	800ee66 <HAL_DAC_ConfigChannel+0x272>
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2201      	movs	r2, #1
 800ec14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2202      	movs	r2, #2
 800ec1a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	2b04      	cmp	r3, #4
 800ec22:	d174      	bne.n	800ed0e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800ec24:	f7fe f81c 	bl	800cc60 <HAL_GetTick>
 800ec28:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d134      	bne.n	800ec9a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800ec30:	e011      	b.n	800ec56 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800ec32:	f7fe f815 	bl	800cc60 <HAL_GetTick>
 800ec36:	4602      	mov	r2, r0
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d90a      	bls.n	800ec56 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	f043 0208 	orr.w	r2, r3, #8
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2203      	movs	r2, #3
 800ec50:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800ec52:	2303      	movs	r3, #3
 800ec54:	e107      	b.n	800ee66 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d1e6      	bne.n	800ec32 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800ec64:	2001      	movs	r0, #1
 800ec66:	f7fe f807 	bl	800cc78 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	69d2      	ldr	r2, [r2, #28]
 800ec72:	641a      	str	r2, [r3, #64]	; 0x40
 800ec74:	e01e      	b.n	800ecb4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800ec76:	f7fd fff3 	bl	800cc60 <HAL_GetTick>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d90a      	bls.n	800ec9a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	f043 0208 	orr.w	r2, r3, #8
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2203      	movs	r2, #3
 800ec94:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e0e5      	b.n	800ee66 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	dbe8      	blt.n	800ec76 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800eca4:	2001      	movs	r0, #1
 800eca6:	f7fd ffe7 	bl	800cc78 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68ba      	ldr	r2, [r7, #8]
 800ecb0:	69d2      	ldr	r2, [r2, #28]
 800ecb2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f003 0310 	and.w	r3, r3, #16
 800ecc0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ecc4:	fa01 f303 	lsl.w	r3, r1, r3
 800ecc8:	43db      	mvns	r3, r3
 800ecca:	ea02 0103 	and.w	r1, r2, r3
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	6a1a      	ldr	r2, [r3, #32]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f003 0310 	and.w	r3, r3, #16
 800ecd8:	409a      	lsls	r2, r3
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	430a      	orrs	r2, r1
 800ece0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f003 0310 	and.w	r3, r3, #16
 800ecee:	21ff      	movs	r1, #255	; 0xff
 800ecf0:	fa01 f303 	lsl.w	r3, r1, r3
 800ecf4:	43db      	mvns	r3, r3
 800ecf6:	ea02 0103 	and.w	r1, r2, r3
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f003 0310 	and.w	r3, r3, #16
 800ed04:	409a      	lsls	r2, r3
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	430a      	orrs	r2, r1
 800ed0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	2b01      	cmp	r3, #1
 800ed14:	d11d      	bne.n	800ed52 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed1c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f003 0310 	and.w	r3, r3, #16
 800ed24:	221f      	movs	r2, #31
 800ed26:	fa02 f303 	lsl.w	r3, r2, r3
 800ed2a:	43db      	mvns	r3, r3
 800ed2c:	69fa      	ldr	r2, [r7, #28]
 800ed2e:	4013      	ands	r3, r2
 800ed30:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f003 0310 	and.w	r3, r3, #16
 800ed3e:	697a      	ldr	r2, [r7, #20]
 800ed40:	fa02 f303 	lsl.w	r3, r2, r3
 800ed44:	69fa      	ldr	r2, [r7, #28]
 800ed46:	4313      	orrs	r3, r2
 800ed48:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	69fa      	ldr	r2, [r7, #28]
 800ed50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed58:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f003 0310 	and.w	r3, r3, #16
 800ed60:	2207      	movs	r2, #7
 800ed62:	fa02 f303 	lsl.w	r3, r2, r3
 800ed66:	43db      	mvns	r3, r3
 800ed68:	69fa      	ldr	r2, [r7, #28]
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	685a      	ldr	r2, [r3, #4]
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	431a      	orrs	r2, r3
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	691b      	ldr	r3, [r3, #16]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f003 0310 	and.w	r3, r3, #16
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	fa02 f303 	lsl.w	r3, r2, r3
 800ed8c:	69fa      	ldr	r2, [r7, #28]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69fa      	ldr	r2, [r7, #28]
 800ed98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	6819      	ldr	r1, [r3, #0]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f003 0310 	and.w	r3, r3, #16
 800eda6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800edaa:	fa02 f303 	lsl.w	r3, r2, r3
 800edae:	43da      	mvns	r2, r3
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	400a      	ands	r2, r1
 800edb6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f003 0310 	and.w	r3, r3, #16
 800edc6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800edca:	fa02 f303 	lsl.w	r3, r2, r3
 800edce:	43db      	mvns	r3, r3
 800edd0:	69fa      	ldr	r2, [r7, #28]
 800edd2:	4013      	ands	r3, r2
 800edd4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f003 0310 	and.w	r3, r3, #16
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	fa02 f303 	lsl.w	r3, r2, r3
 800ede8:	69fa      	ldr	r2, [r7, #28]
 800edea:	4313      	orrs	r3, r2
 800edec:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edf6:	d104      	bne.n	800ee02 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edfe:	61fb      	str	r3, [r7, #28]
 800ee00:	e018      	b.n	800ee34 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d104      	bne.n	800ee14 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800ee0a:	69fb      	ldr	r3, [r7, #28]
 800ee0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ee10:	61fb      	str	r3, [r7, #28]
 800ee12:	e00f      	b.n	800ee34 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800ee14:	f002 fca4 	bl	8011760 <HAL_RCC_GetHCLKFreq>
 800ee18:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	4a14      	ldr	r2, [pc, #80]	; (800ee70 <HAL_DAC_ConfigChannel+0x27c>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d904      	bls.n	800ee2c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee28:	61fb      	str	r3, [r7, #28]
 800ee2a:	e003      	b.n	800ee34 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ee32:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	69fa      	ldr	r2, [r7, #28]
 800ee3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	6819      	ldr	r1, [r3, #0]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f003 0310 	and.w	r3, r3, #16
 800ee48:	22c0      	movs	r2, #192	; 0xc0
 800ee4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee4e:	43da      	mvns	r2, r3
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	400a      	ands	r2, r1
 800ee56:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3720      	adds	r7, #32
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	04c4b400 	.word	0x04c4b400

0800ee74 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800ee7c:	bf00      	nop
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d101      	bne.n	800ee9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
 800ee98:	e08d      	b.n	800efb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	4b47      	ldr	r3, [pc, #284]	; (800efc0 <HAL_DMA_Init+0x138>)
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d80f      	bhi.n	800eec6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	4b45      	ldr	r3, [pc, #276]	; (800efc4 <HAL_DMA_Init+0x13c>)
 800eeae:	4413      	add	r3, r2
 800eeb0:	4a45      	ldr	r2, [pc, #276]	; (800efc8 <HAL_DMA_Init+0x140>)
 800eeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800eeb6:	091b      	lsrs	r3, r3, #4
 800eeb8:	009a      	lsls	r2, r3, #2
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4a42      	ldr	r2, [pc, #264]	; (800efcc <HAL_DMA_Init+0x144>)
 800eec2:	641a      	str	r2, [r3, #64]	; 0x40
 800eec4:	e00e      	b.n	800eee4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	461a      	mov	r2, r3
 800eecc:	4b40      	ldr	r3, [pc, #256]	; (800efd0 <HAL_DMA_Init+0x148>)
 800eece:	4413      	add	r3, r2
 800eed0:	4a3d      	ldr	r2, [pc, #244]	; (800efc8 <HAL_DMA_Init+0x140>)
 800eed2:	fba2 2303 	umull	r2, r3, r2, r3
 800eed6:	091b      	lsrs	r3, r3, #4
 800eed8:	009a      	lsls	r2, r3, #2
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4a3c      	ldr	r2, [pc, #240]	; (800efd4 <HAL_DMA_Init+0x14c>)
 800eee2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2202      	movs	r2, #2
 800eee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800eefa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eefe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ef08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ef14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ef20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a1b      	ldr	r3, [r3, #32]
 800ef26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 fa72 	bl	800f420 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef44:	d102      	bne.n	800ef4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	685a      	ldr	r2, [r3, #4]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef54:	b2d2      	uxtb	r2, r2
 800ef56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ef60:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d010      	beq.n	800ef8c <HAL_DMA_Init+0x104>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	2b04      	cmp	r3, #4
 800ef70:	d80c      	bhi.n	800ef8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f000 fa92 	bl	800f49c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ef88:	605a      	str	r2, [r3, #4]
 800ef8a:	e008      	b.n	800ef9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2200      	movs	r2, #0
 800ef96:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3710      	adds	r7, #16
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	40020407 	.word	0x40020407
 800efc4:	bffdfff8 	.word	0xbffdfff8
 800efc8:	cccccccd 	.word	0xcccccccd
 800efcc:	40020000 	.word	0x40020000
 800efd0:	bffdfbf8 	.word	0xbffdfbf8
 800efd4:	40020400 	.word	0x40020400

0800efd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d101      	bne.n	800eff8 <HAL_DMA_Start_IT+0x20>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e066      	b.n	800f0c6 <HAL_DMA_Start_IT+0xee>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f006:	b2db      	uxtb	r3, r3
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d155      	bne.n	800f0b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2202      	movs	r2, #2
 800f010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f022 0201 	bic.w	r2, r2, #1
 800f028:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	68b9      	ldr	r1, [r7, #8]
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f000 f9b6 	bl	800f3a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d008      	beq.n	800f050 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f042 020e 	orr.w	r2, r2, #14
 800f04c:	601a      	str	r2, [r3, #0]
 800f04e:	e00f      	b.n	800f070 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f022 0204 	bic.w	r2, r2, #4
 800f05e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f042 020a 	orr.w	r2, r2, #10
 800f06e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d007      	beq.n	800f08e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f08c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f092:	2b00      	cmp	r3, #0
 800f094:	d007      	beq.n	800f0a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f0a4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f042 0201 	orr.w	r2, r2, #1
 800f0b4:	601a      	str	r2, [r3, #0]
 800f0b6:	e005      	b.n	800f0c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800f0c0:	2302      	movs	r3, #2
 800f0c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3718      	adds	r7, #24
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f0ce:	b480      	push	{r7}
 800f0d0:	b085      	sub	sp, #20
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f0e0:	b2db      	uxtb	r3, r3
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d008      	beq.n	800f0f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2204      	movs	r2, #4
 800f0ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e040      	b.n	800f17a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f022 020e 	bic.w	r2, r2, #14
 800f106:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f116:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f022 0201 	bic.w	r2, r2, #1
 800f126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f12c:	f003 021c 	and.w	r2, r3, #28
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f134:	2101      	movs	r1, #1
 800f136:	fa01 f202 	lsl.w	r2, r1, r2
 800f13a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f144:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00c      	beq.n	800f168 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f15c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f166:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2201      	movs	r2, #1
 800f16c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800f178:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3714      	adds	r7, #20
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr

0800f186 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b084      	sub	sp, #16
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d005      	beq.n	800f1aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2204      	movs	r2, #4
 800f1a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	73fb      	strb	r3, [r7, #15]
 800f1a8:	e047      	b.n	800f23a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f022 020e 	bic.w	r2, r2, #14
 800f1b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f022 0201 	bic.w	r2, r2, #1
 800f1c8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f1d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1de:	f003 021c 	and.w	r2, r3, #28
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e6:	2101      	movs	r1, #1
 800f1e8:	fa01 f202 	lsl.w	r2, r1, r2
 800f1ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f1f6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00c      	beq.n	800f21a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f20a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f20e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f218:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2201      	movs	r2, #1
 800f21e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2200      	movs	r2, #0
 800f226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d003      	beq.n	800f23a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	4798      	blx	r3
    }
  }
  return status;
 800f23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3710      	adds	r7, #16
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f260:	f003 031c 	and.w	r3, r3, #28
 800f264:	2204      	movs	r2, #4
 800f266:	409a      	lsls	r2, r3
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	4013      	ands	r3, r2
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d026      	beq.n	800f2be <HAL_DMA_IRQHandler+0x7a>
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	f003 0304 	and.w	r3, r3, #4
 800f276:	2b00      	cmp	r3, #0
 800f278:	d021      	beq.n	800f2be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f003 0320 	and.w	r3, r3, #32
 800f284:	2b00      	cmp	r3, #0
 800f286:	d107      	bne.n	800f298 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f022 0204 	bic.w	r2, r2, #4
 800f296:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f29c:	f003 021c 	and.w	r2, r3, #28
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2a4:	2104      	movs	r1, #4
 800f2a6:	fa01 f202 	lsl.w	r2, r1, r2
 800f2aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d071      	beq.n	800f398 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800f2bc:	e06c      	b.n	800f398 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2c2:	f003 031c 	and.w	r3, r3, #28
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	409a      	lsls	r2, r3
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	4013      	ands	r3, r2
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d02e      	beq.n	800f330 <HAL_DMA_IRQHandler+0xec>
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	f003 0302 	and.w	r3, r3, #2
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d029      	beq.n	800f330 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f003 0320 	and.w	r3, r3, #32
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10b      	bne.n	800f302 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f022 020a 	bic.w	r2, r2, #10
 800f2f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f306:	f003 021c 	and.w	r2, r3, #28
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f30e:	2102      	movs	r1, #2
 800f310:	fa01 f202 	lsl.w	r2, r1, r2
 800f314:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2200      	movs	r2, #0
 800f31a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f322:	2b00      	cmp	r3, #0
 800f324:	d038      	beq.n	800f398 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f32e:	e033      	b.n	800f398 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f334:	f003 031c 	and.w	r3, r3, #28
 800f338:	2208      	movs	r2, #8
 800f33a:	409a      	lsls	r2, r3
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	4013      	ands	r3, r2
 800f340:	2b00      	cmp	r3, #0
 800f342:	d02a      	beq.n	800f39a <HAL_DMA_IRQHandler+0x156>
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	f003 0308 	and.w	r3, r3, #8
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d025      	beq.n	800f39a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f022 020e 	bic.w	r2, r2, #14
 800f35c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f362:	f003 021c 	and.w	r2, r3, #28
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36a:	2101      	movs	r1, #1
 800f36c:	fa01 f202 	lsl.w	r2, r1, r2
 800f370:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2201      	movs	r2, #1
 800f376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d004      	beq.n	800f39a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
}
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f3a2:	b480      	push	{r7}
 800f3a4:	b085      	sub	sp, #20
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	60b9      	str	r1, [r7, #8]
 800f3ac:	607a      	str	r2, [r7, #4]
 800f3ae:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f3b8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d004      	beq.n	800f3cc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f3ca:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3d0:	f003 021c 	and.w	r2, r3, #28
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d8:	2101      	movs	r1, #1
 800f3da:	fa01 f202 	lsl.w	r2, r1, r2
 800f3de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	2b10      	cmp	r3, #16
 800f3ee:	d108      	bne.n	800f402 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f400:	e007      	b.n	800f412 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	60da      	str	r2, [r3, #12]
}
 800f412:	bf00      	nop
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
	...

0800f420 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f420:	b480      	push	{r7}
 800f422:	b085      	sub	sp, #20
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	461a      	mov	r2, r3
 800f42e:	4b17      	ldr	r3, [pc, #92]	; (800f48c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800f430:	429a      	cmp	r2, r3
 800f432:	d80a      	bhi.n	800f44a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f438:	089b      	lsrs	r3, r3, #2
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f440:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	6493      	str	r3, [r2, #72]	; 0x48
 800f448:	e007      	b.n	800f45a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f44e:	089b      	lsrs	r3, r3, #2
 800f450:	009a      	lsls	r2, r3, #2
 800f452:	4b0f      	ldr	r3, [pc, #60]	; (800f490 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800f454:	4413      	add	r3, r2
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	3b08      	subs	r3, #8
 800f462:	4a0c      	ldr	r2, [pc, #48]	; (800f494 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800f464:	fba2 2303 	umull	r2, r3, r2, r3
 800f468:	091b      	lsrs	r3, r3, #4
 800f46a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a0a      	ldr	r2, [pc, #40]	; (800f498 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800f470:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f003 031f 	and.w	r3, r3, #31
 800f478:	2201      	movs	r2, #1
 800f47a:	409a      	lsls	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f480:	bf00      	nop
 800f482:	3714      	adds	r7, #20
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	40020407 	.word	0x40020407
 800f490:	4002081c 	.word	0x4002081c
 800f494:	cccccccd 	.word	0xcccccccd
 800f498:	40020880 	.word	0x40020880

0800f49c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f4ac:	68fa      	ldr	r2, [r7, #12]
 800f4ae:	4b0b      	ldr	r3, [pc, #44]	; (800f4dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800f4b0:	4413      	add	r3, r2
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a08      	ldr	r2, [pc, #32]	; (800f4e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800f4be:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	f003 0303 	and.w	r3, r3, #3
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	409a      	lsls	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800f4d0:	bf00      	nop
 800f4d2:	3714      	adds	r7, #20
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr
 800f4dc:	1000823f 	.word	0x1000823f
 800f4e0:	40020940 	.word	0x40020940

0800f4e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f4e4:	b480      	push	{r7}
 800f4e6:	b087      	sub	sp, #28
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f4f2:	e166      	b.n	800f7c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	2101      	movs	r1, #1
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800f500:	4013      	ands	r3, r2
 800f502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	f000 8158 	beq.w	800f7bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	f003 0303 	and.w	r3, r3, #3
 800f514:	2b01      	cmp	r3, #1
 800f516:	d005      	beq.n	800f524 <HAL_GPIO_Init+0x40>
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	f003 0303 	and.w	r3, r3, #3
 800f520:	2b02      	cmp	r3, #2
 800f522:	d130      	bne.n	800f586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	689b      	ldr	r3, [r3, #8]
 800f528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	005b      	lsls	r3, r3, #1
 800f52e:	2203      	movs	r2, #3
 800f530:	fa02 f303 	lsl.w	r3, r2, r3
 800f534:	43db      	mvns	r3, r3
 800f536:	693a      	ldr	r2, [r7, #16]
 800f538:	4013      	ands	r3, r2
 800f53a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	68da      	ldr	r2, [r3, #12]
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	005b      	lsls	r3, r3, #1
 800f544:	fa02 f303 	lsl.w	r3, r2, r3
 800f548:	693a      	ldr	r2, [r7, #16]
 800f54a:	4313      	orrs	r3, r2
 800f54c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	693a      	ldr	r2, [r7, #16]
 800f552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f55a:	2201      	movs	r2, #1
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	fa02 f303 	lsl.w	r3, r2, r3
 800f562:	43db      	mvns	r3, r3
 800f564:	693a      	ldr	r2, [r7, #16]
 800f566:	4013      	ands	r3, r2
 800f568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	091b      	lsrs	r3, r3, #4
 800f570:	f003 0201 	and.w	r2, r3, #1
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	fa02 f303 	lsl.w	r3, r2, r3
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	693a      	ldr	r2, [r7, #16]
 800f584:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	f003 0303 	and.w	r3, r3, #3
 800f58e:	2b03      	cmp	r3, #3
 800f590:	d017      	beq.n	800f5c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	2203      	movs	r2, #3
 800f59e:	fa02 f303 	lsl.w	r3, r2, r3
 800f5a2:	43db      	mvns	r3, r3
 800f5a4:	693a      	ldr	r2, [r7, #16]
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	689a      	ldr	r2, [r3, #8]
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f5b6:	693a      	ldr	r2, [r7, #16]
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	693a      	ldr	r2, [r7, #16]
 800f5c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	f003 0303 	and.w	r3, r3, #3
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	d123      	bne.n	800f616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	08da      	lsrs	r2, r3, #3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	3208      	adds	r2, #8
 800f5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	f003 0307 	and.w	r3, r3, #7
 800f5e2:	009b      	lsls	r3, r3, #2
 800f5e4:	220f      	movs	r2, #15
 800f5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5ea:	43db      	mvns	r3, r3
 800f5ec:	693a      	ldr	r2, [r7, #16]
 800f5ee:	4013      	ands	r3, r2
 800f5f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	691a      	ldr	r2, [r3, #16]
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	f003 0307 	and.w	r3, r3, #7
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	4313      	orrs	r3, r2
 800f606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	08da      	lsrs	r2, r3, #3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	3208      	adds	r2, #8
 800f610:	6939      	ldr	r1, [r7, #16]
 800f612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	005b      	lsls	r3, r3, #1
 800f620:	2203      	movs	r2, #3
 800f622:	fa02 f303 	lsl.w	r3, r2, r3
 800f626:	43db      	mvns	r3, r3
 800f628:	693a      	ldr	r2, [r7, #16]
 800f62a:	4013      	ands	r3, r2
 800f62c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	f003 0203 	and.w	r2, r3, #3
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	005b      	lsls	r3, r3, #1
 800f63a:	fa02 f303 	lsl.w	r3, r2, r3
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	4313      	orrs	r3, r2
 800f642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	693a      	ldr	r2, [r7, #16]
 800f648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f652:	2b00      	cmp	r3, #0
 800f654:	f000 80b2 	beq.w	800f7bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f658:	4b61      	ldr	r3, [pc, #388]	; (800f7e0 <HAL_GPIO_Init+0x2fc>)
 800f65a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f65c:	4a60      	ldr	r2, [pc, #384]	; (800f7e0 <HAL_GPIO_Init+0x2fc>)
 800f65e:	f043 0301 	orr.w	r3, r3, #1
 800f662:	6613      	str	r3, [r2, #96]	; 0x60
 800f664:	4b5e      	ldr	r3, [pc, #376]	; (800f7e0 <HAL_GPIO_Init+0x2fc>)
 800f666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f668:	f003 0301 	and.w	r3, r3, #1
 800f66c:	60bb      	str	r3, [r7, #8]
 800f66e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800f670:	4a5c      	ldr	r2, [pc, #368]	; (800f7e4 <HAL_GPIO_Init+0x300>)
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	089b      	lsrs	r3, r3, #2
 800f676:	3302      	adds	r3, #2
 800f678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f67c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	f003 0303 	and.w	r3, r3, #3
 800f684:	009b      	lsls	r3, r3, #2
 800f686:	220f      	movs	r2, #15
 800f688:	fa02 f303 	lsl.w	r3, r2, r3
 800f68c:	43db      	mvns	r3, r3
 800f68e:	693a      	ldr	r2, [r7, #16]
 800f690:	4013      	ands	r3, r2
 800f692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800f69a:	d02b      	beq.n	800f6f4 <HAL_GPIO_Init+0x210>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a52      	ldr	r2, [pc, #328]	; (800f7e8 <HAL_GPIO_Init+0x304>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d025      	beq.n	800f6f0 <HAL_GPIO_Init+0x20c>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	4a51      	ldr	r2, [pc, #324]	; (800f7ec <HAL_GPIO_Init+0x308>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d01f      	beq.n	800f6ec <HAL_GPIO_Init+0x208>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	4a50      	ldr	r2, [pc, #320]	; (800f7f0 <HAL_GPIO_Init+0x30c>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d019      	beq.n	800f6e8 <HAL_GPIO_Init+0x204>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a4f      	ldr	r2, [pc, #316]	; (800f7f4 <HAL_GPIO_Init+0x310>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d013      	beq.n	800f6e4 <HAL_GPIO_Init+0x200>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a4e      	ldr	r2, [pc, #312]	; (800f7f8 <HAL_GPIO_Init+0x314>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d00d      	beq.n	800f6e0 <HAL_GPIO_Init+0x1fc>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a4d      	ldr	r2, [pc, #308]	; (800f7fc <HAL_GPIO_Init+0x318>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d007      	beq.n	800f6dc <HAL_GPIO_Init+0x1f8>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a4c      	ldr	r2, [pc, #304]	; (800f800 <HAL_GPIO_Init+0x31c>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d101      	bne.n	800f6d8 <HAL_GPIO_Init+0x1f4>
 800f6d4:	2307      	movs	r3, #7
 800f6d6:	e00e      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6d8:	2308      	movs	r3, #8
 800f6da:	e00c      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6dc:	2306      	movs	r3, #6
 800f6de:	e00a      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6e0:	2305      	movs	r3, #5
 800f6e2:	e008      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6e4:	2304      	movs	r3, #4
 800f6e6:	e006      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	e004      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6ec:	2302      	movs	r3, #2
 800f6ee:	e002      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6f0:	2301      	movs	r3, #1
 800f6f2:	e000      	b.n	800f6f6 <HAL_GPIO_Init+0x212>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	f002 0203 	and.w	r2, r2, #3
 800f6fc:	0092      	lsls	r2, r2, #2
 800f6fe:	4093      	lsls	r3, r2
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	4313      	orrs	r3, r2
 800f704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f706:	4937      	ldr	r1, [pc, #220]	; (800f7e4 <HAL_GPIO_Init+0x300>)
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	089b      	lsrs	r3, r3, #2
 800f70c:	3302      	adds	r3, #2
 800f70e:	693a      	ldr	r2, [r7, #16]
 800f710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f714:	4b3b      	ldr	r3, [pc, #236]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	43db      	mvns	r3, r3
 800f71e:	693a      	ldr	r2, [r7, #16]
 800f720:	4013      	ands	r3, r2
 800f722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	4313      	orrs	r3, r2
 800f736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f738:	4a32      	ldr	r2, [pc, #200]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800f73e:	4b31      	ldr	r3, [pc, #196]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	43db      	mvns	r3, r3
 800f748:	693a      	ldr	r2, [r7, #16]
 800f74a:	4013      	ands	r3, r2
 800f74c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800f75a:	693a      	ldr	r2, [r7, #16]
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	4313      	orrs	r3, r2
 800f760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f762:	4a28      	ldr	r2, [pc, #160]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800f768:	4b26      	ldr	r3, [pc, #152]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	43db      	mvns	r3, r3
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	4013      	ands	r3, r2
 800f776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f780:	2b00      	cmp	r3, #0
 800f782:	d003      	beq.n	800f78c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800f784:	693a      	ldr	r2, [r7, #16]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	4313      	orrs	r3, r2
 800f78a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f78c:	4a1d      	ldr	r2, [pc, #116]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800f792:	4b1c      	ldr	r3, [pc, #112]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	43db      	mvns	r3, r3
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	4013      	ands	r3, r2
 800f7a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d003      	beq.n	800f7b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800f7ae:	693a      	ldr	r2, [r7, #16]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f7b6:	4a13      	ldr	r2, [pc, #76]	; (800f804 <HAL_GPIO_Init+0x320>)
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f47f ae91 	bne.w	800f4f4 <HAL_GPIO_Init+0x10>
  }
}
 800f7d2:	bf00      	nop
 800f7d4:	bf00      	nop
 800f7d6:	371c      	adds	r7, #28
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7de:	4770      	bx	lr
 800f7e0:	40021000 	.word	0x40021000
 800f7e4:	40010000 	.word	0x40010000
 800f7e8:	48000400 	.word	0x48000400
 800f7ec:	48000800 	.word	0x48000800
 800f7f0:	48000c00 	.word	0x48000c00
 800f7f4:	48001000 	.word	0x48001000
 800f7f8:	48001400 	.word	0x48001400
 800f7fc:	48001800 	.word	0x48001800
 800f800:	48001c00 	.word	0x48001c00
 800f804:	40010400 	.word	0x40010400

0800f808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	460b      	mov	r3, r1
 800f812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	691a      	ldr	r2, [r3, #16]
 800f818:	887b      	ldrh	r3, [r7, #2]
 800f81a:	4013      	ands	r3, r2
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f820:	2301      	movs	r3, #1
 800f822:	73fb      	strb	r3, [r7, #15]
 800f824:	e001      	b.n	800f82a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f826:	2300      	movs	r3, #0
 800f828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3714      	adds	r7, #20
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	460b      	mov	r3, r1
 800f842:	807b      	strh	r3, [r7, #2]
 800f844:	4613      	mov	r3, r2
 800f846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f848:	787b      	ldrb	r3, [r7, #1]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d003      	beq.n	800f856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f84e:	887a      	ldrh	r2, [r7, #2]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f854:	e002      	b.n	800f85c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f856:	887a      	ldrh	r2, [r7, #2]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	4603      	mov	r3, r0
 800f870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f872:	4b08      	ldr	r3, [pc, #32]	; (800f894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f874:	695a      	ldr	r2, [r3, #20]
 800f876:	88fb      	ldrh	r3, [r7, #6]
 800f878:	4013      	ands	r3, r2
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d006      	beq.n	800f88c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f87e:	4a05      	ldr	r2, [pc, #20]	; (800f894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f880:	88fb      	ldrh	r3, [r7, #6]
 800f882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f884:	88fb      	ldrh	r3, [r7, #6]
 800f886:	4618      	mov	r0, r3
 800f888:	f7fc fa06 	bl	800bc98 <HAL_GPIO_EXTI_Callback>
  }
}
 800f88c:	bf00      	nop
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	40010400 	.word	0x40010400

0800f898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d101      	bne.n	800f8aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e081      	b.n	800f9ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7fa f968 	bl	8009b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2224      	movs	r2, #36	; 0x24
 800f8c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f022 0201 	bic.w	r2, r2, #1
 800f8da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f8e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	689a      	ldr	r2, [r3, #8]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f8f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	d107      	bne.n	800f912 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	689a      	ldr	r2, [r3, #8]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f90e:	609a      	str	r2, [r3, #8]
 800f910:	e006      	b.n	800f920 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	689a      	ldr	r2, [r3, #8]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f91e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	2b02      	cmp	r3, #2
 800f926:	d104      	bne.n	800f932 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f930:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	687a      	ldr	r2, [r7, #4]
 800f93a:	6812      	ldr	r2, [r2, #0]
 800f93c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f944:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	68da      	ldr	r2, [r3, #12]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	691a      	ldr	r2, [r3, #16]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	695b      	ldr	r3, [r3, #20]
 800f95e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	699b      	ldr	r3, [r3, #24]
 800f966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	430a      	orrs	r2, r1
 800f96e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	69d9      	ldr	r1, [r3, #28]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a1a      	ldr	r2, [r3, #32]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	430a      	orrs	r2, r1
 800f97e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f042 0201 	orr.w	r2, r2, #1
 800f98e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2220      	movs	r2, #32
 800f99a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f9ac:	2300      	movs	r3, #0
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
	...

0800f9b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b088      	sub	sp, #32
 800f9bc:	af02      	add	r7, sp, #8
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	607a      	str	r2, [r7, #4]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	817b      	strh	r3, [r7, #10]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b20      	cmp	r3, #32
 800f9d6:	f040 80da 	bne.w	800fb8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d101      	bne.n	800f9e8 <HAL_I2C_Master_Transmit+0x30>
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	e0d3      	b.n	800fb90 <HAL_I2C_Master_Transmit+0x1d8>
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f9f0:	f7fd f936 	bl	800cc60 <HAL_GetTick>
 800f9f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	2319      	movs	r3, #25
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f000 fcbc 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e0be      	b.n	800fb90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2221      	movs	r2, #33	; 0x21
 800fa16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2210      	movs	r2, #16
 800fa1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2200      	movs	r2, #0
 800fa26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	893a      	ldrh	r2, [r7, #8]
 800fa32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2200      	movs	r2, #0
 800fa38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	2bff      	cmp	r3, #255	; 0xff
 800fa42:	d90e      	bls.n	800fa62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	22ff      	movs	r2, #255	; 0xff
 800fa48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa4e:	b2da      	uxtb	r2, r3
 800fa50:	8979      	ldrh	r1, [r7, #10]
 800fa52:	4b51      	ldr	r3, [pc, #324]	; (800fb98 <HAL_I2C_Master_Transmit+0x1e0>)
 800fa54:	9300      	str	r3, [sp, #0]
 800fa56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fa5a:	68f8      	ldr	r0, [r7, #12]
 800fa5c:	f000 feb2 	bl	80107c4 <I2C_TransferConfig>
 800fa60:	e06c      	b.n	800fb3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	8979      	ldrh	r1, [r7, #10]
 800fa74:	4b48      	ldr	r3, [pc, #288]	; (800fb98 <HAL_I2C_Master_Transmit+0x1e0>)
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f000 fea1 	bl	80107c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fa82:	e05b      	b.n	800fb3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa84:	697a      	ldr	r2, [r7, #20]
 800fa86:	6a39      	ldr	r1, [r7, #32]
 800fa88:	68f8      	ldr	r0, [r7, #12]
 800fa8a:	f000 fcb9 	bl	8010400 <I2C_WaitOnTXISFlagUntilTimeout>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800fa94:	2301      	movs	r3, #1
 800fa96:	e07b      	b.n	800fb90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9c:	781a      	ldrb	r2, [r3, #0]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa8:	1c5a      	adds	r2, r3, #1
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	3b01      	subs	r3, #1
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fac0:	3b01      	subs	r3, #1
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800facc:	b29b      	uxth	r3, r3
 800face:	2b00      	cmp	r3, #0
 800fad0:	d034      	beq.n	800fb3c <HAL_I2C_Master_Transmit+0x184>
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d130      	bne.n	800fb3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	6a3b      	ldr	r3, [r7, #32]
 800fae0:	2200      	movs	r2, #0
 800fae2:	2180      	movs	r1, #128	; 0x80
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f000 fc4b 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d001      	beq.n	800faf4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	e04d      	b.n	800fb90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	2bff      	cmp	r3, #255	; 0xff
 800fafc:	d90e      	bls.n	800fb1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	22ff      	movs	r2, #255	; 0xff
 800fb02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb08:	b2da      	uxtb	r2, r3
 800fb0a:	8979      	ldrh	r1, [r7, #10]
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f000 fe55 	bl	80107c4 <I2C_TransferConfig>
 800fb1a:	e00f      	b.n	800fb3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb2a:	b2da      	uxtb	r2, r3
 800fb2c:	8979      	ldrh	r1, [r7, #10]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	9300      	str	r3, [sp, #0]
 800fb32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f000 fe44 	bl	80107c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d19e      	bne.n	800fa84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	6a39      	ldr	r1, [r7, #32]
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 fc98 	bl	8010480 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d001      	beq.n	800fb5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800fb56:	2301      	movs	r3, #1
 800fb58:	e01a      	b.n	800fb90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2220      	movs	r2, #32
 800fb60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	6859      	ldr	r1, [r3, #4]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	4b0b      	ldr	r3, [pc, #44]	; (800fb9c <HAL_I2C_Master_Transmit+0x1e4>)
 800fb6e:	400b      	ands	r3, r1
 800fb70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2220      	movs	r2, #32
 800fb76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e000      	b.n	800fb90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800fb8e:	2302      	movs	r3, #2
  }
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3718      	adds	r7, #24
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	80002000 	.word	0x80002000
 800fb9c:	fe00e800 	.word	0xfe00e800

0800fba0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af02      	add	r7, sp, #8
 800fba6:	60f8      	str	r0, [r7, #12]
 800fba8:	607a      	str	r2, [r7, #4]
 800fbaa:	461a      	mov	r2, r3
 800fbac:	460b      	mov	r3, r1
 800fbae:	817b      	strh	r3, [r7, #10]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	2b20      	cmp	r3, #32
 800fbbe:	f040 80db 	bne.w	800fd78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d101      	bne.n	800fbd0 <HAL_I2C_Master_Receive+0x30>
 800fbcc:	2302      	movs	r3, #2
 800fbce:	e0d4      	b.n	800fd7a <HAL_I2C_Master_Receive+0x1da>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fbd8:	f7fd f842 	bl	800cc60 <HAL_GetTick>
 800fbdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	2319      	movs	r3, #25
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fbea:	68f8      	ldr	r0, [r7, #12]
 800fbec:	f000 fbc8 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d001      	beq.n	800fbfa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	e0bf      	b.n	800fd7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2222      	movs	r2, #34	; 0x22
 800fbfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2210      	movs	r2, #16
 800fc06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	893a      	ldrh	r2, [r7, #8]
 800fc1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	2bff      	cmp	r3, #255	; 0xff
 800fc2a:	d90e      	bls.n	800fc4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	22ff      	movs	r2, #255	; 0xff
 800fc30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	8979      	ldrh	r1, [r7, #10]
 800fc3a:	4b52      	ldr	r3, [pc, #328]	; (800fd84 <HAL_I2C_Master_Receive+0x1e4>)
 800fc3c:	9300      	str	r3, [sp, #0]
 800fc3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f000 fdbe 	bl	80107c4 <I2C_TransferConfig>
 800fc48:	e06d      	b.n	800fd26 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc58:	b2da      	uxtb	r2, r3
 800fc5a:	8979      	ldrh	r1, [r7, #10]
 800fc5c:	4b49      	ldr	r3, [pc, #292]	; (800fd84 <HAL_I2C_Master_Receive+0x1e4>)
 800fc5e:	9300      	str	r3, [sp, #0]
 800fc60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fc64:	68f8      	ldr	r0, [r7, #12]
 800fc66:	f000 fdad 	bl	80107c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fc6a:	e05c      	b.n	800fd26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc6c:	697a      	ldr	r2, [r7, #20]
 800fc6e:	6a39      	ldr	r1, [r7, #32]
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f000 fc41 	bl	80104f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e07c      	b.n	800fd7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8a:	b2d2      	uxtb	r2, r2
 800fc8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d034      	beq.n	800fd26 <HAL_I2C_Master_Receive+0x186>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d130      	bne.n	800fd26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	2200      	movs	r2, #0
 800fccc:	2180      	movs	r1, #128	; 0x80
 800fcce:	68f8      	ldr	r0, [r7, #12]
 800fcd0:	f000 fb56 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d001      	beq.n	800fcde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e04d      	b.n	800fd7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	2bff      	cmp	r3, #255	; 0xff
 800fce6:	d90e      	bls.n	800fd06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	22ff      	movs	r2, #255	; 0xff
 800fcec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	8979      	ldrh	r1, [r7, #10]
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f000 fd60 	bl	80107c4 <I2C_TransferConfig>
 800fd04:	e00f      	b.n	800fd26 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd14:	b2da      	uxtb	r2, r3
 800fd16:	8979      	ldrh	r1, [r7, #10]
 800fd18:	2300      	movs	r3, #0
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f000 fd4f 	bl	80107c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d19d      	bne.n	800fc6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fd30:	697a      	ldr	r2, [r7, #20]
 800fd32:	6a39      	ldr	r1, [r7, #32]
 800fd34:	68f8      	ldr	r0, [r7, #12]
 800fd36:	f000 fba3 	bl	8010480 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d001      	beq.n	800fd44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800fd40:	2301      	movs	r3, #1
 800fd42:	e01a      	b.n	800fd7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2220      	movs	r2, #32
 800fd4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6859      	ldr	r1, [r3, #4]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	4b0c      	ldr	r3, [pc, #48]	; (800fd88 <HAL_I2C_Master_Receive+0x1e8>)
 800fd58:	400b      	ands	r3, r1
 800fd5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2220      	movs	r2, #32
 800fd60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fd74:	2300      	movs	r3, #0
 800fd76:	e000      	b.n	800fd7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800fd78:	2302      	movs	r3, #2
  }
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	80002400 	.word	0x80002400
 800fd88:	fe00e800 	.word	0xfe00e800

0800fd8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b088      	sub	sp, #32
 800fd90:	af02      	add	r7, sp, #8
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	4608      	mov	r0, r1
 800fd96:	4611      	mov	r1, r2
 800fd98:	461a      	mov	r2, r3
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	817b      	strh	r3, [r7, #10]
 800fd9e:	460b      	mov	r3, r1
 800fda0:	813b      	strh	r3, [r7, #8]
 800fda2:	4613      	mov	r3, r2
 800fda4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	2b20      	cmp	r3, #32
 800fdb0:	f040 80f9 	bne.w	800ffa6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdb4:	6a3b      	ldr	r3, [r7, #32]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <HAL_I2C_Mem_Write+0x34>
 800fdba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d105      	bne.n	800fdcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e0ed      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d101      	bne.n	800fdda <HAL_I2C_Mem_Write+0x4e>
 800fdd6:	2302      	movs	r3, #2
 800fdd8:	e0e6      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2201      	movs	r2, #1
 800fdde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fde2:	f7fc ff3d 	bl	800cc60 <HAL_GetTick>
 800fde6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	2319      	movs	r3, #25
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f000 fac3 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d001      	beq.n	800fe04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	e0d1      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2221      	movs	r2, #33	; 0x21
 800fe08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2240      	movs	r2, #64	; 0x40
 800fe10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6a3a      	ldr	r2, [r7, #32]
 800fe1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fe24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800fe2c:	88f8      	ldrh	r0, [r7, #6]
 800fe2e:	893a      	ldrh	r2, [r7, #8]
 800fe30:	8979      	ldrh	r1, [r7, #10]
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f000 f9d3 	bl	80101e8 <I2C_RequestMemoryWrite>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d005      	beq.n	800fe54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800fe50:	2301      	movs	r3, #1
 800fe52:	e0a9      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	2bff      	cmp	r3, #255	; 0xff
 800fe5c:	d90e      	bls.n	800fe7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	22ff      	movs	r2, #255	; 0xff
 800fe62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe68:	b2da      	uxtb	r2, r3
 800fe6a:	8979      	ldrh	r1, [r7, #10]
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 fca5 	bl	80107c4 <I2C_TransferConfig>
 800fe7a:	e00f      	b.n	800fe9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe8a:	b2da      	uxtb	r2, r3
 800fe8c:	8979      	ldrh	r1, [r7, #10]
 800fe8e:	2300      	movs	r3, #0
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f000 fc94 	bl	80107c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f000 faad 	bl	8010400 <I2C_WaitOnTXISFlagUntilTimeout>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d001      	beq.n	800feb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800feac:	2301      	movs	r3, #1
 800feae:	e07b      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb4:	781a      	ldrb	r2, [r3, #0]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec0:	1c5a      	adds	r2, r3, #1
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800feca:	b29b      	uxth	r3, r3
 800fecc:	3b01      	subs	r3, #1
 800fece:	b29a      	uxth	r2, r3
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fed8:	3b01      	subs	r3, #1
 800feda:	b29a      	uxth	r2, r3
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d034      	beq.n	800ff54 <HAL_I2C_Mem_Write+0x1c8>
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d130      	bne.n	800ff54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	9300      	str	r3, [sp, #0]
 800fef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef8:	2200      	movs	r2, #0
 800fefa:	2180      	movs	r1, #128	; 0x80
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	f000 fa3f 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d001      	beq.n	800ff0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e04d      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	2bff      	cmp	r3, #255	; 0xff
 800ff14:	d90e      	bls.n	800ff34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	22ff      	movs	r2, #255	; 0xff
 800ff1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff20:	b2da      	uxtb	r2, r3
 800ff22:	8979      	ldrh	r1, [r7, #10]
 800ff24:	2300      	movs	r3, #0
 800ff26:	9300      	str	r3, [sp, #0]
 800ff28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f000 fc49 	bl	80107c4 <I2C_TransferConfig>
 800ff32:	e00f      	b.n	800ff54 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff38:	b29a      	uxth	r2, r3
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	8979      	ldrh	r1, [r7, #10]
 800ff46:	2300      	movs	r3, #0
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f000 fc38 	bl	80107c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d19e      	bne.n	800fe9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ff5e:	697a      	ldr	r2, [r7, #20]
 800ff60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f000 fa8c 	bl	8010480 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e01a      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2220      	movs	r2, #32
 800ff78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	6859      	ldr	r1, [r3, #4]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681a      	ldr	r2, [r3, #0]
 800ff84:	4b0a      	ldr	r3, [pc, #40]	; (800ffb0 <HAL_I2C_Mem_Write+0x224>)
 800ff86:	400b      	ands	r3, r1
 800ff88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2220      	movs	r2, #32
 800ff8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2200      	movs	r2, #0
 800ff96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	e000      	b.n	800ffa8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ffa6:	2302      	movs	r3, #2
  }
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3718      	adds	r7, #24
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	fe00e800 	.word	0xfe00e800

0800ffb4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b088      	sub	sp, #32
 800ffb8:	af02      	add	r7, sp, #8
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	4608      	mov	r0, r1
 800ffbe:	4611      	mov	r1, r2
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	817b      	strh	r3, [r7, #10]
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	813b      	strh	r3, [r7, #8]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	2b20      	cmp	r3, #32
 800ffd8:	f040 80fd 	bne.w	80101d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d002      	beq.n	800ffe8 <HAL_I2C_Mem_Read+0x34>
 800ffe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d105      	bne.n	800fff4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800fff0:	2301      	movs	r3, #1
 800fff2:	e0f1      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d101      	bne.n	8010002 <HAL_I2C_Mem_Read+0x4e>
 800fffe:	2302      	movs	r3, #2
 8010000:	e0ea      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2201      	movs	r2, #1
 8010006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801000a:	f7fc fe29 	bl	800cc60 <HAL_GetTick>
 801000e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	2319      	movs	r3, #25
 8010016:	2201      	movs	r2, #1
 8010018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801001c:	68f8      	ldr	r0, [r7, #12]
 801001e:	f000 f9af 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 8010022:	4603      	mov	r3, r0
 8010024:	2b00      	cmp	r3, #0
 8010026:	d001      	beq.n	801002c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e0d5      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2222      	movs	r2, #34	; 0x22
 8010030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2240      	movs	r2, #64	; 0x40
 8010038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2200      	movs	r2, #0
 8010040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6a3a      	ldr	r2, [r7, #32]
 8010046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801004c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010054:	88f8      	ldrh	r0, [r7, #6]
 8010056:	893a      	ldrh	r2, [r7, #8]
 8010058:	8979      	ldrh	r1, [r7, #10]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	9301      	str	r3, [sp, #4]
 801005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	4603      	mov	r3, r0
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	f000 f913 	bl	8010290 <I2C_RequestMemoryRead>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d005      	beq.n	801007c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2200      	movs	r2, #0
 8010074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8010078:	2301      	movs	r3, #1
 801007a:	e0ad      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010080:	b29b      	uxth	r3, r3
 8010082:	2bff      	cmp	r3, #255	; 0xff
 8010084:	d90e      	bls.n	80100a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	22ff      	movs	r2, #255	; 0xff
 801008a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010090:	b2da      	uxtb	r2, r3
 8010092:	8979      	ldrh	r1, [r7, #10]
 8010094:	4b52      	ldr	r3, [pc, #328]	; (80101e0 <HAL_I2C_Mem_Read+0x22c>)
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f000 fb91 	bl	80107c4 <I2C_TransferConfig>
 80100a2:	e00f      	b.n	80100c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100b2:	b2da      	uxtb	r2, r3
 80100b4:	8979      	ldrh	r1, [r7, #10]
 80100b6:	4b4a      	ldr	r3, [pc, #296]	; (80101e0 <HAL_I2C_Mem_Read+0x22c>)
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80100be:	68f8      	ldr	r0, [r7, #12]
 80100c0:	f000 fb80 	bl	80107c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ca:	2200      	movs	r2, #0
 80100cc:	2104      	movs	r1, #4
 80100ce:	68f8      	ldr	r0, [r7, #12]
 80100d0:	f000 f956 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	e07c      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e8:	b2d2      	uxtb	r2, r2
 80100ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f0:	1c5a      	adds	r2, r3, #1
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100fa:	3b01      	subs	r3, #1
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010106:	b29b      	uxth	r3, r3
 8010108:	3b01      	subs	r3, #1
 801010a:	b29a      	uxth	r2, r3
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010114:	b29b      	uxth	r3, r3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d034      	beq.n	8010184 <HAL_I2C_Mem_Read+0x1d0>
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801011e:	2b00      	cmp	r3, #0
 8010120:	d130      	bne.n	8010184 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010128:	2200      	movs	r2, #0
 801012a:	2180      	movs	r1, #128	; 0x80
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f000 f927 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d001      	beq.n	801013c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8010138:	2301      	movs	r3, #1
 801013a:	e04d      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010140:	b29b      	uxth	r3, r3
 8010142:	2bff      	cmp	r3, #255	; 0xff
 8010144:	d90e      	bls.n	8010164 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	22ff      	movs	r2, #255	; 0xff
 801014a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010150:	b2da      	uxtb	r2, r3
 8010152:	8979      	ldrh	r1, [r7, #10]
 8010154:	2300      	movs	r3, #0
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f000 fb31 	bl	80107c4 <I2C_TransferConfig>
 8010162:	e00f      	b.n	8010184 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010168:	b29a      	uxth	r2, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010172:	b2da      	uxtb	r2, r3
 8010174:	8979      	ldrh	r1, [r7, #10]
 8010176:	2300      	movs	r3, #0
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801017e:	68f8      	ldr	r0, [r7, #12]
 8010180:	f000 fb20 	bl	80107c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010188:	b29b      	uxth	r3, r3
 801018a:	2b00      	cmp	r3, #0
 801018c:	d19a      	bne.n	80100c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 f974 	bl	8010480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010198:	4603      	mov	r3, r0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	e01a      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2220      	movs	r2, #32
 80101a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	6859      	ldr	r1, [r3, #4]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	4b0b      	ldr	r3, [pc, #44]	; (80101e4 <HAL_I2C_Mem_Read+0x230>)
 80101b6:	400b      	ands	r3, r1
 80101b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2220      	movs	r2, #32
 80101be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80101d2:	2300      	movs	r3, #0
 80101d4:	e000      	b.n	80101d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80101d6:	2302      	movs	r3, #2
  }
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3718      	adds	r7, #24
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	80002400 	.word	0x80002400
 80101e4:	fe00e800 	.word	0xfe00e800

080101e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af02      	add	r7, sp, #8
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	4608      	mov	r0, r1
 80101f2:	4611      	mov	r1, r2
 80101f4:	461a      	mov	r2, r3
 80101f6:	4603      	mov	r3, r0
 80101f8:	817b      	strh	r3, [r7, #10]
 80101fa:	460b      	mov	r3, r1
 80101fc:	813b      	strh	r3, [r7, #8]
 80101fe:	4613      	mov	r3, r2
 8010200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8010202:	88fb      	ldrh	r3, [r7, #6]
 8010204:	b2da      	uxtb	r2, r3
 8010206:	8979      	ldrh	r1, [r7, #10]
 8010208:	4b20      	ldr	r3, [pc, #128]	; (801028c <I2C_RequestMemoryWrite+0xa4>)
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f000 fad7 	bl	80107c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010216:	69fa      	ldr	r2, [r7, #28]
 8010218:	69b9      	ldr	r1, [r7, #24]
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f000 f8f0 	bl	8010400 <I2C_WaitOnTXISFlagUntilTimeout>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d001      	beq.n	801022a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8010226:	2301      	movs	r3, #1
 8010228:	e02c      	b.n	8010284 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801022a:	88fb      	ldrh	r3, [r7, #6]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d105      	bne.n	801023c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010230:	893b      	ldrh	r3, [r7, #8]
 8010232:	b2da      	uxtb	r2, r3
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	629a      	str	r2, [r3, #40]	; 0x28
 801023a:	e015      	b.n	8010268 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801023c:	893b      	ldrh	r3, [r7, #8]
 801023e:	0a1b      	lsrs	r3, r3, #8
 8010240:	b29b      	uxth	r3, r3
 8010242:	b2da      	uxtb	r2, r3
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801024a:	69fa      	ldr	r2, [r7, #28]
 801024c:	69b9      	ldr	r1, [r7, #24]
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f000 f8d6 	bl	8010400 <I2C_WaitOnTXISFlagUntilTimeout>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801025a:	2301      	movs	r3, #1
 801025c:	e012      	b.n	8010284 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801025e:	893b      	ldrh	r3, [r7, #8]
 8010260:	b2da      	uxtb	r2, r3
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	2200      	movs	r2, #0
 8010270:	2180      	movs	r1, #128	; 0x80
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f000 f884 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d001      	beq.n	8010282 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	e000      	b.n	8010284 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8010282:	2300      	movs	r3, #0
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	80002000 	.word	0x80002000

08010290 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af02      	add	r7, sp, #8
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	4608      	mov	r0, r1
 801029a:	4611      	mov	r1, r2
 801029c:	461a      	mov	r2, r3
 801029e:	4603      	mov	r3, r0
 80102a0:	817b      	strh	r3, [r7, #10]
 80102a2:	460b      	mov	r3, r1
 80102a4:	813b      	strh	r3, [r7, #8]
 80102a6:	4613      	mov	r3, r2
 80102a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80102aa:	88fb      	ldrh	r3, [r7, #6]
 80102ac:	b2da      	uxtb	r2, r3
 80102ae:	8979      	ldrh	r1, [r7, #10]
 80102b0:	4b20      	ldr	r3, [pc, #128]	; (8010334 <I2C_RequestMemoryRead+0xa4>)
 80102b2:	9300      	str	r3, [sp, #0]
 80102b4:	2300      	movs	r3, #0
 80102b6:	68f8      	ldr	r0, [r7, #12]
 80102b8:	f000 fa84 	bl	80107c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80102bc:	69fa      	ldr	r2, [r7, #28]
 80102be:	69b9      	ldr	r1, [r7, #24]
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f000 f89d 	bl	8010400 <I2C_WaitOnTXISFlagUntilTimeout>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d001      	beq.n	80102d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80102cc:	2301      	movs	r3, #1
 80102ce:	e02c      	b.n	801032a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80102d0:	88fb      	ldrh	r3, [r7, #6]
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d105      	bne.n	80102e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80102d6:	893b      	ldrh	r3, [r7, #8]
 80102d8:	b2da      	uxtb	r2, r3
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	629a      	str	r2, [r3, #40]	; 0x28
 80102e0:	e015      	b.n	801030e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80102e2:	893b      	ldrh	r3, [r7, #8]
 80102e4:	0a1b      	lsrs	r3, r3, #8
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	b2da      	uxtb	r2, r3
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80102f0:	69fa      	ldr	r2, [r7, #28]
 80102f2:	69b9      	ldr	r1, [r7, #24]
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f000 f883 	bl	8010400 <I2C_WaitOnTXISFlagUntilTimeout>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d001      	beq.n	8010304 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8010300:	2301      	movs	r3, #1
 8010302:	e012      	b.n	801032a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010304:	893b      	ldrh	r3, [r7, #8]
 8010306:	b2da      	uxtb	r2, r3
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	9300      	str	r3, [sp, #0]
 8010312:	69bb      	ldr	r3, [r7, #24]
 8010314:	2200      	movs	r2, #0
 8010316:	2140      	movs	r1, #64	; 0x40
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f000 f831 	bl	8010380 <I2C_WaitOnFlagUntilTimeout>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d001      	beq.n	8010328 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8010324:	2301      	movs	r3, #1
 8010326:	e000      	b.n	801032a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8010328:	2300      	movs	r3, #0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	80002000 	.word	0x80002000

08010338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010338:	b480      	push	{r7}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	699b      	ldr	r3, [r3, #24]
 8010346:	f003 0302 	and.w	r3, r3, #2
 801034a:	2b02      	cmp	r3, #2
 801034c:	d103      	bne.n	8010356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2200      	movs	r2, #0
 8010354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	699b      	ldr	r3, [r3, #24]
 801035c:	f003 0301 	and.w	r3, r3, #1
 8010360:	2b01      	cmp	r3, #1
 8010362:	d007      	beq.n	8010374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	699a      	ldr	r2, [r3, #24]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f042 0201 	orr.w	r2, r2, #1
 8010372:	619a      	str	r2, [r3, #24]
  }
}
 8010374:	bf00      	nop
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	603b      	str	r3, [r7, #0]
 801038c:	4613      	mov	r3, r2
 801038e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010390:	e022      	b.n	80103d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010398:	d01e      	beq.n	80103d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801039a:	f7fc fc61 	bl	800cc60 <HAL_GetTick>
 801039e:	4602      	mov	r2, r0
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	1ad3      	subs	r3, r2, r3
 80103a4:	683a      	ldr	r2, [r7, #0]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d302      	bcc.n	80103b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d113      	bne.n	80103d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103b4:	f043 0220 	orr.w	r2, r3, #32
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2220      	movs	r2, #32
 80103c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80103d4:	2301      	movs	r3, #1
 80103d6:	e00f      	b.n	80103f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	699a      	ldr	r2, [r3, #24]
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	4013      	ands	r3, r2
 80103e2:	68ba      	ldr	r2, [r7, #8]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	bf0c      	ite	eq
 80103e8:	2301      	moveq	r3, #1
 80103ea:	2300      	movne	r3, #0
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	461a      	mov	r2, r3
 80103f0:	79fb      	ldrb	r3, [r7, #7]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d0cd      	beq.n	8010392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80103f6:	2300      	movs	r3, #0
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801040c:	e02c      	b.n	8010468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	68b9      	ldr	r1, [r7, #8]
 8010412:	68f8      	ldr	r0, [r7, #12]
 8010414:	f000 f8ea 	bl	80105ec <I2C_IsErrorOccurred>
 8010418:	4603      	mov	r3, r0
 801041a:	2b00      	cmp	r3, #0
 801041c:	d001      	beq.n	8010422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801041e:	2301      	movs	r3, #1
 8010420:	e02a      	b.n	8010478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010428:	d01e      	beq.n	8010468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801042a:	f7fc fc19 	bl	800cc60 <HAL_GetTick>
 801042e:	4602      	mov	r2, r0
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	1ad3      	subs	r3, r2, r3
 8010434:	68ba      	ldr	r2, [r7, #8]
 8010436:	429a      	cmp	r2, r3
 8010438:	d302      	bcc.n	8010440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d113      	bne.n	8010468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010444:	f043 0220 	orr.w	r2, r3, #32
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2220      	movs	r2, #32
 8010450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2200      	movs	r2, #0
 8010458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	e007      	b.n	8010478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	699b      	ldr	r3, [r3, #24]
 801046e:	f003 0302 	and.w	r3, r3, #2
 8010472:	2b02      	cmp	r3, #2
 8010474:	d1cb      	bne.n	801040e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801048c:	e028      	b.n	80104e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	68b9      	ldr	r1, [r7, #8]
 8010492:	68f8      	ldr	r0, [r7, #12]
 8010494:	f000 f8aa 	bl	80105ec <I2C_IsErrorOccurred>
 8010498:	4603      	mov	r3, r0
 801049a:	2b00      	cmp	r3, #0
 801049c:	d001      	beq.n	80104a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801049e:	2301      	movs	r3, #1
 80104a0:	e026      	b.n	80104f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80104a2:	f7fc fbdd 	bl	800cc60 <HAL_GetTick>
 80104a6:	4602      	mov	r2, r0
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	1ad3      	subs	r3, r2, r3
 80104ac:	68ba      	ldr	r2, [r7, #8]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d302      	bcc.n	80104b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d113      	bne.n	80104e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104bc:	f043 0220 	orr.w	r2, r3, #32
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2220      	movs	r2, #32
 80104c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2200      	movs	r2, #0
 80104d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80104dc:	2301      	movs	r3, #1
 80104de:	e007      	b.n	80104f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	699b      	ldr	r3, [r3, #24]
 80104e6:	f003 0320 	and.w	r3, r3, #32
 80104ea:	2b20      	cmp	r3, #32
 80104ec:	d1cf      	bne.n	801048e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80104ee:	2300      	movs	r3, #0
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3710      	adds	r7, #16
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010504:	e064      	b.n	80105d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	68b9      	ldr	r1, [r7, #8]
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f000 f86e 	bl	80105ec <I2C_IsErrorOccurred>
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d001      	beq.n	801051a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010516:	2301      	movs	r3, #1
 8010518:	e062      	b.n	80105e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	699b      	ldr	r3, [r3, #24]
 8010520:	f003 0320 	and.w	r3, r3, #32
 8010524:	2b20      	cmp	r3, #32
 8010526:	d138      	bne.n	801059a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	f003 0304 	and.w	r3, r3, #4
 8010532:	2b04      	cmp	r3, #4
 8010534:	d105      	bne.n	8010542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801053a:	2b00      	cmp	r3, #0
 801053c:	d001      	beq.n	8010542 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801053e:	2300      	movs	r3, #0
 8010540:	e04e      	b.n	80105e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	f003 0310 	and.w	r3, r3, #16
 801054c:	2b10      	cmp	r3, #16
 801054e:	d107      	bne.n	8010560 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2210      	movs	r2, #16
 8010556:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2204      	movs	r2, #4
 801055c:	645a      	str	r2, [r3, #68]	; 0x44
 801055e:	e002      	b.n	8010566 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	2220      	movs	r2, #32
 801056c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	6859      	ldr	r1, [r3, #4]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	4b1b      	ldr	r3, [pc, #108]	; (80105e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 801057a:	400b      	ands	r3, r1
 801057c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2220      	movs	r2, #32
 8010582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2200      	movs	r2, #0
 801058a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2200      	movs	r2, #0
 8010592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8010596:	2301      	movs	r3, #1
 8010598:	e022      	b.n	80105e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801059a:	f7fc fb61 	bl	800cc60 <HAL_GetTick>
 801059e:	4602      	mov	r2, r0
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	68ba      	ldr	r2, [r7, #8]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d302      	bcc.n	80105b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d10f      	bne.n	80105d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105b4:	f043 0220 	orr.w	r2, r3, #32
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2220      	movs	r2, #32
 80105c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2200      	movs	r2, #0
 80105c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80105cc:	2301      	movs	r3, #1
 80105ce:	e007      	b.n	80105e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	699b      	ldr	r3, [r3, #24]
 80105d6:	f003 0304 	and.w	r3, r3, #4
 80105da:	2b04      	cmp	r3, #4
 80105dc:	d193      	bne.n	8010506 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80105de:	2300      	movs	r3, #0
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}
 80105e8:	fe00e800 	.word	0xfe00e800

080105ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08a      	sub	sp, #40	; 0x28
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105f8:	2300      	movs	r3, #0
 80105fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	699b      	ldr	r3, [r3, #24]
 8010604:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010606:	2300      	movs	r3, #0
 8010608:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	f003 0310 	and.w	r3, r3, #16
 8010614:	2b00      	cmp	r3, #0
 8010616:	d075      	beq.n	8010704 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2210      	movs	r2, #16
 801061e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010620:	e056      	b.n	80106d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010628:	d052      	beq.n	80106d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801062a:	f7fc fb19 	bl	800cc60 <HAL_GetTick>
 801062e:	4602      	mov	r2, r0
 8010630:	69fb      	ldr	r3, [r7, #28]
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	68ba      	ldr	r2, [r7, #8]
 8010636:	429a      	cmp	r2, r3
 8010638:	d302      	bcc.n	8010640 <I2C_IsErrorOccurred+0x54>
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d147      	bne.n	80106d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801064a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010652:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	699b      	ldr	r3, [r3, #24]
 801065a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801065e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010662:	d12e      	bne.n	80106c2 <I2C_IsErrorOccurred+0xd6>
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801066a:	d02a      	beq.n	80106c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 801066c:	7cfb      	ldrb	r3, [r7, #19]
 801066e:	2b20      	cmp	r3, #32
 8010670:	d027      	beq.n	80106c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	685a      	ldr	r2, [r3, #4]
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010680:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010682:	f7fc faed 	bl	800cc60 <HAL_GetTick>
 8010686:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010688:	e01b      	b.n	80106c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801068a:	f7fc fae9 	bl	800cc60 <HAL_GetTick>
 801068e:	4602      	mov	r2, r0
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	1ad3      	subs	r3, r2, r3
 8010694:	2b19      	cmp	r3, #25
 8010696:	d914      	bls.n	80106c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801069c:	f043 0220 	orr.w	r2, r3, #32
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2220      	movs	r2, #32
 80106a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2200      	movs	r2, #0
 80106b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	699b      	ldr	r3, [r3, #24]
 80106c8:	f003 0320 	and.w	r3, r3, #32
 80106cc:	2b20      	cmp	r3, #32
 80106ce:	d1dc      	bne.n	801068a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	f003 0320 	and.w	r3, r3, #32
 80106da:	2b20      	cmp	r3, #32
 80106dc:	d003      	beq.n	80106e6 <I2C_IsErrorOccurred+0xfa>
 80106de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d09d      	beq.n	8010622 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80106e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d103      	bne.n	80106f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2220      	movs	r2, #32
 80106f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	f043 0304 	orr.w	r3, r3, #4
 80106fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80106fe:	2301      	movs	r3, #1
 8010700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	699b      	ldr	r3, [r3, #24]
 801070a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00b      	beq.n	801072e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010716:	6a3b      	ldr	r3, [r7, #32]
 8010718:	f043 0301 	orr.w	r3, r3, #1
 801071c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010728:	2301      	movs	r3, #1
 801072a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010734:	2b00      	cmp	r3, #0
 8010736:	d00b      	beq.n	8010750 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010738:	6a3b      	ldr	r3, [r7, #32]
 801073a:	f043 0308 	orr.w	r3, r3, #8
 801073e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801074a:	2301      	movs	r3, #1
 801074c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010756:	2b00      	cmp	r3, #0
 8010758:	d00b      	beq.n	8010772 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801075a:	6a3b      	ldr	r3, [r7, #32]
 801075c:	f043 0302 	orr.w	r3, r3, #2
 8010760:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f44f 7200 	mov.w	r2, #512	; 0x200
 801076a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801076c:	2301      	movs	r3, #1
 801076e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8010772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010776:	2b00      	cmp	r3, #0
 8010778:	d01c      	beq.n	80107b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f7ff fddc 	bl	8010338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6859      	ldr	r1, [r3, #4]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681a      	ldr	r2, [r3, #0]
 801078a:	4b0d      	ldr	r3, [pc, #52]	; (80107c0 <I2C_IsErrorOccurred+0x1d4>)
 801078c:	400b      	ands	r3, r1
 801078e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	431a      	orrs	r2, r3
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2220      	movs	r2, #32
 80107a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2200      	movs	r2, #0
 80107a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80107b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3728      	adds	r7, #40	; 0x28
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	fe00e800 	.word	0xfe00e800

080107c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b087      	sub	sp, #28
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	607b      	str	r3, [r7, #4]
 80107ce:	460b      	mov	r3, r1
 80107d0:	817b      	strh	r3, [r7, #10]
 80107d2:	4613      	mov	r3, r2
 80107d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107d6:	897b      	ldrh	r3, [r7, #10]
 80107d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80107dc:	7a7b      	ldrb	r3, [r7, #9]
 80107de:	041b      	lsls	r3, r3, #16
 80107e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107e4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107f2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	685a      	ldr	r2, [r3, #4]
 80107fa:	6a3b      	ldr	r3, [r7, #32]
 80107fc:	0d5b      	lsrs	r3, r3, #21
 80107fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8010802:	4b08      	ldr	r3, [pc, #32]	; (8010824 <I2C_TransferConfig+0x60>)
 8010804:	430b      	orrs	r3, r1
 8010806:	43db      	mvns	r3, r3
 8010808:	ea02 0103 	and.w	r1, r2, r3
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	430a      	orrs	r2, r1
 8010814:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010816:	bf00      	nop
 8010818:	371c      	adds	r7, #28
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr
 8010822:	bf00      	nop
 8010824:	03ff63ff 	.word	0x03ff63ff

08010828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010838:	b2db      	uxtb	r3, r3
 801083a:	2b20      	cmp	r3, #32
 801083c:	d138      	bne.n	80108b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010844:	2b01      	cmp	r3, #1
 8010846:	d101      	bne.n	801084c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010848:	2302      	movs	r3, #2
 801084a:	e032      	b.n	80108b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2201      	movs	r2, #1
 8010850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2224      	movs	r2, #36	; 0x24
 8010858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	681a      	ldr	r2, [r3, #0]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f022 0201 	bic.w	r2, r2, #1
 801086a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801087a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	6819      	ldr	r1, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	683a      	ldr	r2, [r7, #0]
 8010888:	430a      	orrs	r2, r1
 801088a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f042 0201 	orr.w	r2, r2, #1
 801089a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2220      	movs	r2, #32
 80108a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2200      	movs	r2, #0
 80108a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80108ac:	2300      	movs	r3, #0
 80108ae:	e000      	b.n	80108b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80108b0:	2302      	movs	r3, #2
  }
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	370c      	adds	r7, #12
 80108b6:	46bd      	mov	sp, r7
 80108b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108bc:	4770      	bx	lr

080108be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80108be:	b480      	push	{r7}
 80108c0:	b085      	sub	sp, #20
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	2b20      	cmp	r3, #32
 80108d2:	d139      	bne.n	8010948 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d101      	bne.n	80108e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80108de:	2302      	movs	r3, #2
 80108e0:	e033      	b.n	801094a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2224      	movs	r2, #36	; 0x24
 80108ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f022 0201 	bic.w	r2, r2, #1
 8010900:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010910:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	021b      	lsls	r3, r3, #8
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	4313      	orrs	r3, r2
 801091a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f042 0201 	orr.w	r2, r2, #1
 8010932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2220      	movs	r2, #32
 8010938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2200      	movs	r2, #0
 8010940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010944:	2300      	movs	r3, #0
 8010946:	e000      	b.n	801094a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010948:	2302      	movs	r3, #2
  }
}
 801094a:	4618      	mov	r0, r3
 801094c:	3714      	adds	r7, #20
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
	...

08010958 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010958:	b480      	push	{r7}
 801095a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801095c:	4b0d      	ldr	r3, [pc, #52]	; (8010994 <HAL_PWREx_GetVoltageRange+0x3c>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010968:	d102      	bne.n	8010970 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 801096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801096e:	e00b      	b.n	8010988 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8010970:	4b08      	ldr	r3, [pc, #32]	; (8010994 <HAL_PWREx_GetVoltageRange+0x3c>)
 8010972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801097a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801097e:	d102      	bne.n	8010986 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8010980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010984:	e000      	b.n	8010988 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8010986:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8010988:	4618      	mov	r0, r3
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	40007000 	.word	0x40007000

08010998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d141      	bne.n	8010a2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80109a6:	4b4b      	ldr	r3, [pc, #300]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80109ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109b2:	d131      	bne.n	8010a18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80109b4:	4b47      	ldr	r3, [pc, #284]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109ba:	4a46      	ldr	r2, [pc, #280]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80109c4:	4b43      	ldr	r3, [pc, #268]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80109cc:	4a41      	ldr	r2, [pc, #260]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80109d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80109d4:	4b40      	ldr	r3, [pc, #256]	; (8010ad8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2232      	movs	r2, #50	; 0x32
 80109da:	fb02 f303 	mul.w	r3, r2, r3
 80109de:	4a3f      	ldr	r2, [pc, #252]	; (8010adc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80109e0:	fba2 2303 	umull	r2, r3, r2, r3
 80109e4:	0c9b      	lsrs	r3, r3, #18
 80109e6:	3301      	adds	r3, #1
 80109e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80109ea:	e002      	b.n	80109f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	3b01      	subs	r3, #1
 80109f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80109f2:	4b38      	ldr	r3, [pc, #224]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109f4:	695b      	ldr	r3, [r3, #20]
 80109f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109fe:	d102      	bne.n	8010a06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1f2      	bne.n	80109ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010a06:	4b33      	ldr	r3, [pc, #204]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a08:	695b      	ldr	r3, [r3, #20]
 8010a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a12:	d158      	bne.n	8010ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8010a14:	2303      	movs	r3, #3
 8010a16:	e057      	b.n	8010ac8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8010a18:	4b2e      	ldr	r3, [pc, #184]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a1e:	4a2d      	ldr	r2, [pc, #180]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8010a28:	e04d      	b.n	8010ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a30:	d141      	bne.n	8010ab6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8010a32:	4b28      	ldr	r3, [pc, #160]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a3e:	d131      	bne.n	8010aa4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8010a40:	4b24      	ldr	r3, [pc, #144]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a46:	4a23      	ldr	r2, [pc, #140]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010a50:	4b20      	ldr	r3, [pc, #128]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010a58:	4a1e      	ldr	r2, [pc, #120]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8010a60:	4b1d      	ldr	r3, [pc, #116]	; (8010ad8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2232      	movs	r2, #50	; 0x32
 8010a66:	fb02 f303 	mul.w	r3, r2, r3
 8010a6a:	4a1c      	ldr	r2, [pc, #112]	; (8010adc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8010a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a70:	0c9b      	lsrs	r3, r3, #18
 8010a72:	3301      	adds	r3, #1
 8010a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010a76:	e002      	b.n	8010a7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	3b01      	subs	r3, #1
 8010a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010a7e:	4b15      	ldr	r3, [pc, #84]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a8a:	d102      	bne.n	8010a92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1f2      	bne.n	8010a78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010a92:	4b10      	ldr	r3, [pc, #64]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a94:	695b      	ldr	r3, [r3, #20]
 8010a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a9e:	d112      	bne.n	8010ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	e011      	b.n	8010ac8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8010aa4:	4b0b      	ldr	r3, [pc, #44]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aaa:	4a0a      	ldr	r2, [pc, #40]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010ab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8010ab4:	e007      	b.n	8010ac6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010ab6:	4b07      	ldr	r3, [pc, #28]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010abe:	4a05      	ldr	r2, [pc, #20]	; (8010ad4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010ac4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8010ac6:	2300      	movs	r3, #0
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3714      	adds	r7, #20
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr
 8010ad4:	40007000 	.word	0x40007000
 8010ad8:	200000b4 	.word	0x200000b4
 8010adc:	431bde83 	.word	0x431bde83

08010ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b08a      	sub	sp, #40	; 0x28
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d102      	bne.n	8010af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010aee:	2301      	movs	r3, #1
 8010af0:	f000 bc76 	b.w	80113e0 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010af4:	4ba1      	ldr	r3, [pc, #644]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	f003 030c 	and.w	r3, r3, #12
 8010afc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010afe:	4b9f      	ldr	r3, [pc, #636]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	f003 0303 	and.w	r3, r3, #3
 8010b06:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f003 0310 	and.w	r3, r3, #16
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f000 80e6 	beq.w	8010ce2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010b16:	6a3b      	ldr	r3, [r7, #32]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d007      	beq.n	8010b2c <HAL_RCC_OscConfig+0x4c>
 8010b1c:	6a3b      	ldr	r3, [r7, #32]
 8010b1e:	2b0c      	cmp	r3, #12
 8010b20:	f040 808d 	bne.w	8010c3e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	f040 8089 	bne.w	8010c3e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010b2c:	4b93      	ldr	r3, [pc, #588]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f003 0302 	and.w	r3, r3, #2
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d006      	beq.n	8010b46 <HAL_RCC_OscConfig+0x66>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	69db      	ldr	r3, [r3, #28]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d102      	bne.n	8010b46 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8010b40:	2301      	movs	r3, #1
 8010b42:	f000 bc4d 	b.w	80113e0 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b4a:	4b8c      	ldr	r3, [pc, #560]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f003 0308 	and.w	r3, r3, #8
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d004      	beq.n	8010b60 <HAL_RCC_OscConfig+0x80>
 8010b56:	4b89      	ldr	r3, [pc, #548]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b5e:	e005      	b.n	8010b6c <HAL_RCC_OscConfig+0x8c>
 8010b60:	4b86      	ldr	r3, [pc, #536]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010b66:	091b      	lsrs	r3, r3, #4
 8010b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d224      	bcs.n	8010bba <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b74:	4618      	mov	r0, r3
 8010b76:	f000 fdff 	bl	8011778 <RCC_SetFlashLatencyFromMSIRange>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d002      	beq.n	8010b86 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8010b80:	2301      	movs	r3, #1
 8010b82:	f000 bc2d 	b.w	80113e0 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010b86:	4b7d      	ldr	r3, [pc, #500]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4a7c      	ldr	r2, [pc, #496]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b8c:	f043 0308 	orr.w	r3, r3, #8
 8010b90:	6013      	str	r3, [r2, #0]
 8010b92:	4b7a      	ldr	r3, [pc, #488]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b9e:	4977      	ldr	r1, [pc, #476]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010ba4:	4b75      	ldr	r3, [pc, #468]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6a1b      	ldr	r3, [r3, #32]
 8010bb0:	021b      	lsls	r3, r3, #8
 8010bb2:	4972      	ldr	r1, [pc, #456]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	604b      	str	r3, [r1, #4]
 8010bb8:	e025      	b.n	8010c06 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010bba:	4b70      	ldr	r3, [pc, #448]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a6f      	ldr	r2, [pc, #444]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010bc0:	f043 0308 	orr.w	r3, r3, #8
 8010bc4:	6013      	str	r3, [r2, #0]
 8010bc6:	4b6d      	ldr	r3, [pc, #436]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd2:	496a      	ldr	r1, [pc, #424]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010bd8:	4b68      	ldr	r3, [pc, #416]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a1b      	ldr	r3, [r3, #32]
 8010be4:	021b      	lsls	r3, r3, #8
 8010be6:	4965      	ldr	r1, [pc, #404]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010be8:	4313      	orrs	r3, r2
 8010bea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d109      	bne.n	8010c06 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 fdbe 	bl	8011778 <RCC_SetFlashLatencyFromMSIRange>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d001      	beq.n	8010c06 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8010c02:	2301      	movs	r3, #1
 8010c04:	e3ec      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010c06:	f000 fd1f 	bl	8011648 <HAL_RCC_GetSysClockFreq>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	4b5b      	ldr	r3, [pc, #364]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	091b      	lsrs	r3, r3, #4
 8010c12:	f003 030f 	and.w	r3, r3, #15
 8010c16:	495a      	ldr	r1, [pc, #360]	; (8010d80 <HAL_RCC_OscConfig+0x2a0>)
 8010c18:	5ccb      	ldrb	r3, [r1, r3]
 8010c1a:	f003 031f 	and.w	r3, r3, #31
 8010c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8010c22:	4a58      	ldr	r2, [pc, #352]	; (8010d84 <HAL_RCC_OscConfig+0x2a4>)
 8010c24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010c26:	4b58      	ldr	r3, [pc, #352]	; (8010d88 <HAL_RCC_OscConfig+0x2a8>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fb ffc8 	bl	800cbc0 <HAL_InitTick>
 8010c30:	4603      	mov	r3, r0
 8010c32:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8010c34:	7dfb      	ldrb	r3, [r7, #23]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d052      	beq.n	8010ce0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8010c3a:	7dfb      	ldrb	r3, [r7, #23]
 8010c3c:	e3d0      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	69db      	ldr	r3, [r3, #28]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d032      	beq.n	8010cac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010c46:	4b4d      	ldr	r3, [pc, #308]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a4c      	ldr	r2, [pc, #304]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c4c:	f043 0301 	orr.w	r3, r3, #1
 8010c50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010c52:	f7fc f805 	bl	800cc60 <HAL_GetTick>
 8010c56:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010c58:	e008      	b.n	8010c6c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010c5a:	f7fc f801 	bl	800cc60 <HAL_GetTick>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	d901      	bls.n	8010c6c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8010c68:	2303      	movs	r3, #3
 8010c6a:	e3b9      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010c6c:	4b43      	ldr	r3, [pc, #268]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	f003 0302 	and.w	r3, r3, #2
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d0f0      	beq.n	8010c5a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010c78:	4b40      	ldr	r3, [pc, #256]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4a3f      	ldr	r2, [pc, #252]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c7e:	f043 0308 	orr.w	r3, r3, #8
 8010c82:	6013      	str	r3, [r2, #0]
 8010c84:	4b3d      	ldr	r3, [pc, #244]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c90:	493a      	ldr	r1, [pc, #232]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c92:	4313      	orrs	r3, r2
 8010c94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010c96:	4b39      	ldr	r3, [pc, #228]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6a1b      	ldr	r3, [r3, #32]
 8010ca2:	021b      	lsls	r3, r3, #8
 8010ca4:	4935      	ldr	r1, [pc, #212]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	604b      	str	r3, [r1, #4]
 8010caa:	e01a      	b.n	8010ce2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010cac:	4b33      	ldr	r3, [pc, #204]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	4a32      	ldr	r2, [pc, #200]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010cb2:	f023 0301 	bic.w	r3, r3, #1
 8010cb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010cb8:	f7fb ffd2 	bl	800cc60 <HAL_GetTick>
 8010cbc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010cbe:	e008      	b.n	8010cd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010cc0:	f7fb ffce 	bl	800cc60 <HAL_GetTick>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	69bb      	ldr	r3, [r7, #24]
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	2b02      	cmp	r3, #2
 8010ccc:	d901      	bls.n	8010cd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8010cce:	2303      	movs	r3, #3
 8010cd0:	e386      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010cd2:	4b2a      	ldr	r3, [pc, #168]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f003 0302 	and.w	r3, r3, #2
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d1f0      	bne.n	8010cc0 <HAL_RCC_OscConfig+0x1e0>
 8010cde:	e000      	b.n	8010ce2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	f003 0301 	and.w	r3, r3, #1
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d073      	beq.n	8010dd6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8010cee:	6a3b      	ldr	r3, [r7, #32]
 8010cf0:	2b08      	cmp	r3, #8
 8010cf2:	d005      	beq.n	8010d00 <HAL_RCC_OscConfig+0x220>
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	2b0c      	cmp	r3, #12
 8010cf8:	d10e      	bne.n	8010d18 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010cfa:	69fb      	ldr	r3, [r7, #28]
 8010cfc:	2b03      	cmp	r3, #3
 8010cfe:	d10b      	bne.n	8010d18 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010d00:	4b1e      	ldr	r3, [pc, #120]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d063      	beq.n	8010dd4 <HAL_RCC_OscConfig+0x2f4>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d15f      	bne.n	8010dd4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8010d14:	2301      	movs	r3, #1
 8010d16:	e363      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d20:	d106      	bne.n	8010d30 <HAL_RCC_OscConfig+0x250>
 8010d22:	4b16      	ldr	r3, [pc, #88]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a15      	ldr	r2, [pc, #84]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d2c:	6013      	str	r3, [r2, #0]
 8010d2e:	e01d      	b.n	8010d6c <HAL_RCC_OscConfig+0x28c>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010d38:	d10c      	bne.n	8010d54 <HAL_RCC_OscConfig+0x274>
 8010d3a:	4b10      	ldr	r3, [pc, #64]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	4a0f      	ldr	r2, [pc, #60]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010d44:	6013      	str	r3, [r2, #0]
 8010d46:	4b0d      	ldr	r3, [pc, #52]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a0c      	ldr	r2, [pc, #48]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d50:	6013      	str	r3, [r2, #0]
 8010d52:	e00b      	b.n	8010d6c <HAL_RCC_OscConfig+0x28c>
 8010d54:	4b09      	ldr	r3, [pc, #36]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	4a08      	ldr	r2, [pc, #32]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010d5e:	6013      	str	r3, [r2, #0]
 8010d60:	4b06      	ldr	r3, [pc, #24]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	4a05      	ldr	r2, [pc, #20]	; (8010d7c <HAL_RCC_OscConfig+0x29c>)
 8010d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d01b      	beq.n	8010dac <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d74:	f7fb ff74 	bl	800cc60 <HAL_GetTick>
 8010d78:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010d7a:	e010      	b.n	8010d9e <HAL_RCC_OscConfig+0x2be>
 8010d7c:	40021000 	.word	0x40021000
 8010d80:	08023fa8 	.word	0x08023fa8
 8010d84:	200000b4 	.word	0x200000b4
 8010d88:	200000bc 	.word	0x200000bc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d8c:	f7fb ff68 	bl	800cc60 <HAL_GetTick>
 8010d90:	4602      	mov	r2, r0
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	2b64      	cmp	r3, #100	; 0x64
 8010d98:	d901      	bls.n	8010d9e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8010d9a:	2303      	movs	r3, #3
 8010d9c:	e320      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010d9e:	4ba0      	ldr	r3, [pc, #640]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d0f0      	beq.n	8010d8c <HAL_RCC_OscConfig+0x2ac>
 8010daa:	e014      	b.n	8010dd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010dac:	f7fb ff58 	bl	800cc60 <HAL_GetTick>
 8010db0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010db2:	e008      	b.n	8010dc6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010db4:	f7fb ff54 	bl	800cc60 <HAL_GetTick>
 8010db8:	4602      	mov	r2, r0
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	2b64      	cmp	r3, #100	; 0x64
 8010dc0:	d901      	bls.n	8010dc6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8010dc2:	2303      	movs	r3, #3
 8010dc4:	e30c      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010dc6:	4b96      	ldr	r3, [pc, #600]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d1f0      	bne.n	8010db4 <HAL_RCC_OscConfig+0x2d4>
 8010dd2:	e000      	b.n	8010dd6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	f003 0302 	and.w	r3, r3, #2
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d060      	beq.n	8010ea4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8010de2:	6a3b      	ldr	r3, [r7, #32]
 8010de4:	2b04      	cmp	r3, #4
 8010de6:	d005      	beq.n	8010df4 <HAL_RCC_OscConfig+0x314>
 8010de8:	6a3b      	ldr	r3, [r7, #32]
 8010dea:	2b0c      	cmp	r3, #12
 8010dec:	d119      	bne.n	8010e22 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	d116      	bne.n	8010e22 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010df4:	4b8a      	ldr	r3, [pc, #552]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d005      	beq.n	8010e0c <HAL_RCC_OscConfig+0x32c>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e2e9      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e0c:	4b84      	ldr	r3, [pc, #528]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	691b      	ldr	r3, [r3, #16]
 8010e18:	061b      	lsls	r3, r3, #24
 8010e1a:	4981      	ldr	r1, [pc, #516]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010e20:	e040      	b.n	8010ea4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d023      	beq.n	8010e72 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010e2a:	4b7d      	ldr	r3, [pc, #500]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4a7c      	ldr	r2, [pc, #496]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e36:	f7fb ff13 	bl	800cc60 <HAL_GetTick>
 8010e3a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010e3c:	e008      	b.n	8010e50 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e3e:	f7fb ff0f 	bl	800cc60 <HAL_GetTick>
 8010e42:	4602      	mov	r2, r0
 8010e44:	69bb      	ldr	r3, [r7, #24]
 8010e46:	1ad3      	subs	r3, r2, r3
 8010e48:	2b02      	cmp	r3, #2
 8010e4a:	d901      	bls.n	8010e50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8010e4c:	2303      	movs	r3, #3
 8010e4e:	e2c7      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010e50:	4b73      	ldr	r3, [pc, #460]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d0f0      	beq.n	8010e3e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e5c:	4b70      	ldr	r3, [pc, #448]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	061b      	lsls	r3, r3, #24
 8010e6a:	496d      	ldr	r1, [pc, #436]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e6c:	4313      	orrs	r3, r2
 8010e6e:	604b      	str	r3, [r1, #4]
 8010e70:	e018      	b.n	8010ea4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010e72:	4b6b      	ldr	r3, [pc, #428]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4a6a      	ldr	r2, [pc, #424]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e7e:	f7fb feef 	bl	800cc60 <HAL_GetTick>
 8010e82:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010e84:	e008      	b.n	8010e98 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e86:	f7fb feeb 	bl	800cc60 <HAL_GetTick>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	1ad3      	subs	r3, r2, r3
 8010e90:	2b02      	cmp	r3, #2
 8010e92:	d901      	bls.n	8010e98 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8010e94:	2303      	movs	r3, #3
 8010e96:	e2a3      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010e98:	4b61      	ldr	r3, [pc, #388]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1f0      	bne.n	8010e86 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	f003 0308 	and.w	r3, r3, #8
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d07f      	beq.n	8010fb0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	695b      	ldr	r3, [r3, #20]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d05f      	beq.n	8010f78 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8010eb8:	4b59      	ldr	r3, [pc, #356]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ebe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	699a      	ldr	r2, [r3, #24]
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	f003 0310 	and.w	r3, r3, #16
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d037      	beq.n	8010f3e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	f003 0302 	and.w	r3, r3, #2
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d006      	beq.n	8010ee6 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e27c      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	f003 0301 	and.w	r3, r3, #1
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d01b      	beq.n	8010f28 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8010ef0:	4b4b      	ldr	r3, [pc, #300]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ef6:	4a4a      	ldr	r2, [pc, #296]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010ef8:	f023 0301 	bic.w	r3, r3, #1
 8010efc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010f00:	f7fb feae 	bl	800cc60 <HAL_GetTick>
 8010f04:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010f06:	e008      	b.n	8010f1a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f08:	f7fb feaa 	bl	800cc60 <HAL_GetTick>
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	2b11      	cmp	r3, #17
 8010f14:	d901      	bls.n	8010f1a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8010f16:	2303      	movs	r3, #3
 8010f18:	e262      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010f1a:	4b41      	ldr	r3, [pc, #260]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f20:	f003 0302 	and.w	r3, r3, #2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d1ef      	bne.n	8010f08 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8010f28:	4b3d      	ldr	r3, [pc, #244]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f2e:	f023 0210 	bic.w	r2, r3, #16
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	699b      	ldr	r3, [r3, #24]
 8010f36:	493a      	ldr	r1, [pc, #232]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f38:	4313      	orrs	r3, r2
 8010f3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010f3e:	4b38      	ldr	r3, [pc, #224]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f44:	4a36      	ldr	r2, [pc, #216]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f46:	f043 0301 	orr.w	r3, r3, #1
 8010f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f4e:	f7fb fe87 	bl	800cc60 <HAL_GetTick>
 8010f52:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010f54:	e008      	b.n	8010f68 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f56:	f7fb fe83 	bl	800cc60 <HAL_GetTick>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	2b11      	cmp	r3, #17
 8010f62:	d901      	bls.n	8010f68 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8010f64:	2303      	movs	r3, #3
 8010f66:	e23b      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010f68:	4b2d      	ldr	r3, [pc, #180]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f6e:	f003 0302 	and.w	r3, r3, #2
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d0ef      	beq.n	8010f56 <HAL_RCC_OscConfig+0x476>
 8010f76:	e01b      	b.n	8010fb0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010f78:	4b29      	ldr	r3, [pc, #164]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f7e:	4a28      	ldr	r2, [pc, #160]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010f80:	f023 0301 	bic.w	r3, r3, #1
 8010f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f88:	f7fb fe6a 	bl	800cc60 <HAL_GetTick>
 8010f8c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010f8e:	e008      	b.n	8010fa2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f90:	f7fb fe66 	bl	800cc60 <HAL_GetTick>
 8010f94:	4602      	mov	r2, r0
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	2b11      	cmp	r3, #17
 8010f9c:	d901      	bls.n	8010fa2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8010f9e:	2303      	movs	r3, #3
 8010fa0:	e21e      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010fa2:	4b1f      	ldr	r3, [pc, #124]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010fa8:	f003 0302 	and.w	r3, r3, #2
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d1ef      	bne.n	8010f90 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f003 0304 	and.w	r3, r3, #4
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f000 80c1 	beq.w	8011140 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8010fc4:	4b16      	ldr	r3, [pc, #88]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d10e      	bne.n	8010fee <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010fd0:	4b13      	ldr	r3, [pc, #76]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fd4:	4a12      	ldr	r2, [pc, #72]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010fda:	6593      	str	r3, [r2, #88]	; 0x58
 8010fdc:	4b10      	ldr	r3, [pc, #64]	; (8011020 <HAL_RCC_OscConfig+0x540>)
 8010fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fe4:	60fb      	str	r3, [r7, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010fee:	4b0d      	ldr	r3, [pc, #52]	; (8011024 <HAL_RCC_OscConfig+0x544>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d11c      	bne.n	8011034 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010ffa:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <HAL_RCC_OscConfig+0x544>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	4a09      	ldr	r2, [pc, #36]	; (8011024 <HAL_RCC_OscConfig+0x544>)
 8011000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011006:	f7fb fe2b 	bl	800cc60 <HAL_GetTick>
 801100a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801100c:	e00c      	b.n	8011028 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801100e:	f7fb fe27 	bl	800cc60 <HAL_GetTick>
 8011012:	4602      	mov	r2, r0
 8011014:	69bb      	ldr	r3, [r7, #24]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	2b02      	cmp	r3, #2
 801101a:	d905      	bls.n	8011028 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 801101c:	2303      	movs	r3, #3
 801101e:	e1df      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
 8011020:	40021000 	.word	0x40021000
 8011024:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011028:	4b99      	ldr	r3, [pc, #612]	; (8011290 <HAL_RCC_OscConfig+0x7b0>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011030:	2b00      	cmp	r3, #0
 8011032:	d0ec      	beq.n	801100e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	f003 0301 	and.w	r3, r3, #1
 801103c:	2b00      	cmp	r3, #0
 801103e:	d02c      	beq.n	801109a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8011040:	4b94      	ldr	r3, [pc, #592]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	689b      	ldr	r3, [r3, #8]
 801104e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011052:	4990      	ldr	r1, [pc, #576]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011054:	4313      	orrs	r3, r2
 8011056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	f003 0304 	and.w	r3, r3, #4
 8011062:	2b00      	cmp	r3, #0
 8011064:	d010      	beq.n	8011088 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8011066:	4b8b      	ldr	r3, [pc, #556]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801106c:	4a89      	ldr	r2, [pc, #548]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801106e:	f043 0304 	orr.w	r3, r3, #4
 8011072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011076:	4b87      	ldr	r3, [pc, #540]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801107c:	4a85      	ldr	r2, [pc, #532]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801107e:	f043 0301 	orr.w	r3, r3, #1
 8011082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011086:	e018      	b.n	80110ba <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011088:	4b82      	ldr	r3, [pc, #520]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801108a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801108e:	4a81      	ldr	r2, [pc, #516]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011090:	f043 0301 	orr.w	r3, r3, #1
 8011094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011098:	e00f      	b.n	80110ba <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801109a:	4b7e      	ldr	r3, [pc, #504]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801109c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110a0:	4a7c      	ldr	r2, [pc, #496]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 80110a2:	f023 0301 	bic.w	r3, r3, #1
 80110a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80110aa:	4b7a      	ldr	r3, [pc, #488]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 80110ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110b0:	4a78      	ldr	r2, [pc, #480]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 80110b2:	f023 0304 	bic.w	r3, r3, #4
 80110b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d016      	beq.n	80110f0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110c2:	f7fb fdcd 	bl	800cc60 <HAL_GetTick>
 80110c6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110c8:	e00a      	b.n	80110e0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110ca:	f7fb fdc9 	bl	800cc60 <HAL_GetTick>
 80110ce:	4602      	mov	r2, r0
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	1ad3      	subs	r3, r2, r3
 80110d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110d8:	4293      	cmp	r3, r2
 80110da:	d901      	bls.n	80110e0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80110dc:	2303      	movs	r3, #3
 80110de:	e17f      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110e0:	4b6c      	ldr	r3, [pc, #432]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 80110e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110e6:	f003 0302 	and.w	r3, r3, #2
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d0ed      	beq.n	80110ca <HAL_RCC_OscConfig+0x5ea>
 80110ee:	e01d      	b.n	801112c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110f0:	f7fb fdb6 	bl	800cc60 <HAL_GetTick>
 80110f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80110f6:	e00a      	b.n	801110e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110f8:	f7fb fdb2 	bl	800cc60 <HAL_GetTick>
 80110fc:	4602      	mov	r2, r0
 80110fe:	69bb      	ldr	r3, [r7, #24]
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	f241 3288 	movw	r2, #5000	; 0x1388
 8011106:	4293      	cmp	r3, r2
 8011108:	d901      	bls.n	801110e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 801110a:	2303      	movs	r3, #3
 801110c:	e168      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801110e:	4b61      	ldr	r3, [pc, #388]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011114:	f003 0302 	and.w	r3, r3, #2
 8011118:	2b00      	cmp	r3, #0
 801111a:	d1ed      	bne.n	80110f8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 801111c:	4b5d      	ldr	r3, [pc, #372]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801111e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011122:	4a5c      	ldr	r2, [pc, #368]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801112c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011130:	2b01      	cmp	r3, #1
 8011132:	d105      	bne.n	8011140 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011134:	4b57      	ldr	r3, [pc, #348]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011138:	4a56      	ldr	r2, [pc, #344]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801113a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801113e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	f003 0320 	and.w	r3, r3, #32
 8011148:	2b00      	cmp	r3, #0
 801114a:	d03c      	beq.n	80111c6 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011150:	2b00      	cmp	r3, #0
 8011152:	d01c      	beq.n	801118e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011154:	4b4f      	ldr	r3, [pc, #316]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801115a:	4a4e      	ldr	r2, [pc, #312]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801115c:	f043 0301 	orr.w	r3, r3, #1
 8011160:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011164:	f7fb fd7c 	bl	800cc60 <HAL_GetTick>
 8011168:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801116a:	e008      	b.n	801117e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801116c:	f7fb fd78 	bl	800cc60 <HAL_GetTick>
 8011170:	4602      	mov	r2, r0
 8011172:	69bb      	ldr	r3, [r7, #24]
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	2b02      	cmp	r3, #2
 8011178:	d901      	bls.n	801117e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 801117a:	2303      	movs	r3, #3
 801117c:	e130      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801117e:	4b45      	ldr	r3, [pc, #276]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011180:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011184:	f003 0302 	and.w	r3, r3, #2
 8011188:	2b00      	cmp	r3, #0
 801118a:	d0ef      	beq.n	801116c <HAL_RCC_OscConfig+0x68c>
 801118c:	e01b      	b.n	80111c6 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801118e:	4b41      	ldr	r3, [pc, #260]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011194:	4a3f      	ldr	r2, [pc, #252]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011196:	f023 0301 	bic.w	r3, r3, #1
 801119a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801119e:	f7fb fd5f 	bl	800cc60 <HAL_GetTick>
 80111a2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80111a4:	e008      	b.n	80111b8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80111a6:	f7fb fd5b 	bl	800cc60 <HAL_GetTick>
 80111aa:	4602      	mov	r2, r0
 80111ac:	69bb      	ldr	r3, [r7, #24]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	2b02      	cmp	r3, #2
 80111b2:	d901      	bls.n	80111b8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80111b4:	2303      	movs	r3, #3
 80111b6:	e113      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80111b8:	4b36      	ldr	r3, [pc, #216]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 80111ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80111be:	f003 0302 	and.w	r3, r3, #2
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d1ef      	bne.n	80111a6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 8107 	beq.w	80113de <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	f040 80cf 	bne.w	8011378 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80111da:	4b2e      	ldr	r3, [pc, #184]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80111e0:	69fb      	ldr	r3, [r7, #28]
 80111e2:	f003 0203 	and.w	r2, r3, #3
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d12c      	bne.n	8011248 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80111ee:	69fb      	ldr	r3, [r7, #28]
 80111f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111f8:	3b01      	subs	r3, #1
 80111fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d123      	bne.n	8011248 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801120a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801120c:	429a      	cmp	r2, r3
 801120e:	d11b      	bne.n	8011248 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801121a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801121c:	429a      	cmp	r2, r3
 801121e:	d113      	bne.n	8011248 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801122a:	085b      	lsrs	r3, r3, #1
 801122c:	3b01      	subs	r3, #1
 801122e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8011230:	429a      	cmp	r2, r3
 8011232:	d109      	bne.n	8011248 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011234:	69fb      	ldr	r3, [r7, #28]
 8011236:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801123e:	085b      	lsrs	r3, r3, #1
 8011240:	3b01      	subs	r3, #1
 8011242:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011244:	429a      	cmp	r2, r3
 8011246:	d071      	beq.n	801132c <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011248:	6a3b      	ldr	r3, [r7, #32]
 801124a:	2b0c      	cmp	r3, #12
 801124c:	d06c      	beq.n	8011328 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801124e:	4b11      	ldr	r3, [pc, #68]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011256:	2b00      	cmp	r3, #0
 8011258:	d105      	bne.n	8011266 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 801125a:	4b0e      	ldr	r3, [pc, #56]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011262:	2b00      	cmp	r3, #0
 8011264:	d001      	beq.n	801126a <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	e0ba      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801126a:	4b0a      	ldr	r3, [pc, #40]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	4a09      	ldr	r2, [pc, #36]	; (8011294 <HAL_RCC_OscConfig+0x7b4>)
 8011270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011274:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011276:	f7fb fcf3 	bl	800cc60 <HAL_GetTick>
 801127a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801127c:	e00c      	b.n	8011298 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801127e:	f7fb fcef 	bl	800cc60 <HAL_GetTick>
 8011282:	4602      	mov	r2, r0
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	2b02      	cmp	r3, #2
 801128a:	d905      	bls.n	8011298 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 801128c:	2303      	movs	r3, #3
 801128e:	e0a7      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
 8011290:	40007000 	.word	0x40007000
 8011294:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011298:	4b53      	ldr	r3, [pc, #332]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d1ec      	bne.n	801127e <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80112a4:	4b50      	ldr	r3, [pc, #320]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80112a6:	68da      	ldr	r2, [r3, #12]
 80112a8:	4b50      	ldr	r3, [pc, #320]	; (80113ec <HAL_RCC_OscConfig+0x90c>)
 80112aa:	4013      	ands	r3, r2
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80112b0:	687a      	ldr	r2, [r7, #4]
 80112b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80112b4:	3a01      	subs	r2, #1
 80112b6:	0112      	lsls	r2, r2, #4
 80112b8:	4311      	orrs	r1, r2
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80112be:	0212      	lsls	r2, r2, #8
 80112c0:	4311      	orrs	r1, r2
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112c6:	0852      	lsrs	r2, r2, #1
 80112c8:	3a01      	subs	r2, #1
 80112ca:	0552      	lsls	r2, r2, #21
 80112cc:	4311      	orrs	r1, r2
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80112d2:	0852      	lsrs	r2, r2, #1
 80112d4:	3a01      	subs	r2, #1
 80112d6:	0652      	lsls	r2, r2, #25
 80112d8:	4311      	orrs	r1, r2
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80112de:	06d2      	lsls	r2, r2, #27
 80112e0:	430a      	orrs	r2, r1
 80112e2:	4941      	ldr	r1, [pc, #260]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80112e4:	4313      	orrs	r3, r2
 80112e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80112e8:	4b3f      	ldr	r3, [pc, #252]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4a3e      	ldr	r2, [pc, #248]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80112ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80112f4:	4b3c      	ldr	r3, [pc, #240]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	4a3b      	ldr	r2, [pc, #236]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80112fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011300:	f7fb fcae 	bl	800cc60 <HAL_GetTick>
 8011304:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011306:	e008      	b.n	801131a <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011308:	f7fb fcaa 	bl	800cc60 <HAL_GetTick>
 801130c:	4602      	mov	r2, r0
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	1ad3      	subs	r3, r2, r3
 8011312:	2b02      	cmp	r3, #2
 8011314:	d901      	bls.n	801131a <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8011316:	2303      	movs	r3, #3
 8011318:	e062      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801131a:	4b33      	ldr	r3, [pc, #204]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011322:	2b00      	cmp	r3, #0
 8011324:	d0f0      	beq.n	8011308 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011326:	e05a      	b.n	80113de <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8011328:	2301      	movs	r3, #1
 801132a:	e059      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801132c:	4b2e      	ldr	r3, [pc, #184]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011334:	2b00      	cmp	r3, #0
 8011336:	d152      	bne.n	80113de <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8011338:	4b2b      	ldr	r3, [pc, #172]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a2a      	ldr	r2, [pc, #168]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801133e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011342:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011344:	4b28      	ldr	r3, [pc, #160]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	4a27      	ldr	r2, [pc, #156]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801134a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801134e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011350:	f7fb fc86 	bl	800cc60 <HAL_GetTick>
 8011354:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011356:	e008      	b.n	801136a <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011358:	f7fb fc82 	bl	800cc60 <HAL_GetTick>
 801135c:	4602      	mov	r2, r0
 801135e:	69bb      	ldr	r3, [r7, #24]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	2b02      	cmp	r3, #2
 8011364:	d901      	bls.n	801136a <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8011366:	2303      	movs	r3, #3
 8011368:	e03a      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801136a:	4b1f      	ldr	r3, [pc, #124]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011372:	2b00      	cmp	r3, #0
 8011374:	d0f0      	beq.n	8011358 <HAL_RCC_OscConfig+0x878>
 8011376:	e032      	b.n	80113de <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011378:	6a3b      	ldr	r3, [r7, #32]
 801137a:	2b0c      	cmp	r3, #12
 801137c:	d02d      	beq.n	80113da <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801137e:	4b1a      	ldr	r3, [pc, #104]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	4a19      	ldr	r2, [pc, #100]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 8011384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011388:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 801138a:	4b17      	ldr	r3, [pc, #92]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8011392:	2b00      	cmp	r3, #0
 8011394:	d105      	bne.n	80113a2 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8011396:	4b14      	ldr	r3, [pc, #80]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	4a13      	ldr	r2, [pc, #76]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 801139c:	f023 0303 	bic.w	r3, r3, #3
 80113a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80113a2:	4b11      	ldr	r3, [pc, #68]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	4a10      	ldr	r2, [pc, #64]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80113a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80113ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80113b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113b2:	f7fb fc55 	bl	800cc60 <HAL_GetTick>
 80113b6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80113b8:	e008      	b.n	80113cc <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80113ba:	f7fb fc51 	bl	800cc60 <HAL_GetTick>
 80113be:	4602      	mov	r2, r0
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	1ad3      	subs	r3, r2, r3
 80113c4:	2b02      	cmp	r3, #2
 80113c6:	d901      	bls.n	80113cc <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80113c8:	2303      	movs	r3, #3
 80113ca:	e009      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80113cc:	4b06      	ldr	r3, [pc, #24]	; (80113e8 <HAL_RCC_OscConfig+0x908>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d1f0      	bne.n	80113ba <HAL_RCC_OscConfig+0x8da>
 80113d8:	e001      	b.n	80113de <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80113da:	2301      	movs	r3, #1
 80113dc:	e000      	b.n	80113e0 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80113de:	2300      	movs	r3, #0
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3728      	adds	r7, #40	; 0x28
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	40021000 	.word	0x40021000
 80113ec:	019d800c 	.word	0x019d800c

080113f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b086      	sub	sp, #24
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80113fa:	2300      	movs	r3, #0
 80113fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d101      	bne.n	8011408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8011404:	2301      	movs	r3, #1
 8011406:	e10f      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011408:	4b89      	ldr	r3, [pc, #548]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f003 030f 	and.w	r3, r3, #15
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	429a      	cmp	r2, r3
 8011414:	d910      	bls.n	8011438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011416:	4b86      	ldr	r3, [pc, #536]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f023 020f 	bic.w	r2, r3, #15
 801141e:	4984      	ldr	r1, [pc, #528]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	4313      	orrs	r3, r2
 8011424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011426:	4b82      	ldr	r3, [pc, #520]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f003 030f 	and.w	r3, r3, #15
 801142e:	683a      	ldr	r2, [r7, #0]
 8011430:	429a      	cmp	r2, r3
 8011432:	d001      	beq.n	8011438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8011434:	2301      	movs	r3, #1
 8011436:	e0f7      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f003 0301 	and.w	r3, r3, #1
 8011440:	2b00      	cmp	r3, #0
 8011442:	f000 8089 	beq.w	8011558 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	2b03      	cmp	r3, #3
 801144c:	d133      	bne.n	80114b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801144e:	4b79      	ldr	r3, [pc, #484]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011456:	2b00      	cmp	r3, #0
 8011458:	d101      	bne.n	801145e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 801145a:	2301      	movs	r3, #1
 801145c:	e0e4      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 801145e:	f000 f9e5 	bl	801182c <RCC_GetSysClockFreqFromPLLSource>
 8011462:	4603      	mov	r3, r0
 8011464:	4a74      	ldr	r2, [pc, #464]	; (8011638 <HAL_RCC_ClockConfig+0x248>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d955      	bls.n	8011516 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801146a:	4b72      	ldr	r3, [pc, #456]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 801146c:	689b      	ldr	r3, [r3, #8]
 801146e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011472:	2b00      	cmp	r3, #0
 8011474:	d10a      	bne.n	801148c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8011476:	4b6f      	ldr	r3, [pc, #444]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801147e:	4a6d      	ldr	r2, [pc, #436]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011484:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8011486:	2380      	movs	r3, #128	; 0x80
 8011488:	617b      	str	r3, [r7, #20]
 801148a:	e044      	b.n	8011516 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f003 0302 	and.w	r3, r3, #2
 8011494:	2b00      	cmp	r3, #0
 8011496:	d03e      	beq.n	8011516 <HAL_RCC_ClockConfig+0x126>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d13a      	bne.n	8011516 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80114a0:	4b64      	ldr	r3, [pc, #400]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80114a8:	4a62      	ldr	r2, [pc, #392]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80114aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80114b0:	2380      	movs	r3, #128	; 0x80
 80114b2:	617b      	str	r3, [r7, #20]
 80114b4:	e02f      	b.n	8011516 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	d107      	bne.n	80114ce <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80114be:	4b5d      	ldr	r3, [pc, #372]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d115      	bne.n	80114f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80114ca:	2301      	movs	r3, #1
 80114cc:	e0ac      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d107      	bne.n	80114e6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80114d6:	4b57      	ldr	r3, [pc, #348]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f003 0302 	and.w	r3, r3, #2
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d109      	bne.n	80114f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80114e2:	2301      	movs	r3, #1
 80114e4:	e0a0      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80114e6:	4b53      	ldr	r3, [pc, #332]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d101      	bne.n	80114f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80114f2:	2301      	movs	r3, #1
 80114f4:	e098      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80114f6:	f000 f8a7 	bl	8011648 <HAL_RCC_GetSysClockFreq>
 80114fa:	4603      	mov	r3, r0
 80114fc:	4a4e      	ldr	r2, [pc, #312]	; (8011638 <HAL_RCC_ClockConfig+0x248>)
 80114fe:	4293      	cmp	r3, r2
 8011500:	d909      	bls.n	8011516 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8011502:	4b4c      	ldr	r3, [pc, #304]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011504:	689b      	ldr	r3, [r3, #8]
 8011506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801150a:	4a4a      	ldr	r2, [pc, #296]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 801150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011510:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8011512:	2380      	movs	r3, #128	; 0x80
 8011514:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011516:	4b47      	ldr	r3, [pc, #284]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	f023 0203 	bic.w	r2, r3, #3
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	4944      	ldr	r1, [pc, #272]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011524:	4313      	orrs	r3, r2
 8011526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011528:	f7fb fb9a 	bl	800cc60 <HAL_GetTick>
 801152c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801152e:	e00a      	b.n	8011546 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011530:	f7fb fb96 	bl	800cc60 <HAL_GetTick>
 8011534:	4602      	mov	r2, r0
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	1ad3      	subs	r3, r2, r3
 801153a:	f241 3288 	movw	r2, #5000	; 0x1388
 801153e:	4293      	cmp	r3, r2
 8011540:	d901      	bls.n	8011546 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8011542:	2303      	movs	r3, #3
 8011544:	e070      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011546:	4b3b      	ldr	r3, [pc, #236]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011548:	689b      	ldr	r3, [r3, #8]
 801154a:	f003 020c 	and.w	r2, r3, #12
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	009b      	lsls	r3, r3, #2
 8011554:	429a      	cmp	r2, r3
 8011556:	d1eb      	bne.n	8011530 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f003 0302 	and.w	r3, r3, #2
 8011560:	2b00      	cmp	r3, #0
 8011562:	d009      	beq.n	8011578 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011564:	4b33      	ldr	r3, [pc, #204]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	4930      	ldr	r1, [pc, #192]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011572:	4313      	orrs	r3, r2
 8011574:	608b      	str	r3, [r1, #8]
 8011576:	e008      	b.n	801158a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	2b80      	cmp	r3, #128	; 0x80
 801157c:	d105      	bne.n	801158a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801157e:	4b2d      	ldr	r3, [pc, #180]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	4a2c      	ldr	r2, [pc, #176]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011588:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801158a:	4b29      	ldr	r3, [pc, #164]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f003 030f 	and.w	r3, r3, #15
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	429a      	cmp	r2, r3
 8011596:	d210      	bcs.n	80115ba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011598:	4b25      	ldr	r3, [pc, #148]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f023 020f 	bic.w	r2, r3, #15
 80115a0:	4923      	ldr	r1, [pc, #140]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	4313      	orrs	r3, r2
 80115a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80115a8:	4b21      	ldr	r3, [pc, #132]	; (8011630 <HAL_RCC_ClockConfig+0x240>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f003 030f 	and.w	r3, r3, #15
 80115b0:	683a      	ldr	r2, [r7, #0]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d001      	beq.n	80115ba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80115b6:	2301      	movs	r3, #1
 80115b8:	e036      	b.n	8011628 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	f003 0304 	and.w	r3, r3, #4
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d008      	beq.n	80115d8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80115c6:	4b1b      	ldr	r3, [pc, #108]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	4918      	ldr	r1, [pc, #96]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80115d4:	4313      	orrs	r3, r2
 80115d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f003 0308 	and.w	r3, r3, #8
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d009      	beq.n	80115f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80115e4:	4b13      	ldr	r3, [pc, #76]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80115e6:	689b      	ldr	r3, [r3, #8]
 80115e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	691b      	ldr	r3, [r3, #16]
 80115f0:	00db      	lsls	r3, r3, #3
 80115f2:	4910      	ldr	r1, [pc, #64]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 80115f4:	4313      	orrs	r3, r2
 80115f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80115f8:	f000 f826 	bl	8011648 <HAL_RCC_GetSysClockFreq>
 80115fc:	4602      	mov	r2, r0
 80115fe:	4b0d      	ldr	r3, [pc, #52]	; (8011634 <HAL_RCC_ClockConfig+0x244>)
 8011600:	689b      	ldr	r3, [r3, #8]
 8011602:	091b      	lsrs	r3, r3, #4
 8011604:	f003 030f 	and.w	r3, r3, #15
 8011608:	490c      	ldr	r1, [pc, #48]	; (801163c <HAL_RCC_ClockConfig+0x24c>)
 801160a:	5ccb      	ldrb	r3, [r1, r3]
 801160c:	f003 031f 	and.w	r3, r3, #31
 8011610:	fa22 f303 	lsr.w	r3, r2, r3
 8011614:	4a0a      	ldr	r2, [pc, #40]	; (8011640 <HAL_RCC_ClockConfig+0x250>)
 8011616:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8011618:	4b0a      	ldr	r3, [pc, #40]	; (8011644 <HAL_RCC_ClockConfig+0x254>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4618      	mov	r0, r3
 801161e:	f7fb facf 	bl	800cbc0 <HAL_InitTick>
 8011622:	4603      	mov	r3, r0
 8011624:	73fb      	strb	r3, [r7, #15]

  return status;
 8011626:	7bfb      	ldrb	r3, [r7, #15]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3718      	adds	r7, #24
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	40022000 	.word	0x40022000
 8011634:	40021000 	.word	0x40021000
 8011638:	04c4b400 	.word	0x04c4b400
 801163c:	08023fa8 	.word	0x08023fa8
 8011640:	200000b4 	.word	0x200000b4
 8011644:	200000bc 	.word	0x200000bc

08011648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011648:	b480      	push	{r7}
 801164a:	b089      	sub	sp, #36	; 0x24
 801164c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801164e:	2300      	movs	r3, #0
 8011650:	61fb      	str	r3, [r7, #28]
 8011652:	2300      	movs	r3, #0
 8011654:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011656:	4b3e      	ldr	r3, [pc, #248]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 8011658:	689b      	ldr	r3, [r3, #8]
 801165a:	f003 030c 	and.w	r3, r3, #12
 801165e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011660:	4b3b      	ldr	r3, [pc, #236]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	f003 0303 	and.w	r3, r3, #3
 8011668:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d005      	beq.n	801167c <HAL_RCC_GetSysClockFreq+0x34>
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	2b0c      	cmp	r3, #12
 8011674:	d121      	bne.n	80116ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d11e      	bne.n	80116ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801167c:	4b34      	ldr	r3, [pc, #208]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f003 0308 	and.w	r3, r3, #8
 8011684:	2b00      	cmp	r3, #0
 8011686:	d107      	bne.n	8011698 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011688:	4b31      	ldr	r3, [pc, #196]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 801168a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801168e:	0a1b      	lsrs	r3, r3, #8
 8011690:	f003 030f 	and.w	r3, r3, #15
 8011694:	61fb      	str	r3, [r7, #28]
 8011696:	e005      	b.n	80116a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011698:	4b2d      	ldr	r3, [pc, #180]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	091b      	lsrs	r3, r3, #4
 801169e:	f003 030f 	and.w	r3, r3, #15
 80116a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80116a4:	4a2b      	ldr	r2, [pc, #172]	; (8011754 <HAL_RCC_GetSysClockFreq+0x10c>)
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d10d      	bne.n	80116d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80116b8:	e00a      	b.n	80116d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	2b04      	cmp	r3, #4
 80116be:	d102      	bne.n	80116c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80116c0:	4b25      	ldr	r3, [pc, #148]	; (8011758 <HAL_RCC_GetSysClockFreq+0x110>)
 80116c2:	61bb      	str	r3, [r7, #24]
 80116c4:	e004      	b.n	80116d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	2b08      	cmp	r3, #8
 80116ca:	d101      	bne.n	80116d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80116cc:	4b23      	ldr	r3, [pc, #140]	; (801175c <HAL_RCC_GetSysClockFreq+0x114>)
 80116ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	2b0c      	cmp	r3, #12
 80116d4:	d134      	bne.n	8011740 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80116d6:	4b1e      	ldr	r3, [pc, #120]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	f003 0303 	and.w	r3, r3, #3
 80116de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	2b02      	cmp	r3, #2
 80116e4:	d003      	beq.n	80116ee <HAL_RCC_GetSysClockFreq+0xa6>
 80116e6:	68bb      	ldr	r3, [r7, #8]
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	d003      	beq.n	80116f4 <HAL_RCC_GetSysClockFreq+0xac>
 80116ec:	e005      	b.n	80116fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80116ee:	4b1a      	ldr	r3, [pc, #104]	; (8011758 <HAL_RCC_GetSysClockFreq+0x110>)
 80116f0:	617b      	str	r3, [r7, #20]
      break;
 80116f2:	e005      	b.n	8011700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80116f4:	4b19      	ldr	r3, [pc, #100]	; (801175c <HAL_RCC_GetSysClockFreq+0x114>)
 80116f6:	617b      	str	r3, [r7, #20]
      break;
 80116f8:	e002      	b.n	8011700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	617b      	str	r3, [r7, #20]
      break;
 80116fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011700:	4b13      	ldr	r3, [pc, #76]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	091b      	lsrs	r3, r3, #4
 8011706:	f003 030f 	and.w	r3, r3, #15
 801170a:	3301      	adds	r3, #1
 801170c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801170e:	4b10      	ldr	r3, [pc, #64]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	0a1b      	lsrs	r3, r3, #8
 8011714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011718:	697a      	ldr	r2, [r7, #20]
 801171a:	fb02 f203 	mul.w	r2, r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	fbb2 f3f3 	udiv	r3, r2, r3
 8011724:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8011726:	4b0a      	ldr	r3, [pc, #40]	; (8011750 <HAL_RCC_GetSysClockFreq+0x108>)
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	0e5b      	lsrs	r3, r3, #25
 801172c:	f003 0303 	and.w	r3, r3, #3
 8011730:	3301      	adds	r3, #1
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8011736:	697a      	ldr	r2, [r7, #20]
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	fbb2 f3f3 	udiv	r3, r2, r3
 801173e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8011740:	69bb      	ldr	r3, [r7, #24]
}
 8011742:	4618      	mov	r0, r3
 8011744:	3724      	adds	r7, #36	; 0x24
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	40021000 	.word	0x40021000
 8011754:	08023fb8 	.word	0x08023fb8
 8011758:	00f42400 	.word	0x00f42400
 801175c:	007a1200 	.word	0x007a1200

08011760 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011760:	b480      	push	{r7}
 8011762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011764:	4b03      	ldr	r3, [pc, #12]	; (8011774 <HAL_RCC_GetHCLKFreq+0x14>)
 8011766:	681b      	ldr	r3, [r3, #0]
}
 8011768:	4618      	mov	r0, r3
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	200000b4 	.word	0x200000b4

08011778 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8011780:	2300      	movs	r3, #0
 8011782:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8011784:	4b27      	ldr	r3, [pc, #156]	; (8011824 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8011786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801178c:	2b00      	cmp	r3, #0
 801178e:	d003      	beq.n	8011798 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8011790:	f7ff f8e2 	bl	8010958 <HAL_PWREx_GetVoltageRange>
 8011794:	6178      	str	r0, [r7, #20]
 8011796:	e014      	b.n	80117c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8011798:	4b22      	ldr	r3, [pc, #136]	; (8011824 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 801179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801179c:	4a21      	ldr	r2, [pc, #132]	; (8011824 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 801179e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117a2:	6593      	str	r3, [r2, #88]	; 0x58
 80117a4:	4b1f      	ldr	r3, [pc, #124]	; (8011824 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80117a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117ac:	60fb      	str	r3, [r7, #12]
 80117ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80117b0:	f7ff f8d2 	bl	8010958 <HAL_PWREx_GetVoltageRange>
 80117b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80117b6:	4b1b      	ldr	r3, [pc, #108]	; (8011824 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80117b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117ba:	4a1a      	ldr	r2, [pc, #104]	; (8011824 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80117bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80117c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117c8:	d10b      	bne.n	80117e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b80      	cmp	r3, #128	; 0x80
 80117ce:	d913      	bls.n	80117f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2ba0      	cmp	r3, #160	; 0xa0
 80117d4:	d902      	bls.n	80117dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80117d6:	2302      	movs	r3, #2
 80117d8:	613b      	str	r3, [r7, #16]
 80117da:	e00d      	b.n	80117f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80117dc:	2301      	movs	r3, #1
 80117de:	613b      	str	r3, [r7, #16]
 80117e0:	e00a      	b.n	80117f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2b7f      	cmp	r3, #127	; 0x7f
 80117e6:	d902      	bls.n	80117ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80117e8:	2302      	movs	r3, #2
 80117ea:	613b      	str	r3, [r7, #16]
 80117ec:	e004      	b.n	80117f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2b70      	cmp	r3, #112	; 0x70
 80117f2:	d101      	bne.n	80117f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80117f4:	2301      	movs	r3, #1
 80117f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80117f8:	4b0b      	ldr	r3, [pc, #44]	; (8011828 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f023 020f 	bic.w	r2, r3, #15
 8011800:	4909      	ldr	r1, [pc, #36]	; (8011828 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	4313      	orrs	r3, r2
 8011806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8011808:	4b07      	ldr	r3, [pc, #28]	; (8011828 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f003 030f 	and.w	r3, r3, #15
 8011810:	693a      	ldr	r2, [r7, #16]
 8011812:	429a      	cmp	r2, r3
 8011814:	d001      	beq.n	801181a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8011816:	2301      	movs	r3, #1
 8011818:	e000      	b.n	801181c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 801181a:	2300      	movs	r3, #0
}
 801181c:	4618      	mov	r0, r3
 801181e:	3718      	adds	r7, #24
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	40021000 	.word	0x40021000
 8011828:	40022000 	.word	0x40022000

0801182c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801182c:	b480      	push	{r7}
 801182e:	b087      	sub	sp, #28
 8011830:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8011832:	2300      	movs	r3, #0
 8011834:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8011836:	4b2d      	ldr	r3, [pc, #180]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011838:	68db      	ldr	r3, [r3, #12]
 801183a:	f003 0303 	and.w	r3, r3, #3
 801183e:	2b01      	cmp	r3, #1
 8011840:	d118      	bne.n	8011874 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8011842:	4b2a      	ldr	r3, [pc, #168]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f003 0308 	and.w	r3, r3, #8
 801184a:	2b00      	cmp	r3, #0
 801184c:	d107      	bne.n	801185e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801184e:	4b27      	ldr	r3, [pc, #156]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011854:	0a1b      	lsrs	r3, r3, #8
 8011856:	f003 030f 	and.w	r3, r3, #15
 801185a:	617b      	str	r3, [r7, #20]
 801185c:	e005      	b.n	801186a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801185e:	4b23      	ldr	r3, [pc, #140]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	091b      	lsrs	r3, r3, #4
 8011864:	f003 030f 	and.w	r3, r3, #15
 8011868:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801186a:	4a21      	ldr	r2, [pc, #132]	; (80118f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011872:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8011874:	4b1d      	ldr	r3, [pc, #116]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	f003 0303 	and.w	r3, r3, #3
 801187c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2b02      	cmp	r3, #2
 8011882:	d003      	beq.n	801188c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	2b03      	cmp	r3, #3
 8011888:	d003      	beq.n	8011892 <RCC_GetSysClockFreqFromPLLSource+0x66>
 801188a:	e005      	b.n	8011898 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 801188c:	4b19      	ldr	r3, [pc, #100]	; (80118f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 801188e:	613b      	str	r3, [r7, #16]
    break;
 8011890:	e005      	b.n	801189e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8011892:	4b19      	ldr	r3, [pc, #100]	; (80118f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8011894:	613b      	str	r3, [r7, #16]
    break;
 8011896:	e002      	b.n	801189e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	613b      	str	r3, [r7, #16]
    break;
 801189c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801189e:	4b13      	ldr	r3, [pc, #76]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	091b      	lsrs	r3, r3, #4
 80118a4:	f003 030f 	and.w	r3, r3, #15
 80118a8:	3301      	adds	r3, #1
 80118aa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80118ac:	4b0f      	ldr	r3, [pc, #60]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80118ae:	68db      	ldr	r3, [r3, #12]
 80118b0:	0a1b      	lsrs	r3, r3, #8
 80118b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118b6:	693a      	ldr	r2, [r7, #16]
 80118b8:	fb02 f203 	mul.w	r2, r2, r3
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	fbb2 f3f3 	udiv	r3, r2, r3
 80118c2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80118c4:	4b09      	ldr	r3, [pc, #36]	; (80118ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	0e5b      	lsrs	r3, r3, #25
 80118ca:	f003 0303 	and.w	r3, r3, #3
 80118ce:	3301      	adds	r3, #1
 80118d0:	005b      	lsls	r3, r3, #1
 80118d2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80118d4:	693a      	ldr	r2, [r7, #16]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80118dc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80118de:	683b      	ldr	r3, [r7, #0]
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	371c      	adds	r7, #28
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr
 80118ec:	40021000 	.word	0x40021000
 80118f0:	08023fb8 	.word	0x08023fb8
 80118f4:	00f42400 	.word	0x00f42400
 80118f8:	007a1200 	.word	0x007a1200

080118fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b086      	sub	sp, #24
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011904:	2300      	movs	r3, #0
 8011906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011908:	2300      	movs	r3, #0
 801190a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011914:	2b00      	cmp	r3, #0
 8011916:	d040      	beq.n	801199a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801191c:	2b80      	cmp	r3, #128	; 0x80
 801191e:	d02a      	beq.n	8011976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011920:	2b80      	cmp	r3, #128	; 0x80
 8011922:	d825      	bhi.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8011924:	2b60      	cmp	r3, #96	; 0x60
 8011926:	d026      	beq.n	8011976 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011928:	2b60      	cmp	r3, #96	; 0x60
 801192a:	d821      	bhi.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x74>
 801192c:	2b40      	cmp	r3, #64	; 0x40
 801192e:	d006      	beq.n	801193e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8011930:	2b40      	cmp	r3, #64	; 0x40
 8011932:	d81d      	bhi.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8011934:	2b00      	cmp	r3, #0
 8011936:	d009      	beq.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8011938:	2b20      	cmp	r3, #32
 801193a:	d010      	beq.n	801195e <HAL_RCCEx_PeriphCLKConfig+0x62>
 801193c:	e018      	b.n	8011970 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801193e:	4b89      	ldr	r3, [pc, #548]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011940:	68db      	ldr	r3, [r3, #12]
 8011942:	4a88      	ldr	r2, [pc, #544]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011948:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801194a:	e015      	b.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	3304      	adds	r3, #4
 8011950:	2100      	movs	r1, #0
 8011952:	4618      	mov	r0, r3
 8011954:	f000 fb3e 	bl	8011fd4 <RCCEx_PLLSAI1_Config>
 8011958:	4603      	mov	r3, r0
 801195a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801195c:	e00c      	b.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	3320      	adds	r3, #32
 8011962:	2100      	movs	r1, #0
 8011964:	4618      	mov	r0, r3
 8011966:	f000 fc29 	bl	80121bc <RCCEx_PLLSAI2_Config>
 801196a:	4603      	mov	r3, r0
 801196c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801196e:	e003      	b.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011970:	2301      	movs	r3, #1
 8011972:	74fb      	strb	r3, [r7, #19]
      break;
 8011974:	e000      	b.n	8011978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8011976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011978:	7cfb      	ldrb	r3, [r7, #19]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d10b      	bne.n	8011996 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801197e:	4b79      	ldr	r3, [pc, #484]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011984:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801198c:	4975      	ldr	r1, [pc, #468]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801198e:	4313      	orrs	r3, r2
 8011990:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8011994:	e001      	b.n	801199a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011996:	7cfb      	ldrb	r3, [r7, #19]
 8011998:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d047      	beq.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119ae:	d030      	beq.n	8011a12 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80119b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119b4:	d82a      	bhi.n	8011a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80119b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119ba:	d02a      	beq.n	8011a12 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80119bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119c0:	d824      	bhi.n	8011a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80119c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119c6:	d008      	beq.n	80119da <HAL_RCCEx_PeriphCLKConfig+0xde>
 80119c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119cc:	d81e      	bhi.n	8011a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80119d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119d6:	d010      	beq.n	80119fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80119d8:	e018      	b.n	8011a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80119da:	4b62      	ldr	r3, [pc, #392]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	4a61      	ldr	r2, [pc, #388]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80119e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119e4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80119e6:	e015      	b.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3304      	adds	r3, #4
 80119ec:	2100      	movs	r1, #0
 80119ee:	4618      	mov	r0, r3
 80119f0:	f000 faf0 	bl	8011fd4 <RCCEx_PLLSAI1_Config>
 80119f4:	4603      	mov	r3, r0
 80119f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80119f8:	e00c      	b.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	3320      	adds	r3, #32
 80119fe:	2100      	movs	r1, #0
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 fbdb 	bl	80121bc <RCCEx_PLLSAI2_Config>
 8011a06:	4603      	mov	r3, r0
 8011a08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011a0a:	e003      	b.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	74fb      	strb	r3, [r7, #19]
      break;
 8011a10:	e000      	b.n	8011a14 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8011a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a14:	7cfb      	ldrb	r3, [r7, #19]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d10b      	bne.n	8011a32 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8011a1a:	4b52      	ldr	r3, [pc, #328]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a28:	494e      	ldr	r1, [pc, #312]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8011a30:	e001      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a32:	7cfb      	ldrb	r3, [r7, #19]
 8011a34:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f000 809f 	beq.w	8011b82 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011a44:	2300      	movs	r3, #0
 8011a46:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8011a48:	4b46      	ldr	r3, [pc, #280]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d101      	bne.n	8011a58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8011a54:	2301      	movs	r3, #1
 8011a56:	e000      	b.n	8011a5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00d      	beq.n	8011a7a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a5e:	4b41      	ldr	r3, [pc, #260]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a62:	4a40      	ldr	r2, [pc, #256]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a68:	6593      	str	r3, [r2, #88]	; 0x58
 8011a6a:	4b3e      	ldr	r3, [pc, #248]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a72:	60bb      	str	r3, [r7, #8]
 8011a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011a76:	2301      	movs	r3, #1
 8011a78:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a7a:	4b3b      	ldr	r3, [pc, #236]	; (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	4a3a      	ldr	r2, [pc, #232]	; (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a86:	f7fb f8eb 	bl	800cc60 <HAL_GetTick>
 8011a8a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011a8c:	e009      	b.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a8e:	f7fb f8e7 	bl	800cc60 <HAL_GetTick>
 8011a92:	4602      	mov	r2, r0
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	1ad3      	subs	r3, r2, r3
 8011a98:	2b02      	cmp	r3, #2
 8011a9a:	d902      	bls.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	74fb      	strb	r3, [r7, #19]
        break;
 8011aa0:	e005      	b.n	8011aae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011aa2:	4b31      	ldr	r3, [pc, #196]	; (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d0ef      	beq.n	8011a8e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8011aae:	7cfb      	ldrb	r3, [r7, #19]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d15b      	bne.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8011ab4:	4b2b      	ldr	r3, [pc, #172]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011abe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d01f      	beq.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011acc:	697a      	ldr	r2, [r7, #20]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d019      	beq.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011ad2:	4b24      	ldr	r3, [pc, #144]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011adc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011ade:	4b21      	ldr	r3, [pc, #132]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ae4:	4a1f      	ldr	r2, [pc, #124]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011aee:	4b1d      	ldr	r3, [pc, #116]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011af4:	4a1b      	ldr	r2, [pc, #108]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011afe:	4a19      	ldr	r2, [pc, #100]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	f003 0301 	and.w	r3, r3, #1
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d016      	beq.n	8011b3e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011b10:	f7fb f8a6 	bl	800cc60 <HAL_GetTick>
 8011b14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011b16:	e00b      	b.n	8011b30 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011b18:	f7fb f8a2 	bl	800cc60 <HAL_GetTick>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	1ad3      	subs	r3, r2, r3
 8011b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d902      	bls.n	8011b30 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	74fb      	strb	r3, [r7, #19]
            break;
 8011b2e:	e006      	b.n	8011b3e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011b30:	4b0c      	ldr	r3, [pc, #48]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b36:	f003 0302 	and.w	r3, r3, #2
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d0ec      	beq.n	8011b18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8011b3e:	7cfb      	ldrb	r3, [r7, #19]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d10c      	bne.n	8011b5e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011b44:	4b07      	ldr	r3, [pc, #28]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011b54:	4903      	ldr	r1, [pc, #12]	; (8011b64 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011b56:	4313      	orrs	r3, r2
 8011b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8011b5c:	e008      	b.n	8011b70 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011b5e:	7cfb      	ldrb	r3, [r7, #19]
 8011b60:	74bb      	strb	r3, [r7, #18]
 8011b62:	e005      	b.n	8011b70 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8011b64:	40021000 	.word	0x40021000
 8011b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b6c:	7cfb      	ldrb	r3, [r7, #19]
 8011b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011b70:	7c7b      	ldrb	r3, [r7, #17]
 8011b72:	2b01      	cmp	r3, #1
 8011b74:	d105      	bne.n	8011b82 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011b76:	4ba0      	ldr	r3, [pc, #640]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b7a:	4a9f      	ldr	r2, [pc, #636]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f003 0301 	and.w	r3, r3, #1
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00a      	beq.n	8011ba4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011b8e:	4b9a      	ldr	r3, [pc, #616]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b94:	f023 0203 	bic.w	r2, r3, #3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b9c:	4996      	ldr	r1, [pc, #600]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f003 0302 	and.w	r3, r3, #2
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d00a      	beq.n	8011bc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011bb0:	4b91      	ldr	r3, [pc, #580]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bb6:	f023 020c 	bic.w	r2, r3, #12
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bbe:	498e      	ldr	r1, [pc, #568]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f003 0304 	and.w	r3, r3, #4
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00a      	beq.n	8011be8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011bd2:	4b89      	ldr	r3, [pc, #548]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011be0:	4985      	ldr	r1, [pc, #532]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011be2:	4313      	orrs	r3, r2
 8011be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f003 0308 	and.w	r3, r3, #8
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00a      	beq.n	8011c0a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011bf4:	4b80      	ldr	r3, [pc, #512]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c02:	497d      	ldr	r1, [pc, #500]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c04:	4313      	orrs	r3, r2
 8011c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	f003 0310 	and.w	r3, r3, #16
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00a      	beq.n	8011c2c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011c16:	4b78      	ldr	r3, [pc, #480]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c24:	4974      	ldr	r1, [pc, #464]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c26:	4313      	orrs	r3, r2
 8011c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f003 0320 	and.w	r3, r3, #32
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d00a      	beq.n	8011c4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011c38:	4b6f      	ldr	r3, [pc, #444]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c46:	496c      	ldr	r1, [pc, #432]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c48:	4313      	orrs	r3, r2
 8011c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d00a      	beq.n	8011c70 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011c5a:	4b67      	ldr	r3, [pc, #412]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c68:	4963      	ldr	r1, [pc, #396]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c6a:	4313      	orrs	r3, r2
 8011c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d00a      	beq.n	8011c92 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011c7c:	4b5e      	ldr	r3, [pc, #376]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c8a:	495b      	ldr	r1, [pc, #364]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00a      	beq.n	8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011c9e:	4b56      	ldr	r3, [pc, #344]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ca4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cac:	4952      	ldr	r1, [pc, #328]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00a      	beq.n	8011cd6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011cc0:	4b4d      	ldr	r3, [pc, #308]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cce:	494a      	ldr	r1, [pc, #296]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00a      	beq.n	8011cf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011ce2:	4b45      	ldr	r3, [pc, #276]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ce8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011cf0:	4941      	ldr	r1, [pc, #260]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d00a      	beq.n	8011d1a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011d04:	4b3c      	ldr	r3, [pc, #240]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011d0a:	f023 0203 	bic.w	r2, r3, #3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d12:	4939      	ldr	r1, [pc, #228]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d14:	4313      	orrs	r3, r2
 8011d16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d028      	beq.n	8011d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011d26:	4b34      	ldr	r3, [pc, #208]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d34:	4930      	ldr	r1, [pc, #192]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d36:	4313      	orrs	r3, r2
 8011d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d44:	d106      	bne.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011d46:	4b2c      	ldr	r3, [pc, #176]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	4a2b      	ldr	r2, [pc, #172]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d50:	60d3      	str	r3, [r2, #12]
 8011d52:	e011      	b.n	8011d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d5c:	d10c      	bne.n	8011d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	3304      	adds	r3, #4
 8011d62:	2101      	movs	r1, #1
 8011d64:	4618      	mov	r0, r3
 8011d66:	f000 f935 	bl	8011fd4 <RCCEx_PLLSAI1_Config>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8011d6e:	7cfb      	ldrb	r3, [r7, #19]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d001      	beq.n	8011d78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8011d74:	7cfb      	ldrb	r3, [r7, #19]
 8011d76:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d04d      	beq.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d8c:	d108      	bne.n	8011da0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8011d8e:	4b1a      	ldr	r3, [pc, #104]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011d94:	4a18      	ldr	r2, [pc, #96]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011d9a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8011d9e:	e012      	b.n	8011dc6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8011da0:	4b15      	ldr	r3, [pc, #84]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011da6:	4a14      	ldr	r2, [pc, #80]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011dac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8011db0:	4b11      	ldr	r3, [pc, #68]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dbe:	490e      	ldr	r1, [pc, #56]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dc0:	4313      	orrs	r3, r2
 8011dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011dce:	d106      	bne.n	8011dde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011dd0:	4b09      	ldr	r3, [pc, #36]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	4a08      	ldr	r2, [pc, #32]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011dda:	60d3      	str	r3, [r2, #12]
 8011ddc:	e020      	b.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011de6:	d109      	bne.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011de8:	4b03      	ldr	r3, [pc, #12]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	4a02      	ldr	r2, [pc, #8]	; (8011df8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011df2:	60d3      	str	r3, [r2, #12]
 8011df4:	e014      	b.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8011df6:	bf00      	nop
 8011df8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011e04:	d10c      	bne.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	2101      	movs	r1, #1
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f000 f8e1 	bl	8011fd4 <RCCEx_PLLSAI1_Config>
 8011e12:	4603      	mov	r3, r0
 8011e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011e16:	7cfb      	ldrb	r3, [r7, #19]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d001      	beq.n	8011e20 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8011e1c:	7cfb      	ldrb	r3, [r7, #19]
 8011e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d028      	beq.n	8011e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011e2c:	4b68      	ldr	r3, [pc, #416]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e3a:	4965      	ldr	r1, [pc, #404]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e4a:	d106      	bne.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011e4c:	4b60      	ldr	r3, [pc, #384]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	4a5f      	ldr	r2, [pc, #380]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e56:	60d3      	str	r3, [r2, #12]
 8011e58:	e011      	b.n	8011e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011e62:	d10c      	bne.n	8011e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	3304      	adds	r3, #4
 8011e68:	2101      	movs	r1, #1
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f000 f8b2 	bl	8011fd4 <RCCEx_PLLSAI1_Config>
 8011e70:	4603      	mov	r3, r0
 8011e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011e74:	7cfb      	ldrb	r3, [r7, #19]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d001      	beq.n	8011e7e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8011e7a:	7cfb      	ldrb	r3, [r7, #19]
 8011e7c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d01e      	beq.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011e8a:	4b51      	ldr	r3, [pc, #324]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e9a:	494d      	ldr	r1, [pc, #308]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e9c:	4313      	orrs	r3, r2
 8011e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011eac:	d10c      	bne.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	3304      	adds	r3, #4
 8011eb2:	2102      	movs	r1, #2
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f000 f88d 	bl	8011fd4 <RCCEx_PLLSAI1_Config>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011ebe:	7cfb      	ldrb	r3, [r7, #19]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d001      	beq.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8011ec4:	7cfb      	ldrb	r3, [r7, #19]
 8011ec6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00b      	beq.n	8011eec <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011ed4:	4b3e      	ldr	r3, [pc, #248]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011eda:	f023 0204 	bic.w	r2, r3, #4
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ee4:	493a      	ldr	r1, [pc, #232]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d00b      	beq.n	8011f10 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8011ef8:	4b35      	ldr	r3, [pc, #212]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011efe:	f023 0218 	bic.w	r2, r3, #24
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f08:	4931      	ldr	r1, [pc, #196]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d035      	beq.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8011f1c:	4b2c      	ldr	r3, [pc, #176]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4a2b      	ldr	r2, [pc, #172]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f28:	f7fa fe9a 	bl	800cc60 <HAL_GetTick>
 8011f2c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011f2e:	e009      	b.n	8011f44 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011f30:	f7fa fe96 	bl	800cc60 <HAL_GetTick>
 8011f34:	4602      	mov	r2, r0
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	1ad3      	subs	r3, r2, r3
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d902      	bls.n	8011f44 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8011f3e:	2303      	movs	r3, #3
 8011f40:	74fb      	strb	r3, [r7, #19]
        break;
 8011f42:	e005      	b.n	8011f50 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011f44:	4b22      	ldr	r3, [pc, #136]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d1ef      	bne.n	8011f30 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8011f50:	7cfb      	ldrb	r3, [r7, #19]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d113      	bne.n	8011f7e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8011f56:	4b1e      	ldr	r3, [pc, #120]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f66:	491a      	ldr	r1, [pc, #104]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	3320      	adds	r3, #32
 8011f72:	2102      	movs	r1, #2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f000 f921 	bl	80121bc <RCCEx_PLLSAI2_Config>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8011f7e:	7cfb      	ldrb	r3, [r7, #19]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d001      	beq.n	8011f88 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8011f84:	7cfb      	ldrb	r3, [r7, #19]
 8011f86:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d017      	beq.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011f94:	4b0e      	ldr	r3, [pc, #56]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fa4:	490a      	ldr	r1, [pc, #40]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011fb6:	d105      	bne.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011fb8:	4b05      	ldr	r3, [pc, #20]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	4a04      	ldr	r2, [pc, #16]	; (8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011fc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3718      	adds	r7, #24
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	40021000 	.word	0x40021000

08011fd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011fe2:	4b72      	ldr	r3, [pc, #456]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	f003 0303 	and.w	r3, r3, #3
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d00e      	beq.n	801200c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8011fee:	4b6f      	ldr	r3, [pc, #444]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	f003 0203 	and.w	r2, r3, #3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d103      	bne.n	8012006 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
       ||
 8012002:	2b00      	cmp	r3, #0
 8012004:	d142      	bne.n	801208c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8012006:	2301      	movs	r3, #1
 8012008:	73fb      	strb	r3, [r7, #15]
 801200a:	e03f      	b.n	801208c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b03      	cmp	r3, #3
 8012012:	d018      	beq.n	8012046 <RCCEx_PLLSAI1_Config+0x72>
 8012014:	2b03      	cmp	r3, #3
 8012016:	d825      	bhi.n	8012064 <RCCEx_PLLSAI1_Config+0x90>
 8012018:	2b01      	cmp	r3, #1
 801201a:	d002      	beq.n	8012022 <RCCEx_PLLSAI1_Config+0x4e>
 801201c:	2b02      	cmp	r3, #2
 801201e:	d009      	beq.n	8012034 <RCCEx_PLLSAI1_Config+0x60>
 8012020:	e020      	b.n	8012064 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8012022:	4b62      	ldr	r3, [pc, #392]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f003 0302 	and.w	r3, r3, #2
 801202a:	2b00      	cmp	r3, #0
 801202c:	d11d      	bne.n	801206a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 801202e:	2301      	movs	r3, #1
 8012030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012032:	e01a      	b.n	801206a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012034:	4b5d      	ldr	r3, [pc, #372]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801203c:	2b00      	cmp	r3, #0
 801203e:	d116      	bne.n	801206e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8012040:	2301      	movs	r3, #1
 8012042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012044:	e013      	b.n	801206e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012046:	4b59      	ldr	r3, [pc, #356]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801204e:	2b00      	cmp	r3, #0
 8012050:	d10f      	bne.n	8012072 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012052:	4b56      	ldr	r3, [pc, #344]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801205a:	2b00      	cmp	r3, #0
 801205c:	d109      	bne.n	8012072 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 801205e:	2301      	movs	r3, #1
 8012060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012062:	e006      	b.n	8012072 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8012064:	2301      	movs	r3, #1
 8012066:	73fb      	strb	r3, [r7, #15]
      break;
 8012068:	e004      	b.n	8012074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 801206a:	bf00      	nop
 801206c:	e002      	b.n	8012074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 801206e:	bf00      	nop
 8012070:	e000      	b.n	8012074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8012072:	bf00      	nop
    }

    if(status == HAL_OK)
 8012074:	7bfb      	ldrb	r3, [r7, #15]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d108      	bne.n	801208c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 801207a:	4b4c      	ldr	r3, [pc, #304]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	f023 0203 	bic.w	r2, r3, #3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4949      	ldr	r1, [pc, #292]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012088:	4313      	orrs	r3, r2
 801208a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 801208c:	7bfb      	ldrb	r3, [r7, #15]
 801208e:	2b00      	cmp	r3, #0
 8012090:	f040 8086 	bne.w	80121a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012094:	4b45      	ldr	r3, [pc, #276]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	4a44      	ldr	r2, [pc, #272]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 801209a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801209e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80120a0:	f7fa fdde 	bl	800cc60 <HAL_GetTick>
 80120a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80120a6:	e009      	b.n	80120bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80120a8:	f7fa fdda 	bl	800cc60 <HAL_GetTick>
 80120ac:	4602      	mov	r2, r0
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	2b02      	cmp	r3, #2
 80120b4:	d902      	bls.n	80120bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80120b6:	2303      	movs	r3, #3
 80120b8:	73fb      	strb	r3, [r7, #15]
        break;
 80120ba:	e005      	b.n	80120c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80120bc:	4b3b      	ldr	r3, [pc, #236]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d1ef      	bne.n	80120a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80120c8:	7bfb      	ldrb	r3, [r7, #15]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d168      	bne.n	80121a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d113      	bne.n	80120fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80120d4:	4b35      	ldr	r3, [pc, #212]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80120d6:	691a      	ldr	r2, [r3, #16]
 80120d8:	4b35      	ldr	r3, [pc, #212]	; (80121b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80120da:	4013      	ands	r3, r2
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	6892      	ldr	r2, [r2, #8]
 80120e0:	0211      	lsls	r1, r2, #8
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	68d2      	ldr	r2, [r2, #12]
 80120e6:	06d2      	lsls	r2, r2, #27
 80120e8:	4311      	orrs	r1, r2
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	6852      	ldr	r2, [r2, #4]
 80120ee:	3a01      	subs	r2, #1
 80120f0:	0112      	lsls	r2, r2, #4
 80120f2:	430a      	orrs	r2, r1
 80120f4:	492d      	ldr	r1, [pc, #180]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80120f6:	4313      	orrs	r3, r2
 80120f8:	610b      	str	r3, [r1, #16]
 80120fa:	e02d      	b.n	8012158 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d115      	bne.n	801212e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012102:	4b2a      	ldr	r3, [pc, #168]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012104:	691a      	ldr	r2, [r3, #16]
 8012106:	4b2b      	ldr	r3, [pc, #172]	; (80121b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012108:	4013      	ands	r3, r2
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	6892      	ldr	r2, [r2, #8]
 801210e:	0211      	lsls	r1, r2, #8
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	6912      	ldr	r2, [r2, #16]
 8012114:	0852      	lsrs	r2, r2, #1
 8012116:	3a01      	subs	r2, #1
 8012118:	0552      	lsls	r2, r2, #21
 801211a:	4311      	orrs	r1, r2
 801211c:	687a      	ldr	r2, [r7, #4]
 801211e:	6852      	ldr	r2, [r2, #4]
 8012120:	3a01      	subs	r2, #1
 8012122:	0112      	lsls	r2, r2, #4
 8012124:	430a      	orrs	r2, r1
 8012126:	4921      	ldr	r1, [pc, #132]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012128:	4313      	orrs	r3, r2
 801212a:	610b      	str	r3, [r1, #16]
 801212c:	e014      	b.n	8012158 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801212e:	4b1f      	ldr	r3, [pc, #124]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012130:	691a      	ldr	r2, [r3, #16]
 8012132:	4b21      	ldr	r3, [pc, #132]	; (80121b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8012134:	4013      	ands	r3, r2
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	6892      	ldr	r2, [r2, #8]
 801213a:	0211      	lsls	r1, r2, #8
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	6952      	ldr	r2, [r2, #20]
 8012140:	0852      	lsrs	r2, r2, #1
 8012142:	3a01      	subs	r2, #1
 8012144:	0652      	lsls	r2, r2, #25
 8012146:	4311      	orrs	r1, r2
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	6852      	ldr	r2, [r2, #4]
 801214c:	3a01      	subs	r2, #1
 801214e:	0112      	lsls	r2, r2, #4
 8012150:	430a      	orrs	r2, r1
 8012152:	4916      	ldr	r1, [pc, #88]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012154:	4313      	orrs	r3, r2
 8012156:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012158:	4b14      	ldr	r3, [pc, #80]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	4a13      	ldr	r2, [pc, #76]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 801215e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012162:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012164:	f7fa fd7c 	bl	800cc60 <HAL_GetTick>
 8012168:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801216a:	e009      	b.n	8012180 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801216c:	f7fa fd78 	bl	800cc60 <HAL_GetTick>
 8012170:	4602      	mov	r2, r0
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	2b02      	cmp	r3, #2
 8012178:	d902      	bls.n	8012180 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 801217a:	2303      	movs	r3, #3
 801217c:	73fb      	strb	r3, [r7, #15]
          break;
 801217e:	e005      	b.n	801218c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012180:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012188:	2b00      	cmp	r3, #0
 801218a:	d0ef      	beq.n	801216c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 801218c:	7bfb      	ldrb	r3, [r7, #15]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d106      	bne.n	80121a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012192:	4b06      	ldr	r3, [pc, #24]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8012194:	691a      	ldr	r2, [r3, #16]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	699b      	ldr	r3, [r3, #24]
 801219a:	4904      	ldr	r1, [pc, #16]	; (80121ac <RCCEx_PLLSAI1_Config+0x1d8>)
 801219c:	4313      	orrs	r3, r2
 801219e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80121a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	40021000 	.word	0x40021000
 80121b0:	07ff800f 	.word	0x07ff800f
 80121b4:	ff9f800f 	.word	0xff9f800f
 80121b8:	f9ff800f 	.word	0xf9ff800f

080121bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80121c6:	2300      	movs	r3, #0
 80121c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80121ca:	4b72      	ldr	r3, [pc, #456]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80121cc:	68db      	ldr	r3, [r3, #12]
 80121ce:	f003 0303 	and.w	r3, r3, #3
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d00e      	beq.n	80121f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80121d6:	4b6f      	ldr	r3, [pc, #444]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	f003 0203 	and.w	r2, r3, #3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d103      	bne.n	80121ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
       ||
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d142      	bne.n	8012274 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80121ee:	2301      	movs	r3, #1
 80121f0:	73fb      	strb	r3, [r7, #15]
 80121f2:	e03f      	b.n	8012274 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2b03      	cmp	r3, #3
 80121fa:	d018      	beq.n	801222e <RCCEx_PLLSAI2_Config+0x72>
 80121fc:	2b03      	cmp	r3, #3
 80121fe:	d825      	bhi.n	801224c <RCCEx_PLLSAI2_Config+0x90>
 8012200:	2b01      	cmp	r3, #1
 8012202:	d002      	beq.n	801220a <RCCEx_PLLSAI2_Config+0x4e>
 8012204:	2b02      	cmp	r3, #2
 8012206:	d009      	beq.n	801221c <RCCEx_PLLSAI2_Config+0x60>
 8012208:	e020      	b.n	801224c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801220a:	4b62      	ldr	r3, [pc, #392]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f003 0302 	and.w	r3, r3, #2
 8012212:	2b00      	cmp	r3, #0
 8012214:	d11d      	bne.n	8012252 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8012216:	2301      	movs	r3, #1
 8012218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801221a:	e01a      	b.n	8012252 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801221c:	4b5d      	ldr	r3, [pc, #372]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012224:	2b00      	cmp	r3, #0
 8012226:	d116      	bne.n	8012256 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8012228:	2301      	movs	r3, #1
 801222a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801222c:	e013      	b.n	8012256 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801222e:	4b59      	ldr	r3, [pc, #356]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012236:	2b00      	cmp	r3, #0
 8012238:	d10f      	bne.n	801225a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801223a:	4b56      	ldr	r3, [pc, #344]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012242:	2b00      	cmp	r3, #0
 8012244:	d109      	bne.n	801225a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8012246:	2301      	movs	r3, #1
 8012248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801224a:	e006      	b.n	801225a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 801224c:	2301      	movs	r3, #1
 801224e:	73fb      	strb	r3, [r7, #15]
      break;
 8012250:	e004      	b.n	801225c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8012252:	bf00      	nop
 8012254:	e002      	b.n	801225c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8012256:	bf00      	nop
 8012258:	e000      	b.n	801225c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 801225a:	bf00      	nop
    }

    if(status == HAL_OK)
 801225c:	7bfb      	ldrb	r3, [r7, #15]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d108      	bne.n	8012274 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8012262:	4b4c      	ldr	r3, [pc, #304]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	f023 0203 	bic.w	r2, r3, #3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	4949      	ldr	r1, [pc, #292]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012270:	4313      	orrs	r3, r2
 8012272:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8012274:	7bfb      	ldrb	r3, [r7, #15]
 8012276:	2b00      	cmp	r3, #0
 8012278:	f040 8086 	bne.w	8012388 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801227c:	4b45      	ldr	r3, [pc, #276]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4a44      	ldr	r2, [pc, #272]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012288:	f7fa fcea 	bl	800cc60 <HAL_GetTick>
 801228c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801228e:	e009      	b.n	80122a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012290:	f7fa fce6 	bl	800cc60 <HAL_GetTick>
 8012294:	4602      	mov	r2, r0
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	2b02      	cmp	r3, #2
 801229c:	d902      	bls.n	80122a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 801229e:	2303      	movs	r3, #3
 80122a0:	73fb      	strb	r3, [r7, #15]
        break;
 80122a2:	e005      	b.n	80122b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80122a4:	4b3b      	ldr	r3, [pc, #236]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1ef      	bne.n	8012290 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80122b0:	7bfb      	ldrb	r3, [r7, #15]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d168      	bne.n	8012388 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d113      	bne.n	80122e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80122bc:	4b35      	ldr	r3, [pc, #212]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122be:	695a      	ldr	r2, [r3, #20]
 80122c0:	4b35      	ldr	r3, [pc, #212]	; (8012398 <RCCEx_PLLSAI2_Config+0x1dc>)
 80122c2:	4013      	ands	r3, r2
 80122c4:	687a      	ldr	r2, [r7, #4]
 80122c6:	6892      	ldr	r2, [r2, #8]
 80122c8:	0211      	lsls	r1, r2, #8
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	68d2      	ldr	r2, [r2, #12]
 80122ce:	06d2      	lsls	r2, r2, #27
 80122d0:	4311      	orrs	r1, r2
 80122d2:	687a      	ldr	r2, [r7, #4]
 80122d4:	6852      	ldr	r2, [r2, #4]
 80122d6:	3a01      	subs	r2, #1
 80122d8:	0112      	lsls	r2, r2, #4
 80122da:	430a      	orrs	r2, r1
 80122dc:	492d      	ldr	r1, [pc, #180]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122de:	4313      	orrs	r3, r2
 80122e0:	614b      	str	r3, [r1, #20]
 80122e2:	e02d      	b.n	8012340 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	d115      	bne.n	8012316 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80122ea:	4b2a      	ldr	r3, [pc, #168]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122ec:	695a      	ldr	r2, [r3, #20]
 80122ee:	4b2b      	ldr	r3, [pc, #172]	; (801239c <RCCEx_PLLSAI2_Config+0x1e0>)
 80122f0:	4013      	ands	r3, r2
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	6892      	ldr	r2, [r2, #8]
 80122f6:	0211      	lsls	r1, r2, #8
 80122f8:	687a      	ldr	r2, [r7, #4]
 80122fa:	6912      	ldr	r2, [r2, #16]
 80122fc:	0852      	lsrs	r2, r2, #1
 80122fe:	3a01      	subs	r2, #1
 8012300:	0552      	lsls	r2, r2, #21
 8012302:	4311      	orrs	r1, r2
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	6852      	ldr	r2, [r2, #4]
 8012308:	3a01      	subs	r2, #1
 801230a:	0112      	lsls	r2, r2, #4
 801230c:	430a      	orrs	r2, r1
 801230e:	4921      	ldr	r1, [pc, #132]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012310:	4313      	orrs	r3, r2
 8012312:	614b      	str	r3, [r1, #20]
 8012314:	e014      	b.n	8012340 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012316:	4b1f      	ldr	r3, [pc, #124]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012318:	695a      	ldr	r2, [r3, #20]
 801231a:	4b21      	ldr	r3, [pc, #132]	; (80123a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 801231c:	4013      	ands	r3, r2
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	6892      	ldr	r2, [r2, #8]
 8012322:	0211      	lsls	r1, r2, #8
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	6952      	ldr	r2, [r2, #20]
 8012328:	0852      	lsrs	r2, r2, #1
 801232a:	3a01      	subs	r2, #1
 801232c:	0652      	lsls	r2, r2, #25
 801232e:	4311      	orrs	r1, r2
 8012330:	687a      	ldr	r2, [r7, #4]
 8012332:	6852      	ldr	r2, [r2, #4]
 8012334:	3a01      	subs	r2, #1
 8012336:	0112      	lsls	r2, r2, #4
 8012338:	430a      	orrs	r2, r1
 801233a:	4916      	ldr	r1, [pc, #88]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 801233c:	4313      	orrs	r3, r2
 801233e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8012340:	4b14      	ldr	r3, [pc, #80]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4a13      	ldr	r2, [pc, #76]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801234a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801234c:	f7fa fc88 	bl	800cc60 <HAL_GetTick>
 8012350:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012352:	e009      	b.n	8012368 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012354:	f7fa fc84 	bl	800cc60 <HAL_GetTick>
 8012358:	4602      	mov	r2, r0
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	2b02      	cmp	r3, #2
 8012360:	d902      	bls.n	8012368 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8012362:	2303      	movs	r3, #3
 8012364:	73fb      	strb	r3, [r7, #15]
          break;
 8012366:	e005      	b.n	8012374 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012368:	4b0a      	ldr	r3, [pc, #40]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012370:	2b00      	cmp	r3, #0
 8012372:	d0ef      	beq.n	8012354 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8012374:	7bfb      	ldrb	r3, [r7, #15]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d106      	bne.n	8012388 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801237a:	4b06      	ldr	r3, [pc, #24]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 801237c:	695a      	ldr	r2, [r3, #20]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	699b      	ldr	r3, [r3, #24]
 8012382:	4904      	ldr	r1, [pc, #16]	; (8012394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012384:	4313      	orrs	r3, r2
 8012386:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012388:	7bfb      	ldrb	r3, [r7, #15]
}
 801238a:	4618      	mov	r0, r3
 801238c:	3710      	adds	r7, #16
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	40021000 	.word	0x40021000
 8012398:	07ff800f 	.word	0x07ff800f
 801239c:	ff9f800f 	.word	0xff9f800f
 80123a0:	f9ff800f 	.word	0xf9ff800f

080123a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d101      	bne.n	80123b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80123b2:	2301      	movs	r3, #1
 80123b4:	e096      	b.n	80124e4 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	7a5b      	ldrb	r3, [r3, #9]
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d105      	bne.n	80123cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7f7 ffc8 	bl	800a35c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2202      	movs	r2, #2
 80123d0:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	681a      	ldr	r2, [r3, #0]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f022 0204 	bic.w	r2, r2, #4
 80123e0:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 80123e2:	4b42      	ldr	r3, [pc, #264]	; (80124ec <HAL_RNG_Init+0x148>)
 80123e4:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	4b40      	ldr	r3, [pc, #256]	; (80124f0 <HAL_RNG_Init+0x14c>)
 80123ee:	4013      	ands	r3, r2
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	6851      	ldr	r1, [r2, #4]
 80123f4:	68fa      	ldr	r2, [r7, #12]
 80123f6:	430a      	orrs	r2, r1
 80123f8:	431a      	orrs	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012402:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4a3a      	ldr	r2, [pc, #232]	; (80124f4 <HAL_RNG_Init+0x150>)
 801240a:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f64a 2274 	movw	r2, #43636	; 0xaa74
 8012414:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8012424:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012426:	f7fa fc1b 	bl	800cc60 <HAL_GetTick>
 801242a:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801242c:	e016      	b.n	801245c <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 801242e:	f7fa fc17 	bl	800cc60 <HAL_GetTick>
 8012432:	4602      	mov	r2, r0
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	1ad3      	subs	r3, r2, r3
 8012438:	2b02      	cmp	r3, #2
 801243a:	d90f      	bls.n	801245c <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801244a:	d107      	bne.n	801245c <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2201      	movs	r2, #1
 8012450:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2202      	movs	r2, #2
 8012456:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8012458:	2301      	movs	r3, #1
 801245a:	e043      	b.n	80124e4 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801246a:	d0e0      	beq.n	801242e <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	681a      	ldr	r2, [r3, #0]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	f042 0204 	orr.w	r2, r2, #4
 801247a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	685b      	ldr	r3, [r3, #4]
 8012482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012486:	2b40      	cmp	r3, #64	; 0x40
 8012488:	d104      	bne.n	8012494 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2204      	movs	r2, #4
 801248e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8012490:	2301      	movs	r3, #1
 8012492:	e027      	b.n	80124e4 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8012494:	f7fa fbe4 	bl	800cc60 <HAL_GetTick>
 8012498:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801249a:	e015      	b.n	80124c8 <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801249c:	f7fa fbe0 	bl	800cc60 <HAL_GetTick>
 80124a0:	4602      	mov	r2, r0
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	1ad3      	subs	r3, r2, r3
 80124a6:	2b02      	cmp	r3, #2
 80124a8:	d90e      	bls.n	80124c8 <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	f003 0304 	and.w	r3, r3, #4
 80124b4:	2b04      	cmp	r3, #4
 80124b6:	d107      	bne.n	80124c8 <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2204      	movs	r2, #4
 80124bc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2202      	movs	r2, #2
 80124c2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80124c4:	2301      	movs	r3, #1
 80124c6:	e00d      	b.n	80124e4 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	685b      	ldr	r3, [r3, #4]
 80124ce:	f003 0304 	and.w	r3, r3, #4
 80124d2:	2b04      	cmp	r3, #4
 80124d4:	d0e2      	beq.n	801249c <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2201      	movs	r2, #1
 80124da:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2200      	movs	r2, #0
 80124e0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80124e2:	2300      	movs	r3, #0
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	00f00d00 	.word	0x00f00d00
 80124f0:	bc0f10df 	.word	0xbc0f10df
 80124f4:	17590abc 	.word	0x17590abc

080124f8 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;
#endif
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d101      	bne.n	801250a <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 8012506:	2301      	movs	r3, #1
 8012508:	e056      	b.n	80125b8 <HAL_RNG_DeInit+0xc0>
  }

#if defined(RNG_CR_CONDRST)
  /* Clear Clock Error Detection bit when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, RNG_CED_ENABLE | RNG_CR_CONDRST);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012514:	f023 0320 	bic.w	r3, r3, #32
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	6812      	ldr	r2, [r2, #0]
 801251c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012520:	6013      	str	r3, [r2, #0]

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8012530:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012532:	f7fa fb95 	bl	800cc60 <HAL_GetTick>
 8012536:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012538:	e019      	b.n	801256e <HAL_RNG_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 801253a:	f7fa fb91 	bl	800cc60 <HAL_GetTick>
 801253e:	4602      	mov	r2, r0
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	2b02      	cmp	r3, #2
 8012546:	d912      	bls.n	801256e <HAL_RNG_DeInit+0x76>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012556:	d10a      	bne.n	801256e <HAL_RNG_DeInit+0x76>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2201      	movs	r2, #1
 801255c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2202      	movs	r2, #2
 8012562:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2200      	movs	r2, #0
 8012568:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 801256a:	2301      	movs	r3, #1
 801256c:	e024      	b.n	80125b8 <HAL_RNG_DeInit+0xc0>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801257c:	d0dd      	beq.n	801253a <HAL_RNG_DeInit+0x42>
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	f022 020c 	bic.w	r2, r2, #12
 801258c:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	685a      	ldr	r2, [r3, #4]
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801259c:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7f7 fefc 	bl	800a39c <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2200      	movs	r2, #0
 80125a8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2200      	movs	r2, #0
 80125ae:	60da      	str	r2, [r3, #12]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2200      	movs	r2, #0
 80125b4:	721a      	strb	r2, [r3, #8]

  /* Return the function status */
  return HAL_OK;
 80125b6:	2300      	movs	r3, #0
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80125ca:	2300      	movs	r3, #0
 80125cc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	7a1b      	ldrb	r3, [r3, #8]
 80125d2:	2b01      	cmp	r3, #1
 80125d4:	d101      	bne.n	80125da <HAL_RNG_GenerateRandomNumber+0x1a>
 80125d6:	2302      	movs	r3, #2
 80125d8:	e03d      	b.n	8012656 <HAL_RNG_GenerateRandomNumber+0x96>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2201      	movs	r2, #1
 80125de:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	7a5b      	ldrb	r3, [r3, #9]
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d12c      	bne.n	8012644 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2202      	movs	r2, #2
 80125ee:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80125f0:	f7fa fb36 	bl	800cc60 <HAL_GetTick>
 80125f4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80125f6:	e011      	b.n	801261c <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80125f8:	f7fa fb32 	bl	800cc60 <HAL_GetTick>
 80125fc:	4602      	mov	r2, r0
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	1ad3      	subs	r3, r2, r3
 8012602:	2b02      	cmp	r3, #2
 8012604:	d90a      	bls.n	801261c <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2201      	movs	r2, #1
 801260a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2202      	movs	r2, #2
 8012610:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2200      	movs	r2, #0
 8012616:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8012618:	2301      	movs	r3, #1
 801261a:	e01c      	b.n	8012656 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	f003 0301 	and.w	r3, r3, #1
 8012626:	2b01      	cmp	r3, #1
 8012628:	d1e6      	bne.n	80125f8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	689a      	ldr	r2, [r3, #8]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	691a      	ldr	r2, [r3, #16]
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2201      	movs	r2, #1
 8012640:	725a      	strb	r2, [r3, #9]
 8012642:	e004      	b.n	801264e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2204      	movs	r2, #4
 8012648:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 801264a:	2301      	movs	r3, #1
 801264c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2200      	movs	r2, #0
 8012652:	721a      	strb	r2, [r3, #8]

  return status;
 8012654:	7bfb      	ldrb	r3, [r7, #15]
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
	...

08012660 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012668:	2301      	movs	r3, #1
 801266a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d07f      	beq.n	8012772 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012678:	b2db      	uxtb	r3, r3
 801267a:	2b00      	cmp	r3, #0
 801267c:	d106      	bne.n	801268c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2200      	movs	r2, #0
 8012682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7f7 ff42 	bl	800a510 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8012692:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2202      	movs	r2, #2
 8012698:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	22ca      	movs	r2, #202	; 0xca
 80126a2:	625a      	str	r2, [r3, #36]	; 0x24
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2253      	movs	r2, #83	; 0x53
 80126aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 fbed 	bl	8012e8c <RTC_EnterInitMode>
 80126b2:	4603      	mov	r3, r0
 80126b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80126b6:	7bfb      	ldrb	r3, [r7, #15]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d15a      	bne.n	8012772 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	699b      	ldr	r3, [r3, #24]
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	6812      	ldr	r2, [r2, #0]
 80126c6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80126ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126ce:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	6999      	ldr	r1, [r3, #24]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	689a      	ldr	r2, [r3, #8]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	695b      	ldr	r3, [r3, #20]
 80126de:	431a      	orrs	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	69db      	ldr	r3, [r3, #28]
 80126e4:	431a      	orrs	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	430a      	orrs	r2, r1
 80126ec:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	6912      	ldr	r2, [r2, #16]
 80126f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	6919      	ldr	r1, [r3, #16]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	041a      	lsls	r2, r3, #16
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	430a      	orrs	r2, r1
 801270a:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 801270c:	4b1b      	ldr	r3, [pc, #108]	; (801277c <HAL_RTC_Init+0x11c>)
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801271c:	430b      	orrs	r3, r1
 801271e:	4917      	ldr	r1, [pc, #92]	; (801277c <HAL_RTC_Init+0x11c>)
 8012720:	4313      	orrs	r3, r2
 8012722:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f000 fbe7 	bl	8012ef8 <RTC_ExitInitMode>
 801272a:	4603      	mov	r3, r0
 801272c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801272e:	7bfb      	ldrb	r3, [r7, #15]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d11e      	bne.n	8012772 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	699a      	ldr	r2, [r3, #24]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8012742:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	6999      	ldr	r1, [r3, #24]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6a1b      	ldr	r3, [r3, #32]
 8012752:	431a      	orrs	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	699b      	ldr	r3, [r3, #24]
 8012758:	431a      	orrs	r2, r3
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	430a      	orrs	r2, r1
 8012760:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	22ff      	movs	r2, #255	; 0xff
 8012768:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2201      	movs	r2, #1
 801276e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8012772:	7bfb      	ldrb	r3, [r7, #15]
}
 8012774:	4618      	mov	r0, r3
 8012776:	3710      	adds	r7, #16
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}
 801277c:	40002800 	.word	0x40002800

08012780 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012780:	b590      	push	{r4, r7, lr}
 8012782:	b087      	sub	sp, #28
 8012784:	af00      	add	r7, sp, #0
 8012786:	60f8      	str	r0, [r7, #12]
 8012788:	60b9      	str	r1, [r7, #8]
 801278a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012792:	2b01      	cmp	r3, #1
 8012794:	d101      	bne.n	801279a <HAL_RTC_SetTime+0x1a>
 8012796:	2302      	movs	r3, #2
 8012798:	e08b      	b.n	80128b2 <HAL_RTC_SetTime+0x132>
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	2201      	movs	r2, #1
 801279e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2202      	movs	r2, #2
 80127a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	22ca      	movs	r2, #202	; 0xca
 80127b0:	625a      	str	r2, [r3, #36]	; 0x24
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2253      	movs	r2, #83	; 0x53
 80127b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80127ba:	68f8      	ldr	r0, [r7, #12]
 80127bc:	f000 fb66 	bl	8012e8c <RTC_EnterInitMode>
 80127c0:	4603      	mov	r3, r0
 80127c2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80127c4:	7cfb      	ldrb	r3, [r7, #19]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d15e      	bne.n	8012888 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80127ca:	4b3c      	ldr	r3, [pc, #240]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80127d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127d6:	d057      	beq.n	8012888 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d125      	bne.n	801282a <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80127de:	4b37      	ldr	r3, [pc, #220]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 80127e0:	699b      	ldr	r3, [r3, #24]
 80127e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d102      	bne.n	80127f0 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	2200      	movs	r2, #0
 80127ee:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f000 fbbd 	bl	8012f74 <RTC_ByteToBcd2>
 80127fa:	4603      	mov	r3, r0
 80127fc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	785b      	ldrb	r3, [r3, #1]
 8012802:	4618      	mov	r0, r3
 8012804:	f000 fbb6 	bl	8012f74 <RTC_ByteToBcd2>
 8012808:	4603      	mov	r3, r0
 801280a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801280c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	789b      	ldrb	r3, [r3, #2]
 8012812:	4618      	mov	r0, r3
 8012814:	f000 fbae 	bl	8012f74 <RTC_ByteToBcd2>
 8012818:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801281a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	78db      	ldrb	r3, [r3, #3]
 8012822:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012824:	4313      	orrs	r3, r2
 8012826:	617b      	str	r3, [r7, #20]
 8012828:	e017      	b.n	801285a <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 801282a:	4b24      	ldr	r3, [pc, #144]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 801282c:	699b      	ldr	r3, [r3, #24]
 801282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012832:	2b00      	cmp	r3, #0
 8012834:	d102      	bne.n	801283c <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	2200      	movs	r2, #0
 801283a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	785b      	ldrb	r3, [r3, #1]
 8012846:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012848:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801284a:	68ba      	ldr	r2, [r7, #8]
 801284c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801284e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	78db      	ldrb	r3, [r3, #3]
 8012854:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012856:	4313      	orrs	r3, r2
 8012858:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 801285a:	4a18      	ldr	r2, [pc, #96]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8012862:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012866:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8012868:	4b14      	ldr	r3, [pc, #80]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 801286a:	699b      	ldr	r3, [r3, #24]
 801286c:	4a13      	ldr	r2, [pc, #76]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 801286e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012872:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8012874:	4b11      	ldr	r3, [pc, #68]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 8012876:	699a      	ldr	r2, [r3, #24]
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	68d9      	ldr	r1, [r3, #12]
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	691b      	ldr	r3, [r3, #16]
 8012880:	430b      	orrs	r3, r1
 8012882:	490e      	ldr	r1, [pc, #56]	; (80128bc <HAL_RTC_SetTime+0x13c>)
 8012884:	4313      	orrs	r3, r2
 8012886:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8012888:	68f8      	ldr	r0, [r7, #12]
 801288a:	f000 fb35 	bl	8012ef8 <RTC_ExitInitMode>
 801288e:	4603      	mov	r3, r0
 8012890:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	22ff      	movs	r2, #255	; 0xff
 8012898:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801289a:	7cfb      	ldrb	r3, [r7, #19]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d103      	bne.n	80128a8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2201      	movs	r2, #1
 80128a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80128b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	371c      	adds	r7, #28
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd90      	pop	{r4, r7, pc}
 80128ba:	bf00      	nop
 80128bc:	40002800 	.word	0x40002800

080128c0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b086      	sub	sp, #24
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	60b9      	str	r1, [r7, #8]
 80128ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80128cc:	4b2c      	ldr	r3, [pc, #176]	; (8012980 <HAL_RTC_GetTime+0xc0>)
 80128ce:	689a      	ldr	r2, [r3, #8]
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80128d4:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <HAL_RTC_GetTime+0xc0>)
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80128dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80128e0:	d049      	beq.n	8012976 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80128e2:	4b27      	ldr	r3, [pc, #156]	; (8012980 <HAL_RTC_GetTime+0xc0>)
 80128e4:	691b      	ldr	r3, [r3, #16]
 80128e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80128ee:	4b24      	ldr	r3, [pc, #144]	; (8012980 <HAL_RTC_GetTime+0xc0>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80128f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80128fa:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	0c1b      	lsrs	r3, r3, #16
 8012900:	b2db      	uxtb	r3, r3
 8012902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012906:	b2da      	uxtb	r2, r3
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	0a1b      	lsrs	r3, r3, #8
 8012910:	b2db      	uxtb	r3, r3
 8012912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012916:	b2da      	uxtb	r2, r3
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	b2db      	uxtb	r3, r3
 8012920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012924:	b2da      	uxtb	r2, r3
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	0d9b      	lsrs	r3, r3, #22
 801292e:	b2db      	uxtb	r3, r3
 8012930:	f003 0301 	and.w	r3, r3, #1
 8012934:	b2da      	uxtb	r2, r3
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d11a      	bne.n	8012976 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	4618      	mov	r0, r3
 8012946:	f000 fb35 	bl	8012fb4 <RTC_Bcd2ToByte>
 801294a:	4603      	mov	r3, r0
 801294c:	461a      	mov	r2, r3
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	785b      	ldrb	r3, [r3, #1]
 8012956:	4618      	mov	r0, r3
 8012958:	f000 fb2c 	bl	8012fb4 <RTC_Bcd2ToByte>
 801295c:	4603      	mov	r3, r0
 801295e:	461a      	mov	r2, r3
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	789b      	ldrb	r3, [r3, #2]
 8012968:	4618      	mov	r0, r3
 801296a:	f000 fb23 	bl	8012fb4 <RTC_Bcd2ToByte>
 801296e:	4603      	mov	r3, r0
 8012970:	461a      	mov	r2, r3
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8012976:	2300      	movs	r3, #0
}
 8012978:	4618      	mov	r0, r3
 801297a:	3718      	adds	r7, #24
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}
 8012980:	40002800 	.word	0x40002800

08012984 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012984:	b590      	push	{r4, r7, lr}
 8012986:	b087      	sub	sp, #28
 8012988:	af00      	add	r7, sp, #0
 801298a:	60f8      	str	r0, [r7, #12]
 801298c:	60b9      	str	r1, [r7, #8]
 801298e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012996:	2b01      	cmp	r3, #1
 8012998:	d101      	bne.n	801299e <HAL_RTC_SetDate+0x1a>
 801299a:	2302      	movs	r3, #2
 801299c:	e074      	b.n	8012a88 <HAL_RTC_SetDate+0x104>
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2201      	movs	r2, #1
 80129a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2202      	movs	r2, #2
 80129aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10e      	bne.n	80129d2 <HAL_RTC_SetDate+0x4e>
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	785b      	ldrb	r3, [r3, #1]
 80129b8:	f003 0310 	and.w	r3, r3, #16
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d008      	beq.n	80129d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	785b      	ldrb	r3, [r3, #1]
 80129c4:	f023 0310 	bic.w	r3, r3, #16
 80129c8:	b2db      	uxtb	r3, r3
 80129ca:	330a      	adds	r3, #10
 80129cc:	b2da      	uxtb	r2, r3
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d11c      	bne.n	8012a12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	78db      	ldrb	r3, [r3, #3]
 80129dc:	4618      	mov	r0, r3
 80129de:	f000 fac9 	bl	8012f74 <RTC_ByteToBcd2>
 80129e2:	4603      	mov	r3, r0
 80129e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	785b      	ldrb	r3, [r3, #1]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 fac2 	bl	8012f74 <RTC_ByteToBcd2>
 80129f0:	4603      	mov	r3, r0
 80129f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80129f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	789b      	ldrb	r3, [r3, #2]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f000 faba 	bl	8012f74 <RTC_ByteToBcd2>
 8012a00:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012a02:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	617b      	str	r3, [r7, #20]
 8012a10:	e00e      	b.n	8012a30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	78db      	ldrb	r3, [r3, #3]
 8012a16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	785b      	ldrb	r3, [r3, #1]
 8012a1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012a1e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8012a20:	68ba      	ldr	r2, [r7, #8]
 8012a22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8012a24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	22ca      	movs	r2, #202	; 0xca
 8012a36:	625a      	str	r2, [r3, #36]	; 0x24
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2253      	movs	r2, #83	; 0x53
 8012a3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012a40:	68f8      	ldr	r0, [r7, #12]
 8012a42:	f000 fa23 	bl	8012e8c <RTC_EnterInitMode>
 8012a46:	4603      	mov	r3, r0
 8012a48:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012a4a:	7cfb      	ldrb	r3, [r7, #19]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d10b      	bne.n	8012a68 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8012a50:	4a0f      	ldr	r2, [pc, #60]	; (8012a90 <HAL_RTC_SetDate+0x10c>)
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012a58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012a5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012a5e:	68f8      	ldr	r0, [r7, #12]
 8012a60:	f000 fa4a 	bl	8012ef8 <RTC_ExitInitMode>
 8012a64:	4603      	mov	r3, r0
 8012a66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	22ff      	movs	r2, #255	; 0xff
 8012a6e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012a70:	7cfb      	ldrb	r3, [r7, #19]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d103      	bne.n	8012a7e <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2201      	movs	r2, #1
 8012a7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2200      	movs	r2, #0
 8012a82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8012a86:	7cfb      	ldrb	r3, [r7, #19]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	371c      	adds	r7, #28
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd90      	pop	{r4, r7, pc}
 8012a90:	40002800 	.word	0x40002800

08012a94 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b086      	sub	sp, #24
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	60b9      	str	r1, [r7, #8]
 8012a9e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8012aa0:	4b22      	ldr	r3, [pc, #136]	; (8012b2c <HAL_RTC_GetDate+0x98>)
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012aa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012aac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	0c1b      	lsrs	r3, r3, #16
 8012ab2:	b2da      	uxtb	r2, r3
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	0a1b      	lsrs	r3, r3, #8
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	f003 031f 	and.w	r3, r3, #31
 8012ac2:	b2da      	uxtb	r2, r3
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ad0:	b2da      	uxtb	r2, r3
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	0b5b      	lsrs	r3, r3, #13
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	f003 0307 	and.w	r3, r3, #7
 8012ae0:	b2da      	uxtb	r2, r3
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d11a      	bne.n	8012b22 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	78db      	ldrb	r3, [r3, #3]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f000 fa5f 	bl	8012fb4 <RTC_Bcd2ToByte>
 8012af6:	4603      	mov	r3, r0
 8012af8:	461a      	mov	r2, r3
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	785b      	ldrb	r3, [r3, #1]
 8012b02:	4618      	mov	r0, r3
 8012b04:	f000 fa56 	bl	8012fb4 <RTC_Bcd2ToByte>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	789b      	ldrb	r3, [r3, #2]
 8012b14:	4618      	mov	r0, r3
 8012b16:	f000 fa4d 	bl	8012fb4 <RTC_Bcd2ToByte>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012b22:	2300      	movs	r3, #0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3718      	adds	r7, #24
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	40002800 	.word	0x40002800

08012b30 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8012b30:	b590      	push	{r4, r7, lr}
 8012b32:	b087      	sub	sp, #28
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0, binaryMode;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	d101      	bne.n	8012b4e <HAL_RTC_SetAlarm_IT+0x1e>
 8012b4a:	2302      	movs	r3, #2
 8012b4c:	e0e0      	b.n	8012d10 <HAL_RTC_SetAlarm_IT+0x1e0>
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	2201      	movs	r2, #1
 8012b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2202      	movs	r2, #2
 8012b5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8012b5e:	4b6e      	ldr	r3, [pc, #440]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012b66:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b6e:	d05c      	beq.n	8012c2a <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d136      	bne.n	8012be4 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8012b76:	4b68      	ldr	r3, [pc, #416]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012b78:	699b      	ldr	r3, [r3, #24]
 8012b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d102      	bne.n	8012b88 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	2200      	movs	r2, #0
 8012b86:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f000 f9f1 	bl	8012f74 <RTC_ByteToBcd2>
 8012b92:	4603      	mov	r3, r0
 8012b94:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	785b      	ldrb	r3, [r3, #1]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f000 f9ea 	bl	8012f74 <RTC_ByteToBcd2>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012ba4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	789b      	ldrb	r3, [r3, #2]
 8012baa:	4618      	mov	r0, r3
 8012bac:	f000 f9e2 	bl	8012f74 <RTC_ByteToBcd2>
 8012bb0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012bb2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	78db      	ldrb	r3, [r3, #3]
 8012bba:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012bbc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f000 f9d4 	bl	8012f74 <RTC_ByteToBcd2>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012bd0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012bd8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012bde:	4313      	orrs	r3, r2
 8012be0:	617b      	str	r3, [r7, #20]
 8012be2:	e022      	b.n	8012c2a <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8012be4:	4b4c      	ldr	r3, [pc, #304]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012be6:	699b      	ldr	r3, [r3, #24]
 8012be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d102      	bne.n	8012bf6 <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	785b      	ldrb	r3, [r3, #1]
 8012c00:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012c02:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012c04:	68ba      	ldr	r2, [r7, #8]
 8012c06:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012c08:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	78db      	ldrb	r3, [r3, #3]
 8012c0e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012c10:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012c18:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012c1a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012c20:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012c26:	4313      	orrs	r3, r2
 8012c28:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	22ca      	movs	r2, #202	; 0xca
 8012c30:	625a      	str	r2, [r3, #36]	; 0x24
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	2253      	movs	r2, #83	; 0x53
 8012c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c42:	d126      	bne.n	8012c92 <HAL_RTC_SetAlarm_IT+0x162>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8012c44:	4b34      	ldr	r3, [pc, #208]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c46:	699b      	ldr	r3, [r3, #24]
 8012c48:	4a33      	ldr	r2, [pc, #204]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8012c4e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8012c50:	4b31      	ldr	r3, [pc, #196]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c52:	2201      	movs	r2, #1
 8012c54:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c5c:	d107      	bne.n	8012c6e <HAL_RTC_SetAlarm_IT+0x13e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	6a1a      	ldr	r2, [r3, #32]
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	69db      	ldr	r3, [r3, #28]
 8012c66:	492c      	ldr	r1, [pc, #176]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	644b      	str	r3, [r1, #68]	; 0x44
 8012c6c:	e006      	b.n	8012c7c <HAL_RTC_SetAlarm_IT+0x14c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8012c6e:	4a2a      	ldr	r2, [pc, #168]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8012c74:	4a28      	ldr	r2, [pc, #160]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	6a1b      	ldr	r3, [r3, #32]
 8012c7a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8012c7c:	4a26      	ldr	r2, [pc, #152]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	6713      	str	r3, [r2, #112]	; 0x70

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8012c84:	4b24      	ldr	r3, [pc, #144]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c86:	699b      	ldr	r3, [r3, #24]
 8012c88:	4a23      	ldr	r2, [pc, #140]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c8a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8012c8e:	6193      	str	r3, [r2, #24]
 8012c90:	e025      	b.n	8012cde <HAL_RTC_SetAlarm_IT+0x1ae>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8012c92:	4b21      	ldr	r3, [pc, #132]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c94:	699b      	ldr	r3, [r3, #24]
 8012c96:	4a20      	ldr	r2, [pc, #128]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c98:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8012c9c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8012c9e:	4b1e      	ldr	r3, [pc, #120]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012ca0:	2202      	movs	r2, #2
 8012ca2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012caa:	d107      	bne.n	8012cbc <HAL_RTC_SetAlarm_IT+0x18c>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	6a1a      	ldr	r2, [r3, #32]
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	69db      	ldr	r3, [r3, #28]
 8012cb4:	4918      	ldr	r1, [pc, #96]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012cb6:	4313      	orrs	r3, r2
 8012cb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012cba:	e006      	b.n	8012cca <HAL_RTC_SetAlarm_IT+0x19a>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8012cbc:	4a16      	ldr	r2, [pc, #88]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8012cc2:	4a15      	ldr	r2, [pc, #84]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	6a1b      	ldr	r3, [r3, #32]
 8012cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8012cca:	4a13      	ldr	r2, [pc, #76]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8012cd2:	4b11      	ldr	r3, [pc, #68]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012cd4:	699b      	ldr	r3, [r3, #24]
 8012cd6:	4a10      	ldr	r2, [pc, #64]	; (8012d18 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012cd8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8012cdc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8012cde:	4b0f      	ldr	r3, [pc, #60]	; (8012d1c <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	4a0e      	ldr	r2, [pc, #56]	; (8012d1c <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012ce8:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8012cea:	4b0c      	ldr	r3, [pc, #48]	; (8012d1c <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	4a0b      	ldr	r2, [pc, #44]	; (8012d1c <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012cf4:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	22ff      	movs	r2, #255	; 0xff
 8012cfc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2201      	movs	r2, #1
 8012d02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8012d0e:	2300      	movs	r3, #0
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	371c      	adds	r7, #28
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd90      	pop	{r4, r7, pc}
 8012d18:	40002800 	.word	0x40002800
 8012d1c:	40010400 	.word	0x40010400

08012d20 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d30:	2b01      	cmp	r3, #1
 8012d32:	d101      	bne.n	8012d38 <HAL_RTC_DeactivateAlarm+0x18>
 8012d34:	2302      	movs	r3, #2
 8012d36:	e04d      	b.n	8012dd4 <HAL_RTC_DeactivateAlarm+0xb4>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2202      	movs	r2, #2
 8012d44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	22ca      	movs	r2, #202	; 0xca
 8012d4e:	625a      	str	r2, [r3, #36]	; 0x24
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2253      	movs	r2, #83	; 0x53
 8012d56:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d5e:	d116      	bne.n	8012d8e <HAL_RTC_DeactivateAlarm+0x6e>
  {
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8012d60:	4b1f      	ldr	r3, [pc, #124]	; (8012de0 <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d64:	4a1e      	ldr	r2, [pc, #120]	; (8012de0 <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d6a:	6453      	str	r3, [r2, #68]	; 0x44
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	699a      	ldr	r2, [r3, #24]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012d7a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	699a      	ldr	r2, [r3, #24]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012d8a:	619a      	str	r2, [r3, #24]
 8012d8c:	e015      	b.n	8012dba <HAL_RTC_DeactivateAlarm+0x9a>
  }
  else
  {
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
 8012d8e:	4b14      	ldr	r3, [pc, #80]	; (8012de0 <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d92:	4a13      	ldr	r2, [pc, #76]	; (8012de0 <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d98:	64d3      	str	r3, [r2, #76]	; 0x4c
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	699a      	ldr	r2, [r3, #24]
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012da8:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	699a      	ldr	r2, [r3, #24]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012db8:	619a      	str	r2, [r3, #24]
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	22ff      	movs	r2, #255	; 0xff
 8012dc0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8012dd2:	2300      	movs	r3, #0
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	370c      	adds	r7, #12
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr
 8012de0:	40002800 	.word	0x40002800

08012de4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8012dec:	4b13      	ldr	r3, [pc, #76]	; (8012e3c <HAL_RTC_AlarmIRQHandler+0x58>)
 8012dee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8012df2:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dfa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	f003 0301 	and.w	r3, r3, #1
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d006      	beq.n	8012e14 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7f5 ff66 	bl	8008ce0 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f003 0302 	and.w	r3, r3, #2
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d006      	beq.n	8012e2c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	2202      	movs	r2, #2
 8012e24:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f7f5 fedc 	bl	8008be4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8012e34:	bf00      	nop
 8012e36:	3710      	adds	r7, #16
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	40010400 	.word	0x40010400

08012e40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	68da      	ldr	r2, [r3, #12]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012e56:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8012e58:	f7f9 ff02 	bl	800cc60 <HAL_GetTick>
 8012e5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8012e5e:	e009      	b.n	8012e74 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012e60:	f7f9 fefe 	bl	800cc60 <HAL_GetTick>
 8012e64:	4602      	mov	r2, r0
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	1ad3      	subs	r3, r2, r3
 8012e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012e6e:	d901      	bls.n	8012e74 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012e70:	2303      	movs	r3, #3
 8012e72:	e007      	b.n	8012e84 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	f003 0320 	and.w	r3, r3, #32
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d0ee      	beq.n	8012e60 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8012e82:	2300      	movs	r3, #0
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d123      	bne.n	8012eee <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	68da      	ldr	r2, [r3, #12]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012eb4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8012eb6:	f7f9 fed3 	bl	800cc60 <HAL_GetTick>
 8012eba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012ebc:	e00d      	b.n	8012eda <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8012ebe:	f7f9 fecf 	bl	800cc60 <HAL_GetTick>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	1ad3      	subs	r3, r2, r3
 8012ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012ecc:	d905      	bls.n	8012eda <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8012ece:	2303      	movs	r3, #3
 8012ed0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2203      	movs	r2, #3
 8012ed6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d102      	bne.n	8012eee <RTC_EnterInitMode+0x62>
 8012ee8:	7bfb      	ldrb	r3, [r7, #15]
 8012eea:	2b03      	cmp	r3, #3
 8012eec:	d1e7      	bne.n	8012ebe <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8012eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3710      	adds	r7, #16
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f00:	2300      	movs	r3, #0
 8012f02:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8012f04:	4b1a      	ldr	r3, [pc, #104]	; (8012f70 <RTC_ExitInitMode+0x78>)
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	4a19      	ldr	r2, [pc, #100]	; (8012f70 <RTC_ExitInitMode+0x78>)
 8012f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f0e:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8012f10:	4b17      	ldr	r3, [pc, #92]	; (8012f70 <RTC_ExitInitMode+0x78>)
 8012f12:	699b      	ldr	r3, [r3, #24]
 8012f14:	f003 0320 	and.w	r3, r3, #32
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d10c      	bne.n	8012f36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f7ff ff8f 	bl	8012e40 <HAL_RTC_WaitForSynchro>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d01e      	beq.n	8012f66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2203      	movs	r2, #3
 8012f2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8012f30:	2303      	movs	r3, #3
 8012f32:	73fb      	strb	r3, [r7, #15]
 8012f34:	e017      	b.n	8012f66 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012f36:	4b0e      	ldr	r3, [pc, #56]	; (8012f70 <RTC_ExitInitMode+0x78>)
 8012f38:	699b      	ldr	r3, [r3, #24]
 8012f3a:	4a0d      	ldr	r2, [pc, #52]	; (8012f70 <RTC_ExitInitMode+0x78>)
 8012f3c:	f023 0320 	bic.w	r3, r3, #32
 8012f40:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f7ff ff7c 	bl	8012e40 <HAL_RTC_WaitForSynchro>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d005      	beq.n	8012f5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2203      	movs	r2, #3
 8012f52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8012f56:	2303      	movs	r3, #3
 8012f58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012f5a:	4b05      	ldr	r3, [pc, #20]	; (8012f70 <RTC_ExitInitMode+0x78>)
 8012f5c:	699b      	ldr	r3, [r3, #24]
 8012f5e:	4a04      	ldr	r2, [pc, #16]	; (8012f70 <RTC_ExitInitMode+0x78>)
 8012f60:	f043 0320 	orr.w	r3, r3, #32
 8012f64:	6193      	str	r3, [r2, #24]
  }

  return status;
 8012f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3710      	adds	r7, #16
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	40002800 	.word	0x40002800

08012f74 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012f74:	b480      	push	{r7}
 8012f76:	b085      	sub	sp, #20
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8012f82:	79fb      	ldrb	r3, [r7, #7]
 8012f84:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8012f86:	e005      	b.n	8012f94 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8012f8e:	7afb      	ldrb	r3, [r7, #11]
 8012f90:	3b0a      	subs	r3, #10
 8012f92:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8012f94:	7afb      	ldrb	r3, [r7, #11]
 8012f96:	2b09      	cmp	r3, #9
 8012f98:	d8f6      	bhi.n	8012f88 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	011b      	lsls	r3, r3, #4
 8012fa0:	b2da      	uxtb	r2, r3
 8012fa2:	7afb      	ldrb	r3, [r7, #11]
 8012fa4:	4313      	orrs	r3, r2
 8012fa6:	b2db      	uxtb	r3, r3
}
 8012fa8:	4618      	mov	r0, r3
 8012faa:	3714      	adds	r7, #20
 8012fac:	46bd      	mov	sp, r7
 8012fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb2:	4770      	bx	lr

08012fb4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012fb4:	b480      	push	{r7}
 8012fb6:	b085      	sub	sp, #20
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	4603      	mov	r3, r0
 8012fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8012fbe:	79fb      	ldrb	r3, [r7, #7]
 8012fc0:	091b      	lsrs	r3, r3, #4
 8012fc2:	b2db      	uxtb	r3, r3
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	0092      	lsls	r2, r2, #2
 8012fc8:	4413      	add	r3, r2
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012fce:	79fb      	ldrb	r3, [r7, #7]
 8012fd0:	f003 030f 	and.w	r3, r3, #15
 8012fd4:	b2da      	uxtb	r2, r3
 8012fd6:	7bfb      	ldrb	r3, [r7, #15]
 8012fd8:	4413      	add	r3, r2
 8012fda:	b2db      	uxtb	r3, r3
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3714      	adds	r7, #20
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr

08012fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b084      	sub	sp, #16
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d101      	bne.n	8012ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	e095      	b.n	8013126 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d108      	bne.n	8013014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801300a:	d009      	beq.n	8013020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2200      	movs	r2, #0
 8013010:	61da      	str	r2, [r3, #28]
 8013012:	e005      	b.n	8013020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2200      	movs	r2, #0
 8013018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2200      	movs	r2, #0
 801301e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2200      	movs	r2, #0
 8013024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801302c:	b2db      	uxtb	r3, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2200      	movs	r2, #0
 8013036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f7f7 fae4 	bl	800a608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2202      	movs	r2, #2
 8013044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	681a      	ldr	r2, [r3, #0]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013056:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	68db      	ldr	r3, [r3, #12]
 801305c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013060:	d902      	bls.n	8013068 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8013062:	2300      	movs	r3, #0
 8013064:	60fb      	str	r3, [r7, #12]
 8013066:	e002      	b.n	801306e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801306c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	68db      	ldr	r3, [r3, #12]
 8013072:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013076:	d007      	beq.n	8013088 <HAL_SPI_Init+0xa0>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013080:	d002      	beq.n	8013088 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2200      	movs	r2, #0
 8013086:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	685b      	ldr	r3, [r3, #4]
 801308c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	689b      	ldr	r3, [r3, #8]
 8013094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013098:	431a      	orrs	r2, r3
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	691b      	ldr	r3, [r3, #16]
 801309e:	f003 0302 	and.w	r3, r3, #2
 80130a2:	431a      	orrs	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	695b      	ldr	r3, [r3, #20]
 80130a8:	f003 0301 	and.w	r3, r3, #1
 80130ac:	431a      	orrs	r2, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	699b      	ldr	r3, [r3, #24]
 80130b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80130b6:	431a      	orrs	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	69db      	ldr	r3, [r3, #28]
 80130bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80130c0:	431a      	orrs	r2, r3
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6a1b      	ldr	r3, [r3, #32]
 80130c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130ca:	ea42 0103 	orr.w	r1, r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	430a      	orrs	r2, r1
 80130dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	699b      	ldr	r3, [r3, #24]
 80130e2:	0c1b      	lsrs	r3, r3, #16
 80130e4:	f003 0204 	and.w	r2, r3, #4
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ec:	f003 0310 	and.w	r3, r3, #16
 80130f0:	431a      	orrs	r2, r3
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130f6:	f003 0308 	and.w	r3, r3, #8
 80130fa:	431a      	orrs	r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013104:	ea42 0103 	orr.w	r1, r2, r3
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	430a      	orrs	r2, r1
 8013114:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2200      	movs	r2, #0
 801311a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2201      	movs	r2, #1
 8013120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013124:	2300      	movs	r3, #0
}
 8013126:	4618      	mov	r0, r3
 8013128:	3710      	adds	r7, #16
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}

0801312e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801312e:	b580      	push	{r7, lr}
 8013130:	b088      	sub	sp, #32
 8013132:	af00      	add	r7, sp, #0
 8013134:	60f8      	str	r0, [r7, #12]
 8013136:	60b9      	str	r1, [r7, #8]
 8013138:	603b      	str	r3, [r7, #0]
 801313a:	4613      	mov	r3, r2
 801313c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801313e:	2300      	movs	r3, #0
 8013140:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013148:	2b01      	cmp	r3, #1
 801314a:	d101      	bne.n	8013150 <HAL_SPI_Transmit+0x22>
 801314c:	2302      	movs	r3, #2
 801314e:	e158      	b.n	8013402 <HAL_SPI_Transmit+0x2d4>
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2201      	movs	r2, #1
 8013154:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013158:	f7f9 fd82 	bl	800cc60 <HAL_GetTick>
 801315c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801315e:	88fb      	ldrh	r3, [r7, #6]
 8013160:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013168:	b2db      	uxtb	r3, r3
 801316a:	2b01      	cmp	r3, #1
 801316c:	d002      	beq.n	8013174 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801316e:	2302      	movs	r3, #2
 8013170:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013172:	e13d      	b.n	80133f0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d002      	beq.n	8013180 <HAL_SPI_Transmit+0x52>
 801317a:	88fb      	ldrh	r3, [r7, #6]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d102      	bne.n	8013186 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8013180:	2301      	movs	r3, #1
 8013182:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013184:	e134      	b.n	80133f0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2203      	movs	r2, #3
 801318a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2200      	movs	r2, #0
 8013192:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	68ba      	ldr	r2, [r7, #8]
 8013198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	88fa      	ldrh	r2, [r7, #6]
 801319e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	88fa      	ldrh	r2, [r7, #6]
 80131a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2200      	movs	r2, #0
 80131aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2200      	movs	r2, #0
 80131b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2200      	movs	r2, #0
 80131c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2200      	movs	r2, #0
 80131c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	689b      	ldr	r3, [r3, #8]
 80131cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131d0:	d10f      	bne.n	80131f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80131e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80131f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131fc:	2b40      	cmp	r3, #64	; 0x40
 80131fe:	d007      	beq.n	8013210 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801320e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013218:	d94b      	bls.n	80132b2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d002      	beq.n	8013228 <HAL_SPI_Transmit+0xfa>
 8013222:	8afb      	ldrh	r3, [r7, #22]
 8013224:	2b01      	cmp	r3, #1
 8013226:	d13e      	bne.n	80132a6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801322c:	881a      	ldrh	r2, [r3, #0]
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013238:	1c9a      	adds	r2, r3, #2
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013242:	b29b      	uxth	r3, r3
 8013244:	3b01      	subs	r3, #1
 8013246:	b29a      	uxth	r2, r3
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801324c:	e02b      	b.n	80132a6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	689b      	ldr	r3, [r3, #8]
 8013254:	f003 0302 	and.w	r3, r3, #2
 8013258:	2b02      	cmp	r3, #2
 801325a:	d112      	bne.n	8013282 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013260:	881a      	ldrh	r2, [r3, #0]
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801326c:	1c9a      	adds	r2, r3, #2
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013276:	b29b      	uxth	r3, r3
 8013278:	3b01      	subs	r3, #1
 801327a:	b29a      	uxth	r2, r3
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013280:	e011      	b.n	80132a6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013282:	f7f9 fced 	bl	800cc60 <HAL_GetTick>
 8013286:	4602      	mov	r2, r0
 8013288:	69bb      	ldr	r3, [r7, #24]
 801328a:	1ad3      	subs	r3, r2, r3
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	429a      	cmp	r2, r3
 8013290:	d803      	bhi.n	801329a <HAL_SPI_Transmit+0x16c>
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013298:	d102      	bne.n	80132a0 <HAL_SPI_Transmit+0x172>
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d102      	bne.n	80132a6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80132a0:	2303      	movs	r3, #3
 80132a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80132a4:	e0a4      	b.n	80133f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d1ce      	bne.n	801324e <HAL_SPI_Transmit+0x120>
 80132b0:	e07c      	b.n	80133ac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d002      	beq.n	80132c0 <HAL_SPI_Transmit+0x192>
 80132ba:	8afb      	ldrh	r3, [r7, #22]
 80132bc:	2b01      	cmp	r3, #1
 80132be:	d170      	bne.n	80133a2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d912      	bls.n	80132f0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ce:	881a      	ldrh	r2, [r3, #0]
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132da:	1c9a      	adds	r2, r3, #2
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	3b02      	subs	r3, #2
 80132e8:	b29a      	uxth	r2, r3
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80132ee:	e058      	b.n	80133a2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	330c      	adds	r3, #12
 80132fa:	7812      	ldrb	r2, [r2, #0]
 80132fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013302:	1c5a      	adds	r2, r3, #1
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801330c:	b29b      	uxth	r3, r3
 801330e:	3b01      	subs	r3, #1
 8013310:	b29a      	uxth	r2, r3
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8013316:	e044      	b.n	80133a2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	689b      	ldr	r3, [r3, #8]
 801331e:	f003 0302 	and.w	r3, r3, #2
 8013322:	2b02      	cmp	r3, #2
 8013324:	d12b      	bne.n	801337e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801332a:	b29b      	uxth	r3, r3
 801332c:	2b01      	cmp	r3, #1
 801332e:	d912      	bls.n	8013356 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013334:	881a      	ldrh	r2, [r3, #0]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013340:	1c9a      	adds	r2, r3, #2
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801334a:	b29b      	uxth	r3, r3
 801334c:	3b02      	subs	r3, #2
 801334e:	b29a      	uxth	r2, r3
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013354:	e025      	b.n	80133a2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	330c      	adds	r3, #12
 8013360:	7812      	ldrb	r2, [r2, #0]
 8013362:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013368:	1c5a      	adds	r2, r3, #1
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013372:	b29b      	uxth	r3, r3
 8013374:	3b01      	subs	r3, #1
 8013376:	b29a      	uxth	r2, r3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801337c:	e011      	b.n	80133a2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801337e:	f7f9 fc6f 	bl	800cc60 <HAL_GetTick>
 8013382:	4602      	mov	r2, r0
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	683a      	ldr	r2, [r7, #0]
 801338a:	429a      	cmp	r2, r3
 801338c:	d803      	bhi.n	8013396 <HAL_SPI_Transmit+0x268>
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013394:	d102      	bne.n	801339c <HAL_SPI_Transmit+0x26e>
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d102      	bne.n	80133a2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801339c:	2303      	movs	r3, #3
 801339e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80133a0:	e026      	b.n	80133f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d1b5      	bne.n	8013318 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80133ac:	69ba      	ldr	r2, [r7, #24]
 80133ae:	6839      	ldr	r1, [r7, #0]
 80133b0:	68f8      	ldr	r0, [r7, #12]
 80133b2:	f000 fa69 	bl	8013888 <SPI_EndRxTxTransaction>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2220      	movs	r2, #32
 80133c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	689b      	ldr	r3, [r3, #8]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d10a      	bne.n	80133e0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80133ca:	2300      	movs	r3, #0
 80133cc:	613b      	str	r3, [r7, #16]
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	613b      	str	r3, [r7, #16]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	689b      	ldr	r3, [r3, #8]
 80133dc:	613b      	str	r3, [r7, #16]
 80133de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d002      	beq.n	80133ee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80133e8:	2301      	movs	r3, #1
 80133ea:	77fb      	strb	r3, [r7, #31]
 80133ec:	e000      	b.n	80133f0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80133ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2201      	movs	r2, #1
 80133f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2200      	movs	r2, #0
 80133fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8013400:	7ffb      	ldrb	r3, [r7, #31]
}
 8013402:	4618      	mov	r0, r3
 8013404:	3720      	adds	r7, #32
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
	...

0801340c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b088      	sub	sp, #32
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	689b      	ldr	r3, [r3, #8]
 8013422:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	099b      	lsrs	r3, r3, #6
 8013428:	f003 0301 	and.w	r3, r3, #1
 801342c:	2b00      	cmp	r3, #0
 801342e:	d10f      	bne.n	8013450 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013430:	69bb      	ldr	r3, [r7, #24]
 8013432:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00a      	beq.n	8013450 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	099b      	lsrs	r3, r3, #6
 801343e:	f003 0301 	and.w	r3, r3, #1
 8013442:	2b00      	cmp	r3, #0
 8013444:	d004      	beq.n	8013450 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	4798      	blx	r3
    return;
 801344e:	e0d7      	b.n	8013600 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8013450:	69bb      	ldr	r3, [r7, #24]
 8013452:	085b      	lsrs	r3, r3, #1
 8013454:	f003 0301 	and.w	r3, r3, #1
 8013458:	2b00      	cmp	r3, #0
 801345a:	d00a      	beq.n	8013472 <HAL_SPI_IRQHandler+0x66>
 801345c:	69fb      	ldr	r3, [r7, #28]
 801345e:	09db      	lsrs	r3, r3, #7
 8013460:	f003 0301 	and.w	r3, r3, #1
 8013464:	2b00      	cmp	r3, #0
 8013466:	d004      	beq.n	8013472 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	4798      	blx	r3
    return;
 8013470:	e0c6      	b.n	8013600 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013472:	69bb      	ldr	r3, [r7, #24]
 8013474:	095b      	lsrs	r3, r3, #5
 8013476:	f003 0301 	and.w	r3, r3, #1
 801347a:	2b00      	cmp	r3, #0
 801347c:	d10c      	bne.n	8013498 <HAL_SPI_IRQHandler+0x8c>
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	099b      	lsrs	r3, r3, #6
 8013482:	f003 0301 	and.w	r3, r3, #1
 8013486:	2b00      	cmp	r3, #0
 8013488:	d106      	bne.n	8013498 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	0a1b      	lsrs	r3, r3, #8
 801348e:	f003 0301 	and.w	r3, r3, #1
 8013492:	2b00      	cmp	r3, #0
 8013494:	f000 80b4 	beq.w	8013600 <HAL_SPI_IRQHandler+0x1f4>
 8013498:	69fb      	ldr	r3, [r7, #28]
 801349a:	095b      	lsrs	r3, r3, #5
 801349c:	f003 0301 	and.w	r3, r3, #1
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	f000 80ad 	beq.w	8013600 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	099b      	lsrs	r3, r3, #6
 80134aa:	f003 0301 	and.w	r3, r3, #1
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d023      	beq.n	80134fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80134b8:	b2db      	uxtb	r3, r3
 80134ba:	2b03      	cmp	r3, #3
 80134bc:	d011      	beq.n	80134e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134c2:	f043 0204 	orr.w	r2, r3, #4
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80134ca:	2300      	movs	r3, #0
 80134cc:	617b      	str	r3, [r7, #20]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	68db      	ldr	r3, [r3, #12]
 80134d4:	617b      	str	r3, [r7, #20]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	689b      	ldr	r3, [r3, #8]
 80134dc:	617b      	str	r3, [r7, #20]
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	e00b      	b.n	80134fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80134e2:	2300      	movs	r3, #0
 80134e4:	613b      	str	r3, [r7, #16]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	68db      	ldr	r3, [r3, #12]
 80134ec:	613b      	str	r3, [r7, #16]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	689b      	ldr	r3, [r3, #8]
 80134f4:	613b      	str	r3, [r7, #16]
 80134f6:	693b      	ldr	r3, [r7, #16]
        return;
 80134f8:	e082      	b.n	8013600 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80134fa:	69bb      	ldr	r3, [r7, #24]
 80134fc:	095b      	lsrs	r3, r3, #5
 80134fe:	f003 0301 	and.w	r3, r3, #1
 8013502:	2b00      	cmp	r3, #0
 8013504:	d014      	beq.n	8013530 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801350a:	f043 0201 	orr.w	r2, r3, #1
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013512:	2300      	movs	r3, #0
 8013514:	60fb      	str	r3, [r7, #12]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	60fb      	str	r3, [r7, #12]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801352c:	601a      	str	r2, [r3, #0]
 801352e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	0a1b      	lsrs	r3, r3, #8
 8013534:	f003 0301 	and.w	r3, r3, #1
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00c      	beq.n	8013556 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013540:	f043 0208 	orr.w	r2, r3, #8
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013548:	2300      	movs	r3, #0
 801354a:	60bb      	str	r3, [r7, #8]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	689b      	ldr	r3, [r3, #8]
 8013552:	60bb      	str	r3, [r7, #8]
 8013554:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801355a:	2b00      	cmp	r3, #0
 801355c:	d04f      	beq.n	80135fe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	685a      	ldr	r2, [r3, #4]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801356c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2201      	movs	r2, #1
 8013572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8013576:	69fb      	ldr	r3, [r7, #28]
 8013578:	f003 0302 	and.w	r3, r3, #2
 801357c:	2b00      	cmp	r3, #0
 801357e:	d104      	bne.n	801358a <HAL_SPI_IRQHandler+0x17e>
 8013580:	69fb      	ldr	r3, [r7, #28]
 8013582:	f003 0301 	and.w	r3, r3, #1
 8013586:	2b00      	cmp	r3, #0
 8013588:	d034      	beq.n	80135f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	685a      	ldr	r2, [r3, #4]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	f022 0203 	bic.w	r2, r2, #3
 8013598:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d011      	beq.n	80135c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135a6:	4a18      	ldr	r2, [pc, #96]	; (8013608 <HAL_SPI_IRQHandler+0x1fc>)
 80135a8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fb fde9 	bl	800f186 <HAL_DMA_Abort_IT>
 80135b4:	4603      	mov	r3, r0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d005      	beq.n	80135c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d016      	beq.n	80135fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135d2:	4a0d      	ldr	r2, [pc, #52]	; (8013608 <HAL_SPI_IRQHandler+0x1fc>)
 80135d4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fb fdd3 	bl	800f186 <HAL_DMA_Abort_IT>
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d00a      	beq.n	80135fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80135f2:	e003      	b.n	80135fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f000 f809 	bl	801360c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80135fa:	e000      	b.n	80135fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80135fc:	bf00      	nop
    return;
 80135fe:	bf00      	nop
  }
}
 8013600:	3720      	adds	r7, #32
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	08013621 	.word	0x08013621

0801360c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801360c:	b480      	push	{r7}
 801360e:	b083      	sub	sp, #12
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013614:	bf00      	nop
 8013616:	370c      	adds	r7, #12
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr

08013620 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801362c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2200      	movs	r2, #0
 8013632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2200      	movs	r2, #0
 801363a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801363c:	68f8      	ldr	r0, [r7, #12]
 801363e:	f7ff ffe5 	bl	801360c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013642:	bf00      	nop
 8013644:	3710      	adds	r7, #16
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
	...

0801364c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b088      	sub	sp, #32
 8013650:	af00      	add	r7, sp, #0
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	60b9      	str	r1, [r7, #8]
 8013656:	603b      	str	r3, [r7, #0]
 8013658:	4613      	mov	r3, r2
 801365a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801365c:	f7f9 fb00 	bl	800cc60 <HAL_GetTick>
 8013660:	4602      	mov	r2, r0
 8013662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013664:	1a9b      	subs	r3, r3, r2
 8013666:	683a      	ldr	r2, [r7, #0]
 8013668:	4413      	add	r3, r2
 801366a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801366c:	f7f9 faf8 	bl	800cc60 <HAL_GetTick>
 8013670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013672:	4b39      	ldr	r3, [pc, #228]	; (8013758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	015b      	lsls	r3, r3, #5
 8013678:	0d1b      	lsrs	r3, r3, #20
 801367a:	69fa      	ldr	r2, [r7, #28]
 801367c:	fb02 f303 	mul.w	r3, r2, r3
 8013680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013682:	e054      	b.n	801372e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801368a:	d050      	beq.n	801372e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801368c:	f7f9 fae8 	bl	800cc60 <HAL_GetTick>
 8013690:	4602      	mov	r2, r0
 8013692:	69bb      	ldr	r3, [r7, #24]
 8013694:	1ad3      	subs	r3, r2, r3
 8013696:	69fa      	ldr	r2, [r7, #28]
 8013698:	429a      	cmp	r2, r3
 801369a:	d902      	bls.n	80136a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d13d      	bne.n	801371e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	685a      	ldr	r2, [r3, #4]
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80136b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80136ba:	d111      	bne.n	80136e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	689b      	ldr	r3, [r3, #8]
 80136c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136c4:	d004      	beq.n	80136d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80136ce:	d107      	bne.n	80136e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	681a      	ldr	r2, [r3, #0]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80136de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80136e8:	d10f      	bne.n	801370a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80136f8:	601a      	str	r2, [r3, #0]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2201      	movs	r2, #1
 801370e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2200      	movs	r2, #0
 8013716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801371a:	2303      	movs	r3, #3
 801371c:	e017      	b.n	801374e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d101      	bne.n	8013728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013724:	2300      	movs	r3, #0
 8013726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	3b01      	subs	r3, #1
 801372c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	689a      	ldr	r2, [r3, #8]
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	4013      	ands	r3, r2
 8013738:	68ba      	ldr	r2, [r7, #8]
 801373a:	429a      	cmp	r2, r3
 801373c:	bf0c      	ite	eq
 801373e:	2301      	moveq	r3, #1
 8013740:	2300      	movne	r3, #0
 8013742:	b2db      	uxtb	r3, r3
 8013744:	461a      	mov	r2, r3
 8013746:	79fb      	ldrb	r3, [r7, #7]
 8013748:	429a      	cmp	r2, r3
 801374a:	d19b      	bne.n	8013684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801374c:	2300      	movs	r3, #0
}
 801374e:	4618      	mov	r0, r3
 8013750:	3720      	adds	r7, #32
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	200000b4 	.word	0x200000b4

0801375c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b08a      	sub	sp, #40	; 0x28
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
 8013768:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801376a:	2300      	movs	r3, #0
 801376c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801376e:	f7f9 fa77 	bl	800cc60 <HAL_GetTick>
 8013772:	4602      	mov	r2, r0
 8013774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013776:	1a9b      	subs	r3, r3, r2
 8013778:	683a      	ldr	r2, [r7, #0]
 801377a:	4413      	add	r3, r2
 801377c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801377e:	f7f9 fa6f 	bl	800cc60 <HAL_GetTick>
 8013782:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	330c      	adds	r3, #12
 801378a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801378c:	4b3d      	ldr	r3, [pc, #244]	; (8013884 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	4613      	mov	r3, r2
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	4413      	add	r3, r2
 8013796:	00da      	lsls	r2, r3, #3
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	0d1b      	lsrs	r3, r3, #20
 801379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801379e:	fb02 f303 	mul.w	r3, r2, r3
 80137a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80137a4:	e060      	b.n	8013868 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80137ac:	d107      	bne.n	80137be <SPI_WaitFifoStateUntilTimeout+0x62>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d104      	bne.n	80137be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80137b4:	69fb      	ldr	r3, [r7, #28]
 80137b6:	781b      	ldrb	r3, [r3, #0]
 80137b8:	b2db      	uxtb	r3, r3
 80137ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80137bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c4:	d050      	beq.n	8013868 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80137c6:	f7f9 fa4b 	bl	800cc60 <HAL_GetTick>
 80137ca:	4602      	mov	r2, r0
 80137cc:	6a3b      	ldr	r3, [r7, #32]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d902      	bls.n	80137dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80137d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d13d      	bne.n	8013858 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	685a      	ldr	r2, [r3, #4]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80137ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80137f4:	d111      	bne.n	801381a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	689b      	ldr	r3, [r3, #8]
 80137fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137fe:	d004      	beq.n	801380a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	689b      	ldr	r3, [r3, #8]
 8013804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013808:	d107      	bne.n	801381a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	681a      	ldr	r2, [r3, #0]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801381e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013822:	d10f      	bne.n	8013844 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	681a      	ldr	r2, [r3, #0]
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013832:	601a      	str	r2, [r3, #0]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013842:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	2201      	movs	r2, #1
 8013848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2200      	movs	r2, #0
 8013850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8013854:	2303      	movs	r3, #3
 8013856:	e010      	b.n	801387a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013858:	69bb      	ldr	r3, [r7, #24]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d101      	bne.n	8013862 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801385e:	2300      	movs	r3, #0
 8013860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	3b01      	subs	r3, #1
 8013866:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	689a      	ldr	r2, [r3, #8]
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	4013      	ands	r3, r2
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	429a      	cmp	r2, r3
 8013876:	d196      	bne.n	80137a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8013878:	2300      	movs	r3, #0
}
 801387a:	4618      	mov	r0, r3
 801387c:	3728      	adds	r7, #40	; 0x28
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	200000b4 	.word	0x200000b4

08013888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b086      	sub	sp, #24
 801388c:	af02      	add	r7, sp, #8
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	9300      	str	r3, [sp, #0]
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	2200      	movs	r2, #0
 801389c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f7ff ff5b 	bl	801375c <SPI_WaitFifoStateUntilTimeout>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d007      	beq.n	80138bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138b0:	f043 0220 	orr.w	r2, r3, #32
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80138b8:	2303      	movs	r3, #3
 80138ba:	e027      	b.n	801390c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	9300      	str	r3, [sp, #0]
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	2200      	movs	r2, #0
 80138c4:	2180      	movs	r1, #128	; 0x80
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f7ff fec0 	bl	801364c <SPI_WaitFlagStateUntilTimeout>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d007      	beq.n	80138e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138d6:	f043 0220 	orr.w	r2, r3, #32
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80138de:	2303      	movs	r3, #3
 80138e0:	e014      	b.n	801390c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	9300      	str	r3, [sp, #0]
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	2200      	movs	r2, #0
 80138ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80138ee:	68f8      	ldr	r0, [r7, #12]
 80138f0:	f7ff ff34 	bl	801375c <SPI_WaitFifoStateUntilTimeout>
 80138f4:	4603      	mov	r3, r0
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d007      	beq.n	801390a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138fe:	f043 0220 	orr.w	r2, r3, #32
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013906:	2303      	movs	r3, #3
 8013908:	e000      	b.n	801390c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	3710      	adds	r7, #16
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}

08013914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b082      	sub	sp, #8
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d101      	bne.n	8013926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013922:	2301      	movs	r3, #1
 8013924:	e049      	b.n	80139ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801392c:	b2db      	uxtb	r3, r3
 801392e:	2b00      	cmp	r3, #0
 8013930:	d106      	bne.n	8013940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2200      	movs	r2, #0
 8013936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f7f7 fd5e 	bl	800b3fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2202      	movs	r2, #2
 8013944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	3304      	adds	r3, #4
 8013950:	4619      	mov	r1, r3
 8013952:	4610      	mov	r0, r2
 8013954:	f001 f9a0 	bl	8014c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2201      	movs	r2, #1
 801395c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2201      	movs	r2, #1
 8013964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2201      	movs	r2, #1
 801396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2201      	movs	r2, #1
 8013974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2201      	movs	r2, #1
 801397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2201      	movs	r2, #1
 8013984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2201      	movs	r2, #1
 801398c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2201      	movs	r2, #1
 8013994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2201      	movs	r2, #1
 801399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2201      	movs	r2, #1
 80139a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2201      	movs	r2, #1
 80139ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2201      	movs	r2, #1
 80139b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80139b8:	2300      	movs	r3, #0
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3708      	adds	r7, #8
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
	...

080139c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80139c4:	b480      	push	{r7}
 80139c6:	b085      	sub	sp, #20
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	2b01      	cmp	r3, #1
 80139d6:	d001      	beq.n	80139dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80139d8:	2301      	movs	r3, #1
 80139da:	e047      	b.n	8013a6c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2202      	movs	r2, #2
 80139e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	4a23      	ldr	r2, [pc, #140]	; (8013a78 <HAL_TIM_Base_Start+0xb4>)
 80139ea:	4293      	cmp	r3, r2
 80139ec:	d01d      	beq.n	8013a2a <HAL_TIM_Base_Start+0x66>
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139f6:	d018      	beq.n	8013a2a <HAL_TIM_Base_Start+0x66>
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4a1f      	ldr	r2, [pc, #124]	; (8013a7c <HAL_TIM_Base_Start+0xb8>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d013      	beq.n	8013a2a <HAL_TIM_Base_Start+0x66>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	4a1e      	ldr	r2, [pc, #120]	; (8013a80 <HAL_TIM_Base_Start+0xbc>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d00e      	beq.n	8013a2a <HAL_TIM_Base_Start+0x66>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	4a1c      	ldr	r2, [pc, #112]	; (8013a84 <HAL_TIM_Base_Start+0xc0>)
 8013a12:	4293      	cmp	r3, r2
 8013a14:	d009      	beq.n	8013a2a <HAL_TIM_Base_Start+0x66>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	4a1b      	ldr	r2, [pc, #108]	; (8013a88 <HAL_TIM_Base_Start+0xc4>)
 8013a1c:	4293      	cmp	r3, r2
 8013a1e:	d004      	beq.n	8013a2a <HAL_TIM_Base_Start+0x66>
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	4a19      	ldr	r2, [pc, #100]	; (8013a8c <HAL_TIM_Base_Start+0xc8>)
 8013a26:	4293      	cmp	r3, r2
 8013a28:	d115      	bne.n	8013a56 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	689a      	ldr	r2, [r3, #8]
 8013a30:	4b17      	ldr	r3, [pc, #92]	; (8013a90 <HAL_TIM_Base_Start+0xcc>)
 8013a32:	4013      	ands	r3, r2
 8013a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	2b06      	cmp	r3, #6
 8013a3a:	d015      	beq.n	8013a68 <HAL_TIM_Base_Start+0xa4>
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a42:	d011      	beq.n	8013a68 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	f042 0201 	orr.w	r2, r2, #1
 8013a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a54:	e008      	b.n	8013a68 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f042 0201 	orr.w	r2, r2, #1
 8013a64:	601a      	str	r2, [r3, #0]
 8013a66:	e000      	b.n	8013a6a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3714      	adds	r7, #20
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr
 8013a78:	40012c00 	.word	0x40012c00
 8013a7c:	40000400 	.word	0x40000400
 8013a80:	40000800 	.word	0x40000800
 8013a84:	40000c00 	.word	0x40000c00
 8013a88:	40013400 	.word	0x40013400
 8013a8c:	40014000 	.word	0x40014000
 8013a90:	00010007 	.word	0x00010007

08013a94 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	6a1a      	ldr	r2, [r3, #32]
 8013aa2:	f241 1311 	movw	r3, #4369	; 0x1111
 8013aa6:	4013      	ands	r3, r2
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d10f      	bne.n	8013acc <HAL_TIM_Base_Stop+0x38>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	6a1a      	ldr	r2, [r3, #32]
 8013ab2:	f240 4344 	movw	r3, #1092	; 0x444
 8013ab6:	4013      	ands	r3, r2
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d107      	bne.n	8013acc <HAL_TIM_Base_Stop+0x38>
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	f022 0201 	bic.w	r2, r2, #1
 8013aca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2201      	movs	r2, #1
 8013ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8013ad4:	2300      	movs	r3, #0
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	370c      	adds	r7, #12
 8013ada:	46bd      	mov	sp, r7
 8013adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae0:	4770      	bx	lr

08013ae2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8013ae2:	b580      	push	{r7, lr}
 8013ae4:	b082      	sub	sp, #8
 8013ae6:	af00      	add	r7, sp, #0
 8013ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d101      	bne.n	8013af4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8013af0:	2301      	movs	r3, #1
 8013af2:	e049      	b.n	8013b88 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013afa:	b2db      	uxtb	r3, r3
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d106      	bne.n	8013b0e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8013b08:	6878      	ldr	r0, [r7, #4]
 8013b0a:	f7f7 fcbf 	bl	800b48c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2202      	movs	r2, #2
 8013b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681a      	ldr	r2, [r3, #0]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	3304      	adds	r3, #4
 8013b1e:	4619      	mov	r1, r3
 8013b20:	4610      	mov	r0, r2
 8013b22:	f001 f8b9 	bl	8014c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	2201      	movs	r2, #1
 8013b2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	2201      	movs	r2, #1
 8013b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2201      	movs	r2, #1
 8013b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	2201      	movs	r2, #1
 8013b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2201      	movs	r2, #1
 8013b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2201      	movs	r2, #1
 8013b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2201      	movs	r2, #1
 8013b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2201      	movs	r2, #1
 8013b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2201      	movs	r2, #1
 8013b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2201      	movs	r2, #1
 8013b7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2201      	movs	r2, #1
 8013b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3708      	adds	r7, #8
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}

08013b90 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d109      	bne.n	8013bb8 <HAL_TIM_OC_Start_IT+0x28>
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	2b01      	cmp	r3, #1
 8013bae:	bf14      	ite	ne
 8013bb0:	2301      	movne	r3, #1
 8013bb2:	2300      	moveq	r3, #0
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	e03c      	b.n	8013c32 <HAL_TIM_OC_Start_IT+0xa2>
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	2b04      	cmp	r3, #4
 8013bbc:	d109      	bne.n	8013bd2 <HAL_TIM_OC_Start_IT+0x42>
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013bc4:	b2db      	uxtb	r3, r3
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	bf14      	ite	ne
 8013bca:	2301      	movne	r3, #1
 8013bcc:	2300      	moveq	r3, #0
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	e02f      	b.n	8013c32 <HAL_TIM_OC_Start_IT+0xa2>
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	2b08      	cmp	r3, #8
 8013bd6:	d109      	bne.n	8013bec <HAL_TIM_OC_Start_IT+0x5c>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	2b01      	cmp	r3, #1
 8013be2:	bf14      	ite	ne
 8013be4:	2301      	movne	r3, #1
 8013be6:	2300      	moveq	r3, #0
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	e022      	b.n	8013c32 <HAL_TIM_OC_Start_IT+0xa2>
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	2b0c      	cmp	r3, #12
 8013bf0:	d109      	bne.n	8013c06 <HAL_TIM_OC_Start_IT+0x76>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	2b01      	cmp	r3, #1
 8013bfc:	bf14      	ite	ne
 8013bfe:	2301      	movne	r3, #1
 8013c00:	2300      	moveq	r3, #0
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	e015      	b.n	8013c32 <HAL_TIM_OC_Start_IT+0xa2>
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2b10      	cmp	r3, #16
 8013c0a:	d109      	bne.n	8013c20 <HAL_TIM_OC_Start_IT+0x90>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	2b01      	cmp	r3, #1
 8013c16:	bf14      	ite	ne
 8013c18:	2301      	movne	r3, #1
 8013c1a:	2300      	moveq	r3, #0
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	e008      	b.n	8013c32 <HAL_TIM_OC_Start_IT+0xa2>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	bf14      	ite	ne
 8013c2c:	2301      	movne	r3, #1
 8013c2e:	2300      	moveq	r3, #0
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d001      	beq.n	8013c3a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8013c36:	2301      	movs	r3, #1
 8013c38:	e0e7      	b.n	8013e0a <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d104      	bne.n	8013c4a <HAL_TIM_OC_Start_IT+0xba>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2202      	movs	r2, #2
 8013c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013c48:	e023      	b.n	8013c92 <HAL_TIM_OC_Start_IT+0x102>
 8013c4a:	683b      	ldr	r3, [r7, #0]
 8013c4c:	2b04      	cmp	r3, #4
 8013c4e:	d104      	bne.n	8013c5a <HAL_TIM_OC_Start_IT+0xca>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2202      	movs	r2, #2
 8013c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013c58:	e01b      	b.n	8013c92 <HAL_TIM_OC_Start_IT+0x102>
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	2b08      	cmp	r3, #8
 8013c5e:	d104      	bne.n	8013c6a <HAL_TIM_OC_Start_IT+0xda>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2202      	movs	r2, #2
 8013c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013c68:	e013      	b.n	8013c92 <HAL_TIM_OC_Start_IT+0x102>
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	2b0c      	cmp	r3, #12
 8013c6e:	d104      	bne.n	8013c7a <HAL_TIM_OC_Start_IT+0xea>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2202      	movs	r2, #2
 8013c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013c78:	e00b      	b.n	8013c92 <HAL_TIM_OC_Start_IT+0x102>
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	2b10      	cmp	r3, #16
 8013c7e:	d104      	bne.n	8013c8a <HAL_TIM_OC_Start_IT+0xfa>
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2202      	movs	r2, #2
 8013c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013c88:	e003      	b.n	8013c92 <HAL_TIM_OC_Start_IT+0x102>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2202      	movs	r2, #2
 8013c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	2b0c      	cmp	r3, #12
 8013c96:	d841      	bhi.n	8013d1c <HAL_TIM_OC_Start_IT+0x18c>
 8013c98:	a201      	add	r2, pc, #4	; (adr r2, 8013ca0 <HAL_TIM_OC_Start_IT+0x110>)
 8013c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c9e:	bf00      	nop
 8013ca0:	08013cd5 	.word	0x08013cd5
 8013ca4:	08013d1d 	.word	0x08013d1d
 8013ca8:	08013d1d 	.word	0x08013d1d
 8013cac:	08013d1d 	.word	0x08013d1d
 8013cb0:	08013ce7 	.word	0x08013ce7
 8013cb4:	08013d1d 	.word	0x08013d1d
 8013cb8:	08013d1d 	.word	0x08013d1d
 8013cbc:	08013d1d 	.word	0x08013d1d
 8013cc0:	08013cf9 	.word	0x08013cf9
 8013cc4:	08013d1d 	.word	0x08013d1d
 8013cc8:	08013d1d 	.word	0x08013d1d
 8013ccc:	08013d1d 	.word	0x08013d1d
 8013cd0:	08013d0b 	.word	0x08013d0b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	68da      	ldr	r2, [r3, #12]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f042 0202 	orr.w	r2, r2, #2
 8013ce2:	60da      	str	r2, [r3, #12]
      break;
 8013ce4:	e01d      	b.n	8013d22 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	68da      	ldr	r2, [r3, #12]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f042 0204 	orr.w	r2, r2, #4
 8013cf4:	60da      	str	r2, [r3, #12]
      break;
 8013cf6:	e014      	b.n	8013d22 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	68da      	ldr	r2, [r3, #12]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	f042 0208 	orr.w	r2, r2, #8
 8013d06:	60da      	str	r2, [r3, #12]
      break;
 8013d08:	e00b      	b.n	8013d22 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	68da      	ldr	r2, [r3, #12]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	f042 0210 	orr.w	r2, r2, #16
 8013d18:	60da      	str	r2, [r3, #12]
      break;
 8013d1a:	e002      	b.n	8013d22 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8013d20:	bf00      	nop
  }

  if (status == HAL_OK)
 8013d22:	7bfb      	ldrb	r3, [r7, #15]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d16f      	bne.n	8013e08 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	6839      	ldr	r1, [r7, #0]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f001 fb21 	bl	8015378 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4a36      	ldr	r2, [pc, #216]	; (8013e14 <HAL_TIM_OC_Start_IT+0x284>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d013      	beq.n	8013d68 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	4a34      	ldr	r2, [pc, #208]	; (8013e18 <HAL_TIM_OC_Start_IT+0x288>)
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d00e      	beq.n	8013d68 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	4a33      	ldr	r2, [pc, #204]	; (8013e1c <HAL_TIM_OC_Start_IT+0x28c>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d009      	beq.n	8013d68 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4a31      	ldr	r2, [pc, #196]	; (8013e20 <HAL_TIM_OC_Start_IT+0x290>)
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d004      	beq.n	8013d68 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4a30      	ldr	r2, [pc, #192]	; (8013e24 <HAL_TIM_OC_Start_IT+0x294>)
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d101      	bne.n	8013d6c <HAL_TIM_OC_Start_IT+0x1dc>
 8013d68:	2301      	movs	r3, #1
 8013d6a:	e000      	b.n	8013d6e <HAL_TIM_OC_Start_IT+0x1de>
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d007      	beq.n	8013d82 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013d80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	4a23      	ldr	r2, [pc, #140]	; (8013e14 <HAL_TIM_OC_Start_IT+0x284>)
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	d01d      	beq.n	8013dc8 <HAL_TIM_OC_Start_IT+0x238>
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d94:	d018      	beq.n	8013dc8 <HAL_TIM_OC_Start_IT+0x238>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	4a23      	ldr	r2, [pc, #140]	; (8013e28 <HAL_TIM_OC_Start_IT+0x298>)
 8013d9c:	4293      	cmp	r3, r2
 8013d9e:	d013      	beq.n	8013dc8 <HAL_TIM_OC_Start_IT+0x238>
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4a21      	ldr	r2, [pc, #132]	; (8013e2c <HAL_TIM_OC_Start_IT+0x29c>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d00e      	beq.n	8013dc8 <HAL_TIM_OC_Start_IT+0x238>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	4a20      	ldr	r2, [pc, #128]	; (8013e30 <HAL_TIM_OC_Start_IT+0x2a0>)
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d009      	beq.n	8013dc8 <HAL_TIM_OC_Start_IT+0x238>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a17      	ldr	r2, [pc, #92]	; (8013e18 <HAL_TIM_OC_Start_IT+0x288>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d004      	beq.n	8013dc8 <HAL_TIM_OC_Start_IT+0x238>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	4a16      	ldr	r2, [pc, #88]	; (8013e1c <HAL_TIM_OC_Start_IT+0x28c>)
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d115      	bne.n	8013df4 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	689a      	ldr	r2, [r3, #8]
 8013dce:	4b19      	ldr	r3, [pc, #100]	; (8013e34 <HAL_TIM_OC_Start_IT+0x2a4>)
 8013dd0:	4013      	ands	r3, r2
 8013dd2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	2b06      	cmp	r3, #6
 8013dd8:	d015      	beq.n	8013e06 <HAL_TIM_OC_Start_IT+0x276>
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013de0:	d011      	beq.n	8013e06 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	f042 0201 	orr.w	r2, r2, #1
 8013df0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013df2:	e008      	b.n	8013e06 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f042 0201 	orr.w	r2, r2, #1
 8013e02:	601a      	str	r2, [r3, #0]
 8013e04:	e000      	b.n	8013e08 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e06:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8013e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3710      	adds	r7, #16
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	bf00      	nop
 8013e14:	40012c00 	.word	0x40012c00
 8013e18:	40013400 	.word	0x40013400
 8013e1c:	40014000 	.word	0x40014000
 8013e20:	40014400 	.word	0x40014400
 8013e24:	40014800 	.word	0x40014800
 8013e28:	40000400 	.word	0x40000400
 8013e2c:	40000800 	.word	0x40000800
 8013e30:	40000c00 	.word	0x40000c00
 8013e34:	00010007 	.word	0x00010007

08013e38 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013e42:	2300      	movs	r3, #0
 8013e44:	73fb      	strb	r3, [r7, #15]
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	2b0c      	cmp	r3, #12
 8013e4a:	d841      	bhi.n	8013ed0 <HAL_TIM_OC_Stop_IT+0x98>
 8013e4c:	a201      	add	r2, pc, #4	; (adr r2, 8013e54 <HAL_TIM_OC_Stop_IT+0x1c>)
 8013e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e52:	bf00      	nop
 8013e54:	08013e89 	.word	0x08013e89
 8013e58:	08013ed1 	.word	0x08013ed1
 8013e5c:	08013ed1 	.word	0x08013ed1
 8013e60:	08013ed1 	.word	0x08013ed1
 8013e64:	08013e9b 	.word	0x08013e9b
 8013e68:	08013ed1 	.word	0x08013ed1
 8013e6c:	08013ed1 	.word	0x08013ed1
 8013e70:	08013ed1 	.word	0x08013ed1
 8013e74:	08013ead 	.word	0x08013ead
 8013e78:	08013ed1 	.word	0x08013ed1
 8013e7c:	08013ed1 	.word	0x08013ed1
 8013e80:	08013ed1 	.word	0x08013ed1
 8013e84:	08013ebf 	.word	0x08013ebf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	68da      	ldr	r2, [r3, #12]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	f022 0202 	bic.w	r2, r2, #2
 8013e96:	60da      	str	r2, [r3, #12]
      break;
 8013e98:	e01d      	b.n	8013ed6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	68da      	ldr	r2, [r3, #12]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f022 0204 	bic.w	r2, r2, #4
 8013ea8:	60da      	str	r2, [r3, #12]
      break;
 8013eaa:	e014      	b.n	8013ed6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	68da      	ldr	r2, [r3, #12]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	f022 0208 	bic.w	r2, r2, #8
 8013eba:	60da      	str	r2, [r3, #12]
      break;
 8013ebc:	e00b      	b.n	8013ed6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	68da      	ldr	r2, [r3, #12]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f022 0210 	bic.w	r2, r2, #16
 8013ecc:	60da      	str	r2, [r3, #12]
      break;
 8013ece:	e002      	b.n	8013ed6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8013ed4:	bf00      	nop
  }

  if (status == HAL_OK)
 8013ed6:	7bfb      	ldrb	r3, [r7, #15]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	f040 8081 	bne.w	8013fe0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	6839      	ldr	r1, [r7, #0]
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f001 fa46 	bl	8015378 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4a3e      	ldr	r2, [pc, #248]	; (8013fec <HAL_TIM_OC_Stop_IT+0x1b4>)
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	d013      	beq.n	8013f1e <HAL_TIM_OC_Stop_IT+0xe6>
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4a3d      	ldr	r2, [pc, #244]	; (8013ff0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8013efc:	4293      	cmp	r3, r2
 8013efe:	d00e      	beq.n	8013f1e <HAL_TIM_OC_Stop_IT+0xe6>
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	4a3b      	ldr	r2, [pc, #236]	; (8013ff4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8013f06:	4293      	cmp	r3, r2
 8013f08:	d009      	beq.n	8013f1e <HAL_TIM_OC_Stop_IT+0xe6>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	4a3a      	ldr	r2, [pc, #232]	; (8013ff8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d004      	beq.n	8013f1e <HAL_TIM_OC_Stop_IT+0xe6>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	4a38      	ldr	r2, [pc, #224]	; (8013ffc <HAL_TIM_OC_Stop_IT+0x1c4>)
 8013f1a:	4293      	cmp	r3, r2
 8013f1c:	d101      	bne.n	8013f22 <HAL_TIM_OC_Stop_IT+0xea>
 8013f1e:	2301      	movs	r3, #1
 8013f20:	e000      	b.n	8013f24 <HAL_TIM_OC_Stop_IT+0xec>
 8013f22:	2300      	movs	r3, #0
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d017      	beq.n	8013f58 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	6a1a      	ldr	r2, [r3, #32]
 8013f2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013f32:	4013      	ands	r3, r2
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d10f      	bne.n	8013f58 <HAL_TIM_OC_Stop_IT+0x120>
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	6a1a      	ldr	r2, [r3, #32]
 8013f3e:	f240 4344 	movw	r3, #1092	; 0x444
 8013f42:	4013      	ands	r3, r2
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d107      	bne.n	8013f58 <HAL_TIM_OC_Stop_IT+0x120>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013f56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	6a1a      	ldr	r2, [r3, #32]
 8013f5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013f62:	4013      	ands	r3, r2
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d10f      	bne.n	8013f88 <HAL_TIM_OC_Stop_IT+0x150>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	6a1a      	ldr	r2, [r3, #32]
 8013f6e:	f240 4344 	movw	r3, #1092	; 0x444
 8013f72:	4013      	ands	r3, r2
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d107      	bne.n	8013f88 <HAL_TIM_OC_Stop_IT+0x150>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	681a      	ldr	r2, [r3, #0]
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	f022 0201 	bic.w	r2, r2, #1
 8013f86:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d104      	bne.n	8013f98 <HAL_TIM_OC_Stop_IT+0x160>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2201      	movs	r2, #1
 8013f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013f96:	e023      	b.n	8013fe0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	2b04      	cmp	r3, #4
 8013f9c:	d104      	bne.n	8013fa8 <HAL_TIM_OC_Stop_IT+0x170>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2201      	movs	r2, #1
 8013fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013fa6:	e01b      	b.n	8013fe0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	2b08      	cmp	r3, #8
 8013fac:	d104      	bne.n	8013fb8 <HAL_TIM_OC_Stop_IT+0x180>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2201      	movs	r2, #1
 8013fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013fb6:	e013      	b.n	8013fe0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	2b0c      	cmp	r3, #12
 8013fbc:	d104      	bne.n	8013fc8 <HAL_TIM_OC_Stop_IT+0x190>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2201      	movs	r2, #1
 8013fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013fc6:	e00b      	b.n	8013fe0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	2b10      	cmp	r3, #16
 8013fcc:	d104      	bne.n	8013fd8 <HAL_TIM_OC_Stop_IT+0x1a0>
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013fd6:	e003      	b.n	8013fe0 <HAL_TIM_OC_Stop_IT+0x1a8>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2201      	movs	r2, #1
 8013fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3710      	adds	r7, #16
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	40012c00 	.word	0x40012c00
 8013ff0:	40013400 	.word	0x40013400
 8013ff4:	40014000 	.word	0x40014000
 8013ff8:	40014400 	.word	0x40014400
 8013ffc:	40014800 	.word	0x40014800

08014000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d101      	bne.n	8014012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801400e:	2301      	movs	r3, #1
 8014010:	e049      	b.n	80140a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014018:	b2db      	uxtb	r3, r3
 801401a:	2b00      	cmp	r3, #0
 801401c:	d106      	bne.n	801402c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2200      	movs	r2, #0
 8014022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f000 f841 	bl	80140ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2202      	movs	r2, #2
 8014030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	3304      	adds	r3, #4
 801403c:	4619      	mov	r1, r3
 801403e:	4610      	mov	r0, r2
 8014040:	f000 fe2a 	bl	8014c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2201      	movs	r2, #1
 8014048:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2201      	movs	r2, #1
 8014050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2201      	movs	r2, #1
 8014058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2201      	movs	r2, #1
 8014060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2201      	movs	r2, #1
 8014068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	2201      	movs	r2, #1
 8014070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2201      	movs	r2, #1
 8014078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2201      	movs	r2, #1
 8014080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2201      	movs	r2, #1
 8014088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2201      	movs	r2, #1
 8014090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2201      	movs	r2, #1
 8014098:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2201      	movs	r2, #1
 80140a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80140a4:	2300      	movs	r3, #0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3708      	adds	r7, #8
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}

080140ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80140ae:	b480      	push	{r7}
 80140b0:	b083      	sub	sp, #12
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80140b6:	bf00      	nop
 80140b8:	370c      	adds	r7, #12
 80140ba:	46bd      	mov	sp, r7
 80140bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c0:	4770      	bx	lr
	...

080140c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b084      	sub	sp, #16
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d109      	bne.n	80140e8 <HAL_TIM_PWM_Start+0x24>
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	2b01      	cmp	r3, #1
 80140de:	bf14      	ite	ne
 80140e0:	2301      	movne	r3, #1
 80140e2:	2300      	moveq	r3, #0
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	e03c      	b.n	8014162 <HAL_TIM_PWM_Start+0x9e>
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	2b04      	cmp	r3, #4
 80140ec:	d109      	bne.n	8014102 <HAL_TIM_PWM_Start+0x3e>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	2b01      	cmp	r3, #1
 80140f8:	bf14      	ite	ne
 80140fa:	2301      	movne	r3, #1
 80140fc:	2300      	moveq	r3, #0
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	e02f      	b.n	8014162 <HAL_TIM_PWM_Start+0x9e>
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	2b08      	cmp	r3, #8
 8014106:	d109      	bne.n	801411c <HAL_TIM_PWM_Start+0x58>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801410e:	b2db      	uxtb	r3, r3
 8014110:	2b01      	cmp	r3, #1
 8014112:	bf14      	ite	ne
 8014114:	2301      	movne	r3, #1
 8014116:	2300      	moveq	r3, #0
 8014118:	b2db      	uxtb	r3, r3
 801411a:	e022      	b.n	8014162 <HAL_TIM_PWM_Start+0x9e>
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	2b0c      	cmp	r3, #12
 8014120:	d109      	bne.n	8014136 <HAL_TIM_PWM_Start+0x72>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014128:	b2db      	uxtb	r3, r3
 801412a:	2b01      	cmp	r3, #1
 801412c:	bf14      	ite	ne
 801412e:	2301      	movne	r3, #1
 8014130:	2300      	moveq	r3, #0
 8014132:	b2db      	uxtb	r3, r3
 8014134:	e015      	b.n	8014162 <HAL_TIM_PWM_Start+0x9e>
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	2b10      	cmp	r3, #16
 801413a:	d109      	bne.n	8014150 <HAL_TIM_PWM_Start+0x8c>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014142:	b2db      	uxtb	r3, r3
 8014144:	2b01      	cmp	r3, #1
 8014146:	bf14      	ite	ne
 8014148:	2301      	movne	r3, #1
 801414a:	2300      	moveq	r3, #0
 801414c:	b2db      	uxtb	r3, r3
 801414e:	e008      	b.n	8014162 <HAL_TIM_PWM_Start+0x9e>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014156:	b2db      	uxtb	r3, r3
 8014158:	2b01      	cmp	r3, #1
 801415a:	bf14      	ite	ne
 801415c:	2301      	movne	r3, #1
 801415e:	2300      	moveq	r3, #0
 8014160:	b2db      	uxtb	r3, r3
 8014162:	2b00      	cmp	r3, #0
 8014164:	d001      	beq.n	801416a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8014166:	2301      	movs	r3, #1
 8014168:	e09c      	b.n	80142a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d104      	bne.n	801417a <HAL_TIM_PWM_Start+0xb6>
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2202      	movs	r2, #2
 8014174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014178:	e023      	b.n	80141c2 <HAL_TIM_PWM_Start+0xfe>
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	2b04      	cmp	r3, #4
 801417e:	d104      	bne.n	801418a <HAL_TIM_PWM_Start+0xc6>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2202      	movs	r2, #2
 8014184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014188:	e01b      	b.n	80141c2 <HAL_TIM_PWM_Start+0xfe>
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	2b08      	cmp	r3, #8
 801418e:	d104      	bne.n	801419a <HAL_TIM_PWM_Start+0xd6>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2202      	movs	r2, #2
 8014194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014198:	e013      	b.n	80141c2 <HAL_TIM_PWM_Start+0xfe>
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	2b0c      	cmp	r3, #12
 801419e:	d104      	bne.n	80141aa <HAL_TIM_PWM_Start+0xe6>
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2202      	movs	r2, #2
 80141a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80141a8:	e00b      	b.n	80141c2 <HAL_TIM_PWM_Start+0xfe>
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	2b10      	cmp	r3, #16
 80141ae:	d104      	bne.n	80141ba <HAL_TIM_PWM_Start+0xf6>
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2202      	movs	r2, #2
 80141b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80141b8:	e003      	b.n	80141c2 <HAL_TIM_PWM_Start+0xfe>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2202      	movs	r2, #2
 80141be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	2201      	movs	r2, #1
 80141c8:	6839      	ldr	r1, [r7, #0]
 80141ca:	4618      	mov	r0, r3
 80141cc:	f001 f8d4 	bl	8015378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4a35      	ldr	r2, [pc, #212]	; (80142ac <HAL_TIM_PWM_Start+0x1e8>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d013      	beq.n	8014202 <HAL_TIM_PWM_Start+0x13e>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	4a34      	ldr	r2, [pc, #208]	; (80142b0 <HAL_TIM_PWM_Start+0x1ec>)
 80141e0:	4293      	cmp	r3, r2
 80141e2:	d00e      	beq.n	8014202 <HAL_TIM_PWM_Start+0x13e>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	4a32      	ldr	r2, [pc, #200]	; (80142b4 <HAL_TIM_PWM_Start+0x1f0>)
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d009      	beq.n	8014202 <HAL_TIM_PWM_Start+0x13e>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4a31      	ldr	r2, [pc, #196]	; (80142b8 <HAL_TIM_PWM_Start+0x1f4>)
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d004      	beq.n	8014202 <HAL_TIM_PWM_Start+0x13e>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	4a2f      	ldr	r2, [pc, #188]	; (80142bc <HAL_TIM_PWM_Start+0x1f8>)
 80141fe:	4293      	cmp	r3, r2
 8014200:	d101      	bne.n	8014206 <HAL_TIM_PWM_Start+0x142>
 8014202:	2301      	movs	r3, #1
 8014204:	e000      	b.n	8014208 <HAL_TIM_PWM_Start+0x144>
 8014206:	2300      	movs	r3, #0
 8014208:	2b00      	cmp	r3, #0
 801420a:	d007      	beq.n	801421c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801421a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	4a22      	ldr	r2, [pc, #136]	; (80142ac <HAL_TIM_PWM_Start+0x1e8>)
 8014222:	4293      	cmp	r3, r2
 8014224:	d01d      	beq.n	8014262 <HAL_TIM_PWM_Start+0x19e>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801422e:	d018      	beq.n	8014262 <HAL_TIM_PWM_Start+0x19e>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	4a22      	ldr	r2, [pc, #136]	; (80142c0 <HAL_TIM_PWM_Start+0x1fc>)
 8014236:	4293      	cmp	r3, r2
 8014238:	d013      	beq.n	8014262 <HAL_TIM_PWM_Start+0x19e>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	4a21      	ldr	r2, [pc, #132]	; (80142c4 <HAL_TIM_PWM_Start+0x200>)
 8014240:	4293      	cmp	r3, r2
 8014242:	d00e      	beq.n	8014262 <HAL_TIM_PWM_Start+0x19e>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4a1f      	ldr	r2, [pc, #124]	; (80142c8 <HAL_TIM_PWM_Start+0x204>)
 801424a:	4293      	cmp	r3, r2
 801424c:	d009      	beq.n	8014262 <HAL_TIM_PWM_Start+0x19e>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	4a17      	ldr	r2, [pc, #92]	; (80142b0 <HAL_TIM_PWM_Start+0x1ec>)
 8014254:	4293      	cmp	r3, r2
 8014256:	d004      	beq.n	8014262 <HAL_TIM_PWM_Start+0x19e>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	4a15      	ldr	r2, [pc, #84]	; (80142b4 <HAL_TIM_PWM_Start+0x1f0>)
 801425e:	4293      	cmp	r3, r2
 8014260:	d115      	bne.n	801428e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	689a      	ldr	r2, [r3, #8]
 8014268:	4b18      	ldr	r3, [pc, #96]	; (80142cc <HAL_TIM_PWM_Start+0x208>)
 801426a:	4013      	ands	r3, r2
 801426c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	2b06      	cmp	r3, #6
 8014272:	d015      	beq.n	80142a0 <HAL_TIM_PWM_Start+0x1dc>
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801427a:	d011      	beq.n	80142a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	f042 0201 	orr.w	r2, r2, #1
 801428a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801428c:	e008      	b.n	80142a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	681a      	ldr	r2, [r3, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	f042 0201 	orr.w	r2, r2, #1
 801429c:	601a      	str	r2, [r3, #0]
 801429e:	e000      	b.n	80142a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80142a2:	2300      	movs	r3, #0
}
 80142a4:	4618      	mov	r0, r3
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	40012c00 	.word	0x40012c00
 80142b0:	40013400 	.word	0x40013400
 80142b4:	40014000 	.word	0x40014000
 80142b8:	40014400 	.word	0x40014400
 80142bc:	40014800 	.word	0x40014800
 80142c0:	40000400 	.word	0x40000400
 80142c4:	40000800 	.word	0x40000800
 80142c8:	40000c00 	.word	0x40000c00
 80142cc:	00010007 	.word	0x00010007

080142d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b086      	sub	sp, #24
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d101      	bne.n	80142e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80142e0:	2301      	movs	r3, #1
 80142e2:	e097      	b.n	8014414 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d106      	bne.n	80142fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2200      	movs	r2, #0
 80142f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80142f8:	6878      	ldr	r0, [r7, #4]
 80142fa:	f7f6 ff2b 	bl	800b154 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2202      	movs	r2, #2
 8014302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	689b      	ldr	r3, [r3, #8]
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	6812      	ldr	r2, [r2, #0]
 8014310:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8014314:	f023 0307 	bic.w	r3, r3, #7
 8014318:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681a      	ldr	r2, [r3, #0]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	3304      	adds	r3, #4
 8014322:	4619      	mov	r1, r3
 8014324:	4610      	mov	r0, r2
 8014326:	f000 fcb7 	bl	8014c98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	689b      	ldr	r3, [r3, #8]
 8014330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	699b      	ldr	r3, [r3, #24]
 8014338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	6a1b      	ldr	r3, [r3, #32]
 8014340:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	697a      	ldr	r2, [r7, #20]
 8014348:	4313      	orrs	r3, r2
 801434a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801434c:	693b      	ldr	r3, [r7, #16]
 801434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014352:	f023 0303 	bic.w	r3, r3, #3
 8014356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	689a      	ldr	r2, [r3, #8]
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	699b      	ldr	r3, [r3, #24]
 8014360:	021b      	lsls	r3, r3, #8
 8014362:	4313      	orrs	r3, r2
 8014364:	693a      	ldr	r2, [r7, #16]
 8014366:	4313      	orrs	r3, r2
 8014368:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8014370:	f023 030c 	bic.w	r3, r3, #12
 8014374:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8014376:	693b      	ldr	r3, [r7, #16]
 8014378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801437c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	68da      	ldr	r2, [r3, #12]
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	69db      	ldr	r3, [r3, #28]
 801438a:	021b      	lsls	r3, r3, #8
 801438c:	4313      	orrs	r3, r2
 801438e:	693a      	ldr	r2, [r7, #16]
 8014390:	4313      	orrs	r3, r2
 8014392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	691b      	ldr	r3, [r3, #16]
 8014398:	011a      	lsls	r2, r3, #4
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	6a1b      	ldr	r3, [r3, #32]
 801439e:	031b      	lsls	r3, r3, #12
 80143a0:	4313      	orrs	r3, r2
 80143a2:	693a      	ldr	r2, [r7, #16]
 80143a4:	4313      	orrs	r3, r2
 80143a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80143ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80143b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	685a      	ldr	r2, [r3, #4]
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	695b      	ldr	r3, [r3, #20]
 80143c0:	011b      	lsls	r3, r3, #4
 80143c2:	4313      	orrs	r3, r2
 80143c4:	68fa      	ldr	r2, [r7, #12]
 80143c6:	4313      	orrs	r3, r2
 80143c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	697a      	ldr	r2, [r7, #20]
 80143d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	693a      	ldr	r2, [r7, #16]
 80143d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	68fa      	ldr	r2, [r7, #12]
 80143e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	2201      	movs	r2, #1
 80143e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2201      	movs	r2, #1
 80143ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2201      	movs	r2, #1
 80143f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2201      	movs	r2, #1
 80143fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	2201      	movs	r2, #1
 8014406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2201      	movs	r2, #1
 801440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014412:	2300      	movs	r3, #0
}
 8014414:	4618      	mov	r0, r3
 8014416:	3718      	adds	r7, #24
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801442c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014434:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801443c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014444:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d110      	bne.n	801446e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801444c:	7bfb      	ldrb	r3, [r7, #15]
 801444e:	2b01      	cmp	r3, #1
 8014450:	d102      	bne.n	8014458 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8014452:	7b7b      	ldrb	r3, [r7, #13]
 8014454:	2b01      	cmp	r3, #1
 8014456:	d001      	beq.n	801445c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8014458:	2301      	movs	r3, #1
 801445a:	e089      	b.n	8014570 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2202      	movs	r2, #2
 8014460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2202      	movs	r2, #2
 8014468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801446c:	e031      	b.n	80144d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	2b04      	cmp	r3, #4
 8014472:	d110      	bne.n	8014496 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	2b01      	cmp	r3, #1
 8014478:	d102      	bne.n	8014480 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801447a:	7b3b      	ldrb	r3, [r7, #12]
 801447c:	2b01      	cmp	r3, #1
 801447e:	d001      	beq.n	8014484 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8014480:	2301      	movs	r3, #1
 8014482:	e075      	b.n	8014570 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	2202      	movs	r2, #2
 8014488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2202      	movs	r2, #2
 8014490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014494:	e01d      	b.n	80144d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8014496:	7bfb      	ldrb	r3, [r7, #15]
 8014498:	2b01      	cmp	r3, #1
 801449a:	d108      	bne.n	80144ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801449c:	7bbb      	ldrb	r3, [r7, #14]
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d105      	bne.n	80144ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80144a2:	7b7b      	ldrb	r3, [r7, #13]
 80144a4:	2b01      	cmp	r3, #1
 80144a6:	d102      	bne.n	80144ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80144a8:	7b3b      	ldrb	r3, [r7, #12]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d001      	beq.n	80144b2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80144ae:	2301      	movs	r3, #1
 80144b0:	e05e      	b.n	8014570 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2202      	movs	r2, #2
 80144b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2202      	movs	r2, #2
 80144be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2202      	movs	r2, #2
 80144c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2202      	movs	r2, #2
 80144ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d003      	beq.n	80144e0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	2b04      	cmp	r3, #4
 80144dc:	d010      	beq.n	8014500 <HAL_TIM_Encoder_Start_IT+0xe4>
 80144de:	e01f      	b.n	8014520 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2201      	movs	r2, #1
 80144e6:	2100      	movs	r1, #0
 80144e8:	4618      	mov	r0, r3
 80144ea:	f000 ff45 	bl	8015378 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	68da      	ldr	r2, [r3, #12]
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	f042 0202 	orr.w	r2, r2, #2
 80144fc:	60da      	str	r2, [r3, #12]
      break;
 80144fe:	e02e      	b.n	801455e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	2201      	movs	r2, #1
 8014506:	2104      	movs	r1, #4
 8014508:	4618      	mov	r0, r3
 801450a:	f000 ff35 	bl	8015378 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	68da      	ldr	r2, [r3, #12]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f042 0204 	orr.w	r2, r2, #4
 801451c:	60da      	str	r2, [r3, #12]
      break;
 801451e:	e01e      	b.n	801455e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2201      	movs	r2, #1
 8014526:	2100      	movs	r1, #0
 8014528:	4618      	mov	r0, r3
 801452a:	f000 ff25 	bl	8015378 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	2201      	movs	r2, #1
 8014534:	2104      	movs	r1, #4
 8014536:	4618      	mov	r0, r3
 8014538:	f000 ff1e 	bl	8015378 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	68da      	ldr	r2, [r3, #12]
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f042 0202 	orr.w	r2, r2, #2
 801454a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	68da      	ldr	r2, [r3, #12]
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	f042 0204 	orr.w	r2, r2, #4
 801455a:	60da      	str	r2, [r3, #12]
      break;
 801455c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	f042 0201 	orr.w	r2, r2, #1
 801456c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	3710      	adds	r7, #16
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d10f      	bne.n	80145a8 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2200      	movs	r2, #0
 801458e:	2100      	movs	r1, #0
 8014590:	4618      	mov	r0, r3
 8014592:	f000 fef1 	bl	8015378 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	68da      	ldr	r2, [r3, #12]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f022 0202 	bic.w	r2, r2, #2
 80145a4:	60da      	str	r2, [r3, #12]
 80145a6:	e030      	b.n	801460a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	2b04      	cmp	r3, #4
 80145ac:	d10f      	bne.n	80145ce <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2200      	movs	r2, #0
 80145b4:	2104      	movs	r1, #4
 80145b6:	4618      	mov	r0, r3
 80145b8:	f000 fede 	bl	8015378 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	68da      	ldr	r2, [r3, #12]
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	f022 0204 	bic.w	r2, r2, #4
 80145ca:	60da      	str	r2, [r3, #12]
 80145cc:	e01d      	b.n	801460a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2200      	movs	r2, #0
 80145d4:	2100      	movs	r1, #0
 80145d6:	4618      	mov	r0, r3
 80145d8:	f000 fece 	bl	8015378 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	2200      	movs	r2, #0
 80145e2:	2104      	movs	r1, #4
 80145e4:	4618      	mov	r0, r3
 80145e6:	f000 fec7 	bl	8015378 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	68da      	ldr	r2, [r3, #12]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f022 0202 	bic.w	r2, r2, #2
 80145f8:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	68da      	ldr	r2, [r3, #12]
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	f022 0204 	bic.w	r2, r2, #4
 8014608:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	6a1a      	ldr	r2, [r3, #32]
 8014610:	f241 1311 	movw	r3, #4369	; 0x1111
 8014614:	4013      	ands	r3, r2
 8014616:	2b00      	cmp	r3, #0
 8014618:	d10f      	bne.n	801463a <HAL_TIM_Encoder_Stop_IT+0xc2>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	6a1a      	ldr	r2, [r3, #32]
 8014620:	f240 4344 	movw	r3, #1092	; 0x444
 8014624:	4013      	ands	r3, r2
 8014626:	2b00      	cmp	r3, #0
 8014628:	d107      	bne.n	801463a <HAL_TIM_Encoder_Stop_IT+0xc2>
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	681a      	ldr	r2, [r3, #0]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	f022 0201 	bic.w	r2, r2, #1
 8014638:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d002      	beq.n	8014646 <HAL_TIM_Encoder_Stop_IT+0xce>
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	2b04      	cmp	r3, #4
 8014644:	d148      	bne.n	80146d8 <HAL_TIM_Encoder_Stop_IT+0x160>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d104      	bne.n	8014656 <HAL_TIM_Encoder_Stop_IT+0xde>
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2201      	movs	r2, #1
 8014650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014654:	e023      	b.n	801469e <HAL_TIM_Encoder_Stop_IT+0x126>
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	2b04      	cmp	r3, #4
 801465a:	d104      	bne.n	8014666 <HAL_TIM_Encoder_Stop_IT+0xee>
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2201      	movs	r2, #1
 8014660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014664:	e01b      	b.n	801469e <HAL_TIM_Encoder_Stop_IT+0x126>
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	2b08      	cmp	r3, #8
 801466a:	d104      	bne.n	8014676 <HAL_TIM_Encoder_Stop_IT+0xfe>
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	2201      	movs	r2, #1
 8014670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014674:	e013      	b.n	801469e <HAL_TIM_Encoder_Stop_IT+0x126>
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	2b0c      	cmp	r3, #12
 801467a:	d104      	bne.n	8014686 <HAL_TIM_Encoder_Stop_IT+0x10e>
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2201      	movs	r2, #1
 8014680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014684:	e00b      	b.n	801469e <HAL_TIM_Encoder_Stop_IT+0x126>
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	2b10      	cmp	r3, #16
 801468a:	d104      	bne.n	8014696 <HAL_TIM_Encoder_Stop_IT+0x11e>
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2201      	movs	r2, #1
 8014690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014694:	e003      	b.n	801469e <HAL_TIM_Encoder_Stop_IT+0x126>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2201      	movs	r2, #1
 801469a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d104      	bne.n	80146ae <HAL_TIM_Encoder_Stop_IT+0x136>
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2201      	movs	r2, #1
 80146a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146ac:	e024      	b.n	80146f8 <HAL_TIM_Encoder_Stop_IT+0x180>
 80146ae:	683b      	ldr	r3, [r7, #0]
 80146b0:	2b04      	cmp	r3, #4
 80146b2:	d104      	bne.n	80146be <HAL_TIM_Encoder_Stop_IT+0x146>
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2201      	movs	r2, #1
 80146b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80146bc:	e01c      	b.n	80146f8 <HAL_TIM_Encoder_Stop_IT+0x180>
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	2b08      	cmp	r3, #8
 80146c2:	d104      	bne.n	80146ce <HAL_TIM_Encoder_Stop_IT+0x156>
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2201      	movs	r2, #1
 80146c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80146cc:	e014      	b.n	80146f8 <HAL_TIM_Encoder_Stop_IT+0x180>
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2201      	movs	r2, #1
 80146d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80146d6:	e00f      	b.n	80146f8 <HAL_TIM_Encoder_Stop_IT+0x180>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2201      	movs	r2, #1
 80146dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2201      	movs	r2, #1
 80146e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	2201      	movs	r2, #1
 80146ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2201      	movs	r2, #1
 80146f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 80146f8:	2300      	movs	r3, #0
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3708      	adds	r7, #8
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}

08014702 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014702:	b580      	push	{r7, lr}
 8014704:	b082      	sub	sp, #8
 8014706:	af00      	add	r7, sp, #0
 8014708:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	691b      	ldr	r3, [r3, #16]
 8014710:	f003 0302 	and.w	r3, r3, #2
 8014714:	2b02      	cmp	r3, #2
 8014716:	d122      	bne.n	801475e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	f003 0302 	and.w	r3, r3, #2
 8014722:	2b02      	cmp	r3, #2
 8014724:	d11b      	bne.n	801475e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	f06f 0202 	mvn.w	r2, #2
 801472e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2201      	movs	r2, #1
 8014734:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	699b      	ldr	r3, [r3, #24]
 801473c:	f003 0303 	and.w	r3, r3, #3
 8014740:	2b00      	cmp	r3, #0
 8014742:	d003      	beq.n	801474c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f7f5 fc51 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 801474a:	e005      	b.n	8014758 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f7f5 fc23 	bl	8009f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 fa8c 	bl	8014c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2200      	movs	r2, #0
 801475c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	691b      	ldr	r3, [r3, #16]
 8014764:	f003 0304 	and.w	r3, r3, #4
 8014768:	2b04      	cmp	r3, #4
 801476a:	d122      	bne.n	80147b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	f003 0304 	and.w	r3, r3, #4
 8014776:	2b04      	cmp	r3, #4
 8014778:	d11b      	bne.n	80147b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	f06f 0204 	mvn.w	r2, #4
 8014782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2202      	movs	r2, #2
 8014788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	699b      	ldr	r3, [r3, #24]
 8014790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014794:	2b00      	cmp	r3, #0
 8014796:	d003      	beq.n	80147a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f7f5 fc27 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 801479e:	e005      	b.n	80147ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f7f5 fbf9 	bl	8009f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f000 fa62 	bl	8014c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2200      	movs	r2, #0
 80147b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	691b      	ldr	r3, [r3, #16]
 80147b8:	f003 0308 	and.w	r3, r3, #8
 80147bc:	2b08      	cmp	r3, #8
 80147be:	d122      	bne.n	8014806 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	68db      	ldr	r3, [r3, #12]
 80147c6:	f003 0308 	and.w	r3, r3, #8
 80147ca:	2b08      	cmp	r3, #8
 80147cc:	d11b      	bne.n	8014806 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	f06f 0208 	mvn.w	r2, #8
 80147d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2204      	movs	r2, #4
 80147dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	69db      	ldr	r3, [r3, #28]
 80147e4:	f003 0303 	and.w	r3, r3, #3
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d003      	beq.n	80147f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f7f5 fbfd 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 80147f2:	e005      	b.n	8014800 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f7f5 fbcf 	bl	8009f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f000 fa38 	bl	8014c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2200      	movs	r2, #0
 8014804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	f003 0310 	and.w	r3, r3, #16
 8014810:	2b10      	cmp	r3, #16
 8014812:	d122      	bne.n	801485a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	68db      	ldr	r3, [r3, #12]
 801481a:	f003 0310 	and.w	r3, r3, #16
 801481e:	2b10      	cmp	r3, #16
 8014820:	d11b      	bne.n	801485a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	f06f 0210 	mvn.w	r2, #16
 801482a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2208      	movs	r2, #8
 8014830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	69db      	ldr	r3, [r3, #28]
 8014838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801483c:	2b00      	cmp	r3, #0
 801483e:	d003      	beq.n	8014848 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f7f5 fbd3 	bl	8009fec <HAL_TIM_IC_CaptureCallback>
 8014846:	e005      	b.n	8014854 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	f7f5 fba5 	bl	8009f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f000 fa0e 	bl	8014c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2200      	movs	r2, #0
 8014858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	691b      	ldr	r3, [r3, #16]
 8014860:	f003 0301 	and.w	r3, r3, #1
 8014864:	2b01      	cmp	r3, #1
 8014866:	d10e      	bne.n	8014886 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	68db      	ldr	r3, [r3, #12]
 801486e:	f003 0301 	and.w	r3, r3, #1
 8014872:	2b01      	cmp	r3, #1
 8014874:	d107      	bne.n	8014886 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f06f 0201 	mvn.w	r2, #1
 801487e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 f9eb 	bl	8014c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	691b      	ldr	r3, [r3, #16]
 801488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014890:	2b80      	cmp	r3, #128	; 0x80
 8014892:	d10e      	bne.n	80148b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	68db      	ldr	r3, [r3, #12]
 801489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801489e:	2b80      	cmp	r3, #128	; 0x80
 80148a0:	d107      	bne.n	80148b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80148aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 fe99 	bl	80155e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	691b      	ldr	r3, [r3, #16]
 80148b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148c0:	d10e      	bne.n	80148e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	68db      	ldr	r3, [r3, #12]
 80148c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148cc:	2b80      	cmp	r3, #128	; 0x80
 80148ce:	d107      	bne.n	80148e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80148d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 fe8c 	bl	80155f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	691b      	ldr	r3, [r3, #16]
 80148e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148ea:	2b40      	cmp	r3, #64	; 0x40
 80148ec:	d10e      	bne.n	801490c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148f8:	2b40      	cmp	r3, #64	; 0x40
 80148fa:	d107      	bne.n	801490c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f000 f9bc 	bl	8014c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	691b      	ldr	r3, [r3, #16]
 8014912:	f003 0320 	and.w	r3, r3, #32
 8014916:	2b20      	cmp	r3, #32
 8014918:	d10e      	bne.n	8014938 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	f003 0320 	and.w	r3, r3, #32
 8014924:	2b20      	cmp	r3, #32
 8014926:	d107      	bne.n	8014938 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f06f 0220 	mvn.w	r2, #32
 8014930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 fe4c 	bl	80155d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014938:	bf00      	nop
 801493a:	3708      	adds	r7, #8
 801493c:	46bd      	mov	sp, r7
 801493e:	bd80      	pop	{r7, pc}

08014940 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b086      	sub	sp, #24
 8014944:	af00      	add	r7, sp, #0
 8014946:	60f8      	str	r0, [r7, #12]
 8014948:	60b9      	str	r1, [r7, #8]
 801494a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801494c:	2300      	movs	r3, #0
 801494e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014956:	2b01      	cmp	r3, #1
 8014958:	d101      	bne.n	801495e <HAL_TIM_OC_ConfigChannel+0x1e>
 801495a:	2302      	movs	r3, #2
 801495c:	e066      	b.n	8014a2c <HAL_TIM_OC_ConfigChannel+0xec>
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	2201      	movs	r2, #1
 8014962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	2b14      	cmp	r3, #20
 801496a:	d857      	bhi.n	8014a1c <HAL_TIM_OC_ConfigChannel+0xdc>
 801496c:	a201      	add	r2, pc, #4	; (adr r2, 8014974 <HAL_TIM_OC_ConfigChannel+0x34>)
 801496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014972:	bf00      	nop
 8014974:	080149c9 	.word	0x080149c9
 8014978:	08014a1d 	.word	0x08014a1d
 801497c:	08014a1d 	.word	0x08014a1d
 8014980:	08014a1d 	.word	0x08014a1d
 8014984:	080149d7 	.word	0x080149d7
 8014988:	08014a1d 	.word	0x08014a1d
 801498c:	08014a1d 	.word	0x08014a1d
 8014990:	08014a1d 	.word	0x08014a1d
 8014994:	080149e5 	.word	0x080149e5
 8014998:	08014a1d 	.word	0x08014a1d
 801499c:	08014a1d 	.word	0x08014a1d
 80149a0:	08014a1d 	.word	0x08014a1d
 80149a4:	080149f3 	.word	0x080149f3
 80149a8:	08014a1d 	.word	0x08014a1d
 80149ac:	08014a1d 	.word	0x08014a1d
 80149b0:	08014a1d 	.word	0x08014a1d
 80149b4:	08014a01 	.word	0x08014a01
 80149b8:	08014a1d 	.word	0x08014a1d
 80149bc:	08014a1d 	.word	0x08014a1d
 80149c0:	08014a1d 	.word	0x08014a1d
 80149c4:	08014a0f 	.word	0x08014a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	68b9      	ldr	r1, [r7, #8]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f000 f9fc 	bl	8014dcc <TIM_OC1_SetConfig>
      break;
 80149d4:	e025      	b.n	8014a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	68b9      	ldr	r1, [r7, #8]
 80149dc:	4618      	mov	r0, r3
 80149de:	f000 fa85 	bl	8014eec <TIM_OC2_SetConfig>
      break;
 80149e2:	e01e      	b.n	8014a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68b9      	ldr	r1, [r7, #8]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f000 fb08 	bl	8015000 <TIM_OC3_SetConfig>
      break;
 80149f0:	e017      	b.n	8014a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	68b9      	ldr	r1, [r7, #8]
 80149f8:	4618      	mov	r0, r3
 80149fa:	f000 fb89 	bl	8015110 <TIM_OC4_SetConfig>
      break;
 80149fe:	e010      	b.n	8014a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	68b9      	ldr	r1, [r7, #8]
 8014a06:	4618      	mov	r0, r3
 8014a08:	f000 fbec 	bl	80151e4 <TIM_OC5_SetConfig>
      break;
 8014a0c:	e009      	b.n	8014a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	68b9      	ldr	r1, [r7, #8]
 8014a14:	4618      	mov	r0, r3
 8014a16:	f000 fc49 	bl	80152ac <TIM_OC6_SetConfig>
      break;
 8014a1a:	e002      	b.n	8014a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8014a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2200      	movs	r2, #0
 8014a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	3718      	adds	r7, #24
 8014a30:	46bd      	mov	sp, r7
 8014a32:	bd80      	pop	{r7, pc}

08014a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b086      	sub	sp, #24
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	60f8      	str	r0, [r7, #12]
 8014a3c:	60b9      	str	r1, [r7, #8]
 8014a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014a40:	2300      	movs	r3, #0
 8014a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a4a:	2b01      	cmp	r3, #1
 8014a4c:	d101      	bne.n	8014a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014a4e:	2302      	movs	r3, #2
 8014a50:	e0ff      	b.n	8014c52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	2201      	movs	r2, #1
 8014a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b14      	cmp	r3, #20
 8014a5e:	f200 80f0 	bhi.w	8014c42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8014a62:	a201      	add	r2, pc, #4	; (adr r2, 8014a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a68:	08014abd 	.word	0x08014abd
 8014a6c:	08014c43 	.word	0x08014c43
 8014a70:	08014c43 	.word	0x08014c43
 8014a74:	08014c43 	.word	0x08014c43
 8014a78:	08014afd 	.word	0x08014afd
 8014a7c:	08014c43 	.word	0x08014c43
 8014a80:	08014c43 	.word	0x08014c43
 8014a84:	08014c43 	.word	0x08014c43
 8014a88:	08014b3f 	.word	0x08014b3f
 8014a8c:	08014c43 	.word	0x08014c43
 8014a90:	08014c43 	.word	0x08014c43
 8014a94:	08014c43 	.word	0x08014c43
 8014a98:	08014b7f 	.word	0x08014b7f
 8014a9c:	08014c43 	.word	0x08014c43
 8014aa0:	08014c43 	.word	0x08014c43
 8014aa4:	08014c43 	.word	0x08014c43
 8014aa8:	08014bc1 	.word	0x08014bc1
 8014aac:	08014c43 	.word	0x08014c43
 8014ab0:	08014c43 	.word	0x08014c43
 8014ab4:	08014c43 	.word	0x08014c43
 8014ab8:	08014c01 	.word	0x08014c01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	68b9      	ldr	r1, [r7, #8]
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f000 f982 	bl	8014dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	699a      	ldr	r2, [r3, #24]
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f042 0208 	orr.w	r2, r2, #8
 8014ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	699a      	ldr	r2, [r3, #24]
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	f022 0204 	bic.w	r2, r2, #4
 8014ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	6999      	ldr	r1, [r3, #24]
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	691a      	ldr	r2, [r3, #16]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	430a      	orrs	r2, r1
 8014af8:	619a      	str	r2, [r3, #24]
      break;
 8014afa:	e0a5      	b.n	8014c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	68b9      	ldr	r1, [r7, #8]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f000 f9f2 	bl	8014eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	699a      	ldr	r2, [r3, #24]
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	699a      	ldr	r2, [r3, #24]
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	6999      	ldr	r1, [r3, #24]
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	691b      	ldr	r3, [r3, #16]
 8014b32:	021a      	lsls	r2, r3, #8
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	430a      	orrs	r2, r1
 8014b3a:	619a      	str	r2, [r3, #24]
      break;
 8014b3c:	e084      	b.n	8014c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	68b9      	ldr	r1, [r7, #8]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f000 fa5b 	bl	8015000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	69da      	ldr	r2, [r3, #28]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	f042 0208 	orr.w	r2, r2, #8
 8014b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	69da      	ldr	r2, [r3, #28]
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	f022 0204 	bic.w	r2, r2, #4
 8014b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	69d9      	ldr	r1, [r3, #28]
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	691a      	ldr	r2, [r3, #16]
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	430a      	orrs	r2, r1
 8014b7a:	61da      	str	r2, [r3, #28]
      break;
 8014b7c:	e064      	b.n	8014c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	68b9      	ldr	r1, [r7, #8]
 8014b84:	4618      	mov	r0, r3
 8014b86:	f000 fac3 	bl	8015110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	69da      	ldr	r2, [r3, #28]
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	69da      	ldr	r2, [r3, #28]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	69d9      	ldr	r1, [r3, #28]
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	691b      	ldr	r3, [r3, #16]
 8014bb4:	021a      	lsls	r2, r3, #8
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	430a      	orrs	r2, r1
 8014bbc:	61da      	str	r2, [r3, #28]
      break;
 8014bbe:	e043      	b.n	8014c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	68b9      	ldr	r1, [r7, #8]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f000 fb0c 	bl	80151e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f042 0208 	orr.w	r2, r2, #8
 8014bda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	f022 0204 	bic.w	r2, r2, #4
 8014bea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	691a      	ldr	r2, [r3, #16]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	430a      	orrs	r2, r1
 8014bfc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014bfe:	e023      	b.n	8014c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	68b9      	ldr	r1, [r7, #8]
 8014c06:	4618      	mov	r0, r3
 8014c08:	f000 fb50 	bl	80152ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	691b      	ldr	r3, [r3, #16]
 8014c36:	021a      	lsls	r2, r3, #8
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	430a      	orrs	r2, r1
 8014c3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014c40:	e002      	b.n	8014c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014c42:	2301      	movs	r3, #1
 8014c44:	75fb      	strb	r3, [r7, #23]
      break;
 8014c46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3718      	adds	r7, #24
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop

08014c5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b083      	sub	sp, #12
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8014c64:	bf00      	nop
 8014c66:	370c      	adds	r7, #12
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6e:	4770      	bx	lr

08014c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014c70:	b480      	push	{r7}
 8014c72:	b083      	sub	sp, #12
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014c78:	bf00      	nop
 8014c7a:	370c      	adds	r7, #12
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c82:	4770      	bx	lr

08014c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014c84:	b480      	push	{r7}
 8014c86:	b083      	sub	sp, #12
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014c8c:	bf00      	nop
 8014c8e:	370c      	adds	r7, #12
 8014c90:	46bd      	mov	sp, r7
 8014c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c96:	4770      	bx	lr

08014c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b085      	sub	sp, #20
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
 8014ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4a40      	ldr	r2, [pc, #256]	; (8014dac <TIM_Base_SetConfig+0x114>)
 8014cac:	4293      	cmp	r3, r2
 8014cae:	d013      	beq.n	8014cd8 <TIM_Base_SetConfig+0x40>
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014cb6:	d00f      	beq.n	8014cd8 <TIM_Base_SetConfig+0x40>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	4a3d      	ldr	r2, [pc, #244]	; (8014db0 <TIM_Base_SetConfig+0x118>)
 8014cbc:	4293      	cmp	r3, r2
 8014cbe:	d00b      	beq.n	8014cd8 <TIM_Base_SetConfig+0x40>
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	4a3c      	ldr	r2, [pc, #240]	; (8014db4 <TIM_Base_SetConfig+0x11c>)
 8014cc4:	4293      	cmp	r3, r2
 8014cc6:	d007      	beq.n	8014cd8 <TIM_Base_SetConfig+0x40>
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	4a3b      	ldr	r2, [pc, #236]	; (8014db8 <TIM_Base_SetConfig+0x120>)
 8014ccc:	4293      	cmp	r3, r2
 8014cce:	d003      	beq.n	8014cd8 <TIM_Base_SetConfig+0x40>
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	4a3a      	ldr	r2, [pc, #232]	; (8014dbc <TIM_Base_SetConfig+0x124>)
 8014cd4:	4293      	cmp	r3, r2
 8014cd6:	d108      	bne.n	8014cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	4313      	orrs	r3, r2
 8014ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	4a2f      	ldr	r2, [pc, #188]	; (8014dac <TIM_Base_SetConfig+0x114>)
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	d01f      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014cf8:	d01b      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	4a2c      	ldr	r2, [pc, #176]	; (8014db0 <TIM_Base_SetConfig+0x118>)
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	d017      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	4a2b      	ldr	r2, [pc, #172]	; (8014db4 <TIM_Base_SetConfig+0x11c>)
 8014d06:	4293      	cmp	r3, r2
 8014d08:	d013      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	4a2a      	ldr	r2, [pc, #168]	; (8014db8 <TIM_Base_SetConfig+0x120>)
 8014d0e:	4293      	cmp	r3, r2
 8014d10:	d00f      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	4a29      	ldr	r2, [pc, #164]	; (8014dbc <TIM_Base_SetConfig+0x124>)
 8014d16:	4293      	cmp	r3, r2
 8014d18:	d00b      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	4a28      	ldr	r2, [pc, #160]	; (8014dc0 <TIM_Base_SetConfig+0x128>)
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d007      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	4a27      	ldr	r2, [pc, #156]	; (8014dc4 <TIM_Base_SetConfig+0x12c>)
 8014d26:	4293      	cmp	r3, r2
 8014d28:	d003      	beq.n	8014d32 <TIM_Base_SetConfig+0x9a>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	4a26      	ldr	r2, [pc, #152]	; (8014dc8 <TIM_Base_SetConfig+0x130>)
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	d108      	bne.n	8014d44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	68db      	ldr	r3, [r3, #12]
 8014d3e:	68fa      	ldr	r2, [r7, #12]
 8014d40:	4313      	orrs	r3, r2
 8014d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	695b      	ldr	r3, [r3, #20]
 8014d4e:	4313      	orrs	r3, r2
 8014d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	68fa      	ldr	r2, [r7, #12]
 8014d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	689a      	ldr	r2, [r3, #8]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	681a      	ldr	r2, [r3, #0]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	4a10      	ldr	r2, [pc, #64]	; (8014dac <TIM_Base_SetConfig+0x114>)
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	d00f      	beq.n	8014d90 <TIM_Base_SetConfig+0xf8>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	4a12      	ldr	r2, [pc, #72]	; (8014dbc <TIM_Base_SetConfig+0x124>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d00b      	beq.n	8014d90 <TIM_Base_SetConfig+0xf8>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4a11      	ldr	r2, [pc, #68]	; (8014dc0 <TIM_Base_SetConfig+0x128>)
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	d007      	beq.n	8014d90 <TIM_Base_SetConfig+0xf8>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	4a10      	ldr	r2, [pc, #64]	; (8014dc4 <TIM_Base_SetConfig+0x12c>)
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d003      	beq.n	8014d90 <TIM_Base_SetConfig+0xf8>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	4a0f      	ldr	r2, [pc, #60]	; (8014dc8 <TIM_Base_SetConfig+0x130>)
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d103      	bne.n	8014d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	691a      	ldr	r2, [r3, #16]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	615a      	str	r2, [r3, #20]
}
 8014d9e:	bf00      	nop
 8014da0:	3714      	adds	r7, #20
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	40012c00 	.word	0x40012c00
 8014db0:	40000400 	.word	0x40000400
 8014db4:	40000800 	.word	0x40000800
 8014db8:	40000c00 	.word	0x40000c00
 8014dbc:	40013400 	.word	0x40013400
 8014dc0:	40014000 	.word	0x40014000
 8014dc4:	40014400 	.word	0x40014400
 8014dc8:	40014800 	.word	0x40014800

08014dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b087      	sub	sp, #28
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	6a1b      	ldr	r3, [r3, #32]
 8014dda:	f023 0201 	bic.w	r2, r3, #1
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	6a1b      	ldr	r3, [r3, #32]
 8014de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	699b      	ldr	r3, [r3, #24]
 8014df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	f023 0303 	bic.w	r3, r3, #3
 8014e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	68fa      	ldr	r2, [r7, #12]
 8014e0e:	4313      	orrs	r3, r2
 8014e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	f023 0302 	bic.w	r3, r3, #2
 8014e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	689b      	ldr	r3, [r3, #8]
 8014e1e:	697a      	ldr	r2, [r7, #20]
 8014e20:	4313      	orrs	r3, r2
 8014e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	4a2c      	ldr	r2, [pc, #176]	; (8014ed8 <TIM_OC1_SetConfig+0x10c>)
 8014e28:	4293      	cmp	r3, r2
 8014e2a:	d00f      	beq.n	8014e4c <TIM_OC1_SetConfig+0x80>
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	4a2b      	ldr	r2, [pc, #172]	; (8014edc <TIM_OC1_SetConfig+0x110>)
 8014e30:	4293      	cmp	r3, r2
 8014e32:	d00b      	beq.n	8014e4c <TIM_OC1_SetConfig+0x80>
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	4a2a      	ldr	r2, [pc, #168]	; (8014ee0 <TIM_OC1_SetConfig+0x114>)
 8014e38:	4293      	cmp	r3, r2
 8014e3a:	d007      	beq.n	8014e4c <TIM_OC1_SetConfig+0x80>
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	4a29      	ldr	r2, [pc, #164]	; (8014ee4 <TIM_OC1_SetConfig+0x118>)
 8014e40:	4293      	cmp	r3, r2
 8014e42:	d003      	beq.n	8014e4c <TIM_OC1_SetConfig+0x80>
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	4a28      	ldr	r2, [pc, #160]	; (8014ee8 <TIM_OC1_SetConfig+0x11c>)
 8014e48:	4293      	cmp	r3, r2
 8014e4a:	d10c      	bne.n	8014e66 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	f023 0308 	bic.w	r3, r3, #8
 8014e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	697a      	ldr	r2, [r7, #20]
 8014e5a:	4313      	orrs	r3, r2
 8014e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	f023 0304 	bic.w	r3, r3, #4
 8014e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	4a1b      	ldr	r2, [pc, #108]	; (8014ed8 <TIM_OC1_SetConfig+0x10c>)
 8014e6a:	4293      	cmp	r3, r2
 8014e6c:	d00f      	beq.n	8014e8e <TIM_OC1_SetConfig+0xc2>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	4a1a      	ldr	r2, [pc, #104]	; (8014edc <TIM_OC1_SetConfig+0x110>)
 8014e72:	4293      	cmp	r3, r2
 8014e74:	d00b      	beq.n	8014e8e <TIM_OC1_SetConfig+0xc2>
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	4a19      	ldr	r2, [pc, #100]	; (8014ee0 <TIM_OC1_SetConfig+0x114>)
 8014e7a:	4293      	cmp	r3, r2
 8014e7c:	d007      	beq.n	8014e8e <TIM_OC1_SetConfig+0xc2>
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4a18      	ldr	r2, [pc, #96]	; (8014ee4 <TIM_OC1_SetConfig+0x118>)
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d003      	beq.n	8014e8e <TIM_OC1_SetConfig+0xc2>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	4a17      	ldr	r2, [pc, #92]	; (8014ee8 <TIM_OC1_SetConfig+0x11c>)
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d111      	bne.n	8014eb2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014e8e:	693b      	ldr	r3, [r7, #16]
 8014e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014e96:	693b      	ldr	r3, [r7, #16]
 8014e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	695b      	ldr	r3, [r3, #20]
 8014ea2:	693a      	ldr	r2, [r7, #16]
 8014ea4:	4313      	orrs	r3, r2
 8014ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	699b      	ldr	r3, [r3, #24]
 8014eac:	693a      	ldr	r2, [r7, #16]
 8014eae:	4313      	orrs	r3, r2
 8014eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	693a      	ldr	r2, [r7, #16]
 8014eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	68fa      	ldr	r2, [r7, #12]
 8014ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	685a      	ldr	r2, [r3, #4]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	697a      	ldr	r2, [r7, #20]
 8014eca:	621a      	str	r2, [r3, #32]
}
 8014ecc:	bf00      	nop
 8014ece:	371c      	adds	r7, #28
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed6:	4770      	bx	lr
 8014ed8:	40012c00 	.word	0x40012c00
 8014edc:	40013400 	.word	0x40013400
 8014ee0:	40014000 	.word	0x40014000
 8014ee4:	40014400 	.word	0x40014400
 8014ee8:	40014800 	.word	0x40014800

08014eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014eec:	b480      	push	{r7}
 8014eee:	b087      	sub	sp, #28
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6a1b      	ldr	r3, [r3, #32]
 8014efa:	f023 0210 	bic.w	r2, r3, #16
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	6a1b      	ldr	r3, [r3, #32]
 8014f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	685b      	ldr	r3, [r3, #4]
 8014f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	699b      	ldr	r3, [r3, #24]
 8014f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	021b      	lsls	r3, r3, #8
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	4313      	orrs	r3, r2
 8014f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	f023 0320 	bic.w	r3, r3, #32
 8014f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	689b      	ldr	r3, [r3, #8]
 8014f40:	011b      	lsls	r3, r3, #4
 8014f42:	697a      	ldr	r2, [r7, #20]
 8014f44:	4313      	orrs	r3, r2
 8014f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	4a28      	ldr	r2, [pc, #160]	; (8014fec <TIM_OC2_SetConfig+0x100>)
 8014f4c:	4293      	cmp	r3, r2
 8014f4e:	d003      	beq.n	8014f58 <TIM_OC2_SetConfig+0x6c>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	4a27      	ldr	r2, [pc, #156]	; (8014ff0 <TIM_OC2_SetConfig+0x104>)
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d10d      	bne.n	8014f74 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	011b      	lsls	r3, r3, #4
 8014f66:	697a      	ldr	r2, [r7, #20]
 8014f68:	4313      	orrs	r3, r2
 8014f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	4a1d      	ldr	r2, [pc, #116]	; (8014fec <TIM_OC2_SetConfig+0x100>)
 8014f78:	4293      	cmp	r3, r2
 8014f7a:	d00f      	beq.n	8014f9c <TIM_OC2_SetConfig+0xb0>
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	4a1c      	ldr	r2, [pc, #112]	; (8014ff0 <TIM_OC2_SetConfig+0x104>)
 8014f80:	4293      	cmp	r3, r2
 8014f82:	d00b      	beq.n	8014f9c <TIM_OC2_SetConfig+0xb0>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	4a1b      	ldr	r2, [pc, #108]	; (8014ff4 <TIM_OC2_SetConfig+0x108>)
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	d007      	beq.n	8014f9c <TIM_OC2_SetConfig+0xb0>
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	4a1a      	ldr	r2, [pc, #104]	; (8014ff8 <TIM_OC2_SetConfig+0x10c>)
 8014f90:	4293      	cmp	r3, r2
 8014f92:	d003      	beq.n	8014f9c <TIM_OC2_SetConfig+0xb0>
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	4a19      	ldr	r2, [pc, #100]	; (8014ffc <TIM_OC2_SetConfig+0x110>)
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	d113      	bne.n	8014fc4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	695b      	ldr	r3, [r3, #20]
 8014fb0:	009b      	lsls	r3, r3, #2
 8014fb2:	693a      	ldr	r2, [r7, #16]
 8014fb4:	4313      	orrs	r3, r2
 8014fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	699b      	ldr	r3, [r3, #24]
 8014fbc:	009b      	lsls	r3, r3, #2
 8014fbe:	693a      	ldr	r2, [r7, #16]
 8014fc0:	4313      	orrs	r3, r2
 8014fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	693a      	ldr	r2, [r7, #16]
 8014fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	68fa      	ldr	r2, [r7, #12]
 8014fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	685a      	ldr	r2, [r3, #4]
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	697a      	ldr	r2, [r7, #20]
 8014fdc:	621a      	str	r2, [r3, #32]
}
 8014fde:	bf00      	nop
 8014fe0:	371c      	adds	r7, #28
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe8:	4770      	bx	lr
 8014fea:	bf00      	nop
 8014fec:	40012c00 	.word	0x40012c00
 8014ff0:	40013400 	.word	0x40013400
 8014ff4:	40014000 	.word	0x40014000
 8014ff8:	40014400 	.word	0x40014400
 8014ffc:	40014800 	.word	0x40014800

08015000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015000:	b480      	push	{r7}
 8015002:	b087      	sub	sp, #28
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6a1b      	ldr	r3, [r3, #32]
 801500e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6a1b      	ldr	r3, [r3, #32]
 801501a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	685b      	ldr	r3, [r3, #4]
 8015020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	69db      	ldr	r3, [r3, #28]
 8015026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f023 0303 	bic.w	r3, r3, #3
 801503a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	68fa      	ldr	r2, [r7, #12]
 8015042:	4313      	orrs	r3, r2
 8015044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801504c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	689b      	ldr	r3, [r3, #8]
 8015052:	021b      	lsls	r3, r3, #8
 8015054:	697a      	ldr	r2, [r7, #20]
 8015056:	4313      	orrs	r3, r2
 8015058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	4a27      	ldr	r2, [pc, #156]	; (80150fc <TIM_OC3_SetConfig+0xfc>)
 801505e:	4293      	cmp	r3, r2
 8015060:	d003      	beq.n	801506a <TIM_OC3_SetConfig+0x6a>
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	4a26      	ldr	r2, [pc, #152]	; (8015100 <TIM_OC3_SetConfig+0x100>)
 8015066:	4293      	cmp	r3, r2
 8015068:	d10d      	bne.n	8015086 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	68db      	ldr	r3, [r3, #12]
 8015076:	021b      	lsls	r3, r3, #8
 8015078:	697a      	ldr	r2, [r7, #20]
 801507a:	4313      	orrs	r3, r2
 801507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4a1c      	ldr	r2, [pc, #112]	; (80150fc <TIM_OC3_SetConfig+0xfc>)
 801508a:	4293      	cmp	r3, r2
 801508c:	d00f      	beq.n	80150ae <TIM_OC3_SetConfig+0xae>
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	4a1b      	ldr	r2, [pc, #108]	; (8015100 <TIM_OC3_SetConfig+0x100>)
 8015092:	4293      	cmp	r3, r2
 8015094:	d00b      	beq.n	80150ae <TIM_OC3_SetConfig+0xae>
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	4a1a      	ldr	r2, [pc, #104]	; (8015104 <TIM_OC3_SetConfig+0x104>)
 801509a:	4293      	cmp	r3, r2
 801509c:	d007      	beq.n	80150ae <TIM_OC3_SetConfig+0xae>
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	4a19      	ldr	r2, [pc, #100]	; (8015108 <TIM_OC3_SetConfig+0x108>)
 80150a2:	4293      	cmp	r3, r2
 80150a4:	d003      	beq.n	80150ae <TIM_OC3_SetConfig+0xae>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	4a18      	ldr	r2, [pc, #96]	; (801510c <TIM_OC3_SetConfig+0x10c>)
 80150aa:	4293      	cmp	r3, r2
 80150ac:	d113      	bne.n	80150d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80150bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	695b      	ldr	r3, [r3, #20]
 80150c2:	011b      	lsls	r3, r3, #4
 80150c4:	693a      	ldr	r2, [r7, #16]
 80150c6:	4313      	orrs	r3, r2
 80150c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	699b      	ldr	r3, [r3, #24]
 80150ce:	011b      	lsls	r3, r3, #4
 80150d0:	693a      	ldr	r2, [r7, #16]
 80150d2:	4313      	orrs	r3, r2
 80150d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	693a      	ldr	r2, [r7, #16]
 80150da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	68fa      	ldr	r2, [r7, #12]
 80150e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	685a      	ldr	r2, [r3, #4]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	697a      	ldr	r2, [r7, #20]
 80150ee:	621a      	str	r2, [r3, #32]
}
 80150f0:	bf00      	nop
 80150f2:	371c      	adds	r7, #28
 80150f4:	46bd      	mov	sp, r7
 80150f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fa:	4770      	bx	lr
 80150fc:	40012c00 	.word	0x40012c00
 8015100:	40013400 	.word	0x40013400
 8015104:	40014000 	.word	0x40014000
 8015108:	40014400 	.word	0x40014400
 801510c:	40014800 	.word	0x40014800

08015110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8015110:	b480      	push	{r7}
 8015112:	b087      	sub	sp, #28
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6a1b      	ldr	r3, [r3, #32]
 801511e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6a1b      	ldr	r3, [r3, #32]
 801512a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	685b      	ldr	r3, [r3, #4]
 8015130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	69db      	ldr	r3, [r3, #28]
 8015136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801514c:	683b      	ldr	r3, [r7, #0]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	021b      	lsls	r3, r3, #8
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	4313      	orrs	r3, r2
 8015156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801515e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	689b      	ldr	r3, [r3, #8]
 8015164:	031b      	lsls	r3, r3, #12
 8015166:	693a      	ldr	r2, [r7, #16]
 8015168:	4313      	orrs	r3, r2
 801516a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	4a18      	ldr	r2, [pc, #96]	; (80151d0 <TIM_OC4_SetConfig+0xc0>)
 8015170:	4293      	cmp	r3, r2
 8015172:	d00f      	beq.n	8015194 <TIM_OC4_SetConfig+0x84>
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	4a17      	ldr	r2, [pc, #92]	; (80151d4 <TIM_OC4_SetConfig+0xc4>)
 8015178:	4293      	cmp	r3, r2
 801517a:	d00b      	beq.n	8015194 <TIM_OC4_SetConfig+0x84>
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	4a16      	ldr	r2, [pc, #88]	; (80151d8 <TIM_OC4_SetConfig+0xc8>)
 8015180:	4293      	cmp	r3, r2
 8015182:	d007      	beq.n	8015194 <TIM_OC4_SetConfig+0x84>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	4a15      	ldr	r2, [pc, #84]	; (80151dc <TIM_OC4_SetConfig+0xcc>)
 8015188:	4293      	cmp	r3, r2
 801518a:	d003      	beq.n	8015194 <TIM_OC4_SetConfig+0x84>
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	4a14      	ldr	r2, [pc, #80]	; (80151e0 <TIM_OC4_SetConfig+0xd0>)
 8015190:	4293      	cmp	r3, r2
 8015192:	d109      	bne.n	80151a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801519a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	695b      	ldr	r3, [r3, #20]
 80151a0:	019b      	lsls	r3, r3, #6
 80151a2:	697a      	ldr	r2, [r7, #20]
 80151a4:	4313      	orrs	r3, r2
 80151a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	697a      	ldr	r2, [r7, #20]
 80151ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	68fa      	ldr	r2, [r7, #12]
 80151b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	685a      	ldr	r2, [r3, #4]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	693a      	ldr	r2, [r7, #16]
 80151c0:	621a      	str	r2, [r3, #32]
}
 80151c2:	bf00      	nop
 80151c4:	371c      	adds	r7, #28
 80151c6:	46bd      	mov	sp, r7
 80151c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151cc:	4770      	bx	lr
 80151ce:	bf00      	nop
 80151d0:	40012c00 	.word	0x40012c00
 80151d4:	40013400 	.word	0x40013400
 80151d8:	40014000 	.word	0x40014000
 80151dc:	40014400 	.word	0x40014400
 80151e0:	40014800 	.word	0x40014800

080151e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b087      	sub	sp, #28
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6a1b      	ldr	r3, [r3, #32]
 80151f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	6a1b      	ldr	r3, [r3, #32]
 80151fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	68fa      	ldr	r2, [r7, #12]
 801521e:	4313      	orrs	r3, r2
 8015220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8015222:	693b      	ldr	r3, [r7, #16]
 8015224:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8015228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	689b      	ldr	r3, [r3, #8]
 801522e:	041b      	lsls	r3, r3, #16
 8015230:	693a      	ldr	r2, [r7, #16]
 8015232:	4313      	orrs	r3, r2
 8015234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	4a17      	ldr	r2, [pc, #92]	; (8015298 <TIM_OC5_SetConfig+0xb4>)
 801523a:	4293      	cmp	r3, r2
 801523c:	d00f      	beq.n	801525e <TIM_OC5_SetConfig+0x7a>
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	4a16      	ldr	r2, [pc, #88]	; (801529c <TIM_OC5_SetConfig+0xb8>)
 8015242:	4293      	cmp	r3, r2
 8015244:	d00b      	beq.n	801525e <TIM_OC5_SetConfig+0x7a>
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	4a15      	ldr	r2, [pc, #84]	; (80152a0 <TIM_OC5_SetConfig+0xbc>)
 801524a:	4293      	cmp	r3, r2
 801524c:	d007      	beq.n	801525e <TIM_OC5_SetConfig+0x7a>
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	4a14      	ldr	r2, [pc, #80]	; (80152a4 <TIM_OC5_SetConfig+0xc0>)
 8015252:	4293      	cmp	r3, r2
 8015254:	d003      	beq.n	801525e <TIM_OC5_SetConfig+0x7a>
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	4a13      	ldr	r2, [pc, #76]	; (80152a8 <TIM_OC5_SetConfig+0xc4>)
 801525a:	4293      	cmp	r3, r2
 801525c:	d109      	bne.n	8015272 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801525e:	697b      	ldr	r3, [r7, #20]
 8015260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	695b      	ldr	r3, [r3, #20]
 801526a:	021b      	lsls	r3, r3, #8
 801526c:	697a      	ldr	r2, [r7, #20]
 801526e:	4313      	orrs	r3, r2
 8015270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	697a      	ldr	r2, [r7, #20]
 8015276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	68fa      	ldr	r2, [r7, #12]
 801527c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801527e:	683b      	ldr	r3, [r7, #0]
 8015280:	685a      	ldr	r2, [r3, #4]
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	693a      	ldr	r2, [r7, #16]
 801528a:	621a      	str	r2, [r3, #32]
}
 801528c:	bf00      	nop
 801528e:	371c      	adds	r7, #28
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr
 8015298:	40012c00 	.word	0x40012c00
 801529c:	40013400 	.word	0x40013400
 80152a0:	40014000 	.word	0x40014000
 80152a4:	40014400 	.word	0x40014400
 80152a8:	40014800 	.word	0x40014800

080152ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80152ac:	b480      	push	{r7}
 80152ae:	b087      	sub	sp, #28
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6a1b      	ldr	r3, [r3, #32]
 80152ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6a1b      	ldr	r3, [r3, #32]
 80152c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80152da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80152de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	021b      	lsls	r3, r3, #8
 80152e6:	68fa      	ldr	r2, [r7, #12]
 80152e8:	4313      	orrs	r3, r2
 80152ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80152f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	689b      	ldr	r3, [r3, #8]
 80152f8:	051b      	lsls	r3, r3, #20
 80152fa:	693a      	ldr	r2, [r7, #16]
 80152fc:	4313      	orrs	r3, r2
 80152fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	4a18      	ldr	r2, [pc, #96]	; (8015364 <TIM_OC6_SetConfig+0xb8>)
 8015304:	4293      	cmp	r3, r2
 8015306:	d00f      	beq.n	8015328 <TIM_OC6_SetConfig+0x7c>
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	4a17      	ldr	r2, [pc, #92]	; (8015368 <TIM_OC6_SetConfig+0xbc>)
 801530c:	4293      	cmp	r3, r2
 801530e:	d00b      	beq.n	8015328 <TIM_OC6_SetConfig+0x7c>
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	4a16      	ldr	r2, [pc, #88]	; (801536c <TIM_OC6_SetConfig+0xc0>)
 8015314:	4293      	cmp	r3, r2
 8015316:	d007      	beq.n	8015328 <TIM_OC6_SetConfig+0x7c>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	4a15      	ldr	r2, [pc, #84]	; (8015370 <TIM_OC6_SetConfig+0xc4>)
 801531c:	4293      	cmp	r3, r2
 801531e:	d003      	beq.n	8015328 <TIM_OC6_SetConfig+0x7c>
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	4a14      	ldr	r2, [pc, #80]	; (8015374 <TIM_OC6_SetConfig+0xc8>)
 8015324:	4293      	cmp	r3, r2
 8015326:	d109      	bne.n	801533c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801532e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	695b      	ldr	r3, [r3, #20]
 8015334:	029b      	lsls	r3, r3, #10
 8015336:	697a      	ldr	r2, [r7, #20]
 8015338:	4313      	orrs	r3, r2
 801533a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	697a      	ldr	r2, [r7, #20]
 8015340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	68fa      	ldr	r2, [r7, #12]
 8015346:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	685a      	ldr	r2, [r3, #4]
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	693a      	ldr	r2, [r7, #16]
 8015354:	621a      	str	r2, [r3, #32]
}
 8015356:	bf00      	nop
 8015358:	371c      	adds	r7, #28
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr
 8015362:	bf00      	nop
 8015364:	40012c00 	.word	0x40012c00
 8015368:	40013400 	.word	0x40013400
 801536c:	40014000 	.word	0x40014000
 8015370:	40014400 	.word	0x40014400
 8015374:	40014800 	.word	0x40014800

08015378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015378:	b480      	push	{r7}
 801537a:	b087      	sub	sp, #28
 801537c:	af00      	add	r7, sp, #0
 801537e:	60f8      	str	r0, [r7, #12]
 8015380:	60b9      	str	r1, [r7, #8]
 8015382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	f003 031f 	and.w	r3, r3, #31
 801538a:	2201      	movs	r2, #1
 801538c:	fa02 f303 	lsl.w	r3, r2, r3
 8015390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	6a1a      	ldr	r2, [r3, #32]
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	43db      	mvns	r3, r3
 801539a:	401a      	ands	r2, r3
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6a1a      	ldr	r2, [r3, #32]
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	f003 031f 	and.w	r3, r3, #31
 80153aa:	6879      	ldr	r1, [r7, #4]
 80153ac:	fa01 f303 	lsl.w	r3, r1, r3
 80153b0:	431a      	orrs	r2, r3
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	621a      	str	r2, [r3, #32]
}
 80153b6:	bf00      	nop
 80153b8:	371c      	adds	r7, #28
 80153ba:	46bd      	mov	sp, r7
 80153bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c0:	4770      	bx	lr
	...

080153c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b085      	sub	sp, #20
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80153d4:	2b01      	cmp	r3, #1
 80153d6:	d101      	bne.n	80153dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80153d8:	2302      	movs	r3, #2
 80153da:	e068      	b.n	80154ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2201      	movs	r2, #1
 80153e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2202      	movs	r2, #2
 80153e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	689b      	ldr	r3, [r3, #8]
 80153fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	4a2e      	ldr	r2, [pc, #184]	; (80154bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8015402:	4293      	cmp	r3, r2
 8015404:	d004      	beq.n	8015410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	4a2d      	ldr	r2, [pc, #180]	; (80154c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801540c:	4293      	cmp	r3, r2
 801540e:	d108      	bne.n	8015422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8015416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	68fa      	ldr	r2, [r7, #12]
 801541e:	4313      	orrs	r3, r2
 8015420:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	68fa      	ldr	r2, [r7, #12]
 8015430:	4313      	orrs	r3, r2
 8015432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	4a1e      	ldr	r2, [pc, #120]	; (80154bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8015442:	4293      	cmp	r3, r2
 8015444:	d01d      	beq.n	8015482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801544e:	d018      	beq.n	8015482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	4a1b      	ldr	r2, [pc, #108]	; (80154c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015456:	4293      	cmp	r3, r2
 8015458:	d013      	beq.n	8015482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	4a1a      	ldr	r2, [pc, #104]	; (80154c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015460:	4293      	cmp	r3, r2
 8015462:	d00e      	beq.n	8015482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	4a18      	ldr	r2, [pc, #96]	; (80154cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801546a:	4293      	cmp	r3, r2
 801546c:	d009      	beq.n	8015482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	4a13      	ldr	r2, [pc, #76]	; (80154c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8015474:	4293      	cmp	r3, r2
 8015476:	d004      	beq.n	8015482 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	4a14      	ldr	r2, [pc, #80]	; (80154d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801547e:	4293      	cmp	r3, r2
 8015480:	d10c      	bne.n	801549c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	689b      	ldr	r3, [r3, #8]
 801548e:	68ba      	ldr	r2, [r7, #8]
 8015490:	4313      	orrs	r3, r2
 8015492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	68ba      	ldr	r2, [r7, #8]
 801549a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2201      	movs	r2, #1
 80154a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2200      	movs	r2, #0
 80154a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80154ac:	2300      	movs	r3, #0
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3714      	adds	r7, #20
 80154b2:	46bd      	mov	sp, r7
 80154b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop
 80154bc:	40012c00 	.word	0x40012c00
 80154c0:	40013400 	.word	0x40013400
 80154c4:	40000400 	.word	0x40000400
 80154c8:	40000800 	.word	0x40000800
 80154cc:	40000c00 	.word	0x40000c00
 80154d0:	40014000 	.word	0x40014000

080154d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80154d4:	b480      	push	{r7}
 80154d6:	b085      	sub	sp, #20
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80154de:	2300      	movs	r3, #0
 80154e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80154e8:	2b01      	cmp	r3, #1
 80154ea:	d101      	bne.n	80154f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80154ec:	2302      	movs	r3, #2
 80154ee:	e065      	b.n	80155bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2201      	movs	r2, #1
 80154f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	68db      	ldr	r3, [r3, #12]
 8015502:	4313      	orrs	r3, r2
 8015504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	689b      	ldr	r3, [r3, #8]
 8015510:	4313      	orrs	r3, r2
 8015512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801551a:	683b      	ldr	r3, [r7, #0]
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	4313      	orrs	r3, r2
 8015520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	4313      	orrs	r3, r2
 801552e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	691b      	ldr	r3, [r3, #16]
 801553a:	4313      	orrs	r3, r2
 801553c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	695b      	ldr	r3, [r3, #20]
 8015548:	4313      	orrs	r3, r2
 801554a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015556:	4313      	orrs	r3, r2
 8015558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	699b      	ldr	r3, [r3, #24]
 8015564:	041b      	lsls	r3, r3, #16
 8015566:	4313      	orrs	r3, r2
 8015568:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	4a16      	ldr	r2, [pc, #88]	; (80155c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8015570:	4293      	cmp	r3, r2
 8015572:	d004      	beq.n	801557e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4a14      	ldr	r2, [pc, #80]	; (80155cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801557a:	4293      	cmp	r3, r2
 801557c:	d115      	bne.n	80155aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015588:	051b      	lsls	r3, r3, #20
 801558a:	4313      	orrs	r3, r2
 801558c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	69db      	ldr	r3, [r3, #28]
 8015598:	4313      	orrs	r3, r2
 801559a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	6a1b      	ldr	r3, [r3, #32]
 80155a6:	4313      	orrs	r3, r2
 80155a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	68fa      	ldr	r2, [r7, #12]
 80155b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2200      	movs	r2, #0
 80155b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80155ba:	2300      	movs	r3, #0
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3714      	adds	r7, #20
 80155c0:	46bd      	mov	sp, r7
 80155c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c6:	4770      	bx	lr
 80155c8:	40012c00 	.word	0x40012c00
 80155cc:	40013400 	.word	0x40013400

080155d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80155d0:	b480      	push	{r7}
 80155d2:	b083      	sub	sp, #12
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80155d8:	bf00      	nop
 80155da:	370c      	adds	r7, #12
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr

080155e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80155e4:	b480      	push	{r7}
 80155e6:	b083      	sub	sp, #12
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80155ec:	bf00      	nop
 80155ee:	370c      	adds	r7, #12
 80155f0:	46bd      	mov	sp, r7
 80155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f6:	4770      	bx	lr

080155f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80155f8:	b480      	push	{r7}
 80155fa:	b083      	sub	sp, #12
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015600:	bf00      	nop
 8015602:	370c      	adds	r7, #12
 8015604:	46bd      	mov	sp, r7
 8015606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560a:	4770      	bx	lr

0801560c <arm_radix8_butterfly_f32>:
 801560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015610:	ed2d 8b10 	vpush	{d8-d15}
 8015614:	b09d      	sub	sp, #116	; 0x74
 8015616:	461c      	mov	r4, r3
 8015618:	ed9f bac8 	vldr	s22, [pc, #800]	; 801593c <arm_radix8_butterfly_f32+0x330>
 801561c:	921a      	str	r2, [sp, #104]	; 0x68
 801561e:	1d03      	adds	r3, r0, #4
 8015620:	4682      	mov	sl, r0
 8015622:	4689      	mov	r9, r1
 8015624:	468b      	mov	fp, r1
 8015626:	931b      	str	r3, [sp, #108]	; 0x6c
 8015628:	9400      	str	r4, [sp, #0]
 801562a:	469e      	mov	lr, r3
 801562c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8015630:	005a      	lsls	r2, r3, #1
 8015632:	18d6      	adds	r6, r2, r3
 8015634:	18f5      	adds	r5, r6, r3
 8015636:	9203      	str	r2, [sp, #12]
 8015638:	195a      	adds	r2, r3, r5
 801563a:	18d0      	adds	r0, r2, r3
 801563c:	00df      	lsls	r7, r3, #3
 801563e:	1819      	adds	r1, r3, r0
 8015640:	463c      	mov	r4, r7
 8015642:	9701      	str	r7, [sp, #4]
 8015644:	4457      	add	r7, sl
 8015646:	930c      	str	r3, [sp, #48]	; 0x30
 8015648:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801564c:	011b      	lsls	r3, r3, #4
 801564e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8015652:	eb07 0c04 	add.w	ip, r7, r4
 8015656:	9c00      	ldr	r4, [sp, #0]
 8015658:	9302      	str	r3, [sp, #8]
 801565a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 801565e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8015662:	3204      	adds	r2, #4
 8015664:	3104      	adds	r1, #4
 8015666:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 801566a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801566e:	f04f 0800 	mov.w	r8, #0
 8015672:	eddc 7a00 	vldr	s15, [ip]
 8015676:	edd7 6a00 	vldr	s13, [r7]
 801567a:	edd6 3a00 	vldr	s7, [r6]
 801567e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8015682:	edd5 4a00 	vldr	s9, [r5]
 8015686:	ed90 2a00 	vldr	s4, [r0]
 801568a:	ed12 7a01 	vldr	s14, [r2, #-4]
 801568e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8015692:	ee77 8a82 	vadd.f32	s17, s15, s4
 8015696:	ee33 4aa0 	vadd.f32	s8, s7, s1
 801569a:	ee76 1a87 	vadd.f32	s3, s13, s14
 801569e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 80156a2:	ee31 6a84 	vadd.f32	s12, s3, s8
 80156a6:	ee33 5a28 	vadd.f32	s10, s6, s17
 80156aa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80156ae:	ee75 6a06 	vadd.f32	s13, s10, s12
 80156b2:	ee35 5a46 	vsub.f32	s10, s10, s12
 80156b6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80156ba:	ed85 5a00 	vstr	s10, [r5]
 80156be:	ed96 1a01 	vldr	s2, [r6, #4]
 80156c2:	edd7 5a01 	vldr	s11, [r7, #4]
 80156c6:	ed92 aa00 	vldr	s20, [r2]
 80156ca:	ed91 6a00 	vldr	s12, [r1]
 80156ce:	ed9e 9a00 	vldr	s18, [lr]
 80156d2:	ed95 5a01 	vldr	s10, [r5, #4]
 80156d6:	eddc 6a01 	vldr	s13, [ip, #4]
 80156da:	edd0 9a01 	vldr	s19, [r0, #4]
 80156de:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80156e2:	ee71 2a46 	vsub.f32	s5, s2, s12
 80156e6:	ee75 3aca 	vsub.f32	s7, s11, s20
 80156ea:	ee37 0a60 	vsub.f32	s0, s14, s1
 80156ee:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80156f2:	ee37 7a20 	vadd.f32	s14, s14, s1
 80156f6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80156fa:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80156fe:	ee79 3a05 	vadd.f32	s7, s18, s10
 8015702:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8015706:	ee39 5a45 	vsub.f32	s10, s18, s10
 801570a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 801570e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8015712:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8015716:	ee31 6a06 	vadd.f32	s12, s2, s12
 801571a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 801571e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8015722:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8015726:	ee67 7a0b 	vmul.f32	s15, s14, s22
 801572a:	ee33 3a68 	vsub.f32	s6, s6, s17
 801572e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8015732:	ee75 8a86 	vadd.f32	s17, s11, s12
 8015736:	ee36 7ac8 	vsub.f32	s14, s13, s16
 801573a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 801573e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8015742:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8015746:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801574a:	ee33 1a89 	vadd.f32	s2, s7, s18
 801574e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8015752:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8015756:	ee75 4a22 	vadd.f32	s9, s10, s5
 801575a:	ee32 5a27 	vadd.f32	s10, s4, s15
 801575e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8015762:	ee33 8a06 	vadd.f32	s16, s6, s12
 8015766:	ee75 2a87 	vadd.f32	s5, s11, s14
 801576a:	ee31 9a28 	vadd.f32	s18, s2, s17
 801576e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8015772:	ee74 0a61 	vsub.f32	s1, s8, s3
 8015776:	ee33 2a80 	vadd.f32	s4, s7, s0
 801577a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801577e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8015782:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8015786:	ee31 1a68 	vsub.f32	s2, s2, s17
 801578a:	ee34 4a21 	vadd.f32	s8, s8, s3
 801578e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8015792:	ee74 4a85 	vadd.f32	s9, s9, s10
 8015796:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801579a:	44d8      	add	r8, fp
 801579c:	45c1      	cmp	r9, r8
 801579e:	ed8e 9a00 	vstr	s18, [lr]
 80157a2:	ed85 1a01 	vstr	s2, [r5, #4]
 80157a6:	449e      	add	lr, r3
 80157a8:	ed8c 8a00 	vstr	s16, [ip]
 80157ac:	441d      	add	r5, r3
 80157ae:	ed80 6a00 	vstr	s12, [r0]
 80157b2:	edcc 0a01 	vstr	s1, [ip, #4]
 80157b6:	ed80 4a01 	vstr	s8, [r0, #4]
 80157ba:	449c      	add	ip, r3
 80157bc:	ed87 2a00 	vstr	s4, [r7]
 80157c0:	4418      	add	r0, r3
 80157c2:	ed41 3a01 	vstr	s7, [r1, #-4]
 80157c6:	ed42 2a01 	vstr	s5, [r2, #-4]
 80157ca:	ed86 7a00 	vstr	s14, [r6]
 80157ce:	ed87 3a01 	vstr	s6, [r7, #4]
 80157d2:	edc1 4a00 	vstr	s9, [r1]
 80157d6:	441f      	add	r7, r3
 80157d8:	edc2 5a00 	vstr	s11, [r2]
 80157dc:	4419      	add	r1, r3
 80157de:	edc6 6a01 	vstr	s13, [r6, #4]
 80157e2:	441a      	add	r2, r3
 80157e4:	441e      	add	r6, r3
 80157e6:	f63f af44 	bhi.w	8015672 <arm_radix8_butterfly_f32+0x66>
 80157ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80157ec:	2907      	cmp	r1, #7
 80157ee:	4620      	mov	r0, r4
 80157f0:	f240 81e9 	bls.w	8015bc6 <arm_radix8_butterfly_f32+0x5ba>
 80157f4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80157f8:	193e      	adds	r6, r7, r4
 80157fa:	1935      	adds	r5, r6, r4
 80157fc:	9c03      	ldr	r4, [sp, #12]
 80157fe:	9000      	str	r0, [sp, #0]
 8015800:	4622      	mov	r2, r4
 8015802:	3201      	adds	r2, #1
 8015804:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015808:	9900      	ldr	r1, [sp, #0]
 801580a:	1828      	adds	r0, r5, r0
 801580c:	eb00 0e01 	add.w	lr, r0, r1
 8015810:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015812:	440a      	add	r2, r1
 8015814:	eb04 0c01 	add.w	ip, r4, r1
 8015818:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 801581c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8015820:	9a00      	ldr	r2, [sp, #0]
 8015822:	940f      	str	r4, [sp, #60]	; 0x3c
 8015824:	00ed      	lsls	r5, r5, #3
 8015826:	9511      	str	r5, [sp, #68]	; 0x44
 8015828:	00d5      	lsls	r5, r2, #3
 801582a:	950d      	str	r5, [sp, #52]	; 0x34
 801582c:	9d01      	ldr	r5, [sp, #4]
 801582e:	3508      	adds	r5, #8
 8015830:	9516      	str	r5, [sp, #88]	; 0x58
 8015832:	9d02      	ldr	r5, [sp, #8]
 8015834:	3508      	adds	r5, #8
 8015836:	0114      	lsls	r4, r2, #4
 8015838:	9517      	str	r5, [sp, #92]	; 0x5c
 801583a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801583c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801583e:	940e      	str	r4, [sp, #56]	; 0x38
 8015840:	00c0      	lsls	r0, r0, #3
 8015842:	9010      	str	r0, [sp, #64]	; 0x40
 8015844:	18aa      	adds	r2, r5, r2
 8015846:	9207      	str	r2, [sp, #28]
 8015848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801584a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801584c:	18aa      	adds	r2, r5, r2
 801584e:	9208      	str	r2, [sp, #32]
 8015850:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015852:	18aa      	adds	r2, r5, r2
 8015854:	9209      	str	r2, [sp, #36]	; 0x24
 8015856:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801585a:	f10e 0204 	add.w	r2, lr, #4
 801585e:	920a      	str	r2, [sp, #40]	; 0x28
 8015860:	00c9      	lsls	r1, r1, #3
 8015862:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015864:	310c      	adds	r1, #12
 8015866:	00f6      	lsls	r6, r6, #3
 8015868:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 801586c:	9114      	str	r1, [sp, #80]	; 0x50
 801586e:	18a9      	adds	r1, r5, r2
 8015870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015872:	9612      	str	r6, [sp, #72]	; 0x48
 8015874:	00ff      	lsls	r7, r7, #3
 8015876:	19ae      	adds	r6, r5, r6
 8015878:	3008      	adds	r0, #8
 801587a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801587e:	9606      	str	r6, [sp, #24]
 8015880:	9019      	str	r0, [sp, #100]	; 0x64
 8015882:	18aa      	adds	r2, r5, r2
 8015884:	0164      	lsls	r4, r4, #5
 8015886:	19ee      	adds	r6, r5, r7
 8015888:	f10c 000c 	add.w	r0, ip, #12
 801588c:	9713      	str	r7, [sp, #76]	; 0x4c
 801588e:	9604      	str	r6, [sp, #16]
 8015890:	9015      	str	r0, [sp, #84]	; 0x54
 8015892:	9103      	str	r1, [sp, #12]
 8015894:	9205      	str	r2, [sp, #20]
 8015896:	f104 0208 	add.w	r2, r4, #8
 801589a:	9218      	str	r2, [sp, #96]	; 0x60
 801589c:	f04f 0801 	mov.w	r8, #1
 80158a0:	2200      	movs	r2, #0
 80158a2:	f102 0108 	add.w	r1, r2, #8
 80158a6:	460f      	mov	r7, r1
 80158a8:	910b      	str	r1, [sp, #44]	; 0x2c
 80158aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80158ac:	188e      	adds	r6, r1, r2
 80158ae:	9916      	ldr	r1, [sp, #88]	; 0x58
 80158b0:	188d      	adds	r5, r1, r2
 80158b2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80158b4:	188c      	adds	r4, r1, r2
 80158b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80158b8:	1888      	adds	r0, r1, r2
 80158ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 80158bc:	eb01 0c02 	add.w	ip, r1, r2
 80158c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80158c2:	440a      	add	r2, r1
 80158c4:	9903      	ldr	r1, [sp, #12]
 80158c6:	edd1 fa00 	vldr	s31, [r1]
 80158ca:	9905      	ldr	r1, [sp, #20]
 80158cc:	ed91 fa00 	vldr	s30, [r1]
 80158d0:	9904      	ldr	r1, [sp, #16]
 80158d2:	edd1 ea00 	vldr	s29, [r1]
 80158d6:	9906      	ldr	r1, [sp, #24]
 80158d8:	ed91 ea00 	vldr	s28, [r1]
 80158dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158de:	edd1 da00 	vldr	s27, [r1]
 80158e2:	9908      	ldr	r1, [sp, #32]
 80158e4:	ed91 da00 	vldr	s26, [r1]
 80158e8:	9907      	ldr	r1, [sp, #28]
 80158ea:	edd1 ca00 	vldr	s25, [r1]
 80158ee:	9903      	ldr	r1, [sp, #12]
 80158f0:	ed91 ca01 	vldr	s24, [r1, #4]
 80158f4:	9905      	ldr	r1, [sp, #20]
 80158f6:	edd1 ba01 	vldr	s23, [r1, #4]
 80158fa:	9904      	ldr	r1, [sp, #16]
 80158fc:	edd1 aa01 	vldr	s21, [r1, #4]
 8015900:	9906      	ldr	r1, [sp, #24]
 8015902:	ed91 aa01 	vldr	s20, [r1, #4]
 8015906:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015908:	edd1 7a01 	vldr	s15, [r1, #4]
 801590c:	9908      	ldr	r1, [sp, #32]
 801590e:	edcd 7a00 	vstr	s15, [sp]
 8015912:	edd1 7a01 	vldr	s15, [r1, #4]
 8015916:	9907      	ldr	r1, [sp, #28]
 8015918:	edcd 7a01 	vstr	s15, [sp, #4]
 801591c:	edd1 7a01 	vldr	s15, [r1, #4]
 8015920:	eb0a 0e07 	add.w	lr, sl, r7
 8015924:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015926:	edcd 7a02 	vstr	s15, [sp, #8]
 801592a:	eb0c 010a 	add.w	r1, ip, sl
 801592e:	4456      	add	r6, sl
 8015930:	4455      	add	r5, sl
 8015932:	4454      	add	r4, sl
 8015934:	4450      	add	r0, sl
 8015936:	4452      	add	r2, sl
 8015938:	46c4      	mov	ip, r8
 801593a:	e001      	b.n	8015940 <arm_radix8_butterfly_f32+0x334>
 801593c:	3f3504f3 	.word	0x3f3504f3
 8015940:	ed96 5a00 	vldr	s10, [r6]
 8015944:	ed52 9a01 	vldr	s19, [r2, #-4]
 8015948:	ed11 6a01 	vldr	s12, [r1, #-4]
 801594c:	edd0 7a00 	vldr	s15, [r0]
 8015950:	ed17 7a01 	vldr	s14, [r7, #-4]
 8015954:	edde 3a00 	vldr	s7, [lr]
 8015958:	ed94 3a00 	vldr	s6, [r4]
 801595c:	ed95 2a00 	vldr	s4, [r5]
 8015960:	ed9e 0a01 	vldr	s0, [lr, #4]
 8015964:	ee33 8a85 	vadd.f32	s16, s7, s10
 8015968:	ee32 1a06 	vadd.f32	s2, s4, s12
 801596c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8015970:	ee77 4a87 	vadd.f32	s9, s15, s14
 8015974:	ee78 1a04 	vadd.f32	s3, s16, s8
 8015978:	ee71 6a24 	vadd.f32	s13, s2, s9
 801597c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8015980:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8015984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015988:	ed8e 6a00 	vstr	s12, [lr]
 801598c:	edd0 8a01 	vldr	s17, [r0, #4]
 8015990:	ed95 9a01 	vldr	s18, [r5, #4]
 8015994:	edd1 2a00 	vldr	s5, [r1]
 8015998:	ed97 7a00 	vldr	s14, [r7]
 801599c:	edd4 0a01 	vldr	s1, [r4, #4]
 80159a0:	ed96 6a01 	vldr	s12, [r6, #4]
 80159a4:	edd2 5a00 	vldr	s11, [r2]
 80159a8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80159ac:	ee33 3a69 	vsub.f32	s6, s6, s19
 80159b0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80159b4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80159b8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80159bc:	ee38 7a87 	vadd.f32	s14, s17, s14
 80159c0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80159c4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80159c8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80159cc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80159d0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80159d4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80159d8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80159dc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80159e0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80159e4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80159e8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80159ec:	ee32 2a48 	vsub.f32	s4, s4, s16
 80159f0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80159f4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80159f8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80159fc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8015a00:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8015a04:	ee30 6a46 	vsub.f32	s12, s0, s12
 8015a08:	ee73 0a29 	vadd.f32	s1, s6, s19
 8015a0c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8015a10:	ee33 3a69 	vsub.f32	s6, s6, s19
 8015a14:	ee32 7a64 	vsub.f32	s14, s4, s9
 8015a18:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8015a1c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8015a20:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8015a24:	ee75 8a85 	vadd.f32	s17, s11, s10
 8015a28:	ee74 3a22 	vadd.f32	s7, s8, s5
 8015a2c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8015a30:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8015a34:	ee79 1a41 	vsub.f32	s3, s18, s2
 8015a38:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8015a3c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8015a40:	ee74 2a62 	vsub.f32	s5, s8, s5
 8015a44:	ee72 4a24 	vadd.f32	s9, s4, s9
 8015a48:	ee30 4a60 	vsub.f32	s8, s0, s1
 8015a4c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8015a50:	ee30 0a20 	vadd.f32	s0, s0, s1
 8015a54:	ee77 9a85 	vadd.f32	s19, s15, s10
 8015a58:	ee36 6a03 	vadd.f32	s12, s12, s6
 8015a5c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8015a60:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8015a64:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8015a68:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8015a6c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8015a70:	ee39 1a01 	vadd.f32	s2, s18, s2
 8015a74:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8015a78:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8015a7c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8015a80:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8015a84:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8015a88:	ee35 3a03 	vadd.f32	s6, s10, s6
 8015a8c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8015a90:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8015a94:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8015a98:	ed9d 4a02 	vldr	s8, [sp, #8]
 8015a9c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8015aa0:	ee77 3a63 	vsub.f32	s7, s14, s7
 8015aa4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8015aa8:	ed9d 7a01 	vldr	s14, [sp, #4]
 8015aac:	ed86 3a00 	vstr	s6, [r6]
 8015ab0:	ee30 9a89 	vadd.f32	s18, s1, s18
 8015ab4:	ee32 2a05 	vadd.f32	s4, s4, s10
 8015ab8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8015abc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8015ac0:	ee67 2a22 	vmul.f32	s5, s14, s5
 8015ac4:	ee64 1a00 	vmul.f32	s3, s8, s0
 8015ac8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015acc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8015ad0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8015ad4:	ee64 8a28 	vmul.f32	s17, s8, s17
 8015ad8:	ed9d 4a00 	vldr	s8, [sp]
 8015adc:	edc6 6a01 	vstr	s13, [r6, #4]
 8015ae0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8015ae4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8015ae8:	ee64 9a29 	vmul.f32	s19, s8, s19
 8015aec:	ee24 4a25 	vmul.f32	s8, s8, s11
 8015af0:	ee30 7a87 	vadd.f32	s14, s1, s14
 8015af4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8015af8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8015afc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8015b00:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8015b04:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8015b08:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8015b0c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8015b10:	ee75 1a21 	vadd.f32	s3, s10, s3
 8015b14:	ee30 0a68 	vsub.f32	s0, s0, s17
 8015b18:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8015b1c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8015b20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8015b24:	44dc      	add	ip, fp
 8015b26:	45e1      	cmp	r9, ip
 8015b28:	ed84 9a00 	vstr	s18, [r4]
 8015b2c:	edc4 3a01 	vstr	s7, [r4, #4]
 8015b30:	449e      	add	lr, r3
 8015b32:	ed02 7a01 	vstr	s14, [r2, #-4]
 8015b36:	edc2 2a00 	vstr	s5, [r2]
 8015b3a:	441e      	add	r6, r3
 8015b3c:	ed85 2a00 	vstr	s4, [r5]
 8015b40:	ed85 8a01 	vstr	s16, [r5, #4]
 8015b44:	441c      	add	r4, r3
 8015b46:	ed47 1a01 	vstr	s3, [r7, #-4]
 8015b4a:	ed87 0a00 	vstr	s0, [r7]
 8015b4e:	441a      	add	r2, r3
 8015b50:	ed41 4a01 	vstr	s9, [r1, #-4]
 8015b54:	edc1 9a00 	vstr	s19, [r1]
 8015b58:	441d      	add	r5, r3
 8015b5a:	edc0 0a00 	vstr	s1, [r0]
 8015b5e:	441f      	add	r7, r3
 8015b60:	ed80 6a01 	vstr	s12, [r0, #4]
 8015b64:	4419      	add	r1, r3
 8015b66:	4418      	add	r0, r3
 8015b68:	f63f aeea 	bhi.w	8015940 <arm_radix8_butterfly_f32+0x334>
 8015b6c:	9a03      	ldr	r2, [sp, #12]
 8015b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b70:	440a      	add	r2, r1
 8015b72:	9203      	str	r2, [sp, #12]
 8015b74:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b76:	9a05      	ldr	r2, [sp, #20]
 8015b78:	440a      	add	r2, r1
 8015b7a:	9205      	str	r2, [sp, #20]
 8015b7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015b7e:	9a04      	ldr	r2, [sp, #16]
 8015b80:	440a      	add	r2, r1
 8015b82:	9204      	str	r2, [sp, #16]
 8015b84:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015b86:	9a06      	ldr	r2, [sp, #24]
 8015b88:	440a      	add	r2, r1
 8015b8a:	9206      	str	r2, [sp, #24]
 8015b8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b90:	440a      	add	r2, r1
 8015b92:	9209      	str	r2, [sp, #36]	; 0x24
 8015b94:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015b96:	9a08      	ldr	r2, [sp, #32]
 8015b98:	440a      	add	r2, r1
 8015b9a:	9208      	str	r2, [sp, #32]
 8015b9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b9e:	9a07      	ldr	r2, [sp, #28]
 8015ba0:	440a      	add	r2, r1
 8015ba2:	9207      	str	r2, [sp, #28]
 8015ba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ba8:	f108 0801 	add.w	r8, r8, #1
 8015bac:	3208      	adds	r2, #8
 8015bae:	4588      	cmp	r8, r1
 8015bb0:	920a      	str	r2, [sp, #40]	; 0x28
 8015bb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015bb4:	f47f ae75 	bne.w	80158a2 <arm_radix8_butterfly_f32+0x296>
 8015bb8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8015bbc:	9300      	str	r3, [sp, #0]
 8015bbe:	46c3      	mov	fp, r8
 8015bc0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8015bc4:	e532      	b.n	801562c <arm_radix8_butterfly_f32+0x20>
 8015bc6:	b01d      	add	sp, #116	; 0x74
 8015bc8:	ecbd 8b10 	vpop	{d8-d15}
 8015bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015bd0 <__errno>:
 8015bd0:	4b01      	ldr	r3, [pc, #4]	; (8015bd8 <__errno+0x8>)
 8015bd2:	6818      	ldr	r0, [r3, #0]
 8015bd4:	4770      	bx	lr
 8015bd6:	bf00      	nop
 8015bd8:	200000c4 	.word	0x200000c4

08015bdc <__libc_init_array>:
 8015bdc:	b570      	push	{r4, r5, r6, lr}
 8015bde:	4d0d      	ldr	r5, [pc, #52]	; (8015c14 <__libc_init_array+0x38>)
 8015be0:	4c0d      	ldr	r4, [pc, #52]	; (8015c18 <__libc_init_array+0x3c>)
 8015be2:	1b64      	subs	r4, r4, r5
 8015be4:	10a4      	asrs	r4, r4, #2
 8015be6:	2600      	movs	r6, #0
 8015be8:	42a6      	cmp	r6, r4
 8015bea:	d109      	bne.n	8015c00 <__libc_init_array+0x24>
 8015bec:	4d0b      	ldr	r5, [pc, #44]	; (8015c1c <__libc_init_array+0x40>)
 8015bee:	4c0c      	ldr	r4, [pc, #48]	; (8015c20 <__libc_init_array+0x44>)
 8015bf0:	f002 f81a 	bl	8017c28 <_init>
 8015bf4:	1b64      	subs	r4, r4, r5
 8015bf6:	10a4      	asrs	r4, r4, #2
 8015bf8:	2600      	movs	r6, #0
 8015bfa:	42a6      	cmp	r6, r4
 8015bfc:	d105      	bne.n	8015c0a <__libc_init_array+0x2e>
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c04:	4798      	blx	r3
 8015c06:	3601      	adds	r6, #1
 8015c08:	e7ee      	b.n	8015be8 <__libc_init_array+0xc>
 8015c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c0e:	4798      	blx	r3
 8015c10:	3601      	adds	r6, #1
 8015c12:	e7f2      	b.n	8015bfa <__libc_init_array+0x1e>
 8015c14:	08037680 	.word	0x08037680
 8015c18:	08037680 	.word	0x08037680
 8015c1c:	08037680 	.word	0x08037680
 8015c20:	08037684 	.word	0x08037684

08015c24 <memset>:
 8015c24:	4402      	add	r2, r0
 8015c26:	4603      	mov	r3, r0
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	d100      	bne.n	8015c2e <memset+0xa>
 8015c2c:	4770      	bx	lr
 8015c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8015c32:	e7f9      	b.n	8015c28 <memset+0x4>

08015c34 <siprintf>:
 8015c34:	b40e      	push	{r1, r2, r3}
 8015c36:	b500      	push	{lr}
 8015c38:	b09c      	sub	sp, #112	; 0x70
 8015c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8015c3c:	9002      	str	r0, [sp, #8]
 8015c3e:	9006      	str	r0, [sp, #24]
 8015c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c44:	4809      	ldr	r0, [pc, #36]	; (8015c6c <siprintf+0x38>)
 8015c46:	9107      	str	r1, [sp, #28]
 8015c48:	9104      	str	r1, [sp, #16]
 8015c4a:	4909      	ldr	r1, [pc, #36]	; (8015c70 <siprintf+0x3c>)
 8015c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c50:	9105      	str	r1, [sp, #20]
 8015c52:	6800      	ldr	r0, [r0, #0]
 8015c54:	9301      	str	r3, [sp, #4]
 8015c56:	a902      	add	r1, sp, #8
 8015c58:	f000 f876 	bl	8015d48 <_svfiprintf_r>
 8015c5c:	9b02      	ldr	r3, [sp, #8]
 8015c5e:	2200      	movs	r2, #0
 8015c60:	701a      	strb	r2, [r3, #0]
 8015c62:	b01c      	add	sp, #112	; 0x70
 8015c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c68:	b003      	add	sp, #12
 8015c6a:	4770      	bx	lr
 8015c6c:	200000c4 	.word	0x200000c4
 8015c70:	ffff0208 	.word	0xffff0208

08015c74 <strcat>:
 8015c74:	b510      	push	{r4, lr}
 8015c76:	4602      	mov	r2, r0
 8015c78:	7814      	ldrb	r4, [r2, #0]
 8015c7a:	4613      	mov	r3, r2
 8015c7c:	3201      	adds	r2, #1
 8015c7e:	2c00      	cmp	r4, #0
 8015c80:	d1fa      	bne.n	8015c78 <strcat+0x4>
 8015c82:	3b01      	subs	r3, #1
 8015c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c8c:	2a00      	cmp	r2, #0
 8015c8e:	d1f9      	bne.n	8015c84 <strcat+0x10>
 8015c90:	bd10      	pop	{r4, pc}

08015c92 <__ssputs_r>:
 8015c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c96:	688e      	ldr	r6, [r1, #8]
 8015c98:	429e      	cmp	r6, r3
 8015c9a:	4682      	mov	sl, r0
 8015c9c:	460c      	mov	r4, r1
 8015c9e:	4690      	mov	r8, r2
 8015ca0:	461f      	mov	r7, r3
 8015ca2:	d838      	bhi.n	8015d16 <__ssputs_r+0x84>
 8015ca4:	898a      	ldrh	r2, [r1, #12]
 8015ca6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015caa:	d032      	beq.n	8015d12 <__ssputs_r+0x80>
 8015cac:	6825      	ldr	r5, [r4, #0]
 8015cae:	6909      	ldr	r1, [r1, #16]
 8015cb0:	eba5 0901 	sub.w	r9, r5, r1
 8015cb4:	6965      	ldr	r5, [r4, #20]
 8015cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015cba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015cbe:	3301      	adds	r3, #1
 8015cc0:	444b      	add	r3, r9
 8015cc2:	106d      	asrs	r5, r5, #1
 8015cc4:	429d      	cmp	r5, r3
 8015cc6:	bf38      	it	cc
 8015cc8:	461d      	movcc	r5, r3
 8015cca:	0553      	lsls	r3, r2, #21
 8015ccc:	d531      	bpl.n	8015d32 <__ssputs_r+0xa0>
 8015cce:	4629      	mov	r1, r5
 8015cd0:	f000 fb46 	bl	8016360 <_malloc_r>
 8015cd4:	4606      	mov	r6, r0
 8015cd6:	b950      	cbnz	r0, 8015cee <__ssputs_r+0x5c>
 8015cd8:	230c      	movs	r3, #12
 8015cda:	f8ca 3000 	str.w	r3, [sl]
 8015cde:	89a3      	ldrh	r3, [r4, #12]
 8015ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ce4:	81a3      	strh	r3, [r4, #12]
 8015ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8015cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cee:	6921      	ldr	r1, [r4, #16]
 8015cf0:	464a      	mov	r2, r9
 8015cf2:	f000 fabd 	bl	8016270 <memcpy>
 8015cf6:	89a3      	ldrh	r3, [r4, #12]
 8015cf8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d00:	81a3      	strh	r3, [r4, #12]
 8015d02:	6126      	str	r6, [r4, #16]
 8015d04:	6165      	str	r5, [r4, #20]
 8015d06:	444e      	add	r6, r9
 8015d08:	eba5 0509 	sub.w	r5, r5, r9
 8015d0c:	6026      	str	r6, [r4, #0]
 8015d0e:	60a5      	str	r5, [r4, #8]
 8015d10:	463e      	mov	r6, r7
 8015d12:	42be      	cmp	r6, r7
 8015d14:	d900      	bls.n	8015d18 <__ssputs_r+0x86>
 8015d16:	463e      	mov	r6, r7
 8015d18:	4632      	mov	r2, r6
 8015d1a:	6820      	ldr	r0, [r4, #0]
 8015d1c:	4641      	mov	r1, r8
 8015d1e:	f000 fab5 	bl	801628c <memmove>
 8015d22:	68a3      	ldr	r3, [r4, #8]
 8015d24:	6822      	ldr	r2, [r4, #0]
 8015d26:	1b9b      	subs	r3, r3, r6
 8015d28:	4432      	add	r2, r6
 8015d2a:	60a3      	str	r3, [r4, #8]
 8015d2c:	6022      	str	r2, [r4, #0]
 8015d2e:	2000      	movs	r0, #0
 8015d30:	e7db      	b.n	8015cea <__ssputs_r+0x58>
 8015d32:	462a      	mov	r2, r5
 8015d34:	f000 fb6e 	bl	8016414 <_realloc_r>
 8015d38:	4606      	mov	r6, r0
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d1e1      	bne.n	8015d02 <__ssputs_r+0x70>
 8015d3e:	6921      	ldr	r1, [r4, #16]
 8015d40:	4650      	mov	r0, sl
 8015d42:	f000 fabd 	bl	80162c0 <_free_r>
 8015d46:	e7c7      	b.n	8015cd8 <__ssputs_r+0x46>

08015d48 <_svfiprintf_r>:
 8015d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d4c:	4698      	mov	r8, r3
 8015d4e:	898b      	ldrh	r3, [r1, #12]
 8015d50:	061b      	lsls	r3, r3, #24
 8015d52:	b09d      	sub	sp, #116	; 0x74
 8015d54:	4607      	mov	r7, r0
 8015d56:	460d      	mov	r5, r1
 8015d58:	4614      	mov	r4, r2
 8015d5a:	d50e      	bpl.n	8015d7a <_svfiprintf_r+0x32>
 8015d5c:	690b      	ldr	r3, [r1, #16]
 8015d5e:	b963      	cbnz	r3, 8015d7a <_svfiprintf_r+0x32>
 8015d60:	2140      	movs	r1, #64	; 0x40
 8015d62:	f000 fafd 	bl	8016360 <_malloc_r>
 8015d66:	6028      	str	r0, [r5, #0]
 8015d68:	6128      	str	r0, [r5, #16]
 8015d6a:	b920      	cbnz	r0, 8015d76 <_svfiprintf_r+0x2e>
 8015d6c:	230c      	movs	r3, #12
 8015d6e:	603b      	str	r3, [r7, #0]
 8015d70:	f04f 30ff 	mov.w	r0, #4294967295
 8015d74:	e0d1      	b.n	8015f1a <_svfiprintf_r+0x1d2>
 8015d76:	2340      	movs	r3, #64	; 0x40
 8015d78:	616b      	str	r3, [r5, #20]
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d7e:	2320      	movs	r3, #32
 8015d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d88:	2330      	movs	r3, #48	; 0x30
 8015d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f34 <_svfiprintf_r+0x1ec>
 8015d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d92:	f04f 0901 	mov.w	r9, #1
 8015d96:	4623      	mov	r3, r4
 8015d98:	469a      	mov	sl, r3
 8015d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d9e:	b10a      	cbz	r2, 8015da4 <_svfiprintf_r+0x5c>
 8015da0:	2a25      	cmp	r2, #37	; 0x25
 8015da2:	d1f9      	bne.n	8015d98 <_svfiprintf_r+0x50>
 8015da4:	ebba 0b04 	subs.w	fp, sl, r4
 8015da8:	d00b      	beq.n	8015dc2 <_svfiprintf_r+0x7a>
 8015daa:	465b      	mov	r3, fp
 8015dac:	4622      	mov	r2, r4
 8015dae:	4629      	mov	r1, r5
 8015db0:	4638      	mov	r0, r7
 8015db2:	f7ff ff6e 	bl	8015c92 <__ssputs_r>
 8015db6:	3001      	adds	r0, #1
 8015db8:	f000 80aa 	beq.w	8015f10 <_svfiprintf_r+0x1c8>
 8015dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dbe:	445a      	add	r2, fp
 8015dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8015dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	f000 80a2 	beq.w	8015f10 <_svfiprintf_r+0x1c8>
 8015dcc:	2300      	movs	r3, #0
 8015dce:	f04f 32ff 	mov.w	r2, #4294967295
 8015dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015dd6:	f10a 0a01 	add.w	sl, sl, #1
 8015dda:	9304      	str	r3, [sp, #16]
 8015ddc:	9307      	str	r3, [sp, #28]
 8015dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015de2:	931a      	str	r3, [sp, #104]	; 0x68
 8015de4:	4654      	mov	r4, sl
 8015de6:	2205      	movs	r2, #5
 8015de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dec:	4851      	ldr	r0, [pc, #324]	; (8015f34 <_svfiprintf_r+0x1ec>)
 8015dee:	f7ea fa7f 	bl	80002f0 <memchr>
 8015df2:	9a04      	ldr	r2, [sp, #16]
 8015df4:	b9d8      	cbnz	r0, 8015e2e <_svfiprintf_r+0xe6>
 8015df6:	06d0      	lsls	r0, r2, #27
 8015df8:	bf44      	itt	mi
 8015dfa:	2320      	movmi	r3, #32
 8015dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e00:	0711      	lsls	r1, r2, #28
 8015e02:	bf44      	itt	mi
 8015e04:	232b      	movmi	r3, #43	; 0x2b
 8015e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8015e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8015e10:	d015      	beq.n	8015e3e <_svfiprintf_r+0xf6>
 8015e12:	9a07      	ldr	r2, [sp, #28]
 8015e14:	4654      	mov	r4, sl
 8015e16:	2000      	movs	r0, #0
 8015e18:	f04f 0c0a 	mov.w	ip, #10
 8015e1c:	4621      	mov	r1, r4
 8015e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e22:	3b30      	subs	r3, #48	; 0x30
 8015e24:	2b09      	cmp	r3, #9
 8015e26:	d94e      	bls.n	8015ec6 <_svfiprintf_r+0x17e>
 8015e28:	b1b0      	cbz	r0, 8015e58 <_svfiprintf_r+0x110>
 8015e2a:	9207      	str	r2, [sp, #28]
 8015e2c:	e014      	b.n	8015e58 <_svfiprintf_r+0x110>
 8015e2e:	eba0 0308 	sub.w	r3, r0, r8
 8015e32:	fa09 f303 	lsl.w	r3, r9, r3
 8015e36:	4313      	orrs	r3, r2
 8015e38:	9304      	str	r3, [sp, #16]
 8015e3a:	46a2      	mov	sl, r4
 8015e3c:	e7d2      	b.n	8015de4 <_svfiprintf_r+0x9c>
 8015e3e:	9b03      	ldr	r3, [sp, #12]
 8015e40:	1d19      	adds	r1, r3, #4
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	9103      	str	r1, [sp, #12]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	bfbb      	ittet	lt
 8015e4a:	425b      	neglt	r3, r3
 8015e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8015e50:	9307      	strge	r3, [sp, #28]
 8015e52:	9307      	strlt	r3, [sp, #28]
 8015e54:	bfb8      	it	lt
 8015e56:	9204      	strlt	r2, [sp, #16]
 8015e58:	7823      	ldrb	r3, [r4, #0]
 8015e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8015e5c:	d10c      	bne.n	8015e78 <_svfiprintf_r+0x130>
 8015e5e:	7863      	ldrb	r3, [r4, #1]
 8015e60:	2b2a      	cmp	r3, #42	; 0x2a
 8015e62:	d135      	bne.n	8015ed0 <_svfiprintf_r+0x188>
 8015e64:	9b03      	ldr	r3, [sp, #12]
 8015e66:	1d1a      	adds	r2, r3, #4
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	9203      	str	r2, [sp, #12]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	bfb8      	it	lt
 8015e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e74:	3402      	adds	r4, #2
 8015e76:	9305      	str	r3, [sp, #20]
 8015e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f44 <_svfiprintf_r+0x1fc>
 8015e7c:	7821      	ldrb	r1, [r4, #0]
 8015e7e:	2203      	movs	r2, #3
 8015e80:	4650      	mov	r0, sl
 8015e82:	f7ea fa35 	bl	80002f0 <memchr>
 8015e86:	b140      	cbz	r0, 8015e9a <_svfiprintf_r+0x152>
 8015e88:	2340      	movs	r3, #64	; 0x40
 8015e8a:	eba0 000a 	sub.w	r0, r0, sl
 8015e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8015e92:	9b04      	ldr	r3, [sp, #16]
 8015e94:	4303      	orrs	r3, r0
 8015e96:	3401      	adds	r4, #1
 8015e98:	9304      	str	r3, [sp, #16]
 8015e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e9e:	4826      	ldr	r0, [pc, #152]	; (8015f38 <_svfiprintf_r+0x1f0>)
 8015ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ea4:	2206      	movs	r2, #6
 8015ea6:	f7ea fa23 	bl	80002f0 <memchr>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d038      	beq.n	8015f20 <_svfiprintf_r+0x1d8>
 8015eae:	4b23      	ldr	r3, [pc, #140]	; (8015f3c <_svfiprintf_r+0x1f4>)
 8015eb0:	bb1b      	cbnz	r3, 8015efa <_svfiprintf_r+0x1b2>
 8015eb2:	9b03      	ldr	r3, [sp, #12]
 8015eb4:	3307      	adds	r3, #7
 8015eb6:	f023 0307 	bic.w	r3, r3, #7
 8015eba:	3308      	adds	r3, #8
 8015ebc:	9303      	str	r3, [sp, #12]
 8015ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ec0:	4433      	add	r3, r6
 8015ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ec4:	e767      	b.n	8015d96 <_svfiprintf_r+0x4e>
 8015ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015eca:	460c      	mov	r4, r1
 8015ecc:	2001      	movs	r0, #1
 8015ece:	e7a5      	b.n	8015e1c <_svfiprintf_r+0xd4>
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	3401      	adds	r4, #1
 8015ed4:	9305      	str	r3, [sp, #20]
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	f04f 0c0a 	mov.w	ip, #10
 8015edc:	4620      	mov	r0, r4
 8015ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ee2:	3a30      	subs	r2, #48	; 0x30
 8015ee4:	2a09      	cmp	r2, #9
 8015ee6:	d903      	bls.n	8015ef0 <_svfiprintf_r+0x1a8>
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d0c5      	beq.n	8015e78 <_svfiprintf_r+0x130>
 8015eec:	9105      	str	r1, [sp, #20]
 8015eee:	e7c3      	b.n	8015e78 <_svfiprintf_r+0x130>
 8015ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	2301      	movs	r3, #1
 8015ef8:	e7f0      	b.n	8015edc <_svfiprintf_r+0x194>
 8015efa:	ab03      	add	r3, sp, #12
 8015efc:	9300      	str	r3, [sp, #0]
 8015efe:	462a      	mov	r2, r5
 8015f00:	4b0f      	ldr	r3, [pc, #60]	; (8015f40 <_svfiprintf_r+0x1f8>)
 8015f02:	a904      	add	r1, sp, #16
 8015f04:	4638      	mov	r0, r7
 8015f06:	f3af 8000 	nop.w
 8015f0a:	1c42      	adds	r2, r0, #1
 8015f0c:	4606      	mov	r6, r0
 8015f0e:	d1d6      	bne.n	8015ebe <_svfiprintf_r+0x176>
 8015f10:	89ab      	ldrh	r3, [r5, #12]
 8015f12:	065b      	lsls	r3, r3, #25
 8015f14:	f53f af2c 	bmi.w	8015d70 <_svfiprintf_r+0x28>
 8015f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f1a:	b01d      	add	sp, #116	; 0x74
 8015f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f20:	ab03      	add	r3, sp, #12
 8015f22:	9300      	str	r3, [sp, #0]
 8015f24:	462a      	mov	r2, r5
 8015f26:	4b06      	ldr	r3, [pc, #24]	; (8015f40 <_svfiprintf_r+0x1f8>)
 8015f28:	a904      	add	r1, sp, #16
 8015f2a:	4638      	mov	r0, r7
 8015f2c:	f000 f87a 	bl	8016024 <_printf_i>
 8015f30:	e7eb      	b.n	8015f0a <_svfiprintf_r+0x1c2>
 8015f32:	bf00      	nop
 8015f34:	08037440 	.word	0x08037440
 8015f38:	0803744a 	.word	0x0803744a
 8015f3c:	00000000 	.word	0x00000000
 8015f40:	08015c93 	.word	0x08015c93
 8015f44:	08037446 	.word	0x08037446

08015f48 <_printf_common>:
 8015f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f4c:	4616      	mov	r6, r2
 8015f4e:	4699      	mov	r9, r3
 8015f50:	688a      	ldr	r2, [r1, #8]
 8015f52:	690b      	ldr	r3, [r1, #16]
 8015f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	bfb8      	it	lt
 8015f5c:	4613      	movlt	r3, r2
 8015f5e:	6033      	str	r3, [r6, #0]
 8015f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015f64:	4607      	mov	r7, r0
 8015f66:	460c      	mov	r4, r1
 8015f68:	b10a      	cbz	r2, 8015f6e <_printf_common+0x26>
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	6033      	str	r3, [r6, #0]
 8015f6e:	6823      	ldr	r3, [r4, #0]
 8015f70:	0699      	lsls	r1, r3, #26
 8015f72:	bf42      	ittt	mi
 8015f74:	6833      	ldrmi	r3, [r6, #0]
 8015f76:	3302      	addmi	r3, #2
 8015f78:	6033      	strmi	r3, [r6, #0]
 8015f7a:	6825      	ldr	r5, [r4, #0]
 8015f7c:	f015 0506 	ands.w	r5, r5, #6
 8015f80:	d106      	bne.n	8015f90 <_printf_common+0x48>
 8015f82:	f104 0a19 	add.w	sl, r4, #25
 8015f86:	68e3      	ldr	r3, [r4, #12]
 8015f88:	6832      	ldr	r2, [r6, #0]
 8015f8a:	1a9b      	subs	r3, r3, r2
 8015f8c:	42ab      	cmp	r3, r5
 8015f8e:	dc26      	bgt.n	8015fde <_printf_common+0x96>
 8015f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015f94:	1e13      	subs	r3, r2, #0
 8015f96:	6822      	ldr	r2, [r4, #0]
 8015f98:	bf18      	it	ne
 8015f9a:	2301      	movne	r3, #1
 8015f9c:	0692      	lsls	r2, r2, #26
 8015f9e:	d42b      	bmi.n	8015ff8 <_printf_common+0xb0>
 8015fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015fa4:	4649      	mov	r1, r9
 8015fa6:	4638      	mov	r0, r7
 8015fa8:	47c0      	blx	r8
 8015faa:	3001      	adds	r0, #1
 8015fac:	d01e      	beq.n	8015fec <_printf_common+0xa4>
 8015fae:	6823      	ldr	r3, [r4, #0]
 8015fb0:	68e5      	ldr	r5, [r4, #12]
 8015fb2:	6832      	ldr	r2, [r6, #0]
 8015fb4:	f003 0306 	and.w	r3, r3, #6
 8015fb8:	2b04      	cmp	r3, #4
 8015fba:	bf08      	it	eq
 8015fbc:	1aad      	subeq	r5, r5, r2
 8015fbe:	68a3      	ldr	r3, [r4, #8]
 8015fc0:	6922      	ldr	r2, [r4, #16]
 8015fc2:	bf0c      	ite	eq
 8015fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015fc8:	2500      	movne	r5, #0
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	bfc4      	itt	gt
 8015fce:	1a9b      	subgt	r3, r3, r2
 8015fd0:	18ed      	addgt	r5, r5, r3
 8015fd2:	2600      	movs	r6, #0
 8015fd4:	341a      	adds	r4, #26
 8015fd6:	42b5      	cmp	r5, r6
 8015fd8:	d11a      	bne.n	8016010 <_printf_common+0xc8>
 8015fda:	2000      	movs	r0, #0
 8015fdc:	e008      	b.n	8015ff0 <_printf_common+0xa8>
 8015fde:	2301      	movs	r3, #1
 8015fe0:	4652      	mov	r2, sl
 8015fe2:	4649      	mov	r1, r9
 8015fe4:	4638      	mov	r0, r7
 8015fe6:	47c0      	blx	r8
 8015fe8:	3001      	adds	r0, #1
 8015fea:	d103      	bne.n	8015ff4 <_printf_common+0xac>
 8015fec:	f04f 30ff 	mov.w	r0, #4294967295
 8015ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ff4:	3501      	adds	r5, #1
 8015ff6:	e7c6      	b.n	8015f86 <_printf_common+0x3e>
 8015ff8:	18e1      	adds	r1, r4, r3
 8015ffa:	1c5a      	adds	r2, r3, #1
 8015ffc:	2030      	movs	r0, #48	; 0x30
 8015ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016002:	4422      	add	r2, r4
 8016004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801600c:	3302      	adds	r3, #2
 801600e:	e7c7      	b.n	8015fa0 <_printf_common+0x58>
 8016010:	2301      	movs	r3, #1
 8016012:	4622      	mov	r2, r4
 8016014:	4649      	mov	r1, r9
 8016016:	4638      	mov	r0, r7
 8016018:	47c0      	blx	r8
 801601a:	3001      	adds	r0, #1
 801601c:	d0e6      	beq.n	8015fec <_printf_common+0xa4>
 801601e:	3601      	adds	r6, #1
 8016020:	e7d9      	b.n	8015fd6 <_printf_common+0x8e>
	...

08016024 <_printf_i>:
 8016024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016028:	460c      	mov	r4, r1
 801602a:	4691      	mov	r9, r2
 801602c:	7e27      	ldrb	r7, [r4, #24]
 801602e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016030:	2f78      	cmp	r7, #120	; 0x78
 8016032:	4680      	mov	r8, r0
 8016034:	469a      	mov	sl, r3
 8016036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801603a:	d807      	bhi.n	801604c <_printf_i+0x28>
 801603c:	2f62      	cmp	r7, #98	; 0x62
 801603e:	d80a      	bhi.n	8016056 <_printf_i+0x32>
 8016040:	2f00      	cmp	r7, #0
 8016042:	f000 80d8 	beq.w	80161f6 <_printf_i+0x1d2>
 8016046:	2f58      	cmp	r7, #88	; 0x58
 8016048:	f000 80a3 	beq.w	8016192 <_printf_i+0x16e>
 801604c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016054:	e03a      	b.n	80160cc <_printf_i+0xa8>
 8016056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801605a:	2b15      	cmp	r3, #21
 801605c:	d8f6      	bhi.n	801604c <_printf_i+0x28>
 801605e:	a001      	add	r0, pc, #4	; (adr r0, 8016064 <_printf_i+0x40>)
 8016060:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016064:	080160bd 	.word	0x080160bd
 8016068:	080160d1 	.word	0x080160d1
 801606c:	0801604d 	.word	0x0801604d
 8016070:	0801604d 	.word	0x0801604d
 8016074:	0801604d 	.word	0x0801604d
 8016078:	0801604d 	.word	0x0801604d
 801607c:	080160d1 	.word	0x080160d1
 8016080:	0801604d 	.word	0x0801604d
 8016084:	0801604d 	.word	0x0801604d
 8016088:	0801604d 	.word	0x0801604d
 801608c:	0801604d 	.word	0x0801604d
 8016090:	080161dd 	.word	0x080161dd
 8016094:	08016101 	.word	0x08016101
 8016098:	080161bf 	.word	0x080161bf
 801609c:	0801604d 	.word	0x0801604d
 80160a0:	0801604d 	.word	0x0801604d
 80160a4:	080161ff 	.word	0x080161ff
 80160a8:	0801604d 	.word	0x0801604d
 80160ac:	08016101 	.word	0x08016101
 80160b0:	0801604d 	.word	0x0801604d
 80160b4:	0801604d 	.word	0x0801604d
 80160b8:	080161c7 	.word	0x080161c7
 80160bc:	680b      	ldr	r3, [r1, #0]
 80160be:	1d1a      	adds	r2, r3, #4
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	600a      	str	r2, [r1, #0]
 80160c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80160c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80160cc:	2301      	movs	r3, #1
 80160ce:	e0a3      	b.n	8016218 <_printf_i+0x1f4>
 80160d0:	6825      	ldr	r5, [r4, #0]
 80160d2:	6808      	ldr	r0, [r1, #0]
 80160d4:	062e      	lsls	r6, r5, #24
 80160d6:	f100 0304 	add.w	r3, r0, #4
 80160da:	d50a      	bpl.n	80160f2 <_printf_i+0xce>
 80160dc:	6805      	ldr	r5, [r0, #0]
 80160de:	600b      	str	r3, [r1, #0]
 80160e0:	2d00      	cmp	r5, #0
 80160e2:	da03      	bge.n	80160ec <_printf_i+0xc8>
 80160e4:	232d      	movs	r3, #45	; 0x2d
 80160e6:	426d      	negs	r5, r5
 80160e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160ec:	485e      	ldr	r0, [pc, #376]	; (8016268 <_printf_i+0x244>)
 80160ee:	230a      	movs	r3, #10
 80160f0:	e019      	b.n	8016126 <_printf_i+0x102>
 80160f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80160f6:	6805      	ldr	r5, [r0, #0]
 80160f8:	600b      	str	r3, [r1, #0]
 80160fa:	bf18      	it	ne
 80160fc:	b22d      	sxthne	r5, r5
 80160fe:	e7ef      	b.n	80160e0 <_printf_i+0xbc>
 8016100:	680b      	ldr	r3, [r1, #0]
 8016102:	6825      	ldr	r5, [r4, #0]
 8016104:	1d18      	adds	r0, r3, #4
 8016106:	6008      	str	r0, [r1, #0]
 8016108:	0628      	lsls	r0, r5, #24
 801610a:	d501      	bpl.n	8016110 <_printf_i+0xec>
 801610c:	681d      	ldr	r5, [r3, #0]
 801610e:	e002      	b.n	8016116 <_printf_i+0xf2>
 8016110:	0669      	lsls	r1, r5, #25
 8016112:	d5fb      	bpl.n	801610c <_printf_i+0xe8>
 8016114:	881d      	ldrh	r5, [r3, #0]
 8016116:	4854      	ldr	r0, [pc, #336]	; (8016268 <_printf_i+0x244>)
 8016118:	2f6f      	cmp	r7, #111	; 0x6f
 801611a:	bf0c      	ite	eq
 801611c:	2308      	moveq	r3, #8
 801611e:	230a      	movne	r3, #10
 8016120:	2100      	movs	r1, #0
 8016122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016126:	6866      	ldr	r6, [r4, #4]
 8016128:	60a6      	str	r6, [r4, #8]
 801612a:	2e00      	cmp	r6, #0
 801612c:	bfa2      	ittt	ge
 801612e:	6821      	ldrge	r1, [r4, #0]
 8016130:	f021 0104 	bicge.w	r1, r1, #4
 8016134:	6021      	strge	r1, [r4, #0]
 8016136:	b90d      	cbnz	r5, 801613c <_printf_i+0x118>
 8016138:	2e00      	cmp	r6, #0
 801613a:	d04d      	beq.n	80161d8 <_printf_i+0x1b4>
 801613c:	4616      	mov	r6, r2
 801613e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016142:	fb03 5711 	mls	r7, r3, r1, r5
 8016146:	5dc7      	ldrb	r7, [r0, r7]
 8016148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801614c:	462f      	mov	r7, r5
 801614e:	42bb      	cmp	r3, r7
 8016150:	460d      	mov	r5, r1
 8016152:	d9f4      	bls.n	801613e <_printf_i+0x11a>
 8016154:	2b08      	cmp	r3, #8
 8016156:	d10b      	bne.n	8016170 <_printf_i+0x14c>
 8016158:	6823      	ldr	r3, [r4, #0]
 801615a:	07df      	lsls	r7, r3, #31
 801615c:	d508      	bpl.n	8016170 <_printf_i+0x14c>
 801615e:	6923      	ldr	r3, [r4, #16]
 8016160:	6861      	ldr	r1, [r4, #4]
 8016162:	4299      	cmp	r1, r3
 8016164:	bfde      	ittt	le
 8016166:	2330      	movle	r3, #48	; 0x30
 8016168:	f806 3c01 	strble.w	r3, [r6, #-1]
 801616c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016170:	1b92      	subs	r2, r2, r6
 8016172:	6122      	str	r2, [r4, #16]
 8016174:	f8cd a000 	str.w	sl, [sp]
 8016178:	464b      	mov	r3, r9
 801617a:	aa03      	add	r2, sp, #12
 801617c:	4621      	mov	r1, r4
 801617e:	4640      	mov	r0, r8
 8016180:	f7ff fee2 	bl	8015f48 <_printf_common>
 8016184:	3001      	adds	r0, #1
 8016186:	d14c      	bne.n	8016222 <_printf_i+0x1fe>
 8016188:	f04f 30ff 	mov.w	r0, #4294967295
 801618c:	b004      	add	sp, #16
 801618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016192:	4835      	ldr	r0, [pc, #212]	; (8016268 <_printf_i+0x244>)
 8016194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016198:	6823      	ldr	r3, [r4, #0]
 801619a:	680e      	ldr	r6, [r1, #0]
 801619c:	061f      	lsls	r7, r3, #24
 801619e:	f856 5b04 	ldr.w	r5, [r6], #4
 80161a2:	600e      	str	r6, [r1, #0]
 80161a4:	d514      	bpl.n	80161d0 <_printf_i+0x1ac>
 80161a6:	07d9      	lsls	r1, r3, #31
 80161a8:	bf44      	itt	mi
 80161aa:	f043 0320 	orrmi.w	r3, r3, #32
 80161ae:	6023      	strmi	r3, [r4, #0]
 80161b0:	b91d      	cbnz	r5, 80161ba <_printf_i+0x196>
 80161b2:	6823      	ldr	r3, [r4, #0]
 80161b4:	f023 0320 	bic.w	r3, r3, #32
 80161b8:	6023      	str	r3, [r4, #0]
 80161ba:	2310      	movs	r3, #16
 80161bc:	e7b0      	b.n	8016120 <_printf_i+0xfc>
 80161be:	6823      	ldr	r3, [r4, #0]
 80161c0:	f043 0320 	orr.w	r3, r3, #32
 80161c4:	6023      	str	r3, [r4, #0]
 80161c6:	2378      	movs	r3, #120	; 0x78
 80161c8:	4828      	ldr	r0, [pc, #160]	; (801626c <_printf_i+0x248>)
 80161ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80161ce:	e7e3      	b.n	8016198 <_printf_i+0x174>
 80161d0:	065e      	lsls	r6, r3, #25
 80161d2:	bf48      	it	mi
 80161d4:	b2ad      	uxthmi	r5, r5
 80161d6:	e7e6      	b.n	80161a6 <_printf_i+0x182>
 80161d8:	4616      	mov	r6, r2
 80161da:	e7bb      	b.n	8016154 <_printf_i+0x130>
 80161dc:	680b      	ldr	r3, [r1, #0]
 80161de:	6826      	ldr	r6, [r4, #0]
 80161e0:	6960      	ldr	r0, [r4, #20]
 80161e2:	1d1d      	adds	r5, r3, #4
 80161e4:	600d      	str	r5, [r1, #0]
 80161e6:	0635      	lsls	r5, r6, #24
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	d501      	bpl.n	80161f0 <_printf_i+0x1cc>
 80161ec:	6018      	str	r0, [r3, #0]
 80161ee:	e002      	b.n	80161f6 <_printf_i+0x1d2>
 80161f0:	0671      	lsls	r1, r6, #25
 80161f2:	d5fb      	bpl.n	80161ec <_printf_i+0x1c8>
 80161f4:	8018      	strh	r0, [r3, #0]
 80161f6:	2300      	movs	r3, #0
 80161f8:	6123      	str	r3, [r4, #16]
 80161fa:	4616      	mov	r6, r2
 80161fc:	e7ba      	b.n	8016174 <_printf_i+0x150>
 80161fe:	680b      	ldr	r3, [r1, #0]
 8016200:	1d1a      	adds	r2, r3, #4
 8016202:	600a      	str	r2, [r1, #0]
 8016204:	681e      	ldr	r6, [r3, #0]
 8016206:	6862      	ldr	r2, [r4, #4]
 8016208:	2100      	movs	r1, #0
 801620a:	4630      	mov	r0, r6
 801620c:	f7ea f870 	bl	80002f0 <memchr>
 8016210:	b108      	cbz	r0, 8016216 <_printf_i+0x1f2>
 8016212:	1b80      	subs	r0, r0, r6
 8016214:	6060      	str	r0, [r4, #4]
 8016216:	6863      	ldr	r3, [r4, #4]
 8016218:	6123      	str	r3, [r4, #16]
 801621a:	2300      	movs	r3, #0
 801621c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016220:	e7a8      	b.n	8016174 <_printf_i+0x150>
 8016222:	6923      	ldr	r3, [r4, #16]
 8016224:	4632      	mov	r2, r6
 8016226:	4649      	mov	r1, r9
 8016228:	4640      	mov	r0, r8
 801622a:	47d0      	blx	sl
 801622c:	3001      	adds	r0, #1
 801622e:	d0ab      	beq.n	8016188 <_printf_i+0x164>
 8016230:	6823      	ldr	r3, [r4, #0]
 8016232:	079b      	lsls	r3, r3, #30
 8016234:	d413      	bmi.n	801625e <_printf_i+0x23a>
 8016236:	68e0      	ldr	r0, [r4, #12]
 8016238:	9b03      	ldr	r3, [sp, #12]
 801623a:	4298      	cmp	r0, r3
 801623c:	bfb8      	it	lt
 801623e:	4618      	movlt	r0, r3
 8016240:	e7a4      	b.n	801618c <_printf_i+0x168>
 8016242:	2301      	movs	r3, #1
 8016244:	4632      	mov	r2, r6
 8016246:	4649      	mov	r1, r9
 8016248:	4640      	mov	r0, r8
 801624a:	47d0      	blx	sl
 801624c:	3001      	adds	r0, #1
 801624e:	d09b      	beq.n	8016188 <_printf_i+0x164>
 8016250:	3501      	adds	r5, #1
 8016252:	68e3      	ldr	r3, [r4, #12]
 8016254:	9903      	ldr	r1, [sp, #12]
 8016256:	1a5b      	subs	r3, r3, r1
 8016258:	42ab      	cmp	r3, r5
 801625a:	dcf2      	bgt.n	8016242 <_printf_i+0x21e>
 801625c:	e7eb      	b.n	8016236 <_printf_i+0x212>
 801625e:	2500      	movs	r5, #0
 8016260:	f104 0619 	add.w	r6, r4, #25
 8016264:	e7f5      	b.n	8016252 <_printf_i+0x22e>
 8016266:	bf00      	nop
 8016268:	08037451 	.word	0x08037451
 801626c:	08037462 	.word	0x08037462

08016270 <memcpy>:
 8016270:	440a      	add	r2, r1
 8016272:	4291      	cmp	r1, r2
 8016274:	f100 33ff 	add.w	r3, r0, #4294967295
 8016278:	d100      	bne.n	801627c <memcpy+0xc>
 801627a:	4770      	bx	lr
 801627c:	b510      	push	{r4, lr}
 801627e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016286:	4291      	cmp	r1, r2
 8016288:	d1f9      	bne.n	801627e <memcpy+0xe>
 801628a:	bd10      	pop	{r4, pc}

0801628c <memmove>:
 801628c:	4288      	cmp	r0, r1
 801628e:	b510      	push	{r4, lr}
 8016290:	eb01 0402 	add.w	r4, r1, r2
 8016294:	d902      	bls.n	801629c <memmove+0x10>
 8016296:	4284      	cmp	r4, r0
 8016298:	4623      	mov	r3, r4
 801629a:	d807      	bhi.n	80162ac <memmove+0x20>
 801629c:	1e43      	subs	r3, r0, #1
 801629e:	42a1      	cmp	r1, r4
 80162a0:	d008      	beq.n	80162b4 <memmove+0x28>
 80162a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80162aa:	e7f8      	b.n	801629e <memmove+0x12>
 80162ac:	4402      	add	r2, r0
 80162ae:	4601      	mov	r1, r0
 80162b0:	428a      	cmp	r2, r1
 80162b2:	d100      	bne.n	80162b6 <memmove+0x2a>
 80162b4:	bd10      	pop	{r4, pc}
 80162b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80162ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80162be:	e7f7      	b.n	80162b0 <memmove+0x24>

080162c0 <_free_r>:
 80162c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162c2:	2900      	cmp	r1, #0
 80162c4:	d048      	beq.n	8016358 <_free_r+0x98>
 80162c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162ca:	9001      	str	r0, [sp, #4]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	f1a1 0404 	sub.w	r4, r1, #4
 80162d2:	bfb8      	it	lt
 80162d4:	18e4      	addlt	r4, r4, r3
 80162d6:	f000 f8d3 	bl	8016480 <__malloc_lock>
 80162da:	4a20      	ldr	r2, [pc, #128]	; (801635c <_free_r+0x9c>)
 80162dc:	9801      	ldr	r0, [sp, #4]
 80162de:	6813      	ldr	r3, [r2, #0]
 80162e0:	4615      	mov	r5, r2
 80162e2:	b933      	cbnz	r3, 80162f2 <_free_r+0x32>
 80162e4:	6063      	str	r3, [r4, #4]
 80162e6:	6014      	str	r4, [r2, #0]
 80162e8:	b003      	add	sp, #12
 80162ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162ee:	f000 b8cd 	b.w	801648c <__malloc_unlock>
 80162f2:	42a3      	cmp	r3, r4
 80162f4:	d90b      	bls.n	801630e <_free_r+0x4e>
 80162f6:	6821      	ldr	r1, [r4, #0]
 80162f8:	1862      	adds	r2, r4, r1
 80162fa:	4293      	cmp	r3, r2
 80162fc:	bf04      	itt	eq
 80162fe:	681a      	ldreq	r2, [r3, #0]
 8016300:	685b      	ldreq	r3, [r3, #4]
 8016302:	6063      	str	r3, [r4, #4]
 8016304:	bf04      	itt	eq
 8016306:	1852      	addeq	r2, r2, r1
 8016308:	6022      	streq	r2, [r4, #0]
 801630a:	602c      	str	r4, [r5, #0]
 801630c:	e7ec      	b.n	80162e8 <_free_r+0x28>
 801630e:	461a      	mov	r2, r3
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	b10b      	cbz	r3, 8016318 <_free_r+0x58>
 8016314:	42a3      	cmp	r3, r4
 8016316:	d9fa      	bls.n	801630e <_free_r+0x4e>
 8016318:	6811      	ldr	r1, [r2, #0]
 801631a:	1855      	adds	r5, r2, r1
 801631c:	42a5      	cmp	r5, r4
 801631e:	d10b      	bne.n	8016338 <_free_r+0x78>
 8016320:	6824      	ldr	r4, [r4, #0]
 8016322:	4421      	add	r1, r4
 8016324:	1854      	adds	r4, r2, r1
 8016326:	42a3      	cmp	r3, r4
 8016328:	6011      	str	r1, [r2, #0]
 801632a:	d1dd      	bne.n	80162e8 <_free_r+0x28>
 801632c:	681c      	ldr	r4, [r3, #0]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	6053      	str	r3, [r2, #4]
 8016332:	4421      	add	r1, r4
 8016334:	6011      	str	r1, [r2, #0]
 8016336:	e7d7      	b.n	80162e8 <_free_r+0x28>
 8016338:	d902      	bls.n	8016340 <_free_r+0x80>
 801633a:	230c      	movs	r3, #12
 801633c:	6003      	str	r3, [r0, #0]
 801633e:	e7d3      	b.n	80162e8 <_free_r+0x28>
 8016340:	6825      	ldr	r5, [r4, #0]
 8016342:	1961      	adds	r1, r4, r5
 8016344:	428b      	cmp	r3, r1
 8016346:	bf04      	itt	eq
 8016348:	6819      	ldreq	r1, [r3, #0]
 801634a:	685b      	ldreq	r3, [r3, #4]
 801634c:	6063      	str	r3, [r4, #4]
 801634e:	bf04      	itt	eq
 8016350:	1949      	addeq	r1, r1, r5
 8016352:	6021      	streq	r1, [r4, #0]
 8016354:	6054      	str	r4, [r2, #4]
 8016356:	e7c7      	b.n	80162e8 <_free_r+0x28>
 8016358:	b003      	add	sp, #12
 801635a:	bd30      	pop	{r4, r5, pc}
 801635c:	20000234 	.word	0x20000234

08016360 <_malloc_r>:
 8016360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016362:	1ccd      	adds	r5, r1, #3
 8016364:	f025 0503 	bic.w	r5, r5, #3
 8016368:	3508      	adds	r5, #8
 801636a:	2d0c      	cmp	r5, #12
 801636c:	bf38      	it	cc
 801636e:	250c      	movcc	r5, #12
 8016370:	2d00      	cmp	r5, #0
 8016372:	4606      	mov	r6, r0
 8016374:	db01      	blt.n	801637a <_malloc_r+0x1a>
 8016376:	42a9      	cmp	r1, r5
 8016378:	d903      	bls.n	8016382 <_malloc_r+0x22>
 801637a:	230c      	movs	r3, #12
 801637c:	6033      	str	r3, [r6, #0]
 801637e:	2000      	movs	r0, #0
 8016380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016382:	f000 f87d 	bl	8016480 <__malloc_lock>
 8016386:	4921      	ldr	r1, [pc, #132]	; (801640c <_malloc_r+0xac>)
 8016388:	680a      	ldr	r2, [r1, #0]
 801638a:	4614      	mov	r4, r2
 801638c:	b99c      	cbnz	r4, 80163b6 <_malloc_r+0x56>
 801638e:	4f20      	ldr	r7, [pc, #128]	; (8016410 <_malloc_r+0xb0>)
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	b923      	cbnz	r3, 801639e <_malloc_r+0x3e>
 8016394:	4621      	mov	r1, r4
 8016396:	4630      	mov	r0, r6
 8016398:	f000 f862 	bl	8016460 <_sbrk_r>
 801639c:	6038      	str	r0, [r7, #0]
 801639e:	4629      	mov	r1, r5
 80163a0:	4630      	mov	r0, r6
 80163a2:	f000 f85d 	bl	8016460 <_sbrk_r>
 80163a6:	1c43      	adds	r3, r0, #1
 80163a8:	d123      	bne.n	80163f2 <_malloc_r+0x92>
 80163aa:	230c      	movs	r3, #12
 80163ac:	6033      	str	r3, [r6, #0]
 80163ae:	4630      	mov	r0, r6
 80163b0:	f000 f86c 	bl	801648c <__malloc_unlock>
 80163b4:	e7e3      	b.n	801637e <_malloc_r+0x1e>
 80163b6:	6823      	ldr	r3, [r4, #0]
 80163b8:	1b5b      	subs	r3, r3, r5
 80163ba:	d417      	bmi.n	80163ec <_malloc_r+0x8c>
 80163bc:	2b0b      	cmp	r3, #11
 80163be:	d903      	bls.n	80163c8 <_malloc_r+0x68>
 80163c0:	6023      	str	r3, [r4, #0]
 80163c2:	441c      	add	r4, r3
 80163c4:	6025      	str	r5, [r4, #0]
 80163c6:	e004      	b.n	80163d2 <_malloc_r+0x72>
 80163c8:	6863      	ldr	r3, [r4, #4]
 80163ca:	42a2      	cmp	r2, r4
 80163cc:	bf0c      	ite	eq
 80163ce:	600b      	streq	r3, [r1, #0]
 80163d0:	6053      	strne	r3, [r2, #4]
 80163d2:	4630      	mov	r0, r6
 80163d4:	f000 f85a 	bl	801648c <__malloc_unlock>
 80163d8:	f104 000b 	add.w	r0, r4, #11
 80163dc:	1d23      	adds	r3, r4, #4
 80163de:	f020 0007 	bic.w	r0, r0, #7
 80163e2:	1ac2      	subs	r2, r0, r3
 80163e4:	d0cc      	beq.n	8016380 <_malloc_r+0x20>
 80163e6:	1a1b      	subs	r3, r3, r0
 80163e8:	50a3      	str	r3, [r4, r2]
 80163ea:	e7c9      	b.n	8016380 <_malloc_r+0x20>
 80163ec:	4622      	mov	r2, r4
 80163ee:	6864      	ldr	r4, [r4, #4]
 80163f0:	e7cc      	b.n	801638c <_malloc_r+0x2c>
 80163f2:	1cc4      	adds	r4, r0, #3
 80163f4:	f024 0403 	bic.w	r4, r4, #3
 80163f8:	42a0      	cmp	r0, r4
 80163fa:	d0e3      	beq.n	80163c4 <_malloc_r+0x64>
 80163fc:	1a21      	subs	r1, r4, r0
 80163fe:	4630      	mov	r0, r6
 8016400:	f000 f82e 	bl	8016460 <_sbrk_r>
 8016404:	3001      	adds	r0, #1
 8016406:	d1dd      	bne.n	80163c4 <_malloc_r+0x64>
 8016408:	e7cf      	b.n	80163aa <_malloc_r+0x4a>
 801640a:	bf00      	nop
 801640c:	20000234 	.word	0x20000234
 8016410:	20000238 	.word	0x20000238

08016414 <_realloc_r>:
 8016414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016416:	4607      	mov	r7, r0
 8016418:	4614      	mov	r4, r2
 801641a:	460e      	mov	r6, r1
 801641c:	b921      	cbnz	r1, 8016428 <_realloc_r+0x14>
 801641e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016422:	4611      	mov	r1, r2
 8016424:	f7ff bf9c 	b.w	8016360 <_malloc_r>
 8016428:	b922      	cbnz	r2, 8016434 <_realloc_r+0x20>
 801642a:	f7ff ff49 	bl	80162c0 <_free_r>
 801642e:	4625      	mov	r5, r4
 8016430:	4628      	mov	r0, r5
 8016432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016434:	f000 f830 	bl	8016498 <_malloc_usable_size_r>
 8016438:	42a0      	cmp	r0, r4
 801643a:	d20f      	bcs.n	801645c <_realloc_r+0x48>
 801643c:	4621      	mov	r1, r4
 801643e:	4638      	mov	r0, r7
 8016440:	f7ff ff8e 	bl	8016360 <_malloc_r>
 8016444:	4605      	mov	r5, r0
 8016446:	2800      	cmp	r0, #0
 8016448:	d0f2      	beq.n	8016430 <_realloc_r+0x1c>
 801644a:	4631      	mov	r1, r6
 801644c:	4622      	mov	r2, r4
 801644e:	f7ff ff0f 	bl	8016270 <memcpy>
 8016452:	4631      	mov	r1, r6
 8016454:	4638      	mov	r0, r7
 8016456:	f7ff ff33 	bl	80162c0 <_free_r>
 801645a:	e7e9      	b.n	8016430 <_realloc_r+0x1c>
 801645c:	4635      	mov	r5, r6
 801645e:	e7e7      	b.n	8016430 <_realloc_r+0x1c>

08016460 <_sbrk_r>:
 8016460:	b538      	push	{r3, r4, r5, lr}
 8016462:	4d06      	ldr	r5, [pc, #24]	; (801647c <_sbrk_r+0x1c>)
 8016464:	2300      	movs	r3, #0
 8016466:	4604      	mov	r4, r0
 8016468:	4608      	mov	r0, r1
 801646a:	602b      	str	r3, [r5, #0]
 801646c:	f7f4 fa68 	bl	800a940 <_sbrk>
 8016470:	1c43      	adds	r3, r0, #1
 8016472:	d102      	bne.n	801647a <_sbrk_r+0x1a>
 8016474:	682b      	ldr	r3, [r5, #0]
 8016476:	b103      	cbz	r3, 801647a <_sbrk_r+0x1a>
 8016478:	6023      	str	r3, [r4, #0]
 801647a:	bd38      	pop	{r3, r4, r5, pc}
 801647c:	20007c30 	.word	0x20007c30

08016480 <__malloc_lock>:
 8016480:	4801      	ldr	r0, [pc, #4]	; (8016488 <__malloc_lock+0x8>)
 8016482:	f000 b811 	b.w	80164a8 <__retarget_lock_acquire_recursive>
 8016486:	bf00      	nop
 8016488:	20007c38 	.word	0x20007c38

0801648c <__malloc_unlock>:
 801648c:	4801      	ldr	r0, [pc, #4]	; (8016494 <__malloc_unlock+0x8>)
 801648e:	f000 b80c 	b.w	80164aa <__retarget_lock_release_recursive>
 8016492:	bf00      	nop
 8016494:	20007c38 	.word	0x20007c38

08016498 <_malloc_usable_size_r>:
 8016498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801649c:	1f18      	subs	r0, r3, #4
 801649e:	2b00      	cmp	r3, #0
 80164a0:	bfbc      	itt	lt
 80164a2:	580b      	ldrlt	r3, [r1, r0]
 80164a4:	18c0      	addlt	r0, r0, r3
 80164a6:	4770      	bx	lr

080164a8 <__retarget_lock_acquire_recursive>:
 80164a8:	4770      	bx	lr

080164aa <__retarget_lock_release_recursive>:
 80164aa:	4770      	bx	lr
 80164ac:	0000      	movs	r0, r0
	...

080164b0 <floor>:
 80164b0:	ec51 0b10 	vmov	r0, r1, d0
 80164b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80164bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80164c0:	2e13      	cmp	r6, #19
 80164c2:	ee10 5a10 	vmov	r5, s0
 80164c6:	ee10 8a10 	vmov	r8, s0
 80164ca:	460c      	mov	r4, r1
 80164cc:	dc32      	bgt.n	8016534 <floor+0x84>
 80164ce:	2e00      	cmp	r6, #0
 80164d0:	da14      	bge.n	80164fc <floor+0x4c>
 80164d2:	a333      	add	r3, pc, #204	; (adr r3, 80165a0 <floor+0xf0>)
 80164d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d8:	f7e9 ff60 	bl	800039c <__adddf3>
 80164dc:	2200      	movs	r2, #0
 80164de:	2300      	movs	r3, #0
 80164e0:	f7ea fba2 	bl	8000c28 <__aeabi_dcmpgt>
 80164e4:	b138      	cbz	r0, 80164f6 <floor+0x46>
 80164e6:	2c00      	cmp	r4, #0
 80164e8:	da57      	bge.n	801659a <floor+0xea>
 80164ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80164ee:	431d      	orrs	r5, r3
 80164f0:	d001      	beq.n	80164f6 <floor+0x46>
 80164f2:	4c2d      	ldr	r4, [pc, #180]	; (80165a8 <floor+0xf8>)
 80164f4:	2500      	movs	r5, #0
 80164f6:	4621      	mov	r1, r4
 80164f8:	4628      	mov	r0, r5
 80164fa:	e025      	b.n	8016548 <floor+0x98>
 80164fc:	4f2b      	ldr	r7, [pc, #172]	; (80165ac <floor+0xfc>)
 80164fe:	4137      	asrs	r7, r6
 8016500:	ea01 0307 	and.w	r3, r1, r7
 8016504:	4303      	orrs	r3, r0
 8016506:	d01f      	beq.n	8016548 <floor+0x98>
 8016508:	a325      	add	r3, pc, #148	; (adr r3, 80165a0 <floor+0xf0>)
 801650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650e:	f7e9 ff45 	bl	800039c <__adddf3>
 8016512:	2200      	movs	r2, #0
 8016514:	2300      	movs	r3, #0
 8016516:	f7ea fb87 	bl	8000c28 <__aeabi_dcmpgt>
 801651a:	2800      	cmp	r0, #0
 801651c:	d0eb      	beq.n	80164f6 <floor+0x46>
 801651e:	2c00      	cmp	r4, #0
 8016520:	bfbe      	ittt	lt
 8016522:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016526:	fa43 f606 	asrlt.w	r6, r3, r6
 801652a:	19a4      	addlt	r4, r4, r6
 801652c:	ea24 0407 	bic.w	r4, r4, r7
 8016530:	2500      	movs	r5, #0
 8016532:	e7e0      	b.n	80164f6 <floor+0x46>
 8016534:	2e33      	cmp	r6, #51	; 0x33
 8016536:	dd0b      	ble.n	8016550 <floor+0xa0>
 8016538:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801653c:	d104      	bne.n	8016548 <floor+0x98>
 801653e:	ee10 2a10 	vmov	r2, s0
 8016542:	460b      	mov	r3, r1
 8016544:	f7e9 ff2a 	bl	800039c <__adddf3>
 8016548:	ec41 0b10 	vmov	d0, r0, r1
 801654c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016550:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016554:	f04f 33ff 	mov.w	r3, #4294967295
 8016558:	fa23 f707 	lsr.w	r7, r3, r7
 801655c:	4207      	tst	r7, r0
 801655e:	d0f3      	beq.n	8016548 <floor+0x98>
 8016560:	a30f      	add	r3, pc, #60	; (adr r3, 80165a0 <floor+0xf0>)
 8016562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016566:	f7e9 ff19 	bl	800039c <__adddf3>
 801656a:	2200      	movs	r2, #0
 801656c:	2300      	movs	r3, #0
 801656e:	f7ea fb5b 	bl	8000c28 <__aeabi_dcmpgt>
 8016572:	2800      	cmp	r0, #0
 8016574:	d0bf      	beq.n	80164f6 <floor+0x46>
 8016576:	2c00      	cmp	r4, #0
 8016578:	da02      	bge.n	8016580 <floor+0xd0>
 801657a:	2e14      	cmp	r6, #20
 801657c:	d103      	bne.n	8016586 <floor+0xd6>
 801657e:	3401      	adds	r4, #1
 8016580:	ea25 0507 	bic.w	r5, r5, r7
 8016584:	e7b7      	b.n	80164f6 <floor+0x46>
 8016586:	2301      	movs	r3, #1
 8016588:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801658c:	fa03 f606 	lsl.w	r6, r3, r6
 8016590:	4435      	add	r5, r6
 8016592:	4545      	cmp	r5, r8
 8016594:	bf38      	it	cc
 8016596:	18e4      	addcc	r4, r4, r3
 8016598:	e7f2      	b.n	8016580 <floor+0xd0>
 801659a:	2500      	movs	r5, #0
 801659c:	462c      	mov	r4, r5
 801659e:	e7aa      	b.n	80164f6 <floor+0x46>
 80165a0:	8800759c 	.word	0x8800759c
 80165a4:	7e37e43c 	.word	0x7e37e43c
 80165a8:	bff00000 	.word	0xbff00000
 80165ac:	000fffff 	.word	0x000fffff

080165b0 <sin>:
 80165b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165b2:	ec53 2b10 	vmov	r2, r3, d0
 80165b6:	4826      	ldr	r0, [pc, #152]	; (8016650 <sin+0xa0>)
 80165b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80165bc:	4281      	cmp	r1, r0
 80165be:	dc07      	bgt.n	80165d0 <sin+0x20>
 80165c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8016648 <sin+0x98>
 80165c4:	2000      	movs	r0, #0
 80165c6:	f001 f8df 	bl	8017788 <__kernel_sin>
 80165ca:	ec51 0b10 	vmov	r0, r1, d0
 80165ce:	e007      	b.n	80165e0 <sin+0x30>
 80165d0:	4820      	ldr	r0, [pc, #128]	; (8016654 <sin+0xa4>)
 80165d2:	4281      	cmp	r1, r0
 80165d4:	dd09      	ble.n	80165ea <sin+0x3a>
 80165d6:	ee10 0a10 	vmov	r0, s0
 80165da:	4619      	mov	r1, r3
 80165dc:	f7e9 fedc 	bl	8000398 <__aeabi_dsub>
 80165e0:	ec41 0b10 	vmov	d0, r0, r1
 80165e4:	b005      	add	sp, #20
 80165e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80165ea:	4668      	mov	r0, sp
 80165ec:	f000 fa5c 	bl	8016aa8 <__ieee754_rem_pio2>
 80165f0:	f000 0003 	and.w	r0, r0, #3
 80165f4:	2801      	cmp	r0, #1
 80165f6:	d008      	beq.n	801660a <sin+0x5a>
 80165f8:	2802      	cmp	r0, #2
 80165fa:	d00d      	beq.n	8016618 <sin+0x68>
 80165fc:	b9d0      	cbnz	r0, 8016634 <sin+0x84>
 80165fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016602:	ed9d 0b00 	vldr	d0, [sp]
 8016606:	2001      	movs	r0, #1
 8016608:	e7dd      	b.n	80165c6 <sin+0x16>
 801660a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801660e:	ed9d 0b00 	vldr	d0, [sp]
 8016612:	f000 fcb1 	bl	8016f78 <__kernel_cos>
 8016616:	e7d8      	b.n	80165ca <sin+0x1a>
 8016618:	ed9d 1b02 	vldr	d1, [sp, #8]
 801661c:	ed9d 0b00 	vldr	d0, [sp]
 8016620:	2001      	movs	r0, #1
 8016622:	f001 f8b1 	bl	8017788 <__kernel_sin>
 8016626:	ec53 2b10 	vmov	r2, r3, d0
 801662a:	ee10 0a10 	vmov	r0, s0
 801662e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016632:	e7d5      	b.n	80165e0 <sin+0x30>
 8016634:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016638:	ed9d 0b00 	vldr	d0, [sp]
 801663c:	f000 fc9c 	bl	8016f78 <__kernel_cos>
 8016640:	e7f1      	b.n	8016626 <sin+0x76>
 8016642:	bf00      	nop
 8016644:	f3af 8000 	nop.w
	...
 8016650:	3fe921fb 	.word	0x3fe921fb
 8016654:	7fefffff 	.word	0x7fefffff

08016658 <exp>:
 8016658:	b538      	push	{r3, r4, r5, lr}
 801665a:	ed2d 8b02 	vpush	{d8}
 801665e:	ec55 4b10 	vmov	r4, r5, d0
 8016662:	f000 f8a5 	bl	80167b0 <__ieee754_exp>
 8016666:	4b22      	ldr	r3, [pc, #136]	; (80166f0 <exp+0x98>)
 8016668:	eeb0 8a40 	vmov.f32	s16, s0
 801666c:	eef0 8a60 	vmov.f32	s17, s1
 8016670:	f993 3000 	ldrsb.w	r3, [r3]
 8016674:	3301      	adds	r3, #1
 8016676:	d012      	beq.n	801669e <exp+0x46>
 8016678:	ec45 4b10 	vmov	d0, r4, r5
 801667c:	f001 f94b 	bl	8017916 <finite>
 8016680:	b168      	cbz	r0, 801669e <exp+0x46>
 8016682:	a313      	add	r3, pc, #76	; (adr r3, 80166d0 <exp+0x78>)
 8016684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016688:	4620      	mov	r0, r4
 801668a:	4629      	mov	r1, r5
 801668c:	f7ea facc 	bl	8000c28 <__aeabi_dcmpgt>
 8016690:	b160      	cbz	r0, 80166ac <exp+0x54>
 8016692:	f7ff fa9d 	bl	8015bd0 <__errno>
 8016696:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80166d8 <exp+0x80>
 801669a:	2322      	movs	r3, #34	; 0x22
 801669c:	6003      	str	r3, [r0, #0]
 801669e:	eeb0 0a48 	vmov.f32	s0, s16
 80166a2:	eef0 0a68 	vmov.f32	s1, s17
 80166a6:	ecbd 8b02 	vpop	{d8}
 80166aa:	bd38      	pop	{r3, r4, r5, pc}
 80166ac:	a30c      	add	r3, pc, #48	; (adr r3, 80166e0 <exp+0x88>)
 80166ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b2:	4620      	mov	r0, r4
 80166b4:	4629      	mov	r1, r5
 80166b6:	f7ea fa99 	bl	8000bec <__aeabi_dcmplt>
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d0ef      	beq.n	801669e <exp+0x46>
 80166be:	f7ff fa87 	bl	8015bd0 <__errno>
 80166c2:	2322      	movs	r3, #34	; 0x22
 80166c4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80166e8 <exp+0x90>
 80166c8:	6003      	str	r3, [r0, #0]
 80166ca:	e7e8      	b.n	801669e <exp+0x46>
 80166cc:	f3af 8000 	nop.w
 80166d0:	fefa39ef 	.word	0xfefa39ef
 80166d4:	40862e42 	.word	0x40862e42
 80166d8:	00000000 	.word	0x00000000
 80166dc:	7ff00000 	.word	0x7ff00000
 80166e0:	d52d3051 	.word	0xd52d3051
 80166e4:	c0874910 	.word	0xc0874910
	...
 80166f0:	20000128 	.word	0x20000128

080166f4 <log10f>:
 80166f4:	b508      	push	{r3, lr}
 80166f6:	ed2d 8b02 	vpush	{d8}
 80166fa:	eeb0 8a40 	vmov.f32	s16, s0
 80166fe:	f000 fbdd 	bl	8016ebc <__ieee754_log10f>
 8016702:	4b14      	ldr	r3, [pc, #80]	; (8016754 <log10f+0x60>)
 8016704:	f993 3000 	ldrsb.w	r3, [r3]
 8016708:	3301      	adds	r3, #1
 801670a:	d014      	beq.n	8016736 <log10f+0x42>
 801670c:	eeb4 8a48 	vcmp.f32	s16, s16
 8016710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016714:	d60f      	bvs.n	8016736 <log10f+0x42>
 8016716:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671e:	d80a      	bhi.n	8016736 <log10f+0x42>
 8016720:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016728:	d108      	bne.n	801673c <log10f+0x48>
 801672a:	f7ff fa51 	bl	8015bd0 <__errno>
 801672e:	2322      	movs	r3, #34	; 0x22
 8016730:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8016758 <log10f+0x64>
 8016734:	6003      	str	r3, [r0, #0]
 8016736:	ecbd 8b02 	vpop	{d8}
 801673a:	bd08      	pop	{r3, pc}
 801673c:	f7ff fa48 	bl	8015bd0 <__errno>
 8016740:	ecbd 8b02 	vpop	{d8}
 8016744:	2321      	movs	r3, #33	; 0x21
 8016746:	6003      	str	r3, [r0, #0]
 8016748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801674c:	4803      	ldr	r0, [pc, #12]	; (801675c <log10f+0x68>)
 801674e:	f001 b975 	b.w	8017a3c <nanf>
 8016752:	bf00      	nop
 8016754:	20000128 	.word	0x20000128
 8016758:	ff800000 	.word	0xff800000
 801675c:	08037445 	.word	0x08037445

08016760 <sqrtf>:
 8016760:	b508      	push	{r3, lr}
 8016762:	ed2d 8b02 	vpush	{d8}
 8016766:	eeb0 8a40 	vmov.f32	s16, s0
 801676a:	f000 fbff 	bl	8016f6c <__ieee754_sqrtf>
 801676e:	4b0d      	ldr	r3, [pc, #52]	; (80167a4 <sqrtf+0x44>)
 8016770:	f993 3000 	ldrsb.w	r3, [r3]
 8016774:	3301      	adds	r3, #1
 8016776:	d011      	beq.n	801679c <sqrtf+0x3c>
 8016778:	eeb4 8a48 	vcmp.f32	s16, s16
 801677c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016780:	d60c      	bvs.n	801679c <sqrtf+0x3c>
 8016782:	eddf 8a09 	vldr	s17, [pc, #36]	; 80167a8 <sqrtf+0x48>
 8016786:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801678a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801678e:	d505      	bpl.n	801679c <sqrtf+0x3c>
 8016790:	f7ff fa1e 	bl	8015bd0 <__errno>
 8016794:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016798:	2321      	movs	r3, #33	; 0x21
 801679a:	6003      	str	r3, [r0, #0]
 801679c:	ecbd 8b02 	vpop	{d8}
 80167a0:	bd08      	pop	{r3, pc}
 80167a2:	bf00      	nop
 80167a4:	20000128 	.word	0x20000128
	...

080167b0 <__ieee754_exp>:
 80167b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167b4:	ec55 4b10 	vmov	r4, r5, d0
 80167b8:	49b1      	ldr	r1, [pc, #708]	; (8016a80 <__ieee754_exp+0x2d0>)
 80167ba:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80167be:	428b      	cmp	r3, r1
 80167c0:	ed2d 8b04 	vpush	{d8-d9}
 80167c4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80167c8:	d937      	bls.n	801683a <__ieee754_exp+0x8a>
 80167ca:	49ae      	ldr	r1, [pc, #696]	; (8016a84 <__ieee754_exp+0x2d4>)
 80167cc:	428b      	cmp	r3, r1
 80167ce:	d916      	bls.n	80167fe <__ieee754_exp+0x4e>
 80167d0:	ee10 3a10 	vmov	r3, s0
 80167d4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80167d8:	4313      	orrs	r3, r2
 80167da:	d009      	beq.n	80167f0 <__ieee754_exp+0x40>
 80167dc:	ee10 2a10 	vmov	r2, s0
 80167e0:	462b      	mov	r3, r5
 80167e2:	4620      	mov	r0, r4
 80167e4:	4629      	mov	r1, r5
 80167e6:	f7e9 fdd9 	bl	800039c <__adddf3>
 80167ea:	4604      	mov	r4, r0
 80167ec:	460d      	mov	r5, r1
 80167ee:	e000      	b.n	80167f2 <__ieee754_exp+0x42>
 80167f0:	bb06      	cbnz	r6, 8016834 <__ieee754_exp+0x84>
 80167f2:	ecbd 8b04 	vpop	{d8-d9}
 80167f6:	ec45 4b10 	vmov	d0, r4, r5
 80167fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167fe:	a38a      	add	r3, pc, #552	; (adr r3, 8016a28 <__ieee754_exp+0x278>)
 8016800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016804:	ee10 0a10 	vmov	r0, s0
 8016808:	4629      	mov	r1, r5
 801680a:	f7ea fa0d 	bl	8000c28 <__aeabi_dcmpgt>
 801680e:	b138      	cbz	r0, 8016820 <__ieee754_exp+0x70>
 8016810:	a387      	add	r3, pc, #540	; (adr r3, 8016a30 <__ieee754_exp+0x280>)
 8016812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016816:	4610      	mov	r0, r2
 8016818:	4619      	mov	r1, r3
 801681a:	f7e9 ff75 	bl	8000708 <__aeabi_dmul>
 801681e:	e7e4      	b.n	80167ea <__ieee754_exp+0x3a>
 8016820:	a385      	add	r3, pc, #532	; (adr r3, 8016a38 <__ieee754_exp+0x288>)
 8016822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016826:	4620      	mov	r0, r4
 8016828:	4629      	mov	r1, r5
 801682a:	f7ea f9df 	bl	8000bec <__aeabi_dcmplt>
 801682e:	2800      	cmp	r0, #0
 8016830:	f000 8087 	beq.w	8016942 <__ieee754_exp+0x192>
 8016834:	2400      	movs	r4, #0
 8016836:	2500      	movs	r5, #0
 8016838:	e7db      	b.n	80167f2 <__ieee754_exp+0x42>
 801683a:	4a93      	ldr	r2, [pc, #588]	; (8016a88 <__ieee754_exp+0x2d8>)
 801683c:	4293      	cmp	r3, r2
 801683e:	f240 80ac 	bls.w	801699a <__ieee754_exp+0x1ea>
 8016842:	4a92      	ldr	r2, [pc, #584]	; (8016a8c <__ieee754_exp+0x2dc>)
 8016844:	4293      	cmp	r3, r2
 8016846:	d87c      	bhi.n	8016942 <__ieee754_exp+0x192>
 8016848:	4b91      	ldr	r3, [pc, #580]	; (8016a90 <__ieee754_exp+0x2e0>)
 801684a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016852:	ee10 0a10 	vmov	r0, s0
 8016856:	4629      	mov	r1, r5
 8016858:	f7e9 fd9e 	bl	8000398 <__aeabi_dsub>
 801685c:	4b8d      	ldr	r3, [pc, #564]	; (8016a94 <__ieee754_exp+0x2e4>)
 801685e:	00f7      	lsls	r7, r6, #3
 8016860:	443b      	add	r3, r7
 8016862:	ed93 7b00 	vldr	d7, [r3]
 8016866:	f1c6 0a01 	rsb	sl, r6, #1
 801686a:	4680      	mov	r8, r0
 801686c:	4689      	mov	r9, r1
 801686e:	ebaa 0a06 	sub.w	sl, sl, r6
 8016872:	eeb0 8a47 	vmov.f32	s16, s14
 8016876:	eef0 8a67 	vmov.f32	s17, s15
 801687a:	ec53 2b18 	vmov	r2, r3, d8
 801687e:	4640      	mov	r0, r8
 8016880:	4649      	mov	r1, r9
 8016882:	f7e9 fd89 	bl	8000398 <__aeabi_dsub>
 8016886:	4604      	mov	r4, r0
 8016888:	460d      	mov	r5, r1
 801688a:	4622      	mov	r2, r4
 801688c:	462b      	mov	r3, r5
 801688e:	4620      	mov	r0, r4
 8016890:	4629      	mov	r1, r5
 8016892:	f7e9 ff39 	bl	8000708 <__aeabi_dmul>
 8016896:	a36a      	add	r3, pc, #424	; (adr r3, 8016a40 <__ieee754_exp+0x290>)
 8016898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689c:	4606      	mov	r6, r0
 801689e:	460f      	mov	r7, r1
 80168a0:	f7e9 ff32 	bl	8000708 <__aeabi_dmul>
 80168a4:	a368      	add	r3, pc, #416	; (adr r3, 8016a48 <__ieee754_exp+0x298>)
 80168a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168aa:	f7e9 fd75 	bl	8000398 <__aeabi_dsub>
 80168ae:	4632      	mov	r2, r6
 80168b0:	463b      	mov	r3, r7
 80168b2:	f7e9 ff29 	bl	8000708 <__aeabi_dmul>
 80168b6:	a366      	add	r3, pc, #408	; (adr r3, 8016a50 <__ieee754_exp+0x2a0>)
 80168b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168bc:	f7e9 fd6e 	bl	800039c <__adddf3>
 80168c0:	4632      	mov	r2, r6
 80168c2:	463b      	mov	r3, r7
 80168c4:	f7e9 ff20 	bl	8000708 <__aeabi_dmul>
 80168c8:	a363      	add	r3, pc, #396	; (adr r3, 8016a58 <__ieee754_exp+0x2a8>)
 80168ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ce:	f7e9 fd63 	bl	8000398 <__aeabi_dsub>
 80168d2:	4632      	mov	r2, r6
 80168d4:	463b      	mov	r3, r7
 80168d6:	f7e9 ff17 	bl	8000708 <__aeabi_dmul>
 80168da:	a361      	add	r3, pc, #388	; (adr r3, 8016a60 <__ieee754_exp+0x2b0>)
 80168dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e0:	f7e9 fd5c 	bl	800039c <__adddf3>
 80168e4:	4632      	mov	r2, r6
 80168e6:	463b      	mov	r3, r7
 80168e8:	f7e9 ff0e 	bl	8000708 <__aeabi_dmul>
 80168ec:	4602      	mov	r2, r0
 80168ee:	460b      	mov	r3, r1
 80168f0:	4620      	mov	r0, r4
 80168f2:	4629      	mov	r1, r5
 80168f4:	f7e9 fd50 	bl	8000398 <__aeabi_dsub>
 80168f8:	4602      	mov	r2, r0
 80168fa:	460b      	mov	r3, r1
 80168fc:	4606      	mov	r6, r0
 80168fe:	460f      	mov	r7, r1
 8016900:	4620      	mov	r0, r4
 8016902:	4629      	mov	r1, r5
 8016904:	f7e9 ff00 	bl	8000708 <__aeabi_dmul>
 8016908:	ec41 0b19 	vmov	d9, r0, r1
 801690c:	f1ba 0f00 	cmp.w	sl, #0
 8016910:	d15d      	bne.n	80169ce <__ieee754_exp+0x21e>
 8016912:	2200      	movs	r2, #0
 8016914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016918:	4630      	mov	r0, r6
 801691a:	4639      	mov	r1, r7
 801691c:	f7e9 fd3c 	bl	8000398 <__aeabi_dsub>
 8016920:	4602      	mov	r2, r0
 8016922:	460b      	mov	r3, r1
 8016924:	ec51 0b19 	vmov	r0, r1, d9
 8016928:	f7ea f818 	bl	800095c <__aeabi_ddiv>
 801692c:	4622      	mov	r2, r4
 801692e:	462b      	mov	r3, r5
 8016930:	f7e9 fd32 	bl	8000398 <__aeabi_dsub>
 8016934:	4602      	mov	r2, r0
 8016936:	460b      	mov	r3, r1
 8016938:	2000      	movs	r0, #0
 801693a:	4957      	ldr	r1, [pc, #348]	; (8016a98 <__ieee754_exp+0x2e8>)
 801693c:	f7e9 fd2c 	bl	8000398 <__aeabi_dsub>
 8016940:	e753      	b.n	80167ea <__ieee754_exp+0x3a>
 8016942:	4856      	ldr	r0, [pc, #344]	; (8016a9c <__ieee754_exp+0x2ec>)
 8016944:	a348      	add	r3, pc, #288	; (adr r3, 8016a68 <__ieee754_exp+0x2b8>)
 8016946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801694a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801694e:	4629      	mov	r1, r5
 8016950:	4620      	mov	r0, r4
 8016952:	f7e9 fed9 	bl	8000708 <__aeabi_dmul>
 8016956:	e9d6 2300 	ldrd	r2, r3, [r6]
 801695a:	f7e9 fd1f 	bl	800039c <__adddf3>
 801695e:	f7ea f96d 	bl	8000c3c <__aeabi_d2iz>
 8016962:	4682      	mov	sl, r0
 8016964:	f7e9 fe66 	bl	8000634 <__aeabi_i2d>
 8016968:	a341      	add	r3, pc, #260	; (adr r3, 8016a70 <__ieee754_exp+0x2c0>)
 801696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801696e:	4606      	mov	r6, r0
 8016970:	460f      	mov	r7, r1
 8016972:	f7e9 fec9 	bl	8000708 <__aeabi_dmul>
 8016976:	4602      	mov	r2, r0
 8016978:	460b      	mov	r3, r1
 801697a:	4620      	mov	r0, r4
 801697c:	4629      	mov	r1, r5
 801697e:	f7e9 fd0b 	bl	8000398 <__aeabi_dsub>
 8016982:	a33d      	add	r3, pc, #244	; (adr r3, 8016a78 <__ieee754_exp+0x2c8>)
 8016984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016988:	4680      	mov	r8, r0
 801698a:	4689      	mov	r9, r1
 801698c:	4630      	mov	r0, r6
 801698e:	4639      	mov	r1, r7
 8016990:	f7e9 feba 	bl	8000708 <__aeabi_dmul>
 8016994:	ec41 0b18 	vmov	d8, r0, r1
 8016998:	e76f      	b.n	801687a <__ieee754_exp+0xca>
 801699a:	4a41      	ldr	r2, [pc, #260]	; (8016aa0 <__ieee754_exp+0x2f0>)
 801699c:	4293      	cmp	r3, r2
 801699e:	d811      	bhi.n	80169c4 <__ieee754_exp+0x214>
 80169a0:	a323      	add	r3, pc, #140	; (adr r3, 8016a30 <__ieee754_exp+0x280>)
 80169a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a6:	ee10 0a10 	vmov	r0, s0
 80169aa:	4629      	mov	r1, r5
 80169ac:	f7e9 fcf6 	bl	800039c <__adddf3>
 80169b0:	4b39      	ldr	r3, [pc, #228]	; (8016a98 <__ieee754_exp+0x2e8>)
 80169b2:	2200      	movs	r2, #0
 80169b4:	f7ea f938 	bl	8000c28 <__aeabi_dcmpgt>
 80169b8:	b138      	cbz	r0, 80169ca <__ieee754_exp+0x21a>
 80169ba:	4b37      	ldr	r3, [pc, #220]	; (8016a98 <__ieee754_exp+0x2e8>)
 80169bc:	2200      	movs	r2, #0
 80169be:	4620      	mov	r0, r4
 80169c0:	4629      	mov	r1, r5
 80169c2:	e710      	b.n	80167e6 <__ieee754_exp+0x36>
 80169c4:	f04f 0a00 	mov.w	sl, #0
 80169c8:	e75f      	b.n	801688a <__ieee754_exp+0xda>
 80169ca:	4682      	mov	sl, r0
 80169cc:	e75d      	b.n	801688a <__ieee754_exp+0xda>
 80169ce:	4632      	mov	r2, r6
 80169d0:	463b      	mov	r3, r7
 80169d2:	2000      	movs	r0, #0
 80169d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80169d8:	f7e9 fcde 	bl	8000398 <__aeabi_dsub>
 80169dc:	4602      	mov	r2, r0
 80169de:	460b      	mov	r3, r1
 80169e0:	ec51 0b19 	vmov	r0, r1, d9
 80169e4:	f7e9 ffba 	bl	800095c <__aeabi_ddiv>
 80169e8:	4602      	mov	r2, r0
 80169ea:	460b      	mov	r3, r1
 80169ec:	ec51 0b18 	vmov	r0, r1, d8
 80169f0:	f7e9 fcd2 	bl	8000398 <__aeabi_dsub>
 80169f4:	4642      	mov	r2, r8
 80169f6:	464b      	mov	r3, r9
 80169f8:	f7e9 fcce 	bl	8000398 <__aeabi_dsub>
 80169fc:	4602      	mov	r2, r0
 80169fe:	460b      	mov	r3, r1
 8016a00:	2000      	movs	r0, #0
 8016a02:	4925      	ldr	r1, [pc, #148]	; (8016a98 <__ieee754_exp+0x2e8>)
 8016a04:	f7e9 fcc8 	bl	8000398 <__aeabi_dsub>
 8016a08:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8016a0c:	4592      	cmp	sl, r2
 8016a0e:	db02      	blt.n	8016a16 <__ieee754_exp+0x266>
 8016a10:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8016a14:	e6e9      	b.n	80167ea <__ieee754_exp+0x3a>
 8016a16:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8016a1a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8016a1e:	2200      	movs	r2, #0
 8016a20:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8016a24:	e6f9      	b.n	801681a <__ieee754_exp+0x6a>
 8016a26:	bf00      	nop
 8016a28:	fefa39ef 	.word	0xfefa39ef
 8016a2c:	40862e42 	.word	0x40862e42
 8016a30:	8800759c 	.word	0x8800759c
 8016a34:	7e37e43c 	.word	0x7e37e43c
 8016a38:	d52d3051 	.word	0xd52d3051
 8016a3c:	c0874910 	.word	0xc0874910
 8016a40:	72bea4d0 	.word	0x72bea4d0
 8016a44:	3e663769 	.word	0x3e663769
 8016a48:	c5d26bf1 	.word	0xc5d26bf1
 8016a4c:	3ebbbd41 	.word	0x3ebbbd41
 8016a50:	af25de2c 	.word	0xaf25de2c
 8016a54:	3f11566a 	.word	0x3f11566a
 8016a58:	16bebd93 	.word	0x16bebd93
 8016a5c:	3f66c16c 	.word	0x3f66c16c
 8016a60:	5555553e 	.word	0x5555553e
 8016a64:	3fc55555 	.word	0x3fc55555
 8016a68:	652b82fe 	.word	0x652b82fe
 8016a6c:	3ff71547 	.word	0x3ff71547
 8016a70:	fee00000 	.word	0xfee00000
 8016a74:	3fe62e42 	.word	0x3fe62e42
 8016a78:	35793c76 	.word	0x35793c76
 8016a7c:	3dea39ef 	.word	0x3dea39ef
 8016a80:	40862e41 	.word	0x40862e41
 8016a84:	7fefffff 	.word	0x7fefffff
 8016a88:	3fd62e42 	.word	0x3fd62e42
 8016a8c:	3ff0a2b1 	.word	0x3ff0a2b1
 8016a90:	08037488 	.word	0x08037488
 8016a94:	08037498 	.word	0x08037498
 8016a98:	3ff00000 	.word	0x3ff00000
 8016a9c:	08037478 	.word	0x08037478
 8016aa0:	3e2fffff 	.word	0x3e2fffff
 8016aa4:	00000000 	.word	0x00000000

08016aa8 <__ieee754_rem_pio2>:
 8016aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aac:	ed2d 8b02 	vpush	{d8}
 8016ab0:	ec55 4b10 	vmov	r4, r5, d0
 8016ab4:	4bca      	ldr	r3, [pc, #808]	; (8016de0 <__ieee754_rem_pio2+0x338>)
 8016ab6:	b08b      	sub	sp, #44	; 0x2c
 8016ab8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8016abc:	4598      	cmp	r8, r3
 8016abe:	4682      	mov	sl, r0
 8016ac0:	9502      	str	r5, [sp, #8]
 8016ac2:	dc08      	bgt.n	8016ad6 <__ieee754_rem_pio2+0x2e>
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	ed80 0b00 	vstr	d0, [r0]
 8016acc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016ad0:	f04f 0b00 	mov.w	fp, #0
 8016ad4:	e028      	b.n	8016b28 <__ieee754_rem_pio2+0x80>
 8016ad6:	4bc3      	ldr	r3, [pc, #780]	; (8016de4 <__ieee754_rem_pio2+0x33c>)
 8016ad8:	4598      	cmp	r8, r3
 8016ada:	dc78      	bgt.n	8016bce <__ieee754_rem_pio2+0x126>
 8016adc:	9b02      	ldr	r3, [sp, #8]
 8016ade:	4ec2      	ldr	r6, [pc, #776]	; (8016de8 <__ieee754_rem_pio2+0x340>)
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	ee10 0a10 	vmov	r0, s0
 8016ae6:	a3b0      	add	r3, pc, #704	; (adr r3, 8016da8 <__ieee754_rem_pio2+0x300>)
 8016ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aec:	4629      	mov	r1, r5
 8016aee:	dd39      	ble.n	8016b64 <__ieee754_rem_pio2+0xbc>
 8016af0:	f7e9 fc52 	bl	8000398 <__aeabi_dsub>
 8016af4:	45b0      	cmp	r8, r6
 8016af6:	4604      	mov	r4, r0
 8016af8:	460d      	mov	r5, r1
 8016afa:	d01b      	beq.n	8016b34 <__ieee754_rem_pio2+0x8c>
 8016afc:	a3ac      	add	r3, pc, #688	; (adr r3, 8016db0 <__ieee754_rem_pio2+0x308>)
 8016afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b02:	f7e9 fc49 	bl	8000398 <__aeabi_dsub>
 8016b06:	4602      	mov	r2, r0
 8016b08:	460b      	mov	r3, r1
 8016b0a:	e9ca 2300 	strd	r2, r3, [sl]
 8016b0e:	4620      	mov	r0, r4
 8016b10:	4629      	mov	r1, r5
 8016b12:	f7e9 fc41 	bl	8000398 <__aeabi_dsub>
 8016b16:	a3a6      	add	r3, pc, #664	; (adr r3, 8016db0 <__ieee754_rem_pio2+0x308>)
 8016b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b1c:	f7e9 fc3c 	bl	8000398 <__aeabi_dsub>
 8016b20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016b24:	f04f 0b01 	mov.w	fp, #1
 8016b28:	4658      	mov	r0, fp
 8016b2a:	b00b      	add	sp, #44	; 0x2c
 8016b2c:	ecbd 8b02 	vpop	{d8}
 8016b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b34:	a3a0      	add	r3, pc, #640	; (adr r3, 8016db8 <__ieee754_rem_pio2+0x310>)
 8016b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3a:	f7e9 fc2d 	bl	8000398 <__aeabi_dsub>
 8016b3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8016dc0 <__ieee754_rem_pio2+0x318>)
 8016b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b44:	4604      	mov	r4, r0
 8016b46:	460d      	mov	r5, r1
 8016b48:	f7e9 fc26 	bl	8000398 <__aeabi_dsub>
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	460b      	mov	r3, r1
 8016b50:	e9ca 2300 	strd	r2, r3, [sl]
 8016b54:	4620      	mov	r0, r4
 8016b56:	4629      	mov	r1, r5
 8016b58:	f7e9 fc1e 	bl	8000398 <__aeabi_dsub>
 8016b5c:	a398      	add	r3, pc, #608	; (adr r3, 8016dc0 <__ieee754_rem_pio2+0x318>)
 8016b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b62:	e7db      	b.n	8016b1c <__ieee754_rem_pio2+0x74>
 8016b64:	f7e9 fc1a 	bl	800039c <__adddf3>
 8016b68:	45b0      	cmp	r8, r6
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	460d      	mov	r5, r1
 8016b6e:	d016      	beq.n	8016b9e <__ieee754_rem_pio2+0xf6>
 8016b70:	a38f      	add	r3, pc, #572	; (adr r3, 8016db0 <__ieee754_rem_pio2+0x308>)
 8016b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b76:	f7e9 fc11 	bl	800039c <__adddf3>
 8016b7a:	4602      	mov	r2, r0
 8016b7c:	460b      	mov	r3, r1
 8016b7e:	e9ca 2300 	strd	r2, r3, [sl]
 8016b82:	4620      	mov	r0, r4
 8016b84:	4629      	mov	r1, r5
 8016b86:	f7e9 fc07 	bl	8000398 <__aeabi_dsub>
 8016b8a:	a389      	add	r3, pc, #548	; (adr r3, 8016db0 <__ieee754_rem_pio2+0x308>)
 8016b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b90:	f7e9 fc04 	bl	800039c <__adddf3>
 8016b94:	f04f 3bff 	mov.w	fp, #4294967295
 8016b98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016b9c:	e7c4      	b.n	8016b28 <__ieee754_rem_pio2+0x80>
 8016b9e:	a386      	add	r3, pc, #536	; (adr r3, 8016db8 <__ieee754_rem_pio2+0x310>)
 8016ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba4:	f7e9 fbfa 	bl	800039c <__adddf3>
 8016ba8:	a385      	add	r3, pc, #532	; (adr r3, 8016dc0 <__ieee754_rem_pio2+0x318>)
 8016baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bae:	4604      	mov	r4, r0
 8016bb0:	460d      	mov	r5, r1
 8016bb2:	f7e9 fbf3 	bl	800039c <__adddf3>
 8016bb6:	4602      	mov	r2, r0
 8016bb8:	460b      	mov	r3, r1
 8016bba:	e9ca 2300 	strd	r2, r3, [sl]
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	4629      	mov	r1, r5
 8016bc2:	f7e9 fbe9 	bl	8000398 <__aeabi_dsub>
 8016bc6:	a37e      	add	r3, pc, #504	; (adr r3, 8016dc0 <__ieee754_rem_pio2+0x318>)
 8016bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bcc:	e7e0      	b.n	8016b90 <__ieee754_rem_pio2+0xe8>
 8016bce:	4b87      	ldr	r3, [pc, #540]	; (8016dec <__ieee754_rem_pio2+0x344>)
 8016bd0:	4598      	cmp	r8, r3
 8016bd2:	f300 80d9 	bgt.w	8016d88 <__ieee754_rem_pio2+0x2e0>
 8016bd6:	f000 fe95 	bl	8017904 <fabs>
 8016bda:	ec55 4b10 	vmov	r4, r5, d0
 8016bde:	ee10 0a10 	vmov	r0, s0
 8016be2:	a379      	add	r3, pc, #484	; (adr r3, 8016dc8 <__ieee754_rem_pio2+0x320>)
 8016be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be8:	4629      	mov	r1, r5
 8016bea:	f7e9 fd8d 	bl	8000708 <__aeabi_dmul>
 8016bee:	4b80      	ldr	r3, [pc, #512]	; (8016df0 <__ieee754_rem_pio2+0x348>)
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	f7e9 fbd3 	bl	800039c <__adddf3>
 8016bf6:	f7ea f821 	bl	8000c3c <__aeabi_d2iz>
 8016bfa:	4683      	mov	fp, r0
 8016bfc:	f7e9 fd1a 	bl	8000634 <__aeabi_i2d>
 8016c00:	4602      	mov	r2, r0
 8016c02:	460b      	mov	r3, r1
 8016c04:	ec43 2b18 	vmov	d8, r2, r3
 8016c08:	a367      	add	r3, pc, #412	; (adr r3, 8016da8 <__ieee754_rem_pio2+0x300>)
 8016c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c0e:	f7e9 fd7b 	bl	8000708 <__aeabi_dmul>
 8016c12:	4602      	mov	r2, r0
 8016c14:	460b      	mov	r3, r1
 8016c16:	4620      	mov	r0, r4
 8016c18:	4629      	mov	r1, r5
 8016c1a:	f7e9 fbbd 	bl	8000398 <__aeabi_dsub>
 8016c1e:	a364      	add	r3, pc, #400	; (adr r3, 8016db0 <__ieee754_rem_pio2+0x308>)
 8016c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c24:	4606      	mov	r6, r0
 8016c26:	460f      	mov	r7, r1
 8016c28:	ec51 0b18 	vmov	r0, r1, d8
 8016c2c:	f7e9 fd6c 	bl	8000708 <__aeabi_dmul>
 8016c30:	f1bb 0f1f 	cmp.w	fp, #31
 8016c34:	4604      	mov	r4, r0
 8016c36:	460d      	mov	r5, r1
 8016c38:	dc0d      	bgt.n	8016c56 <__ieee754_rem_pio2+0x1ae>
 8016c3a:	4b6e      	ldr	r3, [pc, #440]	; (8016df4 <__ieee754_rem_pio2+0x34c>)
 8016c3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8016c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c44:	4543      	cmp	r3, r8
 8016c46:	d006      	beq.n	8016c56 <__ieee754_rem_pio2+0x1ae>
 8016c48:	4622      	mov	r2, r4
 8016c4a:	462b      	mov	r3, r5
 8016c4c:	4630      	mov	r0, r6
 8016c4e:	4639      	mov	r1, r7
 8016c50:	f7e9 fba2 	bl	8000398 <__aeabi_dsub>
 8016c54:	e00f      	b.n	8016c76 <__ieee754_rem_pio2+0x1ce>
 8016c56:	462b      	mov	r3, r5
 8016c58:	4622      	mov	r2, r4
 8016c5a:	4630      	mov	r0, r6
 8016c5c:	4639      	mov	r1, r7
 8016c5e:	f7e9 fb9b 	bl	8000398 <__aeabi_dsub>
 8016c62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016c66:	9303      	str	r3, [sp, #12]
 8016c68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016c6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8016c70:	f1b8 0f10 	cmp.w	r8, #16
 8016c74:	dc02      	bgt.n	8016c7c <__ieee754_rem_pio2+0x1d4>
 8016c76:	e9ca 0100 	strd	r0, r1, [sl]
 8016c7a:	e039      	b.n	8016cf0 <__ieee754_rem_pio2+0x248>
 8016c7c:	a34e      	add	r3, pc, #312	; (adr r3, 8016db8 <__ieee754_rem_pio2+0x310>)
 8016c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c82:	ec51 0b18 	vmov	r0, r1, d8
 8016c86:	f7e9 fd3f 	bl	8000708 <__aeabi_dmul>
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	460d      	mov	r5, r1
 8016c8e:	4602      	mov	r2, r0
 8016c90:	460b      	mov	r3, r1
 8016c92:	4630      	mov	r0, r6
 8016c94:	4639      	mov	r1, r7
 8016c96:	f7e9 fb7f 	bl	8000398 <__aeabi_dsub>
 8016c9a:	4602      	mov	r2, r0
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	4680      	mov	r8, r0
 8016ca0:	4689      	mov	r9, r1
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	4639      	mov	r1, r7
 8016ca6:	f7e9 fb77 	bl	8000398 <__aeabi_dsub>
 8016caa:	4622      	mov	r2, r4
 8016cac:	462b      	mov	r3, r5
 8016cae:	f7e9 fb73 	bl	8000398 <__aeabi_dsub>
 8016cb2:	a343      	add	r3, pc, #268	; (adr r3, 8016dc0 <__ieee754_rem_pio2+0x318>)
 8016cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb8:	4604      	mov	r4, r0
 8016cba:	460d      	mov	r5, r1
 8016cbc:	ec51 0b18 	vmov	r0, r1, d8
 8016cc0:	f7e9 fd22 	bl	8000708 <__aeabi_dmul>
 8016cc4:	4622      	mov	r2, r4
 8016cc6:	462b      	mov	r3, r5
 8016cc8:	f7e9 fb66 	bl	8000398 <__aeabi_dsub>
 8016ccc:	4602      	mov	r2, r0
 8016cce:	460b      	mov	r3, r1
 8016cd0:	4604      	mov	r4, r0
 8016cd2:	460d      	mov	r5, r1
 8016cd4:	4640      	mov	r0, r8
 8016cd6:	4649      	mov	r1, r9
 8016cd8:	f7e9 fb5e 	bl	8000398 <__aeabi_dsub>
 8016cdc:	9a03      	ldr	r2, [sp, #12]
 8016cde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016ce2:	1ad3      	subs	r3, r2, r3
 8016ce4:	2b31      	cmp	r3, #49	; 0x31
 8016ce6:	dc24      	bgt.n	8016d32 <__ieee754_rem_pio2+0x28a>
 8016ce8:	e9ca 0100 	strd	r0, r1, [sl]
 8016cec:	4646      	mov	r6, r8
 8016cee:	464f      	mov	r7, r9
 8016cf0:	e9da 8900 	ldrd	r8, r9, [sl]
 8016cf4:	4630      	mov	r0, r6
 8016cf6:	4642      	mov	r2, r8
 8016cf8:	464b      	mov	r3, r9
 8016cfa:	4639      	mov	r1, r7
 8016cfc:	f7e9 fb4c 	bl	8000398 <__aeabi_dsub>
 8016d00:	462b      	mov	r3, r5
 8016d02:	4622      	mov	r2, r4
 8016d04:	f7e9 fb48 	bl	8000398 <__aeabi_dsub>
 8016d08:	9b02      	ldr	r3, [sp, #8]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016d10:	f6bf af0a 	bge.w	8016b28 <__ieee754_rem_pio2+0x80>
 8016d14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016d18:	f8ca 3004 	str.w	r3, [sl, #4]
 8016d1c:	f8ca 8000 	str.w	r8, [sl]
 8016d20:	f8ca 0008 	str.w	r0, [sl, #8]
 8016d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d28:	f8ca 300c 	str.w	r3, [sl, #12]
 8016d2c:	f1cb 0b00 	rsb	fp, fp, #0
 8016d30:	e6fa      	b.n	8016b28 <__ieee754_rem_pio2+0x80>
 8016d32:	a327      	add	r3, pc, #156	; (adr r3, 8016dd0 <__ieee754_rem_pio2+0x328>)
 8016d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d38:	ec51 0b18 	vmov	r0, r1, d8
 8016d3c:	f7e9 fce4 	bl	8000708 <__aeabi_dmul>
 8016d40:	4604      	mov	r4, r0
 8016d42:	460d      	mov	r5, r1
 8016d44:	4602      	mov	r2, r0
 8016d46:	460b      	mov	r3, r1
 8016d48:	4640      	mov	r0, r8
 8016d4a:	4649      	mov	r1, r9
 8016d4c:	f7e9 fb24 	bl	8000398 <__aeabi_dsub>
 8016d50:	4602      	mov	r2, r0
 8016d52:	460b      	mov	r3, r1
 8016d54:	4606      	mov	r6, r0
 8016d56:	460f      	mov	r7, r1
 8016d58:	4640      	mov	r0, r8
 8016d5a:	4649      	mov	r1, r9
 8016d5c:	f7e9 fb1c 	bl	8000398 <__aeabi_dsub>
 8016d60:	4622      	mov	r2, r4
 8016d62:	462b      	mov	r3, r5
 8016d64:	f7e9 fb18 	bl	8000398 <__aeabi_dsub>
 8016d68:	a31b      	add	r3, pc, #108	; (adr r3, 8016dd8 <__ieee754_rem_pio2+0x330>)
 8016d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d6e:	4604      	mov	r4, r0
 8016d70:	460d      	mov	r5, r1
 8016d72:	ec51 0b18 	vmov	r0, r1, d8
 8016d76:	f7e9 fcc7 	bl	8000708 <__aeabi_dmul>
 8016d7a:	4622      	mov	r2, r4
 8016d7c:	462b      	mov	r3, r5
 8016d7e:	f7e9 fb0b 	bl	8000398 <__aeabi_dsub>
 8016d82:	4604      	mov	r4, r0
 8016d84:	460d      	mov	r5, r1
 8016d86:	e75f      	b.n	8016c48 <__ieee754_rem_pio2+0x1a0>
 8016d88:	4b1b      	ldr	r3, [pc, #108]	; (8016df8 <__ieee754_rem_pio2+0x350>)
 8016d8a:	4598      	cmp	r8, r3
 8016d8c:	dd36      	ble.n	8016dfc <__ieee754_rem_pio2+0x354>
 8016d8e:	ee10 2a10 	vmov	r2, s0
 8016d92:	462b      	mov	r3, r5
 8016d94:	4620      	mov	r0, r4
 8016d96:	4629      	mov	r1, r5
 8016d98:	f7e9 fafe 	bl	8000398 <__aeabi_dsub>
 8016d9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016da0:	e9ca 0100 	strd	r0, r1, [sl]
 8016da4:	e694      	b.n	8016ad0 <__ieee754_rem_pio2+0x28>
 8016da6:	bf00      	nop
 8016da8:	54400000 	.word	0x54400000
 8016dac:	3ff921fb 	.word	0x3ff921fb
 8016db0:	1a626331 	.word	0x1a626331
 8016db4:	3dd0b461 	.word	0x3dd0b461
 8016db8:	1a600000 	.word	0x1a600000
 8016dbc:	3dd0b461 	.word	0x3dd0b461
 8016dc0:	2e037073 	.word	0x2e037073
 8016dc4:	3ba3198a 	.word	0x3ba3198a
 8016dc8:	6dc9c883 	.word	0x6dc9c883
 8016dcc:	3fe45f30 	.word	0x3fe45f30
 8016dd0:	2e000000 	.word	0x2e000000
 8016dd4:	3ba3198a 	.word	0x3ba3198a
 8016dd8:	252049c1 	.word	0x252049c1
 8016ddc:	397b839a 	.word	0x397b839a
 8016de0:	3fe921fb 	.word	0x3fe921fb
 8016de4:	4002d97b 	.word	0x4002d97b
 8016de8:	3ff921fb 	.word	0x3ff921fb
 8016dec:	413921fb 	.word	0x413921fb
 8016df0:	3fe00000 	.word	0x3fe00000
 8016df4:	080374a8 	.word	0x080374a8
 8016df8:	7fefffff 	.word	0x7fefffff
 8016dfc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8016e00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8016e04:	ee10 0a10 	vmov	r0, s0
 8016e08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8016e0c:	ee10 6a10 	vmov	r6, s0
 8016e10:	460f      	mov	r7, r1
 8016e12:	f7e9 ff13 	bl	8000c3c <__aeabi_d2iz>
 8016e16:	f7e9 fc0d 	bl	8000634 <__aeabi_i2d>
 8016e1a:	4602      	mov	r2, r0
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	4630      	mov	r0, r6
 8016e20:	4639      	mov	r1, r7
 8016e22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016e26:	f7e9 fab7 	bl	8000398 <__aeabi_dsub>
 8016e2a:	4b22      	ldr	r3, [pc, #136]	; (8016eb4 <__ieee754_rem_pio2+0x40c>)
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	f7e9 fc6b 	bl	8000708 <__aeabi_dmul>
 8016e32:	460f      	mov	r7, r1
 8016e34:	4606      	mov	r6, r0
 8016e36:	f7e9 ff01 	bl	8000c3c <__aeabi_d2iz>
 8016e3a:	f7e9 fbfb 	bl	8000634 <__aeabi_i2d>
 8016e3e:	4602      	mov	r2, r0
 8016e40:	460b      	mov	r3, r1
 8016e42:	4630      	mov	r0, r6
 8016e44:	4639      	mov	r1, r7
 8016e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016e4a:	f7e9 faa5 	bl	8000398 <__aeabi_dsub>
 8016e4e:	4b19      	ldr	r3, [pc, #100]	; (8016eb4 <__ieee754_rem_pio2+0x40c>)
 8016e50:	2200      	movs	r2, #0
 8016e52:	f7e9 fc59 	bl	8000708 <__aeabi_dmul>
 8016e56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016e5a:	ad04      	add	r5, sp, #16
 8016e5c:	f04f 0803 	mov.w	r8, #3
 8016e60:	46a9      	mov	r9, r5
 8016e62:	2600      	movs	r6, #0
 8016e64:	2700      	movs	r7, #0
 8016e66:	4632      	mov	r2, r6
 8016e68:	463b      	mov	r3, r7
 8016e6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8016e6e:	46c3      	mov	fp, r8
 8016e70:	3d08      	subs	r5, #8
 8016e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e76:	f7e9 feaf 	bl	8000bd8 <__aeabi_dcmpeq>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	d1f3      	bne.n	8016e66 <__ieee754_rem_pio2+0x3be>
 8016e7e:	4b0e      	ldr	r3, [pc, #56]	; (8016eb8 <__ieee754_rem_pio2+0x410>)
 8016e80:	9301      	str	r3, [sp, #4]
 8016e82:	2302      	movs	r3, #2
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	4622      	mov	r2, r4
 8016e88:	465b      	mov	r3, fp
 8016e8a:	4651      	mov	r1, sl
 8016e8c:	4648      	mov	r0, r9
 8016e8e:	f000 f93b 	bl	8017108 <__kernel_rem_pio2>
 8016e92:	9b02      	ldr	r3, [sp, #8]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	4683      	mov	fp, r0
 8016e98:	f6bf ae46 	bge.w	8016b28 <__ieee754_rem_pio2+0x80>
 8016e9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016ea0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016ea4:	f8ca 3004 	str.w	r3, [sl, #4]
 8016ea8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016eac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016eb0:	e73a      	b.n	8016d28 <__ieee754_rem_pio2+0x280>
 8016eb2:	bf00      	nop
 8016eb4:	41700000 	.word	0x41700000
 8016eb8:	08037528 	.word	0x08037528

08016ebc <__ieee754_log10f>:
 8016ebc:	b508      	push	{r3, lr}
 8016ebe:	ee10 2a10 	vmov	r2, s0
 8016ec2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016ec6:	ed2d 8b02 	vpush	{d8}
 8016eca:	d108      	bne.n	8016ede <__ieee754_log10f+0x22>
 8016ecc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8016f54 <__ieee754_log10f+0x98>
 8016ed0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8016f58 <__ieee754_log10f+0x9c>
 8016ed4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016ed8:	ecbd 8b02 	vpop	{d8}
 8016edc:	bd08      	pop	{r3, pc}
 8016ede:	2a00      	cmp	r2, #0
 8016ee0:	da02      	bge.n	8016ee8 <__ieee754_log10f+0x2c>
 8016ee2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016ee6:	e7f3      	b.n	8016ed0 <__ieee754_log10f+0x14>
 8016ee8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016eec:	db02      	blt.n	8016ef4 <__ieee754_log10f+0x38>
 8016eee:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016ef2:	e7f1      	b.n	8016ed8 <__ieee754_log10f+0x1c>
 8016ef4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8016ef8:	bfbf      	itttt	lt
 8016efa:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8016f5c <__ieee754_log10f+0xa0>
 8016efe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016f02:	f06f 0118 	mvnlt.w	r1, #24
 8016f06:	ee17 2a90 	vmovlt	r2, s15
 8016f0a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8016f0e:	bfa8      	it	ge
 8016f10:	2100      	movge	r1, #0
 8016f12:	3b7f      	subs	r3, #127	; 0x7f
 8016f14:	440b      	add	r3, r1
 8016f16:	0fd9      	lsrs	r1, r3, #31
 8016f18:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016f1c:	ee07 3a90 	vmov	s15, r3
 8016f20:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016f24:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8016f28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016f2c:	ee00 3a10 	vmov	s0, r3
 8016f30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016f34:	f000 fd88 	bl	8017a48 <__ieee754_logf>
 8016f38:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016f60 <__ieee754_log10f+0xa4>
 8016f3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016f40:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016f64 <__ieee754_log10f+0xa8>
 8016f44:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016f48:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016f68 <__ieee754_log10f+0xac>
 8016f4c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016f50:	e7c2      	b.n	8016ed8 <__ieee754_log10f+0x1c>
 8016f52:	bf00      	nop
 8016f54:	cc000000 	.word	0xcc000000
 8016f58:	00000000 	.word	0x00000000
 8016f5c:	4c000000 	.word	0x4c000000
 8016f60:	3ede5bd9 	.word	0x3ede5bd9
 8016f64:	355427db 	.word	0x355427db
 8016f68:	3e9a2080 	.word	0x3e9a2080

08016f6c <__ieee754_sqrtf>:
 8016f6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016f70:	4770      	bx	lr
 8016f72:	0000      	movs	r0, r0
 8016f74:	0000      	movs	r0, r0
	...

08016f78 <__kernel_cos>:
 8016f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f7c:	ec57 6b10 	vmov	r6, r7, d0
 8016f80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016f84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8016f88:	ed8d 1b00 	vstr	d1, [sp]
 8016f8c:	da07      	bge.n	8016f9e <__kernel_cos+0x26>
 8016f8e:	ee10 0a10 	vmov	r0, s0
 8016f92:	4639      	mov	r1, r7
 8016f94:	f7e9 fe52 	bl	8000c3c <__aeabi_d2iz>
 8016f98:	2800      	cmp	r0, #0
 8016f9a:	f000 8088 	beq.w	80170ae <__kernel_cos+0x136>
 8016f9e:	4632      	mov	r2, r6
 8016fa0:	463b      	mov	r3, r7
 8016fa2:	4630      	mov	r0, r6
 8016fa4:	4639      	mov	r1, r7
 8016fa6:	f7e9 fbaf 	bl	8000708 <__aeabi_dmul>
 8016faa:	4b51      	ldr	r3, [pc, #324]	; (80170f0 <__kernel_cos+0x178>)
 8016fac:	2200      	movs	r2, #0
 8016fae:	4604      	mov	r4, r0
 8016fb0:	460d      	mov	r5, r1
 8016fb2:	f7e9 fba9 	bl	8000708 <__aeabi_dmul>
 8016fb6:	a340      	add	r3, pc, #256	; (adr r3, 80170b8 <__kernel_cos+0x140>)
 8016fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fbc:	4682      	mov	sl, r0
 8016fbe:	468b      	mov	fp, r1
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	4629      	mov	r1, r5
 8016fc4:	f7e9 fba0 	bl	8000708 <__aeabi_dmul>
 8016fc8:	a33d      	add	r3, pc, #244	; (adr r3, 80170c0 <__kernel_cos+0x148>)
 8016fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fce:	f7e9 f9e5 	bl	800039c <__adddf3>
 8016fd2:	4622      	mov	r2, r4
 8016fd4:	462b      	mov	r3, r5
 8016fd6:	f7e9 fb97 	bl	8000708 <__aeabi_dmul>
 8016fda:	a33b      	add	r3, pc, #236	; (adr r3, 80170c8 <__kernel_cos+0x150>)
 8016fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe0:	f7e9 f9da 	bl	8000398 <__aeabi_dsub>
 8016fe4:	4622      	mov	r2, r4
 8016fe6:	462b      	mov	r3, r5
 8016fe8:	f7e9 fb8e 	bl	8000708 <__aeabi_dmul>
 8016fec:	a338      	add	r3, pc, #224	; (adr r3, 80170d0 <__kernel_cos+0x158>)
 8016fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff2:	f7e9 f9d3 	bl	800039c <__adddf3>
 8016ff6:	4622      	mov	r2, r4
 8016ff8:	462b      	mov	r3, r5
 8016ffa:	f7e9 fb85 	bl	8000708 <__aeabi_dmul>
 8016ffe:	a336      	add	r3, pc, #216	; (adr r3, 80170d8 <__kernel_cos+0x160>)
 8017000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017004:	f7e9 f9c8 	bl	8000398 <__aeabi_dsub>
 8017008:	4622      	mov	r2, r4
 801700a:	462b      	mov	r3, r5
 801700c:	f7e9 fb7c 	bl	8000708 <__aeabi_dmul>
 8017010:	a333      	add	r3, pc, #204	; (adr r3, 80170e0 <__kernel_cos+0x168>)
 8017012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017016:	f7e9 f9c1 	bl	800039c <__adddf3>
 801701a:	4622      	mov	r2, r4
 801701c:	462b      	mov	r3, r5
 801701e:	f7e9 fb73 	bl	8000708 <__aeabi_dmul>
 8017022:	4622      	mov	r2, r4
 8017024:	462b      	mov	r3, r5
 8017026:	f7e9 fb6f 	bl	8000708 <__aeabi_dmul>
 801702a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801702e:	4604      	mov	r4, r0
 8017030:	460d      	mov	r5, r1
 8017032:	4630      	mov	r0, r6
 8017034:	4639      	mov	r1, r7
 8017036:	f7e9 fb67 	bl	8000708 <__aeabi_dmul>
 801703a:	460b      	mov	r3, r1
 801703c:	4602      	mov	r2, r0
 801703e:	4629      	mov	r1, r5
 8017040:	4620      	mov	r0, r4
 8017042:	f7e9 f9a9 	bl	8000398 <__aeabi_dsub>
 8017046:	4b2b      	ldr	r3, [pc, #172]	; (80170f4 <__kernel_cos+0x17c>)
 8017048:	4598      	cmp	r8, r3
 801704a:	4606      	mov	r6, r0
 801704c:	460f      	mov	r7, r1
 801704e:	dc10      	bgt.n	8017072 <__kernel_cos+0xfa>
 8017050:	4602      	mov	r2, r0
 8017052:	460b      	mov	r3, r1
 8017054:	4650      	mov	r0, sl
 8017056:	4659      	mov	r1, fp
 8017058:	f7e9 f99e 	bl	8000398 <__aeabi_dsub>
 801705c:	460b      	mov	r3, r1
 801705e:	4926      	ldr	r1, [pc, #152]	; (80170f8 <__kernel_cos+0x180>)
 8017060:	4602      	mov	r2, r0
 8017062:	2000      	movs	r0, #0
 8017064:	f7e9 f998 	bl	8000398 <__aeabi_dsub>
 8017068:	ec41 0b10 	vmov	d0, r0, r1
 801706c:	b003      	add	sp, #12
 801706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017072:	4b22      	ldr	r3, [pc, #136]	; (80170fc <__kernel_cos+0x184>)
 8017074:	4920      	ldr	r1, [pc, #128]	; (80170f8 <__kernel_cos+0x180>)
 8017076:	4598      	cmp	r8, r3
 8017078:	bfcc      	ite	gt
 801707a:	4d21      	ldrgt	r5, [pc, #132]	; (8017100 <__kernel_cos+0x188>)
 801707c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8017080:	2400      	movs	r4, #0
 8017082:	4622      	mov	r2, r4
 8017084:	462b      	mov	r3, r5
 8017086:	2000      	movs	r0, #0
 8017088:	f7e9 f986 	bl	8000398 <__aeabi_dsub>
 801708c:	4622      	mov	r2, r4
 801708e:	4680      	mov	r8, r0
 8017090:	4689      	mov	r9, r1
 8017092:	462b      	mov	r3, r5
 8017094:	4650      	mov	r0, sl
 8017096:	4659      	mov	r1, fp
 8017098:	f7e9 f97e 	bl	8000398 <__aeabi_dsub>
 801709c:	4632      	mov	r2, r6
 801709e:	463b      	mov	r3, r7
 80170a0:	f7e9 f97a 	bl	8000398 <__aeabi_dsub>
 80170a4:	4602      	mov	r2, r0
 80170a6:	460b      	mov	r3, r1
 80170a8:	4640      	mov	r0, r8
 80170aa:	4649      	mov	r1, r9
 80170ac:	e7da      	b.n	8017064 <__kernel_cos+0xec>
 80170ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80170e8 <__kernel_cos+0x170>
 80170b2:	e7db      	b.n	801706c <__kernel_cos+0xf4>
 80170b4:	f3af 8000 	nop.w
 80170b8:	be8838d4 	.word	0xbe8838d4
 80170bc:	bda8fae9 	.word	0xbda8fae9
 80170c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80170c4:	3e21ee9e 	.word	0x3e21ee9e
 80170c8:	809c52ad 	.word	0x809c52ad
 80170cc:	3e927e4f 	.word	0x3e927e4f
 80170d0:	19cb1590 	.word	0x19cb1590
 80170d4:	3efa01a0 	.word	0x3efa01a0
 80170d8:	16c15177 	.word	0x16c15177
 80170dc:	3f56c16c 	.word	0x3f56c16c
 80170e0:	5555554c 	.word	0x5555554c
 80170e4:	3fa55555 	.word	0x3fa55555
 80170e8:	00000000 	.word	0x00000000
 80170ec:	3ff00000 	.word	0x3ff00000
 80170f0:	3fe00000 	.word	0x3fe00000
 80170f4:	3fd33332 	.word	0x3fd33332
 80170f8:	3ff00000 	.word	0x3ff00000
 80170fc:	3fe90000 	.word	0x3fe90000
 8017100:	3fd20000 	.word	0x3fd20000
 8017104:	00000000 	.word	0x00000000

08017108 <__kernel_rem_pio2>:
 8017108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801710c:	ed2d 8b02 	vpush	{d8}
 8017110:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8017114:	f112 0f14 	cmn.w	r2, #20
 8017118:	9308      	str	r3, [sp, #32]
 801711a:	9101      	str	r1, [sp, #4]
 801711c:	4bc6      	ldr	r3, [pc, #792]	; (8017438 <__kernel_rem_pio2+0x330>)
 801711e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8017120:	9009      	str	r0, [sp, #36]	; 0x24
 8017122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017126:	9304      	str	r3, [sp, #16]
 8017128:	9b08      	ldr	r3, [sp, #32]
 801712a:	f103 33ff 	add.w	r3, r3, #4294967295
 801712e:	bfa8      	it	ge
 8017130:	1ed4      	subge	r4, r2, #3
 8017132:	9306      	str	r3, [sp, #24]
 8017134:	bfb2      	itee	lt
 8017136:	2400      	movlt	r4, #0
 8017138:	2318      	movge	r3, #24
 801713a:	fb94 f4f3 	sdivge	r4, r4, r3
 801713e:	f06f 0317 	mvn.w	r3, #23
 8017142:	fb04 3303 	mla	r3, r4, r3, r3
 8017146:	eb03 0a02 	add.w	sl, r3, r2
 801714a:	9b04      	ldr	r3, [sp, #16]
 801714c:	9a06      	ldr	r2, [sp, #24]
 801714e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8017428 <__kernel_rem_pio2+0x320>
 8017152:	eb03 0802 	add.w	r8, r3, r2
 8017156:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8017158:	1aa7      	subs	r7, r4, r2
 801715a:	ae20      	add	r6, sp, #128	; 0x80
 801715c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017160:	2500      	movs	r5, #0
 8017162:	4545      	cmp	r5, r8
 8017164:	dd18      	ble.n	8017198 <__kernel_rem_pio2+0x90>
 8017166:	9b08      	ldr	r3, [sp, #32]
 8017168:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801716c:	aa20      	add	r2, sp, #128	; 0x80
 801716e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8017428 <__kernel_rem_pio2+0x320>
 8017172:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8017176:	f1c3 0301 	rsb	r3, r3, #1
 801717a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801717e:	9307      	str	r3, [sp, #28]
 8017180:	9b07      	ldr	r3, [sp, #28]
 8017182:	9a04      	ldr	r2, [sp, #16]
 8017184:	4443      	add	r3, r8
 8017186:	429a      	cmp	r2, r3
 8017188:	db2f      	blt.n	80171ea <__kernel_rem_pio2+0xe2>
 801718a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801718e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017192:	462f      	mov	r7, r5
 8017194:	2600      	movs	r6, #0
 8017196:	e01b      	b.n	80171d0 <__kernel_rem_pio2+0xc8>
 8017198:	42ef      	cmn	r7, r5
 801719a:	d407      	bmi.n	80171ac <__kernel_rem_pio2+0xa4>
 801719c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80171a0:	f7e9 fa48 	bl	8000634 <__aeabi_i2d>
 80171a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80171a8:	3501      	adds	r5, #1
 80171aa:	e7da      	b.n	8017162 <__kernel_rem_pio2+0x5a>
 80171ac:	ec51 0b18 	vmov	r0, r1, d8
 80171b0:	e7f8      	b.n	80171a4 <__kernel_rem_pio2+0x9c>
 80171b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171b6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80171ba:	f7e9 faa5 	bl	8000708 <__aeabi_dmul>
 80171be:	4602      	mov	r2, r0
 80171c0:	460b      	mov	r3, r1
 80171c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80171c6:	f7e9 f8e9 	bl	800039c <__adddf3>
 80171ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171ce:	3601      	adds	r6, #1
 80171d0:	9b06      	ldr	r3, [sp, #24]
 80171d2:	429e      	cmp	r6, r3
 80171d4:	f1a7 0708 	sub.w	r7, r7, #8
 80171d8:	ddeb      	ble.n	80171b2 <__kernel_rem_pio2+0xaa>
 80171da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80171de:	3508      	adds	r5, #8
 80171e0:	ecab 7b02 	vstmia	fp!, {d7}
 80171e4:	f108 0801 	add.w	r8, r8, #1
 80171e8:	e7ca      	b.n	8017180 <__kernel_rem_pio2+0x78>
 80171ea:	9b04      	ldr	r3, [sp, #16]
 80171ec:	aa0c      	add	r2, sp, #48	; 0x30
 80171ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80171f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80171f4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80171f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80171fa:	9c04      	ldr	r4, [sp, #16]
 80171fc:	930a      	str	r3, [sp, #40]	; 0x28
 80171fe:	ab98      	add	r3, sp, #608	; 0x260
 8017200:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017204:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8017208:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801720c:	f8cd b008 	str.w	fp, [sp, #8]
 8017210:	4625      	mov	r5, r4
 8017212:	2d00      	cmp	r5, #0
 8017214:	dc78      	bgt.n	8017308 <__kernel_rem_pio2+0x200>
 8017216:	ec47 6b10 	vmov	d0, r6, r7
 801721a:	4650      	mov	r0, sl
 801721c:	f000 fb88 	bl	8017930 <scalbn>
 8017220:	ec57 6b10 	vmov	r6, r7, d0
 8017224:	2200      	movs	r2, #0
 8017226:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801722a:	ee10 0a10 	vmov	r0, s0
 801722e:	4639      	mov	r1, r7
 8017230:	f7e9 fa6a 	bl	8000708 <__aeabi_dmul>
 8017234:	ec41 0b10 	vmov	d0, r0, r1
 8017238:	f7ff f93a 	bl	80164b0 <floor>
 801723c:	4b7f      	ldr	r3, [pc, #508]	; (801743c <__kernel_rem_pio2+0x334>)
 801723e:	ec51 0b10 	vmov	r0, r1, d0
 8017242:	2200      	movs	r2, #0
 8017244:	f7e9 fa60 	bl	8000708 <__aeabi_dmul>
 8017248:	4602      	mov	r2, r0
 801724a:	460b      	mov	r3, r1
 801724c:	4630      	mov	r0, r6
 801724e:	4639      	mov	r1, r7
 8017250:	f7e9 f8a2 	bl	8000398 <__aeabi_dsub>
 8017254:	460f      	mov	r7, r1
 8017256:	4606      	mov	r6, r0
 8017258:	f7e9 fcf0 	bl	8000c3c <__aeabi_d2iz>
 801725c:	9007      	str	r0, [sp, #28]
 801725e:	f7e9 f9e9 	bl	8000634 <__aeabi_i2d>
 8017262:	4602      	mov	r2, r0
 8017264:	460b      	mov	r3, r1
 8017266:	4630      	mov	r0, r6
 8017268:	4639      	mov	r1, r7
 801726a:	f7e9 f895 	bl	8000398 <__aeabi_dsub>
 801726e:	f1ba 0f00 	cmp.w	sl, #0
 8017272:	4606      	mov	r6, r0
 8017274:	460f      	mov	r7, r1
 8017276:	dd70      	ble.n	801735a <__kernel_rem_pio2+0x252>
 8017278:	1e62      	subs	r2, r4, #1
 801727a:	ab0c      	add	r3, sp, #48	; 0x30
 801727c:	9d07      	ldr	r5, [sp, #28]
 801727e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017282:	f1ca 0118 	rsb	r1, sl, #24
 8017286:	fa40 f301 	asr.w	r3, r0, r1
 801728a:	441d      	add	r5, r3
 801728c:	408b      	lsls	r3, r1
 801728e:	1ac0      	subs	r0, r0, r3
 8017290:	ab0c      	add	r3, sp, #48	; 0x30
 8017292:	9507      	str	r5, [sp, #28]
 8017294:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8017298:	f1ca 0317 	rsb	r3, sl, #23
 801729c:	fa40 f303 	asr.w	r3, r0, r3
 80172a0:	9302      	str	r3, [sp, #8]
 80172a2:	9b02      	ldr	r3, [sp, #8]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	dd66      	ble.n	8017376 <__kernel_rem_pio2+0x26e>
 80172a8:	9b07      	ldr	r3, [sp, #28]
 80172aa:	2200      	movs	r2, #0
 80172ac:	3301      	adds	r3, #1
 80172ae:	9307      	str	r3, [sp, #28]
 80172b0:	4615      	mov	r5, r2
 80172b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80172b6:	4294      	cmp	r4, r2
 80172b8:	f300 8099 	bgt.w	80173ee <__kernel_rem_pio2+0x2e6>
 80172bc:	f1ba 0f00 	cmp.w	sl, #0
 80172c0:	dd07      	ble.n	80172d2 <__kernel_rem_pio2+0x1ca>
 80172c2:	f1ba 0f01 	cmp.w	sl, #1
 80172c6:	f000 80a5 	beq.w	8017414 <__kernel_rem_pio2+0x30c>
 80172ca:	f1ba 0f02 	cmp.w	sl, #2
 80172ce:	f000 80c1 	beq.w	8017454 <__kernel_rem_pio2+0x34c>
 80172d2:	9b02      	ldr	r3, [sp, #8]
 80172d4:	2b02      	cmp	r3, #2
 80172d6:	d14e      	bne.n	8017376 <__kernel_rem_pio2+0x26e>
 80172d8:	4632      	mov	r2, r6
 80172da:	463b      	mov	r3, r7
 80172dc:	4958      	ldr	r1, [pc, #352]	; (8017440 <__kernel_rem_pio2+0x338>)
 80172de:	2000      	movs	r0, #0
 80172e0:	f7e9 f85a 	bl	8000398 <__aeabi_dsub>
 80172e4:	4606      	mov	r6, r0
 80172e6:	460f      	mov	r7, r1
 80172e8:	2d00      	cmp	r5, #0
 80172ea:	d044      	beq.n	8017376 <__kernel_rem_pio2+0x26e>
 80172ec:	4650      	mov	r0, sl
 80172ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8017430 <__kernel_rem_pio2+0x328>
 80172f2:	f000 fb1d 	bl	8017930 <scalbn>
 80172f6:	4630      	mov	r0, r6
 80172f8:	4639      	mov	r1, r7
 80172fa:	ec53 2b10 	vmov	r2, r3, d0
 80172fe:	f7e9 f84b 	bl	8000398 <__aeabi_dsub>
 8017302:	4606      	mov	r6, r0
 8017304:	460f      	mov	r7, r1
 8017306:	e036      	b.n	8017376 <__kernel_rem_pio2+0x26e>
 8017308:	4b4e      	ldr	r3, [pc, #312]	; (8017444 <__kernel_rem_pio2+0x33c>)
 801730a:	2200      	movs	r2, #0
 801730c:	4630      	mov	r0, r6
 801730e:	4639      	mov	r1, r7
 8017310:	f7e9 f9fa 	bl	8000708 <__aeabi_dmul>
 8017314:	f7e9 fc92 	bl	8000c3c <__aeabi_d2iz>
 8017318:	f7e9 f98c 	bl	8000634 <__aeabi_i2d>
 801731c:	4b4a      	ldr	r3, [pc, #296]	; (8017448 <__kernel_rem_pio2+0x340>)
 801731e:	2200      	movs	r2, #0
 8017320:	4680      	mov	r8, r0
 8017322:	4689      	mov	r9, r1
 8017324:	f7e9 f9f0 	bl	8000708 <__aeabi_dmul>
 8017328:	4602      	mov	r2, r0
 801732a:	460b      	mov	r3, r1
 801732c:	4630      	mov	r0, r6
 801732e:	4639      	mov	r1, r7
 8017330:	f7e9 f832 	bl	8000398 <__aeabi_dsub>
 8017334:	f7e9 fc82 	bl	8000c3c <__aeabi_d2iz>
 8017338:	9b02      	ldr	r3, [sp, #8]
 801733a:	f843 0b04 	str.w	r0, [r3], #4
 801733e:	3d01      	subs	r5, #1
 8017340:	9302      	str	r3, [sp, #8]
 8017342:	ab70      	add	r3, sp, #448	; 0x1c0
 8017344:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734c:	4640      	mov	r0, r8
 801734e:	4649      	mov	r1, r9
 8017350:	f7e9 f824 	bl	800039c <__adddf3>
 8017354:	4606      	mov	r6, r0
 8017356:	460f      	mov	r7, r1
 8017358:	e75b      	b.n	8017212 <__kernel_rem_pio2+0x10a>
 801735a:	d105      	bne.n	8017368 <__kernel_rem_pio2+0x260>
 801735c:	1e63      	subs	r3, r4, #1
 801735e:	aa0c      	add	r2, sp, #48	; 0x30
 8017360:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017364:	15c3      	asrs	r3, r0, #23
 8017366:	e79b      	b.n	80172a0 <__kernel_rem_pio2+0x198>
 8017368:	4b38      	ldr	r3, [pc, #224]	; (801744c <__kernel_rem_pio2+0x344>)
 801736a:	2200      	movs	r2, #0
 801736c:	f7e9 fc52 	bl	8000c14 <__aeabi_dcmpge>
 8017370:	2800      	cmp	r0, #0
 8017372:	d139      	bne.n	80173e8 <__kernel_rem_pio2+0x2e0>
 8017374:	9002      	str	r0, [sp, #8]
 8017376:	2200      	movs	r2, #0
 8017378:	2300      	movs	r3, #0
 801737a:	4630      	mov	r0, r6
 801737c:	4639      	mov	r1, r7
 801737e:	f7e9 fc2b 	bl	8000bd8 <__aeabi_dcmpeq>
 8017382:	2800      	cmp	r0, #0
 8017384:	f000 80b4 	beq.w	80174f0 <__kernel_rem_pio2+0x3e8>
 8017388:	f104 3bff 	add.w	fp, r4, #4294967295
 801738c:	465b      	mov	r3, fp
 801738e:	2200      	movs	r2, #0
 8017390:	9904      	ldr	r1, [sp, #16]
 8017392:	428b      	cmp	r3, r1
 8017394:	da65      	bge.n	8017462 <__kernel_rem_pio2+0x35a>
 8017396:	2a00      	cmp	r2, #0
 8017398:	d07b      	beq.n	8017492 <__kernel_rem_pio2+0x38a>
 801739a:	ab0c      	add	r3, sp, #48	; 0x30
 801739c:	f1aa 0a18 	sub.w	sl, sl, #24
 80173a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	f000 80a0 	beq.w	80174ea <__kernel_rem_pio2+0x3e2>
 80173aa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8017430 <__kernel_rem_pio2+0x328>
 80173ae:	4650      	mov	r0, sl
 80173b0:	f000 fabe 	bl	8017930 <scalbn>
 80173b4:	4f23      	ldr	r7, [pc, #140]	; (8017444 <__kernel_rem_pio2+0x33c>)
 80173b6:	ec55 4b10 	vmov	r4, r5, d0
 80173ba:	46d8      	mov	r8, fp
 80173bc:	2600      	movs	r6, #0
 80173be:	f1b8 0f00 	cmp.w	r8, #0
 80173c2:	f280 80cf 	bge.w	8017564 <__kernel_rem_pio2+0x45c>
 80173c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8017428 <__kernel_rem_pio2+0x320>
 80173ca:	465f      	mov	r7, fp
 80173cc:	f04f 0800 	mov.w	r8, #0
 80173d0:	2f00      	cmp	r7, #0
 80173d2:	f2c0 80fd 	blt.w	80175d0 <__kernel_rem_pio2+0x4c8>
 80173d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80173d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8017450 <__kernel_rem_pio2+0x348>
 80173dc:	ec55 4b18 	vmov	r4, r5, d8
 80173e0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80173e4:	2600      	movs	r6, #0
 80173e6:	e0e5      	b.n	80175b4 <__kernel_rem_pio2+0x4ac>
 80173e8:	2302      	movs	r3, #2
 80173ea:	9302      	str	r3, [sp, #8]
 80173ec:	e75c      	b.n	80172a8 <__kernel_rem_pio2+0x1a0>
 80173ee:	f8db 3000 	ldr.w	r3, [fp]
 80173f2:	b955      	cbnz	r5, 801740a <__kernel_rem_pio2+0x302>
 80173f4:	b123      	cbz	r3, 8017400 <__kernel_rem_pio2+0x2f8>
 80173f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80173fa:	f8cb 3000 	str.w	r3, [fp]
 80173fe:	2301      	movs	r3, #1
 8017400:	3201      	adds	r2, #1
 8017402:	f10b 0b04 	add.w	fp, fp, #4
 8017406:	461d      	mov	r5, r3
 8017408:	e755      	b.n	80172b6 <__kernel_rem_pio2+0x1ae>
 801740a:	1acb      	subs	r3, r1, r3
 801740c:	f8cb 3000 	str.w	r3, [fp]
 8017410:	462b      	mov	r3, r5
 8017412:	e7f5      	b.n	8017400 <__kernel_rem_pio2+0x2f8>
 8017414:	1e62      	subs	r2, r4, #1
 8017416:	ab0c      	add	r3, sp, #48	; 0x30
 8017418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801741c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017420:	a90c      	add	r1, sp, #48	; 0x30
 8017422:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017426:	e754      	b.n	80172d2 <__kernel_rem_pio2+0x1ca>
	...
 8017434:	3ff00000 	.word	0x3ff00000
 8017438:	08037670 	.word	0x08037670
 801743c:	40200000 	.word	0x40200000
 8017440:	3ff00000 	.word	0x3ff00000
 8017444:	3e700000 	.word	0x3e700000
 8017448:	41700000 	.word	0x41700000
 801744c:	3fe00000 	.word	0x3fe00000
 8017450:	08037630 	.word	0x08037630
 8017454:	1e62      	subs	r2, r4, #1
 8017456:	ab0c      	add	r3, sp, #48	; 0x30
 8017458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801745c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017460:	e7de      	b.n	8017420 <__kernel_rem_pio2+0x318>
 8017462:	a90c      	add	r1, sp, #48	; 0x30
 8017464:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017468:	3b01      	subs	r3, #1
 801746a:	430a      	orrs	r2, r1
 801746c:	e790      	b.n	8017390 <__kernel_rem_pio2+0x288>
 801746e:	3301      	adds	r3, #1
 8017470:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017474:	2900      	cmp	r1, #0
 8017476:	d0fa      	beq.n	801746e <__kernel_rem_pio2+0x366>
 8017478:	9a08      	ldr	r2, [sp, #32]
 801747a:	18e3      	adds	r3, r4, r3
 801747c:	18a6      	adds	r6, r4, r2
 801747e:	aa20      	add	r2, sp, #128	; 0x80
 8017480:	1c65      	adds	r5, r4, #1
 8017482:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017486:	9302      	str	r3, [sp, #8]
 8017488:	9b02      	ldr	r3, [sp, #8]
 801748a:	42ab      	cmp	r3, r5
 801748c:	da04      	bge.n	8017498 <__kernel_rem_pio2+0x390>
 801748e:	461c      	mov	r4, r3
 8017490:	e6b5      	b.n	80171fe <__kernel_rem_pio2+0xf6>
 8017492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017494:	2301      	movs	r3, #1
 8017496:	e7eb      	b.n	8017470 <__kernel_rem_pio2+0x368>
 8017498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801749a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801749e:	f7e9 f8c9 	bl	8000634 <__aeabi_i2d>
 80174a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80174a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174a8:	46b3      	mov	fp, r6
 80174aa:	461c      	mov	r4, r3
 80174ac:	2700      	movs	r7, #0
 80174ae:	f04f 0800 	mov.w	r8, #0
 80174b2:	f04f 0900 	mov.w	r9, #0
 80174b6:	9b06      	ldr	r3, [sp, #24]
 80174b8:	429f      	cmp	r7, r3
 80174ba:	dd06      	ble.n	80174ca <__kernel_rem_pio2+0x3c2>
 80174bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80174be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80174c2:	e9c3 8900 	strd	r8, r9, [r3]
 80174c6:	3501      	adds	r5, #1
 80174c8:	e7de      	b.n	8017488 <__kernel_rem_pio2+0x380>
 80174ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80174ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80174d2:	f7e9 f919 	bl	8000708 <__aeabi_dmul>
 80174d6:	4602      	mov	r2, r0
 80174d8:	460b      	mov	r3, r1
 80174da:	4640      	mov	r0, r8
 80174dc:	4649      	mov	r1, r9
 80174de:	f7e8 ff5d 	bl	800039c <__adddf3>
 80174e2:	3701      	adds	r7, #1
 80174e4:	4680      	mov	r8, r0
 80174e6:	4689      	mov	r9, r1
 80174e8:	e7e5      	b.n	80174b6 <__kernel_rem_pio2+0x3ae>
 80174ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80174ee:	e754      	b.n	801739a <__kernel_rem_pio2+0x292>
 80174f0:	ec47 6b10 	vmov	d0, r6, r7
 80174f4:	f1ca 0000 	rsb	r0, sl, #0
 80174f8:	f000 fa1a 	bl	8017930 <scalbn>
 80174fc:	ec57 6b10 	vmov	r6, r7, d0
 8017500:	4b9f      	ldr	r3, [pc, #636]	; (8017780 <__kernel_rem_pio2+0x678>)
 8017502:	ee10 0a10 	vmov	r0, s0
 8017506:	2200      	movs	r2, #0
 8017508:	4639      	mov	r1, r7
 801750a:	f7e9 fb83 	bl	8000c14 <__aeabi_dcmpge>
 801750e:	b300      	cbz	r0, 8017552 <__kernel_rem_pio2+0x44a>
 8017510:	4b9c      	ldr	r3, [pc, #624]	; (8017784 <__kernel_rem_pio2+0x67c>)
 8017512:	2200      	movs	r2, #0
 8017514:	4630      	mov	r0, r6
 8017516:	4639      	mov	r1, r7
 8017518:	f7e9 f8f6 	bl	8000708 <__aeabi_dmul>
 801751c:	f7e9 fb8e 	bl	8000c3c <__aeabi_d2iz>
 8017520:	4605      	mov	r5, r0
 8017522:	f7e9 f887 	bl	8000634 <__aeabi_i2d>
 8017526:	4b96      	ldr	r3, [pc, #600]	; (8017780 <__kernel_rem_pio2+0x678>)
 8017528:	2200      	movs	r2, #0
 801752a:	f7e9 f8ed 	bl	8000708 <__aeabi_dmul>
 801752e:	460b      	mov	r3, r1
 8017530:	4602      	mov	r2, r0
 8017532:	4639      	mov	r1, r7
 8017534:	4630      	mov	r0, r6
 8017536:	f7e8 ff2f 	bl	8000398 <__aeabi_dsub>
 801753a:	f7e9 fb7f 	bl	8000c3c <__aeabi_d2iz>
 801753e:	f104 0b01 	add.w	fp, r4, #1
 8017542:	ab0c      	add	r3, sp, #48	; 0x30
 8017544:	f10a 0a18 	add.w	sl, sl, #24
 8017548:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801754c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8017550:	e72b      	b.n	80173aa <__kernel_rem_pio2+0x2a2>
 8017552:	4630      	mov	r0, r6
 8017554:	4639      	mov	r1, r7
 8017556:	f7e9 fb71 	bl	8000c3c <__aeabi_d2iz>
 801755a:	ab0c      	add	r3, sp, #48	; 0x30
 801755c:	46a3      	mov	fp, r4
 801755e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017562:	e722      	b.n	80173aa <__kernel_rem_pio2+0x2a2>
 8017564:	ab70      	add	r3, sp, #448	; 0x1c0
 8017566:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801756a:	ab0c      	add	r3, sp, #48	; 0x30
 801756c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017570:	f7e9 f860 	bl	8000634 <__aeabi_i2d>
 8017574:	4622      	mov	r2, r4
 8017576:	462b      	mov	r3, r5
 8017578:	f7e9 f8c6 	bl	8000708 <__aeabi_dmul>
 801757c:	4632      	mov	r2, r6
 801757e:	e9c9 0100 	strd	r0, r1, [r9]
 8017582:	463b      	mov	r3, r7
 8017584:	4620      	mov	r0, r4
 8017586:	4629      	mov	r1, r5
 8017588:	f7e9 f8be 	bl	8000708 <__aeabi_dmul>
 801758c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017590:	4604      	mov	r4, r0
 8017592:	460d      	mov	r5, r1
 8017594:	e713      	b.n	80173be <__kernel_rem_pio2+0x2b6>
 8017596:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801759a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801759e:	f7e9 f8b3 	bl	8000708 <__aeabi_dmul>
 80175a2:	4602      	mov	r2, r0
 80175a4:	460b      	mov	r3, r1
 80175a6:	4620      	mov	r0, r4
 80175a8:	4629      	mov	r1, r5
 80175aa:	f7e8 fef7 	bl	800039c <__adddf3>
 80175ae:	3601      	adds	r6, #1
 80175b0:	4604      	mov	r4, r0
 80175b2:	460d      	mov	r5, r1
 80175b4:	9b04      	ldr	r3, [sp, #16]
 80175b6:	429e      	cmp	r6, r3
 80175b8:	dc01      	bgt.n	80175be <__kernel_rem_pio2+0x4b6>
 80175ba:	45b0      	cmp	r8, r6
 80175bc:	daeb      	bge.n	8017596 <__kernel_rem_pio2+0x48e>
 80175be:	ab48      	add	r3, sp, #288	; 0x120
 80175c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80175c4:	e9c3 4500 	strd	r4, r5, [r3]
 80175c8:	3f01      	subs	r7, #1
 80175ca:	f108 0801 	add.w	r8, r8, #1
 80175ce:	e6ff      	b.n	80173d0 <__kernel_rem_pio2+0x2c8>
 80175d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80175d2:	2b02      	cmp	r3, #2
 80175d4:	dc0b      	bgt.n	80175ee <__kernel_rem_pio2+0x4e6>
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	dc6e      	bgt.n	80176b8 <__kernel_rem_pio2+0x5b0>
 80175da:	d045      	beq.n	8017668 <__kernel_rem_pio2+0x560>
 80175dc:	9b07      	ldr	r3, [sp, #28]
 80175de:	f003 0007 	and.w	r0, r3, #7
 80175e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80175e6:	ecbd 8b02 	vpop	{d8}
 80175ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80175f0:	2b03      	cmp	r3, #3
 80175f2:	d1f3      	bne.n	80175dc <__kernel_rem_pio2+0x4d4>
 80175f4:	ab48      	add	r3, sp, #288	; 0x120
 80175f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80175fa:	46d0      	mov	r8, sl
 80175fc:	46d9      	mov	r9, fp
 80175fe:	f1b9 0f00 	cmp.w	r9, #0
 8017602:	f1a8 0808 	sub.w	r8, r8, #8
 8017606:	dc64      	bgt.n	80176d2 <__kernel_rem_pio2+0x5ca>
 8017608:	465c      	mov	r4, fp
 801760a:	2c01      	cmp	r4, #1
 801760c:	f1aa 0a08 	sub.w	sl, sl, #8
 8017610:	dc7e      	bgt.n	8017710 <__kernel_rem_pio2+0x608>
 8017612:	2000      	movs	r0, #0
 8017614:	2100      	movs	r1, #0
 8017616:	f1bb 0f01 	cmp.w	fp, #1
 801761a:	f300 8097 	bgt.w	801774c <__kernel_rem_pio2+0x644>
 801761e:	9b02      	ldr	r3, [sp, #8]
 8017620:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8017624:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8017628:	2b00      	cmp	r3, #0
 801762a:	f040 8099 	bne.w	8017760 <__kernel_rem_pio2+0x658>
 801762e:	9b01      	ldr	r3, [sp, #4]
 8017630:	e9c3 5600 	strd	r5, r6, [r3]
 8017634:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8017638:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801763c:	e7ce      	b.n	80175dc <__kernel_rem_pio2+0x4d4>
 801763e:	ab48      	add	r3, sp, #288	; 0x120
 8017640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017648:	f7e8 fea8 	bl	800039c <__adddf3>
 801764c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017650:	f1bb 0f00 	cmp.w	fp, #0
 8017654:	daf3      	bge.n	801763e <__kernel_rem_pio2+0x536>
 8017656:	9b02      	ldr	r3, [sp, #8]
 8017658:	b113      	cbz	r3, 8017660 <__kernel_rem_pio2+0x558>
 801765a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801765e:	4619      	mov	r1, r3
 8017660:	9b01      	ldr	r3, [sp, #4]
 8017662:	e9c3 0100 	strd	r0, r1, [r3]
 8017666:	e7b9      	b.n	80175dc <__kernel_rem_pio2+0x4d4>
 8017668:	2000      	movs	r0, #0
 801766a:	2100      	movs	r1, #0
 801766c:	e7f0      	b.n	8017650 <__kernel_rem_pio2+0x548>
 801766e:	ab48      	add	r3, sp, #288	; 0x120
 8017670:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017678:	f7e8 fe90 	bl	800039c <__adddf3>
 801767c:	3c01      	subs	r4, #1
 801767e:	2c00      	cmp	r4, #0
 8017680:	daf5      	bge.n	801766e <__kernel_rem_pio2+0x566>
 8017682:	9b02      	ldr	r3, [sp, #8]
 8017684:	b1e3      	cbz	r3, 80176c0 <__kernel_rem_pio2+0x5b8>
 8017686:	4602      	mov	r2, r0
 8017688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801768c:	9c01      	ldr	r4, [sp, #4]
 801768e:	e9c4 2300 	strd	r2, r3, [r4]
 8017692:	4602      	mov	r2, r0
 8017694:	460b      	mov	r3, r1
 8017696:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801769a:	f7e8 fe7d 	bl	8000398 <__aeabi_dsub>
 801769e:	ad4a      	add	r5, sp, #296	; 0x128
 80176a0:	2401      	movs	r4, #1
 80176a2:	45a3      	cmp	fp, r4
 80176a4:	da0f      	bge.n	80176c6 <__kernel_rem_pio2+0x5be>
 80176a6:	9b02      	ldr	r3, [sp, #8]
 80176a8:	b113      	cbz	r3, 80176b0 <__kernel_rem_pio2+0x5a8>
 80176aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80176ae:	4619      	mov	r1, r3
 80176b0:	9b01      	ldr	r3, [sp, #4]
 80176b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80176b6:	e791      	b.n	80175dc <__kernel_rem_pio2+0x4d4>
 80176b8:	465c      	mov	r4, fp
 80176ba:	2000      	movs	r0, #0
 80176bc:	2100      	movs	r1, #0
 80176be:	e7de      	b.n	801767e <__kernel_rem_pio2+0x576>
 80176c0:	4602      	mov	r2, r0
 80176c2:	460b      	mov	r3, r1
 80176c4:	e7e2      	b.n	801768c <__kernel_rem_pio2+0x584>
 80176c6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80176ca:	f7e8 fe67 	bl	800039c <__adddf3>
 80176ce:	3401      	adds	r4, #1
 80176d0:	e7e7      	b.n	80176a2 <__kernel_rem_pio2+0x59a>
 80176d2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80176d6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80176da:	4620      	mov	r0, r4
 80176dc:	4632      	mov	r2, r6
 80176de:	463b      	mov	r3, r7
 80176e0:	4629      	mov	r1, r5
 80176e2:	f7e8 fe5b 	bl	800039c <__adddf3>
 80176e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80176ea:	4602      	mov	r2, r0
 80176ec:	460b      	mov	r3, r1
 80176ee:	4620      	mov	r0, r4
 80176f0:	4629      	mov	r1, r5
 80176f2:	f7e8 fe51 	bl	8000398 <__aeabi_dsub>
 80176f6:	4632      	mov	r2, r6
 80176f8:	463b      	mov	r3, r7
 80176fa:	f7e8 fe4f 	bl	800039c <__adddf3>
 80176fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8017702:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8017706:	ed88 7b00 	vstr	d7, [r8]
 801770a:	f109 39ff 	add.w	r9, r9, #4294967295
 801770e:	e776      	b.n	80175fe <__kernel_rem_pio2+0x4f6>
 8017710:	e9da 8900 	ldrd	r8, r9, [sl]
 8017714:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8017718:	4640      	mov	r0, r8
 801771a:	4632      	mov	r2, r6
 801771c:	463b      	mov	r3, r7
 801771e:	4649      	mov	r1, r9
 8017720:	f7e8 fe3c 	bl	800039c <__adddf3>
 8017724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017728:	4602      	mov	r2, r0
 801772a:	460b      	mov	r3, r1
 801772c:	4640      	mov	r0, r8
 801772e:	4649      	mov	r1, r9
 8017730:	f7e8 fe32 	bl	8000398 <__aeabi_dsub>
 8017734:	4632      	mov	r2, r6
 8017736:	463b      	mov	r3, r7
 8017738:	f7e8 fe30 	bl	800039c <__adddf3>
 801773c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8017740:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8017744:	ed8a 7b00 	vstr	d7, [sl]
 8017748:	3c01      	subs	r4, #1
 801774a:	e75e      	b.n	801760a <__kernel_rem_pio2+0x502>
 801774c:	ab48      	add	r3, sp, #288	; 0x120
 801774e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017756:	f7e8 fe21 	bl	800039c <__adddf3>
 801775a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801775e:	e75a      	b.n	8017616 <__kernel_rem_pio2+0x50e>
 8017760:	9b01      	ldr	r3, [sp, #4]
 8017762:	9a01      	ldr	r2, [sp, #4]
 8017764:	601d      	str	r5, [r3, #0]
 8017766:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801776a:	605c      	str	r4, [r3, #4]
 801776c:	609f      	str	r7, [r3, #8]
 801776e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8017772:	60d3      	str	r3, [r2, #12]
 8017774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017778:	6110      	str	r0, [r2, #16]
 801777a:	6153      	str	r3, [r2, #20]
 801777c:	e72e      	b.n	80175dc <__kernel_rem_pio2+0x4d4>
 801777e:	bf00      	nop
 8017780:	41700000 	.word	0x41700000
 8017784:	3e700000 	.word	0x3e700000

08017788 <__kernel_sin>:
 8017788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801778c:	ed2d 8b04 	vpush	{d8-d9}
 8017790:	eeb0 8a41 	vmov.f32	s16, s2
 8017794:	eef0 8a61 	vmov.f32	s17, s3
 8017798:	ec55 4b10 	vmov	r4, r5, d0
 801779c:	b083      	sub	sp, #12
 801779e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80177a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80177a6:	9001      	str	r0, [sp, #4]
 80177a8:	da06      	bge.n	80177b8 <__kernel_sin+0x30>
 80177aa:	ee10 0a10 	vmov	r0, s0
 80177ae:	4629      	mov	r1, r5
 80177b0:	f7e9 fa44 	bl	8000c3c <__aeabi_d2iz>
 80177b4:	2800      	cmp	r0, #0
 80177b6:	d051      	beq.n	801785c <__kernel_sin+0xd4>
 80177b8:	4622      	mov	r2, r4
 80177ba:	462b      	mov	r3, r5
 80177bc:	4620      	mov	r0, r4
 80177be:	4629      	mov	r1, r5
 80177c0:	f7e8 ffa2 	bl	8000708 <__aeabi_dmul>
 80177c4:	4682      	mov	sl, r0
 80177c6:	468b      	mov	fp, r1
 80177c8:	4602      	mov	r2, r0
 80177ca:	460b      	mov	r3, r1
 80177cc:	4620      	mov	r0, r4
 80177ce:	4629      	mov	r1, r5
 80177d0:	f7e8 ff9a 	bl	8000708 <__aeabi_dmul>
 80177d4:	a341      	add	r3, pc, #260	; (adr r3, 80178dc <__kernel_sin+0x154>)
 80177d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177da:	4680      	mov	r8, r0
 80177dc:	4689      	mov	r9, r1
 80177de:	4650      	mov	r0, sl
 80177e0:	4659      	mov	r1, fp
 80177e2:	f7e8 ff91 	bl	8000708 <__aeabi_dmul>
 80177e6:	a33f      	add	r3, pc, #252	; (adr r3, 80178e4 <__kernel_sin+0x15c>)
 80177e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ec:	f7e8 fdd4 	bl	8000398 <__aeabi_dsub>
 80177f0:	4652      	mov	r2, sl
 80177f2:	465b      	mov	r3, fp
 80177f4:	f7e8 ff88 	bl	8000708 <__aeabi_dmul>
 80177f8:	a33c      	add	r3, pc, #240	; (adr r3, 80178ec <__kernel_sin+0x164>)
 80177fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fe:	f7e8 fdcd 	bl	800039c <__adddf3>
 8017802:	4652      	mov	r2, sl
 8017804:	465b      	mov	r3, fp
 8017806:	f7e8 ff7f 	bl	8000708 <__aeabi_dmul>
 801780a:	a33a      	add	r3, pc, #232	; (adr r3, 80178f4 <__kernel_sin+0x16c>)
 801780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017810:	f7e8 fdc2 	bl	8000398 <__aeabi_dsub>
 8017814:	4652      	mov	r2, sl
 8017816:	465b      	mov	r3, fp
 8017818:	f7e8 ff76 	bl	8000708 <__aeabi_dmul>
 801781c:	a337      	add	r3, pc, #220	; (adr r3, 80178fc <__kernel_sin+0x174>)
 801781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017822:	f7e8 fdbb 	bl	800039c <__adddf3>
 8017826:	9b01      	ldr	r3, [sp, #4]
 8017828:	4606      	mov	r6, r0
 801782a:	460f      	mov	r7, r1
 801782c:	b9eb      	cbnz	r3, 801786a <__kernel_sin+0xe2>
 801782e:	4602      	mov	r2, r0
 8017830:	460b      	mov	r3, r1
 8017832:	4650      	mov	r0, sl
 8017834:	4659      	mov	r1, fp
 8017836:	f7e8 ff67 	bl	8000708 <__aeabi_dmul>
 801783a:	a325      	add	r3, pc, #148	; (adr r3, 80178d0 <__kernel_sin+0x148>)
 801783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017840:	f7e8 fdaa 	bl	8000398 <__aeabi_dsub>
 8017844:	4642      	mov	r2, r8
 8017846:	464b      	mov	r3, r9
 8017848:	f7e8 ff5e 	bl	8000708 <__aeabi_dmul>
 801784c:	4602      	mov	r2, r0
 801784e:	460b      	mov	r3, r1
 8017850:	4620      	mov	r0, r4
 8017852:	4629      	mov	r1, r5
 8017854:	f7e8 fda2 	bl	800039c <__adddf3>
 8017858:	4604      	mov	r4, r0
 801785a:	460d      	mov	r5, r1
 801785c:	ec45 4b10 	vmov	d0, r4, r5
 8017860:	b003      	add	sp, #12
 8017862:	ecbd 8b04 	vpop	{d8-d9}
 8017866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801786a:	4b1b      	ldr	r3, [pc, #108]	; (80178d8 <__kernel_sin+0x150>)
 801786c:	ec51 0b18 	vmov	r0, r1, d8
 8017870:	2200      	movs	r2, #0
 8017872:	f7e8 ff49 	bl	8000708 <__aeabi_dmul>
 8017876:	4632      	mov	r2, r6
 8017878:	ec41 0b19 	vmov	d9, r0, r1
 801787c:	463b      	mov	r3, r7
 801787e:	4640      	mov	r0, r8
 8017880:	4649      	mov	r1, r9
 8017882:	f7e8 ff41 	bl	8000708 <__aeabi_dmul>
 8017886:	4602      	mov	r2, r0
 8017888:	460b      	mov	r3, r1
 801788a:	ec51 0b19 	vmov	r0, r1, d9
 801788e:	f7e8 fd83 	bl	8000398 <__aeabi_dsub>
 8017892:	4652      	mov	r2, sl
 8017894:	465b      	mov	r3, fp
 8017896:	f7e8 ff37 	bl	8000708 <__aeabi_dmul>
 801789a:	ec53 2b18 	vmov	r2, r3, d8
 801789e:	f7e8 fd7b 	bl	8000398 <__aeabi_dsub>
 80178a2:	a30b      	add	r3, pc, #44	; (adr r3, 80178d0 <__kernel_sin+0x148>)
 80178a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178a8:	4606      	mov	r6, r0
 80178aa:	460f      	mov	r7, r1
 80178ac:	4640      	mov	r0, r8
 80178ae:	4649      	mov	r1, r9
 80178b0:	f7e8 ff2a 	bl	8000708 <__aeabi_dmul>
 80178b4:	4602      	mov	r2, r0
 80178b6:	460b      	mov	r3, r1
 80178b8:	4630      	mov	r0, r6
 80178ba:	4639      	mov	r1, r7
 80178bc:	f7e8 fd6e 	bl	800039c <__adddf3>
 80178c0:	4602      	mov	r2, r0
 80178c2:	460b      	mov	r3, r1
 80178c4:	4620      	mov	r0, r4
 80178c6:	4629      	mov	r1, r5
 80178c8:	f7e8 fd66 	bl	8000398 <__aeabi_dsub>
 80178cc:	e7c4      	b.n	8017858 <__kernel_sin+0xd0>
 80178ce:	bf00      	nop
 80178d0:	55555549 	.word	0x55555549
 80178d4:	3fc55555 	.word	0x3fc55555
 80178d8:	3fe00000 	.word	0x3fe00000
 80178dc:	5acfd57c 	.word	0x5acfd57c
 80178e0:	3de5d93a 	.word	0x3de5d93a
 80178e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80178e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80178ec:	57b1fe7d 	.word	0x57b1fe7d
 80178f0:	3ec71de3 	.word	0x3ec71de3
 80178f4:	19c161d5 	.word	0x19c161d5
 80178f8:	3f2a01a0 	.word	0x3f2a01a0
 80178fc:	1110f8a6 	.word	0x1110f8a6
 8017900:	3f811111 	.word	0x3f811111

08017904 <fabs>:
 8017904:	ec51 0b10 	vmov	r0, r1, d0
 8017908:	ee10 2a10 	vmov	r2, s0
 801790c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017910:	ec43 2b10 	vmov	d0, r2, r3
 8017914:	4770      	bx	lr

08017916 <finite>:
 8017916:	b082      	sub	sp, #8
 8017918:	ed8d 0b00 	vstr	d0, [sp]
 801791c:	9801      	ldr	r0, [sp, #4]
 801791e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8017922:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017926:	0fc0      	lsrs	r0, r0, #31
 8017928:	b002      	add	sp, #8
 801792a:	4770      	bx	lr
 801792c:	0000      	movs	r0, r0
	...

08017930 <scalbn>:
 8017930:	b570      	push	{r4, r5, r6, lr}
 8017932:	ec55 4b10 	vmov	r4, r5, d0
 8017936:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801793a:	4606      	mov	r6, r0
 801793c:	462b      	mov	r3, r5
 801793e:	b99a      	cbnz	r2, 8017968 <scalbn+0x38>
 8017940:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017944:	4323      	orrs	r3, r4
 8017946:	d036      	beq.n	80179b6 <scalbn+0x86>
 8017948:	4b39      	ldr	r3, [pc, #228]	; (8017a30 <scalbn+0x100>)
 801794a:	4629      	mov	r1, r5
 801794c:	ee10 0a10 	vmov	r0, s0
 8017950:	2200      	movs	r2, #0
 8017952:	f7e8 fed9 	bl	8000708 <__aeabi_dmul>
 8017956:	4b37      	ldr	r3, [pc, #220]	; (8017a34 <scalbn+0x104>)
 8017958:	429e      	cmp	r6, r3
 801795a:	4604      	mov	r4, r0
 801795c:	460d      	mov	r5, r1
 801795e:	da10      	bge.n	8017982 <scalbn+0x52>
 8017960:	a32b      	add	r3, pc, #172	; (adr r3, 8017a10 <scalbn+0xe0>)
 8017962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017966:	e03a      	b.n	80179de <scalbn+0xae>
 8017968:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801796c:	428a      	cmp	r2, r1
 801796e:	d10c      	bne.n	801798a <scalbn+0x5a>
 8017970:	ee10 2a10 	vmov	r2, s0
 8017974:	4620      	mov	r0, r4
 8017976:	4629      	mov	r1, r5
 8017978:	f7e8 fd10 	bl	800039c <__adddf3>
 801797c:	4604      	mov	r4, r0
 801797e:	460d      	mov	r5, r1
 8017980:	e019      	b.n	80179b6 <scalbn+0x86>
 8017982:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017986:	460b      	mov	r3, r1
 8017988:	3a36      	subs	r2, #54	; 0x36
 801798a:	4432      	add	r2, r6
 801798c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017990:	428a      	cmp	r2, r1
 8017992:	dd08      	ble.n	80179a6 <scalbn+0x76>
 8017994:	2d00      	cmp	r5, #0
 8017996:	a120      	add	r1, pc, #128	; (adr r1, 8017a18 <scalbn+0xe8>)
 8017998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801799c:	da1c      	bge.n	80179d8 <scalbn+0xa8>
 801799e:	a120      	add	r1, pc, #128	; (adr r1, 8017a20 <scalbn+0xf0>)
 80179a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179a4:	e018      	b.n	80179d8 <scalbn+0xa8>
 80179a6:	2a00      	cmp	r2, #0
 80179a8:	dd08      	ble.n	80179bc <scalbn+0x8c>
 80179aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80179ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80179b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80179b6:	ec45 4b10 	vmov	d0, r4, r5
 80179ba:	bd70      	pop	{r4, r5, r6, pc}
 80179bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80179c0:	da19      	bge.n	80179f6 <scalbn+0xc6>
 80179c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80179c6:	429e      	cmp	r6, r3
 80179c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80179cc:	dd0a      	ble.n	80179e4 <scalbn+0xb4>
 80179ce:	a112      	add	r1, pc, #72	; (adr r1, 8017a18 <scalbn+0xe8>)
 80179d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d1e2      	bne.n	801799e <scalbn+0x6e>
 80179d8:	a30f      	add	r3, pc, #60	; (adr r3, 8017a18 <scalbn+0xe8>)
 80179da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179de:	f7e8 fe93 	bl	8000708 <__aeabi_dmul>
 80179e2:	e7cb      	b.n	801797c <scalbn+0x4c>
 80179e4:	a10a      	add	r1, pc, #40	; (adr r1, 8017a10 <scalbn+0xe0>)
 80179e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d0b8      	beq.n	8017960 <scalbn+0x30>
 80179ee:	a10e      	add	r1, pc, #56	; (adr r1, 8017a28 <scalbn+0xf8>)
 80179f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179f4:	e7b4      	b.n	8017960 <scalbn+0x30>
 80179f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80179fa:	3236      	adds	r2, #54	; 0x36
 80179fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017a00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017a04:	4620      	mov	r0, r4
 8017a06:	4b0c      	ldr	r3, [pc, #48]	; (8017a38 <scalbn+0x108>)
 8017a08:	2200      	movs	r2, #0
 8017a0a:	e7e8      	b.n	80179de <scalbn+0xae>
 8017a0c:	f3af 8000 	nop.w
 8017a10:	c2f8f359 	.word	0xc2f8f359
 8017a14:	01a56e1f 	.word	0x01a56e1f
 8017a18:	8800759c 	.word	0x8800759c
 8017a1c:	7e37e43c 	.word	0x7e37e43c
 8017a20:	8800759c 	.word	0x8800759c
 8017a24:	fe37e43c 	.word	0xfe37e43c
 8017a28:	c2f8f359 	.word	0xc2f8f359
 8017a2c:	81a56e1f 	.word	0x81a56e1f
 8017a30:	43500000 	.word	0x43500000
 8017a34:	ffff3cb0 	.word	0xffff3cb0
 8017a38:	3c900000 	.word	0x3c900000

08017a3c <nanf>:
 8017a3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017a44 <nanf+0x8>
 8017a40:	4770      	bx	lr
 8017a42:	bf00      	nop
 8017a44:	7fc00000 	.word	0x7fc00000

08017a48 <__ieee754_logf>:
 8017a48:	ee10 3a10 	vmov	r3, s0
 8017a4c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017a50:	d106      	bne.n	8017a60 <__ieee754_logf+0x18>
 8017a52:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8017be8 <__ieee754_logf+0x1a0>
 8017a56:	eddf 7a65 	vldr	s15, [pc, #404]	; 8017bec <__ieee754_logf+0x1a4>
 8017a5a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017a5e:	4770      	bx	lr
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	da02      	bge.n	8017a6a <__ieee754_logf+0x22>
 8017a64:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017a68:	e7f5      	b.n	8017a56 <__ieee754_logf+0xe>
 8017a6a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a6e:	db02      	blt.n	8017a76 <__ieee754_logf+0x2e>
 8017a70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a74:	4770      	bx	lr
 8017a76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017a7a:	bfb8      	it	lt
 8017a7c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8017bf0 <__ieee754_logf+0x1a8>
 8017a80:	485c      	ldr	r0, [pc, #368]	; (8017bf4 <__ieee754_logf+0x1ac>)
 8017a82:	bfbe      	ittt	lt
 8017a84:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017a88:	f06f 0118 	mvnlt.w	r1, #24
 8017a8c:	ee17 3a90 	vmovlt	r3, s15
 8017a90:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8017a94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017a98:	4418      	add	r0, r3
 8017a9a:	bfa8      	it	ge
 8017a9c:	2100      	movge	r1, #0
 8017a9e:	3a7f      	subs	r2, #127	; 0x7f
 8017aa0:	440a      	add	r2, r1
 8017aa2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8017aa6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8017aaa:	4319      	orrs	r1, r3
 8017aac:	ee00 1a10 	vmov	s0, r1
 8017ab0:	4951      	ldr	r1, [pc, #324]	; (8017bf8 <__ieee754_logf+0x1b0>)
 8017ab2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8017ab6:	f103 000f 	add.w	r0, r3, #15
 8017aba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017abe:	4001      	ands	r1, r0
 8017ac0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017ac4:	bb89      	cbnz	r1, 8017b2a <__ieee754_logf+0xe2>
 8017ac6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ace:	d10f      	bne.n	8017af0 <__ieee754_logf+0xa8>
 8017ad0:	2a00      	cmp	r2, #0
 8017ad2:	f000 8085 	beq.w	8017be0 <__ieee754_logf+0x198>
 8017ad6:	ee07 2a90 	vmov	s15, r2
 8017ada:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8017bfc <__ieee754_logf+0x1b4>
 8017ade:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8017c00 <__ieee754_logf+0x1b8>
 8017ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ae6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017aea:	eea7 0a87 	vfma.f32	s0, s15, s14
 8017aee:	4770      	bx	lr
 8017af0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8017c04 <__ieee754_logf+0x1bc>
 8017af4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017af8:	eee0 7a66 	vfms.f32	s15, s0, s13
 8017afc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017b04:	b912      	cbnz	r2, 8017b0c <__ieee754_logf+0xc4>
 8017b06:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017b0a:	4770      	bx	lr
 8017b0c:	ee07 2a90 	vmov	s15, r2
 8017b10:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8017bfc <__ieee754_logf+0x1b4>
 8017b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017b18:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017b1c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8017b20:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8017c00 <__ieee754_logf+0x1b8>
 8017b24:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8017b28:	4770      	bx	lr
 8017b2a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017b2e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017b32:	eddf 5a35 	vldr	s11, [pc, #212]	; 8017c08 <__ieee754_logf+0x1c0>
 8017b36:	eddf 4a35 	vldr	s9, [pc, #212]	; 8017c0c <__ieee754_logf+0x1c4>
 8017b3a:	4935      	ldr	r1, [pc, #212]	; (8017c10 <__ieee754_logf+0x1c8>)
 8017b3c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8017b40:	4419      	add	r1, r3
 8017b42:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8017b46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017b4a:	430b      	orrs	r3, r1
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	ee07 2a90 	vmov	s15, r2
 8017b52:	ee26 5a06 	vmul.f32	s10, s12, s12
 8017b56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017b5a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8017b5e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8017c14 <__ieee754_logf+0x1cc>
 8017b62:	eee7 7a25 	vfma.f32	s15, s14, s11
 8017b66:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8017c18 <__ieee754_logf+0x1d0>
 8017b6a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8017b6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017c1c <__ieee754_logf+0x1d4>
 8017b72:	eee7 7a24 	vfma.f32	s15, s14, s9
 8017b76:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8017c20 <__ieee754_logf+0x1d8>
 8017b7a:	eee7 4a87 	vfma.f32	s9, s15, s14
 8017b7e:	eddf 7a29 	vldr	s15, [pc, #164]	; 8017c24 <__ieee754_logf+0x1dc>
 8017b82:	eee4 7a87 	vfma.f32	s15, s9, s14
 8017b86:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017b8a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8017b8e:	dd1c      	ble.n	8017bca <__ieee754_logf+0x182>
 8017b90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017b94:	ee20 7a07 	vmul.f32	s14, s0, s14
 8017b98:	ee27 7a00 	vmul.f32	s14, s14, s0
 8017b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017ba0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017ba4:	b922      	cbnz	r2, 8017bb0 <__ieee754_logf+0x168>
 8017ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017baa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017bae:	4770      	bx	lr
 8017bb0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8017bfc <__ieee754_logf+0x1b4>
 8017bb4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017bbc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017bc0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017c00 <__ieee754_logf+0x1b8>
 8017bc4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8017bc8:	4770      	bx	lr
 8017bca:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017bce:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017bd2:	2a00      	cmp	r2, #0
 8017bd4:	d0e9      	beq.n	8017baa <__ieee754_logf+0x162>
 8017bd6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8017bfc <__ieee754_logf+0x1b4>
 8017bda:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8017bde:	e7ed      	b.n	8017bbc <__ieee754_logf+0x174>
 8017be0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8017bec <__ieee754_logf+0x1a4>
 8017be4:	4770      	bx	lr
 8017be6:	bf00      	nop
 8017be8:	cc000000 	.word	0xcc000000
 8017bec:	00000000 	.word	0x00000000
 8017bf0:	4c000000 	.word	0x4c000000
 8017bf4:	004afb20 	.word	0x004afb20
 8017bf8:	007ffff0 	.word	0x007ffff0
 8017bfc:	3717f7d1 	.word	0x3717f7d1
 8017c00:	3f317180 	.word	0x3f317180
 8017c04:	3eaaaaab 	.word	0x3eaaaaab
 8017c08:	3e1cd04f 	.word	0x3e1cd04f
 8017c0c:	3e178897 	.word	0x3e178897
 8017c10:	ffcf5c30 	.word	0xffcf5c30
 8017c14:	3e638e29 	.word	0x3e638e29
 8017c18:	3ecccccd 	.word	0x3ecccccd
 8017c1c:	3e3a3325 	.word	0x3e3a3325
 8017c20:	3e924925 	.word	0x3e924925
 8017c24:	3f2aaaab 	.word	0x3f2aaaab

08017c28 <_init>:
 8017c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c2a:	bf00      	nop
 8017c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c2e:	bc08      	pop	{r3}
 8017c30:	469e      	mov	lr, r3
 8017c32:	4770      	bx	lr

08017c34 <_fini>:
 8017c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c36:	bf00      	nop
 8017c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c3a:	bc08      	pop	{r3}
 8017c3c:	469e      	mov	lr, r3
 8017c3e:	4770      	bx	lr

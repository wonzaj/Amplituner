
amplituner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a58  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001fa40  08017c18  08017c18  00027c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037658  08037658  0005012c  2**0
                  CONTENTS
  4 .ARM          00000000  08037658  08037658  0005012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08037658  08037658  0005012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037658  08037658  00047658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803765c  0803765c  0004765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08037660  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b14  2000012c  0803778c  0005012c  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20007c40  0803778c  00057c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045541  00000000  00000000  0005015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006720  00000000  00000000  0009569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002348  00000000  00000000  0009bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000369ec  00000000  00000000  0009e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002f985  00000000  00000000  000d4af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00137e93  00000000  00000000  00104479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000c3  00000000  00000000  0023c30c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002010  00000000  00000000  0023c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000995c  00000000  00000000  0023e3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000966  00000000  00000000  00247d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000012c 	.word	0x2000012c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017c00 	.word	0x08017c00

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000130 	.word	0x20000130
 80001fc:	08017c00 	.word	0x08017c00

08000200 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000200:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000202:	2b01      	cmp	r3, #1
	IT       LS
 8000204:	bf98      	it	ls
	BXLS     lr
 8000206:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800020c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000218:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800021e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000220:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000222:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000224:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800022e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000234:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000238:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800023c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000240:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800024a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800025c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800025e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000260:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800026a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800026c:	2b01      	cmp	r3, #1
	IT       LS
 800026e:	bf98      	it	ls
	BXLS     lr
 8000270:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000276:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000282:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002a0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002b2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002b4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002b6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002be:	4770      	bx	lr

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <strlen>:
 80002d4:	4603      	mov	r3, r0
 80002d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d1fb      	bne.n	80002d6 <strlen+0x2>
 80002de:	1a18      	subs	r0, r3, r0
 80002e0:	3801      	subs	r0, #1
 80002e2:	4770      	bx	lr
	...

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2iz>:
 8000c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c44:	d215      	bcs.n	8000c72 <__aeabi_d2iz+0x36>
 8000c46:	d511      	bpl.n	8000c6c <__aeabi_d2iz+0x30>
 8000c48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d912      	bls.n	8000c78 <__aeabi_d2iz+0x3c>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c62:	fa23 f002 	lsr.w	r0, r3, r2
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	4770      	bx	lr
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c76:	d105      	bne.n	8000c84 <__aeabi_d2iz+0x48>
 8000c78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c82:	4770      	bx	lr
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2f>:
 8000c8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c94:	bf24      	itt	cs
 8000c96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9e:	d90d      	bls.n	8000cbc <__aeabi_d2f+0x30>
 8000ca0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb4:	bf08      	it	eq
 8000cb6:	f020 0001 	biceq.w	r0, r0, #1
 8000cba:	4770      	bx	lr
 8000cbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cc0:	d121      	bne.n	8000d06 <__aeabi_d2f+0x7a>
 8000cc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc6:	bfbc      	itt	lt
 8000cc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	4770      	bxlt	lr
 8000cce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd6:	f1c2 0218 	rsb	r2, r2, #24
 8000cda:	f1c2 0c20 	rsb	ip, r2, #32
 8000cde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ce2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce6:	bf18      	it	ne
 8000ce8:	f040 0001 	orrne.w	r0, r0, #1
 8000cec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf8:	ea40 000c 	orr.w	r0, r0, ip
 8000cfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000d00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d04:	e7cc      	b.n	8000ca0 <__aeabi_d2f+0x14>
 8000d06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d0a:	d107      	bne.n	8000d1c <__aeabi_d2f+0x90>
 8000d0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d10:	bf1e      	ittt	ne
 8000d12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d1a:	4770      	bxne	lr
 8000d1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <arm_cfft_radix8by2_f32>:
* \endcode
*
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0a0      	sub	sp, #128	; 0x80
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8000d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8000d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d52:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8000d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d56:	085b      	lsrs	r3, r3, #1
 8000d58:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8000d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	4413      	add	r3, r2
 8000d62:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8000d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d6a:	4413      	add	r3, r2
 8000d6c:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- )
 8000d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d74:	e1b6      	b.n	80010e4 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8000d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8000d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8000d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8000da0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8000da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8000dac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8000db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8000db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8000dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8000dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8000dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8000dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8000dd6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000dda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	1d1a      	adds	r2, r3, #4
 8000de2:	603a      	str	r2, [r7, #0]
 8000de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8000dec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000df0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	1d1a      	adds	r2, r3, #4
 8000df8:	603a      	str	r2, [r7, #0]
 8000dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dfe:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8000e02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000e06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	1d1a      	adds	r2, r3, #4
 8000e0e:	603a      	str	r2, [r7, #0]
 8000e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e14:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8000e18:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000e1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	1d1a      	adds	r2, r3, #4
 8000e24:	603a      	str	r2, [r7, #0]
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8000e2e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000e32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8000e3e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000e42:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8000e4e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000e52:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8000e5e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000e62:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8000e6e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e78:	1d1a      	adds	r2, r3, #4
 8000e7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e80:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8000e84:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e96:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8000e9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ea4:	1d1a      	adds	r2, r3, #4
 8000ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eac:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8000eb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000eb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eba:	1d1a      	adds	r2, r3, #4
 8000ebc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec2:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8000ec6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed2:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8000ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee2:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8000ee6:	ed97 7a04 	vldr	s14, [r7, #16]
 8000eea:	edd7 7a08 	vldr	s15, [r7, #32]
 8000eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef2:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8000ef6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000efa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f02:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8000f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f08:	1d1a      	adds	r2, r3, #4
 8000f0a:	673a      	str	r2, [r7, #112]	; 0x70
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8000f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f12:	1d1a      	adds	r2, r3, #4
 8000f14:	673a      	str	r2, [r7, #112]	; 0x70
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8000f1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f1e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8000f2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f2e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f36:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8000f3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000f3e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f46:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8000f4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f4e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f56:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8000f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f5c:	1d1a      	adds	r2, r3, #4
 8000f5e:	677a      	str	r2, [r7, #116]	; 0x74
 8000f60:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000f64:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8000f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f72:	1d1a      	adds	r2, r3, #4
 8000f74:	677a      	str	r2, [r7, #116]	; 0x74
 8000f76:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000f7a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f82:	edc3 7a00 	vstr	s15, [r3]

        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8000f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8000f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f9a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8000fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000faa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8000fb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fba:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 8000fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fc8:	1d1a      	adds	r2, r3, #4
 8000fca:	67ba      	str	r2, [r7, #120]	; 0x78
 8000fcc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000fd0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8000fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fde:	1d1a      	adds	r2, r3, #4
 8000fe0:	67ba      	str	r2, [r7, #120]	; 0x78
 8000fe2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000fe6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fee:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8000ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ff4:	1d1a      	adds	r2, r3, #4
 8000ff6:	673a      	str	r2, [r7, #112]	; 0x70
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8000ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ffe:	1d1a      	adds	r2, r3, #4
 8001000:	673a      	str	r2, [r7, #112]	; 0x70
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	65bb      	str	r3, [r7, #88]	; 0x58

        m0 = t2[2] * twR;
 8001006:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800100a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001012:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8001016:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800101a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001022:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8001026:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800102a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800102e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001032:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8001036:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800103a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *p2++ = m0 + m1;
 8001046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001048:	1d1a      	adds	r2, r3, #4
 800104a:	677a      	str	r2, [r7, #116]	; 0x74
 800104c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001050:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800105c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800105e:	1d1a      	adds	r2, r3, #4
 8001060:	677a      	str	r2, [r7, #116]	; 0x74
 8001062:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001066:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800106a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106e:	edc3 7a00 	vstr	s15, [r3]

        m0 = t4[2] * twI;
 8001072:	edd7 7a04 	vldr	s15, [r7, #16]
 8001076:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800107a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001082:	edd7 7a05 	vldr	s15, [r7, #20]
 8001086:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001092:	edd7 7a05 	vldr	s15, [r7, #20]
 8001096:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800109a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80010a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80010aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        *pMid2++ = m0 - m1;
 80010b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010b4:	1d1a      	adds	r2, r3, #4
 80010b6:	67ba      	str	r2, [r7, #120]	; 0x78
 80010b8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80010bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80010c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010ca:	1d1a      	adds	r2, r3, #4
 80010cc:	67ba      	str	r2, [r7, #120]	; 0x78
 80010ce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80010d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010da:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- )
 80010de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010e0:	3b01      	subs	r3, #1
 80010e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f47f ae45 	bne.w	8000d76 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80010ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010ee:	b299      	uxth	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	2302      	movs	r3, #2
 80010f6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80010f8:	f014 fa76 	bl	80155e8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80010fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010fe:	b299      	uxth	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	2302      	movs	r3, #2
 8001106:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001108:	f014 fa6e 	bl	80155e8 <arm_radix8_butterfly_f32>
}
 800110c:	bf00      	nop
 800110e:	3780      	adds	r7, #128	; 0x80
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0ac      	sub	sp, #176	; 0xb0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	085b      	lsrs	r3, r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800112a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	4413      	add	r3, r2
 8001134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8001138:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001142:	4413      	add	r3, r2
 8001144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8001148:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001152:	4413      	add	r3, r2
 8001154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800115c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001160:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8001162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001166:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8001168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800116c:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800116e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001172:	3b04      	subs	r3, #4
 8001174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8001178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800117c:	3b04      	subs	r3, #4
 800117e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001186:	3b04      	subs	r3, #4
 8001188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800118c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001196:	4413      	add	r3, r2
 8001198:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80011a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80011ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80011b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80011c6:	2306      	movs	r3, #6
 80011c8:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011dc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	ed93 7a00 	vldr	s14, [r3]
 80011e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001202:	3304      	adds	r3, #4
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800121c:	3304      	adds	r3, #4
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001226:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800122a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800122e:	3304      	adds	r3, #4
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800123c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001240:	3304      	adds	r3, #4
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800124e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800125a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001262:	edd3 7a00 	vldr	s15, [r3]
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800126e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800127a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800127e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128a:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800128e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001292:	3304      	adds	r3, #4
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800129c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012a4:	3304      	adds	r3, #4
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ae:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80012b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012b6:	3304      	adds	r3, #4
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012c8:	3304      	adds	r3, #4
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d2:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80012d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012ea:	edd3 7a00 	vldr	s15, [r3]
 80012ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f2:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80012f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	1d1a      	adds	r2, r3, #4
 8001312:	603a      	str	r2, [r7, #0]
 8001314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001318:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800131c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001320:	3304      	adds	r3, #4
 8001322:	ed93 7a00 	vldr	s14, [r3]
 8001326:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800132a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001332:	3304      	adds	r3, #4
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	1d1a      	adds	r2, r3, #4
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800134a:	1d1a      	adds	r2, r3, #4
 800134c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001352:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001358:	1d1a      	adds	r2, r3, #4
 800135a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800135e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001360:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001366:	1d1a      	adds	r2, r3, #4
 8001368:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001374:	1d1a      	adds	r2, r3, #4
 8001376:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800137a:	6a3a      	ldr	r2, [r7, #32]
 800137c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800137e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001382:	1d1a      	adds	r2, r3, #4
 8001384:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800138c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001390:	1d1a      	adds	r2, r3, #4
 8001392:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800139a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80013a2:	4413      	add	r3, r2
 80013a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80013a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80013b0:	4413      	add	r3, r2
 80013b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80013b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80013be:	4413      	add	r3, r2
 80013c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80013c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013c8:	3b02      	subs	r3, #2
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013d0:	e31a      	b.n	8001a08 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	ed93 7a00 	vldr	s14, [r3]
 80013d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3304      	adds	r3, #4
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800140a:	3304      	adds	r3, #4
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3304      	adds	r3, #4
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001424:	3304      	adds	r3, #4
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001436:	3304      	adds	r3, #4
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001448:	3304      	adds	r3, #4
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001452:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001462:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001472:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001492:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800149a:	3304      	adds	r3, #4
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80014a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014ac:	3304      	adds	r3, #4
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b6:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 80014ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014be:	3304      	adds	r3, #4
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80014c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014d0:	3304      	adds	r3, #4
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 80014de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014e2:	ed93 7a00 	vldr	s14, [r3]
 80014e6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fa:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80014fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800150a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	1d1a      	adds	r2, r3, #4
 800151a:	603a      	str	r2, [r7, #0]
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001524:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001528:	3304      	adds	r3, #4
 800152a:	ed93 7a00 	vldr	s14, [r3]
 800152e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800153a:	3304      	adds	r3, #4
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	1d1a      	adds	r2, r3, #4
 8001544:	603a      	str	r2, [r7, #0]
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800154e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001552:	3b04      	subs	r3, #4
 8001554:	ed93 7a00 	vldr	s14, [r3]
 8001558:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800155c:	3b04      	subs	r3, #4
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800156a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800156e:	3b04      	subs	r3, #4
 8001570:	ed93 7a00 	vldr	s14, [r3]
 8001574:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001578:	3b04      	subs	r3, #4
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 800159e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015a2:	ed93 7a00 	vldr	s14, [r3]
 80015a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 80015b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80015d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ee:	3b04      	subs	r3, #4
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80015fc:	3b04      	subs	r3, #4
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800160a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800160e:	3b04      	subs	r3, #4
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800161c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001620:	3b04      	subs	r3, #4
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 800162e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800163a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 800164e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001652:	ed93 7a00 	vldr	s14, [r3]
 8001656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001662:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166a:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800166e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001672:	3b04      	subs	r3, #4
 8001674:	ed93 7a00 	vldr	s14, [r3]
 8001678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800167c:	3b04      	subs	r3, #4
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001686:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800168a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168e:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800169e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016ae:	1f1a      	subs	r2, r3, #4
 80016b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80016bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c0:	3b04      	subs	r3, #4
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80016ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016d2:	3b04      	subs	r3, #4
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016dc:	1f1a      	subs	r2, r3, #4
 80016de:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80016ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016ee:	1d1a      	adds	r2, r3, #4
 80016f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 80016f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016fc:	1d1a      	adds	r2, r3, #4
 80016fe:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)

        // Top
        m0 = t2[0] * twR;
 8001706:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800170a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800170e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001712:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001716:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800171a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001726:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800172a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800172e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001732:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001736:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800173a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800173e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001742:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p2++ = m0 + m1;
 8001746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800174a:	1d1a      	adds	r2, r3, #4
 800174c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001750:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001754:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001764:	1d1a      	adds	r2, r3, #4
 8001766:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800176a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800176e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001776:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 800177a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800177e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 800178a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800178e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 800179a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800179e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80017a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 80017aa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80017ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80017b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd2-- = m0 - m1;
 80017ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017be:	1f1a      	subs	r2, r3, #4
 80017c0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80017c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80017c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 80017d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017d8:	1f1a      	subs	r2, r3, #4
 80017da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80017de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80017e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 80017ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 80017f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 80017fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001806:	4413      	add	r3, r2
 8001808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 800180c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001810:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 800181c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001820:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 800182c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001830:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001838:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 800183c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001840:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p3++ = m0 + m1;
 800184c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001850:	1d1a      	adds	r2, r3, #4
 8001852:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001856:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800185a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8001866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800186a:	1d1a      	adds	r2, r3, #4
 800186c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001870:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001874:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001878:	ee77 7a67 	vsub.f32	s15, s14, s15
 800187c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8001880:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800188c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001890:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8001894:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001898:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 80018a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018a8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 80018b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd3-- = m0 - m1;
 80018c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018c8:	1f1a      	subs	r2, r3, #4
 80018ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80018ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80018d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018da:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 80018de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018e2:	1f1a      	subs	r2, r3, #4
 80018e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80018e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80018ec:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	edc3 7a00 	vstr	s15, [r3]

        // COL 4
        twR = tw4[0];
 80018f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8001900:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8001908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001910:	4413      	add	r3, r2
 8001912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8001916:	edd7 7a03 	vldr	s15, [r7, #12]
 800191a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001922:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8001926:	edd7 7a04 	vldr	s15, [r7, #16]
 800192a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800192e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001932:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8001936:	edd7 7a04 	vldr	s15, [r7, #16]
 800193a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001942:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8001946:	edd7 7a03 	vldr	s15, [r7, #12]
 800194a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *p4++ = m0 + m1;
 8001956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800195a:	1d1a      	adds	r2, r3, #4
 800195c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001960:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001964:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196c:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8001970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001974:	1d1a      	adds	r2, r3, #4
 8001976:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800197a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800197e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001986:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 800198a:	edd7 7a06 	vldr	s15, [r7, #24]
 800198e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 800199a:	edd7 7a05 	vldr	s15, [r7, #20]
 800199e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 80019aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 80019ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80019be:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

        *pEnd4-- = m0 - m1;
 80019ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019ce:	1f1a      	subs	r2, r3, #4
 80019d0:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80019d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80019d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e0:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 80019e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019e8:	1f1a      	subs	r2, r3, #4
 80019ea:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80019ee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80019f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80019fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f ace0 	bne.w	80013d2 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a24:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	3304      	adds	r3, #4
 8001a42:	ed93 7a00 	vldr	s14, [r3]
 8001a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a54:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	ed93 7a00 	vldr	s14, [r3]
 8001a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a64:	3304      	adds	r3, #4
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a76:	3304      	adds	r3, #4
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a88:	3304      	adds	r3, #4
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001aa2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ada:	3304      	adds	r3, #4
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aec:	3304      	adds	r3, #4
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001afe:	3304      	adds	r3, #4
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001b08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b10:	3304      	adds	r3, #4
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b22:	ed93 7a00 	vldr	s14, [r3]
 8001b26:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001b3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	1d1a      	adds	r2, r3, #4
 8001b5a:	603a      	str	r2, [r7, #0]
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001b64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b68:	3304      	adds	r3, #4
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	603a      	str	r2, [r7, #0]
 8001b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8a:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8001b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8001b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8001b9e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ba2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001baa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8001bae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001bb2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8001bbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001bc2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8001bce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001bd2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bda:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8001bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001be2:	1d1a      	adds	r2, r3, #4
 8001be4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001be8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bfc:	1d1a      	adds	r2, r3, #4
 8001bfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001c02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8001c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8001c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8001c22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8001c32:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c36:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8001c42:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c46:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8001c52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8001c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c66:	1d1a      	adds	r2, r3, #4
 8001c68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c6c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001c70:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8001c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c80:	1d1a      	adds	r2, r3, #4
 8001c82:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c86:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001c8a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c92:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8001c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8001c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8001ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001caa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8001cb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8001cc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8001cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8001ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cea:	1d1a      	adds	r2, r3, #4
 8001cec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001cf0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001cf4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8001d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d04:	1d1a      	adds	r2, r3, #4
 8001d06:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001d0a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001d0e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d16:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8001d1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d1e:	b299      	uxth	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	2304      	movs	r3, #4
 8001d26:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001d28:	f013 fc5e 	bl	80155e8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8001d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d30:	b299      	uxth	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	2304      	movs	r3, #4
 8001d38:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d3a:	f013 fc55 	bl	80155e8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8001d3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d42:	b299      	uxth	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	2304      	movs	r3, #4
 8001d4a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d4c:	f013 fc4c 	bl	80155e8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8001d50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d54:	b299      	uxth	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001d5e:	f013 fc43 	bl	80155e8 <arm_radix8_butterfly_f32>
}
 8001d62:	bf00      	nop
 8001d64:	37b0      	adds	r7, #176	; 0xb0
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <arm_cfft_f32>:
void arm_cfft_f32(
    const arm_cfft_instance_f32 * S,
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b088      	sub	sp, #32
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	4611      	mov	r1, r2
 8001d76:	461a      	mov	r2, r3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d117      	bne.n	8001dbc <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e00d      	b.n	8001db4 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	eef1 7a67 	vneg.f32	s15, s15
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	3308      	adds	r3, #8
 8001dac:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3ed      	bcc.n	8001d98 <arm_cfft_f32+0x2e>
        }
    }

    switch (L)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc2:	d040      	beq.n	8001e46 <arm_cfft_f32+0xdc>
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dca:	d845      	bhi.n	8001e58 <arm_cfft_f32+0xee>
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dd2:	d033      	beq.n	8001e3c <arm_cfft_f32+0xd2>
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dda:	d83d      	bhi.n	8001e58 <arm_cfft_f32+0xee>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de2:	d026      	beq.n	8001e32 <arm_cfft_f32+0xc8>
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d835      	bhi.n	8001e58 <arm_cfft_f32+0xee>
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df2:	d028      	beq.n	8001e46 <arm_cfft_f32+0xdc>
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfa:	d82d      	bhi.n	8001e58 <arm_cfft_f32+0xee>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e02:	d01b      	beq.n	8001e3c <arm_cfft_f32+0xd2>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0a:	d825      	bhi.n	8001e58 <arm_cfft_f32+0xee>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b80      	cmp	r3, #128	; 0x80
 8001e10:	d00f      	beq.n	8001e32 <arm_cfft_f32+0xc8>
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b80      	cmp	r3, #128	; 0x80
 8001e16:	d81f      	bhi.n	8001e58 <arm_cfft_f32+0xee>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b40      	cmp	r3, #64	; 0x40
 8001e1c:	d013      	beq.n	8001e46 <arm_cfft_f32+0xdc>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d819      	bhi.n	8001e58 <arm_cfft_f32+0xee>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d003      	beq.n	8001e32 <arm_cfft_f32+0xc8>
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d005      	beq.n	8001e3c <arm_cfft_f32+0xd2>
 8001e30:	e012      	b.n	8001e58 <arm_cfft_f32+0xee>
    {
    case 16:
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7fe ff79 	bl	8000d2c <arm_cfft_radix8by2_f32>
        break;
 8001e3a:	e00d      	b.n	8001e58 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff f968 	bl	8001114 <arm_cfft_radix8by4_f32>
        break;
 8001e44:	e008      	b.n	8001e58 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	68b8      	ldr	r0, [r7, #8]
 8001e52:	f013 fbc9 	bl	80155e8 <arm_radix8_butterfly_f32>
        break;
 8001e56:	bf00      	nop
    }

    if( bitReverseFlag )
 8001e58:	79bb      	ldrb	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8999      	ldrh	r1, [r3, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	461a      	mov	r2, r3
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	f7fe f9c9 	bl	8000200 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d130      	bne.n	8001ed6 <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e01c      	b.n	8001ece <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1d1a      	adds	r2, r3, #4
 8001e98:	61ba      	str	r2, [r7, #24]
 8001e9a:	ed93 7a00 	vldr	s14, [r3]
 8001e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	eeb1 7a67 	vneg.f32	s14, s15
 8001eb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d3de      	bcc.n	8001e94 <arm_cfft_f32+0x12a>
        }
    }
}
 8001ed6:	bf00      	nop
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <stage_rfft_f32>:
#include <Adc/arm_math.h>

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b095      	sub	sp, #84	; 0x54
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8001f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8001f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8001f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 8001f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1a:	1d1a      	adds	r2, r3, #4
 8001f1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8001f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f24:	1d1a      	adds	r2, r3, #4
 8001f26:	64ba      	str	r2, [r7, #72]	; 0x48
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8001f2c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001f30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8001f3c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f48:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8001f4c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f50:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1d1a      	adds	r2, r3, #4
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8001f6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1d1a      	adds	r2, r3, #4
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f84:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8001f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 8001f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f94:	3308      	adds	r3, #8
 8001f96:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8001f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8001f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8001fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 8001faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8001fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fb2:	1d1a      	adds	r2, r3, #4
 8001fb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fbc:	1d1a      	adds	r2, r3, #4
 8001fbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8001fc4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001fc8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8001fd4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001fd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe0:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8001fe4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001fe8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8001ff4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ff8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8002004:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002008:	edd7 7a08 	vldr	s15, [r7, #32]
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8002014:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002018:	edd7 7a08 	vldr	s15, [r7, #32]
 800201c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002020:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8002024:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002028:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800202c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002030:	edd7 7a07 	vldr	s15, [r7, #28]
 8002034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002038:	edd7 7a04 	vldr	s15, [r7, #16]
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800204a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204e:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8002052:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002056:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800205a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800205e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002066:	edd7 7a05 	vldr	s15, [r7, #20]
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1d1a      	adds	r2, r3, #4
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207c:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8002080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002082:	3308      	adds	r3, #8
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8002086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002088:	3b08      	subs	r3, #8
 800208a:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208e:	3b01      	subs	r3, #1
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while(k > 0u);
 8002092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f af7f 	bne.w	8001f98 <stage_rfft_f32+0xba>
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	3754      	adds	r7, #84	; 0x54
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b095      	sub	sp, #84	; 0x54
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80020ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80020d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d8:	3308      	adds	r3, #8
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80020dc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80020e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	1d1a      	adds	r2, r3, #4
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f6:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 80020fa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80020fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	1d1a      	adds	r2, r3, #4
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002114:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8002118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4413      	add	r3, r2
 8002120:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8002122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002124:	3308      	adds	r3, #8
 8002126:	647b      	str	r3, [r7, #68]	; 0x44

   while(k > 0u)
 8002128:	e07c      	b.n	8002224 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8002130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8002136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8002142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002144:	1d1a      	adds	r2, r3, #4
 8002146:	64ba      	str	r2, [r7, #72]	; 0x48
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800214c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214e:	1d1a      	adds	r2, r3, #4
 8002150:	64ba      	str	r2, [r7, #72]	; 0x48
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8002156:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800215a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800215e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002162:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8002166:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800216a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800216e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002172:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8002176:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800217a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8002186:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800218a:	edd7 7a08 	vldr	s15, [r7, #32]
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8002196:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800219a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800219e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a2:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80021a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80021aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80021ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b2:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80021b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80021ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80021c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80021ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	1d1a      	adds	r2, r3, #4
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 80021e4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80021e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80021fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	1d1a      	adds	r2, r3, #4
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800220a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220e:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	3308      	adds	r3, #8
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8002218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221a:	3b08      	subs	r3, #8
 800221c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800221e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002220:	3b01      	subs	r3, #1
 8002222:	64fb      	str	r3, [r7, #76]	; 0x4c
   while(k > 0u)
 8002224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002226:	2b00      	cmp	r3, #0
 8002228:	f47f af7f 	bne.w	800212a <merge_rfft_f32+0x82>
   }

}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3754      	adds	r7, #84	; 0x54
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8a1b      	ldrh	r3, [r3, #16]
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7ff ff20 	bl	80020a8 <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	2301      	movs	r3, #1
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff fd7b 	bl	8001d6a <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8002274:	e00a      	b.n	800228c <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	2301      	movs	r3, #1
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	6978      	ldr	r0, [r7, #20]
 800227e:	f7ff fd74 	bl	8001d6a <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f7ff fe29 	bl	8001ede <stage_rfft_f32>
}
 800228c:	bf00      	nop
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c0:	d023      	beq.n	800230a <arm_rfft_fast_init_f32+0x76>
 80022c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c6:	f300 808c 	bgt.w	80023e2 <arm_rfft_fast_init_f32+0x14e>
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d02a      	beq.n	8002326 <arm_rfft_fast_init_f32+0x92>
 80022d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d4:	f300 8085 	bgt.w	80023e2 <arm_rfft_fast_init_f32+0x14e>
 80022d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022dc:	d031      	beq.n	8002342 <arm_rfft_fast_init_f32+0xae>
 80022de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e2:	dc7e      	bgt.n	80023e2 <arm_rfft_fast_init_f32+0x14e>
 80022e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e8:	d039      	beq.n	800235e <arm_rfft_fast_init_f32+0xca>
 80022ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ee:	dc78      	bgt.n	80023e2 <arm_rfft_fast_init_f32+0x14e>
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d042      	beq.n	800237a <arm_rfft_fast_init_f32+0xe6>
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	dc74      	bgt.n	80023e2 <arm_rfft_fast_init_f32+0x14e>
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d04b      	beq.n	8002394 <arm_rfft_fast_init_f32+0x100>
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	dc70      	bgt.n	80023e2 <arm_rfft_fast_init_f32+0x14e>
 8002300:	2b10      	cmp	r3, #16
 8002302:	d061      	beq.n	80023c8 <arm_rfft_fast_init_f32+0x134>
 8002304:	2b20      	cmp	r3, #32
 8002306:	d052      	beq.n	80023ae <arm_rfft_fast_init_f32+0x11a>
 8002308:	e06b      	b.n	80023e2 <arm_rfft_fast_init_f32+0x14e>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8002310:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <arm_rfft_fast_init_f32+0x164>)
 8002316:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4a38      	ldr	r2, [pc, #224]	; (80023fc <arm_rfft_fast_init_f32+0x168>)
 800231c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a37      	ldr	r2, [pc, #220]	; (8002400 <arm_rfft_fast_init_f32+0x16c>)
 8002322:	615a      	str	r2, [r3, #20]
    break;
 8002324:	e060      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  case 1024u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800232c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4a34      	ldr	r2, [pc, #208]	; (8002404 <arm_rfft_fast_init_f32+0x170>)
 8002332:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4a34      	ldr	r2, [pc, #208]	; (8002408 <arm_rfft_fast_init_f32+0x174>)
 8002338:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a33      	ldr	r2, [pc, #204]	; (800240c <arm_rfft_fast_init_f32+0x178>)
 800233e:	615a      	str	r2, [r3, #20]
    break;
 8002340:	e052      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  case 512u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002348:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	4a30      	ldr	r2, [pc, #192]	; (8002410 <arm_rfft_fast_init_f32+0x17c>)
 800234e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4a30      	ldr	r2, [pc, #192]	; (8002414 <arm_rfft_fast_init_f32+0x180>)
 8002354:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <arm_rfft_fast_init_f32+0x184>)
 800235a:	615a      	str	r2, [r3, #20]
    break;
 800235c:	e044      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  case 256u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8002364:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a2c      	ldr	r2, [pc, #176]	; (800241c <arm_rfft_fast_init_f32+0x188>)
 800236a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <arm_rfft_fast_init_f32+0x18c>)
 8002370:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <arm_rfft_fast_init_f32+0x190>)
 8002376:	615a      	str	r2, [r3, #20]
    break;
 8002378:	e036      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  case 128u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	22d0      	movs	r2, #208	; 0xd0
 800237e:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4a29      	ldr	r2, [pc, #164]	; (8002428 <arm_rfft_fast_init_f32+0x194>)
 8002384:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	4a28      	ldr	r2, [pc, #160]	; (800242c <arm_rfft_fast_init_f32+0x198>)
 800238a:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a28      	ldr	r2, [pc, #160]	; (8002430 <arm_rfft_fast_init_f32+0x19c>)
 8002390:	615a      	str	r2, [r3, #20]
    break;
 8002392:	e029      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  case 64u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2238      	movs	r2, #56	; 0x38
 8002398:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4a25      	ldr	r2, [pc, #148]	; (8002434 <arm_rfft_fast_init_f32+0x1a0>)
 800239e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <arm_rfft_fast_init_f32+0x1a4>)
 80023a4:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <arm_rfft_fast_init_f32+0x1a8>)
 80023aa:	615a      	str	r2, [r3, #20]
    break;
 80023ac:	e01c      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  case 32u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2230      	movs	r2, #48	; 0x30
 80023b2:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <arm_rfft_fast_init_f32+0x1ac>)
 80023b8:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4a21      	ldr	r2, [pc, #132]	; (8002444 <arm_rfft_fast_init_f32+0x1b0>)
 80023be:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <arm_rfft_fast_init_f32+0x1b4>)
 80023c4:	615a      	str	r2, [r3, #20]
    break;
 80023c6:	e00f      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2214      	movs	r2, #20
 80023cc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <arm_rfft_fast_init_f32+0x1b8>)
 80023d2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4a1e      	ldr	r2, [pc, #120]	; (8002450 <arm_rfft_fast_init_f32+0x1bc>)
 80023d8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <arm_rfft_fast_init_f32+0x1c0>)
 80023de:	615a      	str	r2, [r3, #20]
    break;
 80023e0:	e002      	b.n	80023e8 <arm_rfft_fast_init_f32+0x154>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 80023e2:	23ff      	movs	r3, #255	; 0xff
 80023e4:	73fb      	strb	r3, [r7, #15]
    break;
 80023e6:	bf00      	nop
  }

  return (status);
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	08032dc8 	.word	0x08032dc8
 80023fc:	08023fc0 	.word	0x08023fc0
 8002400:	0802a130 	.word	0x0802a130
 8002404:	08030ab0 	.word	0x08030ab0
 8002408:	0802e9b0 	.word	0x0802e9b0
 800240c:	08028130 	.word	0x08028130
 8002410:	08035588 	.word	0x08035588
 8002414:	08031dc8 	.word	0x08031dc8
 8002418:	08035908 	.word	0x08035908
 800241c:	08036d08 	.word	0x08036d08
 8002420:	0802e130 	.word	0x0802e130
 8002424:	08034d88 	.word	0x08034d88
 8002428:	08037278 	.word	0x08037278
 800242c:	080319c8 	.word	0x080319c8
 8002430:	08036908 	.word	0x08036908
 8002434:	080280c0 	.word	0x080280c0
 8002438:	08034b88 	.word	0x08034b88
 800243c:	08037078 	.word	0x08037078
 8002440:	08031968 	.word	0x08031968
 8002444:	080309b0 	.word	0x080309b0
 8002448:	08027fc0 	.word	0x08027fc0
 800244c:	080318c0 	.word	0x080318c0
 8002450:	0802e930 	.word	0x0802e930
 8002454:	080318e8 	.word	0x080318e8

08002458 <SSD1322_API_command>:
//====================== command ========================//
/**
 *  @brief Sends command byte to SSD1322
 */
void SSD1322_API_command(uint8_t command)
    {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8002462:	f000 fcb3 	bl	8002dcc <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_low();
 8002466:	f000 fcc9 	bl	8002dfc <SSD1322_HW_drive_DC_low>
	SSD1322_HW_SPI_send_byte(command);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fcf5 	bl	8002e5c <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8002472:	f000 fcb7 	bl	8002de4 <SSD1322_HW_drive_CS_high>
    }
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <SSD1322_API_data>:
//====================== data ========================//
/**
 *  @brief Sends data byte to SSD1322
 */
void SSD1322_API_data(uint8_t data)
    {
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
	SSD1322_HW_drive_CS_low();
 8002488:	f000 fca0 	bl	8002dcc <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 800248c:	f000 fcc2 	bl	8002e14 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_byte(data);
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fce2 	bl	8002e5c <SSD1322_HW_SPI_send_byte>
	SSD1322_HW_drive_CS_high();
 8002498:	f000 fca4 	bl	8002de4 <SSD1322_HW_drive_CS_high>
    }
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <SSD1322_API_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void SSD1322_API_init()
    {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	SSD1322_HW_drive_RESET_low();  //Reset pin low
 80024a8:	f000 fcc0 	bl	8002e2c <SSD1322_HW_drive_RESET_low>
	SSD1322_HW_msDelay(1);                  //1ms delay
 80024ac:	2001      	movs	r0, #1
 80024ae:	f000 fd03 	bl	8002eb8 <SSD1322_HW_msDelay>
	SSD1322_HW_drive_RESET_high(); //Reset pin high
 80024b2:	f000 fcc7 	bl	8002e44 <SSD1322_HW_drive_RESET_high>
	SSD1322_HW_msDelay(50);                 //50ms delay
 80024b6:	2032      	movs	r0, #50	; 0x32
 80024b8:	f000 fcfe 	bl	8002eb8 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xFD);     //set Command unlock
 80024bc:	20fd      	movs	r0, #253	; 0xfd
 80024be:	f7ff ffcb 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x12);
 80024c2:	2012      	movs	r0, #18
 80024c4:	f7ff ffdb 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xAE);     //set display off
 80024c8:	20ae      	movs	r0, #174	; 0xae
 80024ca:	f7ff ffc5 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_command(0xB3);     //set display clock divide ratio
 80024ce:	20b3      	movs	r0, #179	; 0xb3
 80024d0:	f7ff ffc2 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x91);
 80024d4:	2091      	movs	r0, #145	; 0x91
 80024d6:	f7ff ffd2 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xCA);     //set multiplex ratio
 80024da:	20ca      	movs	r0, #202	; 0xca
 80024dc:	f7ff ffbc 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x3F);
 80024e0:	203f      	movs	r0, #63	; 0x3f
 80024e2:	f7ff ffcc 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xA2);   //set display offset to 0
 80024e6:	20a2      	movs	r0, #162	; 0xa2
 80024e8:	f7ff ffb6 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff ffc6 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xA1);   //start display start line to 0
 80024f2:	20a1      	movs	r0, #161	; 0xa1
 80024f4:	f7ff ffb0 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff ffc0 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xA0);   //set remap and dual COM Line Mode
 80024fe:	20a0      	movs	r0, #160	; 0xa0
 8002500:	f7ff ffaa 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x14);
 8002504:	2014      	movs	r0, #20
 8002506:	f7ff ffba 	bl	800247e <SSD1322_API_data>
	SSD1322_API_data(0x11);
 800250a:	2011      	movs	r0, #17
 800250c:	f7ff ffb7 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xB5);   //disable IO input
 8002510:	20b5      	movs	r0, #181	; 0xb5
 8002512:	f7ff ffa1 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff ffb1 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xAB);   //function select
 800251c:	20ab      	movs	r0, #171	; 0xab
 800251e:	f7ff ff9b 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x01);
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff ffab 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xB4);   //enable VSL extern
 8002528:	20b4      	movs	r0, #180	; 0xb4
 800252a:	f7ff ff95 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0xA0);
 800252e:	20a0      	movs	r0, #160	; 0xa0
 8002530:	f7ff ffa5 	bl	800247e <SSD1322_API_data>
	SSD1322_API_data(0xFD);
 8002534:	20fd      	movs	r0, #253	; 0xfd
 8002536:	f7ff ffa2 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xC1);   //set contrast current
 800253a:	20c1      	movs	r0, #193	; 0xc1
 800253c:	f7ff ff8c 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0xFF);
 8002540:	20ff      	movs	r0, #255	; 0xff
 8002542:	f7ff ff9c 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xC7);   //set master contrast current
 8002546:	20c7      	movs	r0, #199	; 0xc7
 8002548:	f7ff ff86 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x0F);
 800254c:	200f      	movs	r0, #15
 800254e:	f7ff ff96 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xB9);   //default grayscale
 8002552:	20b9      	movs	r0, #185	; 0xb9
 8002554:	f7ff ff80 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_command(0xB1);   //set phase length
 8002558:	20b1      	movs	r0, #177	; 0xb1
 800255a:	f7ff ff7d 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0xE2);
 800255e:	20e2      	movs	r0, #226	; 0xe2
 8002560:	f7ff ff8d 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xD1);   //enhance driving scheme capability
 8002564:	20d1      	movs	r0, #209	; 0xd1
 8002566:	f7ff ff77 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x82);
 800256a:	2082      	movs	r0, #130	; 0x82
 800256c:	f7ff ff87 	bl	800247e <SSD1322_API_data>
	SSD1322_API_data(0x20);
 8002570:	2020      	movs	r0, #32
 8002572:	f7ff ff84 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xBB);   //first pre charge voltage
 8002576:	20bb      	movs	r0, #187	; 0xbb
 8002578:	f7ff ff6e 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x1F);
 800257c:	201f      	movs	r0, #31
 800257e:	f7ff ff7e 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xB6);   //second pre charge voltage
 8002582:	20b6      	movs	r0, #182	; 0xb6
 8002584:	f7ff ff68 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x08);
 8002588:	2008      	movs	r0, #8
 800258a:	f7ff ff78 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xBE);   //VCOMH
 800258e:	20be      	movs	r0, #190	; 0xbe
 8002590:	f7ff ff62 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(0x07);
 8002594:	2007      	movs	r0, #7
 8002596:	f7ff ff72 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(0xA6);   //set normal display mode
 800259a:	20a6      	movs	r0, #166	; 0xa6
 800259c:	f7ff ff5c 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_command(0xA9);   //no partial mode
 80025a0:	20a9      	movs	r0, #169	; 0xa9
 80025a2:	f7ff ff59 	bl	8002458 <SSD1322_API_command>
	SSD1322_HW_msDelay(10);               //stabilize VDD
 80025a6:	200a      	movs	r0, #10
 80025a8:	f000 fc86 	bl	8002eb8 <SSD1322_HW_msDelay>
	SSD1322_API_command(0xAF);   //display on
 80025ac:	20af      	movs	r0, #175	; 0xaf
 80025ae:	f7ff ff53 	bl	8002458 <SSD1322_API_command>
	SSD1322_HW_msDelay(50);               //stabilize VDD
 80025b2:	2032      	movs	r0, #50	; 0x32
 80025b4:	f000 fc80 	bl	8002eb8 <SSD1322_HW_msDelay>
    }
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <SSD1322_API_sleep_on>:
//====================== go to sleep ========================//
/**
 *  @brief Go to sleep mode.
 */
void SSD1322_API_sleep_on()
    {
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_ON);
 80025c0:	20ae      	movs	r0, #174	; 0xae
 80025c2:	f7ff ff49 	bl	8002458 <SSD1322_API_command>
    }
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}

080025ca <SSD1322_API_sleep_off>:
//====================== wake up from sleep ========================//
/**
 *  @brief Wake up from sleep mode.
 */
void SSD1322_API_sleep_off()
    {
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
	SSD1322_API_command(SLEEP_MODE_OFF);
 80025ce:	20af      	movs	r0, #175	; 0xaf
 80025d0:	f7ff ff42 	bl	8002458 <SSD1322_API_command>
    }
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <SSD1322_API_set_window>:
 *  @param[in] end_column
 *  @param[in] start_row
 *  @param[in] end_row
 */
void SSD1322_API_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
    {
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	4603      	mov	r3, r0
 80025ec:	71bb      	strb	r3, [r7, #6]
 80025ee:	460b      	mov	r3, r1
 80025f0:	717b      	strb	r3, [r7, #5]
 80025f2:	4613      	mov	r3, r2
 80025f4:	713b      	strb	r3, [r7, #4]
	SSD1322_API_command(SET_COLUMN_ADDR);  //set columns range
 80025f6:	2015      	movs	r0, #21
 80025f8:	f7ff ff2e 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(28 + start_column);
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	331c      	adds	r3, #28
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff3b 	bl	800247e <SSD1322_API_data>
	SSD1322_API_data(28 + end_column);
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	331c      	adds	r3, #28
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff35 	bl	800247e <SSD1322_API_data>
	SSD1322_API_command(SET_ROW_ADDR);  //set rows range
 8002614:	2075      	movs	r0, #117	; 0x75
 8002616:	f7ff ff1f 	bl	8002458 <SSD1322_API_command>
	SSD1322_API_data(start_row);
 800261a:	797b      	ldrb	r3, [r7, #5]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff2e 	bl	800247e <SSD1322_API_data>
	SSD1322_API_data(end_row);
 8002622:	793b      	ldrb	r3, [r7, #4]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff2a 	bl	800247e <SSD1322_API_data>
    }
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}

08002632 <SSD1322_API_send_buffer>:
 *
 *  @param[in] buffer array of pixel values
 *  @param[in] buffer_size amount of bytes in the array
 */
void SSD1322_API_send_buffer(uint8_t *buffer, uint32_t buffer_size)
    {
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
	SSD1322_API_command(ENABLE_RAM_WRITE);  //enable write of pixels
 800263c:	205c      	movs	r0, #92	; 0x5c
 800263e:	f7ff ff0b 	bl	8002458 <SSD1322_API_command>
	SSD1322_HW_drive_CS_low();
 8002642:	f000 fbc3 	bl	8002dcc <SSD1322_HW_drive_CS_low>
	SSD1322_HW_drive_DC_high();
 8002646:	f000 fbe5 	bl	8002e14 <SSD1322_HW_drive_DC_high>
	SSD1322_HW_SPI_send_array(buffer, buffer_size);
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fc1b 	bl	8002e88 <SSD1322_HW_SPI_send_array>
	SSD1322_HW_drive_CS_high();
 8002652:	f000 fbc7 	bl	8002de4 <SSD1322_HW_drive_CS_high>
    }
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <display_init_on_start>:
//====================== init display on start ========================//
/**
 *  @brief init display on start
 */
void display_init_on_start(uint8_t *buffer)
    {
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	 SSD1322_API_init();
 8002668:	f7ff ff1c 	bl	80024a4 <SSD1322_API_init>
	 select_font(&MACIEK_FONT);
 800266c:	4807      	ldr	r0, [pc, #28]	; (800268c <display_init_on_start+0x2c>)
 800266e:	f000 fab3 	bl	8002bd8 <select_font>
	 fill_buffer(buffer, 0);
 8002672:	2100      	movs	r1, #0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f847 	bl	8002708 <fill_buffer>
	 send_buffer_to_OLED(buffer, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fb86 	bl	8002d90 <send_buffer_to_OLED>
    }
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	08023bb8 	.word	0x08023bb8

08002690 <set_change_time_of_display>:
//====================== set change time of display ========================//
/**
 *  @brief sets time of refresh between displays states
 */
void set_change_time_of_display(const uint16_t counter_period)
    {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
	htim15.Instance->CCR1 = counter_period;
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <set_change_time_of_display+0x20>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	88fa      	ldrh	r2, [r7, #6]
 80026a0:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200079b8 	.word	0x200079b8

080026b4 <display_on_standby_mode>:
//====================== display on standby mode routine ========================//
/**
 *  @brief
 */
void display_on_standby_mode(void)
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	if (is_display_on_standby_flag == true)
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <display_on_standby_mode+0x3c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d013      	beq.n	80026ea <display_on_standby_mode+0x36>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80026c2:	2200      	movs	r2, #0
 80026c4:	490b      	ldr	r1, [pc, #44]	; (80026f4 <display_on_standby_mode+0x40>)
 80026c6:	480c      	ldr	r0, [pc, #48]	; (80026f8 <display_on_standby_mode+0x44>)
 80026c8:	f010 f8e8 	bl	801289c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80026cc:	2200      	movs	r2, #0
 80026ce:	490b      	ldr	r1, [pc, #44]	; (80026fc <display_on_standby_mode+0x48>)
 80026d0:	4809      	ldr	r0, [pc, #36]	; (80026f8 <display_on_standby_mode+0x44>)
 80026d2:	f010 f9cd 	bl	8012a70 <HAL_RTC_GetDate>
		SSD1322_API_sleep_off();
 80026d6:	f7ff ff78 	bl	80025ca <SSD1322_API_sleep_off>
		saved_seconds = sTime.Seconds;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <display_on_standby_mode+0x40>)
 80026dc:	789a      	ldrb	r2, [r3, #2]
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <display_on_standby_mode+0x4c>)
 80026e0:	701a      	strb	r2, [r3, #0]
		saved_minutes = sTime.Minutes;
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <display_on_standby_mode+0x40>)
 80026e4:	785a      	ldrb	r2, [r3, #1]
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <display_on_standby_mode+0x50>)
 80026e8:	701a      	strb	r2, [r3, #0]
	    }
    }
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000195 	.word	0x20000195
 80026f4:	2000178c 	.word	0x2000178c
 80026f8:	20007828 	.word	0x20007828
 80026fc:	200057bc 	.word	0x200057bc
 8002700:	20000193 	.word	0x20000193
 8002704:	20000194 	.word	0x20000194

08002708 <fill_buffer>:
 *             array of pixel values
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	b25a      	sxtb	r2, r3
 800271a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271e:	4313      	orrs	r3, r2
 8002720:	b25b      	sxtb	r3, r3
 8002722:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <fill_buffer+0x58>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <fill_buffer+0x5c>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	fb03 f302 	mul.w	r3, r3, r2
 8002732:	0fda      	lsrs	r2, r3, #31
 8002734:	4413      	add	r3, r2
 8002736:	105b      	asrs	r3, r3, #1
 8002738:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 800273a:	e004      	b.n	8002746 <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	7afa      	ldrb	r2, [r7, #11]
 8002744:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1e5a      	subs	r2, r3, #1
 800274a:	60fa      	str	r2, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f5      	bne.n	800273c <fill_buffer+0x34>
	}
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000000 	.word	0x20000000
 8002764:	20000002 	.word	0x20000002

08002768 <draw_pixel>:
 *             vertical coordinate of pixel
 *  @param[in] brightness
 *             brightness value of pixel (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4603      	mov	r3, r0
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	460b      	mov	r3, r1
 800277c:	813b      	strh	r3, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <draw_pixel+0xf0>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	897a      	ldrh	r2, [r7, #10]
 8002788:	429a      	cmp	r2, r3
 800278a:	d25f      	bcs.n	800284c <draw_pixel+0xe4>
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <draw_pixel+0xf4>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	d25a      	bcs.n	800284c <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 8002796:	893b      	ldrh	r3, [r7, #8]
 8002798:	4a2f      	ldr	r2, [pc, #188]	; (8002858 <draw_pixel+0xf0>)
 800279a:	8812      	ldrh	r2, [r2, #0]
 800279c:	fb02 f203 	mul.w	r2, r2, r3
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	4413      	add	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	bfb8      	it	lt
 80027ac:	425b      	neglt	r3, r3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d125      	bne.n	80027fe <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 80027b2:	893b      	ldrh	r3, [r7, #8]
 80027b4:	4a28      	ldr	r2, [pc, #160]	; (8002858 <draw_pixel+0xf0>)
 80027b6:	8812      	ldrh	r2, [r2, #0]
 80027b8:	fb02 f203 	mul.w	r2, r2, r3
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	4413      	add	r3, r2
 80027c0:	0fda      	lsrs	r2, r3, #31
 80027c2:	4413      	add	r3, r2
 80027c4:	105b      	asrs	r3, r3, #1
 80027c6:	461a      	mov	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	f023 030f 	bic.w	r3, r3, #15
 80027d4:	b25a      	sxtb	r2, r3
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	4313      	orrs	r3, r2
 80027dc:	b259      	sxtb	r1, r3
 80027de:	893b      	ldrh	r3, [r7, #8]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <draw_pixel+0xf0>)
 80027e2:	8812      	ldrh	r2, [r2, #0]
 80027e4:	fb02 f203 	mul.w	r2, r2, r3
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	4413      	add	r3, r2
 80027ec:	0fda      	lsrs	r2, r3, #31
 80027ee:	4413      	add	r3, r2
 80027f0:	105b      	asrs	r3, r3, #1
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	b2ca      	uxtb	r2, r1
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e027      	b.n	800284e <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 80027fe:	893b      	ldrh	r3, [r7, #8]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <draw_pixel+0xf0>)
 8002802:	8812      	ldrh	r2, [r2, #0]
 8002804:	fb02 f203 	mul.w	r2, r2, r3
 8002808:	897b      	ldrh	r3, [r7, #10]
 800280a:	4413      	add	r3, r2
 800280c:	0fda      	lsrs	r2, r3, #31
 800280e:	4413      	add	r3, r2
 8002810:	105b      	asrs	r3, r3, #1
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b25b      	sxtb	r3, r3
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	b25a      	sxtb	r2, r3
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	b25b      	sxtb	r3, r3
 8002828:	4313      	orrs	r3, r2
 800282a:	b259      	sxtb	r1, r3
 800282c:	893b      	ldrh	r3, [r7, #8]
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <draw_pixel+0xf0>)
 8002830:	8812      	ldrh	r2, [r2, #0]
 8002832:	fb02 f203 	mul.w	r2, r2, r3
 8002836:	897b      	ldrh	r3, [r7, #10]
 8002838:	4413      	add	r3, r2
 800283a:	0fda      	lsrs	r2, r3, #31
 800283c:	4413      	add	r3, r2
 800283e:	105b      	asrs	r3, r3, #1
 8002840:	461a      	mov	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	b2ca      	uxtb	r2, r1
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e000      	b.n	800284e <draw_pixel+0xe6>
		return;
 800284c:	bf00      	nop
	}
}
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	20000002 	.word	0x20000002
 800285c:	20000000 	.word	0x20000000

08002860 <draw_vline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_vline(uint8_t *frame_buffer, uint16_t x, uint16_t y0, uint16_t y1, uint8_t brightness)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	461a      	mov	r2, r3
 800286e:	4603      	mov	r3, r0
 8002870:	817b      	strh	r3, [r7, #10]
 8002872:	460b      	mov	r3, r1
 8002874:	813b      	strh	r3, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
	if(y0 < y1)
 800287a:	893a      	ldrh	r2, [r7, #8]
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	429a      	cmp	r2, r3
 8002880:	d213      	bcs.n	80028aa <draw_vline+0x4a>
	{
		for (uint8_t i = y0; i <= y1; i++)
 8002882:	893b      	ldrh	r3, [r7, #8]
 8002884:	75fb      	strb	r3, [r7, #23]
 8002886:	e00a      	b.n	800289e <draw_vline+0x3e>
		{
			draw_pixel(frame_buffer, x, i, brightness);
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002890:	8979      	ldrh	r1, [r7, #10]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff ff68 	bl	8002768 <draw_pixel>
		for (uint8_t i = y0; i <= y1; i++)
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	3301      	adds	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d2ef      	bcs.n	8002888 <draw_vline+0x28>
		for (uint8_t i = y1; i <= y0; i++)
		{
			draw_pixel(frame_buffer, x, i, brightness);
		}
	}
}
 80028a8:	e012      	b.n	80028d0 <draw_vline+0x70>
		for (uint8_t i = y1; i <= y0; i++)
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	75bb      	strb	r3, [r7, #22]
 80028ae:	e00a      	b.n	80028c6 <draw_vline+0x66>
			draw_pixel(frame_buffer, x, i, brightness);
 80028b0:	7dbb      	ldrb	r3, [r7, #22]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7ff ff54 	bl	8002768 <draw_pixel>
		for (uint8_t i = y1; i <= y0; i++)
 80028c0:	7dbb      	ldrb	r3, [r7, #22]
 80028c2:	3301      	adds	r3, #1
 80028c4:	75bb      	strb	r3, [r7, #22]
 80028c6:	7dbb      	ldrb	r3, [r7, #22]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	893a      	ldrh	r2, [r7, #8]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d2ef      	bcs.n	80028b0 <draw_vline+0x50>
}
 80028d0:	bf00      	nop
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <draw_hline>:
 *             end of the line
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_hline(uint8_t *frame_buffer, uint16_t y, uint16_t x0, uint16_t x1, uint8_t brightness)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	4608      	mov	r0, r1
 80028e2:	4611      	mov	r1, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	817b      	strh	r3, [r7, #10]
 80028ea:	460b      	mov	r3, r1
 80028ec:	813b      	strh	r3, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
	if(x0 < x1)
 80028f2:	893a      	ldrh	r2, [r7, #8]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d213      	bcs.n	8002922 <draw_hline+0x4a>
	{
		for (uint8_t i = x0; i <= x1; i++)
 80028fa:	893b      	ldrh	r3, [r7, #8]
 80028fc:	75fb      	strb	r3, [r7, #23]
 80028fe:	e00a      	b.n	8002916 <draw_hline+0x3e>
		{
			draw_pixel(frame_buffer, i, y, brightness);
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	b299      	uxth	r1, r3
 8002904:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002908:	897a      	ldrh	r2, [r7, #10]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff ff2c 	bl	8002768 <draw_pixel>
		for (uint8_t i = x0; i <= x1; i++)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	3301      	adds	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
 8002916:	7dfb      	ldrb	r3, [r7, #23]
 8002918:	b29b      	uxth	r3, r3
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	429a      	cmp	r2, r3
 800291e:	d2ef      	bcs.n	8002900 <draw_hline+0x28>
		for (uint8_t i = x1; i <= x0; i++)
		{
			draw_pixel(frame_buffer, i, y, brightness);
		}
	}
}
 8002920:	e012      	b.n	8002948 <draw_hline+0x70>
		for (uint8_t i = x1; i <= x0; i++)
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	75bb      	strb	r3, [r7, #22]
 8002926:	e00a      	b.n	800293e <draw_hline+0x66>
			draw_pixel(frame_buffer, i, y, brightness);
 8002928:	7dbb      	ldrb	r3, [r7, #22]
 800292a:	b299      	uxth	r1, r3
 800292c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002930:	897a      	ldrh	r2, [r7, #10]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f7ff ff18 	bl	8002768 <draw_pixel>
		for (uint8_t i = x1; i <= x0; i++)
 8002938:	7dbb      	ldrb	r3, [r7, #22]
 800293a:	3301      	adds	r3, #1
 800293c:	75bb      	strb	r3, [r7, #22]
 800293e:	7dbb      	ldrb	r3, [r7, #22]
 8002940:	b29b      	uxth	r3, r3
 8002942:	893a      	ldrh	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	d2ef      	bcs.n	8002928 <draw_hline+0x50>
}
 8002948:	bf00      	nop
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <draw_rect>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
	draw_vline(frame_buffer, x0, y0, y1, brightness);
 800296a:	8b38      	ldrh	r0, [r7, #24]
 800296c:	893a      	ldrh	r2, [r7, #8]
 800296e:	8979      	ldrh	r1, [r7, #10]
 8002970:	7f3b      	ldrb	r3, [r7, #28]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	4603      	mov	r3, r0
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ff72 	bl	8002860 <draw_vline>
	draw_vline(frame_buffer, x1, y0, y1, brightness);
 800297c:	8b38      	ldrh	r0, [r7, #24]
 800297e:	893a      	ldrh	r2, [r7, #8]
 8002980:	88f9      	ldrh	r1, [r7, #6]
 8002982:	7f3b      	ldrb	r3, [r7, #28]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4603      	mov	r3, r0
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff ff69 	bl	8002860 <draw_vline>
	draw_hline(frame_buffer, y0, x0, x1, brightness);
 800298e:	88f8      	ldrh	r0, [r7, #6]
 8002990:	897a      	ldrh	r2, [r7, #10]
 8002992:	8939      	ldrh	r1, [r7, #8]
 8002994:	7f3b      	ldrb	r3, [r7, #28]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4603      	mov	r3, r0
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff ff9c 	bl	80028d8 <draw_hline>
	draw_hline(frame_buffer, y1, x0, x1, brightness);
 80029a0:	88f8      	ldrh	r0, [r7, #6]
 80029a2:	897a      	ldrh	r2, [r7, #10]
 80029a4:	8b39      	ldrh	r1, [r7, #24]
 80029a6:	7f3b      	ldrb	r3, [r7, #28]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	4603      	mov	r3, r0
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ff93 	bl	80028d8 <draw_hline>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <draw_rect_filled>:
 *             y position of second corner
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	4608      	mov	r0, r1
 80029c4:	4611      	mov	r1, r2
 80029c6:	461a      	mov	r2, r3
 80029c8:	4603      	mov	r3, r0
 80029ca:	817b      	strh	r3, [r7, #10]
 80029cc:	460b      	mov	r3, r1
 80029ce:	813b      	strh	r3, [r7, #8]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = x0; i <= x1; i++)
 80029d4:	897b      	ldrh	r3, [r7, #10]
 80029d6:	75fb      	strb	r3, [r7, #23]
 80029d8:	e016      	b.n	8002a08 <draw_rect_filled+0x4e>
	{
		for (uint8_t j = y0; j <= y1; j++)
 80029da:	893b      	ldrh	r3, [r7, #8]
 80029dc:	75bb      	strb	r3, [r7, #22]
 80029de:	e00b      	b.n	80029f8 <draw_rect_filled+0x3e>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	b299      	uxth	r1, r3
 80029e4:	7dbb      	ldrb	r3, [r7, #22]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff febb 	bl	8002768 <draw_pixel>
		for (uint8_t j = y0; j <= y1; j++)
 80029f2:	7dbb      	ldrb	r3, [r7, #22]
 80029f4:	3301      	adds	r3, #1
 80029f6:	75bb      	strb	r3, [r7, #22]
 80029f8:	7dbb      	ldrb	r3, [r7, #22]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	8c3a      	ldrh	r2, [r7, #32]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d2ee      	bcs.n	80029e0 <draw_rect_filled+0x26>
	for (uint8_t i = x0; i <= x1; i++)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	3301      	adds	r3, #1
 8002a06:	75fb      	strb	r3, [r7, #23]
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d2e3      	bcs.n	80029da <draw_rect_filled+0x20>
		}
	}
}
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <draw_circle>:
 *             radius of the circle (pixels)
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_circle(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t r, uint8_t brightness)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	813b      	strh	r3, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	f1c3 0301 	rsb	r3, r3, #1
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8002a40:	2301      	movs	r3, #1
 8002a42:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	461a      	mov	r2, r3
 8002a48:	03d2      	lsls	r2, r2, #15
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	82fb      	strh	r3, [r7, #22]

  draw_pixel(frame_buffer, x0, y0 + r, brightness);
 8002a5a:	893a      	ldrh	r2, [r7, #8]
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	4413      	add	r3, r2
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f7ff fe7d 	bl	8002768 <draw_pixel>
  draw_pixel(frame_buffer, x0, y0 - r, brightness);
 8002a6e:	893a      	ldrh	r2, [r7, #8]
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a7a:	8979      	ldrh	r1, [r7, #10]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fe73 	bl	8002768 <draw_pixel>
  draw_pixel(frame_buffer, x0 + r, y0, brightness);
 8002a82:	897a      	ldrh	r2, [r7, #10]
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	4413      	add	r3, r2
 8002a88:	b299      	uxth	r1, r3
 8002a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a8e:	893a      	ldrh	r2, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff fe69 	bl	8002768 <draw_pixel>
  draw_pixel(frame_buffer, x0 - r, y0, brightness);
 8002a96:	897a      	ldrh	r2, [r7, #10]
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002aa2:	893a      	ldrh	r2, [r7, #8]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff fe5f 	bl	8002768 <draw_pixel>

  while (x < y)
 8002aaa:	e089      	b.n	8002bc0 <draw_circle+0x1a4>
  {
    if (f >= 0)
 8002aac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0e      	blt.n	8002ad2 <draw_circle+0xb6>
    {
      y--;
 8002ab4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8002ac0:	8b7b      	ldrh	r3, [r7, #26]
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8002ac8:	8bfa      	ldrh	r2, [r7, #30]
 8002aca:	8b7b      	ldrh	r3, [r7, #26]
 8002acc:	4413      	add	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8002ad2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8002ade:	8bbb      	ldrh	r3, [r7, #28]
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8002ae6:	8bfa      	ldrh	r2, [r7, #30]
 8002ae8:	8bbb      	ldrh	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	83fb      	strh	r3, [r7, #30]

    draw_pixel(frame_buffer, x0 + x, y0 + y, brightness);
 8002af0:	8b3a      	ldrh	r2, [r7, #24]
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	4413      	add	r3, r2
 8002af6:	b299      	uxth	r1, r3
 8002af8:	8afa      	ldrh	r2, [r7, #22]
 8002afa:	893b      	ldrh	r3, [r7, #8]
 8002afc:	4413      	add	r3, r2
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff fe2f 	bl	8002768 <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 + y, brightness);
 8002b0a:	8b3b      	ldrh	r3, [r7, #24]
 8002b0c:	897a      	ldrh	r2, [r7, #10]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b299      	uxth	r1, r3
 8002b12:	8afa      	ldrh	r2, [r7, #22]
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	4413      	add	r3, r2
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff fe22 	bl	8002768 <draw_pixel>
    draw_pixel(frame_buffer, x0 + x, y0 - y, brightness);
 8002b24:	8b3a      	ldrh	r2, [r7, #24]
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	4413      	add	r3, r2
 8002b2a:	b299      	uxth	r1, r3
 8002b2c:	8afb      	ldrh	r3, [r7, #22]
 8002b2e:	893a      	ldrh	r2, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff fe15 	bl	8002768 <draw_pixel>
    draw_pixel(frame_buffer, x0 - x, y0 - y, brightness);
 8002b3e:	8b3b      	ldrh	r3, [r7, #24]
 8002b40:	897a      	ldrh	r2, [r7, #10]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	b299      	uxth	r1, r3
 8002b46:	8afb      	ldrh	r3, [r7, #22]
 8002b48:	893a      	ldrh	r2, [r7, #8]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff fe08 	bl	8002768 <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 + x, brightness);
 8002b58:	8afa      	ldrh	r2, [r7, #22]
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b299      	uxth	r1, r3
 8002b60:	8b3a      	ldrh	r2, [r7, #24]
 8002b62:	893b      	ldrh	r3, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f7ff fdfb 	bl	8002768 <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 + x, brightness);
 8002b72:	8afb      	ldrh	r3, [r7, #22]
 8002b74:	897a      	ldrh	r2, [r7, #10]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	b299      	uxth	r1, r3
 8002b7a:	8b3a      	ldrh	r2, [r7, #24]
 8002b7c:	893b      	ldrh	r3, [r7, #8]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff fdee 	bl	8002768 <draw_pixel>
    draw_pixel(frame_buffer, x0 + y, y0 - x, brightness);
 8002b8c:	8afa      	ldrh	r2, [r7, #22]
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	4413      	add	r3, r2
 8002b92:	b299      	uxth	r1, r3
 8002b94:	8b3b      	ldrh	r3, [r7, #24]
 8002b96:	893a      	ldrh	r2, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff fde1 	bl	8002768 <draw_pixel>
    draw_pixel(frame_buffer, x0 - y, y0 - x, brightness);
 8002ba6:	8afb      	ldrh	r3, [r7, #22]
 8002ba8:	897a      	ldrh	r2, [r7, #10]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b299      	uxth	r1, r3
 8002bae:	8b3b      	ldrh	r3, [r7, #24]
 8002bb0:	893a      	ldrh	r2, [r7, #8]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff fdd4 	bl	8002768 <draw_pixel>
  while (x < y)
 8002bc0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002bc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f6ff af6f 	blt.w	8002aac <draw_circle+0x90>
  }
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <select_font>:
 *
 *  @param[in] new_gfx_font
 *             pointer to font structure
 */
void select_font(const GFXfont *new_gfx_font)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 8002be0:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <select_font+0x1c>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6013      	str	r3, [r2, #0]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000148 	.word	0x20000148

08002bf8 <draw_char>:
 *             y position of bottom left corner of character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	72fb      	strb	r3, [r7, #11]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 8002c12:	4b44      	ldr	r3, [pc, #272]	; (8002d24 <draw_char+0x12c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d07f      	beq.n	8002d1a <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 8002c1a:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <draw_char+0x12c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	891b      	ldrh	r3, [r3, #8]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	7afa      	ldrb	r2, [r7, #11]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 8002c28:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <draw_char+0x12c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 8002c36:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <draw_char+0x12c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t width = glyph->width;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	789b      	ldrb	r3, [r3, #2]
 8002c48:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	78db      	ldrb	r3, [r3, #3]
 8002c4e:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	795b      	ldrb	r3, [r3, #5]
 8002c54:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	799b      	ldrb	r3, [r3, #6]
 8002c5a:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t bits = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t y_pos = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t x_pos = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7a:	e048      	b.n	8002d0e <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c82:	e03a      	b.n	8002cfa <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8002c84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d108      	bne.n	8002ca8 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8002c96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	84fa      	strh	r2, [r7, #38]	; 0x26
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			if (bits & 0x80)
 8002ca8:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da1a      	bge.n	8002ce6 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 8002cb0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	893b      	ldrh	r3, [r7, #8]
 8002cb8:	4413      	add	r3, r2
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	4413      	add	r3, r2
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff fd41 	bl	8002768 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 8002ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 8002cf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cfa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3bf      	bcc.n	8002c84 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 8002d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d12:	7dbb      	ldrb	r3, [r7, #22]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3b1      	bcc.n	8002c7c <draw_char+0x84>
 8002d18:	e000      	b.n	8002d1c <draw_char+0x124>
		return;
 8002d1a:	bf00      	nop
		}
	}
}
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000148 	.word	0x20000148

08002d28 <draw_text>:
 *             y position of bottom left corner of first character
 * 	@param[in] brightness
 *             brightness value of pixels (range 0-15 dec or 0x00-0x0F hex)
 */
void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	460b      	mov	r3, r1
 8002d38:	80fb      	strh	r3, [r7, #6]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80bb      	strh	r3, [r7, #4]
    while (*text)
 8002d3e:	e01b      	b.n	8002d78 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	7819      	ldrb	r1, [r3, #0]
 8002d44:	88b8      	ldrh	r0, [r7, #4]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	7e3b      	ldrb	r3, [r7, #24]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff ff52 	bl	8002bf8 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8002d54:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <draw_text+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002d62:	3b20      	subs	r3, #32
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	791b      	ldrb	r3, [r3, #4]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	4413      	add	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
        text++;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60bb      	str	r3, [r7, #8]
    while (*text)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1df      	bne.n	8002d40 <draw_text+0x18>
    }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000148 	.word	0x20000148

08002d90 <send_buffer_to_OLED>:
 *  @param[in] start_y
 *             y position of frame buffer part that will be displayed on OLED Useful for vertical scrolling.

 */
void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	803b      	strh	r3, [r7, #0]
	SSD1322_API_set_window(0, 63, 0, 255);
 8002da0:	23ff      	movs	r3, #255	; 0xff
 8002da2:	2200      	movs	r2, #0
 8002da4:	213f      	movs	r1, #63	; 0x3f
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7ff fc16 	bl	80025d8 <SSD1322_API_set_window>
	SSD1322_API_send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8002dac:	883b      	ldrh	r3, [r7, #0]
 8002dae:	01db      	lsls	r3, r3, #7
 8002db0:	461a      	mov	r2, r3
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	4413      	add	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fc37 	bl	8002632 <SSD1322_API_send_buffer>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <SSD1322_HW_drive_CS_low>:
 *  @brief Drives CS (Chip Select) pin of SPI interface low.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_low()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <SSD1322_HW_drive_CS_low+0x14>)
 8002dd6:	f00c fd1d 	bl	800f814 <HAL_GPIO_WritePin>
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	48000800 	.word	0x48000800

08002de4 <SSD1322_HW_drive_CS_high>:
 *  @brief Drives CS (Chip Select) pin of SPI interface high.
 *
 *  CS pin may be also signed as "SS" or "NSS"
 */
void SSD1322_HW_drive_CS_high()
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_CS_GPIO_Port, SPI5_CS_Pin, 1);
 8002de8:	2201      	movs	r2, #1
 8002dea:	2104      	movs	r1, #4
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <SSD1322_HW_drive_CS_high+0x14>)
 8002dee:	f00c fd11 	bl	800f814 <HAL_GPIO_WritePin>
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	48000800 	.word	0x48000800

08002dfc <SSD1322_HW_drive_DC_low>:
 *  @brief Drives DC (Data/Command) pin of OLED driver low.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_low()
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e06:	4802      	ldr	r0, [pc, #8]	; (8002e10 <SSD1322_HW_drive_DC_low+0x14>)
 8002e08:	f00c fd04 	bl	800f814 <HAL_GPIO_WritePin>
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	48000800 	.word	0x48000800

08002e14 <SSD1322_HW_drive_DC_high>:
 *  @brief Drives DC (Data/Command) pin of of OLED driver high.
 *
 *  High state is for data and low state is for command.
 */
void SSD1322_HW_drive_DC_high()
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_DC_GPIO_Port, SPI5_DC_Pin, 1);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e1e:	4802      	ldr	r0, [pc, #8]	; (8002e28 <SSD1322_HW_drive_DC_high+0x14>)
 8002e20:	f00c fcf8 	bl	800f814 <HAL_GPIO_WritePin>
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	48000800 	.word	0x48000800

08002e2c <SSD1322_HW_drive_RESET_low>:
 *  @brief Drives RESET pin of of OLED driver low.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_low()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 0);
 8002e30:	2200      	movs	r2, #0
 8002e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e36:	4802      	ldr	r0, [pc, #8]	; (8002e40 <SSD1322_HW_drive_RESET_low+0x14>)
 8002e38:	f00c fcec 	bl	800f814 <HAL_GPIO_WritePin>
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	48000800 	.word	0x48000800

08002e44 <SSD1322_HW_drive_RESET_high>:
 *  @brief Drives RESET pin of of OLED driver high.
 *
 *  Logic low on RESET resets OLED driver.
 */
void SSD1322_HW_drive_RESET_high()
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI5_RESET_GPIO_Port, SPI5_RESET_Pin, 1);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e4e:	4802      	ldr	r0, [pc, #8]	; (8002e58 <SSD1322_HW_drive_RESET_high+0x14>)
 8002e50:	f00c fce0 	bl	800f814 <HAL_GPIO_WritePin>
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	48000800 	.word	0x48000800

08002e5c <SSD1322_HW_SPI_send_byte>:
 *  @brief Transmits single byte through SPI interface.
 *
 *  @param[in] byte_to_transmit byte that will be transmitted through SPI interface
 */
void SSD1322_HW_SPI_send_byte(uint8_t byte_to_transmit)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
	SPI5_TX_completed_flag = 0;
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <SSD1322_HW_SPI_send_byte+0x24>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
//	datatosend = byte_to_transmit;
	HAL_SPI_Transmit(&hspi3, &byte_to_transmit, 1, 10);
 8002e6c:	1df9      	adds	r1, r7, #7
 8002e6e:	230a      	movs	r3, #10
 8002e70:	2201      	movs	r2, #1
 8002e72:	4804      	ldr	r0, [pc, #16]	; (8002e84 <SSD1322_HW_SPI_send_byte+0x28>)
 8002e74:	f010 f949 	bl	801310a <HAL_SPI_Transmit>
//	if(HAL_SPI_Transmit_DMA(&hspi3, &byte_to_transmit, 1) != HAL_OK)
//	    {
//	    Error_Handler();
//	    }
//	while(!SPI5_TX_completed_flag);
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200000a6 	.word	0x200000a6
 8002e84:	2000785c 	.word	0x2000785c

08002e88 <SSD1322_HW_SPI_send_array>:
 *
 *  @param[in] array_to_transmit array of bytes that will be transmitted through SPI interface
 *  @param[in] array_size amount of bytes to transmit
 */
void SSD1322_HW_SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
	SPI5_TX_completed_flag = 0;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <SSD1322_HW_SPI_send_array+0x28>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi3, array_to_transmit, array_size,100);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	2364      	movs	r3, #100	; 0x64
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <SSD1322_HW_SPI_send_array+0x2c>)
 8002ea2:	f010 f932 	bl	801310a <HAL_SPI_Transmit>
//	if(HAL_SPI_Transmit_DMA(&hspi3, array_to_transmit, array_size) != HAL_OK)
//	    {
//		Error_Handler();
//	    }
//	while (!SPI5_TX_completed_flag);
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200000a6 	.word	0x200000a6
 8002eb4:	2000785c 	.word	0x2000785c

08002eb8 <SSD1322_HW_msDelay>:
 *  and is NOT USED during normal operation.
 *
 *  @param[in] milliseconds time to wait
 */
void SSD1322_HW_msDelay(uint32_t milliseconds)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f009 fec7 	bl	800cc54 <HAL_Delay>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <Refresh_display>:
//--------------------------------------------------------------
// Possible displayed screens
//--------------------------------------------------------------

void Refresh_display(const SSD1322_Screen_t SSD1322_Screen_State)
    {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
	if(is_display_on_standby_flag == true)
 8002eda:	4b7b      	ldr	r3, [pc, #492]	; (80030c8 <Refresh_display+0x1f8>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <Refresh_display+0x56>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4979      	ldr	r1, [pc, #484]	; (80030cc <Refresh_display+0x1fc>)
 8002ee8:	4879      	ldr	r0, [pc, #484]	; (80030d0 <Refresh_display+0x200>)
 8002eea:	f00f fcd7 	bl	801289c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4978      	ldr	r1, [pc, #480]	; (80030d4 <Refresh_display+0x204>)
 8002ef2:	4877      	ldr	r0, [pc, #476]	; (80030d0 <Refresh_display+0x200>)
 8002ef4:	f00f fdbc 	bl	8012a70 <HAL_RTC_GetDate>

		if((saved_minutes + 1) == 60) saved_minutes = 0; 	// in this case it wait 2 min - work on it
 8002ef8:	4b77      	ldr	r3, [pc, #476]	; (80030d8 <Refresh_display+0x208>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b3b      	cmp	r3, #59	; 0x3b
 8002efe:	d102      	bne.n	8002f06 <Refresh_display+0x36>
 8002f00:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <Refresh_display+0x208>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

		if((saved_seconds == sTime.Seconds) && ((saved_minutes + 1) == sTime.Minutes)) //do it one minute after last action with encoder or button
 8002f06:	4b71      	ldr	r3, [pc, #452]	; (80030cc <Refresh_display+0x1fc>)
 8002f08:	789a      	ldrb	r2, [r3, #2]
 8002f0a:	4b74      	ldr	r3, [pc, #464]	; (80030dc <Refresh_display+0x20c>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d109      	bne.n	8002f26 <Refresh_display+0x56>
 8002f12:	4b71      	ldr	r3, [pc, #452]	; (80030d8 <Refresh_display+0x208>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a6c      	ldr	r2, [pc, #432]	; (80030cc <Refresh_display+0x1fc>)
 8002f1a:	7852      	ldrb	r2, [r2, #1]
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d102      	bne.n	8002f26 <Refresh_display+0x56>
		    {
			SSD1322_API_sleep_on();
 8002f20:	f7ff fb4c 	bl	80025bc <SSD1322_API_sleep_on>
			return;
 8002f24:	e0cd      	b.n	80030c2 <Refresh_display+0x1f2>
		    }
	    }


	//przy nowym roku wyświetlić szczęśliwego nowego roku
	switch (SSD1322_Screen_State)
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	2b22      	cmp	r3, #34	; 0x22
 8002f2c:	f200 80bc 	bhi.w	80030a8 <Refresh_display+0x1d8>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <Refresh_display+0x68>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002fcd 	.word	0x08002fcd
 8002f3c:	08002fd5 	.word	0x08002fd5
 8002f40:	08002fe5 	.word	0x08002fe5
 8002f44:	08002ff9 	.word	0x08002ff9
 8002f48:	08003071 	.word	0x08003071
 8002f4c:	08003069 	.word	0x08003069
 8002f50:	08003049 	.word	0x08003049
 8002f54:	08003051 	.word	0x08003051
 8002f58:	08003059 	.word	0x08003059
 8002f5c:	080030a9 	.word	0x080030a9
 8002f60:	08003061 	.word	0x08003061
 8002f64:	080030a9 	.word	0x080030a9
 8002f68:	080030a9 	.word	0x080030a9
 8002f6c:	080030a9 	.word	0x080030a9
 8002f70:	080030a9 	.word	0x080030a9
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	080030a9 	.word	0x080030a9
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002fc5 	.word	0x08002fc5
 8002f8c:	08003039 	.word	0x08003039
 8002f90:	08003041 	.word	0x08003041
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	080030a9 	.word	0x080030a9
 8002fa4:	080030a9 	.word	0x080030a9
 8002fa8:	080030a9 	.word	0x080030a9
 8002fac:	08003079 	.word	0x08003079
 8002fb0:	08003081 	.word	0x08003081
 8002fb4:	08003089 	.word	0x08003089
 8002fb8:	08003091 	.word	0x08003091
 8002fbc:	08003099 	.word	0x08003099
 8002fc0:	080030a1 	.word	0x080030a1
	    {
	    case SSD1322_SCREEN_Welcome:
		SSD1322_Screen_Welcome(DisplayOLEDBuffer);
 8002fc4:	4846      	ldr	r0, [pc, #280]	; (80030e0 <Refresh_display+0x210>)
 8002fc6:	f000 f895 	bl	80030f4 <SSD1322_Screen_Welcome>
		break;
 8002fca:	e07a      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_TIME:
		SSD1322_Screen_Time(DisplayOLEDBuffer);
 8002fcc:	4844      	ldr	r0, [pc, #272]	; (80030e0 <Refresh_display+0x210>)
 8002fce:	f000 f91f 	bl	8003210 <SSD1322_Screen_Time>
		break;
 8002fd2:	e076      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_RADIO:
		//jeżeli nie jest ustawione radio to dac taka flagę i nie losowac z niego podczas wyswietlania
		SSD1322_Screen_Radio(DisplayOLEDBuffer);
 8002fd4:	4842      	ldr	r0, [pc, #264]	; (80030e0 <Refresh_display+0x210>)
 8002fd6:	f000 f973 	bl	80032c0 <SSD1322_Screen_Radio>
		break;
 8002fda:	e072      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_WakeUp:

		SSD1322_Screen_WakeUp(DisplayOLEDBuffer);
 8002fdc:	4840      	ldr	r0, [pc, #256]	; (80030e0 <Refresh_display+0x210>)
 8002fde:	f000 fa11 	bl	8003404 <SSD1322_Screen_WakeUp>
		break;
 8002fe2:	e06e      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_FFT:
		if(FFT_calc_done == 1)
 8002fe4:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <Refresh_display+0x214>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d166      	bne.n	80030bc <Refresh_display+0x1ec>
		    {
			SSD1322_Screen_FFT(DisplayOLEDBuffer, OutFreqArray);
 8002fee:	493e      	ldr	r1, [pc, #248]	; (80030e8 <Refresh_display+0x218>)
 8002ff0:	483b      	ldr	r0, [pc, #236]	; (80030e0 <Refresh_display+0x210>)
 8002ff2:	f000 fa5b 	bl	80034ac <SSD1322_Screen_FFT>
		    }
		break;
 8002ff6:	e061      	b.n	80030bc <Refresh_display+0x1ec>
	    case SSD1322_SCREEN_UVMETER:
		if(UV_meter_front_back == UV_METER_BACK)
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <Refresh_display+0x21c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d10b      	bne.n	8003018 <Refresh_display+0x148>
		    {
			SSD1322_Screen_UVMeter(DisplayOLEDBuffer, ADC_SamplesSUM[0], ADC_SamplesSUM[3], UV_meter_front_back);
 8003000:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <Refresh_display+0x220>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b299      	uxth	r1, r3
 8003006:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <Refresh_display+0x220>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b37      	ldr	r3, [pc, #220]	; (80030ec <Refresh_display+0x21c>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4833      	ldr	r0, [pc, #204]	; (80030e0 <Refresh_display+0x210>)
 8003012:	f000 facf 	bl	80035b4 <SSD1322_Screen_UVMeter>
		    }
		else if(UV_meter_front_back == UV_METER_FRONT)
		    {
			SSD1322_Screen_UVMeter(DisplayOLEDBuffer, ADC_SamplesSUM[2], ADC_SamplesSUM[1], UV_meter_front_back);
		    }
		break;
 8003016:	e053      	b.n	80030c0 <Refresh_display+0x1f0>
		else if(UV_meter_front_back == UV_METER_FRONT)
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <Refresh_display+0x21c>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d14f      	bne.n	80030c0 <Refresh_display+0x1f0>
			SSD1322_Screen_UVMeter(DisplayOLEDBuffer, ADC_SamplesSUM[2], ADC_SamplesSUM[1], UV_meter_front_back);
 8003020:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <Refresh_display+0x220>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	b299      	uxth	r1, r3
 8003026:	4b32      	ldr	r3, [pc, #200]	; (80030f0 <Refresh_display+0x220>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	b29a      	uxth	r2, r3
 800302c:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <Refresh_display+0x21c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	482b      	ldr	r0, [pc, #172]	; (80030e0 <Refresh_display+0x210>)
 8003032:	f000 fabf 	bl	80035b4 <SSD1322_Screen_UVMeter>
		break;
 8003036:	e043      	b.n	80030c0 <Refresh_display+0x1f0>
	    case SSD1322_SCREEN_OFF:
		SSD1322_Screen_OFF(DisplayOLEDBuffer);
 8003038:	4829      	ldr	r0, [pc, #164]	; (80030e0 <Refresh_display+0x210>)
 800303a:	f000 fb0d 	bl	8003658 <SSD1322_Screen_OFF>
		break;
 800303e:	e040      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_GoodBye:
		SSD1322_Screen_GoodBye(DisplayOLEDBuffer);
 8003040:	4827      	ldr	r0, [pc, #156]	; (80030e0 <Refresh_display+0x210>)
 8003042:	f000 fb29 	bl	8003698 <SSD1322_Screen_GoodBye>
		break;
 8003046:	e03c      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETCLOCK:
		SSD1322_Screen_SetClock(DisplayOLEDBuffer);
 8003048:	4825      	ldr	r0, [pc, #148]	; (80030e0 <Refresh_display+0x210>)
 800304a:	f000 fb45 	bl	80036d8 <SSD1322_Screen_SetClock>
		break;
 800304e:	e038      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETALARM:
		SSD1322_Screen_SetAlarm(DisplayOLEDBuffer);
 8003050:	4823      	ldr	r0, [pc, #140]	; (80030e0 <Refresh_display+0x210>)
 8003052:	f000 fb61 	bl	8003718 <SSD1322_Screen_SetAlarm>
		break;
 8003056:	e034      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETTINGS:
		SSD1322_Screen_Settings(DisplayOLEDBuffer);
 8003058:	4821      	ldr	r0, [pc, #132]	; (80030e0 <Refresh_display+0x210>)
 800305a:	f000 fcd3 	bl	8003a04 <SSD1322_Screen_Settings>
		break;
 800305e:	e030      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_USB:
		SSD1322_Screen_USB(DisplayOLEDBuffer);
 8003060:	481f      	ldr	r0, [pc, #124]	; (80030e0 <Refresh_display+0x210>)
 8003062:	f000 fd45 	bl	8003af0 <SSD1322_Screen_USB>
		break;
 8003066:	e02c      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_SETINPUT:
		SSD1322_Screen_SetInput(DisplayOLEDBuffer);
 8003068:	481d      	ldr	r0, [pc, #116]	; (80030e0 <Refresh_display+0x210>)
 800306a:	f000 fda9 	bl	8003bc0 <SSD1322_Screen_SetInput>
		break;
 800306e:	e028      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_TIME_BOUNCING:
		SSD1322_Screen_Time_Bouncing(DisplayOLEDBuffer);
 8003070:	481b      	ldr	r0, [pc, #108]	; (80030e0 <Refresh_display+0x210>)
 8003072:	f000 fd5d 	bl	8003b30 <SSD1322_Screen_Time_Bouncing>
		break;
 8003076:	e024      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_VOLUME_FRONT:
		SSD1322_Screen_Encoder_Volume_Front(DisplayOLEDBuffer);
 8003078:	4819      	ldr	r0, [pc, #100]	; (80030e0 <Refresh_display+0x210>)
 800307a:	f000 fe6b 	bl	8003d54 <SSD1322_Screen_Encoder_Volume_Front>
		break;
 800307e:	e020      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_VOLUME_BACK:
		SSD1322_Screen_Encoder_Volume_Back(DisplayOLEDBuffer);
 8003080:	4817      	ldr	r0, [pc, #92]	; (80030e0 <Refresh_display+0x210>)
 8003082:	f000 feab 	bl	8003ddc <SSD1322_Screen_Encoder_Volume_Back>
		break;
 8003086:	e01c      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_LOUDNESS:
		SSD1322_Screen_Encoder_Loudness(DisplayOLEDBuffer);
 8003088:	4815      	ldr	r0, [pc, #84]	; (80030e0 <Refresh_display+0x210>)
 800308a:	f000 feeb 	bl	8003e64 <SSD1322_Screen_Encoder_Loudness>
		break;
 800308e:	e018      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_TREBLE:
		SSD1322_Screen_Encoder_Treble(DisplayOLEDBuffer);
 8003090:	4813      	ldr	r0, [pc, #76]	; (80030e0 <Refresh_display+0x210>)
 8003092:	f000 ff33 	bl	8003efc <SSD1322_Screen_Encoder_Treble>
		break;
 8003096:	e014      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_MIDDLE:
		SSD1322_Screen_Encoder_Middle(DisplayOLEDBuffer);
 8003098:	4811      	ldr	r0, [pc, #68]	; (80030e0 <Refresh_display+0x210>)
 800309a:	f000 ffc9 	bl	8004030 <SSD1322_Screen_Encoder_Middle>
		break;
 800309e:	e010      	b.n	80030c2 <Refresh_display+0x1f2>
	    case SSD1322_SCREEN_ENCODER_BASS:
		SSD1322_Screen_Encoder_Bass(DisplayOLEDBuffer);
 80030a0:	480f      	ldr	r0, [pc, #60]	; (80030e0 <Refresh_display+0x210>)
 80030a2:	f001 f85f 	bl	8004164 <SSD1322_Screen_Encoder_Bass>
		break;
 80030a6:	e00c      	b.n	80030c2 <Refresh_display+0x1f2>
	    default:
		fill_buffer(DisplayOLEDBuffer, 0);
 80030a8:	2100      	movs	r1, #0
 80030aa:	480d      	ldr	r0, [pc, #52]	; (80030e0 <Refresh_display+0x210>)
 80030ac:	f7ff fb2c 	bl	8002708 <fill_buffer>
		send_buffer_to_OLED(DisplayOLEDBuffer, 0, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	2100      	movs	r1, #0
 80030b4:	480a      	ldr	r0, [pc, #40]	; (80030e0 <Refresh_display+0x210>)
 80030b6:	f7ff fe6b 	bl	8002d90 <send_buffer_to_OLED>
		break;
 80030ba:	e002      	b.n	80030c2 <Refresh_display+0x1f2>
		break;
 80030bc:	bf00      	nop
 80030be:	e000      	b.n	80030c2 <Refresh_display+0x1f2>
		break;
 80030c0:	bf00      	nop
	    }
    }
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000195 	.word	0x20000195
 80030cc:	2000178c 	.word	0x2000178c
 80030d0:	20007828 	.word	0x20007828
 80030d4:	200057bc 	.word	0x200057bc
 80030d8:	20000194 	.word	0x20000194
 80030dc:	20000193 	.word	0x20000193
 80030e0:	200037bc 	.word	0x200037bc
 80030e4:	200001e9 	.word	0x200001e9
 80030e8:	200077fc 	.word	0x200077fc
 80030ec:	200037b8 	.word	0x200037b8
 80030f0:	20000708 	.word	0x20000708

080030f4 <SSD1322_Screen_Welcome>:

void SSD1322_Screen_Welcome(uint8_t *const buffer)
    {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	6078      	str	r0, [r7, #4]
	draw_text(buffer, "Przyjemnosc ze sluchania ", 20, 15, 15);
 80030fc:	230f      	movs	r3, #15
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	230f      	movs	r3, #15
 8003102:	2214      	movs	r2, #20
 8003104:	4940      	ldr	r1, [pc, #256]	; (8003208 <SSD1322_Screen_Welcome+0x114>)
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fe0e 	bl	8002d28 <draw_text>
	draw_text(buffer, "zapewnia ", 20, 36, 15);
 800310c:	230f      	movs	r3, #15
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2324      	movs	r3, #36	; 0x24
 8003112:	2214      	movs	r2, #20
 8003114:	493d      	ldr	r1, [pc, #244]	; (800320c <SSD1322_Screen_Welcome+0x118>)
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fe06 	bl	8002d28 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 800311c:	2200      	movs	r2, #0
 800311e:	2100      	movs	r1, #0
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fe35 	bl	8002d90 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003126:	20c8      	movs	r0, #200	; 0xc8
 8003128:	f009 fd94 	bl	800cc54 <HAL_Delay>
	draw_char(buffer, 'M', 20, 55, 15);
 800312c:	230f      	movs	r3, #15
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2337      	movs	r3, #55	; 0x37
 8003132:	2214      	movs	r2, #20
 8003134:	214d      	movs	r1, #77	; 0x4d
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fd5e 	bl	8002bf8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fe25 	bl	8002d90 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003146:	20c8      	movs	r0, #200	; 0xc8
 8003148:	f009 fd84 	bl	800cc54 <HAL_Delay>
	draw_char(buffer, 'A', 38, 55, 15);
 800314c:	230f      	movs	r3, #15
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2337      	movs	r3, #55	; 0x37
 8003152:	2226      	movs	r2, #38	; 0x26
 8003154:	2141      	movs	r1, #65	; 0x41
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fd4e 	bl	8002bf8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2100      	movs	r1, #0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fe15 	bl	8002d90 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003166:	20c8      	movs	r0, #200	; 0xc8
 8003168:	f009 fd74 	bl	800cc54 <HAL_Delay>
	draw_char(buffer, 'C', 53, 55, 15);
 800316c:	230f      	movs	r3, #15
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2337      	movs	r3, #55	; 0x37
 8003172:	2235      	movs	r2, #53	; 0x35
 8003174:	2143      	movs	r1, #67	; 0x43
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fd3e 	bl	8002bf8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800317c:	2200      	movs	r2, #0
 800317e:	2100      	movs	r1, #0
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fe05 	bl	8002d90 <send_buffer_to_OLED>
	HAL_Delay(200);
 8003186:	20c8      	movs	r0, #200	; 0xc8
 8003188:	f009 fd64 	bl	800cc54 <HAL_Delay>
	draw_char(buffer, 'I', 68, 55, 15);
 800318c:	230f      	movs	r3, #15
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2337      	movs	r3, #55	; 0x37
 8003192:	2244      	movs	r2, #68	; 0x44
 8003194:	2149      	movs	r1, #73	; 0x49
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fd2e 	bl	8002bf8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fdf5 	bl	8002d90 <send_buffer_to_OLED>
	HAL_Delay(200);
 80031a6:	20c8      	movs	r0, #200	; 0xc8
 80031a8:	f009 fd54 	bl	800cc54 <HAL_Delay>
	draw_char(buffer, 'E', 78, 55, 15);
 80031ac:	230f      	movs	r3, #15
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2337      	movs	r3, #55	; 0x37
 80031b2:	224e      	movs	r2, #78	; 0x4e
 80031b4:	2145      	movs	r1, #69	; 0x45
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fd1e 	bl	8002bf8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fde5 	bl	8002d90 <send_buffer_to_OLED>
	HAL_Delay(200);
 80031c6:	20c8      	movs	r0, #200	; 0xc8
 80031c8:	f009 fd44 	bl	800cc54 <HAL_Delay>
	draw_char(buffer, 'J', 93, 55, 15);
 80031cc:	230f      	movs	r3, #15
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2337      	movs	r3, #55	; 0x37
 80031d2:	225d      	movs	r2, #93	; 0x5d
 80031d4:	214a      	movs	r1, #74	; 0x4a
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fd0e 	bl	8002bf8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 80031dc:	2200      	movs	r2, #0
 80031de:	2100      	movs	r1, #0
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fdd5 	bl	8002d90 <send_buffer_to_OLED>
	HAL_Delay(1000);
 80031e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031ea:	f009 fd33 	bl	800cc54 <HAL_Delay>
	fill_buffer(buffer, 0);
 80031ee:	2100      	movs	r1, #0
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fa89 	bl	8002708 <fill_buffer>
	send_buffer_to_OLED(buffer, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fdc8 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	08017d84 	.word	0x08017d84
 800320c:	08017da0 	.word	0x08017da0

08003210 <SSD1322_Screen_Time>:

void SSD1322_Screen_Time(uint8_t *const buffer)
    {
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af02      	add	r7, sp, #8
 8003216:	6078      	str	r0, [r7, #4]
	// do zegara dodac wybor roznych czcionek
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003218:	2200      	movs	r2, #0
 800321a:	4922      	ldr	r1, [pc, #136]	; (80032a4 <SSD1322_Screen_Time+0x94>)
 800321c:	4822      	ldr	r0, [pc, #136]	; (80032a8 <SSD1322_Screen_Time+0x98>)
 800321e:	f00f fb3d 	bl	801289c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003222:	2200      	movs	r2, #0
 8003224:	4921      	ldr	r1, [pc, #132]	; (80032ac <SSD1322_Screen_Time+0x9c>)
 8003226:	4820      	ldr	r0, [pc, #128]	; (80032a8 <SSD1322_Screen_Time+0x98>)
 8003228:	f00f fc22 	bl	8012a70 <HAL_RTC_GetDate>

	fill_buffer(buffer, DISPLAY_BLACK);
 800322c:	2100      	movs	r1, #0
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff fa6a 	bl	8002708 <fill_buffer>
	select_font(&FreeSerifItalic24pt7b);
 8003234:	481e      	ldr	r0, [pc, #120]	; (80032b0 <SSD1322_Screen_Time+0xa0>)
 8003236:	f7ff fccf 	bl	8002bd8 <select_font>
	//wywoływać tylko co sekunde i nie sprawdzac nie potrzebne innych wartości
	//aktualizacje czasu wywolywac timerem co sekunde
	/* Setting Time */
	ChangeDateToArrayCharTime(ConvertArrayCharTime, sTime.Hours, sTime.Minutes, sTime.Seconds, 0);
 800323a:	4b1a      	ldr	r3, [pc, #104]	; (80032a4 <SSD1322_Screen_Time+0x94>)
 800323c:	7819      	ldrb	r1, [r3, #0]
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <SSD1322_Screen_Time+0x94>)
 8003240:	785a      	ldrb	r2, [r3, #1]
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <SSD1322_Screen_Time+0x94>)
 8003244:	789b      	ldrb	r3, [r3, #2]
 8003246:	2000      	movs	r0, #0
 8003248:	9000      	str	r0, [sp, #0]
 800324a:	481a      	ldr	r0, [pc, #104]	; (80032b4 <SSD1322_Screen_Time+0xa4>)
 800324c:	f002 fc4c 	bl	8005ae8 <ChangeDateToArrayCharTime>
	draw_text(buffer, (char*) ConvertArrayCharTime, 2, 32, 5);
 8003250:	2305      	movs	r3, #5
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	2320      	movs	r3, #32
 8003256:	2202      	movs	r2, #2
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <SSD1322_Screen_Time+0xa4>)
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fd64 	bl	8002d28 <draw_text>
	/* Setting Date */
	select_font(&FreeSerifItalic9pt7b);
 8003260:	4815      	ldr	r0, [pc, #84]	; (80032b8 <SSD1322_Screen_Time+0xa8>)
 8003262:	f7ff fcb9 	bl	8002bd8 <select_font>
	ConvertDateToBuffer((2021 + sDate.Year), sDate.Month, sDate.WeekDay, sDate.Date);
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <SSD1322_Screen_Time+0x9c>)
 8003268:	78db      	ldrb	r3, [r3, #3]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f203 73e5 	addw	r3, r3, #2021	; 0x7e5
 8003270:	b298      	uxth	r0, r3
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <SSD1322_Screen_Time+0x9c>)
 8003274:	7859      	ldrb	r1, [r3, #1]
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <SSD1322_Screen_Time+0x9c>)
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <SSD1322_Screen_Time+0x9c>)
 800327c:	789b      	ldrb	r3, [r3, #2]
 800327e:	f002 fd09 	bl	8005c94 <ConvertDateToBuffer>
	draw_text(buffer, (char*) TestingArray, 2, 60, 5);
 8003282:	2305      	movs	r3, #5
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	233c      	movs	r3, #60	; 0x3c
 8003288:	2202      	movs	r2, #2
 800328a:	490c      	ldr	r1, [pc, #48]	; (80032bc <SSD1322_Screen_Time+0xac>)
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff fd4b 	bl	8002d28 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2100      	movs	r1, #0
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff fd7a 	bl	8002d90 <send_buffer_to_OLED>
    }
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	2000178c 	.word	0x2000178c
 80032a8:	20007828 	.word	0x20007828
 80032ac:	200057bc 	.word	0x200057bc
 80032b0:	08023004 	.word	0x08023004
 80032b4:	2000014c 	.word	0x2000014c
 80032b8:	08023798 	.word	0x08023798
 80032bc:	20000158 	.word	0x20000158

080032c0 <SSD1322_Screen_Radio>:

void SSD1322_Screen_Radio(uint8_t *const buffer)
    {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	6078      	str	r0, [r7, #4]
	static uint16_t freq_scaled = 0;
	static uint16_t rssi_scaled = 0;
	static char RDStext[32];

	if(RADIO_IS_ON_back_flag == true || RADIO_IS_ON_front_flag == true)
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <SSD1322_Screen_Radio+0x118>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d004      	beq.n	80032dc <SSD1322_Screen_Radio+0x1c>
 80032d2:	4b42      	ldr	r3, [pc, #264]	; (80033dc <SSD1322_Screen_Radio+0x11c>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <SSD1322_Screen_Radio+0x22>
	    {
		RDA5807_Read();
 80032dc:	f003 fe24 	bl	8006f28 <RDA5807_Read>
 80032e0:	e001      	b.n	80032e6 <SSD1322_Screen_Radio+0x26>
	    }
	else
	    {
		RDA5807_RDSinit();
 80032e2:	f003 fdd7 	bl	8006e94 <RDA5807_RDSinit>
	    }

	freq_scaled = map(RDA5807_GetFrequency(), RADIO_MIN_FREQ, RADIO_MAX_FREQ, 20, 200);
 80032e6:	f003 fdb5 	bl	8006e54 <RDA5807_GetFrequency>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4618      	mov	r0, r3
 80032ee:	23c8      	movs	r3, #200	; 0xc8
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	2314      	movs	r3, #20
 80032f4:	f240 4247 	movw	r2, #1095	; 0x447
 80032f8:	f240 3175 	movw	r1, #885	; 0x375
 80032fc:	f006 feba 	bl	800a074 <map>
 8003300:	4603      	mov	r3, r0
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <SSD1322_Screen_Radio+0x120>)
 8003306:	801a      	strh	r2, [r3, #0]
	fill_buffer(buffer, 0);
 8003308:	2100      	movs	r1, #0
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff f9fc 	bl	8002708 <fill_buffer>
	select_font(&FreeSerifBold9pt7b);
 8003310:	4834      	ldr	r0, [pc, #208]	; (80033e4 <SSD1322_Screen_Radio+0x124>)
 8003312:	f7ff fc61 	bl	8002bd8 <select_font>

	ChangeDateToArrayChar(RDA5807_GetFrequency());
 8003316:	f003 fd9d 	bl	8006e54 <RDA5807_GetFrequency>
 800331a:	4603      	mov	r3, r0
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fb57 	bl	80059d0 <ChangeDateToArrayChar>
	draw_text(buffer, (char*) ConvertArrayCharLong, 20, 13, 5);
 8003322:	2305      	movs	r3, #5
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	230d      	movs	r3, #13
 8003328:	2214      	movs	r2, #20
 800332a:	492f      	ldr	r1, [pc, #188]	; (80033e8 <SSD1322_Screen_Radio+0x128>)
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fcfb 	bl	8002d28 <draw_text>

	/* draw radio info */
	select_font(&FreeSerifBold9pt7b);
 8003332:	482c      	ldr	r0, [pc, #176]	; (80033e4 <SSD1322_Screen_Radio+0x124>)
 8003334:	f7ff fc50 	bl	8002bd8 <select_font>
	draw_text(buffer, (char *)StationName, 150, 13, 5);
 8003338:	2305      	movs	r3, #5
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	230d      	movs	r3, #13
 800333e:	2296      	movs	r2, #150	; 0x96
 8003340:	492a      	ldr	r1, [pc, #168]	; (80033ec <SSD1322_Screen_Radio+0x12c>)
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fcf0 	bl	8002d28 <draw_text>
	select_font(&MACIEK_FONT);
 8003348:	4829      	ldr	r0, [pc, #164]	; (80033f0 <SSD1322_Screen_Radio+0x130>)
 800334a:	f7ff fc45 	bl	8002bd8 <select_font>
	if(prepare_RDS_text((char *)RDStext) == true)
 800334e:	4829      	ldr	r0, [pc, #164]	; (80033f4 <SSD1322_Screen_Radio+0x134>)
 8003350:	f002 fe0c 	bl	8005f6c <prepare_RDS_text>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <SSD1322_Screen_Radio+0xaa>
	    {
		draw_text(buffer, (char *)RDStextbuffer, 20, 32, 5); //zwraca stringa
 800335a:	2305      	movs	r3, #5
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2320      	movs	r3, #32
 8003360:	2214      	movs	r2, #20
 8003362:	4925      	ldr	r1, [pc, #148]	; (80033f8 <SSD1322_Screen_Radio+0x138>)
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fcdf 	bl	8002d28 <draw_text>
//			//zrobić wtedy zmianę co 2 sec
//		    }
	    }

	/* Scale for frequency */
	draw_freq_scale(buffer, freq_scaled);
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <SSD1322_Screen_Radio+0x120>)
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f001 ffa5 	bl	80052c0 <draw_freq_scale>

	/* Draw RSSI wskaźnik */
	rssi_scaled = map(RDA5807_GetRSSI(), 0, 63, 0, 63);
 8003376:	f003 fd81 	bl	8006e7c <RDA5807_GetRSSI>
 800337a:	4603      	mov	r3, r0
 800337c:	4618      	mov	r0, r3
 800337e:	233f      	movs	r3, #63	; 0x3f
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2300      	movs	r3, #0
 8003384:	223f      	movs	r2, #63	; 0x3f
 8003386:	2100      	movs	r1, #0
 8003388:	f006 fe74 	bl	800a074 <map>
 800338c:	4603      	mov	r3, r0
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <SSD1322_Screen_Radio+0x13c>)
 8003392:	801a      	strh	r2, [r3, #0]
	draw_rect_filled(buffer, 0, 62 - rssi_scaled, 10, 63, 5);
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <SSD1322_Screen_Radio+0x13c>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800339c:	b29a      	uxth	r2, r3
 800339e:	2305      	movs	r3, #5
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	233f      	movs	r3, #63	; 0x3f
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	230a      	movs	r3, #10
 80033a8:	2100      	movs	r1, #0
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff fb05 	bl	80029ba <draw_rect_filled>
	/* Draw antenna */
	select_font(&Custon_chars);
 80033b0:	4813      	ldr	r0, [pc, #76]	; (8003400 <SSD1322_Screen_Radio+0x140>)
 80033b2:	f7ff fc11 	bl	8002bd8 <select_font>
	draw_char(buffer, '!', 0, 16, 5); // ! - anntena in custom chars
 80033b6:	2305      	movs	r3, #5
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2310      	movs	r3, #16
 80033bc:	2200      	movs	r2, #0
 80033be:	2121      	movs	r1, #33	; 0x21
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fc19 	bl	8002bf8 <draw_char>

	send_buffer_to_OLED(buffer, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fce0 	bl	8002d90 <send_buffer_to_OLED>
    }
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200037b9 	.word	0x200037b9
 80033dc:	200077f8 	.word	0x200077f8
 80033e0:	20000196 	.word	0x20000196
 80033e4:	0801e3f8 	.word	0x0801e3f8
 80033e8:	20000180 	.word	0x20000180
 80033ec:	20000454 	.word	0x20000454
 80033f0:	08023bb8 	.word	0x08023bb8
 80033f4:	20000198 	.word	0x20000198
 80033f8:	200003a4 	.word	0x200003a4
 80033fc:	200001b8 	.word	0x200001b8
 8003400:	0801843c 	.word	0x0801843c

08003404 <SSD1322_Screen_WakeUp>:

void SSD1322_Screen_WakeUp(uint8_t *const buffer)
    {
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
	//zwiększanie głośności podczas budzenia
	fill_buffer(buffer, DISPLAY_BLACK);
 800340c:	2100      	movs	r1, #0
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff f97a 	bl	8002708 <fill_buffer>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003414:	2200      	movs	r2, #0
 8003416:	491e      	ldr	r1, [pc, #120]	; (8003490 <SSD1322_Screen_WakeUp+0x8c>)
 8003418:	481e      	ldr	r0, [pc, #120]	; (8003494 <SSD1322_Screen_WakeUp+0x90>)
 800341a:	f00f fa3f 	bl	801289c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800341e:	2200      	movs	r2, #0
 8003420:	491d      	ldr	r1, [pc, #116]	; (8003498 <SSD1322_Screen_WakeUp+0x94>)
 8003422:	481c      	ldr	r0, [pc, #112]	; (8003494 <SSD1322_Screen_WakeUp+0x90>)
 8003424:	f00f fb24 	bl	8012a70 <HAL_RTC_GetDate>

	uint8_t Hours = sTime.Hours;
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <SSD1322_Screen_WakeUp+0x8c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	73fb      	strb	r3, [r7, #15]
	uint8_t Minutes = sTime.Minutes;
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <SSD1322_Screen_WakeUp+0x8c>)
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	73bb      	strb	r3, [r7, #14]
	uint8_t Seconds = sTime.Seconds;
 8003434:	4b16      	ldr	r3, [pc, #88]	; (8003490 <SSD1322_Screen_WakeUp+0x8c>)
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	737b      	strb	r3, [r7, #13]

	uint8_t Mode = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	733b      	strb	r3, [r7, #12]

	select_font(&FreeSerifBoldItalic9pt7b);
 800343e:	4817      	ldr	r0, [pc, #92]	; (800349c <SSD1322_Screen_WakeUp+0x98>)
 8003440:	f7ff fbca 	bl	8002bd8 <select_font>
	draw_text(buffer, "WSTAWAJ !!!", 2, 58, 5);
 8003444:	2305      	movs	r3, #5
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	233a      	movs	r3, #58	; 0x3a
 800344a:	2202      	movs	r2, #2
 800344c:	4914      	ldr	r1, [pc, #80]	; (80034a0 <SSD1322_Screen_WakeUp+0x9c>)
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fc6a 	bl	8002d28 <draw_text>
	ChangeDateToArrayCharTime(ConvertArrayCharTime, Hours, Minutes, Seconds, Mode);
 8003454:	7b78      	ldrb	r0, [r7, #13]
 8003456:	7bba      	ldrb	r2, [r7, #14]
 8003458:	7bf9      	ldrb	r1, [r7, #15]
 800345a:	7b3b      	ldrb	r3, [r7, #12]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	4603      	mov	r3, r0
 8003460:	4810      	ldr	r0, [pc, #64]	; (80034a4 <SSD1322_Screen_WakeUp+0xa0>)
 8003462:	f002 fb41 	bl	8005ae8 <ChangeDateToArrayCharTime>
	select_font(&FreeSerifBoldItalic24pt7b);
 8003466:	4810      	ldr	r0, [pc, #64]	; (80034a8 <SSD1322_Screen_WakeUp+0xa4>)
 8003468:	f7ff fbb6 	bl	8002bd8 <select_font>
	draw_text(buffer, (char*) ConvertArrayCharTime, 2, 33, 5);
 800346c:	2305      	movs	r3, #5
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2321      	movs	r3, #33	; 0x21
 8003472:	2202      	movs	r2, #2
 8003474:	490b      	ldr	r1, [pc, #44]	; (80034a4 <SSD1322_Screen_WakeUp+0xa0>)
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fc56 	bl	8002d28 <draw_text>
	//dodać budzik który bedzie sie ruszal, czyli odswiezac i zmieniac go dwa razy na sekunde
	//poprzez togglowanie flagi
	//albo usunac napis wstawaj i dac tylko czas i animacje budzika
	send_buffer_to_OLED(buffer, 0, 0);
 800347c:	2200      	movs	r2, #0
 800347e:	2100      	movs	r1, #0
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fc85 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000178c 	.word	0x2000178c
 8003494:	20007828 	.word	0x20007828
 8003498:	200057bc 	.word	0x200057bc
 800349c:	08020f60 	.word	0x08020f60
 80034a0:	08017dac 	.word	0x08017dac
 80034a4:	2000014c 	.word	0x2000014c
 80034a8:	08020738 	.word	0x08020738

080034ac <SSD1322_Screen_FFT>:

void SSD1322_Screen_FFT(uint8_t *const buffer, __attribute__((__unused__)) uint8_t *const FFT_out_buffer)
    {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
	FFT_calc_done = 0;
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <SSD1322_Screen_FFT+0xe8>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
	select_font(&FreeSerif9pt7b);
 80034bc:	4836      	ldr	r0, [pc, #216]	; (8003598 <SSD1322_Screen_FFT+0xec>)
 80034be:	f7ff fb8b 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 80034c2:	2100      	movs	r1, #0
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff f91f 	bl	8002708 <fill_buffer>
//		    draw_text(buffer, (char*)FFT_back_right_str, 80, 12, 5);
//		break;
//		default:
//		break;
//	    }
	uint8_t j = 10; //begin of first prążek
 80034ca:	230a      	movs	r3, #10
 80034cc:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 22; i++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	73bb      	strb	r3, [r7, #14]
 80034d2:	e02f      	b.n	8003534 <SSD1322_Screen_FFT+0x88>
	    {
		if ((63 - OutFreqArray[i]) < 13) //set max heigh of prążek
 80034d4:	7bbb      	ldrb	r3, [r7, #14]
 80034d6:	4a31      	ldr	r2, [pc, #196]	; (800359c <SSD1322_Screen_FFT+0xf0>)
 80034d8:	5cd3      	ldrb	r3, [r2, r3]
 80034da:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	dc0e      	bgt.n	8003500 <SSD1322_Screen_FFT+0x54>
		    {
			draw_rect_filled(buffer, j, 10, j + 5, 63, 5);
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	b299      	uxth	r1, r3
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3305      	adds	r3, #5
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2205      	movs	r2, #5
 80034f0:	9201      	str	r2, [sp, #4]
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	9200      	str	r2, [sp, #0]
 80034f6:	220a      	movs	r2, #10
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fa5e 	bl	80029ba <draw_rect_filled>
 80034fe:	e013      	b.n	8003528 <SSD1322_Screen_FFT+0x7c>
		    }
		else
		    {
			draw_rect_filled(buffer, j, 60 - OutFreqArray[i], j + 5, 63, 5);
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	b299      	uxth	r1, r3
 8003504:	7bbb      	ldrb	r3, [r7, #14]
 8003506:	4a25      	ldr	r2, [pc, #148]	; (800359c <SSD1322_Screen_FFT+0xf0>)
 8003508:	5cd3      	ldrb	r3, [r2, r3]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8003510:	b29a      	uxth	r2, r3
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	b29b      	uxth	r3, r3
 8003516:	3305      	adds	r3, #5
 8003518:	b29b      	uxth	r3, r3
 800351a:	2005      	movs	r0, #5
 800351c:	9001      	str	r0, [sp, #4]
 800351e:	203f      	movs	r0, #63	; 0x3f
 8003520:	9000      	str	r0, [sp, #0]
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fa49 	bl	80029ba <draw_rect_filled>
		    }
		j = j + 10;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	330a      	adds	r3, #10
 800352c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 22; i++)
 800352e:	7bbb      	ldrb	r3, [r7, #14]
 8003530:	3301      	adds	r3, #1
 8003532:	73bb      	strb	r3, [r7, #14]
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	2b15      	cmp	r3, #21
 8003538:	d9cc      	bls.n	80034d4 <SSD1322_Screen_FFT+0x28>
	    }

	select_font(&TomThumb);
 800353a:	4819      	ldr	r0, [pc, #100]	; (80035a0 <SSD1322_Screen_FFT+0xf4>)
 800353c:	f7ff fb4c 	bl	8002bd8 <select_font>
	draw_text(buffer, "50", 10, 5, 5);
 8003540:	2305      	movs	r3, #5
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2305      	movs	r3, #5
 8003546:	220a      	movs	r2, #10
 8003548:	4916      	ldr	r1, [pc, #88]	; (80035a4 <SSD1322_Screen_FFT+0xf8>)
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fbec 	bl	8002d28 <draw_text>
	draw_text(buffer, "200", 60, 5, 5);
 8003550:	2305      	movs	r3, #5
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2305      	movs	r3, #5
 8003556:	223c      	movs	r2, #60	; 0x3c
 8003558:	4913      	ldr	r1, [pc, #76]	; (80035a8 <SSD1322_Screen_FFT+0xfc>)
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff fbe4 	bl	8002d28 <draw_text>
	draw_text(buffer, "2k", 100, 5, 5);
 8003560:	2305      	movs	r3, #5
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2305      	movs	r3, #5
 8003566:	2264      	movs	r2, #100	; 0x64
 8003568:	4910      	ldr	r1, [pc, #64]	; (80035ac <SSD1322_Screen_FFT+0x100>)
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fbdc 	bl	8002d28 <draw_text>
	draw_text(buffer, "20k", 150, 5, 5);
 8003570:	2305      	movs	r3, #5
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	2305      	movs	r3, #5
 8003576:	2296      	movs	r2, #150	; 0x96
 8003578:	490d      	ldr	r1, [pc, #52]	; (80035b0 <SSD1322_Screen_FFT+0x104>)
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fbd4 	bl	8002d28 <draw_text>

	send_buffer_to_OLED(buffer, 0, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff fc03 	bl	8002d90 <send_buffer_to_OLED>
    }
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200001e9 	.word	0x200001e9
 8003598:	0801dc64 	.word	0x0801dc64
 800359c:	200077fc 	.word	0x200077fc
 80035a0:	08023f70 	.word	0x08023f70
 80035a4:	08017db8 	.word	0x08017db8
 80035a8:	08017dbc 	.word	0x08017dbc
 80035ac:	08017dc0 	.word	0x08017dc0
 80035b0:	08017dc4 	.word	0x08017dc4

080035b4 <SSD1322_Screen_UVMeter>:

void SSD1322_Screen_UVMeter(uint8_t *const buffer, UV_meter_t left_channel, UV_meter_t right_channel, const uint8_t mode)
    {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
	//efekt spadającej wartości peak do włączenia
	select_font(&FreeSerifItalic9pt7b);
 80035ce:	4821      	ldr	r0, [pc, #132]	; (8003654 <SSD1322_Screen_UVMeter+0xa0>)
 80035d0:	f7ff fb02 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 80035d4:	2100      	movs	r1, #0
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff f896 	bl	8002708 <fill_buffer>
	left_channel = map(left_channel, 20, 2100, 25, 254); //dodać zabezpieczenie przed przekroczeniem zakresów
 80035dc:	8978      	ldrh	r0, [r7, #10]
 80035de:	23fe      	movs	r3, #254	; 0xfe
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2319      	movs	r3, #25
 80035e4:	f640 0234 	movw	r2, #2100	; 0x834
 80035e8:	2114      	movs	r1, #20
 80035ea:	f006 fd43 	bl	800a074 <map>
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
	right_channel = map(right_channel, 20, 2100, 25, 254);
 80035f2:	8938      	ldrh	r0, [r7, #8]
 80035f4:	23fe      	movs	r3, #254	; 0xfe
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2319      	movs	r3, #25
 80035fa:	f640 0234 	movw	r2, #2100	; 0x834
 80035fe:	2114      	movs	r1, #20
 8003600:	f006 fd38 	bl	800a074 <map>
 8003604:	4603      	mov	r3, r0
 8003606:	813b      	strh	r3, [r7, #8]
	else if(mode == UV_METER_BACK)
	    {
		//draw back label
	    }

	draw_UV_rectangle_scale(buffer, left_channel, right_channel);
 8003608:	893a      	ldrh	r2, [r7, #8]
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	4619      	mov	r1, r3
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f001 fdc1 	bl	8005196 <draw_UV_rectangle_scale>
	draw_UV_lines_scale(buffer, left_channel, right_channel);
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	4619      	mov	r1, r3
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f001 fe0f 	bl	800523e <draw_UV_lines_scale>

	draw_char(buffer, 'L', 2, 23, 10); // powinien być wyświetlany czy to jest lewy front czy prawy front
 8003620:	230a      	movs	r3, #10
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2317      	movs	r3, #23
 8003626:	2202      	movs	r2, #2
 8003628:	214c      	movs	r1, #76	; 0x4c
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff fae4 	bl	8002bf8 <draw_char>
	draw_char(buffer, 'P', 2, 55, 10);
 8003630:	230a      	movs	r3, #10
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2337      	movs	r3, #55	; 0x37
 8003636:	2202      	movs	r2, #2
 8003638:	2150      	movs	r1, #80	; 0x50
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff fadc 	bl	8002bf8 <draw_char>
	send_buffer_to_OLED(buffer, 0, 0);
 8003640:	2200      	movs	r2, #0
 8003642:	2100      	movs	r1, #0
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fba3 	bl	8002d90 <send_buffer_to_OLED>
    }
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	08023798 	.word	0x08023798

08003658 <SSD1322_Screen_OFF>:

void SSD1322_Screen_OFF(uint8_t *const buffer)
    {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af02      	add	r7, sp, #8
 800365e:	6078      	str	r0, [r7, #4]
	select_font(&FreeSerif9pt7b);
 8003660:	480b      	ldr	r0, [pc, #44]	; (8003690 <SSD1322_Screen_OFF+0x38>)
 8003662:	f7ff fab9 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 8003666:	2100      	movs	r1, #0
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff f84d 	bl	8002708 <fill_buffer>
	draw_text(buffer, "Screen_OFF  (:", 5, 32, 5);
 800366e:	2305      	movs	r3, #5
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2320      	movs	r3, #32
 8003674:	2205      	movs	r2, #5
 8003676:	4907      	ldr	r1, [pc, #28]	; (8003694 <SSD1322_Screen_OFF+0x3c>)
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fb55 	bl	8002d28 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fb84 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	0801dc64 	.word	0x0801dc64
 8003694:	08017dc8 	.word	0x08017dc8

08003698 <SSD1322_Screen_GoodBye>:

void SSD1322_Screen_GoodBye(uint8_t *const buffer)
    {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
	//dodać argument z wyświetlanym imieniem użytkownika i pożegnanie do niego
	fill_buffer(buffer, 0);
 80036a0:	2100      	movs	r1, #0
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff f830 	bl	8002708 <fill_buffer>
	select_font(&FreeSerif9pt7b);
 80036a8:	4809      	ldr	r0, [pc, #36]	; (80036d0 <SSD1322_Screen_GoodBye+0x38>)
 80036aa:	f7ff fa95 	bl	8002bd8 <select_font>
	draw_text(buffer, "GoodBye  (:", 5, 32, 5);
 80036ae:	2305      	movs	r3, #5
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	2320      	movs	r3, #32
 80036b4:	2205      	movs	r2, #5
 80036b6:	4907      	ldr	r1, [pc, #28]	; (80036d4 <SSD1322_Screen_GoodBye+0x3c>)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb35 	bl	8002d28 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fb64 	bl	8002d90 <send_buffer_to_OLED>
    }
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	0801dc64 	.word	0x0801dc64
 80036d4:	08017dd8 	.word	0x08017dd8

080036d8 <SSD1322_Screen_SetClock>:

void SSD1322_Screen_SetClock(uint8_t *const buffer)
    {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af02      	add	r7, sp, #8
 80036de:	6078      	str	r0, [r7, #4]
	fill_buffer(buffer, 0);
 80036e0:	2100      	movs	r1, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff f810 	bl	8002708 <fill_buffer>
	select_font(&FreeSerif9pt7b);
 80036e8:	4809      	ldr	r0, [pc, #36]	; (8003710 <SSD1322_Screen_SetClock+0x38>)
 80036ea:	f7ff fa75 	bl	8002bd8 <select_font>
	draw_text(buffer, "SetClock  (:", 5, 32, 5);
 80036ee:	2305      	movs	r3, #5
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2320      	movs	r3, #32
 80036f4:	2205      	movs	r2, #5
 80036f6:	4907      	ldr	r1, [pc, #28]	; (8003714 <SSD1322_Screen_SetClock+0x3c>)
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff fb15 	bl	8002d28 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fb44 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	0801dc64 	.word	0x0801dc64
 8003714:	08017de4 	.word	0x08017de4

08003718 <SSD1322_Screen_SetAlarm>:

void SSD1322_Screen_SetAlarm(uint8_t *const buffer)
    {
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af02      	add	r7, sp, #8
 800371e:	6078      	str	r0, [r7, #4]
	/* Alaways reset display buffer to zero*/
	fill_buffer(buffer, DISPLAY_BLACK);
 8003720:	2100      	movs	r1, #0
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fff0 	bl	8002708 <fill_buffer>
	select_font(&FreeSerifItalic9pt7b);
 8003728:	48a1      	ldr	r0, [pc, #644]	; (80039b0 <SSD1322_Screen_SetAlarm+0x298>)
 800372a:	f7ff fa55 	bl	8002bd8 <select_font>

	/* Checks if display mode is set to preview set alarms or modify them  */
	if (PreviewAlarm == true)
 800372e:	4ba1      	ldr	r3, [pc, #644]	; (80039b4 <SSD1322_Screen_SetAlarm+0x29c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 808c 	beq.w	8003850 <SSD1322_Screen_SetAlarm+0x138>
	    {
		/* Drawing a pointer to selected ALARM.  */
		if(alarm_set_A_or_B == true) 	draw_text(buffer, "--->", 135, 25, 5);
 8003738:	4b9f      	ldr	r3, [pc, #636]	; (80039b8 <SSD1322_Screen_SetAlarm+0x2a0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <SSD1322_Screen_SetAlarm+0x38>
 8003740:	2305      	movs	r3, #5
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2319      	movs	r3, #25
 8003746:	2287      	movs	r2, #135	; 0x87
 8003748:	499c      	ldr	r1, [pc, #624]	; (80039bc <SSD1322_Screen_SetAlarm+0x2a4>)
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff faec 	bl	8002d28 <draw_text>
		if(alarm_set_A_or_B == false) 	draw_text(buffer, "--->", 135, 55, 5);
 8003750:	4b99      	ldr	r3, [pc, #612]	; (80039b8 <SSD1322_Screen_SetAlarm+0x2a0>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	f083 0301 	eor.w	r3, r3, #1
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <SSD1322_Screen_SetAlarm+0x56>
 800375e:	2305      	movs	r3, #5
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2337      	movs	r3, #55	; 0x37
 8003764:	2287      	movs	r2, #135	; 0x87
 8003766:	4995      	ldr	r1, [pc, #596]	; (80039bc <SSD1322_Screen_SetAlarm+0x2a4>)
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fadd 	bl	8002d28 <draw_text>

		/* Drawing filled rectangle if alarm A is SET otherwise just a rectangle */
		if(IS_ALARM_SET_A == false)	draw_rect(buffer, 240, 15, 250, 25, 5);
 800376e:	4b94      	ldr	r3, [pc, #592]	; (80039c0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <SSD1322_Screen_SetAlarm+0x78>
 800377c:	2305      	movs	r3, #5
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	2319      	movs	r3, #25
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	23fa      	movs	r3, #250	; 0xfa
 8003786:	220f      	movs	r2, #15
 8003788:	21f0      	movs	r1, #240	; 0xf0
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff f8e0 	bl	8002950 <draw_rect>
		if(IS_ALARM_SET_A == true)	draw_rect_filled(buffer, 240, 15, 250, 25, 5); //może zmienić na X
 8003790:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d009      	beq.n	80037ac <SSD1322_Screen_SetAlarm+0x94>
 8003798:	2305      	movs	r3, #5
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2319      	movs	r3, #25
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	23fa      	movs	r3, #250	; 0xfa
 80037a2:	220f      	movs	r2, #15
 80037a4:	21f0      	movs	r1, #240	; 0xf0
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff f907 	bl	80029ba <draw_rect_filled>
		//draw_rect	(buffer, x0, y0, x1, y1, 15);

		/* Drawing filled rectangle if alarm B is SET otherwise just a rectangle */
		if(IS_ALARM_SET_B == false)	draw_rect(buffer, 240, 45, 250, 55, 5);
 80037ac:	4b85      	ldr	r3, [pc, #532]	; (80039c4 <SSD1322_Screen_SetAlarm+0x2ac>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f083 0301 	eor.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <SSD1322_Screen_SetAlarm+0xb8>
 80037ba:	2305      	movs	r3, #5
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2337      	movs	r3, #55	; 0x37
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	23fa      	movs	r3, #250	; 0xfa
 80037c4:	222d      	movs	r2, #45	; 0x2d
 80037c6:	21f0      	movs	r1, #240	; 0xf0
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff f8c1 	bl	8002950 <draw_rect>
 80037ce:	e009      	b.n	80037e4 <SSD1322_Screen_SetAlarm+0xcc>
		else 				draw_rect_filled(buffer, 240, 45, 250, 55, 5); //może zmienić na X
 80037d0:	2305      	movs	r3, #5
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2337      	movs	r3, #55	; 0x37
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	23fa      	movs	r3, #250	; 0xfa
 80037da:	222d      	movs	r2, #45	; 0x2d
 80037dc:	21f0      	movs	r1, #240	; 0xf0
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff f8eb 	bl	80029ba <draw_rect_filled>

		/* Drawing a pointer to selected ALARM.  */
		draw_text(buffer, "Alarm A", 172, 25, 5);
 80037e4:	2305      	movs	r3, #5
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2319      	movs	r3, #25
 80037ea:	22ac      	movs	r2, #172	; 0xac
 80037ec:	4976      	ldr	r1, [pc, #472]	; (80039c8 <SSD1322_Screen_SetAlarm+0x2b0>)
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff fa9a 	bl	8002d28 <draw_text>
		draw_text(buffer, "Alarm B", 172, 55, 5);
 80037f4:	2305      	movs	r3, #5
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2337      	movs	r3, #55	; 0x37
 80037fa:	22ac      	movs	r2, #172	; 0xac
 80037fc:	4973      	ldr	r1, [pc, #460]	; (80039cc <SSD1322_Screen_SetAlarm+0x2b4>)
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fa92 	bl	8002d28 <draw_text>

		/* Drawing a pointer to selected ALARM.  */
		select_font(&FreeSerifItalic24pt7b);
 8003804:	4872      	ldr	r0, [pc, #456]	; (80039d0 <SSD1322_Screen_SetAlarm+0x2b8>)
 8003806:	f7ff f9e7 	bl	8002bd8 <select_font>
		ChangeDateToArrayCharTime(ConvertArrayCharTime, Alarm.AlarmTime.Hours, Alarm.AlarmTime.Minutes, 0, 1);
 800380a:	4b72      	ldr	r3, [pc, #456]	; (80039d4 <SSD1322_Screen_SetAlarm+0x2bc>)
 800380c:	7819      	ldrb	r1, [r3, #0]
 800380e:	4b71      	ldr	r3, [pc, #452]	; (80039d4 <SSD1322_Screen_SetAlarm+0x2bc>)
 8003810:	785a      	ldrb	r2, [r3, #1]
 8003812:	2301      	movs	r3, #1
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	486f      	ldr	r0, [pc, #444]	; (80039d8 <SSD1322_Screen_SetAlarm+0x2c0>)
 800381a:	f002 f965 	bl	8005ae8 <ChangeDateToArrayCharTime>
		draw_text(buffer, (char*) ConvertArrayCharTime, 5, 32, 5);
 800381e:	2305      	movs	r3, #5
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2320      	movs	r3, #32
 8003824:	2205      	movs	r2, #5
 8003826:	496c      	ldr	r1, [pc, #432]	; (80039d8 <SSD1322_Screen_SetAlarm+0x2c0>)
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fa7d 	bl	8002d28 <draw_text>

		/* Drawing alarm mode */
		select_font(&FreeSerifItalic9pt7b);
 800382e:	4860      	ldr	r0, [pc, #384]	; (80039b0 <SSD1322_Screen_SetAlarm+0x298>)
 8003830:	f7ff f9d2 	bl	8002bd8 <select_font>
		Set_Alarm_Mode(RTC_typeOfAlarm);
 8003834:	4b69      	ldr	r3, [pc, #420]	; (80039dc <SSD1322_Screen_SetAlarm+0x2c4>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f005 f969 	bl	8008b10 <Set_Alarm_Mode>
		draw_text(buffer, (char*) AlarmMode, 5, 60, 5);
 800383e:	2305      	movs	r3, #5
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	233c      	movs	r3, #60	; 0x3c
 8003844:	2205      	movs	r2, #5
 8003846:	4966      	ldr	r1, [pc, #408]	; (80039e0 <SSD1322_Screen_SetAlarm+0x2c8>)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fa6d 	bl	8002d28 <draw_text>
 800384e:	e0a5      	b.n	800399c <SSD1322_Screen_SetAlarm+0x284>
	    }
	else if(PreviewAlarm == false)
 8003850:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <SSD1322_Screen_SetAlarm+0x29c>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f083 0301 	eor.w	r3, r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 809e 	beq.w	800399c <SSD1322_Screen_SetAlarm+0x284>
	    {
		if((IS_ALARM_SET_A == false) && (IS_ALARM_SET_B == false))
 8003860:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <SSD1322_Screen_SetAlarm+0x2a8>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01a      	beq.n	80038a4 <SSD1322_Screen_SetAlarm+0x18c>
 800386e:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <SSD1322_Screen_SetAlarm+0x2ac>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	f083 0301 	eor.w	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <SSD1322_Screen_SetAlarm+0x18c>
		    {
			select_font(&FreeMonoOblique24pt7b);
 800387c:	4859      	ldr	r0, [pc, #356]	; (80039e4 <SSD1322_Screen_SetAlarm+0x2cc>)
 800387e:	f7ff f9ab 	bl	8002bd8 <select_font>
			draw_text(buffer, "ALARMY", 2, 30, 5);
 8003882:	2305      	movs	r3, #5
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	231e      	movs	r3, #30
 8003888:	2202      	movs	r2, #2
 800388a:	4957      	ldr	r1, [pc, #348]	; (80039e8 <SSD1322_Screen_SetAlarm+0x2d0>)
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fa4b 	bl	8002d28 <draw_text>
			draw_text(buffer, "OFF", 2, 62, 5);
 8003892:	2305      	movs	r3, #5
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	233e      	movs	r3, #62	; 0x3e
 8003898:	2202      	movs	r2, #2
 800389a:	4954      	ldr	r1, [pc, #336]	; (80039ec <SSD1322_Screen_SetAlarm+0x2d4>)
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fa43 	bl	8002d28 <draw_text>
 80038a2:	e07b      	b.n	800399c <SSD1322_Screen_SetAlarm+0x284>
		    }
		else
		    {	//tutaj zmienic czcionkę na ładną
			if (IS_ALARM_SET_A == true)
 80038a4:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <SSD1322_Screen_SetAlarm+0x2a8>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d022      	beq.n	80038f2 <SSD1322_Screen_SetAlarm+0x1da>
			    {
				select_font(&FreeSerif9pt7b);
 80038ac:	4850      	ldr	r0, [pc, #320]	; (80039f0 <SSD1322_Screen_SetAlarm+0x2d8>)
 80038ae:	f7ff f993 	bl	8002bd8 <select_font>
				ChangeDateToArrayCharTime(buffer, Alarm_A.AlarmTime.Hours, Alarm_A.AlarmTime.Minutes, 0, 1);
 80038b2:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <SSD1322_Screen_SetAlarm+0x2dc>)
 80038b4:	7819      	ldrb	r1, [r3, #0]
 80038b6:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <SSD1322_Screen_SetAlarm+0x2dc>)
 80038b8:	785a      	ldrb	r2, [r3, #1]
 80038ba:	2301      	movs	r3, #1
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f002 f911 	bl	8005ae8 <ChangeDateToArrayCharTime>
				draw_text(buffer, (char*)buffer, 2, 30, 5);
 80038c6:	2305      	movs	r3, #5
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	231e      	movs	r3, #30
 80038cc:	2202      	movs	r2, #2
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fa29 	bl	8002d28 <draw_text>
				Set_Alarm_Mode(RTC_typeOfAlarm_A);
 80038d6:	4b48      	ldr	r3, [pc, #288]	; (80039f8 <SSD1322_Screen_SetAlarm+0x2e0>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f005 f918 	bl	8008b10 <Set_Alarm_Mode>
				draw_text(buffer, (char*) AlarmMode, 55, 30, 5);
 80038e0:	2305      	movs	r3, #5
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	231e      	movs	r3, #30
 80038e6:	2237      	movs	r2, #55	; 0x37
 80038e8:	493d      	ldr	r1, [pc, #244]	; (80039e0 <SSD1322_Screen_SetAlarm+0x2c8>)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fa1c 	bl	8002d28 <draw_text>
 80038f0:	e00e      	b.n	8003910 <SSD1322_Screen_SetAlarm+0x1f8>
			    }
			else if(IS_ALARM_SET_A == false)
 80038f2:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <SSD1322_Screen_SetAlarm+0x2a8>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f083 0301 	eor.w	r3, r3, #1
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <SSD1322_Screen_SetAlarm+0x1f8>
			    {
				draw_text(buffer, "OFF", 2, 30, 5);
 8003900:	2305      	movs	r3, #5
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	231e      	movs	r3, #30
 8003906:	2202      	movs	r2, #2
 8003908:	4938      	ldr	r1, [pc, #224]	; (80039ec <SSD1322_Screen_SetAlarm+0x2d4>)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fa0c 	bl	8002d28 <draw_text>
			    }
			if (IS_ALARM_SET_B == true)
 8003910:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <SSD1322_Screen_SetAlarm+0x2ac>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d022      	beq.n	800395e <SSD1322_Screen_SetAlarm+0x246>
			    {
				select_font(&FreeSerif9pt7b);
 8003918:	4835      	ldr	r0, [pc, #212]	; (80039f0 <SSD1322_Screen_SetAlarm+0x2d8>)
 800391a:	f7ff f95d 	bl	8002bd8 <select_font>
				ChangeDateToArrayCharTime(ConvertArrayCharTime, Alarm_B.AlarmTime.Hours, Alarm_B.AlarmTime.Minutes, 0, 1);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <SSD1322_Screen_SetAlarm+0x2e4>)
 8003920:	7819      	ldrb	r1, [r3, #0]
 8003922:	4b36      	ldr	r3, [pc, #216]	; (80039fc <SSD1322_Screen_SetAlarm+0x2e4>)
 8003924:	785a      	ldrb	r2, [r3, #1]
 8003926:	2301      	movs	r3, #1
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	482a      	ldr	r0, [pc, #168]	; (80039d8 <SSD1322_Screen_SetAlarm+0x2c0>)
 800392e:	f002 f8db 	bl	8005ae8 <ChangeDateToArrayCharTime>
				draw_text(buffer, (char*)ConvertArrayCharTime, 2, 60, 5);
 8003932:	2305      	movs	r3, #5
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	233c      	movs	r3, #60	; 0x3c
 8003938:	2202      	movs	r2, #2
 800393a:	4927      	ldr	r1, [pc, #156]	; (80039d8 <SSD1322_Screen_SetAlarm+0x2c0>)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff f9f3 	bl	8002d28 <draw_text>
				Set_Alarm_Mode(RTC_typeOfAlarm_B);
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <SSD1322_Screen_SetAlarm+0x2e8>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f005 f8e2 	bl	8008b10 <Set_Alarm_Mode>
				draw_text(buffer, (char*) AlarmMode, 55, 60, 5);
 800394c:	2305      	movs	r3, #5
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	233c      	movs	r3, #60	; 0x3c
 8003952:	2237      	movs	r2, #55	; 0x37
 8003954:	4922      	ldr	r1, [pc, #136]	; (80039e0 <SSD1322_Screen_SetAlarm+0x2c8>)
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff f9e6 	bl	8002d28 <draw_text>
 800395c:	e00e      	b.n	800397c <SSD1322_Screen_SetAlarm+0x264>
			    }
			else if(IS_ALARM_SET_B == false)
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <SSD1322_Screen_SetAlarm+0x2ac>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f083 0301 	eor.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <SSD1322_Screen_SetAlarm+0x264>
			    {
				draw_text(buffer, "OFF", 2, 60, 5);
 800396c:	2305      	movs	r3, #5
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	233c      	movs	r3, #60	; 0x3c
 8003972:	2202      	movs	r2, #2
 8003974:	491d      	ldr	r1, [pc, #116]	; (80039ec <SSD1322_Screen_SetAlarm+0x2d4>)
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff f9d6 	bl	8002d28 <draw_text>
			    }
			draw_text(buffer, "Alarm A", 190, 30, 5);
 800397c:	2305      	movs	r3, #5
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	231e      	movs	r3, #30
 8003982:	22be      	movs	r2, #190	; 0xbe
 8003984:	4910      	ldr	r1, [pc, #64]	; (80039c8 <SSD1322_Screen_SetAlarm+0x2b0>)
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff f9ce 	bl	8002d28 <draw_text>
			draw_text(buffer, "Alarm B", 190, 60, 5);
 800398c:	2305      	movs	r3, #5
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	233c      	movs	r3, #60	; 0x3c
 8003992:	22be      	movs	r2, #190	; 0xbe
 8003994:	490d      	ldr	r1, [pc, #52]	; (80039cc <SSD1322_Screen_SetAlarm+0x2b4>)
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff f9c6 	bl	8002d28 <draw_text>
		    }
	    }

	send_buffer_to_OLED(buffer, 0, 0);
 800399c:	2200      	movs	r2, #0
 800399e:	2100      	movs	r1, #0
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff f9f5 	bl	8002d90 <send_buffer_to_OLED>
    }
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08023798 	.word	0x08023798
 80039b4:	200000a5 	.word	0x200000a5
 80039b8:	200000a4 	.word	0x200000a4
 80039bc:	08017df4 	.word	0x08017df4
 80039c0:	200002ae 	.word	0x200002ae
 80039c4:	200004f6 	.word	0x200004f6
 80039c8:	08017dfc 	.word	0x08017dfc
 80039cc:	08017e04 	.word	0x08017e04
 80039d0:	08023004 	.word	0x08023004
 80039d4:	2000074c 	.word	0x2000074c
 80039d8:	2000014c 	.word	0x2000014c
 80039dc:	2000050c 	.word	0x2000050c
 80039e0:	2000055c 	.word	0x2000055c
 80039e4:	0801a078 	.word	0x0801a078
 80039e8:	08017e0c 	.word	0x08017e0c
 80039ec:	08017e14 	.word	0x08017e14
 80039f0:	0801dc64 	.word	0x0801dc64
 80039f4:	20000718 	.word	0x20000718
 80039f8:	20000508 	.word	0x20000508
 80039fc:	200077c8 	.word	0x200077c8
 8003a00:	2000050b 	.word	0x2000050b

08003a04 <SSD1322_Screen_Settings>:

void SSD1322_Screen_Settings(uint8_t *const buffer)
    {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	6078      	str	r0, [r7, #4]
	select_font(&FreeMonoOblique9pt7b);
 8003a0c:	482f      	ldr	r0, [pc, #188]	; (8003acc <SSD1322_Screen_Settings+0xc8>)
 8003a0e:	f7ff f8e3 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 8003a12:	2100      	movs	r1, #0
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fe fe77 	bl	8002708 <fill_buffer>

	if (settings_page == PAGE_SETTINGS_1)
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <SSD1322_Screen_Settings+0xcc>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d12e      	bne.n	8003a80 <SSD1322_Screen_Settings+0x7c>
	    {
		draw_text(buffer, "Screen time:", 15, 15, 5);
 8003a22:	2305      	movs	r3, #5
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	230f      	movs	r3, #15
 8003a28:	220f      	movs	r2, #15
 8003a2a:	492a      	ldr	r1, [pc, #168]	; (8003ad4 <SSD1322_Screen_Settings+0xd0>)
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff f97b 	bl	8002d28 <draw_text>
		draw_text(buffer, "Alarm A:", 15, 30, 5);
 8003a32:	2305      	movs	r3, #5
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	231e      	movs	r3, #30
 8003a38:	220f      	movs	r2, #15
 8003a3a:	4927      	ldr	r1, [pc, #156]	; (8003ad8 <SSD1322_Screen_Settings+0xd4>)
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff f973 	bl	8002d28 <draw_text>
		draw_text(buffer, "Alarm B:", 15, 45, 5);
 8003a42:	2305      	movs	r3, #5
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	232d      	movs	r3, #45	; 0x2d
 8003a48:	220f      	movs	r2, #15
 8003a4a:	4924      	ldr	r1, [pc, #144]	; (8003adc <SSD1322_Screen_Settings+0xd8>)
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff f96b 	bl	8002d28 <draw_text>
		draw_text(buffer, "User Name:", 15, 60, 5);
 8003a52:	2305      	movs	r3, #5
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	233c      	movs	r3, #60	; 0x3c
 8003a58:	220f      	movs	r2, #15
 8003a5a:	4921      	ldr	r1, [pc, #132]	; (8003ae0 <SSD1322_Screen_Settings+0xdc>)
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff f963 	bl	8002d28 <draw_text>

		draw_refreshTime(buffer);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f001 fda4 	bl	80055b0 <draw_refreshTime>
		draw_alarmsSource(buffer);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f001 fc97 	bl	800539c <draw_alarmsSource>
		draw_text(buffer, (char *)user_name, 125, 60, 5);
 8003a6e:	2305      	movs	r3, #5
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	233c      	movs	r3, #60	; 0x3c
 8003a74:	227d      	movs	r2, #125	; 0x7d
 8003a76:	491b      	ldr	r1, [pc, #108]	; (8003ae4 <SSD1322_Screen_Settings+0xe0>)
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff f955 	bl	8002d28 <draw_text>
 8003a7e:	e019      	b.n	8003ab4 <SSD1322_Screen_Settings+0xb0>
	    }
	else if(settings_page == PAGE_SETTINGS_2)
 8003a80:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <SSD1322_Screen_Settings+0xcc>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d115      	bne.n	8003ab4 <SSD1322_Screen_Settings+0xb0>
	    {
		draw_text(buffer, "Display mode:", 15, 15, 5);
 8003a88:	2305      	movs	r3, #5
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	230f      	movs	r3, #15
 8003a8e:	220f      	movs	r2, #15
 8003a90:	4915      	ldr	r1, [pc, #84]	; (8003ae8 <SSD1322_Screen_Settings+0xe4>)
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff f948 	bl	8002d28 <draw_text>
		draw_text(buffer, "Power LED:", 15, 30, 5);
 8003a98:	2305      	movs	r3, #5
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	231e      	movs	r3, #30
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	4912      	ldr	r1, [pc, #72]	; (8003aec <SSD1322_Screen_Settings+0xe8>)
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff f940 	bl	8002d28 <draw_text>
		//another case for Instat power off/slow change volume to zero
		draw_powerLED(buffer);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 fdf9 	bl	80056a0 <draw_powerLED>
		draw_displayMode(buffer);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f001 fe56 	bl	8005760 <draw_displayMode>
//		draw_text(buffer, "User Name:", 15, 60, 5);


	    }

	draw_pointer(buffer);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f001 fd1f 	bl	80054f8 <draw_pointer>
	send_buffer_to_OLED(buffer, 0, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2100      	movs	r1, #0
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff f966 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	0801a758 	.word	0x0801a758
 8003ad0:	20000192 	.word	0x20000192
 8003ad4:	08017e18 	.word	0x08017e18
 8003ad8:	08017e28 	.word	0x08017e28
 8003adc:	08017e34 	.word	0x08017e34
 8003ae0:	08017e40 	.word	0x08017e40
 8003ae4:	200004fc 	.word	0x200004fc
 8003ae8:	08017e4c 	.word	0x08017e4c
 8003aec:	08017e5c 	.word	0x08017e5c

08003af0 <SSD1322_Screen_USB>:

void SSD1322_Screen_USB(uint8_t *const buffer)
    {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
	select_font(&FreeSerif9pt7b);
 8003af8:	480b      	ldr	r0, [pc, #44]	; (8003b28 <SSD1322_Screen_USB+0x38>)
 8003afa:	f7ff f86d 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 8003afe:	2100      	movs	r1, #0
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fe fe01 	bl	8002708 <fill_buffer>
	draw_text(buffer, "USB", 5, 32, 5);
 8003b06:	2305      	movs	r3, #5
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	4907      	ldr	r1, [pc, #28]	; (8003b2c <SSD1322_Screen_USB+0x3c>)
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff f909 	bl	8002d28 <draw_text>
	send_buffer_to_OLED(buffer, 0, 0);
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff f938 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	0801dc64 	.word	0x0801dc64
 8003b2c:	08017e68 	.word	0x08017e68

08003b30 <SSD1322_Screen_Time_Bouncing>:

void SSD1322_Screen_Time_Bouncing(uint8_t *const buffer)
    {
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	6078      	str	r0, [r7, #4]
	static uint32_t random_y_from = 20; 	//nubmer beetwen 0...63
	static uint32_t random_x_to = 0; 	//number beetwen 0...254
	static uint32_t random_y_to = 0; 	//nubmer beetwen 0...63
	//static volatile uint8_t bouncing_flag;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4919      	ldr	r1, [pc, #100]	; (8003ba0 <SSD1322_Screen_Time_Bouncing+0x70>)
 8003b3c:	4819      	ldr	r0, [pc, #100]	; (8003ba4 <SSD1322_Screen_Time_Bouncing+0x74>)
 8003b3e:	f00e fead 	bl	801289c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003b42:	2200      	movs	r2, #0
 8003b44:	4918      	ldr	r1, [pc, #96]	; (8003ba8 <SSD1322_Screen_Time_Bouncing+0x78>)
 8003b46:	4817      	ldr	r0, [pc, #92]	; (8003ba4 <SSD1322_Screen_Time_Bouncing+0x74>)
 8003b48:	f00e ff92 	bl	8012a70 <HAL_RTC_GetDate>
	select_font(&FreeSansBold9pt7b);
 8003b4c:	4817      	ldr	r0, [pc, #92]	; (8003bac <SSD1322_Screen_Time_Bouncing+0x7c>)
 8003b4e:	f7ff f843 	bl	8002bd8 <select_font>

	if (get_random_coords(&random_x_to, &random_y_to) == true)
 8003b52:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <SSD1322_Screen_Time_Bouncing+0x80>)
 8003b54:	4817      	ldr	r0, [pc, #92]	; (8003bb4 <SSD1322_Screen_Time_Bouncing+0x84>)
 8003b56:	f002 fa75 	bl	8006044 <get_random_coords>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01a      	beq.n	8003b96 <SSD1322_Screen_Time_Bouncing+0x66>
	    {
		make_array(buffer, random_x_from, random_y_from, random_x_to, random_y_to, 5);
 8003b60:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <SSD1322_Screen_Time_Bouncing+0x88>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	b299      	uxth	r1, r3
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <SSD1322_Screen_Time_Bouncing+0x8c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <SSD1322_Screen_Time_Bouncing+0x84>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	b298      	uxth	r0, r3
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <SSD1322_Screen_Time_Bouncing+0x80>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2405      	movs	r4, #5
 8003b7a:	9401      	str	r4, [sp, #4]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f002 faa5 	bl	80060d0 <make_array>
		random_x_from = random_x_to;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <SSD1322_Screen_Time_Bouncing+0x84>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <SSD1322_Screen_Time_Bouncing+0x88>)
 8003b8c:	6013      	str	r3, [r2, #0]
		random_y_from = random_y_to;
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <SSD1322_Screen_Time_Bouncing+0x80>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <SSD1322_Screen_Time_Bouncing+0x8c>)
 8003b94:	6013      	str	r3, [r2, #0]
	    }
    }
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd90      	pop	{r4, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2000178c 	.word	0x2000178c
 8003ba4:	20007828 	.word	0x20007828
 8003ba8:	200057bc 	.word	0x200057bc
 8003bac:	0801b6b8 	.word	0x0801b6b8
 8003bb0:	200001c0 	.word	0x200001c0
 8003bb4:	200001bc 	.word	0x200001bc
 8003bb8:	200001c4 	.word	0x200001c4
 8003bbc:	20000088 	.word	0x20000088

08003bc0 <SSD1322_Screen_SetInput>:

void SSD1322_Screen_SetInput(uint8_t *const buffer)
    {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	6078      	str	r0, [r7, #4]
	select_font(&FreeSerif9pt7b);
 8003bc8:	4859      	ldr	r0, [pc, #356]	; (8003d30 <SSD1322_Screen_SetInput+0x170>)
 8003bca:	f7ff f805 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fe fd99 	bl	8002708 <fill_buffer>
	draw_text(buffer, "Front input:", 10, 20, 5);
 8003bd6:	2305      	movs	r3, #5
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2314      	movs	r3, #20
 8003bdc:	220a      	movs	r2, #10
 8003bde:	4955      	ldr	r1, [pc, #340]	; (8003d34 <SSD1322_Screen_SetInput+0x174>)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff f8a1 	bl	8002d28 <draw_text>
	draw_text(buffer, "Back  input:", 10, 50, 5);
 8003be6:	2305      	movs	r3, #5
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2332      	movs	r3, #50	; 0x32
 8003bec:	220a      	movs	r2, #10
 8003bee:	4952      	ldr	r1, [pc, #328]	; (8003d38 <SSD1322_Screen_SetInput+0x178>)
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff f899 	bl	8002d28 <draw_text>
	switch (TDA7719_config.set_input_front)
 8003bf6:	4b51      	ldr	r3, [pc, #324]	; (8003d3c <SSD1322_Screen_SetInput+0x17c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d843      	bhi.n	8003c88 <SSD1322_Screen_SetInput+0xc8>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <SSD1322_Screen_SetInput+0x48>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c61 	.word	0x08003c61
 8003c0c:	08003c25 	.word	0x08003c25
 8003c10:	08003c39 	.word	0x08003c39
 8003c14:	08003c89 	.word	0x08003c89
 8003c18:	08003c89 	.word	0x08003c89
 8003c1c:	08003c4d 	.word	0x08003c4d
 8003c20:	08003c75 	.word	0x08003c75
	    {
		case JACK_1:
		    draw_text(buffer, (char *)Jack_1, 100, 20, 5);
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <SSD1322_Screen_SetInput+0x180>)
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	2305      	movs	r3, #5
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2314      	movs	r3, #20
 8003c2e:	2264      	movs	r2, #100	; 0x64
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff f879 	bl	8002d28 <draw_text>
		break;
 8003c36:	e028      	b.n	8003c8a <SSD1322_Screen_SetInput+0xca>
		case JACK_2:
		    draw_text(buffer, (char *)Jack_2, 100, 20, 5);
 8003c38:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <SSD1322_Screen_SetInput+0x184>)
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	2305      	movs	r3, #5
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2314      	movs	r3, #20
 8003c42:	2264      	movs	r2, #100	; 0x64
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff f86f 	bl	8002d28 <draw_text>
		break;
 8003c4a:	e01e      	b.n	8003c8a <SSD1322_Screen_SetInput+0xca>
		case RADIO:
		    draw_text(buffer, (char *)Radio, 100, 20, 5);
 8003c4c:	4b3e      	ldr	r3, [pc, #248]	; (8003d48 <SSD1322_Screen_SetInput+0x188>)
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	2305      	movs	r3, #5
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2314      	movs	r3, #20
 8003c56:	2264      	movs	r2, #100	; 0x64
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff f865 	bl	8002d28 <draw_text>
		break;
 8003c5e:	e014      	b.n	8003c8a <SSD1322_Screen_SetInput+0xca>
		case BLUETOOTH:
		    draw_text(buffer, (char *)Bluetooth, 100, 20, 5);
 8003c60:	4b3a      	ldr	r3, [pc, #232]	; (8003d4c <SSD1322_Screen_SetInput+0x18c>)
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	2305      	movs	r3, #5
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2314      	movs	r3, #20
 8003c6a:	2264      	movs	r2, #100	; 0x64
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff f85b 	bl	8002d28 <draw_text>
		break;
 8003c72:	e00a      	b.n	8003c8a <SSD1322_Screen_SetInput+0xca>
		case MICROPHONE:
		    draw_text(buffer, (char *)Microphone, 100, 20, 5);
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <SSD1322_Screen_SetInput+0x190>)
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	2305      	movs	r3, #5
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2314      	movs	r3, #20
 8003c7e:	2264      	movs	r2, #100	; 0x64
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff f851 	bl	8002d28 <draw_text>
		break;
 8003c86:	e000      	b.n	8003c8a <SSD1322_Screen_SetInput+0xca>
		default:
		break;
 8003c88:	bf00      	nop
	    }

	switch (TDA7719_config.set_input_back)
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <SSD1322_Screen_SetInput+0x17c>)
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d843      	bhi.n	8003d1c <SSD1322_Screen_SetInput+0x15c>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <SSD1322_Screen_SetInput+0xdc>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cf5 	.word	0x08003cf5
 8003ca0:	08003cb9 	.word	0x08003cb9
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003d1d 	.word	0x08003d1d
 8003cac:	08003d1d 	.word	0x08003d1d
 8003cb0:	08003ce1 	.word	0x08003ce1
 8003cb4:	08003d09 	.word	0x08003d09
	    {
		case JACK_1:
		    draw_text(buffer, (char *)Jack_1, 100, 50, 5);
 8003cb8:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <SSD1322_Screen_SetInput+0x180>)
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	2305      	movs	r3, #5
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2332      	movs	r3, #50	; 0x32
 8003cc2:	2264      	movs	r2, #100	; 0x64
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff f82f 	bl	8002d28 <draw_text>
		break;
 8003cca:	e028      	b.n	8003d1e <SSD1322_Screen_SetInput+0x15e>
		case JACK_2:
		    draw_text(buffer, (char *)Jack_2, 100, 50, 5);
 8003ccc:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <SSD1322_Screen_SetInput+0x184>)
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	2305      	movs	r3, #5
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2332      	movs	r3, #50	; 0x32
 8003cd6:	2264      	movs	r2, #100	; 0x64
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff f825 	bl	8002d28 <draw_text>
		break;
 8003cde:	e01e      	b.n	8003d1e <SSD1322_Screen_SetInput+0x15e>
		case RADIO:
		    draw_text(buffer, (char *)Radio, 100, 50, 5);
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <SSD1322_Screen_SetInput+0x188>)
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	2305      	movs	r3, #5
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2332      	movs	r3, #50	; 0x32
 8003cea:	2264      	movs	r2, #100	; 0x64
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff f81b 	bl	8002d28 <draw_text>
		break;
 8003cf2:	e014      	b.n	8003d1e <SSD1322_Screen_SetInput+0x15e>
		case BLUETOOTH:
		    draw_text(buffer, (char *)Bluetooth, 100, 50, 5);
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <SSD1322_Screen_SetInput+0x18c>)
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	2305      	movs	r3, #5
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2332      	movs	r3, #50	; 0x32
 8003cfe:	2264      	movs	r2, #100	; 0x64
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff f811 	bl	8002d28 <draw_text>
		break;
 8003d06:	e00a      	b.n	8003d1e <SSD1322_Screen_SetInput+0x15e>
		case MICROPHONE:
		    draw_text(buffer, (char *)Microphone, 100, 50, 5);
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <SSD1322_Screen_SetInput+0x190>)
 8003d0a:	6819      	ldr	r1, [r3, #0]
 8003d0c:	2305      	movs	r3, #5
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2332      	movs	r3, #50	; 0x32
 8003d12:	2264      	movs	r2, #100	; 0x64
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff f807 	bl	8002d28 <draw_text>
		break;
 8003d1a:	e000      	b.n	8003d1e <SSD1322_Screen_SetInput+0x15e>
		default:
		break;
 8003d1c:	bf00      	nop
	    }
	//TDA7719_config.set_input_front = TDA7719_config.audio_source;

	send_buffer_to_OLED(buffer, 0, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2100      	movs	r1, #0
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff f834 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	0801dc64 	.word	0x0801dc64
 8003d34:	08017e6c 	.word	0x08017e6c
 8003d38:	08017e7c 	.word	0x08017e7c
 8003d3c:	20000544 	.word	0x20000544
 8003d40:	20000050 	.word	0x20000050
 8003d44:	20000054 	.word	0x20000054
 8003d48:	20000058 	.word	0x20000058
 8003d4c:	2000005c 	.word	0x2000005c
 8003d50:	20000060 	.word	0x20000060

08003d54 <SSD1322_Screen_Encoder_Volume_Front>:

void SSD1322_Screen_Encoder_Volume_Front(uint8_t *const buffer)
    {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
	fill_buffer(buffer, 0);
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fe fcd2 	bl	8002708 <fill_buffer>
	select_font(&TomThumb);
 8003d64:	4818      	ldr	r0, [pc, #96]	; (8003dc8 <SSD1322_Screen_Encoder_Volume_Front+0x74>)
 8003d66:	f7fe ff37 	bl	8002bd8 <select_font>
	draw_char(buffer, '0'  , 195, 53, 5);
 8003d6a:	2305      	movs	r3, #5
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2335      	movs	r3, #53	; 0x35
 8003d70:	22c3      	movs	r2, #195	; 0xc3
 8003d72:	2130      	movs	r1, #48	; 0x30
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe ff3f 	bl	8002bf8 <draw_char>
	draw_text(buffer, "-80", 2  , 53, 5);
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2335      	movs	r3, #53	; 0x35
 8003d80:	2202      	movs	r2, #2
 8003d82:	4912      	ldr	r1, [pc, #72]	; (8003dcc <SSD1322_Screen_Encoder_Volume_Front+0x78>)
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fe ffcf 	bl	8002d28 <draw_text>
	draw_text(buffer, "+15", 225, 53, 5);
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2335      	movs	r3, #53	; 0x35
 8003d90:	22e1      	movs	r2, #225	; 0xe1
 8003d92:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <SSD1322_Screen_Encoder_Volume_Front+0x7c>)
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fe ffc7 	bl	8002d28 <draw_text>
	select_font(&FreeSerifItalic9pt7b);
 8003d9a:	480e      	ldr	r0, [pc, #56]	; (8003dd4 <SSD1322_Screen_Encoder_Volume_Front+0x80>)
 8003d9c:	f7fe ff1c 	bl	8002bd8 <select_font>
	draw_text(buffer, "dB", 235, 63, 5);
 8003da0:	2305      	movs	r3, #5
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	233f      	movs	r3, #63	; 0x3f
 8003da6:	22eb      	movs	r2, #235	; 0xeb
 8003da8:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <SSD1322_Screen_Encoder_Volume_Front+0x84>)
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fe ffbc 	bl	8002d28 <draw_text>
	draw_encoder_volume_front_scale(buffer);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fa71 	bl	8004298 <draw_encoder_volume_front_scale>

	send_buffer_to_OLED(buffer, 0, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fe ffe8 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	08023f70 	.word	0x08023f70
 8003dcc:	08017e8c 	.word	0x08017e8c
 8003dd0:	08017e90 	.word	0x08017e90
 8003dd4:	08023798 	.word	0x08023798
 8003dd8:	08017e94 	.word	0x08017e94

08003ddc <SSD1322_Screen_Encoder_Volume_Back>:

void SSD1322_Screen_Encoder_Volume_Back(uint8_t *const buffer)
    {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
	fill_buffer(buffer, 0);
 8003de4:	2100      	movs	r1, #0
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fe fc8e 	bl	8002708 <fill_buffer>
	select_font(&TomThumb);
 8003dec:	4818      	ldr	r0, [pc, #96]	; (8003e50 <SSD1322_Screen_Encoder_Volume_Back+0x74>)
 8003dee:	f7fe fef3 	bl	8002bd8 <select_font>
	draw_char(buffer, '0'  , 195, 53, 5);
 8003df2:	2305      	movs	r3, #5
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2335      	movs	r3, #53	; 0x35
 8003df8:	22c3      	movs	r2, #195	; 0xc3
 8003dfa:	2130      	movs	r1, #48	; 0x30
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7fe fefb 	bl	8002bf8 <draw_char>
	draw_text(buffer, "-80", 2  , 53, 5);
 8003e02:	2305      	movs	r3, #5
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	2335      	movs	r3, #53	; 0x35
 8003e08:	2202      	movs	r2, #2
 8003e0a:	4912      	ldr	r1, [pc, #72]	; (8003e54 <SSD1322_Screen_Encoder_Volume_Back+0x78>)
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7fe ff8b 	bl	8002d28 <draw_text>
	draw_text(buffer, "+15", 225, 53, 5);
 8003e12:	2305      	movs	r3, #5
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2335      	movs	r3, #53	; 0x35
 8003e18:	22e1      	movs	r2, #225	; 0xe1
 8003e1a:	490f      	ldr	r1, [pc, #60]	; (8003e58 <SSD1322_Screen_Encoder_Volume_Back+0x7c>)
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fe ff83 	bl	8002d28 <draw_text>
	select_font(&FreeSerifItalic9pt7b);
 8003e22:	480e      	ldr	r0, [pc, #56]	; (8003e5c <SSD1322_Screen_Encoder_Volume_Back+0x80>)
 8003e24:	f7fe fed8 	bl	8002bd8 <select_font>
	draw_text(buffer, "dB", 235, 63, 5);
 8003e28:	2305      	movs	r3, #5
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	233f      	movs	r3, #63	; 0x3f
 8003e2e:	22eb      	movs	r2, #235	; 0xeb
 8003e30:	490b      	ldr	r1, [pc, #44]	; (8003e60 <SSD1322_Screen_Encoder_Volume_Back+0x84>)
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe ff78 	bl	8002d28 <draw_text>
	draw_encoder_volume_back_scale(buffer);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fc61 	bl	8004700 <draw_encoder_volume_back_scale>

	send_buffer_to_OLED(buffer, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fe ffa4 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	08023f70 	.word	0x08023f70
 8003e54:	08017e8c 	.word	0x08017e8c
 8003e58:	08017e90 	.word	0x08017e90
 8003e5c:	08023798 	.word	0x08023798
 8003e60:	08017e94 	.word	0x08017e94

08003e64 <SSD1322_Screen_Encoder_Loudness>:

void SSD1322_Screen_Encoder_Loudness(uint8_t *const buffer)
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 10; ++i)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e006      	b.n	8003e80 <SSD1322_Screen_Encoder_Loudness+0x1c>
	    {
		display_gain_tab[i] = 0;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <SSD1322_Screen_Encoder_Loudness+0x80>)
 8003e76:	2100      	movs	r1, #0
 8003e78:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	2b09      	cmp	r3, #9
 8003e84:	d9f5      	bls.n	8003e72 <SSD1322_Screen_Encoder_Loudness+0xe>
	    }

	select_font(&FreeSerif9pt7b);
 8003e86:	4818      	ldr	r0, [pc, #96]	; (8003ee8 <SSD1322_Screen_Encoder_Loudness+0x84>)
 8003e88:	f7fe fea6 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe fc3a 	bl	8002708 <fill_buffer>
	draw_text(buffer, "LOUDNESS", 70, 15, 5);
 8003e94:	2305      	movs	r3, #5
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	230f      	movs	r3, #15
 8003e9a:	2246      	movs	r2, #70	; 0x46
 8003e9c:	4913      	ldr	r1, [pc, #76]	; (8003eec <SSD1322_Screen_Encoder_Loudness+0x88>)
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe ff42 	bl	8002d28 <draw_text>
	select_font(&FreeSans9pt7b);
 8003ea4:	4812      	ldr	r0, [pc, #72]	; (8003ef0 <SSD1322_Screen_Encoder_Loudness+0x8c>)
 8003ea6:	f7fe fe97 	bl	8002bd8 <select_font>
	draw_text(buffer, "Mid freq:", 25, 40, 5);
 8003eaa:	2305      	movs	r3, #5
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2328      	movs	r3, #40	; 0x28
 8003eb0:	2219      	movs	r2, #25
 8003eb2:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <SSD1322_Screen_Encoder_Loudness+0x90>)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7fe ff37 	bl	8002d28 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 8003eba:	2305      	movs	r3, #5
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	233f      	movs	r3, #63	; 0x3f
 8003ec0:	2232      	movs	r2, #50	; 0x32
 8003ec2:	490d      	ldr	r1, [pc, #52]	; (8003ef8 <SSD1322_Screen_Encoder_Loudness+0x94>)
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7fe ff2f 	bl	8002d28 <draw_text>
	draw_gain_and_freq_loudness(buffer);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fdd0 	bl	8004a70 <draw_gain_and_freq_loudness>

	send_buffer_to_OLED(buffer, 0, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fe ff5b 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000188 	.word	0x20000188
 8003ee8:	0801dc64 	.word	0x0801dc64
 8003eec:	08017e98 	.word	0x08017e98
 8003ef0:	0801aee0 	.word	0x0801aee0
 8003ef4:	08017ea4 	.word	0x08017ea4
 8003ef8:	08017eb0 	.word	0x08017eb0

08003efc <SSD1322_Screen_Encoder_Treble>:

void SSD1322_Screen_Encoder_Treble(uint8_t *const buffer)
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 10; ++i)
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e006      	b.n	8003f18 <SSD1322_Screen_Encoder_Treble+0x1c>
	    {
		display_gain_tab[i] = 0;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	4a3d      	ldr	r2, [pc, #244]	; (8004004 <SSD1322_Screen_Encoder_Treble+0x108>)
 8003f0e:	2100      	movs	r1, #0
 8003f10:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	3301      	adds	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b09      	cmp	r3, #9
 8003f1c:	d9f5      	bls.n	8003f0a <SSD1322_Screen_Encoder_Treble+0xe>
	    }

	select_font(&FreeSerif9pt7b);	//niby można wyświetlać wykres
 8003f1e:	483a      	ldr	r0, [pc, #232]	; (8004008 <SSD1322_Screen_Encoder_Treble+0x10c>)
 8003f20:	f7fe fe5a 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 8003f24:	2100      	movs	r1, #0
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe fbee 	bl	8002708 <fill_buffer>
	draw_text(buffer, "TREBLE", 70, 15, 5);
 8003f2c:	2305      	movs	r3, #5
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	230f      	movs	r3, #15
 8003f32:	2246      	movs	r2, #70	; 0x46
 8003f34:	4935      	ldr	r1, [pc, #212]	; (800400c <SSD1322_Screen_Encoder_Treble+0x110>)
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fe fef6 	bl	8002d28 <draw_text>
	select_font(&FreeSans9pt7b);
 8003f3c:	4834      	ldr	r0, [pc, #208]	; (8004010 <SSD1322_Screen_Encoder_Treble+0x114>)
 8003f3e:	f7fe fe4b 	bl	8002bd8 <select_font>
	draw_text(buffer, "Mid freq:", 25, 40, 5);
 8003f42:	2305      	movs	r3, #5
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	2328      	movs	r3, #40	; 0x28
 8003f48:	2219      	movs	r2, #25
 8003f4a:	4932      	ldr	r1, [pc, #200]	; (8004014 <SSD1322_Screen_Encoder_Treble+0x118>)
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fe feeb 	bl	8002d28 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 8003f52:	2305      	movs	r3, #5
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	233f      	movs	r3, #63	; 0x3f
 8003f58:	2232      	movs	r2, #50	; 0x32
 8003f5a:	492f      	ldr	r1, [pc, #188]	; (8004018 <SSD1322_Screen_Encoder_Treble+0x11c>)
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fe fee3 	bl	8002d28 <draw_text>
	draw_gain_and_freq(encoderFilterTreble.gain - 16);
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <SSD1322_Screen_Encoder_Treble+0x120>)
 8003f64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	3b10      	subs	r3, #16
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fe1b 	bl	8004bac <draw_gain_and_freq>
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 8003f76:	2305      	movs	r3, #5
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	233f      	movs	r3, #63	; 0x3f
 8003f7c:	2264      	movs	r2, #100	; 0x64
 8003f7e:	4921      	ldr	r1, [pc, #132]	; (8004004 <SSD1322_Screen_Encoder_Treble+0x108>)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe fed1 	bl	8002d28 <draw_text>

	switch (encoderFilterTreble.centerFreq)
 8003f86:	4b25      	ldr	r3, [pc, #148]	; (800401c <SSD1322_Screen_Encoder_Treble+0x120>)
 8003f88:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d82f      	bhi.n	8003ff0 <SSD1322_Screen_Encoder_Treble+0xf4>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <SSD1322_Screen_Encoder_Treble+0x9c>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fbb 	.word	0x08003fbb
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fdf 	.word	0x08003fdf
	    {
		case 0:		//00 - flat
		    draw_text(buffer, "10 kHz", 100, 40, 5);
 8003fa8:	2305      	movs	r3, #5
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2328      	movs	r3, #40	; 0x28
 8003fae:	2264      	movs	r2, #100	; 0x64
 8003fb0:	491b      	ldr	r1, [pc, #108]	; (8004020 <SSD1322_Screen_Encoder_Treble+0x124>)
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe feb8 	bl	8002d28 <draw_text>
		break;
 8003fb8:	e01b      	b.n	8003ff2 <SSD1322_Screen_Encoder_Treble+0xf6>
		case 1:		//01  - 400 Hz
		    draw_text(buffer, "12,5 kHz", 100, 40, 5);
 8003fba:	2305      	movs	r3, #5
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2328      	movs	r3, #40	; 0x28
 8003fc0:	2264      	movs	r2, #100	; 0x64
 8003fc2:	4918      	ldr	r1, [pc, #96]	; (8004024 <SSD1322_Screen_Encoder_Treble+0x128>)
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7fe feaf 	bl	8002d28 <draw_text>
		break;
 8003fca:	e012      	b.n	8003ff2 <SSD1322_Screen_Encoder_Treble+0xf6>
		case 2:		//10  - 800 Hz
		    draw_text(buffer, "15 kHz", 100, 40, 5);
 8003fcc:	2305      	movs	r3, #5
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2328      	movs	r3, #40	; 0x28
 8003fd2:	2264      	movs	r2, #100	; 0x64
 8003fd4:	4914      	ldr	r1, [pc, #80]	; (8004028 <SSD1322_Screen_Encoder_Treble+0x12c>)
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fe fea6 	bl	8002d28 <draw_text>
		break;
 8003fdc:	e009      	b.n	8003ff2 <SSD1322_Screen_Encoder_Treble+0xf6>
		case 3:		//11  - 2400 Hz
		    draw_text(buffer, "17.5 kHz", 100, 40, 5);
 8003fde:	2305      	movs	r3, #5
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2328      	movs	r3, #40	; 0x28
 8003fe4:	2264      	movs	r2, #100	; 0x64
 8003fe6:	4911      	ldr	r1, [pc, #68]	; (800402c <SSD1322_Screen_Encoder_Treble+0x130>)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fe fe9d 	bl	8002d28 <draw_text>
		break;
 8003fee:	e000      	b.n	8003ff2 <SSD1322_Screen_Encoder_Treble+0xf6>
		default:
		break;
 8003ff0:	bf00      	nop
	    }
	send_buffer_to_OLED(buffer, 0, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fe feca 	bl	8002d90 <send_buffer_to_OLED>
    }
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20000188 	.word	0x20000188
 8004008:	0801dc64 	.word	0x0801dc64
 800400c:	08017eb8 	.word	0x08017eb8
 8004010:	0801aee0 	.word	0x0801aee0
 8004014:	08017ea4 	.word	0x08017ea4
 8004018:	08017eb0 	.word	0x08017eb0
 800401c:	2000052c 	.word	0x2000052c
 8004020:	08017ec0 	.word	0x08017ec0
 8004024:	08017ec8 	.word	0x08017ec8
 8004028:	08017ed4 	.word	0x08017ed4
 800402c:	08017edc 	.word	0x08017edc

08004030 <SSD1322_Screen_Encoder_Middle>:

void SSD1322_Screen_Encoder_Middle(uint8_t *const buffer)
    {
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 10; ++i)
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e006      	b.n	800404c <SSD1322_Screen_Encoder_Middle+0x1c>
	    {
		display_gain_tab[i] = 0;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	4a3d      	ldr	r2, [pc, #244]	; (8004138 <SSD1322_Screen_Encoder_Middle+0x108>)
 8004042:	2100      	movs	r1, #0
 8004044:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 8004046:	7bfb      	ldrb	r3, [r7, #15]
 8004048:	3301      	adds	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b09      	cmp	r3, #9
 8004050:	d9f5      	bls.n	800403e <SSD1322_Screen_Encoder_Middle+0xe>
	    }

	select_font(&FreeSerif9pt7b);	//niby można wyświetlać wykres
 8004052:	483a      	ldr	r0, [pc, #232]	; (800413c <SSD1322_Screen_Encoder_Middle+0x10c>)
 8004054:	f7fe fdc0 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 8004058:	2100      	movs	r1, #0
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fe fb54 	bl	8002708 <fill_buffer>
	draw_text(buffer, "MIDDLE", 70, 15, 5);
 8004060:	2305      	movs	r3, #5
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	230f      	movs	r3, #15
 8004066:	2246      	movs	r2, #70	; 0x46
 8004068:	4935      	ldr	r1, [pc, #212]	; (8004140 <SSD1322_Screen_Encoder_Middle+0x110>)
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe fe5c 	bl	8002d28 <draw_text>
	select_font(&FreeSans9pt7b);
 8004070:	4834      	ldr	r0, [pc, #208]	; (8004144 <SSD1322_Screen_Encoder_Middle+0x114>)
 8004072:	f7fe fdb1 	bl	8002bd8 <select_font>
	draw_text(buffer, "Q fact:", 25, 40, 5);
 8004076:	2305      	movs	r3, #5
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2328      	movs	r3, #40	; 0x28
 800407c:	2219      	movs	r2, #25
 800407e:	4932      	ldr	r1, [pc, #200]	; (8004148 <SSD1322_Screen_Encoder_Middle+0x118>)
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fe fe51 	bl	8002d28 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 8004086:	2305      	movs	r3, #5
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	233f      	movs	r3, #63	; 0x3f
 800408c:	2232      	movs	r2, #50	; 0x32
 800408e:	492f      	ldr	r1, [pc, #188]	; (800414c <SSD1322_Screen_Encoder_Middle+0x11c>)
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fe fe49 	bl	8002d28 <draw_text>
	draw_gain_and_freq(encoderFilterMiddle.gain - 16);
 8004096:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <SSD1322_Screen_Encoder_Middle+0x120>)
 8004098:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	3b10      	subs	r3, #16
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fd81 	bl	8004bac <draw_gain_and_freq>
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 80040aa:	2305      	movs	r3, #5
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	233f      	movs	r3, #63	; 0x3f
 80040b0:	2264      	movs	r2, #100	; 0x64
 80040b2:	4921      	ldr	r1, [pc, #132]	; (8004138 <SSD1322_Screen_Encoder_Middle+0x108>)
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fe fe37 	bl	8002d28 <draw_text>

	switch (encoderFilterMiddle.centerFreq)
 80040ba:	4b25      	ldr	r3, [pc, #148]	; (8004150 <SSD1322_Screen_Encoder_Middle+0x120>)
 80040bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d82f      	bhi.n	8004124 <SSD1322_Screen_Encoder_Middle+0xf4>
 80040c4:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <SSD1322_Screen_Encoder_Middle+0x9c>)
 80040c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ca:	bf00      	nop
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040ef 	.word	0x080040ef
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004113 	.word	0x08004113
	    {
		case 0:
		    draw_text(buffer, "0.5", 100, 40, 5);
 80040dc:	2305      	movs	r3, #5
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2328      	movs	r3, #40	; 0x28
 80040e2:	2264      	movs	r2, #100	; 0x64
 80040e4:	491b      	ldr	r1, [pc, #108]	; (8004154 <SSD1322_Screen_Encoder_Middle+0x124>)
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe fe1e 	bl	8002d28 <draw_text>
		break;
 80040ec:	e01b      	b.n	8004126 <SSD1322_Screen_Encoder_Middle+0xf6>
		case 1:
		    draw_text(buffer, "0.75", 100, 40, 5);
 80040ee:	2305      	movs	r3, #5
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2328      	movs	r3, #40	; 0x28
 80040f4:	2264      	movs	r2, #100	; 0x64
 80040f6:	4918      	ldr	r1, [pc, #96]	; (8004158 <SSD1322_Screen_Encoder_Middle+0x128>)
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fe fe15 	bl	8002d28 <draw_text>
		break;
 80040fe:	e012      	b.n	8004126 <SSD1322_Screen_Encoder_Middle+0xf6>
		case 2:
		    draw_text(buffer, "1", 100, 40, 5);
 8004100:	2305      	movs	r3, #5
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2328      	movs	r3, #40	; 0x28
 8004106:	2264      	movs	r2, #100	; 0x64
 8004108:	4914      	ldr	r1, [pc, #80]	; (800415c <SSD1322_Screen_Encoder_Middle+0x12c>)
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fe fe0c 	bl	8002d28 <draw_text>
		break;
 8004110:	e009      	b.n	8004126 <SSD1322_Screen_Encoder_Middle+0xf6>
		case 3:
		    draw_text(buffer, "1.25", 100, 40, 5);
 8004112:	2305      	movs	r3, #5
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	2328      	movs	r3, #40	; 0x28
 8004118:	2264      	movs	r2, #100	; 0x64
 800411a:	4911      	ldr	r1, [pc, #68]	; (8004160 <SSD1322_Screen_Encoder_Middle+0x130>)
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fe fe03 	bl	8002d28 <draw_text>
		break;
 8004122:	e000      	b.n	8004126 <SSD1322_Screen_Encoder_Middle+0xf6>
		default:
		break;
 8004124:	bf00      	nop
	    }
	send_buffer_to_OLED(buffer, 0, 0);
 8004126:	2200      	movs	r2, #0
 8004128:	2100      	movs	r1, #0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe fe30 	bl	8002d90 <send_buffer_to_OLED>
    }
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000188 	.word	0x20000188
 800413c:	0801dc64 	.word	0x0801dc64
 8004140:	08017ee8 	.word	0x08017ee8
 8004144:	0801aee0 	.word	0x0801aee0
 8004148:	08017ef0 	.word	0x08017ef0
 800414c:	08017eb0 	.word	0x08017eb0
 8004150:	20000510 	.word	0x20000510
 8004154:	08017ef8 	.word	0x08017ef8
 8004158:	08017efc 	.word	0x08017efc
 800415c:	08017d20 	.word	0x08017d20
 8004160:	08017f04 	.word	0x08017f04

08004164 <SSD1322_Screen_Encoder_Bass>:

void SSD1322_Screen_Encoder_Bass(uint8_t *const buffer)
    {
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]

	for (uint8_t i = 0; i < 10; ++i)
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e006      	b.n	8004180 <SSD1322_Screen_Encoder_Bass+0x1c>
	    {
		display_gain_tab[i] = 0;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	4a3d      	ldr	r2, [pc, #244]	; (800426c <SSD1322_Screen_Encoder_Bass+0x108>)
 8004176:	2100      	movs	r1, #0
 8004178:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 10; ++i)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	3301      	adds	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b09      	cmp	r3, #9
 8004184:	d9f5      	bls.n	8004172 <SSD1322_Screen_Encoder_Bass+0xe>
	    }

	select_font(&FreeSerif9pt7b);	//niby można wyświetlać wykres
 8004186:	483a      	ldr	r0, [pc, #232]	; (8004270 <SSD1322_Screen_Encoder_Bass+0x10c>)
 8004188:	f7fe fd26 	bl	8002bd8 <select_font>
	fill_buffer(buffer, 0);
 800418c:	2100      	movs	r1, #0
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fe faba 	bl	8002708 <fill_buffer>
	draw_text(buffer, "BASS", 70, 15, 5);
 8004194:	2305      	movs	r3, #5
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	230f      	movs	r3, #15
 800419a:	2246      	movs	r2, #70	; 0x46
 800419c:	4935      	ldr	r1, [pc, #212]	; (8004274 <SSD1322_Screen_Encoder_Bass+0x110>)
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fe fdc2 	bl	8002d28 <draw_text>
	select_font(&FreeSans9pt7b);
 80041a4:	4834      	ldr	r0, [pc, #208]	; (8004278 <SSD1322_Screen_Encoder_Bass+0x114>)
 80041a6:	f7fe fd17 	bl	8002bd8 <select_font>
	draw_text(buffer, "Q fact:", 25, 40, 5);
 80041aa:	2305      	movs	r3, #5
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2328      	movs	r3, #40	; 0x28
 80041b0:	2219      	movs	r2, #25
 80041b2:	4932      	ldr	r1, [pc, #200]	; (800427c <SSD1322_Screen_Encoder_Bass+0x118>)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fe fdb7 	bl	8002d28 <draw_text>
	draw_text(buffer, "Gain:", 50, 63, 5);
 80041ba:	2305      	movs	r3, #5
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	233f      	movs	r3, #63	; 0x3f
 80041c0:	2232      	movs	r2, #50	; 0x32
 80041c2:	492f      	ldr	r1, [pc, #188]	; (8004280 <SSD1322_Screen_Encoder_Bass+0x11c>)
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fe fdaf 	bl	8002d28 <draw_text>
	draw_gain_and_freq(encoderFilterBass.gain - 16);
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <SSD1322_Screen_Encoder_Bass+0x120>)
 80041cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	3b10      	subs	r3, #16
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fce7 	bl	8004bac <draw_gain_and_freq>
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 80041de:	2305      	movs	r3, #5
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	233f      	movs	r3, #63	; 0x3f
 80041e4:	2264      	movs	r2, #100	; 0x64
 80041e6:	4921      	ldr	r1, [pc, #132]	; (800426c <SSD1322_Screen_Encoder_Bass+0x108>)
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fe fd9d 	bl	8002d28 <draw_text>

	switch (encoderFilterBass.centerFreq)
 80041ee:	4b25      	ldr	r3, [pc, #148]	; (8004284 <SSD1322_Screen_Encoder_Bass+0x120>)
 80041f0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d82f      	bhi.n	8004258 <SSD1322_Screen_Encoder_Bass+0xf4>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <SSD1322_Screen_Encoder_Bass+0x9c>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004211 	.word	0x08004211
 8004204:	08004223 	.word	0x08004223
 8004208:	08004235 	.word	0x08004235
 800420c:	08004247 	.word	0x08004247
	    {
		case 0:
		    draw_text(buffer, "1.0", 100, 40, 5);
 8004210:	2305      	movs	r3, #5
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2328      	movs	r3, #40	; 0x28
 8004216:	2264      	movs	r2, #100	; 0x64
 8004218:	491b      	ldr	r1, [pc, #108]	; (8004288 <SSD1322_Screen_Encoder_Bass+0x124>)
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fe fd84 	bl	8002d28 <draw_text>
		break;
 8004220:	e01b      	b.n	800425a <SSD1322_Screen_Encoder_Bass+0xf6>
		case 1:
		    draw_text(buffer, "1.25", 100, 40, 5);
 8004222:	2305      	movs	r3, #5
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2328      	movs	r3, #40	; 0x28
 8004228:	2264      	movs	r2, #100	; 0x64
 800422a:	4918      	ldr	r1, [pc, #96]	; (800428c <SSD1322_Screen_Encoder_Bass+0x128>)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fe fd7b 	bl	8002d28 <draw_text>
		break;
 8004232:	e012      	b.n	800425a <SSD1322_Screen_Encoder_Bass+0xf6>
		case 2:
		    draw_text(buffer, "1.5", 100, 40, 5);
 8004234:	2305      	movs	r3, #5
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2328      	movs	r3, #40	; 0x28
 800423a:	2264      	movs	r2, #100	; 0x64
 800423c:	4914      	ldr	r1, [pc, #80]	; (8004290 <SSD1322_Screen_Encoder_Bass+0x12c>)
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fe fd72 	bl	8002d28 <draw_text>
		break;
 8004244:	e009      	b.n	800425a <SSD1322_Screen_Encoder_Bass+0xf6>
		case 3:
		    draw_text(buffer, "2.0", 100, 40, 5);
 8004246:	2305      	movs	r3, #5
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	2328      	movs	r3, #40	; 0x28
 800424c:	2264      	movs	r2, #100	; 0x64
 800424e:	4911      	ldr	r1, [pc, #68]	; (8004294 <SSD1322_Screen_Encoder_Bass+0x130>)
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe fd69 	bl	8002d28 <draw_text>
		break;
 8004256:	e000      	b.n	800425a <SSD1322_Screen_Encoder_Bass+0xf6>
		default:
		break;
 8004258:	bf00      	nop
	    }
	send_buffer_to_OLED(buffer, 0, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fe fd96 	bl	8002d90 <send_buffer_to_OLED>
    }
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000188 	.word	0x20000188
 8004270:	0801dc64 	.word	0x0801dc64
 8004274:	08017f0c 	.word	0x08017f0c
 8004278:	0801aee0 	.word	0x0801aee0
 800427c:	08017ef0 	.word	0x08017ef0
 8004280:	08017eb0 	.word	0x08017eb0
 8004284:	20000534 	.word	0x20000534
 8004288:	08017f14 	.word	0x08017f14
 800428c:	08017f04 	.word	0x08017f04
 8004290:	08017f18 	.word	0x08017f18
 8004294:	08017f1c 	.word	0x08017f1c

08004298 <draw_encoder_volume_front_scale>:
//--------------------------------------------------------------
// Some random things to draw
//--------------------------------------------------------------

void draw_encoder_volume_front_scale(uint8_t *const buffer)
    {
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af02      	add	r7, sp, #8
 800429e:	6078      	str	r0, [r7, #4]
	static uint16_t Volume1;
	static uint16_t Volume2;
	static uint16_t Volume3;
	static uint8_t i;

	switch (encoderVolFront.audioOutputState)
 80042a0:	4ba5      	ldr	r3, [pc, #660]	; (8004538 <draw_encoder_volume_front_scale+0x2a0>)
 80042a2:	799b      	ldrb	r3, [r3, #6]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	f200 8217 	bhi.w	80046d8 <draw_encoder_volume_front_scale+0x440>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <draw_encoder_volume_front_scale+0x18>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	0800450b 	.word	0x0800450b
 80042b8:	080043a7 	.word	0x080043a7
 80042bc:	08004463 	.word	0x08004463
 80042c0:	080046d9 	.word	0x080046d9
 80042c4:	0800459d 	.word	0x0800459d
 80042c8:	0800463b 	.word	0x0800463b
	    {
	    case MASTER:
		Volume = map(encoderVolFront.volumeMaster, 0, 94, 5, 230);
 80042cc:	4b9a      	ldr	r3, [pc, #616]	; (8004538 <draw_encoder_volume_front_scale+0x2a0>)
 80042ce:	f993 3000 	ldrsb.w	r3, [r3]
 80042d2:	4618      	mov	r0, r3
 80042d4:	23e6      	movs	r3, #230	; 0xe6
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2305      	movs	r3, #5
 80042da:	225e      	movs	r2, #94	; 0x5e
 80042dc:	2100      	movs	r1, #0
 80042de:	f005 fec9 	bl	800a074 <map>
 80042e2:	4603      	mov	r3, r0
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	4b95      	ldr	r3, [pc, #596]	; (800453c <draw_encoder_volume_front_scale+0x2a4>)
 80042e8:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume Master", 70, 15, 5);
 80042ea:	2305      	movs	r3, #5
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	230f      	movs	r3, #15
 80042f0:	2246      	movs	r2, #70	; 0x46
 80042f2:	4993      	ldr	r1, [pc, #588]	; (8004540 <draw_encoder_volume_front_scale+0x2a8>)
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7fe fd17 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume, 62, 5);
 80042fa:	4b90      	ldr	r3, [pc, #576]	; (800453c <draw_encoder_volume_front_scale+0x2a4>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	2205      	movs	r2, #5
 8004300:	9201      	str	r2, [sp, #4]
 8004302:	223e      	movs	r2, #62	; 0x3e
 8004304:	9200      	str	r2, [sp, #0]
 8004306:	2238      	movs	r2, #56	; 0x38
 8004308:	2105      	movs	r1, #5
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe fb55 	bl	80029ba <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 8004310:	2214      	movs	r2, #20
 8004312:	2103      	movs	r1, #3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fdf6 	bl	8004f06 <draw_speaker_left>
		draw_speaker_right(buffer, 243, 20);
 800431a:	2214      	movs	r2, #20
 800431c:	21f3      	movs	r1, #243	; 0xf3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fe91 	bl	8005046 <draw_speaker_right>
		draw_speaker_left(buffer, 10, 43);
 8004324:	222b      	movs	r2, #43	; 0x2b
 8004326:	210a      	movs	r1, #10
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fdec 	bl	8004f06 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 800432e:	222b      	movs	r2, #43	; 0x2b
 8004330:	21ec      	movs	r1, #236	; 0xec
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fe87 	bl	8005046 <draw_speaker_right>
		draw_nutka1(buffer, 21, 10);
 8004338:	220a      	movs	r2, #10
 800433a:	2115      	movs	r1, #21
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fcc5 	bl	8004ccc <draw_nutka1>
//		draw_nutka3(buffer, 26, 18);
		draw_nutka2(buffer, 31, 8);
 8004342:	2208      	movs	r2, #8
 8004344:	211f      	movs	r1, #31
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fd20 	bl	8004d8c <draw_nutka2>
		draw_nutka4(buffer, 32, 25);
 800434c:	2219      	movs	r2, #25
 800434e:	2120      	movs	r1, #32
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fd5c 	bl	8004e0e <draw_nutka4>
		for ( i = Volume; i < 230; i++)
 8004356:	4b79      	ldr	r3, [pc, #484]	; (800453c <draw_encoder_volume_front_scale+0x2a4>)
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	4b79      	ldr	r3, [pc, #484]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e01c      	b.n	800439c <draw_encoder_volume_front_scale+0x104>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004362:	4b78      	ldr	r3, [pc, #480]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	4b78      	ldr	r3, [pc, #480]	; (8004548 <draw_encoder_volume_front_scale+0x2b0>)
 8004368:	fba3 1302 	umull	r1, r3, r3, r2
 800436c:	0899      	lsrs	r1, r3, #2
 800436e:	460b      	mov	r3, r1
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <draw_encoder_volume_front_scale+0xf8>
 800437c:	4b71      	ldr	r3, [pc, #452]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b299      	uxth	r1, r3
 8004382:	2303      	movs	r3, #3
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	233e      	movs	r3, #62	; 0x3e
 8004388:	2238      	movs	r2, #56	; 0x38
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fe fa68 	bl	8002860 <draw_vline>
		for ( i = Volume; i < 230; i++)
 8004390:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	4b69      	ldr	r3, [pc, #420]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2be5      	cmp	r3, #229	; 0xe5
 80043a2:	d9de      	bls.n	8004362 <draw_encoder_volume_front_scale+0xca>
		    }
		break;
 80043a4:	e199      	b.n	80046da <draw_encoder_volume_front_scale+0x442>
	    case MASTER_V2:
		Volume = map(encoderVolFront.volumeMaster, 0, 94, 5, 230);
 80043a6:	4b64      	ldr	r3, [pc, #400]	; (8004538 <draw_encoder_volume_front_scale+0x2a0>)
 80043a8:	f993 3000 	ldrsb.w	r3, [r3]
 80043ac:	4618      	mov	r0, r3
 80043ae:	23e6      	movs	r3, #230	; 0xe6
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2305      	movs	r3, #5
 80043b4:	225e      	movs	r2, #94	; 0x5e
 80043b6:	2100      	movs	r1, #0
 80043b8:	f005 fe5c 	bl	800a074 <map>
 80043bc:	4603      	mov	r3, r0
 80043be:	b29a      	uxth	r2, r3
 80043c0:	4b5e      	ldr	r3, [pc, #376]	; (800453c <draw_encoder_volume_front_scale+0x2a4>)
 80043c2:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume Master", 70, 15, 5);
 80043c4:	2305      	movs	r3, #5
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	230f      	movs	r3, #15
 80043ca:	2246      	movs	r2, #70	; 0x46
 80043cc:	495c      	ldr	r1, [pc, #368]	; (8004540 <draw_encoder_volume_front_scale+0x2a8>)
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fe fcaa 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume, 62, 5);
 80043d4:	4b59      	ldr	r3, [pc, #356]	; (800453c <draw_encoder_volume_front_scale+0x2a4>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	2205      	movs	r2, #5
 80043da:	9201      	str	r2, [sp, #4]
 80043dc:	223e      	movs	r2, #62	; 0x3e
 80043de:	9200      	str	r2, [sp, #0]
 80043e0:	2238      	movs	r2, #56	; 0x38
 80043e2:	2105      	movs	r1, #5
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fe fae8 	bl	80029ba <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 80043ea:	2214      	movs	r2, #20
 80043ec:	2103      	movs	r1, #3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fd89 	bl	8004f06 <draw_speaker_left>
		draw_speaker_right(buffer, 243, 20);
 80043f4:	2214      	movs	r2, #20
 80043f6:	21f3      	movs	r1, #243	; 0xf3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fe24 	bl	8005046 <draw_speaker_right>
		draw_speaker_left(buffer, 10, 43);
 80043fe:	222b      	movs	r2, #43	; 0x2b
 8004400:	210a      	movs	r1, #10
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fd7f 	bl	8004f06 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 8004408:	222b      	movs	r2, #43	; 0x2b
 800440a:	21ec      	movs	r1, #236	; 0xec
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fe1a 	bl	8005046 <draw_speaker_right>
		for ( i = Volume; i < 230; i++)
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <draw_encoder_volume_front_scale+0x2a4>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e01c      	b.n	8004458 <draw_encoder_volume_front_scale+0x1c0>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 800441e:	4b49      	ldr	r3, [pc, #292]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	4b49      	ldr	r3, [pc, #292]	; (8004548 <draw_encoder_volume_front_scale+0x2b0>)
 8004424:	fba3 1302 	umull	r1, r3, r3, r2
 8004428:	0899      	lsrs	r1, r3, #2
 800442a:	460b      	mov	r3, r1
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <draw_encoder_volume_front_scale+0x1b4>
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b299      	uxth	r1, r3
 800443e:	2303      	movs	r3, #3
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	233e      	movs	r3, #62	; 0x3e
 8004444:	2238      	movs	r2, #56	; 0x38
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fe fa0a 	bl	8002860 <draw_vline>
		for ( i = Volume; i < 230; i++)
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2be5      	cmp	r3, #229	; 0xe5
 800445e:	d9de      	bls.n	800441e <draw_encoder_volume_front_scale+0x186>
		    }
		break;
 8004460:	e13b      	b.n	80046da <draw_encoder_volume_front_scale+0x442>
	    case NORMAL:
		Volume3 = map(encoderVolFront.volumeLeftRight, 0, 94, 5, 230);
 8004462:	4b35      	ldr	r3, [pc, #212]	; (8004538 <draw_encoder_volume_front_scale+0x2a0>)
 8004464:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004468:	4618      	mov	r0, r3
 800446a:	23e6      	movs	r3, #230	; 0xe6
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2305      	movs	r3, #5
 8004470:	225e      	movs	r2, #94	; 0x5e
 8004472:	2100      	movs	r1, #0
 8004474:	f005 fdfe 	bl	800a074 <map>
 8004478:	4603      	mov	r3, r0
 800447a:	b29a      	uxth	r2, r3
 800447c:	4b33      	ldr	r3, [pc, #204]	; (800454c <draw_encoder_volume_front_scale+0x2b4>)
 800447e:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume front", 70, 15, 5);
 8004480:	2305      	movs	r3, #5
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	230f      	movs	r3, #15
 8004486:	2246      	movs	r2, #70	; 0x46
 8004488:	4931      	ldr	r1, [pc, #196]	; (8004550 <draw_encoder_volume_front_scale+0x2b8>)
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fe fc4c 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume3, 62, 5);
 8004490:	4b2e      	ldr	r3, [pc, #184]	; (800454c <draw_encoder_volume_front_scale+0x2b4>)
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	2205      	movs	r2, #5
 8004496:	9201      	str	r2, [sp, #4]
 8004498:	223e      	movs	r2, #62	; 0x3e
 800449a:	9200      	str	r2, [sp, #0]
 800449c:	2238      	movs	r2, #56	; 0x38
 800449e:	2105      	movs	r1, #5
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fe fa8a 	bl	80029ba <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 80044a6:	2214      	movs	r2, #20
 80044a8:	2103      	movs	r1, #3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fd2b 	bl	8004f06 <draw_speaker_left>
		draw_speaker_right(buffer, 243, 20);
 80044b0:	2214      	movs	r2, #20
 80044b2:	21f3      	movs	r1, #243	; 0xf3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fdc6 	bl	8005046 <draw_speaker_right>
		for ( i = Volume3; i < 230; i++)
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <draw_encoder_volume_front_scale+0x2b4>)
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e01c      	b.n	8004500 <draw_encoder_volume_front_scale+0x268>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <draw_encoder_volume_front_scale+0x2b0>)
 80044cc:	fba3 1302 	umull	r1, r3, r3, r2
 80044d0:	0899      	lsrs	r1, r3, #2
 80044d2:	460b      	mov	r3, r1
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <draw_encoder_volume_front_scale+0x25c>
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b299      	uxth	r1, r3
 80044e6:	2303      	movs	r3, #3
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	233e      	movs	r3, #62	; 0x3e
 80044ec:	2238      	movs	r2, #56	; 0x38
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fe f9b6 	bl	8002860 <draw_vline>
		for ( i = Volume3; i < 230; i++)
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2be5      	cmp	r3, #229	; 0xe5
 8004506:	d9de      	bls.n	80044c6 <draw_encoder_volume_front_scale+0x22e>
		    }
		break;
 8004508:	e0e7      	b.n	80046da <draw_encoder_volume_front_scale+0x442>
	    case MUTE:
		draw_text(buffer, "Volume MUTED", 70, 15, 5);
 800450a:	2305      	movs	r3, #5
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	230f      	movs	r3, #15
 8004510:	2246      	movs	r2, #70	; 0x46
 8004512:	4910      	ldr	r1, [pc, #64]	; (8004554 <draw_encoder_volume_front_scale+0x2bc>)
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fe fc07 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, 6, 62, 5);
 800451a:	2305      	movs	r3, #5
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	233e      	movs	r3, #62	; 0x3e
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	2306      	movs	r3, #6
 8004524:	2238      	movs	r2, #56	; 0x38
 8004526:	2105      	movs	r1, #5
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fe fa46 	bl	80029ba <draw_rect_filled>
		for ( i = 0; i < 230; i++)
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <draw_encoder_volume_front_scale+0x2ac>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e02d      	b.n	8004592 <draw_encoder_volume_front_scale+0x2fa>
 8004536:	bf00      	nop
 8004538:	20000554 	.word	0x20000554
 800453c:	200001c8 	.word	0x200001c8
 8004540:	08017f20 	.word	0x08017f20
 8004544:	200001ca 	.word	0x200001ca
 8004548:	cccccccd 	.word	0xcccccccd
 800454c:	200001cc 	.word	0x200001cc
 8004550:	08017f30 	.word	0x08017f30
 8004554:	08017f40 	.word	0x08017f40
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004558:	4b62      	ldr	r3, [pc, #392]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 800455a:	781a      	ldrb	r2, [r3, #0]
 800455c:	4b62      	ldr	r3, [pc, #392]	; (80046e8 <draw_encoder_volume_front_scale+0x450>)
 800455e:	fba3 1302 	umull	r1, r3, r3, r2
 8004562:	0899      	lsrs	r1, r3, #2
 8004564:	460b      	mov	r3, r1
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <draw_encoder_volume_front_scale+0x2ee>
 8004572:	4b5c      	ldr	r3, [pc, #368]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	b299      	uxth	r1, r3
 8004578:	2303      	movs	r3, #3
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	233e      	movs	r3, #62	; 0x3e
 800457e:	2238      	movs	r2, #56	; 0x38
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fe f96d 	bl	8002860 <draw_vline>
		for ( i = 0; i < 230; i++)
 8004586:	4b57      	ldr	r3, [pc, #348]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	3301      	adds	r3, #1
 800458c:	b2da      	uxtb	r2, r3
 800458e:	4b55      	ldr	r3, [pc, #340]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	4b54      	ldr	r3, [pc, #336]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2be5      	cmp	r3, #229	; 0xe5
 8004598:	d9de      	bls.n	8004558 <draw_encoder_volume_front_scale+0x2c0>
		    }
		break;
 800459a:	e09e      	b.n	80046da <draw_encoder_volume_front_scale+0x442>
	    case ATTE_LEFT:
		Volume1 = map(encoderVolFront.volumeLeft, 0, 94, 5, 230);
 800459c:	4b53      	ldr	r3, [pc, #332]	; (80046ec <draw_encoder_volume_front_scale+0x454>)
 800459e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80045a2:	4618      	mov	r0, r3
 80045a4:	23e6      	movs	r3, #230	; 0xe6
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2305      	movs	r3, #5
 80045aa:	225e      	movs	r2, #94	; 0x5e
 80045ac:	2100      	movs	r1, #0
 80045ae:	f005 fd61 	bl	800a074 <map>
 80045b2:	4603      	mov	r3, r0
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <draw_encoder_volume_front_scale+0x458>)
 80045b8:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume front left", 70, 15, 5);
 80045ba:	2305      	movs	r3, #5
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	230f      	movs	r3, #15
 80045c0:	2246      	movs	r2, #70	; 0x46
 80045c2:	494c      	ldr	r1, [pc, #304]	; (80046f4 <draw_encoder_volume_front_scale+0x45c>)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fe fbaf 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume1, 62, 5);
 80045ca:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <draw_encoder_volume_front_scale+0x458>)
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	2205      	movs	r2, #5
 80045d0:	9201      	str	r2, [sp, #4]
 80045d2:	223e      	movs	r2, #62	; 0x3e
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	2238      	movs	r2, #56	; 0x38
 80045d8:	2105      	movs	r1, #5
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fe f9ed 	bl	80029ba <draw_rect_filled>
		draw_speaker_left(buffer, 3, 20);
 80045e0:	2214      	movs	r2, #20
 80045e2:	2103      	movs	r1, #3
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fc8e 	bl	8004f06 <draw_speaker_left>
		for ( i = Volume1; i < 230; i++)
 80045ea:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <draw_encoder_volume_front_scale+0x458>)
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	4b3c      	ldr	r3, [pc, #240]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e01c      	b.n	8004630 <draw_encoder_volume_front_scale+0x398>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 80045f6:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 80045f8:	781a      	ldrb	r2, [r3, #0]
 80045fa:	4b3b      	ldr	r3, [pc, #236]	; (80046e8 <draw_encoder_volume_front_scale+0x450>)
 80045fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004600:	0899      	lsrs	r1, r3, #2
 8004602:	460b      	mov	r3, r1
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <draw_encoder_volume_front_scale+0x38c>
 8004610:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b299      	uxth	r1, r3
 8004616:	2303      	movs	r3, #3
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	233e      	movs	r3, #62	; 0x3e
 800461c:	2238      	movs	r2, #56	; 0x38
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fe f91e 	bl	8002860 <draw_vline>
		for ( i = Volume1; i < 230; i++)
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	3301      	adds	r3, #1
 800462a:	b2da      	uxtb	r2, r3
 800462c:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2be5      	cmp	r3, #229	; 0xe5
 8004636:	d9de      	bls.n	80045f6 <draw_encoder_volume_front_scale+0x35e>
		    }
		break;
 8004638:	e04f      	b.n	80046da <draw_encoder_volume_front_scale+0x442>
	    case ATTE_RIGHT:
		Volume2 = map(encoderVolFront.volumeRight, 0, 94, 5, 230);
 800463a:	4b2c      	ldr	r3, [pc, #176]	; (80046ec <draw_encoder_volume_front_scale+0x454>)
 800463c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8004640:	4618      	mov	r0, r3
 8004642:	23e6      	movs	r3, #230	; 0xe6
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	2305      	movs	r3, #5
 8004648:	225e      	movs	r2, #94	; 0x5e
 800464a:	2100      	movs	r1, #0
 800464c:	f005 fd12 	bl	800a074 <map>
 8004650:	4603      	mov	r3, r0
 8004652:	b29a      	uxth	r2, r3
 8004654:	4b28      	ldr	r3, [pc, #160]	; (80046f8 <draw_encoder_volume_front_scale+0x460>)
 8004656:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume front right", 70, 15, 5);
 8004658:	2305      	movs	r3, #5
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	230f      	movs	r3, #15
 800465e:	2246      	movs	r2, #70	; 0x46
 8004660:	4926      	ldr	r1, [pc, #152]	; (80046fc <draw_encoder_volume_front_scale+0x464>)
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fe fb60 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume2, 62, 5);
 8004668:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <draw_encoder_volume_front_scale+0x460>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	2205      	movs	r2, #5
 800466e:	9201      	str	r2, [sp, #4]
 8004670:	223e      	movs	r2, #62	; 0x3e
 8004672:	9200      	str	r2, [sp, #0]
 8004674:	2238      	movs	r2, #56	; 0x38
 8004676:	2105      	movs	r1, #5
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7fe f99e 	bl	80029ba <draw_rect_filled>
		draw_speaker_right(buffer, 243, 20);
 800467e:	2214      	movs	r2, #20
 8004680:	21f3      	movs	r1, #243	; 0xf3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fcdf 	bl	8005046 <draw_speaker_right>
		for ( i = Volume2; i < 230; i++)
 8004688:	4b1b      	ldr	r3, [pc, #108]	; (80046f8 <draw_encoder_volume_front_scale+0x460>)
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e01c      	b.n	80046ce <draw_encoder_volume_front_scale+0x436>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <draw_encoder_volume_front_scale+0x450>)
 800469a:	fba3 1302 	umull	r1, r3, r3, r2
 800469e:	0899      	lsrs	r1, r3, #2
 80046a0:	460b      	mov	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <draw_encoder_volume_front_scale+0x42a>
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	b299      	uxth	r1, r3
 80046b4:	2303      	movs	r3, #3
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	233e      	movs	r3, #62	; 0x3e
 80046ba:	2238      	movs	r2, #56	; 0x38
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fe f8cf 	bl	8002860 <draw_vline>
		for ( i = Volume2; i < 230; i++)
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <draw_encoder_volume_front_scale+0x44c>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2be5      	cmp	r3, #229	; 0xe5
 80046d4:	d9de      	bls.n	8004694 <draw_encoder_volume_front_scale+0x3fc>
		    }
		break;
 80046d6:	e000      	b.n	80046da <draw_encoder_volume_front_scale+0x442>
	    default:
		break;
 80046d8:	bf00      	nop
	    }

    }
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200001ca 	.word	0x200001ca
 80046e8:	cccccccd 	.word	0xcccccccd
 80046ec:	20000554 	.word	0x20000554
 80046f0:	200001ce 	.word	0x200001ce
 80046f4:	08017f50 	.word	0x08017f50
 80046f8:	200001d0 	.word	0x200001d0
 80046fc:	08017f64 	.word	0x08017f64

08004700 <draw_encoder_volume_back_scale>:


void draw_encoder_volume_back_scale(uint8_t *const buffer)
    {
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af02      	add	r7, sp, #8
 8004706:	6078      	str	r0, [r7, #4]
	static uint16_t Volume1;
	static uint16_t Volume2;
	static uint16_t Volume3;
	static uint8_t i;

	switch (encoderVolBack.audioOutputState)
 8004708:	4ba2      	ldr	r3, [pc, #648]	; (8004994 <draw_encoder_volume_back_scale+0x294>)
 800470a:	799b      	ldrb	r3, [r3, #6]
 800470c:	3b01      	subs	r3, #1
 800470e:	2b05      	cmp	r3, #5
 8004710:	f200 819f 	bhi.w	8004a52 <draw_encoder_volume_back_scale+0x352>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <draw_encoder_volume_back_scale+0x1c>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004885 	.word	0x08004885
 8004720:	08004a53 	.word	0x08004a53
 8004724:	08004735 	.word	0x08004735
 8004728:	080047dd 	.word	0x080047dd
 800472c:	080048f5 	.word	0x080048f5
 8004730:	080049b5 	.word	0x080049b5
	    {
	    case NORMAL:
		Volume3 = map(encoderVolBack.volumeLeftRight, 0, 94, 5, 230);
 8004734:	4b97      	ldr	r3, [pc, #604]	; (8004994 <draw_encoder_volume_back_scale+0x294>)
 8004736:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800473a:	4618      	mov	r0, r3
 800473c:	23e6      	movs	r3, #230	; 0xe6
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2305      	movs	r3, #5
 8004742:	225e      	movs	r2, #94	; 0x5e
 8004744:	2100      	movs	r1, #0
 8004746:	f005 fc95 	bl	800a074 <map>
 800474a:	4603      	mov	r3, r0
 800474c:	b29a      	uxth	r2, r3
 800474e:	4b92      	ldr	r3, [pc, #584]	; (8004998 <draw_encoder_volume_back_scale+0x298>)
 8004750:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume back", 70, 15, 5);
 8004752:	2305      	movs	r3, #5
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	230f      	movs	r3, #15
 8004758:	2246      	movs	r2, #70	; 0x46
 800475a:	4990      	ldr	r1, [pc, #576]	; (800499c <draw_encoder_volume_back_scale+0x29c>)
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fe fae3 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume3, 62, 5);
 8004762:	4b8d      	ldr	r3, [pc, #564]	; (8004998 <draw_encoder_volume_back_scale+0x298>)
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	2205      	movs	r2, #5
 8004768:	9201      	str	r2, [sp, #4]
 800476a:	223e      	movs	r2, #62	; 0x3e
 800476c:	9200      	str	r2, [sp, #0]
 800476e:	2238      	movs	r2, #56	; 0x38
 8004770:	2105      	movs	r1, #5
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fe f921 	bl	80029ba <draw_rect_filled>
		draw_speaker_left(buffer, 10, 43);
 8004778:	222b      	movs	r2, #43	; 0x2b
 800477a:	210a      	movs	r1, #10
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fbc2 	bl	8004f06 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 8004782:	222b      	movs	r2, #43	; 0x2b
 8004784:	21ec      	movs	r1, #236	; 0xec
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fc5d 	bl	8005046 <draw_speaker_right>
		for ( i = Volume3; i < 230; i++)
 800478c:	4b82      	ldr	r3, [pc, #520]	; (8004998 <draw_encoder_volume_back_scale+0x298>)
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	4b83      	ldr	r3, [pc, #524]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e01c      	b.n	80047d2 <draw_encoder_volume_back_scale+0xd2>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	4b81      	ldr	r3, [pc, #516]	; (80049a4 <draw_encoder_volume_back_scale+0x2a4>)
 800479e:	fba3 1302 	umull	r1, r3, r3, r2
 80047a2:	0899      	lsrs	r1, r3, #2
 80047a4:	460b      	mov	r3, r1
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <draw_encoder_volume_back_scale+0xc6>
 80047b2:	4b7b      	ldr	r3, [pc, #492]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b299      	uxth	r1, r3
 80047b8:	2303      	movs	r3, #3
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	233e      	movs	r3, #62	; 0x3e
 80047be:	2238      	movs	r2, #56	; 0x38
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fe f84d 	bl	8002860 <draw_vline>
		for ( i = Volume3; i < 230; i++)
 80047c6:	4b76      	ldr	r3, [pc, #472]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	4b74      	ldr	r3, [pc, #464]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	4b73      	ldr	r3, [pc, #460]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2be5      	cmp	r3, #229	; 0xe5
 80047d8:	d9de      	bls.n	8004798 <draw_encoder_volume_back_scale+0x98>
		    }
		break;
 80047da:	e13b      	b.n	8004a54 <draw_encoder_volume_back_scale+0x354>
	    case NORMAL_V2:
		Volume3 = map(encoderVolBack.volumeLeftRight, 0, 94, 5, 230);
 80047dc:	4b6d      	ldr	r3, [pc, #436]	; (8004994 <draw_encoder_volume_back_scale+0x294>)
 80047de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80047e2:	4618      	mov	r0, r3
 80047e4:	23e6      	movs	r3, #230	; 0xe6
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2305      	movs	r3, #5
 80047ea:	225e      	movs	r2, #94	; 0x5e
 80047ec:	2100      	movs	r1, #0
 80047ee:	f005 fc41 	bl	800a074 <map>
 80047f2:	4603      	mov	r3, r0
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	4b68      	ldr	r3, [pc, #416]	; (8004998 <draw_encoder_volume_back_scale+0x298>)
 80047f8:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume back", 70, 15, 5);
 80047fa:	2305      	movs	r3, #5
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	230f      	movs	r3, #15
 8004800:	2246      	movs	r2, #70	; 0x46
 8004802:	4966      	ldr	r1, [pc, #408]	; (800499c <draw_encoder_volume_back_scale+0x29c>)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fe fa8f 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume3, 62, 5);
 800480a:	4b63      	ldr	r3, [pc, #396]	; (8004998 <draw_encoder_volume_back_scale+0x298>)
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	2205      	movs	r2, #5
 8004810:	9201      	str	r2, [sp, #4]
 8004812:	223e      	movs	r2, #62	; 0x3e
 8004814:	9200      	str	r2, [sp, #0]
 8004816:	2238      	movs	r2, #56	; 0x38
 8004818:	2105      	movs	r1, #5
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe f8cd 	bl	80029ba <draw_rect_filled>
		draw_speaker_left(buffer, 10, 43);
 8004820:	222b      	movs	r2, #43	; 0x2b
 8004822:	210a      	movs	r1, #10
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fb6e 	bl	8004f06 <draw_speaker_left>
		draw_speaker_right(buffer, 236, 43);
 800482a:	222b      	movs	r2, #43	; 0x2b
 800482c:	21ec      	movs	r1, #236	; 0xec
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fc09 	bl	8005046 <draw_speaker_right>
		for ( i = Volume3; i < 230; i++)
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <draw_encoder_volume_back_scale+0x298>)
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4b59      	ldr	r3, [pc, #356]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	e01c      	b.n	800487a <draw_encoder_volume_back_scale+0x17a>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004840:	4b57      	ldr	r3, [pc, #348]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 8004842:	781a      	ldrb	r2, [r3, #0]
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <draw_encoder_volume_back_scale+0x2a4>)
 8004846:	fba3 1302 	umull	r1, r3, r3, r2
 800484a:	0899      	lsrs	r1, r3, #2
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <draw_encoder_volume_back_scale+0x16e>
 800485a:	4b51      	ldr	r3, [pc, #324]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b299      	uxth	r1, r3
 8004860:	2303      	movs	r3, #3
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	233e      	movs	r3, #62	; 0x3e
 8004866:	2238      	movs	r2, #56	; 0x38
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd fff9 	bl	8002860 <draw_vline>
		for ( i = Volume3; i < 230; i++)
 800486e:	4b4c      	ldr	r3, [pc, #304]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	b2da      	uxtb	r2, r3
 8004876:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	4b49      	ldr	r3, [pc, #292]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2be5      	cmp	r3, #229	; 0xe5
 8004880:	d9de      	bls.n	8004840 <draw_encoder_volume_back_scale+0x140>
		    }
		break;
 8004882:	e0e7      	b.n	8004a54 <draw_encoder_volume_back_scale+0x354>
	    case MUTE:
		draw_text(buffer, "Volume MUTED", 70, 15, 5);
 8004884:	2305      	movs	r3, #5
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	230f      	movs	r3, #15
 800488a:	2246      	movs	r2, #70	; 0x46
 800488c:	4946      	ldr	r1, [pc, #280]	; (80049a8 <draw_encoder_volume_back_scale+0x2a8>)
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fe fa4a 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, 6, 62, 5);
 8004894:	2305      	movs	r3, #5
 8004896:	9301      	str	r3, [sp, #4]
 8004898:	233e      	movs	r3, #62	; 0x3e
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2306      	movs	r3, #6
 800489e:	2238      	movs	r2, #56	; 0x38
 80048a0:	2105      	movs	r1, #5
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe f889 	bl	80029ba <draw_rect_filled>
		for ( i = 0; i < 230; i++)
 80048a8:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e01c      	b.n	80048ea <draw_encoder_volume_back_scale+0x1ea>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <draw_encoder_volume_back_scale+0x2a4>)
 80048b6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ba:	0899      	lsrs	r1, r3, #2
 80048bc:	460b      	mov	r3, r1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <draw_encoder_volume_back_scale+0x1de>
 80048ca:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b299      	uxth	r1, r3
 80048d0:	2303      	movs	r3, #3
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	233e      	movs	r3, #62	; 0x3e
 80048d6:	2238      	movs	r2, #56	; 0x38
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fd ffc1 	bl	8002860 <draw_vline>
		for ( i = 0; i < 230; i++)
 80048de:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b2e      	ldr	r3, [pc, #184]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2be5      	cmp	r3, #229	; 0xe5
 80048f0:	d9de      	bls.n	80048b0 <draw_encoder_volume_back_scale+0x1b0>
		    }
		break;
 80048f2:	e0af      	b.n	8004a54 <draw_encoder_volume_back_scale+0x354>
	    case ATTE_LEFT:
		Volume1 = map(encoderVolBack.volumeLeft, 0, 94, 5, 230);
 80048f4:	4b27      	ldr	r3, [pc, #156]	; (8004994 <draw_encoder_volume_back_scale+0x294>)
 80048f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80048fa:	4618      	mov	r0, r3
 80048fc:	23e6      	movs	r3, #230	; 0xe6
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2305      	movs	r3, #5
 8004902:	225e      	movs	r2, #94	; 0x5e
 8004904:	2100      	movs	r1, #0
 8004906:	f005 fbb5 	bl	800a074 <map>
 800490a:	4603      	mov	r3, r0
 800490c:	b29a      	uxth	r2, r3
 800490e:	4b27      	ldr	r3, [pc, #156]	; (80049ac <draw_encoder_volume_back_scale+0x2ac>)
 8004910:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume back left", 70, 15, 5);
 8004912:	2305      	movs	r3, #5
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	230f      	movs	r3, #15
 8004918:	2246      	movs	r2, #70	; 0x46
 800491a:	4925      	ldr	r1, [pc, #148]	; (80049b0 <draw_encoder_volume_back_scale+0x2b0>)
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fe fa03 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume1, 62, 5);
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <draw_encoder_volume_back_scale+0x2ac>)
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	2205      	movs	r2, #5
 8004928:	9201      	str	r2, [sp, #4]
 800492a:	223e      	movs	r2, #62	; 0x3e
 800492c:	9200      	str	r2, [sp, #0]
 800492e:	2238      	movs	r2, #56	; 0x38
 8004930:	2105      	movs	r1, #5
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fe f841 	bl	80029ba <draw_rect_filled>
		draw_speaker_left(buffer, 10, 43);
 8004938:	222b      	movs	r2, #43	; 0x2b
 800493a:	210a      	movs	r1, #10
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fae2 	bl	8004f06 <draw_speaker_left>
		for ( i = Volume1; i < 230; i++)
 8004942:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <draw_encoder_volume_back_scale+0x2ac>)
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b2da      	uxtb	r2, r3
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e01c      	b.n	8004988 <draw_encoder_volume_back_scale+0x288>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <draw_encoder_volume_back_scale+0x2a4>)
 8004954:	fba3 1302 	umull	r1, r3, r3, r2
 8004958:	0899      	lsrs	r1, r3, #2
 800495a:	460b      	mov	r3, r1
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <draw_encoder_volume_back_scale+0x27c>
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b299      	uxth	r1, r3
 800496e:	2303      	movs	r3, #3
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	233e      	movs	r3, #62	; 0x3e
 8004974:	2238      	movs	r2, #56	; 0x38
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fd ff72 	bl	8002860 <draw_vline>
		for ( i = Volume1; i < 230; i++)
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <draw_encoder_volume_back_scale+0x2a0>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2be5      	cmp	r3, #229	; 0xe5
 800498e:	d9de      	bls.n	800494e <draw_encoder_volume_back_scale+0x24e>
		    }
		break;
 8004990:	e060      	b.n	8004a54 <draw_encoder_volume_back_scale+0x354>
 8004992:	bf00      	nop
 8004994:	20000518 	.word	0x20000518
 8004998:	200001d2 	.word	0x200001d2
 800499c:	08017f78 	.word	0x08017f78
 80049a0:	200001d4 	.word	0x200001d4
 80049a4:	cccccccd 	.word	0xcccccccd
 80049a8:	08017f40 	.word	0x08017f40
 80049ac:	200001d6 	.word	0x200001d6
 80049b0:	08017f84 	.word	0x08017f84
	    case ATTE_RIGHT:
		Volume2 = map(encoderVolBack.volumeRight, 0, 94, 5, 230);
 80049b4:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <draw_encoder_volume_back_scale+0x35c>)
 80049b6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80049ba:	4618      	mov	r0, r3
 80049bc:	23e6      	movs	r3, #230	; 0xe6
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2305      	movs	r3, #5
 80049c2:	225e      	movs	r2, #94	; 0x5e
 80049c4:	2100      	movs	r1, #0
 80049c6:	f005 fb55 	bl	800a074 <map>
 80049ca:	4603      	mov	r3, r0
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <draw_encoder_volume_back_scale+0x360>)
 80049d0:	801a      	strh	r2, [r3, #0]
		draw_text(buffer, "Volume Back right", 70, 15, 5);
 80049d2:	2305      	movs	r3, #5
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	230f      	movs	r3, #15
 80049d8:	2246      	movs	r2, #70	; 0x46
 80049da:	4922      	ldr	r1, [pc, #136]	; (8004a64 <draw_encoder_volume_back_scale+0x364>)
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fe f9a3 	bl	8002d28 <draw_text>
		draw_rect_filled(buffer, 5, 56, Volume2, 62, 5);
 80049e2:	4b1f      	ldr	r3, [pc, #124]	; (8004a60 <draw_encoder_volume_back_scale+0x360>)
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	2205      	movs	r2, #5
 80049e8:	9201      	str	r2, [sp, #4]
 80049ea:	223e      	movs	r2, #62	; 0x3e
 80049ec:	9200      	str	r2, [sp, #0]
 80049ee:	2238      	movs	r2, #56	; 0x38
 80049f0:	2105      	movs	r1, #5
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fd ffe1 	bl	80029ba <draw_rect_filled>
		draw_speaker_right(buffer, 236, 43);
 80049f8:	222b      	movs	r2, #43	; 0x2b
 80049fa:	21ec      	movs	r1, #236	; 0xec
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb22 	bl	8005046 <draw_speaker_right>
		for ( i = Volume2; i < 230; i++)
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <draw_encoder_volume_back_scale+0x360>)
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <draw_encoder_volume_back_scale+0x368>)
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e01c      	b.n	8004a48 <draw_encoder_volume_back_scale+0x348>
		    {
			if (i%5 == 0)draw_vline(buffer, i, 56, 62, 3);
 8004a0e:	4b16      	ldr	r3, [pc, #88]	; (8004a68 <draw_encoder_volume_back_scale+0x368>)
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <draw_encoder_volume_back_scale+0x36c>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	0899      	lsrs	r1, r3, #2
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <draw_encoder_volume_back_scale+0x33c>
 8004a28:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <draw_encoder_volume_back_scale+0x368>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b299      	uxth	r1, r3
 8004a2e:	2303      	movs	r3, #3
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	233e      	movs	r3, #62	; 0x3e
 8004a34:	2238      	movs	r2, #56	; 0x38
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd ff12 	bl	8002860 <draw_vline>
		for ( i = Volume2; i < 230; i++)
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <draw_encoder_volume_back_scale+0x368>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <draw_encoder_volume_back_scale+0x368>)
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <draw_encoder_volume_back_scale+0x368>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2be5      	cmp	r3, #229	; 0xe5
 8004a4e:	d9de      	bls.n	8004a0e <draw_encoder_volume_back_scale+0x30e>
		    }
		break;
 8004a50:	e000      	b.n	8004a54 <draw_encoder_volume_back_scale+0x354>
	    default:
		break;
 8004a52:	bf00      	nop
	    }

    }
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000518 	.word	0x20000518
 8004a60:	200001d8 	.word	0x200001d8
 8004a64:	08017f98 	.word	0x08017f98
 8004a68:	200001d4 	.word	0x200001d4
 8004a6c:	cccccccd 	.word	0xcccccccd

08004a70 <draw_gain_and_freq_loudness>:


void draw_gain_and_freq_loudness(uint8_t *const buffer)
    {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	6078      	str	r0, [r7, #4]
	if ((encoderFilterLoudness.gain > 0))
 8004a78:	4b45      	ldr	r3, [pc, #276]	; (8004b90 <draw_gain_and_freq_loudness+0x120>)
 8004a7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	dd36      	ble.n	8004af0 <draw_gain_and_freq_loudness+0x80>
	    {
		if (encoderFilterLoudness.gain > 10)
 8004a82:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <draw_gain_and_freq_loudness+0x120>)
 8004a84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004a88:	2b0a      	cmp	r3, #10
 8004a8a:	dd1f      	ble.n	8004acc <draw_gain_and_freq_loudness+0x5c>
		    {
			display_gain_tab[0] = ASCII_PLUS;
 8004a8c:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004a8e:	222b      	movs	r2, #43	; 0x2b
 8004a90:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, encoderFilterLoudness.gain);
 8004a92:	4b3f      	ldr	r3, [pc, #252]	; (8004b90 <draw_gain_and_freq_loudness+0x120>)
 8004a94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004a98:	b21b      	sxth	r3, r3
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	f005 fb05 	bl	800a0ac <SplitNumberToDignits>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	3330      	adds	r3, #48	; 0x30
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004aac:	705a      	strb	r2, [r3, #1]
			display_gain_tab[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, encoderFilterLoudness.gain);
 8004aae:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <draw_gain_and_freq_loudness+0x120>)
 8004ab0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f005 faf7 	bl	800a0ac <SplitNumberToDignits>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	3330      	adds	r3, #48	; 0x30
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004ac8:	709a      	strb	r2, [r3, #2]
 8004aca:	e014      	b.n	8004af6 <draw_gain_and_freq_loudness+0x86>
		    }
		else
		    {
			display_gain_tab[0] = ASCII_PLUS;
 8004acc:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004ace:	222b      	movs	r2, #43	; 0x2b
 8004ad0:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, encoderFilterLoudness.gain);
 8004ad2:	4b2f      	ldr	r3, [pc, #188]	; (8004b90 <draw_gain_and_freq_loudness+0x120>)
 8004ad4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	4619      	mov	r1, r3
 8004adc:	2000      	movs	r0, #0
 8004ade:	f005 fae5 	bl	800a0ac <SplitNumberToDignits>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	3330      	adds	r3, #48	; 0x30
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004aec:	705a      	strb	r2, [r3, #1]
 8004aee:	e002      	b.n	8004af6 <draw_gain_and_freq_loudness+0x86>
		    }
	    }
	else 	//gain == 0
	    {
		display_gain_tab[0] = ASCII_DIGIT_OFFSET;
 8004af0:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004af2:	2230      	movs	r2, #48	; 0x30
 8004af4:	701a      	strb	r2, [r3, #0]
	    }

	strcat(display_gain_tab, " dB");
 8004af6:	4827      	ldr	r0, [pc, #156]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004af8:	f7fb fbec 	bl	80002d4 <strlen>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461a      	mov	r2, r3
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004b02:	4413      	add	r3, r2
 8004b04:	4a24      	ldr	r2, [pc, #144]	; (8004b98 <draw_gain_and_freq_loudness+0x128>)
 8004b06:	6810      	ldr	r0, [r2, #0]
 8004b08:	6018      	str	r0, [r3, #0]
	draw_text(buffer, (char*)display_gain_tab, 100, 63, 5);
 8004b0a:	2305      	movs	r3, #5
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	233f      	movs	r3, #63	; 0x3f
 8004b10:	2264      	movs	r2, #100	; 0x64
 8004b12:	4920      	ldr	r1, [pc, #128]	; (8004b94 <draw_gain_and_freq_loudness+0x124>)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fe f907 	bl	8002d28 <draw_text>

	switch (encoderFilterLoudness.centerFreq)
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <draw_gain_and_freq_loudness+0x120>)
 8004b1c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d82f      	bhi.n	8004b84 <draw_gain_and_freq_loudness+0x114>
 8004b24:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <draw_gain_and_freq_loudness+0xbc>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b3d 	.word	0x08004b3d
 8004b30:	08004b4f 	.word	0x08004b4f
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	08004b73 	.word	0x08004b73
	    {
		case 0:		//00 - flat
		    draw_text(buffer, "Flat", 100, 40, 5);
 8004b3c:	2305      	movs	r3, #5
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2328      	movs	r3, #40	; 0x28
 8004b42:	2264      	movs	r2, #100	; 0x64
 8004b44:	4915      	ldr	r1, [pc, #84]	; (8004b9c <draw_gain_and_freq_loudness+0x12c>)
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fe f8ee 	bl	8002d28 <draw_text>
		break;
 8004b4c:	e01b      	b.n	8004b86 <draw_gain_and_freq_loudness+0x116>
		case 1:		//01  - 400 Hz
		    draw_text(buffer, "400 Hz", 100, 40, 5);
 8004b4e:	2305      	movs	r3, #5
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2328      	movs	r3, #40	; 0x28
 8004b54:	2264      	movs	r2, #100	; 0x64
 8004b56:	4912      	ldr	r1, [pc, #72]	; (8004ba0 <draw_gain_and_freq_loudness+0x130>)
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fe f8e5 	bl	8002d28 <draw_text>
		break;
 8004b5e:	e012      	b.n	8004b86 <draw_gain_and_freq_loudness+0x116>
		case 2:		//10  - 800 Hz
		    draw_text(buffer, "800 Hz", 100, 40, 5);
 8004b60:	2305      	movs	r3, #5
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2328      	movs	r3, #40	; 0x28
 8004b66:	2264      	movs	r2, #100	; 0x64
 8004b68:	490e      	ldr	r1, [pc, #56]	; (8004ba4 <draw_gain_and_freq_loudness+0x134>)
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fe f8dc 	bl	8002d28 <draw_text>
		break;
 8004b70:	e009      	b.n	8004b86 <draw_gain_and_freq_loudness+0x116>
		case 3:		//11  - 2400 Hz
		    draw_text(buffer, "2400 Hz", 100, 40, 5);
 8004b72:	2305      	movs	r3, #5
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	2328      	movs	r3, #40	; 0x28
 8004b78:	2264      	movs	r2, #100	; 0x64
 8004b7a:	490b      	ldr	r1, [pc, #44]	; (8004ba8 <draw_gain_and_freq_loudness+0x138>)
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fe f8d3 	bl	8002d28 <draw_text>
		break;
 8004b82:	e000      	b.n	8004b86 <draw_gain_and_freq_loudness+0x116>
		default:
		break;
 8004b84:	bf00      	nop
	    }
    }
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	2000053c 	.word	0x2000053c
 8004b94:	20000188 	.word	0x20000188
 8004b98:	08017fac 	.word	0x08017fac
 8004b9c:	08017fb0 	.word	0x08017fb0
 8004ba0:	08017fb8 	.word	0x08017fb8
 8004ba4:	08017fc0 	.word	0x08017fc0
 8004ba8:	08017fc8 	.word	0x08017fc8

08004bac <draw_gain_and_freq>:


void draw_gain_and_freq(int8_t gainValue)
    {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
	if (gainValue < 0)
 8004bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da39      	bge.n	8004c32 <draw_gain_and_freq+0x86>
	    {
		gainValue = abs(gainValue);
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bfb8      	it	lt
 8004bc6:	425b      	neglt	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	71fb      	strb	r3, [r7, #7]
		if (gainValue > 10)
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	2b0a      	cmp	r3, #10
 8004bd2:	dd1d      	ble.n	8004c10 <draw_gain_and_freq+0x64>
		    {
			display_gain_tab[0] = ASCII_MINUS;
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004bd6:	222d      	movs	r2, #45	; 0x2d
 8004bd8:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, gainValue);
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	b21b      	sxth	r3, r3
 8004be0:	4619      	mov	r1, r3
 8004be2:	2001      	movs	r0, #1
 8004be4:	f005 fa62 	bl	800a0ac <SplitNumberToDignits>
 8004be8:	4603      	mov	r3, r0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	3330      	adds	r3, #48	; 0x30
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b34      	ldr	r3, [pc, #208]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004bf2:	705a      	strb	r2, [r3, #1]
			display_gain_tab[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 8004bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf8:	b21b      	sxth	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f005 fa55 	bl	800a0ac <SplitNumberToDignits>
 8004c02:	4603      	mov	r3, r0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	3330      	adds	r3, #48	; 0x30
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c0c:	709a      	strb	r2, [r3, #2]
 8004c0e:	e04a      	b.n	8004ca6 <draw_gain_and_freq+0xfa>
		    }
		else
		    {
			display_gain_tab[0] = ASCII_MINUS;
 8004c10:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c12:	222d      	movs	r2, #45	; 0x2d
 8004c14:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f005 fa44 	bl	800a0ac <SplitNumberToDignits>
 8004c24:	4603      	mov	r3, r0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	3330      	adds	r3, #48	; 0x30
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c2e:	705a      	strb	r2, [r3, #1]
 8004c30:	e039      	b.n	8004ca6 <draw_gain_and_freq+0xfa>
		    }
	    }
	else if((gainValue > 0))
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dd32      	ble.n	8004ca0 <draw_gain_and_freq+0xf4>
	    {
		if (gainValue > 10)
 8004c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3e:	2b0a      	cmp	r3, #10
 8004c40:	dd1d      	ble.n	8004c7e <draw_gain_and_freq+0xd2>
		    {
			display_gain_tab[0] = ASCII_PLUS;
 8004c42:	4b20      	ldr	r3, [pc, #128]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c44:	222b      	movs	r2, #43	; 0x2b
 8004c46:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, gainValue);
 8004c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4c:	b21b      	sxth	r3, r3
 8004c4e:	4619      	mov	r1, r3
 8004c50:	2001      	movs	r0, #1
 8004c52:	f005 fa2b 	bl	800a0ac <SplitNumberToDignits>
 8004c56:	4603      	mov	r3, r0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3330      	adds	r3, #48	; 0x30
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4b19      	ldr	r3, [pc, #100]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c60:	705a      	strb	r2, [r3, #1]
			display_gain_tab[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	b21b      	sxth	r3, r3
 8004c68:	4619      	mov	r1, r3
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	f005 fa1e 	bl	800a0ac <SplitNumberToDignits>
 8004c70:	4603      	mov	r3, r0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3330      	adds	r3, #48	; 0x30
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c7a:	709a      	strb	r2, [r3, #2]
 8004c7c:	e013      	b.n	8004ca6 <draw_gain_and_freq+0xfa>
		    }
		else
		    {
			display_gain_tab[0] = ASCII_PLUS;
 8004c7e:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c80:	222b      	movs	r2, #43	; 0x2b
 8004c82:	701a      	strb	r2, [r3, #0]
			display_gain_tab[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, gainValue);
 8004c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f005 fa0d 	bl	800a0ac <SplitNumberToDignits>
 8004c92:	4603      	mov	r3, r0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	3330      	adds	r3, #48	; 0x30
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004c9c:	705a      	strb	r2, [r3, #1]
 8004c9e:	e002      	b.n	8004ca6 <draw_gain_and_freq+0xfa>
		    }
	    }
	else 	//gain == 0
	    {
		display_gain_tab[0] = ASCII_DIGIT_OFFSET;
 8004ca0:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004ca2:	2230      	movs	r2, #48	; 0x30
 8004ca4:	701a      	strb	r2, [r3, #0]
	    }

	strcat(display_gain_tab, " dB");
 8004ca6:	4807      	ldr	r0, [pc, #28]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004ca8:	f7fb fb14 	bl	80002d4 <strlen>
 8004cac:	4603      	mov	r3, r0
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <draw_gain_and_freq+0x118>)
 8004cb2:	4413      	add	r3, r2
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <draw_gain_and_freq+0x11c>)
 8004cb6:	6810      	ldr	r0, [r2, #0]
 8004cb8:	6018      	str	r0, [r3, #0]
    }
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000188 	.word	0x20000188
 8004cc8:	08017fac 	.word	0x08017fac

08004ccc <draw_nutka1>:

//heigh - 6 pixels, width - 8 pixels
void draw_nutka1(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	803b      	strh	r3, [r7, #0]
	draw_rect_filled(buffer, begin_x, begin_y, begin_x + 1, begin_y + 1, 5);			// x = 19   y = 19
 8004cdc:	8879      	ldrh	r1, [r7, #2]
 8004cde:	883a      	ldrh	r2, [r7, #0]
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	b298      	uxth	r0, r3
 8004ce6:	883b      	ldrh	r3, [r7, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2405      	movs	r4, #5
 8004cee:	9401      	str	r4, [sp, #4]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fd fe60 	bl	80029ba <draw_rect_filled>
	draw_rect_filled(buffer, begin_x + 4, begin_y, begin_x + 5 , begin_y + 1, 5);
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	b299      	uxth	r1, r3
 8004d00:	883a      	ldrh	r2, [r7, #0]
 8004d02:	887b      	ldrh	r3, [r7, #2]
 8004d04:	3305      	adds	r3, #5
 8004d06:	b298      	uxth	r0, r3
 8004d08:	883b      	ldrh	r3, [r7, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2405      	movs	r4, #5
 8004d10:	9401      	str	r4, [sp, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4603      	mov	r3, r0
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd fe4f 	bl	80029ba <draw_rect_filled>
	      draw_hline(buffer, begin_y - 5 , begin_x + 2, begin_x + 7, 5);
 8004d1c:	883b      	ldrh	r3, [r7, #0]
 8004d1e:	3b05      	subs	r3, #5
 8004d20:	b299      	uxth	r1, r3
 8004d22:	887b      	ldrh	r3, [r7, #2]
 8004d24:	3302      	adds	r3, #2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	3307      	adds	r3, #7
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2005      	movs	r0, #5
 8004d30:	9000      	str	r0, [sp, #0]
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd fdd0 	bl	80028d8 <draw_hline>
	      draw_vline(buffer, begin_x + 1 , begin_y - 1, begin_y - 4, 5);
 8004d38:	887b      	ldrh	r3, [r7, #2]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b299      	uxth	r1, r3
 8004d3e:	883b      	ldrh	r3, [r7, #0]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	883b      	ldrh	r3, [r7, #0]
 8004d46:	3b04      	subs	r3, #4
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2005      	movs	r0, #5
 8004d4c:	9000      	str	r0, [sp, #0]
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd fd86 	bl	8002860 <draw_vline>
	      draw_vline(buffer, begin_x + 5,  begin_y - 1, begin_y - 4, 5);
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	3305      	adds	r3, #5
 8004d58:	b299      	uxth	r1, r3
 8004d5a:	883b      	ldrh	r3, [r7, #0]
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	883b      	ldrh	r3, [r7, #0]
 8004d62:	3b04      	subs	r3, #4
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2005      	movs	r0, #5
 8004d68:	9000      	str	r0, [sp, #0]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7fd fd78 	bl	8002860 <draw_vline>
	      draw_pixel(buffer, begin_x + 2, begin_y - 4, 5);
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	3302      	adds	r3, #2
 8004d74:	b299      	uxth	r1, r3
 8004d76:	883b      	ldrh	r3, [r7, #0]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	2305      	movs	r3, #5
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd fcf2 	bl	8002768 <draw_pixel>
    }
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd90      	pop	{r4, r7, pc}

08004d8c <draw_nutka2>:

//heigh - 5 pixels, width - 4 pixels
void draw_nutka2(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	807b      	strh	r3, [r7, #2]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	803b      	strh	r3, [r7, #0]
	draw_rect_filled(buffer, begin_x, begin_y, begin_x + 1, begin_y + 1, 5);
 8004d9c:	8879      	ldrh	r1, [r7, #2]
 8004d9e:	883a      	ldrh	r2, [r7, #0]
 8004da0:	887b      	ldrh	r3, [r7, #2]
 8004da2:	3301      	adds	r3, #1
 8004da4:	b298      	uxth	r0, r3
 8004da6:	883b      	ldrh	r3, [r7, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2405      	movs	r4, #5
 8004dae:	9401      	str	r4, [sp, #4]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4603      	mov	r3, r0
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fd fe00 	bl	80029ba <draw_rect_filled>
	draw_vline(buffer, begin_x + 1, begin_y - 1, begin_y - 3, 5);
 8004dba:	887b      	ldrh	r3, [r7, #2]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	b299      	uxth	r1, r3
 8004dc0:	883b      	ldrh	r3, [r7, #0]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	883b      	ldrh	r3, [r7, #0]
 8004dc8:	3b03      	subs	r3, #3
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2005      	movs	r0, #5
 8004dce:	9000      	str	r0, [sp, #0]
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fd fd45 	bl	8002860 <draw_vline>
	draw_hline(buffer, begin_y - 4, begin_x + 1, begin_x + 4, 5);
 8004dd6:	883b      	ldrh	r3, [r7, #0]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	b299      	uxth	r1, r3
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	3301      	adds	r3, #1
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	887b      	ldrh	r3, [r7, #2]
 8004de4:	3304      	adds	r3, #4
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2005      	movs	r0, #5
 8004dea:	9000      	str	r0, [sp, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fd fd73 	bl	80028d8 <draw_hline>
	draw_pixel(buffer, begin_x + 4, begin_y - 3, 5);
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	3304      	adds	r3, #4
 8004df6:	b299      	uxth	r1, r3
 8004df8:	883b      	ldrh	r3, [r7, #0]
 8004dfa:	3b03      	subs	r3, #3
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	2305      	movs	r3, #5
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fd fcb1 	bl	8002768 <draw_pixel>
    }
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}

08004e0e <draw_nutka4>:
	draw_pixel(buffer, begin_x + 5, begin_y - 5, 5);
    }

//heigh - 8 pixels, width - 11 pixels
void draw_nutka4(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 8004e0e:	b590      	push	{r4, r7, lr}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af02      	add	r7, sp, #8
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	807b      	strh	r3, [r7, #2]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	803b      	strh	r3, [r7, #0]
	draw_rect_filled(buffer, begin_x + 1, begin_y, begin_x + 2, begin_y + 2, 5);
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	3301      	adds	r3, #1
 8004e22:	b299      	uxth	r1, r3
 8004e24:	883a      	ldrh	r2, [r7, #0]
 8004e26:	887b      	ldrh	r3, [r7, #2]
 8004e28:	3302      	adds	r3, #2
 8004e2a:	b298      	uxth	r0, r3
 8004e2c:	883b      	ldrh	r3, [r7, #0]
 8004e2e:	3302      	adds	r3, #2
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2405      	movs	r4, #5
 8004e34:	9401      	str	r4, [sp, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	4603      	mov	r3, r0
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fd fdbd 	bl	80029ba <draw_rect_filled>
	draw_rect_filled(buffer, begin_x + 6, begin_y, begin_x + 8, begin_y + 2, 5);
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	3306      	adds	r3, #6
 8004e44:	b299      	uxth	r1, r3
 8004e46:	883a      	ldrh	r2, [r7, #0]
 8004e48:	887b      	ldrh	r3, [r7, #2]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	b298      	uxth	r0, r3
 8004e4e:	883b      	ldrh	r3, [r7, #0]
 8004e50:	3302      	adds	r3, #2
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2405      	movs	r4, #5
 8004e56:	9401      	str	r4, [sp, #4]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fd fdac 	bl	80029ba <draw_rect_filled>
	draw_vline(buffer, begin_x + 2, begin_y - 1, begin_y - 6, 5);
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	3302      	adds	r3, #2
 8004e66:	b299      	uxth	r1, r3
 8004e68:	883b      	ldrh	r3, [r7, #0]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	883b      	ldrh	r3, [r7, #0]
 8004e70:	3b06      	subs	r3, #6
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2005      	movs	r0, #5
 8004e76:	9000      	str	r0, [sp, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fd fcf1 	bl	8002860 <draw_vline>
	draw_vline(buffer, begin_x + 8, begin_y - 1, begin_y - 7, 5);
 8004e7e:	887b      	ldrh	r3, [r7, #2]
 8004e80:	3308      	adds	r3, #8
 8004e82:	b299      	uxth	r1, r3
 8004e84:	883b      	ldrh	r3, [r7, #0]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	883b      	ldrh	r3, [r7, #0]
 8004e8c:	3b07      	subs	r3, #7
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2005      	movs	r0, #5
 8004e92:	9000      	str	r0, [sp, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fd fce3 	bl	8002860 <draw_vline>
	draw_hline(buffer, begin_y - 7, begin_x + 3, begin_x + 10, 5);
 8004e9a:	883b      	ldrh	r3, [r7, #0]
 8004e9c:	3b07      	subs	r3, #7
 8004e9e:	b299      	uxth	r1, r3
 8004ea0:	887b      	ldrh	r3, [r7, #2]
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	887b      	ldrh	r3, [r7, #2]
 8004ea8:	330a      	adds	r3, #10
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2005      	movs	r0, #5
 8004eae:	9000      	str	r0, [sp, #0]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fd fd11 	bl	80028d8 <draw_hline>
	draw_pixel(buffer, begin_x + 3, begin_y - 6, 5);
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	3303      	adds	r3, #3
 8004eba:	b299      	uxth	r1, r3
 8004ebc:	883b      	ldrh	r3, [r7, #0]
 8004ebe:	3b06      	subs	r3, #6
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fd fc4f 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x + 10, begin_y - 6, 5);
 8004eca:	887b      	ldrh	r3, [r7, #2]
 8004ecc:	330a      	adds	r3, #10
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	883b      	ldrh	r3, [r7, #0]
 8004ed2:	3b06      	subs	r3, #6
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fd fc45 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x, begin_y + 1, 5);
 8004ede:	8879      	ldrh	r1, [r7, #2]
 8004ee0:	883b      	ldrh	r3, [r7, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	2305      	movs	r3, #5
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fd fc3d 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x, begin_y + 2, 5);
 8004eee:	8879      	ldrh	r1, [r7, #2]
 8004ef0:	883b      	ldrh	r3, [r7, #0]
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	2305      	movs	r3, #5
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fd fc35 	bl	8002768 <draw_pixel>
    }
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}

08004f06 <draw_speaker_left>:

    }

//heigh - 11 pixels, width - 19 pixels
void draw_speaker_left(uint8_t *const buffer, const int16_t begin_x, const int16_t begin_y)
    {
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af02      	add	r7, sp, #8
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	807b      	strh	r3, [r7, #2]
 8004f12:	4613      	mov	r3, r2
 8004f14:	803b      	strh	r3, [r7, #0]
	draw_hline(buffer, begin_y, begin_x + 2, begin_x + 11, 5);
 8004f16:	8839      	ldrh	r1, [r7, #0]
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	887b      	ldrh	r3, [r7, #2]
 8004f20:	330b      	adds	r3, #11
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2005      	movs	r0, #5
 8004f26:	9000      	str	r0, [sp, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fd fcd5 	bl	80028d8 <draw_hline>
	draw_hline(buffer, begin_y - 16, begin_x + 3, begin_x  + 11, 5);
 8004f2e:	883b      	ldrh	r3, [r7, #0]
 8004f30:	3b10      	subs	r3, #16
 8004f32:	b299      	uxth	r1, r3
 8004f34:	887b      	ldrh	r3, [r7, #2]
 8004f36:	3303      	adds	r3, #3
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	887b      	ldrh	r3, [r7, #2]
 8004f3c:	330b      	adds	r3, #11
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2005      	movs	r0, #5
 8004f42:	9000      	str	r0, [sp, #0]
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7fd fcc7 	bl	80028d8 <draw_hline>
	draw_vline(buffer, begin_x + 3, begin_y , begin_y - 16, 5);
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	3303      	adds	r3, #3
 8004f4e:	b299      	uxth	r1, r3
 8004f50:	883a      	ldrh	r2, [r7, #0]
 8004f52:	883b      	ldrh	r3, [r7, #0]
 8004f54:	3b10      	subs	r3, #16
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2005      	movs	r0, #5
 8004f5a:	9000      	str	r0, [sp, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fd fc7f 	bl	8002860 <draw_vline>
	draw_vline(buffer, begin_x + 12, begin_y, begin_y - 16, 5);
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	330c      	adds	r3, #12
 8004f66:	b299      	uxth	r1, r3
 8004f68:	883a      	ldrh	r2, [r7, #0]
 8004f6a:	883b      	ldrh	r3, [r7, #0]
 8004f6c:	3b10      	subs	r3, #16
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2005      	movs	r0, #5
 8004f72:	9000      	str	r0, [sp, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fd fc73 	bl	8002860 <draw_vline>
	draw_pixel(buffer, begin_x + 1, begin_y - 1, 5);
 8004f7a:	887b      	ldrh	r3, [r7, #2]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	b299      	uxth	r1, r3
 8004f80:	883b      	ldrh	r3, [r7, #0]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	2305      	movs	r3, #5
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fd fbed 	bl	8002768 <draw_pixel>
	draw_vline(buffer, begin_x, begin_y - 2, begin_y - 19, 5);
 8004f8e:	8879      	ldrh	r1, [r7, #2]
 8004f90:	883b      	ldrh	r3, [r7, #0]
 8004f92:	3b02      	subs	r3, #2
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	883b      	ldrh	r3, [r7, #0]
 8004f98:	3b13      	subs	r3, #19
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2005      	movs	r0, #5
 8004f9e:	9000      	str	r0, [sp, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fd fc5d 	bl	8002860 <draw_vline>
	draw_hline(buffer, begin_y - 19, begin_x, begin_x + 9 , 5);
 8004fa6:	883b      	ldrh	r3, [r7, #0]
 8004fa8:	3b13      	subs	r3, #19
 8004faa:	b299      	uxth	r1, r3
 8004fac:	887a      	ldrh	r2, [r7, #2]
 8004fae:	887b      	ldrh	r3, [r7, #2]
 8004fb0:	3309      	adds	r3, #9
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2005      	movs	r0, #5
 8004fb6:	9000      	str	r0, [sp, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fd fc8d 	bl	80028d8 <draw_hline>
	draw_pixel(buffer, begin_x + 10, begin_y - 18, 5);
 8004fbe:	887b      	ldrh	r3, [r7, #2]
 8004fc0:	330a      	adds	r3, #10
 8004fc2:	b299      	uxth	r1, r3
 8004fc4:	883b      	ldrh	r3, [r7, #0]
 8004fc6:	3b12      	subs	r3, #18
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	2305      	movs	r3, #5
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7fd fbcb 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x + 11, begin_y - 17, 5);
 8004fd2:	887b      	ldrh	r3, [r7, #2]
 8004fd4:	330b      	adds	r3, #11
 8004fd6:	b299      	uxth	r1, r3
 8004fd8:	883b      	ldrh	r3, [r7, #0]
 8004fda:	3b11      	subs	r3, #17
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	2305      	movs	r3, #5
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7fd fbc1 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x + 1, begin_y - 18, 5);
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	b299      	uxth	r1, r3
 8004fec:	883b      	ldrh	r3, [r7, #0]
 8004fee:	3b12      	subs	r3, #18
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	2305      	movs	r3, #5
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fd fbb7 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x + 2, begin_y  - 17, 5);
 8004ffa:	887b      	ldrh	r3, [r7, #2]
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	b299      	uxth	r1, r3
 8005000:	883b      	ldrh	r3, [r7, #0]
 8005002:	3b11      	subs	r3, #17
 8005004:	b29a      	uxth	r2, r3
 8005006:	2305      	movs	r3, #5
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fd fbad 	bl	8002768 <draw_pixel>
	draw_circle(buffer,begin_x + 8, begin_y - 5, 2, 5);
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	3308      	adds	r3, #8
 8005012:	b299      	uxth	r1, r3
 8005014:	883b      	ldrh	r3, [r7, #0]
 8005016:	3b05      	subs	r3, #5
 8005018:	b29a      	uxth	r2, r3
 800501a:	2305      	movs	r3, #5
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2302      	movs	r3, #2
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fd fcfb 	bl	8002a1c <draw_circle>
	draw_circle(buffer,begin_x + 8, begin_y - 12, 1, 5);
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	3308      	adds	r3, #8
 800502a:	b299      	uxth	r1, r3
 800502c:	883b      	ldrh	r3, [r7, #0]
 800502e:	3b0c      	subs	r3, #12
 8005030:	b29a      	uxth	r2, r3
 8005032:	2305      	movs	r3, #5
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	2301      	movs	r3, #1
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fd fcef 	bl	8002a1c <draw_circle>
    }
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <draw_speaker_right>:

//heigh - 11 pixels, width - 19 pixels
void draw_speaker_right(uint8_t *const buffer,const int16_t begin_x, const int16_t begin_y)
    {
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af02      	add	r7, sp, #8
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	807b      	strh	r3, [r7, #2]
 8005052:	4613      	mov	r3, r2
 8005054:	803b      	strh	r3, [r7, #0]
	draw_hline(buffer, begin_y, begin_x, begin_x + 8, 5);
 8005056:	8839      	ldrh	r1, [r7, #0]
 8005058:	887a      	ldrh	r2, [r7, #2]
 800505a:	887b      	ldrh	r3, [r7, #2]
 800505c:	3308      	adds	r3, #8
 800505e:	b29b      	uxth	r3, r3
 8005060:	2005      	movs	r0, #5
 8005062:	9000      	str	r0, [sp, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fd fc37 	bl	80028d8 <draw_hline>
	draw_hline(buffer, begin_y - 16, begin_x, begin_x + 8, 5);
 800506a:	883b      	ldrh	r3, [r7, #0]
 800506c:	3b10      	subs	r3, #16
 800506e:	b299      	uxth	r1, r3
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	887b      	ldrh	r3, [r7, #2]
 8005074:	3308      	adds	r3, #8
 8005076:	b29b      	uxth	r3, r3
 8005078:	2005      	movs	r0, #5
 800507a:	9000      	str	r0, [sp, #0]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fd fc2b 	bl	80028d8 <draw_hline>
	draw_vline(buffer, begin_x, begin_y, begin_y - 16, 5);
 8005082:	8879      	ldrh	r1, [r7, #2]
 8005084:	883a      	ldrh	r2, [r7, #0]
 8005086:	883b      	ldrh	r3, [r7, #0]
 8005088:	3b10      	subs	r3, #16
 800508a:	b29b      	uxth	r3, r3
 800508c:	2005      	movs	r0, #5
 800508e:	9000      	str	r0, [sp, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7fd fbe5 	bl	8002860 <draw_vline>
	draw_vline(buffer, begin_x + 9, begin_y, begin_y - 16, 5);
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	3309      	adds	r3, #9
 800509a:	b299      	uxth	r1, r3
 800509c:	883a      	ldrh	r2, [r7, #0]
 800509e:	883b      	ldrh	r3, [r7, #0]
 80050a0:	3b10      	subs	r3, #16
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2005      	movs	r0, #5
 80050a6:	9000      	str	r0, [sp, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fd fbd9 	bl	8002860 <draw_vline>
	draw_pixel(buffer, begin_x + 1, begin_y - 17, 5);
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	3301      	adds	r3, #1
 80050b2:	b299      	uxth	r1, r3
 80050b4:	883b      	ldrh	r3, [r7, #0]
 80050b6:	3b11      	subs	r3, #17
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	2305      	movs	r3, #5
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7fd fb53 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x + 2, begin_y - 18, 5);
 80050c2:	887b      	ldrh	r3, [r7, #2]
 80050c4:	3302      	adds	r3, #2
 80050c6:	b299      	uxth	r1, r3
 80050c8:	883b      	ldrh	r3, [r7, #0]
 80050ca:	3b12      	subs	r3, #18
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	2305      	movs	r3, #5
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fd fb49 	bl	8002768 <draw_pixel>
	draw_hline(buffer, begin_y - 19, begin_x + 3, begin_x + 11, 5);
 80050d6:	883b      	ldrh	r3, [r7, #0]
 80050d8:	3b13      	subs	r3, #19
 80050da:	b299      	uxth	r1, r3
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	3303      	adds	r3, #3
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	330b      	adds	r3, #11
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2005      	movs	r0, #5
 80050ea:	9000      	str	r0, [sp, #0]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fd fbf3 	bl	80028d8 <draw_hline>
	draw_pixel(buffer, begin_x + 9 , begin_y - 17, 5);
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	3309      	adds	r3, #9
 80050f6:	b299      	uxth	r1, r3
 80050f8:	883b      	ldrh	r3, [r7, #0]
 80050fa:	3b11      	subs	r3, #17
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	2305      	movs	r3, #5
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fd fb31 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x + 10, begin_y - 18, 5);
 8005106:	887b      	ldrh	r3, [r7, #2]
 8005108:	330a      	adds	r3, #10
 800510a:	b299      	uxth	r1, r3
 800510c:	883b      	ldrh	r3, [r7, #0]
 800510e:	3b12      	subs	r3, #18
 8005110:	b29a      	uxth	r2, r3
 8005112:	2305      	movs	r3, #5
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fd fb27 	bl	8002768 <draw_pixel>
	draw_vline(buffer, begin_x + 12, begin_y - 3, begin_y - 19, 5);
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	330c      	adds	r3, #12
 800511e:	b299      	uxth	r1, r3
 8005120:	883b      	ldrh	r3, [r7, #0]
 8005122:	3b03      	subs	r3, #3
 8005124:	b29a      	uxth	r2, r3
 8005126:	883b      	ldrh	r3, [r7, #0]
 8005128:	3b13      	subs	r3, #19
 800512a:	b29b      	uxth	r3, r3
 800512c:	2005      	movs	r0, #5
 800512e:	9000      	str	r0, [sp, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fd fb95 	bl	8002860 <draw_vline>
	draw_pixel(buffer, begin_x + 10, begin_y - 1, 5);
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	330a      	adds	r3, #10
 800513a:	b299      	uxth	r1, r3
 800513c:	883b      	ldrh	r3, [r7, #0]
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	2305      	movs	r3, #5
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fd fb0f 	bl	8002768 <draw_pixel>
	draw_pixel(buffer, begin_x + 11, begin_y - 2, 5);
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	330b      	adds	r3, #11
 800514e:	b299      	uxth	r1, r3
 8005150:	883b      	ldrh	r3, [r7, #0]
 8005152:	3b02      	subs	r3, #2
 8005154:	b29a      	uxth	r2, r3
 8005156:	2305      	movs	r3, #5
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fd fb05 	bl	8002768 <draw_pixel>
	draw_circle(buffer,begin_x + 4, begin_y - 5, 2, 5);
 800515e:	887b      	ldrh	r3, [r7, #2]
 8005160:	3304      	adds	r3, #4
 8005162:	b299      	uxth	r1, r3
 8005164:	883b      	ldrh	r3, [r7, #0]
 8005166:	3b05      	subs	r3, #5
 8005168:	b29a      	uxth	r2, r3
 800516a:	2305      	movs	r3, #5
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2302      	movs	r3, #2
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fd fc53 	bl	8002a1c <draw_circle>
	draw_circle(buffer,begin_x + 4, begin_y - 12, 1, 5);
 8005176:	887b      	ldrh	r3, [r7, #2]
 8005178:	3304      	adds	r3, #4
 800517a:	b299      	uxth	r1, r3
 800517c:	883b      	ldrh	r3, [r7, #0]
 800517e:	3b0c      	subs	r3, #12
 8005180:	b29a      	uxth	r2, r3
 8005182:	2305      	movs	r3, #5
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	2301      	movs	r3, #1
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7fd fc47 	bl	8002a1c <draw_circle>
    }
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <draw_UV_rectangle_scale>:


void draw_UV_rectangle_scale(uint8_t *const buffer, const UV_meter_t left_channel, const UV_meter_t right_channel)
    {
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af02      	add	r7, sp, #8
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	807b      	strh	r3, [r7, #2]
 80051a2:	4613      	mov	r3, r2
 80051a4:	803b      	strh	r3, [r7, #0]
	for (uint16_t a = 20; a < 254; a = a + 18)
 80051a6:	2314      	movs	r3, #20
 80051a8:	81fb      	strh	r3, [r7, #14]
 80051aa:	e040      	b.n	800522e <draw_UV_rectangle_scale+0x98>
	    {
		if (left_channel < (a + 18))
 80051ac:	89fb      	ldrh	r3, [r7, #14]
 80051ae:	f103 0211 	add.w	r2, r3, #17
 80051b2:	887b      	ldrh	r3, [r7, #2]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	db0c      	blt.n	80051d2 <draw_UV_rectangle_scale+0x3c>
		    {
			draw_rect_filled(buffer, a, 16, a + 14, 26, 1);
 80051b8:	89fb      	ldrh	r3, [r7, #14]
 80051ba:	330e      	adds	r3, #14
 80051bc:	b29b      	uxth	r3, r3
 80051be:	89f9      	ldrh	r1, [r7, #14]
 80051c0:	2201      	movs	r2, #1
 80051c2:	9201      	str	r2, [sp, #4]
 80051c4:	221a      	movs	r2, #26
 80051c6:	9200      	str	r2, [sp, #0]
 80051c8:	2210      	movs	r2, #16
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fd fbf5 	bl	80029ba <draw_rect_filled>
 80051d0:	e00b      	b.n	80051ea <draw_UV_rectangle_scale+0x54>
		    }
		else
		    {
			draw_rect_filled(buffer, a, 16, a + 14, 26, 10);
 80051d2:	89fb      	ldrh	r3, [r7, #14]
 80051d4:	330e      	adds	r3, #14
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	89f9      	ldrh	r1, [r7, #14]
 80051da:	220a      	movs	r2, #10
 80051dc:	9201      	str	r2, [sp, #4]
 80051de:	221a      	movs	r2, #26
 80051e0:	9200      	str	r2, [sp, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fd fbe8 	bl	80029ba <draw_rect_filled>
		    }

		if(right_channel < (a + 18))
 80051ea:	89fb      	ldrh	r3, [r7, #14]
 80051ec:	f103 0211 	add.w	r2, r3, #17
 80051f0:	883b      	ldrh	r3, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	db0c      	blt.n	8005210 <draw_UV_rectangle_scale+0x7a>
		    {
			draw_rect_filled(buffer, a, 40, a + 14, 50, 1);
 80051f6:	89fb      	ldrh	r3, [r7, #14]
 80051f8:	330e      	adds	r3, #14
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	89f9      	ldrh	r1, [r7, #14]
 80051fe:	2201      	movs	r2, #1
 8005200:	9201      	str	r2, [sp, #4]
 8005202:	2232      	movs	r2, #50	; 0x32
 8005204:	9200      	str	r2, [sp, #0]
 8005206:	2228      	movs	r2, #40	; 0x28
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fd fbd6 	bl	80029ba <draw_rect_filled>
 800520e:	e00b      	b.n	8005228 <draw_UV_rectangle_scale+0x92>
		    }
		else
		    {
			draw_rect_filled(buffer, a, 40, a + 14, 50, 10);
 8005210:	89fb      	ldrh	r3, [r7, #14]
 8005212:	330e      	adds	r3, #14
 8005214:	b29b      	uxth	r3, r3
 8005216:	89f9      	ldrh	r1, [r7, #14]
 8005218:	220a      	movs	r2, #10
 800521a:	9201      	str	r2, [sp, #4]
 800521c:	2232      	movs	r2, #50	; 0x32
 800521e:	9200      	str	r2, [sp, #0]
 8005220:	2228      	movs	r2, #40	; 0x28
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fd fbc9 	bl	80029ba <draw_rect_filled>
	for (uint16_t a = 20; a < 254; a = a + 18)
 8005228:	89fb      	ldrh	r3, [r7, #14]
 800522a:	3312      	adds	r3, #18
 800522c:	81fb      	strh	r3, [r7, #14]
 800522e:	89fb      	ldrh	r3, [r7, #14]
 8005230:	2bfd      	cmp	r3, #253	; 0xfd
 8005232:	d9bb      	bls.n	80051ac <draw_UV_rectangle_scale+0x16>
		    }
	    }
    }
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <draw_UV_lines_scale>:


void draw_UV_lines_scale(uint8_t *const buffer, const UV_meter_t left_channel, const UV_meter_t right_channel)
    {
 800523e:	b580      	push	{r7, lr}
 8005240:	b086      	sub	sp, #24
 8005242:	af02      	add	r7, sp, #8
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	807b      	strh	r3, [r7, #2]
 800524a:	4613      	mov	r3, r2
 800524c:	803b      	strh	r3, [r7, #0]
	for (uint16_t b = 20; b < 254; b = b + 3)
 800524e:	2314      	movs	r3, #20
 8005250:	81fb      	strh	r3, [r7, #14]
 8005252:	e02c      	b.n	80052ae <draw_UV_lines_scale+0x70>
	    {
		if (left_channel < b)
 8005254:	887a      	ldrh	r2, [r7, #2]
 8005256:	89fb      	ldrh	r3, [r7, #14]
 8005258:	429a      	cmp	r2, r3
 800525a:	d208      	bcs.n	800526e <draw_UV_lines_scale+0x30>
		    {
			draw_vline(buffer, b, 10, 3, 1);
 800525c:	89f9      	ldrh	r1, [r7, #14]
 800525e:	2301      	movs	r3, #1
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	2303      	movs	r3, #3
 8005264:	220a      	movs	r2, #10
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fd fafa 	bl	8002860 <draw_vline>
 800526c:	e007      	b.n	800527e <draw_UV_lines_scale+0x40>
		    }
		else
		    {
			draw_vline(buffer, b, 10, 3, 10);
 800526e:	89f9      	ldrh	r1, [r7, #14]
 8005270:	230a      	movs	r3, #10
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2303      	movs	r3, #3
 8005276:	220a      	movs	r2, #10
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fd faf1 	bl	8002860 <draw_vline>
		    }
		if(right_channel < b)
 800527e:	883a      	ldrh	r2, [r7, #0]
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	429a      	cmp	r2, r3
 8005284:	d208      	bcs.n	8005298 <draw_UV_lines_scale+0x5a>
		    {

			draw_vline(buffer, b, 63, 56, 1);
 8005286:	89f9      	ldrh	r1, [r7, #14]
 8005288:	2301      	movs	r3, #1
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	2338      	movs	r3, #56	; 0x38
 800528e:	223f      	movs	r2, #63	; 0x3f
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fd fae5 	bl	8002860 <draw_vline>
 8005296:	e007      	b.n	80052a8 <draw_UV_lines_scale+0x6a>
		    }
		else
		    {

			draw_vline(buffer, b, 63, 56, 10);
 8005298:	89f9      	ldrh	r1, [r7, #14]
 800529a:	230a      	movs	r3, #10
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2338      	movs	r3, #56	; 0x38
 80052a0:	223f      	movs	r2, #63	; 0x3f
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fd fadc 	bl	8002860 <draw_vline>
	for (uint16_t b = 20; b < 254; b = b + 3)
 80052a8:	89fb      	ldrh	r3, [r7, #14]
 80052aa:	3303      	adds	r3, #3
 80052ac:	81fb      	strh	r3, [r7, #14]
 80052ae:	89fb      	ldrh	r3, [r7, #14]
 80052b0:	2bfd      	cmp	r3, #253	; 0xfd
 80052b2:	d9cf      	bls.n	8005254 <draw_UV_lines_scale+0x16>
		    }
	    }
    }
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <draw_freq_scale>:


void draw_freq_scale(uint8_t *const buffer,uint16_t freq_scaled)
    {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	807b      	strh	r3, [r7, #2]
	for (uint8_t i = 40; i < 220; i++)
 80052cc:	2328      	movs	r3, #40	; 0x28
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	e03f      	b.n	8005352 <draw_freq_scale+0x92>
	    {
		if (i % 5 == 0)
 80052d2:	7bfa      	ldrb	r2, [r7, #15]
 80052d4:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <draw_freq_scale+0xc8>)
 80052d6:	fba3 1302 	umull	r1, r3, r3, r2
 80052da:	0899      	lsrs	r1, r3, #2
 80052dc:	460b      	mov	r3, r1
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d108      	bne.n	80052fc <draw_freq_scale+0x3c>
		    {
			draw_vline(buffer, i, 63, 60, 5);
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	b299      	uxth	r1, r3
 80052ee:	2305      	movs	r3, #5
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	233c      	movs	r3, #60	; 0x3c
 80052f4:	223f      	movs	r2, #63	; 0x3f
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fd fab2 	bl	8002860 <draw_vline>
		    }

		if (i % 15 == 0)
 80052fc:	7bfa      	ldrb	r2, [r7, #15]
 80052fe:	4b23      	ldr	r3, [pc, #140]	; (800538c <draw_freq_scale+0xcc>)
 8005300:	fba3 1302 	umull	r1, r3, r3, r2
 8005304:	08d9      	lsrs	r1, r3, #3
 8005306:	460b      	mov	r3, r1
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	1a5b      	subs	r3, r3, r1
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d108      	bne.n	8005326 <draw_freq_scale+0x66>
		    {
			draw_vline(buffer, i, 57, 63, 5);
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	b299      	uxth	r1, r3
 8005318:	2305      	movs	r3, #5
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	233f      	movs	r3, #63	; 0x3f
 800531e:	2239      	movs	r2, #57	; 0x39
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fd fa9d 	bl	8002860 <draw_vline>
		    }
		if (freq_scaled == i - 20)
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	3b14      	subs	r3, #20
 800532c:	429a      	cmp	r2, r3
 800532e:	d10d      	bne.n	800534c <draw_freq_scale+0x8c>
		    {
			//draw_vline(buffer, i, 53, 63, 5);
			draw_rect_filled(buffer, i, 52, i+1, 63, 10);
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	b299      	uxth	r1, r3
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	b29b      	uxth	r3, r3
 8005338:	3301      	adds	r3, #1
 800533a:	b29b      	uxth	r3, r3
 800533c:	220a      	movs	r2, #10
 800533e:	9201      	str	r2, [sp, #4]
 8005340:	223f      	movs	r2, #63	; 0x3f
 8005342:	9200      	str	r2, [sp, #0]
 8005344:	2234      	movs	r2, #52	; 0x34
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fd fb37 	bl	80029ba <draw_rect_filled>
	for (uint8_t i = 40; i < 220; i++)
 800534c:	7bfb      	ldrb	r3, [r7, #15]
 800534e:	3301      	adds	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	2bdb      	cmp	r3, #219	; 0xdb
 8005356:	d9bc      	bls.n	80052d2 <draw_freq_scale+0x12>
		    }
	    }

	select_font(&TomThumb);
 8005358:	480d      	ldr	r0, [pc, #52]	; (8005390 <draw_freq_scale+0xd0>)
 800535a:	f7fd fc3d 	bl	8002bd8 <select_font>
	draw_text(buffer, "87,0", 33, 51, 5);
 800535e:	2305      	movs	r3, #5
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	2333      	movs	r3, #51	; 0x33
 8005364:	2221      	movs	r2, #33	; 0x21
 8005366:	490b      	ldr	r1, [pc, #44]	; (8005394 <draw_freq_scale+0xd4>)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fd fcdd 	bl	8002d28 <draw_text>
	draw_text(buffer, "108,0", 210, 51, 5);
 800536e:	2305      	movs	r3, #5
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2333      	movs	r3, #51	; 0x33
 8005374:	22d2      	movs	r2, #210	; 0xd2
 8005376:	4908      	ldr	r1, [pc, #32]	; (8005398 <draw_freq_scale+0xd8>)
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fd fcd5 	bl	8002d28 <draw_text>
    }
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	cccccccd 	.word	0xcccccccd
 800538c:	88888889 	.word	0x88888889
 8005390:	08023f70 	.word	0x08023f70
 8005394:	08017fd0 	.word	0x08017fd0
 8005398:	08017fd8 	.word	0x08017fd8

0800539c <draw_alarmsSource>:


void draw_alarmsSource(uint8_t *const buffer)
    {
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	6078      	str	r0, [r7, #4]

	select_font(&FreeMonoOblique9pt7b);
 80053a4:	484d      	ldr	r0, [pc, #308]	; (80054dc <draw_alarmsSource+0x140>)
 80053a6:	f7fd fc17 	bl	8002bd8 <select_font>
	switch (SettingsUserMenu.AlarmSource_A)
 80053aa:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <draw_alarmsSource+0x144>)
 80053ac:	789b      	ldrb	r3, [r3, #2]
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d842      	bhi.n	8005438 <draw_alarmsSource+0x9c>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <draw_alarmsSource+0x1c>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	08005411 	.word	0x08005411
 80053bc:	080053d5 	.word	0x080053d5
 80053c0:	080053e9 	.word	0x080053e9
 80053c4:	08005439 	.word	0x08005439
 80053c8:	08005439 	.word	0x08005439
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	08005425 	.word	0x08005425
	    {
	    case JACK_1:
		draw_text(buffer, (char*) Jack_1, 110, 30, 5);
 80053d4:	4b43      	ldr	r3, [pc, #268]	; (80054e4 <draw_alarmsSource+0x148>)
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	2305      	movs	r3, #5
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	231e      	movs	r3, #30
 80053de:	226e      	movs	r2, #110	; 0x6e
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fd fca1 	bl	8002d28 <draw_text>
		break;
 80053e6:	e028      	b.n	800543a <draw_alarmsSource+0x9e>
	    case JACK_2:
		draw_text(buffer, (char*) Jack_2, 110, 30, 5);
 80053e8:	4b3f      	ldr	r3, [pc, #252]	; (80054e8 <draw_alarmsSource+0x14c>)
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	2305      	movs	r3, #5
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	231e      	movs	r3, #30
 80053f2:	226e      	movs	r2, #110	; 0x6e
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fd fc97 	bl	8002d28 <draw_text>
		break;
 80053fa:	e01e      	b.n	800543a <draw_alarmsSource+0x9e>
	    case RADIO:
		draw_text(buffer, (char*) Radio, 110, 30, 5);
 80053fc:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <draw_alarmsSource+0x150>)
 80053fe:	6819      	ldr	r1, [r3, #0]
 8005400:	2305      	movs	r3, #5
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	231e      	movs	r3, #30
 8005406:	226e      	movs	r2, #110	; 0x6e
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fd fc8d 	bl	8002d28 <draw_text>
		break;
 800540e:	e014      	b.n	800543a <draw_alarmsSource+0x9e>
	    case BLUETOOTH:
		draw_text(buffer, (char*) Bluetooth, 110, 30, 5);
 8005410:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <draw_alarmsSource+0x154>)
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	2305      	movs	r3, #5
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	231e      	movs	r3, #30
 800541a:	226e      	movs	r2, #110	; 0x6e
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fd fc83 	bl	8002d28 <draw_text>
		break;
 8005422:	e00a      	b.n	800543a <draw_alarmsSource+0x9e>
	    case MICROPHONE:
		draw_text(buffer, (char*) Microphone, 110, 30, 5);
 8005424:	4b33      	ldr	r3, [pc, #204]	; (80054f4 <draw_alarmsSource+0x158>)
 8005426:	6819      	ldr	r1, [r3, #0]
 8005428:	2305      	movs	r3, #5
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	231e      	movs	r3, #30
 800542e:	226e      	movs	r2, #110	; 0x6e
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fd fc79 	bl	8002d28 <draw_text>
		break;
 8005436:	e000      	b.n	800543a <draw_alarmsSource+0x9e>
	    default:
		break;
 8005438:	bf00      	nop
	    }

	select_font(&FreeMonoOblique9pt7b);
 800543a:	4828      	ldr	r0, [pc, #160]	; (80054dc <draw_alarmsSource+0x140>)
 800543c:	f7fd fbcc 	bl	8002bd8 <select_font>
	switch (SettingsUserMenu.AlarmSource_B)
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <draw_alarmsSource+0x144>)
 8005442:	78db      	ldrb	r3, [r3, #3]
 8005444:	2b06      	cmp	r3, #6
 8005446:	d843      	bhi.n	80054d0 <draw_alarmsSource+0x134>
 8005448:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <draw_alarmsSource+0xb4>)
 800544a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544e:	bf00      	nop
 8005450:	080054a9 	.word	0x080054a9
 8005454:	0800546d 	.word	0x0800546d
 8005458:	08005481 	.word	0x08005481
 800545c:	080054d1 	.word	0x080054d1
 8005460:	080054d1 	.word	0x080054d1
 8005464:	08005495 	.word	0x08005495
 8005468:	080054bd 	.word	0x080054bd
	    {
	    case JACK_1:
		draw_text(buffer, (char*) Jack_1, 110, 45, 5);
 800546c:	4b1d      	ldr	r3, [pc, #116]	; (80054e4 <draw_alarmsSource+0x148>)
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	2305      	movs	r3, #5
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	232d      	movs	r3, #45	; 0x2d
 8005476:	226e      	movs	r2, #110	; 0x6e
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fd fc55 	bl	8002d28 <draw_text>
		break;
 800547e:	e028      	b.n	80054d2 <draw_alarmsSource+0x136>
	    case JACK_2:
		draw_text(buffer, (char*) Jack_2, 110, 45, 5);
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <draw_alarmsSource+0x14c>)
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	2305      	movs	r3, #5
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	232d      	movs	r3, #45	; 0x2d
 800548a:	226e      	movs	r2, #110	; 0x6e
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fd fc4b 	bl	8002d28 <draw_text>
		break;
 8005492:	e01e      	b.n	80054d2 <draw_alarmsSource+0x136>
	    case RADIO:
		draw_text(buffer, (char*) Radio, 110, 45, 5);
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <draw_alarmsSource+0x150>)
 8005496:	6819      	ldr	r1, [r3, #0]
 8005498:	2305      	movs	r3, #5
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	232d      	movs	r3, #45	; 0x2d
 800549e:	226e      	movs	r2, #110	; 0x6e
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fd fc41 	bl	8002d28 <draw_text>
		break;
 80054a6:	e014      	b.n	80054d2 <draw_alarmsSource+0x136>
	    case BLUETOOTH:
		draw_text(buffer, (char*) Bluetooth, 110, 45, 5);
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <draw_alarmsSource+0x154>)
 80054aa:	6819      	ldr	r1, [r3, #0]
 80054ac:	2305      	movs	r3, #5
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	232d      	movs	r3, #45	; 0x2d
 80054b2:	226e      	movs	r2, #110	; 0x6e
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fd fc37 	bl	8002d28 <draw_text>
		break;
 80054ba:	e00a      	b.n	80054d2 <draw_alarmsSource+0x136>
	    case MICROPHONE:
		draw_text(buffer, (char*) Microphone, 110, 45, 5);
 80054bc:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <draw_alarmsSource+0x158>)
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	2305      	movs	r3, #5
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	232d      	movs	r3, #45	; 0x2d
 80054c6:	226e      	movs	r2, #110	; 0x6e
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7fd fc2d 	bl	8002d28 <draw_text>
		break;
 80054ce:	e000      	b.n	80054d2 <draw_alarmsSource+0x136>
	    default:
		break;
 80054d0:	bf00      	nop
	    }
    }
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	0801a758 	.word	0x0801a758
 80054e0:	20007c18 	.word	0x20007c18
 80054e4:	20000050 	.word	0x20000050
 80054e8:	20000054 	.word	0x20000054
 80054ec:	20000058 	.word	0x20000058
 80054f0:	2000005c 	.word	0x2000005c
 80054f4:	20000060 	.word	0x20000060

080054f8 <draw_pointer>:


void draw_pointer(uint8_t *const buffer)
    {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	6078      	str	r0, [r7, #4]

	select_font(&FreeSerif24pt7b);
 8005500:	4828      	ldr	r0, [pc, #160]	; (80055a4 <draw_pointer+0xac>)
 8005502:	f7fd fb69 	bl	8002bd8 <select_font>
	switch (SettingsUserMenu.SETTINGS_USER_MENU)
 8005506:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <draw_pointer+0xb0>)
 8005508:	7c1b      	ldrb	r3, [r3, #16]
 800550a:	2b05      	cmp	r3, #5
 800550c:	d844      	bhi.n	8005598 <draw_pointer+0xa0>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <draw_pointer+0x1c>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	0800553f 	.word	0x0800553f
 8005518:	08005551 	.word	0x08005551
 800551c:	0800552d 	.word	0x0800552d
 8005520:	08005563 	.word	0x08005563
 8005524:	08005575 	.word	0x08005575
 8005528:	08005587 	.word	0x08005587
	    {
	    case REFRESH_SCREEN_TIME:
		draw_text(buffer, ".", 2, 11, 5);
 800552c:	2305      	movs	r3, #5
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	230b      	movs	r3, #11
 8005532:	2202      	movs	r2, #2
 8005534:	491d      	ldr	r1, [pc, #116]	; (80055ac <draw_pointer+0xb4>)
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fd fbf6 	bl	8002d28 <draw_text>
		break;
 800553c:	e02d      	b.n	800559a <draw_pointer+0xa2>
	    case ALARM_SOURCE_A:
		draw_text(buffer, ".", 2, 26, 5);
 800553e:	2305      	movs	r3, #5
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	231a      	movs	r3, #26
 8005544:	2202      	movs	r2, #2
 8005546:	4919      	ldr	r1, [pc, #100]	; (80055ac <draw_pointer+0xb4>)
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7fd fbed 	bl	8002d28 <draw_text>
		break;
 800554e:	e024      	b.n	800559a <draw_pointer+0xa2>
	    case ALARM_SOURCE_B:
		draw_text(buffer, ".", 2, 41, 5);
 8005550:	2305      	movs	r3, #5
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	2329      	movs	r3, #41	; 0x29
 8005556:	2202      	movs	r2, #2
 8005558:	4914      	ldr	r1, [pc, #80]	; (80055ac <draw_pointer+0xb4>)
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fd fbe4 	bl	8002d28 <draw_text>
		break;
 8005560:	e01b      	b.n	800559a <draw_pointer+0xa2>
	    case USER_NAME:
		draw_text(buffer, ".", 2, 56, 5);
 8005562:	2305      	movs	r3, #5
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2338      	movs	r3, #56	; 0x38
 8005568:	2202      	movs	r2, #2
 800556a:	4910      	ldr	r1, [pc, #64]	; (80055ac <draw_pointer+0xb4>)
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fd fbdb 	bl	8002d28 <draw_text>
		break;
 8005572:	e012      	b.n	800559a <draw_pointer+0xa2>
	    case DISPLAY_MODE_ON_OFF:
		draw_text(buffer, ".", 2, 11, 5);
 8005574:	2305      	movs	r3, #5
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	230b      	movs	r3, #11
 800557a:	2202      	movs	r2, #2
 800557c:	490b      	ldr	r1, [pc, #44]	; (80055ac <draw_pointer+0xb4>)
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fd fbd2 	bl	8002d28 <draw_text>
		break;
 8005584:	e009      	b.n	800559a <draw_pointer+0xa2>
	    case POWER_LED:
		draw_text(buffer, ".", 2, 26, 5);
 8005586:	2305      	movs	r3, #5
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	231a      	movs	r3, #26
 800558c:	2202      	movs	r2, #2
 800558e:	4907      	ldr	r1, [pc, #28]	; (80055ac <draw_pointer+0xb4>)
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fd fbc9 	bl	8002d28 <draw_text>
		break;
 8005596:	e000      	b.n	800559a <draw_pointer+0xa2>
	    default:
		break;
 8005598:	bf00      	nop
	    }
    }
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	0801d524 	.word	0x0801d524
 80055a8:	20007c18 	.word	0x20007c18
 80055ac:	08017fe0 	.word	0x08017fe0

080055b0 <draw_refreshTime>:


void draw_refreshTime(uint8_t *const buffer)
    {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	6078      	str	r0, [r7, #4]
	switch (SettingsUserMenu.RefreshScreenTime)
 80055b8:	4b32      	ldr	r3, [pc, #200]	; (8005684 <draw_refreshTime+0xd4>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d050      	beq.n	8005666 <draw_refreshTime+0xb6>
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	da56      	bge.n	8005678 <draw_refreshTime+0xc8>
 80055ca:	f24d 62d9 	movw	r2, #55001	; 0xd6d9
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01c      	beq.n	800560c <draw_refreshTime+0x5c>
 80055d2:	f24d 62d9 	movw	r2, #55001	; 0xd6d9
 80055d6:	4293      	cmp	r3, r2
 80055d8:	dc4e      	bgt.n	8005678 <draw_refreshTime+0xc8>
 80055da:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01d      	beq.n	800561e <draw_refreshTime+0x6e>
 80055e2:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 80055e6:	4293      	cmp	r3, r2
 80055e8:	dc46      	bgt.n	8005678 <draw_refreshTime+0xc8>
 80055ea:	f646 326c 	movw	r2, #27500	; 0x6b6c
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01e      	beq.n	8005630 <draw_refreshTime+0x80>
 80055f2:	f646 326c 	movw	r2, #27500	; 0x6b6c
 80055f6:	4293      	cmp	r3, r2
 80055f8:	dc3e      	bgt.n	8005678 <draw_refreshTime+0xc8>
 80055fa:	f241 12e4 	movw	r2, #4580	; 0x11e4
 80055fe:	4293      	cmp	r3, r2
 8005600:	d028      	beq.n	8005654 <draw_refreshTime+0xa4>
 8005602:	f243 52b6 	movw	r2, #13750	; 0x35b6
 8005606:	4293      	cmp	r3, r2
 8005608:	d01b      	beq.n	8005642 <draw_refreshTime+0x92>
		break;
	    case 65535:
		draw_text(buffer, "OFF", 160, 15, 5);
		break;
	    default:
		break;
 800560a:	e035      	b.n	8005678 <draw_refreshTime+0xc8>
		draw_text(buffer, "240 s", 160, 15, 5);
 800560c:	2305      	movs	r3, #5
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	230f      	movs	r3, #15
 8005612:	22a0      	movs	r2, #160	; 0xa0
 8005614:	491c      	ldr	r1, [pc, #112]	; (8005688 <draw_refreshTime+0xd8>)
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fd fb86 	bl	8002d28 <draw_text>
		break;
 800561c:	e02d      	b.n	800567a <draw_refreshTime+0xca>
		draw_text(buffer, "120 s", 160, 15, 5);
 800561e:	2305      	movs	r3, #5
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	230f      	movs	r3, #15
 8005624:	22a0      	movs	r2, #160	; 0xa0
 8005626:	4919      	ldr	r1, [pc, #100]	; (800568c <draw_refreshTime+0xdc>)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7fd fb7d 	bl	8002d28 <draw_text>
		break;
 800562e:	e024      	b.n	800567a <draw_refreshTime+0xca>
		draw_text(buffer, "60 s", 160, 15, 5);
 8005630:	2305      	movs	r3, #5
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	230f      	movs	r3, #15
 8005636:	22a0      	movs	r2, #160	; 0xa0
 8005638:	4915      	ldr	r1, [pc, #84]	; (8005690 <draw_refreshTime+0xe0>)
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fd fb74 	bl	8002d28 <draw_text>
		break;
 8005640:	e01b      	b.n	800567a <draw_refreshTime+0xca>
		draw_text(buffer, "30 s", 160, 15, 5);
 8005642:	2305      	movs	r3, #5
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	230f      	movs	r3, #15
 8005648:	22a0      	movs	r2, #160	; 0xa0
 800564a:	4912      	ldr	r1, [pc, #72]	; (8005694 <draw_refreshTime+0xe4>)
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7fd fb6b 	bl	8002d28 <draw_text>
		break;
 8005652:	e012      	b.n	800567a <draw_refreshTime+0xca>
		draw_text(buffer, "10 s", 160, 15, 5);
 8005654:	2305      	movs	r3, #5
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	230f      	movs	r3, #15
 800565a:	22a0      	movs	r2, #160	; 0xa0
 800565c:	490e      	ldr	r1, [pc, #56]	; (8005698 <draw_refreshTime+0xe8>)
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fd fb62 	bl	8002d28 <draw_text>
		break;
 8005664:	e009      	b.n	800567a <draw_refreshTime+0xca>
		draw_text(buffer, "OFF", 160, 15, 5);
 8005666:	2305      	movs	r3, #5
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	230f      	movs	r3, #15
 800566c:	22a0      	movs	r2, #160	; 0xa0
 800566e:	490b      	ldr	r1, [pc, #44]	; (800569c <draw_refreshTime+0xec>)
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7fd fb59 	bl	8002d28 <draw_text>
		break;
 8005676:	e000      	b.n	800567a <draw_refreshTime+0xca>
		break;
 8005678:	bf00      	nop
	    }
    }
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20007c18 	.word	0x20007c18
 8005688:	08017fe4 	.word	0x08017fe4
 800568c:	08017fec 	.word	0x08017fec
 8005690:	08017ff4 	.word	0x08017ff4
 8005694:	08017ffc 	.word	0x08017ffc
 8005698:	08018004 	.word	0x08018004
 800569c:	08017e14 	.word	0x08017e14

080056a0 <draw_powerLED>:


void draw_powerLED(uint8_t *const buffer)
    {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	6078      	str	r0, [r7, #4]

	select_font(&FreeMonoOblique9pt7b);
 80056a8:	4826      	ldr	r0, [pc, #152]	; (8005744 <draw_powerLED+0xa4>)
 80056aa:	f7fd fa95 	bl	8002bd8 <select_font>
	switch (SettingsUserMenu.Power_LED)
 80056ae:	4b26      	ldr	r3, [pc, #152]	; (8005748 <draw_powerLED+0xa8>)
 80056b0:	795b      	ldrb	r3, [r3, #5]
 80056b2:	3b01      	subs	r3, #1
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d83f      	bhi.n	8005738 <draw_powerLED+0x98>
 80056b8:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <draw_powerLED+0x20>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056d5 	.word	0x080056d5
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	08005711 	.word	0x08005711
 80056d0:	08005725 	.word	0x08005725
	    {
	    case POWER_OFF:
		draw_text(buffer, (char*) Power_OFF_str, 125, 30, 5);
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <draw_powerLED+0xac>)
 80056d6:	6819      	ldr	r1, [r3, #0]
 80056d8:	2305      	movs	r3, #5
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	231e      	movs	r3, #30
 80056de:	227d      	movs	r2, #125	; 0x7d
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fd fb21 	bl	8002d28 <draw_text>
		break;
 80056e6:	e028      	b.n	800573a <draw_powerLED+0x9a>
	    case POWER_ON:
		draw_text(buffer, (char*) Power_ON_str, 125, 30, 5);
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <draw_powerLED+0xb0>)
 80056ea:	6819      	ldr	r1, [r3, #0]
 80056ec:	2305      	movs	r3, #5
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	231e      	movs	r3, #30
 80056f2:	227d      	movs	r2, #125	; 0x7d
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7fd fb17 	bl	8002d28 <draw_text>
		break;
 80056fa:	e01e      	b.n	800573a <draw_powerLED+0x9a>
	    case Always_OFF:
		draw_text(buffer, (char*) Always_OFF_str, 125, 30, 5);
 80056fc:	4b15      	ldr	r3, [pc, #84]	; (8005754 <draw_powerLED+0xb4>)
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	2305      	movs	r3, #5
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	231e      	movs	r3, #30
 8005706:	227d      	movs	r2, #125	; 0x7d
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fd fb0d 	bl	8002d28 <draw_text>
		break;
 800570e:	e014      	b.n	800573a <draw_powerLED+0x9a>
	    case Always_ON:
		draw_text(buffer, (char*) Always_ON_str, 125, 30, 5);
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <draw_powerLED+0xb8>)
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	2305      	movs	r3, #5
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	231e      	movs	r3, #30
 800571a:	227d      	movs	r2, #125	; 0x7d
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fd fb03 	bl	8002d28 <draw_text>
		break;
 8005722:	e00a      	b.n	800573a <draw_powerLED+0x9a>
	    case Change_brigh:
		draw_text(buffer, (char*) Change_brigh_str, 125, 30, 5);
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <draw_powerLED+0xbc>)
 8005726:	6819      	ldr	r1, [r3, #0]
 8005728:	2305      	movs	r3, #5
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	231e      	movs	r3, #30
 800572e:	227d      	movs	r2, #125	; 0x7d
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7fd faf9 	bl	8002d28 <draw_text>
		break;
 8005736:	e000      	b.n	800573a <draw_powerLED+0x9a>
	    default:
		break;
 8005738:	bf00      	nop
	    }
    }
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	0801a758 	.word	0x0801a758
 8005748:	20007c18 	.word	0x20007c18
 800574c:	20000064 	.word	0x20000064
 8005750:	20000068 	.word	0x20000068
 8005754:	2000006c 	.word	0x2000006c
 8005758:	20000070 	.word	0x20000070
 800575c:	20000074 	.word	0x20000074

08005760 <draw_displayMode>:


void draw_displayMode(uint8_t *const buffer)
    {
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
	select_font(&FreeMonoOblique9pt7b);
 8005768:	4820      	ldr	r0, [pc, #128]	; (80057ec <draw_displayMode+0x8c>)
 800576a:	f7fd fa35 	bl	8002bd8 <select_font>
	switch (SettingsUserMenu.Display_mode)
 800576e:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <draw_displayMode+0x90>)
 8005770:	791b      	ldrb	r3, [r3, #4]
 8005772:	3b01      	subs	r3, #1
 8005774:	2b03      	cmp	r3, #3
 8005776:	d833      	bhi.n	80057e0 <draw_displayMode+0x80>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <draw_displayMode+0x20>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	08005791 	.word	0x08005791
 8005784:	080057a5 	.word	0x080057a5
 8005788:	080057b9 	.word	0x080057b9
 800578c:	080057cd 	.word	0x080057cd
	    {
	    case Disp_normal:
		draw_text(buffer, (char*) Disp_normal_str, 160, 15, 5);
 8005790:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <draw_displayMode+0x94>)
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	2305      	movs	r3, #5
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	230f      	movs	r3, #15
 800579a:	22a0      	movs	r2, #160	; 0xa0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fd fac3 	bl	8002d28 <draw_text>
		break;
 80057a2:	e01e      	b.n	80057e2 <draw_displayMode+0x82>
	    case Disp_changing:
		draw_text(buffer, (char*) Disp_changing_str, 160, 15, 5);
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <draw_displayMode+0x98>)
 80057a6:	6819      	ldr	r1, [r3, #0]
 80057a8:	2305      	movs	r3, #5
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	230f      	movs	r3, #15
 80057ae:	22a0      	movs	r2, #160	; 0xa0
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7fd fab9 	bl	8002d28 <draw_text>
		break;
 80057b6:	e014      	b.n	80057e2 <draw_displayMode+0x82>
	    case Disp_standby:
		draw_text(buffer, (char*) Disp_standby_str, 160, 15, 5);
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <draw_displayMode+0x9c>)
 80057ba:	6819      	ldr	r1, [r3, #0]
 80057bc:	2305      	movs	r3, #5
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	230f      	movs	r3, #15
 80057c2:	22a0      	movs	r2, #160	; 0xa0
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fd faaf 	bl	8002d28 <draw_text>
		break;
 80057ca:	e00a      	b.n	80057e2 <draw_displayMode+0x82>
	    case Disp_time:
		draw_text(buffer, (char*) Disp_time_str, 160, 15, 5);
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <draw_displayMode+0xa0>)
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	2305      	movs	r3, #5
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	230f      	movs	r3, #15
 80057d6:	22a0      	movs	r2, #160	; 0xa0
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fd faa5 	bl	8002d28 <draw_text>
		break;
 80057de:	e000      	b.n	80057e2 <draw_displayMode+0x82>
	    default:
		break;
 80057e0:	bf00      	nop
	    }
    }
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	0801a758 	.word	0x0801a758
 80057f0:	20007c18 	.word	0x20007c18
 80057f4:	20000078 	.word	0x20000078
 80057f8:	2000007c 	.word	0x2000007c
 80057fc:	20000080 	.word	0x20000080
 8005800:	20000084 	.word	0x20000084

08005804 <set_saved_display>:
// Operation on display state fuctions
//--------------------------------------------------------------


void set_saved_display(TIM_HandleTypeDef *htim)
    {
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	encoderVolFront.audioOutputState = MASTER;
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <set_saved_display+0x3c>)
 800580e:	2200      	movs	r2, #0
 8005810:	719a      	strb	r2, [r3, #6]
	encoderVolBack.audioOutputState = NORMAL;
 8005812:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <set_saved_display+0x40>)
 8005814:	2203      	movs	r2, #3
 8005816:	719a      	strb	r2, [r3, #6]
	SSD1322_Screen_State = SSD1322_Screen_State_Saved;
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <set_saved_display+0x44>)
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <set_saved_display+0x48>)
 800581e:	701a      	strb	r2, [r3, #0]
	SSD1322_Screen_State_Saved = 0;
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <set_saved_display+0x44>)
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Stop_IT(&htim15, TIM_CHANNEL_2);
 8005826:	2104      	movs	r1, #4
 8005828:	4809      	ldr	r0, [pc, #36]	; (8005850 <set_saved_display+0x4c>)
 800582a:	f00e faf3 	bl	8013e14 <HAL_TIM_OC_Stop_IT>
	htim->Instance->CNT = 0;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	625a      	str	r2, [r3, #36]	; 0x24
    }
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000554 	.word	0x20000554
 8005844:	20000518 	.word	0x20000518
 8005848:	20000506 	.word	0x20000506
 800584c:	200004f8 	.word	0x200004f8
 8005850:	200079b8 	.word	0x200079b8

08005854 <save_current_display_state>:


void save_current_display_state(SSD1322_Screen_t  Screen_State)
    {
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
	if (SSD1322_Screen_State != Screen_State)
 800585e:	4b23      	ldr	r3, [pc, #140]	; (80058ec <save_current_display_state+0x98>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	79fa      	ldrb	r2, [r7, #7]
 8005864:	429a      	cmp	r2, r3
 8005866:	d03a      	beq.n	80058de <save_current_display_state+0x8a>
	    {
		if (SSD1322_Screen_State != (11)
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <save_current_display_state+0x98>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b0b      	cmp	r3, #11
 800586e:	d033      	beq.n	80058d8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 20 && SSD1322_Screen_State != 21
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <save_current_display_state+0x98>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b14      	cmp	r3, #20
 8005876:	d02f      	beq.n	80058d8 <save_current_display_state+0x84>
 8005878:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <save_current_display_state+0x98>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b15      	cmp	r3, #21
 800587e:	d02b      	beq.n	80058d8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 22 && SSD1322_Screen_State != 23
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <save_current_display_state+0x98>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b16      	cmp	r3, #22
 8005886:	d027      	beq.n	80058d8 <save_current_display_state+0x84>
 8005888:	4b18      	ldr	r3, [pc, #96]	; (80058ec <save_current_display_state+0x98>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b17      	cmp	r3, #23
 800588e:	d023      	beq.n	80058d8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 24 && SSD1322_Screen_State != 30
 8005890:	4b16      	ldr	r3, [pc, #88]	; (80058ec <save_current_display_state+0x98>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b18      	cmp	r3, #24
 8005896:	d01f      	beq.n	80058d8 <save_current_display_state+0x84>
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <save_current_display_state+0x98>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b1e      	cmp	r3, #30
 800589e:	d01b      	beq.n	80058d8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 31 && SSD1322_Screen_State != 32
 80058a0:	4b12      	ldr	r3, [pc, #72]	; (80058ec <save_current_display_state+0x98>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b1f      	cmp	r3, #31
 80058a6:	d017      	beq.n	80058d8 <save_current_display_state+0x84>
 80058a8:	4b10      	ldr	r3, [pc, #64]	; (80058ec <save_current_display_state+0x98>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d013      	beq.n	80058d8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 33 && SSD1322_Screen_State != 34
 80058b0:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <save_current_display_state+0x98>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b21      	cmp	r3, #33	; 0x21
 80058b6:	d00f      	beq.n	80058d8 <save_current_display_state+0x84>
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <save_current_display_state+0x98>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b22      	cmp	r3, #34	; 0x22
 80058be:	d00b      	beq.n	80058d8 <save_current_display_state+0x84>
			&& SSD1322_Screen_State != 35 && SSD1322_Screen_State != 36)
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <save_current_display_state+0x98>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b23      	cmp	r3, #35	; 0x23
 80058c6:	d007      	beq.n	80058d8 <save_current_display_state+0x84>
 80058c8:	4b08      	ldr	r3, [pc, #32]	; (80058ec <save_current_display_state+0x98>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b24      	cmp	r3, #36	; 0x24
 80058ce:	d003      	beq.n	80058d8 <save_current_display_state+0x84>
		    {
			SSD1322_Screen_State_Saved = SSD1322_Screen_State;
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <save_current_display_state+0x98>)
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <save_current_display_state+0x9c>)
 80058d6:	701a      	strb	r2, [r3, #0]
		    }
		SSD1322_Screen_State = Screen_State;
 80058d8:	4a04      	ldr	r2, [pc, #16]	; (80058ec <save_current_display_state+0x98>)
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	7013      	strb	r3, [r2, #0]
	    }
    }
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	200004f8 	.word	0x200004f8
 80058f0:	20000506 	.word	0x20000506

080058f4 <change_display_state>:


void change_display_state(TIM_HandleTypeDef *htim)
    {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	if (SettingsUserMenu.RefreshScreenTime != 65535) // change display if timer is set
 80058fc:	4b20      	ldr	r3, [pc, #128]	; (8005980 <change_display_state+0x8c>)
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005904:	4293      	cmp	r3, r2
 8005906:	d037      	beq.n	8005978 <change_display_state+0x84>
	    {
		if ((SSD1322_Screen_State >= SSD1322_SCREEN_TIME)
 8005908:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <change_display_state+0x90>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d033      	beq.n	8005978 <change_display_state+0x84>
			&& (SSD1322_Screen_State <= SSD1322_SCREEN_TIME_BOUNCING))
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <change_display_state+0x90>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b05      	cmp	r3, #5
 8005916:	d82f      	bhi.n	8005978 <change_display_state+0x84>
		    {
			SSD1322_Screen_State++;
 8005918:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <change_display_state+0x90>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	b2da      	uxtb	r2, r3
 8005920:	4b18      	ldr	r3, [pc, #96]	; (8005984 <change_display_state+0x90>)
 8005922:	701a      	strb	r2, [r3, #0]
			if (SSD1322_SCREEN_SETINPUT == SSD1322_Screen_State)
 8005924:	4b17      	ldr	r3, [pc, #92]	; (8005984 <change_display_state+0x90>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d102      	bne.n	8005932 <change_display_state+0x3e>
			    SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800592c:	4b15      	ldr	r3, [pc, #84]	; (8005984 <change_display_state+0x90>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
			htim->Instance->CNT = 0;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2200      	movs	r2, #0
 8005938:	625a      	str	r2, [r3, #36]	; 0x24

			/* Check if ADC is needed */
			if ((SSD1322_Screen_State == SSD1322_SCREEN_UVMETER)
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <change_display_state+0x90>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d003      	beq.n	800594a <change_display_state+0x56>
				|| (SSD1322_Screen_State == SSD1322_SCREEN_FFT))
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <change_display_state+0x90>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b03      	cmp	r3, #3
 8005948:	d10d      	bne.n	8005966 <change_display_state+0x72>
			    {
				HAL_TIM_Base_Start(&htim6);
 800594a:	480f      	ldr	r0, [pc, #60]	; (8005988 <change_display_state+0x94>)
 800594c:	f00e f828 	bl	80139a0 <HAL_TIM_Base_Start>
				HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_SamplesTEST, UV_meter_numb_of_chan);
 8005950:	4b0e      	ldr	r3, [pc, #56]	; (800598c <change_display_state+0x98>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	490e      	ldr	r1, [pc, #56]	; (8005990 <change_display_state+0x9c>)
 8005958:	480e      	ldr	r0, [pc, #56]	; (8005994 <change_display_state+0xa0>)
 800595a:	f007 fd49 	bl	800d3f0 <HAL_ADC_Start_DMA>
				ADC_IS_ON_flag = true;
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <change_display_state+0xa4>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Stop_DMA(&hadc1);
				ADC_IS_ON_flag = false;
			    }
		    }
	    }
    }
 8005964:	e008      	b.n	8005978 <change_display_state+0x84>
				HAL_TIM_Base_Stop(&htim6);
 8005966:	4808      	ldr	r0, [pc, #32]	; (8005988 <change_display_state+0x94>)
 8005968:	f00e f882 	bl	8013a70 <HAL_TIM_Base_Stop>
				HAL_ADC_Stop_DMA(&hadc1);
 800596c:	4809      	ldr	r0, [pc, #36]	; (8005994 <change_display_state+0xa0>)
 800596e:	f007 fdf3 	bl	800d558 <HAL_ADC_Stop_DMA>
				ADC_IS_ON_flag = false;
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <change_display_state+0xa4>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
    }
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20007c18 	.word	0x20007c18
 8005984:	200004f8 	.word	0x200004f8
 8005988:	20007ae8 	.word	0x20007ae8
 800598c:	200000a8 	.word	0x200000a8
 8005990:	200057c0 	.word	0x200057c0
 8005994:	200005e0 	.word	0x200005e0
 8005998:	200001e8 	.word	0x200001e8

0800599c <refresh_timer_state>:


void refresh_timer_state(void)
    {
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	if (TIM_CHANNEL_STATE_GET(&htim15, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_READY)
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <refresh_timer_state+0x30>)
 80059a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d103      	bne.n	80059b4 <refresh_timer_state+0x18>
	    {
		HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_2);
 80059ac:	2104      	movs	r1, #4
 80059ae:	4807      	ldr	r0, [pc, #28]	; (80059cc <refresh_timer_state+0x30>)
 80059b0:	f00e f8dc 	bl	8013b6c <HAL_TIM_OC_Start_IT>
	    }
	if (TIM_CHANNEL_STATE_GET(&htim15, TIM_CHANNEL_2) == HAL_TIM_CHANNEL_STATE_BUSY)
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <refresh_timer_state+0x30>)
 80059b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d103      	bne.n	80059c8 <refresh_timer_state+0x2c>
	    {
		htim15.Instance->CNT = 0;
 80059c0:	4b02      	ldr	r3, [pc, #8]	; (80059cc <refresh_timer_state+0x30>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24
	    }
    }
 80059c8:	bf00      	nop
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200079b8 	.word	0x200079b8

080059d0 <ChangeDateToArrayChar>:


void ChangeDateToArrayChar(uint16_t frq)
    {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	80fb      	strh	r3, [r7, #6]
	if (frq >= RADIO_100MHZ_FREQ && frq <= RADIO_MAX_FREQ)
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059e0:	d33a      	bcc.n	8005a58 <ChangeDateToArrayChar+0x88>
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	f5b3 6f89 	cmp.w	r3, #1096	; 0x448
 80059e8:	d236      	bcs.n	8005a58 <ChangeDateToArrayChar+0x88>
	    {
		ConvertArrayCharLong[4] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, frq);
 80059ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ee:	4619      	mov	r1, r3
 80059f0:	2000      	movs	r0, #0
 80059f2:	f004 fb5b 	bl	800a0ac <SplitNumberToDignits>
 80059f6:	4603      	mov	r3, r0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	3330      	adds	r3, #48	; 0x30
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4b39      	ldr	r3, [pc, #228]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a00:	711a      	strb	r2, [r3, #4]
		ConvertArrayCharLong[3] = PRZECINEK;
 8005a02:	4b38      	ldr	r3, [pc, #224]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a04:	222c      	movs	r2, #44	; 0x2c
 8005a06:	70da      	strb	r2, [r3, #3]
		ConvertArrayCharLong[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, frq);
 8005a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f004 fb4c 	bl	800a0ac <SplitNumberToDignits>
 8005a14:	4603      	mov	r3, r0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3330      	adds	r3, #48	; 0x30
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a1e:	709a      	strb	r2, [r3, #2]
		ConvertArrayCharLong[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(2, frq);
 8005a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a24:	4619      	mov	r1, r3
 8005a26:	2002      	movs	r0, #2
 8005a28:	f004 fb40 	bl	800a0ac <SplitNumberToDignits>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	3330      	adds	r3, #48	; 0x30
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a36:	705a      	strb	r2, [r3, #1]
		ConvertArrayCharLong[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(3, frq);
 8005a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	2003      	movs	r0, #3
 8005a40:	f004 fb34 	bl	800a0ac <SplitNumberToDignits>
 8005a44:	4603      	mov	r3, r0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	3330      	adds	r3, #48	; 0x30
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a4e:	701a      	strb	r2, [r3, #0]
		ConvertArrayCharLong[5] = ASCII_NULL;
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	715a      	strb	r2, [r3, #5]
 8005a56:	e040      	b.n	8005ada <ChangeDateToArrayChar+0x10a>
	    }
	else if (frq < RADIO_100MHZ_FREQ && frq >= RADIO_MIN_FREQ)
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a5e:	d22e      	bcs.n	8005abe <ChangeDateToArrayChar+0xee>
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	f5b3 7f5d 	cmp.w	r3, #884	; 0x374
 8005a66:	d92a      	bls.n	8005abe <ChangeDateToArrayChar+0xee>
	    {
		ConvertArrayCharLong[3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, frq);
 8005a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f004 fb1c 	bl	800a0ac <SplitNumberToDignits>
 8005a74:	4603      	mov	r3, r0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3330      	adds	r3, #48	; 0x30
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a7e:	70da      	strb	r2, [r3, #3]
		ConvertArrayCharLong[2] = PRZECINEK;
 8005a80:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a82:	222c      	movs	r2, #44	; 0x2c
 8005a84:	709a      	strb	r2, [r3, #2]
		ConvertArrayCharLong[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, frq);
 8005a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	f004 fb0d 	bl	800a0ac <SplitNumberToDignits>
 8005a92:	4603      	mov	r3, r0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	3330      	adds	r3, #48	; 0x30
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005a9c:	705a      	strb	r2, [r3, #1]
		ConvertArrayCharLong[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(2, frq);
 8005a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	2002      	movs	r0, #2
 8005aa6:	f004 fb01 	bl	800a0ac <SplitNumberToDignits>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	3330      	adds	r3, #48	; 0x30
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005ab4:	701a      	strb	r2, [r3, #0]
		ConvertArrayCharLong[4] = ASCII_NULL;
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	711a      	strb	r2, [r3, #4]
 8005abc:	e00d      	b.n	8005ada <ChangeDateToArrayChar+0x10a>
	    }
	else //Invalid frq value
	    {
		for (uint8_t i = 0; i < 5; ++i)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
 8005ac2:	e006      	b.n	8005ad2 <ChangeDateToArrayChar+0x102>
		    {
			ConvertArrayCharLong[i] = 0;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	4a07      	ldr	r2, [pc, #28]	; (8005ae4 <ChangeDateToArrayChar+0x114>)
 8005ac8:	2100      	movs	r1, #0
 8005aca:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 5; ++i)
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	73fb      	strb	r3, [r7, #15]
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d9f5      	bls.n	8005ac4 <ChangeDateToArrayChar+0xf4>
		    }
	    }
    }
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000180 	.word	0x20000180

08005ae8 <ChangeDateToArrayCharTime>:


void ChangeDateToArrayCharTime(char *arrayChar, uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t mode)

    {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	4608      	mov	r0, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	461a      	mov	r2, r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	70fb      	strb	r3, [r7, #3]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70bb      	strb	r3, [r7, #2]
 8005afe:	4613      	mov	r3, r2
 8005b00:	707b      	strb	r3, [r7, #1]
	if (hours < 9)
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d857      	bhi.n	8005bb8 <ChangeDateToArrayCharTime+0xd0>
	    {
		arrayChar[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, hours);
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	b21b      	sxth	r3, r3
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f004 facc 	bl	800a0ac <SplitNumberToDignits>
 8005b14:	4603      	mov	r3, r0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	3330      	adds	r3, #48	; 0x30
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	701a      	strb	r2, [r3, #0]
		arrayChar[1] = ASCII_DWUKROPEK;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3301      	adds	r3, #1
 8005b24:	223a      	movs	r2, #58	; 0x3a
 8005b26:	701a      	strb	r2, [r3, #0]
		arrayChar[2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, minutes);
 8005b28:	78bb      	ldrb	r3, [r7, #2]
 8005b2a:	b21b      	sxth	r3, r3
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	2001      	movs	r0, #1
 8005b30:	f004 fabc 	bl	800a0ac <SplitNumberToDignits>
 8005b34:	4603      	mov	r3, r0
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3302      	adds	r3, #2
 8005b3c:	3230      	adds	r2, #48	; 0x30
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
		arrayChar[3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, minutes);
 8005b42:	78bb      	ldrb	r3, [r7, #2]
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	4619      	mov	r1, r3
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f004 faaf 	bl	800a0ac <SplitNumberToDignits>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3303      	adds	r3, #3
 8005b56:	3230      	adds	r2, #48	; 0x30
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
		if (0 == mode)
 8005b5c:	7c3b      	ldrb	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d122      	bne.n	8005ba8 <ChangeDateToArrayCharTime+0xc0>
		    {
			arrayChar[4] = ASCII_DWUKROPEK;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	223a      	movs	r2, #58	; 0x3a
 8005b68:	701a      	strb	r2, [r3, #0]
			arrayChar[5] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, seconds);
 8005b6a:	787b      	ldrb	r3, [r7, #1]
 8005b6c:	b21b      	sxth	r3, r3
 8005b6e:	4619      	mov	r1, r3
 8005b70:	2001      	movs	r0, #1
 8005b72:	f004 fa9b 	bl	800a0ac <SplitNumberToDignits>
 8005b76:	4603      	mov	r3, r0
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3305      	adds	r3, #5
 8005b7e:	3230      	adds	r2, #48	; 0x30
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
			arrayChar[6] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, seconds);
 8005b84:	787b      	ldrb	r3, [r7, #1]
 8005b86:	b21b      	sxth	r3, r3
 8005b88:	4619      	mov	r1, r3
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f004 fa8e 	bl	800a0ac <SplitNumberToDignits>
 8005b90:	4603      	mov	r3, r0
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3306      	adds	r3, #6
 8005b98:	3230      	adds	r2, #48	; 0x30
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
			arrayChar[7] = ASCII_NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3307      	adds	r3, #7
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
		    {
			arrayChar[5] = ASCII_NULL;
		    }
	    }

    }
 8005ba6:	e071      	b.n	8005c8c <ChangeDateToArrayCharTime+0x1a4>
		else if (1 == mode)
 8005ba8:	7c3b      	ldrb	r3, [r7, #16]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d16e      	bne.n	8005c8c <ChangeDateToArrayCharTime+0x1a4>
			arrayChar[4] = ASCII_NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
    }
 8005bb6:	e069      	b.n	8005c8c <ChangeDateToArrayCharTime+0x1a4>
	else if (hours <= 24 && hours >= 10)
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	2b18      	cmp	r3, #24
 8005bbc:	d866      	bhi.n	8005c8c <ChangeDateToArrayCharTime+0x1a4>
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	d963      	bls.n	8005c8c <ChangeDateToArrayCharTime+0x1a4>
		arrayChar[0] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, hours);
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	b21b      	sxth	r3, r3
 8005bc8:	4619      	mov	r1, r3
 8005bca:	2001      	movs	r0, #1
 8005bcc:	f004 fa6e 	bl	800a0ac <SplitNumberToDignits>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	3330      	adds	r3, #48	; 0x30
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	701a      	strb	r2, [r3, #0]
		arrayChar[1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, hours);
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	2000      	movs	r0, #0
 8005be4:	f004 fa62 	bl	800a0ac <SplitNumberToDignits>
 8005be8:	4603      	mov	r3, r0
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	3230      	adds	r2, #48	; 0x30
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
		arrayChar[2] = ASCII_DWUKROPEK;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	223a      	movs	r2, #58	; 0x3a
 8005bfc:	701a      	strb	r2, [r3, #0]
		arrayChar[3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, minutes);
 8005bfe:	78bb      	ldrb	r3, [r7, #2]
 8005c00:	b21b      	sxth	r3, r3
 8005c02:	4619      	mov	r1, r3
 8005c04:	2001      	movs	r0, #1
 8005c06:	f004 fa51 	bl	800a0ac <SplitNumberToDignits>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3303      	adds	r3, #3
 8005c12:	3230      	adds	r2, #48	; 0x30
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
		arrayChar[4] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, minutes);
 8005c18:	78bb      	ldrb	r3, [r7, #2]
 8005c1a:	b21b      	sxth	r3, r3
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f004 fa44 	bl	800a0ac <SplitNumberToDignits>
 8005c24:	4603      	mov	r3, r0
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	3230      	adds	r2, #48	; 0x30
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
		if (0 == mode)
 8005c32:	7c3b      	ldrb	r3, [r7, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d122      	bne.n	8005c7e <ChangeDateToArrayCharTime+0x196>
			arrayChar[5] = ASCII_DWUKROPEK;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3305      	adds	r3, #5
 8005c3c:	223a      	movs	r2, #58	; 0x3a
 8005c3e:	701a      	strb	r2, [r3, #0]
			arrayChar[6] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, seconds);
 8005c40:	787b      	ldrb	r3, [r7, #1]
 8005c42:	b21b      	sxth	r3, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	2001      	movs	r0, #1
 8005c48:	f004 fa30 	bl	800a0ac <SplitNumberToDignits>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3306      	adds	r3, #6
 8005c54:	3230      	adds	r2, #48	; 0x30
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
			arrayChar[7] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, seconds);
 8005c5a:	787b      	ldrb	r3, [r7, #1]
 8005c5c:	b21b      	sxth	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	2000      	movs	r0, #0
 8005c62:	f004 fa23 	bl	800a0ac <SplitNumberToDignits>
 8005c66:	4603      	mov	r3, r0
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3307      	adds	r3, #7
 8005c6e:	3230      	adds	r2, #48	; 0x30
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
			arrayChar[8] = ASCII_NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3308      	adds	r3, #8
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
    }
 8005c7c:	e006      	b.n	8005c8c <ChangeDateToArrayCharTime+0x1a4>
		else if (1 == mode)
 8005c7e:	7c3b      	ldrb	r3, [r7, #16]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d103      	bne.n	8005c8c <ChangeDateToArrayCharTime+0x1a4>
			arrayChar[5] = ASCII_NULL;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3305      	adds	r3, #5
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
    }
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <ConvertDateToBuffer>:


void ConvertDateToBuffer(uint16_t Year, uint8_t Month, uint8_t WeekDay, uint8_t Date)
    {
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	80fb      	strh	r3, [r7, #6]
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	717b      	strb	r3, [r7, #5]
 8005caa:	460b      	mov	r3, r1
 8005cac:	713b      	strb	r3, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 40; ++i)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
 8005cba:	e006      	b.n	8005cca <ConvertDateToBuffer+0x36>
	    {
		TestingArray[i] = 0;
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4a97      	ldr	r2, [pc, #604]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 40; ++i)
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b27      	cmp	r3, #39	; 0x27
 8005cce:	d9f5      	bls.n	8005cbc <ConvertDateToBuffer+0x28>
	    }
	switch (WeekDay)
 8005cd0:	793b      	ldrb	r3, [r7, #4]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	2b06      	cmp	r3, #6
 8005cd6:	d842      	bhi.n	8005d5e <ConvertDateToBuffer+0xca>
 8005cd8:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <ConvertDateToBuffer+0x4c>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005cfd 	.word	0x08005cfd
 8005ce4:	08005d0b 	.word	0x08005d0b
 8005ce8:	08005d19 	.word	0x08005d19
 8005cec:	08005d27 	.word	0x08005d27
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d43 	.word	0x08005d43
 8005cf8:	08005d51 	.word	0x08005d51
	    {
	    case 1:
		strcat(TestingArray, Poniedzialek);
 8005cfc:	4b88      	ldr	r3, [pc, #544]	; (8005f20 <ConvertDateToBuffer+0x28c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4619      	mov	r1, r3
 8005d02:	4886      	ldr	r0, [pc, #536]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d04:	f00f ffa4 	bl	8015c50 <strcat>
		break;
 8005d08:	e02a      	b.n	8005d60 <ConvertDateToBuffer+0xcc>
	    case 2:
		strcat(TestingArray, Wtorek);
 8005d0a:	4b86      	ldr	r3, [pc, #536]	; (8005f24 <ConvertDateToBuffer+0x290>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4882      	ldr	r0, [pc, #520]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d12:	f00f ff9d 	bl	8015c50 <strcat>
		break;
 8005d16:	e023      	b.n	8005d60 <ConvertDateToBuffer+0xcc>
	    case 3:
		strcat(TestingArray, Sroda);
 8005d18:	4b83      	ldr	r3, [pc, #524]	; (8005f28 <ConvertDateToBuffer+0x294>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	487f      	ldr	r0, [pc, #508]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d20:	f00f ff96 	bl	8015c50 <strcat>
		break;
 8005d24:	e01c      	b.n	8005d60 <ConvertDateToBuffer+0xcc>
	    case 4:
		strcat(TestingArray, Czwartek);
 8005d26:	4b81      	ldr	r3, [pc, #516]	; (8005f2c <ConvertDateToBuffer+0x298>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	487b      	ldr	r0, [pc, #492]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d2e:	f00f ff8f 	bl	8015c50 <strcat>
		break;
 8005d32:	e015      	b.n	8005d60 <ConvertDateToBuffer+0xcc>
	    case 5:
		strcat(TestingArray, Piatek);
 8005d34:	4b7e      	ldr	r3, [pc, #504]	; (8005f30 <ConvertDateToBuffer+0x29c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4878      	ldr	r0, [pc, #480]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d3c:	f00f ff88 	bl	8015c50 <strcat>
		break;
 8005d40:	e00e      	b.n	8005d60 <ConvertDateToBuffer+0xcc>
	    case 6:
		strcat(TestingArray, Sobota);
 8005d42:	4b7c      	ldr	r3, [pc, #496]	; (8005f34 <ConvertDateToBuffer+0x2a0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4619      	mov	r1, r3
 8005d48:	4874      	ldr	r0, [pc, #464]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d4a:	f00f ff81 	bl	8015c50 <strcat>
		break;
 8005d4e:	e007      	b.n	8005d60 <ConvertDateToBuffer+0xcc>
	    case 7:
		strcat(TestingArray, Niedziela);
 8005d50:	4b79      	ldr	r3, [pc, #484]	; (8005f38 <ConvertDateToBuffer+0x2a4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4619      	mov	r1, r3
 8005d56:	4871      	ldr	r0, [pc, #452]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d58:	f00f ff7a 	bl	8015c50 <strcat>
		break;
 8005d5c:	e000      	b.n	8005d60 <ConvertDateToBuffer+0xcc>
	    default:
		break;
 8005d5e:	bf00      	nop
	    }

	temp = strlen(TestingArray);
 8005d60:	486e      	ldr	r0, [pc, #440]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d62:	f7fa fab7 	bl	80002d4 <strlen>
 8005d66:	4603      	mov	r3, r0
 8005d68:	73bb      	strb	r3, [r7, #14]
	TestingArray[temp] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, Date);
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	b21b      	sxth	r3, r3
 8005d6e:	4619      	mov	r1, r3
 8005d70:	2001      	movs	r0, #1
 8005d72:	f004 f99b 	bl	800a0ac <SplitNumberToDignits>
 8005d76:	4603      	mov	r3, r0
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
 8005d7c:	3230      	adds	r2, #48	; 0x30
 8005d7e:	b2d1      	uxtb	r1, r2
 8005d80:	4a66      	ldr	r2, [pc, #408]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d82:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, Date);
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	b21b      	sxth	r3, r3
 8005d88:	4619      	mov	r1, r3
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f004 f98e 	bl	800a0ac <SplitNumberToDignits>
 8005d90:	4603      	mov	r3, r0
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	3301      	adds	r3, #1
 8005d98:	3230      	adds	r2, #48	; 0x30
 8005d9a:	b2d1      	uxtb	r1, r2
 8005d9c:	4a5f      	ldr	r2, [pc, #380]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005d9e:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 2] = PRZECINEK;
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	3302      	adds	r3, #2
 8005da4:	4a5d      	ldr	r2, [pc, #372]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005da6:	212c      	movs	r1, #44	; 0x2c
 8005da8:	54d1      	strb	r1, [r2, r3]

	switch (Month)
 8005daa:	797b      	ldrb	r3, [r7, #5]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	2b0b      	cmp	r3, #11
 8005db0:	d86e      	bhi.n	8005e90 <ConvertDateToBuffer+0x1fc>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <ConvertDateToBuffer+0x124>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005de9 	.word	0x08005de9
 8005dbc:	08005df7 	.word	0x08005df7
 8005dc0:	08005e05 	.word	0x08005e05
 8005dc4:	08005e13 	.word	0x08005e13
 8005dc8:	08005e21 	.word	0x08005e21
 8005dcc:	08005e2f 	.word	0x08005e2f
 8005dd0:	08005e3d 	.word	0x08005e3d
 8005dd4:	08005e4b 	.word	0x08005e4b
 8005dd8:	08005e59 	.word	0x08005e59
 8005ddc:	08005e67 	.word	0x08005e67
 8005de0:	08005e75 	.word	0x08005e75
 8005de4:	08005e83 	.word	0x08005e83
	    {
	    case 1:
		strcat(TestingArray, Styczen);
 8005de8:	4b54      	ldr	r3, [pc, #336]	; (8005f3c <ConvertDateToBuffer+0x2a8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	484b      	ldr	r0, [pc, #300]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005df0:	f00f ff2e 	bl	8015c50 <strcat>
		break;
 8005df4:	e04d      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 2:
		strcat(TestingArray, Luty);
 8005df6:	4b52      	ldr	r3, [pc, #328]	; (8005f40 <ConvertDateToBuffer+0x2ac>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4847      	ldr	r0, [pc, #284]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005dfe:	f00f ff27 	bl	8015c50 <strcat>
		break;
 8005e02:	e046      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 3:
		strcat(TestingArray, Marzec);
 8005e04:	4b4f      	ldr	r3, [pc, #316]	; (8005f44 <ConvertDateToBuffer+0x2b0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4844      	ldr	r0, [pc, #272]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e0c:	f00f ff20 	bl	8015c50 <strcat>
		break;
 8005e10:	e03f      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 4:
		strcat(TestingArray, Kwiecien);
 8005e12:	4b4d      	ldr	r3, [pc, #308]	; (8005f48 <ConvertDateToBuffer+0x2b4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4619      	mov	r1, r3
 8005e18:	4840      	ldr	r0, [pc, #256]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e1a:	f00f ff19 	bl	8015c50 <strcat>
		break;
 8005e1e:	e038      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 5:
		strcat(TestingArray, Maj);
 8005e20:	4b4a      	ldr	r3, [pc, #296]	; (8005f4c <ConvertDateToBuffer+0x2b8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4619      	mov	r1, r3
 8005e26:	483d      	ldr	r0, [pc, #244]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e28:	f00f ff12 	bl	8015c50 <strcat>
		break;
 8005e2c:	e031      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 6:
		strcat(TestingArray, Czerwiec);
 8005e2e:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <ConvertDateToBuffer+0x2bc>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4619      	mov	r1, r3
 8005e34:	4839      	ldr	r0, [pc, #228]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e36:	f00f ff0b 	bl	8015c50 <strcat>
		break;
 8005e3a:	e02a      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 7:
		strcat(TestingArray, Lipiec);
 8005e3c:	4b45      	ldr	r3, [pc, #276]	; (8005f54 <ConvertDateToBuffer+0x2c0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4619      	mov	r1, r3
 8005e42:	4836      	ldr	r0, [pc, #216]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e44:	f00f ff04 	bl	8015c50 <strcat>
		break;
 8005e48:	e023      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 8:
		strcat(TestingArray, Sierpien);
 8005e4a:	4b43      	ldr	r3, [pc, #268]	; (8005f58 <ConvertDateToBuffer+0x2c4>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4832      	ldr	r0, [pc, #200]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e52:	f00f fefd 	bl	8015c50 <strcat>
		break;
 8005e56:	e01c      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 9:
		strcat(TestingArray, Wrzesien);
 8005e58:	4b40      	ldr	r3, [pc, #256]	; (8005f5c <ConvertDateToBuffer+0x2c8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	482f      	ldr	r0, [pc, #188]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e60:	f00f fef6 	bl	8015c50 <strcat>
		break;
 8005e64:	e015      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 10:
		strcat(TestingArray, Pazdziernik);
 8005e66:	4b3e      	ldr	r3, [pc, #248]	; (8005f60 <ConvertDateToBuffer+0x2cc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	482b      	ldr	r0, [pc, #172]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e6e:	f00f feef 	bl	8015c50 <strcat>
		break;
 8005e72:	e00e      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 11:
		strcat(TestingArray, Listopad);
 8005e74:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <ConvertDateToBuffer+0x2d0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4828      	ldr	r0, [pc, #160]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e7c:	f00f fee8 	bl	8015c50 <strcat>
		break;
 8005e80:	e007      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    case 12:
		strcat(TestingArray, Grudzien);
 8005e82:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <ConvertDateToBuffer+0x2d4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4619      	mov	r1, r3
 8005e88:	4824      	ldr	r0, [pc, #144]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e8a:	f00f fee1 	bl	8015c50 <strcat>
		break;
 8005e8e:	e000      	b.n	8005e92 <ConvertDateToBuffer+0x1fe>
	    default:
		break;
 8005e90:	bf00      	nop
	    }
	temp = strlen(TestingArray);
 8005e92:	4822      	ldr	r0, [pc, #136]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005e94:	f7fa fa1e 	bl	80002d4 <strlen>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73bb      	strb	r3, [r7, #14]
	TestingArray[temp] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(3, Year);
 8005e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2003      	movs	r0, #3
 8005ea4:	f004 f902 	bl	800a0ac <SplitNumberToDignits>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	3230      	adds	r2, #48	; 0x30
 8005eb0:	b2d1      	uxtb	r1, r2
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005eb4:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 1] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(2, Year);
 8005eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	2002      	movs	r0, #2
 8005ebe:	f004 f8f5 	bl	800a0ac <SplitNumberToDignits>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	3230      	adds	r2, #48	; 0x30
 8005ecc:	b2d1      	uxtb	r1, r2
 8005ece:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005ed0:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 2] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(1, Year);
 8005ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	2001      	movs	r0, #1
 8005eda:	f004 f8e7 	bl	800a0ac <SplitNumberToDignits>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	3230      	adds	r2, #48	; 0x30
 8005ee8:	b2d1      	uxtb	r1, r2
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005eec:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 3] = ASCII_DIGIT_OFFSET + SplitNumberToDignits(0, Year);
 8005eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	f004 f8d9 	bl	800a0ac <SplitNumberToDignits>
 8005efa:	4603      	mov	r3, r0
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	3303      	adds	r3, #3
 8005f02:	3230      	adds	r2, #48	; 0x30
 8005f04:	b2d1      	uxtb	r1, r2
 8005f06:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005f08:	54d1      	strb	r1, [r2, r3]
	TestingArray[temp + 4] = ASCII_NULL;
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4a03      	ldr	r2, [pc, #12]	; (8005f1c <ConvertDateToBuffer+0x288>)
 8005f10:	2100      	movs	r1, #0
 8005f12:	54d1      	strb	r1, [r2, r3]
    }
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd90      	pop	{r4, r7, pc}
 8005f1c:	20000158 	.word	0x20000158
 8005f20:	20000004 	.word	0x20000004
 8005f24:	20000008 	.word	0x20000008
 8005f28:	2000000c 	.word	0x2000000c
 8005f2c:	20000010 	.word	0x20000010
 8005f30:	20000014 	.word	0x20000014
 8005f34:	20000018 	.word	0x20000018
 8005f38:	2000001c 	.word	0x2000001c
 8005f3c:	20000020 	.word	0x20000020
 8005f40:	20000024 	.word	0x20000024
 8005f44:	20000028 	.word	0x20000028
 8005f48:	2000002c 	.word	0x2000002c
 8005f4c:	20000030 	.word	0x20000030
 8005f50:	20000034 	.word	0x20000034
 8005f54:	20000038 	.word	0x20000038
 8005f58:	2000003c 	.word	0x2000003c
 8005f5c:	20000040 	.word	0x20000040
 8005f60:	20000044 	.word	0x20000044
 8005f64:	20000048 	.word	0x20000048
 8005f68:	2000004c 	.word	0x2000004c

08005f6c <prepare_RDS_text>:


_Bool prepare_RDS_text(char *RDS_text)
    {
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

	//if first chars are empty spaces then its not a good string to display
	if ((RDStextbuffer[0] == ' ') && (RDStextbuffer[1] == ' ') && (RDStextbuffer[2] == ' ') && (RDStextbuffer[3] == ' '))
 8005f74:	4b32      	ldr	r3, [pc, #200]	; (8006040 <prepare_RDS_text+0xd4>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d10d      	bne.n	8005f98 <prepare_RDS_text+0x2c>
 8005f7c:	4b30      	ldr	r3, [pc, #192]	; (8006040 <prepare_RDS_text+0xd4>)
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d109      	bne.n	8005f98 <prepare_RDS_text+0x2c>
 8005f84:	4b2e      	ldr	r3, [pc, #184]	; (8006040 <prepare_RDS_text+0xd4>)
 8005f86:	789b      	ldrb	r3, [r3, #2]
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d105      	bne.n	8005f98 <prepare_RDS_text+0x2c>
 8005f8c:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <prepare_RDS_text+0xd4>)
 8005f8e:	78db      	ldrb	r3, [r3, #3]
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d101      	bne.n	8005f98 <prepare_RDS_text+0x2c>
	    {
		return false;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e04d      	b.n	8006034 <prepare_RDS_text+0xc8>
	    }
	if ((RDStextbuffer[0] == 0x00) && (RDStextbuffer[1] == 0x00) && (RDStextbuffer[2] == 0x00) && (RDStextbuffer[3] == 0x00))
 8005f98:	4b29      	ldr	r3, [pc, #164]	; (8006040 <prepare_RDS_text+0xd4>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <prepare_RDS_text+0x50>
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <prepare_RDS_text+0xd4>)
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <prepare_RDS_text+0x50>
 8005fa8:	4b25      	ldr	r3, [pc, #148]	; (8006040 <prepare_RDS_text+0xd4>)
 8005faa:	789b      	ldrb	r3, [r3, #2]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d105      	bne.n	8005fbc <prepare_RDS_text+0x50>
 8005fb0:	4b23      	ldr	r3, [pc, #140]	; (8006040 <prepare_RDS_text+0xd4>)
 8005fb2:	78db      	ldrb	r3, [r3, #3]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <prepare_RDS_text+0x50>
	    {
		return false;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e03b      	b.n	8006034 <prepare_RDS_text+0xc8>
	    }
	//checks for end of the string
	for (uint8_t i = 0; i < 66; i++)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e034      	b.n	800602c <prepare_RDS_text+0xc0>
	    {
		if (RDStextbuffer[i] == ' ' && RDStextbuffer[i + 1] == ' ' && RDStextbuffer[i + 2] == ' '&& RDStextbuffer[i + 3] == ' '&& RDStextbuffer[i + 4] == ' '&& RDStextbuffer[i + 5] == ' ')
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <prepare_RDS_text+0xd4>)
 8005fc6:	5cd3      	ldrb	r3, [r2, r3]
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d12c      	bne.n	8006026 <prepare_RDS_text+0xba>
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <prepare_RDS_text+0xd4>)
 8005fd2:	5cd3      	ldrb	r3, [r2, r3]
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d126      	bne.n	8006026 <prepare_RDS_text+0xba>
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	3302      	adds	r3, #2
 8005fdc:	4a18      	ldr	r2, [pc, #96]	; (8006040 <prepare_RDS_text+0xd4>)
 8005fde:	5cd3      	ldrb	r3, [r2, r3]
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d120      	bne.n	8006026 <prepare_RDS_text+0xba>
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	3303      	adds	r3, #3
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <prepare_RDS_text+0xd4>)
 8005fea:	5cd3      	ldrb	r3, [r2, r3]
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d11a      	bne.n	8006026 <prepare_RDS_text+0xba>
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4a12      	ldr	r2, [pc, #72]	; (8006040 <prepare_RDS_text+0xd4>)
 8005ff6:	5cd3      	ldrb	r3, [r2, r3]
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d114      	bne.n	8006026 <prepare_RDS_text+0xba>
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	3305      	adds	r3, #5
 8006000:	4a0f      	ldr	r2, [pc, #60]	; (8006040 <prepare_RDS_text+0xd4>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	2b20      	cmp	r3, #32
 8006006:	d10e      	bne.n	8006026 <prepare_RDS_text+0xba>
		    {

			RDStextbuffer[i] = 0x00; //add end of the string
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	4a0d      	ldr	r2, [pc, #52]	; (8006040 <prepare_RDS_text+0xd4>)
 800600c:	2100      	movs	r1, #0
 800600e:	54d1      	strb	r1, [r2, r3]
			if(i > 40)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b28      	cmp	r3, #40	; 0x28
 8006014:	d907      	bls.n	8006026 <prepare_RDS_text+0xba>
			    {
				RDS_text[i - 39] = RDStextbuffer[i];
 8006016:	7bfa      	ldrb	r2, [r7, #15]
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	3b27      	subs	r3, #39	; 0x27
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	440b      	add	r3, r1
 8006020:	4907      	ldr	r1, [pc, #28]	; (8006040 <prepare_RDS_text+0xd4>)
 8006022:	5c8a      	ldrb	r2, [r1, r2]
 8006024:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 66; i++)
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	3301      	adds	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b41      	cmp	r3, #65	; 0x41
 8006030:	d9c7      	bls.n	8005fc2 <prepare_RDS_text+0x56>
			    }
		    }

	    }

	return true;
 8006032:	2301      	movs	r3, #1
    }
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	200003a4 	.word	0x200003a4

08006044 <get_random_coords>:


_Bool  get_random_coords(uint32_t *random_x, uint32_t *random_y)
    {
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
	 uint32_t temp;
	 static uint32_t random2;

	if (hrng.ErrorCode == 2) //dać inny warunek, uniwersalny
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <get_random_coords+0x84>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d105      	bne.n	8006062 <get_random_coords+0x1e>
	    {
		HAL_RNG_DeInit(&hrng);
 8006056:	481c      	ldr	r0, [pc, #112]	; (80060c8 <get_random_coords+0x84>)
 8006058:	f00c fa3c 	bl	80124d4 <HAL_RNG_DeInit>
		HAL_RNG_Init(&hrng);
 800605c:	481a      	ldr	r0, [pc, #104]	; (80060c8 <get_random_coords+0x84>)
 800605e:	f00c f98f 	bl	8012380 <HAL_RNG_Init>
	    }

	HAL_RNG_GenerateRandomNumber(&hrng, &random2);
 8006062:	491a      	ldr	r1, [pc, #104]	; (80060cc <get_random_coords+0x88>)
 8006064:	4818      	ldr	r0, [pc, #96]	; (80060c8 <get_random_coords+0x84>)
 8006066:	f00c fa99 	bl	801259c <HAL_RNG_GenerateRandomNumber>
	if (hrng.Instance->SR == 1) //new random data ready
 800606a:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <get_random_coords+0x84>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d123      	bne.n	80060bc <get_random_coords+0x78>
	    {
		temp = hrng.RandomNumber;
 8006074:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <get_random_coords+0x84>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	60fb      	str	r3, [r7, #12]
		*random_x = (uint8_t) temp; 	   //get 8 bits
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
		*random_y = (uint8_t)(temp >> 26); //get other 6 bits
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	0e9b      	lsrs	r3, r3, #26
 8006088:	b2db      	uxtb	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	601a      	str	r2, [r3, #0]
		//don't let the clock be outside of display
		if(*random_x >= 195)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2bc2      	cmp	r3, #194	; 0xc2
 8006096:	d905      	bls.n	80060a4 <get_random_coords+0x60>
		    {
			*random_x -= 59;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f1a3 023b 	sub.w	r2, r3, #59	; 0x3b
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	601a      	str	r2, [r3, #0]
		    }
		if(*random_y <=  13)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b0d      	cmp	r3, #13
 80060aa:	d805      	bhi.n	80060b8 <get_random_coords+0x74>
		    {
			*random_y += 13;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f103 020d 	add.w	r2, r3, #13
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	601a      	str	r2, [r3, #0]
		    }
		return true;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <get_random_coords+0x7a>
	    }
	return false;
 80060bc:	2300      	movs	r3, #0
    }
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20007814 	.word	0x20007814
 80060cc:	200001dc 	.word	0x200001dc

080060d0 <make_array>:


void make_array(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	4608      	mov	r0, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	817b      	strh	r3, [r7, #10]
 80060e2:	460b      	mov	r3, r1
 80060e4:	813b      	strh	r3, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80060ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80060f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80060f8:	88f9      	ldrh	r1, [r7, #6]
 80060fa:	897b      	ldrh	r3, [r7, #10]
 80060fc:	1acb      	subs	r3, r1, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bfb8      	it	lt
 8006102:	425b      	neglt	r3, r3
 8006104:	429a      	cmp	r2, r3
 8006106:	bfcc      	ite	gt
 8006108:	2301      	movgt	r3, #1
 800610a:	2300      	movle	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	837b      	strh	r3, [r7, #26]
	if (steep == 1)
 8006110:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d10b      	bne.n	8006130 <make_array+0x60>
	{
		uint16_t tmp = y0;
 8006118:	893b      	ldrh	r3, [r7, #8]
 800611a:	833b      	strh	r3, [r7, #24]
		y0 = x0;
 800611c:	897b      	ldrh	r3, [r7, #10]
 800611e:	813b      	strh	r3, [r7, #8]
		x0 = tmp;
 8006120:	8b3b      	ldrh	r3, [r7, #24]
 8006122:	817b      	strh	r3, [r7, #10]
		tmp = y1;
 8006124:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006126:	833b      	strh	r3, [r7, #24]
		y1 = x1;
 8006128:	88fb      	ldrh	r3, [r7, #6]
 800612a:	853b      	strh	r3, [r7, #40]	; 0x28
		x1 = tmp;
 800612c:	8b3b      	ldrh	r3, [r7, #24]
 800612e:	80fb      	strh	r3, [r7, #6]
	}

	if (x0 > x1) //określa kierunek rysowania linii
 8006130:	897a      	ldrh	r2, [r7, #10]
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	429a      	cmp	r2, r3
 8006136:	d90b      	bls.n	8006150 <make_array+0x80>
	{
		uint16_t tmp = x0;
 8006138:	897b      	ldrh	r3, [r7, #10]
 800613a:	82fb      	strh	r3, [r7, #22]
		x0 = x1;
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	817b      	strh	r3, [r7, #10]
		x1 = tmp;
 8006140:	8afb      	ldrh	r3, [r7, #22]
 8006142:	80fb      	strh	r3, [r7, #6]
		tmp = y0;
 8006144:	893b      	ldrh	r3, [r7, #8]
 8006146:	82fb      	strh	r3, [r7, #22]
		y0 = y1;
 8006148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800614a:	813b      	strh	r3, [r7, #8]
		y1 = tmp;
 800614c:	8afb      	ldrh	r3, [r7, #22]
 800614e:	853b      	strh	r3, [r7, #40]	; 0x28
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	897b      	ldrh	r3, [r7, #10]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	b29b      	uxth	r3, r3
 8006158:	82bb      	strh	r3, [r7, #20]
	dy = abs(y1 - y0);
 800615a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800615c:	893b      	ldrh	r3, [r7, #8]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfb8      	it	lt
 8006164:	425b      	neglt	r3, r3
 8006166:	827b      	strh	r3, [r7, #18]

	int16_t err = dx / 2;
 8006168:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800616c:	0fda      	lsrs	r2, r3, #31
 800616e:	4413      	add	r3, r2
 8006170:	105b      	asrs	r3, r3, #1
 8006172:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8006174:	893a      	ldrh	r2, [r7, #8]
 8006176:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006178:	429a      	cmp	r2, r3
 800617a:	d202      	bcs.n	8006182 <make_array+0xb2>
	{
		ystep = 1;
 800617c:	2301      	movs	r3, #1
 800617e:	83bb      	strh	r3, [r7, #28]
 8006180:	e071      	b.n	8006266 <make_array+0x196>
	}
	else
	{
		ystep = -1;
 8006182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006186:	83bb      	strh	r3, [r7, #28]
	}

	for (; x0 <= x1; x0++)
 8006188:	e06d      	b.n	8006266 <make_array+0x196>
	{
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800618a:	2200      	movs	r2, #0
 800618c:	493b      	ldr	r1, [pc, #236]	; (800627c <make_array+0x1ac>)
 800618e:	483c      	ldr	r0, [pc, #240]	; (8006280 <make_array+0x1b0>)
 8006190:	f00c fb84 	bl	801289c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8006194:	2200      	movs	r2, #0
 8006196:	493b      	ldr	r1, [pc, #236]	; (8006284 <make_array+0x1b4>)
 8006198:	4839      	ldr	r0, [pc, #228]	; (8006280 <make_array+0x1b0>)
 800619a:	f00c fc69 	bl	8012a70 <HAL_RTC_GetDate>

		if (steep)
 800619e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d025      	beq.n	80061f2 <make_array+0x122>
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 80061a6:	4b38      	ldr	r3, [pc, #224]	; (8006288 <make_array+0x1b8>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d160      	bne.n	8006270 <make_array+0x1a0>
			fill_buffer(frame_buffer, 0);
 80061ae:	2100      	movs	r1, #0
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7fc faa9 	bl	8002708 <fill_buffer>
			HAL_Delay(50);
 80061b6:	2032      	movs	r0, #50	; 0x32
 80061b8:	f006 fd4c 	bl	800cc54 <HAL_Delay>
			ChangeDateToArrayCharTime(ConvertArrayCharTime, sTime.Hours, sTime.Minutes, sTime.Seconds, 0);
 80061bc:	4b2f      	ldr	r3, [pc, #188]	; (800627c <make_array+0x1ac>)
 80061be:	7819      	ldrb	r1, [r3, #0]
 80061c0:	4b2e      	ldr	r3, [pc, #184]	; (800627c <make_array+0x1ac>)
 80061c2:	785a      	ldrb	r2, [r3, #1]
 80061c4:	4b2d      	ldr	r3, [pc, #180]	; (800627c <make_array+0x1ac>)
 80061c6:	789b      	ldrb	r3, [r3, #2]
 80061c8:	2000      	movs	r0, #0
 80061ca:	9000      	str	r0, [sp, #0]
 80061cc:	482f      	ldr	r0, [pc, #188]	; (800628c <make_array+0x1bc>)
 80061ce:	f7ff fc8b 	bl	8005ae8 <ChangeDateToArrayCharTime>
			draw_text(frame_buffer, (char*) ConvertArrayCharTime, y0, x0, brightness);
 80061d2:	8979      	ldrh	r1, [r7, #10]
 80061d4:	893a      	ldrh	r2, [r7, #8]
 80061d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	460b      	mov	r3, r1
 80061de:	492b      	ldr	r1, [pc, #172]	; (800628c <make_array+0x1bc>)
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7fc fda1 	bl	8002d28 <draw_text>
			send_buffer_to_OLED(frame_buffer, 0, 0);
 80061e6:	2200      	movs	r2, #0
 80061e8:	2100      	movs	r1, #0
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7fc fdd0 	bl	8002d90 <send_buffer_to_OLED>
 80061f0:	e024      	b.n	800623c <make_array+0x16c>
		}
		else
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 80061f2:	4b25      	ldr	r3, [pc, #148]	; (8006288 <make_array+0x1b8>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d13c      	bne.n	8006274 <make_array+0x1a4>
			fill_buffer(frame_buffer, 0);
 80061fa:	2100      	movs	r1, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7fc fa83 	bl	8002708 <fill_buffer>
			HAL_Delay(50);
 8006202:	2032      	movs	r0, #50	; 0x32
 8006204:	f006 fd26 	bl	800cc54 <HAL_Delay>
			ChangeDateToArrayCharTime(ConvertArrayCharTime, sTime.Hours, sTime.Minutes, sTime.Seconds, 0);
 8006208:	4b1c      	ldr	r3, [pc, #112]	; (800627c <make_array+0x1ac>)
 800620a:	7819      	ldrb	r1, [r3, #0]
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <make_array+0x1ac>)
 800620e:	785a      	ldrb	r2, [r3, #1]
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <make_array+0x1ac>)
 8006212:	789b      	ldrb	r3, [r3, #2]
 8006214:	2000      	movs	r0, #0
 8006216:	9000      	str	r0, [sp, #0]
 8006218:	481c      	ldr	r0, [pc, #112]	; (800628c <make_array+0x1bc>)
 800621a:	f7ff fc65 	bl	8005ae8 <ChangeDateToArrayCharTime>
			draw_text(frame_buffer, (char*) ConvertArrayCharTime, x0, y0, brightness);
 800621e:	8939      	ldrh	r1, [r7, #8]
 8006220:	897a      	ldrh	r2, [r7, #10]
 8006222:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	460b      	mov	r3, r1
 800622a:	4918      	ldr	r1, [pc, #96]	; (800628c <make_array+0x1bc>)
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7fc fd7b 	bl	8002d28 <draw_text>
			send_buffer_to_OLED(frame_buffer, 0, 0);
 8006232:	2200      	movs	r2, #0
 8006234:	2100      	movs	r1, #0
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7fc fdaa 	bl	8002d90 <send_buffer_to_OLED>
			//można dodać flagę volatile która jest sprawdzana jeżeli zmieniono ekran
		}
		err -= dy;
 800623c:	8bfa      	ldrh	r2, [r7, #30]
 800623e:	8a7b      	ldrh	r3, [r7, #18]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	b29b      	uxth	r3, r3
 8006244:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8006246:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800624a:	2b00      	cmp	r3, #0
 800624c:	da08      	bge.n	8006260 <make_array+0x190>
		{
			y0 += ystep;
 800624e:	8bba      	ldrh	r2, [r7, #28]
 8006250:	893b      	ldrh	r3, [r7, #8]
 8006252:	4413      	add	r3, r2
 8006254:	813b      	strh	r3, [r7, #8]
			err += dx;
 8006256:	8bfa      	ldrh	r2, [r7, #30]
 8006258:	8abb      	ldrh	r3, [r7, #20]
 800625a:	4413      	add	r3, r2
 800625c:	b29b      	uxth	r3, r3
 800625e:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++)
 8006260:	897b      	ldrh	r3, [r7, #10]
 8006262:	3301      	adds	r3, #1
 8006264:	817b      	strh	r3, [r7, #10]
 8006266:	897a      	ldrh	r2, [r7, #10]
 8006268:	88fb      	ldrh	r3, [r7, #6]
 800626a:	429a      	cmp	r2, r3
 800626c:	d98d      	bls.n	800618a <make_array+0xba>
 800626e:	e002      	b.n	8006276 <make_array+0x1a6>
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 8006270:	bf00      	nop
 8006272:	e000      	b.n	8006276 <make_array+0x1a6>
		{	if(SSD1322_Screen_State != SSD1322_SCREEN_TIME_BOUNCING) return;
 8006274:	bf00      	nop
		}
	}
}
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	2000178c 	.word	0x2000178c
 8006280:	20007828 	.word	0x20007828
 8006284:	200057bc 	.word	0x200057bc
 8006288:	200004f8 	.word	0x200004f8
 800628c:	2000014c 	.word	0x2000014c

08006290 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite(uint16_t size, uint16_t offset)
    {
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	460a      	mov	r2, r1
 800629a:	80fb      	strh	r3, [r7, #6]
 800629c:	4613      	mov	r3, r2
 800629e:	80bb      	strh	r3, [r7, #4]
	if ((size + offset) < PAGE_SIZE)
 80062a0:	88fa      	ldrh	r2, [r7, #6]
 80062a2:	88bb      	ldrh	r3, [r7, #4]
 80062a4:	4413      	add	r3, r2
 80062a6:	2b3f      	cmp	r3, #63	; 0x3f
 80062a8:	dc01      	bgt.n	80062ae <bytestowrite+0x1e>
	    return size;
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	e003      	b.n	80062b6 <bytestowrite+0x26>
	else
	    return PAGE_SIZE - offset;
 80062ae:	88bb      	ldrh	r3, [r7, #4]
 80062b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80062b4:	b29b      	uxth	r3, r3
    }
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <EEPROM_Write>:
 *  @param[in] offset -  start byte offset in the page. Range from 0 to PAGE_SIZE-1
 *  @param[in] data is the pointer to the data to write in bytes
 *  @param[in] size is the size of the data
 */
void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
    {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af04      	add	r7, sp, #16
 80062ca:	60ba      	str	r2, [r7, #8]
 80062cc:	461a      	mov	r2, r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	81fb      	strh	r3, [r7, #14]
 80062d2:	460b      	mov	r3, r1
 80062d4:	81bb      	strh	r3, [r7, #12]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE) / log(2);
 80062da:	2306      	movs	r3, #6
 80062dc:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 80062de:	89fb      	ldrh	r3, [r7, #14]
 80062e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	89bb      	ldrh	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	da00      	bge.n	80062ee <EEPROM_Write+0x2a>
 80062ec:	333f      	adds	r3, #63	; 0x3f
 80062ee:	119b      	asrs	r3, r3, #6
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	89fb      	ldrh	r3, [r7, #14]
 80062f4:	4413      	add	r3, r2
 80062f6:	837b      	strh	r3, [r7, #26]

	// number of pages to be written
	uint16_t numofpages = (endPage - startPage) + 1;
 80062f8:	8b7a      	ldrh	r2, [r7, #26]
 80062fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3301      	adds	r3, #1
 8006302:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	84bb      	strh	r3, [r7, #36]	; 0x24

	// write the data
	for (int i = 0; i < numofpages; i++)
 8006308:	2300      	movs	r3, #0
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	e034      	b.n	8006378 <EEPROM_Write+0xb4>
	    {
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage << paddrposition | offset;
 800630e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	b21a      	sxth	r2, r3
 8006318:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	b21b      	sxth	r3, r3
 8006320:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);  // calculate the remaining bytes to be written
 8006322:	89ba      	ldrh	r2, [r7, #12]
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	4611      	mov	r1, r2
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff ffb1 	bl	8006290 <bytestowrite>
 800632e:	4603      	mov	r3, r0
 8006330:	82bb      	strh	r3, [r7, #20]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000); // write the data to the EEPROM
 8006332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	4413      	add	r3, r2
 8006338:	8af9      	ldrh	r1, [r7, #22]
 800633a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800633e:	9202      	str	r2, [sp, #8]
 8006340:	8aba      	ldrh	r2, [r7, #20]
 8006342:	9201      	str	r2, [sp, #4]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	2302      	movs	r3, #2
 8006348:	460a      	mov	r2, r1
 800634a:	21a0      	movs	r1, #160	; 0xa0
 800634c:	480f      	ldr	r0, [pc, #60]	; (800638c <EEPROM_Write+0xc8>)
 800634e:	f009 fd0b 	bl	800fd68 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8006352:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006354:	3301      	adds	r3, #1
 8006356:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;   // since we will be writing to a new page, so offset will be 0
 8006358:	2300      	movs	r3, #0
 800635a:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;  // reduce the size of the bytes
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	8abb      	ldrh	r3, [r7, #20]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;  // update the position for the data buffer
 8006364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006366:	8abb      	ldrh	r3, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	84bb      	strh	r3, [r7, #36]	; 0x24

		HAL_Delay(5);  // Write cycle delay (5ms)
 800636c:	2005      	movs	r0, #5
 800636e:	f006 fc71 	bl	800cc54 <HAL_Delay>
	for (int i = 0; i < numofpages; i++)
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	3301      	adds	r3, #1
 8006376:	623b      	str	r3, [r7, #32]
 8006378:	8b3b      	ldrh	r3, [r7, #24]
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	429a      	cmp	r2, r3
 800637e:	dbc6      	blt.n	800630e <EEPROM_Write+0x4a>
	    }
    }
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3728      	adds	r7, #40	; 0x28
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200006bc 	.word	0x200006bc

08006390 <EEPROM_Read>:
 *  @param[in] offset -  start byte offset in the page. Range from 0 to PAGE_SIZE-1
 *  @param[in] data is the pointer to the data to write in bytes
 *  @param[in] size is the size of the data
 */
void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
    {
 8006390:	b580      	push	{r7, lr}
 8006392:	b08e      	sub	sp, #56	; 0x38
 8006394:	af04      	add	r7, sp, #16
 8006396:	60ba      	str	r2, [r7, #8]
 8006398:	461a      	mov	r2, r3
 800639a:	4603      	mov	r3, r0
 800639c:	81fb      	strh	r3, [r7, #14]
 800639e:	460b      	mov	r3, r1
 80063a0:	81bb      	strh	r3, [r7, #12]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE) / log(2);
 80063a6:	2306      	movs	r3, #6
 80063a8:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 80063aa:	89fb      	ldrh	r3, [r7, #14]
 80063ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80063ae:	88fa      	ldrh	r2, [r7, #6]
 80063b0:	89bb      	ldrh	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da00      	bge.n	80063ba <EEPROM_Read+0x2a>
 80063b8:	333f      	adds	r3, #63	; 0x3f
 80063ba:	119b      	asrs	r3, r3, #6
 80063bc:	b29a      	uxth	r2, r3
 80063be:	89fb      	ldrh	r3, [r7, #14]
 80063c0:	4413      	add	r3, r2
 80063c2:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage - startPage) + 1;
 80063c4:	8b7a      	ldrh	r2, [r7, #26]
 80063c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3301      	adds	r3, #1
 80063ce:	833b      	strh	r3, [r7, #24]
	uint16_t pos = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i = 0; i < numofpages; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	623b      	str	r3, [r7, #32]
 80063d8:	e031      	b.n	800643e <EEPROM_Read+0xae>
	    {
		uint16_t MemAddress = startPage << paddrposition | offset;
 80063da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	b21a      	sxth	r2, r3
 80063e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	b21b      	sxth	r3, r3
 80063ec:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 80063ee:	89ba      	ldrh	r2, [r7, #12]
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ff4b 	bl	8006290 <bytestowrite>
 80063fa:	4603      	mov	r3, r0
 80063fc:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 80063fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	4413      	add	r3, r2
 8006404:	8af9      	ldrh	r1, [r7, #22]
 8006406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800640a:	9202      	str	r2, [sp, #8]
 800640c:	8aba      	ldrh	r2, [r7, #20]
 800640e:	9201      	str	r2, [sp, #4]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	2302      	movs	r3, #2
 8006414:	460a      	mov	r2, r1
 8006416:	21a0      	movs	r1, #160	; 0xa0
 8006418:	480d      	ldr	r0, [pc, #52]	; (8006450 <EEPROM_Read+0xc0>)
 800641a:	f009 fdb9 	bl	800ff90 <HAL_I2C_Mem_Read>
		startPage += 1;
 800641e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006420:	3301      	adds	r3, #1
 8006422:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	81bb      	strh	r3, [r7, #12]
		size = size - bytesremaining;
 8006428:	88fa      	ldrh	r2, [r7, #6]
 800642a:	8abb      	ldrh	r3, [r7, #20]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 8006430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006432:	8abb      	ldrh	r3, [r7, #20]
 8006434:	4413      	add	r3, r2
 8006436:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i = 0; i < numofpages; i++)
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	3301      	adds	r3, #1
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	8b3b      	ldrh	r3, [r7, #24]
 8006440:	6a3a      	ldr	r2, [r7, #32]
 8006442:	429a      	cmp	r2, r3
 8006444:	dbc9      	blt.n	80063da <EEPROM_Read+0x4a>
	    }
    }
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	3728      	adds	r7, #40	; 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200006bc 	.word	0x200006bc

08006454 <EEPROM_PageErase>:
 *  @brief Clears given eeprom page
 *
 *  @param[in] page - number of the start page. Range from 0 to PAGE_NUM-1
 */
void EEPROM_PageErase(uint16_t page)
    {
 8006454:	b580      	push	{r7, lr}
 8006456:	b098      	sub	sp, #96	; 0x60
 8006458:	af04      	add	r7, sp, #16
 800645a:	4603      	mov	r3, r0
 800645c:	80fb      	strh	r3, [r7, #6]
	// calculate the memory address based on the page number
	int paddrposition = log(PAGE_SIZE) / log(2);
 800645e:	2306      	movs	r3, #6
 8006460:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t MemAddress = page << paddrposition;
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	// create a buffer to store the reset values
	uint8_t data[PAGE_SIZE];
	memset(data, 0xff, PAGE_SIZE);
 800646e:	f107 0308 	add.w	r3, r7, #8
 8006472:	2240      	movs	r2, #64	; 0x40
 8006474:	21ff      	movs	r1, #255	; 0xff
 8006476:	4618      	mov	r0, r3
 8006478:	f00f fbc2 	bl	8015c00 <memset>

	// write the data to the EEPROM
	HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, PAGE_SIZE, 10);
 800647c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8006480:	230a      	movs	r3, #10
 8006482:	9302      	str	r3, [sp, #8]
 8006484:	2340      	movs	r3, #64	; 0x40
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	f107 0308 	add.w	r3, r7, #8
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	2302      	movs	r3, #2
 8006490:	21a0      	movs	r1, #160	; 0xa0
 8006492:	4803      	ldr	r0, [pc, #12]	; (80064a0 <EEPROM_PageErase+0x4c>)
 8006494:	f009 fc68 	bl	800fd68 <HAL_I2C_Mem_Write>

	//HAL_Delay(5);  // write cycle delay
    }
 8006498:	bf00      	nop
 800649a:	3750      	adds	r7, #80	; 0x50
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200006bc 	.word	0x200006bc

080064a4 <EEPROM_Read_UserSetting>:

/* Reads the single Float/Integer values from the EEPROM
 * @returns the float/integer value
 */
void EEPROM_Read_UserSetting(savedUserSettings_t *savedUser)
    {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	EEPROM_Read(PAGE_0, Byte_0, (uint8_t*) &savedUser->stationSaved_1, 1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	1c9a      	adds	r2, r3, #2
 80064b0:	2301      	movs	r3, #1
 80064b2:	2100      	movs	r1, #0
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7ff ff6b 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_0, Byte_1, (uint8_t*) &savedUser->stationSaved_2, sizeof(savedUser->stationSaved_2));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	1d1a      	adds	r2, r3, #4
 80064be:	2302      	movs	r3, #2
 80064c0:	2101      	movs	r1, #1
 80064c2:	2000      	movs	r0, #0
 80064c4:	f7ff ff64 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_0, Byte_2, (uint8_t*) &savedUser->stationSaved_3, sizeof(savedUser->stationSaved_3));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1d9a      	adds	r2, r3, #6
 80064cc:	2302      	movs	r3, #2
 80064ce:	2102      	movs	r1, #2
 80064d0:	2000      	movs	r0, #0
 80064d2:	f7ff ff5d 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_0, Byte_3, (uint8_t*) &savedUser->displayRefreshTime, sizeof(savedUser->displayRefreshTime));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f103 0208 	add.w	r2, r3, #8
 80064dc:	2302      	movs	r3, #2
 80064de:	2103      	movs	r1, #3
 80064e0:	2000      	movs	r0, #0
 80064e2:	f7ff ff55 	bl	8006390 <EEPROM_Read>

	savedUser->radio_freq     = savedUser->radio_freq     + FREQ_OFFSET;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	f203 3366 	addw	r3, r3, #870	; 0x366
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	801a      	strh	r2, [r3, #0]
	savedUser->stationSaved_1 = savedUser->stationSaved_1 + FREQ_OFFSET;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	885b      	ldrh	r3, [r3, #2]
 80064f8:	f203 3366 	addw	r3, r3, #870	; 0x366
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	805a      	strh	r2, [r3, #2]
	savedUser->stationSaved_2 = savedUser->stationSaved_2 + FREQ_OFFSET;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	889b      	ldrh	r3, [r3, #4]
 8006506:	f203 3366 	addw	r3, r3, #870	; 0x366
 800650a:	b29a      	uxth	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	809a      	strh	r2, [r3, #4]
    }
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <EEPROM_Save_UserSetting>:

void EEPROM_Save_UserSetting(savedUserSettings_t *savedUser)
    {
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	EEPROM_PageErase(PAGE_0);
 8006520:	2000      	movs	r0, #0
 8006522:	f7ff ff97 	bl	8006454 <EEPROM_PageErase>

	savedUser->radio_freq     = savedUser->radio_freq     - FREQ_OFFSET;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 800652e:	b29a      	uxth	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	801a      	strh	r2, [r3, #0]
	savedUser->stationSaved_1 = savedUser->stationSaved_1 - FREQ_OFFSET;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	885b      	ldrh	r3, [r3, #2]
 8006538:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	805a      	strh	r2, [r3, #2]
	savedUser->stationSaved_2 = savedUser->stationSaved_2 - FREQ_OFFSET;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	889b      	ldrh	r3, [r3, #4]
 8006546:	f2a3 3366 	subw	r3, r3, #870	; 0x366
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	809a      	strh	r2, [r3, #4]

	EEPROM_Write(PAGE_0, Byte_0, (uint8_t*) &savedUser->stationSaved_1, 1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	1c9a      	adds	r2, r3, #2
 8006554:	2301      	movs	r3, #1
 8006556:	2100      	movs	r1, #0
 8006558:	2000      	movs	r0, #0
 800655a:	f7ff feb3 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_1, (uint8_t*) &savedUser->stationSaved_2, 1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	1d1a      	adds	r2, r3, #4
 8006562:	2301      	movs	r3, #1
 8006564:	2101      	movs	r1, #1
 8006566:	2000      	movs	r0, #0
 8006568:	f7ff feac 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_2, (uint8_t*) &savedUser->stationSaved_3, 1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	1d9a      	adds	r2, r3, #6
 8006570:	2301      	movs	r3, #1
 8006572:	2102      	movs	r1, #2
 8006574:	2000      	movs	r0, #0
 8006576:	f7ff fea5 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_3, (uint8_t*) &savedUser->displayRefreshTime, 1);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f103 0208 	add.w	r2, r3, #8
 8006580:	2301      	movs	r3, #1
 8006582:	2103      	movs	r1, #3
 8006584:	2000      	movs	r0, #0
 8006586:	f7ff fe9d 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_0, Byte_4, (uint8_t*) &savedUser->radio_freq, 1);
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	2301      	movs	r3, #1
 800658e:	2104      	movs	r1, #4
 8006590:	2000      	movs	r0, #0
 8006592:	f7ff fe97 	bl	80062c4 <EEPROM_Write>
    }
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <EEPROM_Read_VolumeSettings>:

void EEPROM_Read_VolumeSettings(encoder_t *encoderVolFront, encoder_t *encoderVolBack)
    {
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
	EEPROM_Read(PAGE_1, Byte_0, (uint8_t*) &encoderVolFront->volumeMaster, sizeof(encoderVolFront->volumeMaster));
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	2301      	movs	r3, #1
 80065ac:	2100      	movs	r1, #0
 80065ae:	2001      	movs	r0, #1
 80065b0:	f7ff feee 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_1, (uint8_t*) &encoderVolFront->volumeLeftRight,
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	2301      	movs	r3, #1
 80065ba:	2101      	movs	r1, #1
 80065bc:	2001      	movs	r0, #1
 80065be:	f7ff fee7 	bl	8006390 <EEPROM_Read>
		sizeof(encoderVolFront->volumeLeftRight));
	EEPROM_Read(PAGE_1, Byte_2, (uint8_t*) &encoderVolFront->volumeRight, sizeof(encoderVolFront->volumeRight));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	1cda      	adds	r2, r3, #3
 80065c6:	2301      	movs	r3, #1
 80065c8:	2102      	movs	r1, #2
 80065ca:	2001      	movs	r0, #1
 80065cc:	f7ff fee0 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_3, (uint8_t*) &encoderVolFront->volumeLeft, sizeof(encoderVolFront->volumeLeft));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	1c9a      	adds	r2, r3, #2
 80065d4:	2301      	movs	r3, #1
 80065d6:	2103      	movs	r1, #3
 80065d8:	2001      	movs	r0, #1
 80065da:	f7ff fed9 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_4, (uint8_t*) &encoderVolBack->volumeLeftRight,
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	2301      	movs	r3, #1
 80065e4:	2104      	movs	r1, #4
 80065e6:	2001      	movs	r0, #1
 80065e8:	f7ff fed2 	bl	8006390 <EEPROM_Read>
		sizeof(encoderVolBack->volumeLeftRight));
	EEPROM_Read(PAGE_1, Byte_5, (uint8_t*) &encoderVolBack->volumeRight, sizeof(encoderVolBack->volumeRight));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	1cda      	adds	r2, r3, #3
 80065f0:	2301      	movs	r3, #1
 80065f2:	2105      	movs	r1, #5
 80065f4:	2001      	movs	r0, #1
 80065f6:	f7ff fecb 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_1, Byte_6, (uint8_t*) &encoderVolBack->volumeLeft, sizeof(encoderVolBack->volumeLeft));
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	1c9a      	adds	r2, r3, #2
 80065fe:	2301      	movs	r3, #1
 8006600:	2106      	movs	r1, #6
 8006602:	2001      	movs	r0, #1
 8006604:	f7ff fec4 	bl	8006390 <EEPROM_Read>
    }
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <EEPROM_Save_VolumeSettings>:

void EEPROM_Save_VolumeSettings(encoder_t *encoderVolFront, encoder_t *encoderVolBack)
    {
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
	EEPROM_PageErase(PAGE_1);
 800661a:	2001      	movs	r0, #1
 800661c:	f7ff ff1a 	bl	8006454 <EEPROM_PageErase>

	EEPROM_Write(PAGE_1, Byte_0, (uint8_t*) &encoderVolFront->volumeMaster, 1);
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	2301      	movs	r3, #1
 8006624:	2100      	movs	r1, #0
 8006626:	2001      	movs	r0, #1
 8006628:	f7ff fe4c 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_1, (uint8_t*) &encoderVolFront->volumeLeftRight, 1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	2301      	movs	r3, #1
 8006632:	2101      	movs	r1, #1
 8006634:	2001      	movs	r0, #1
 8006636:	f7ff fe45 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_2, (uint8_t*) &encoderVolFront->volumeRight, 1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1cda      	adds	r2, r3, #3
 800663e:	2301      	movs	r3, #1
 8006640:	2102      	movs	r1, #2
 8006642:	2001      	movs	r0, #1
 8006644:	f7ff fe3e 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_3, (uint8_t*) &encoderVolFront->volumeLeft, 1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	1c9a      	adds	r2, r3, #2
 800664c:	2301      	movs	r3, #1
 800664e:	2103      	movs	r1, #3
 8006650:	2001      	movs	r0, #1
 8006652:	f7ff fe37 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_4, (uint8_t*) &encoderVolBack->volumeLeftRight, 1);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	2301      	movs	r3, #1
 800665c:	2104      	movs	r1, #4
 800665e:	2001      	movs	r0, #1
 8006660:	f7ff fe30 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_5, (uint8_t*) &encoderVolBack->volumeRight, 1);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	1cda      	adds	r2, r3, #3
 8006668:	2301      	movs	r3, #1
 800666a:	2105      	movs	r1, #5
 800666c:	2001      	movs	r0, #1
 800666e:	f7ff fe29 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_1, Byte_6, (uint8_t*) &encoderVolBack->volumeLeft, 1);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	1c9a      	adds	r2, r3, #2
 8006676:	2301      	movs	r3, #1
 8006678:	2106      	movs	r1, #6
 800667a:	2001      	movs	r0, #1
 800667c:	f7ff fe22 	bl	80062c4 <EEPROM_Write>
    }
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <EEPROM_Read_FilterSettings>:

void EEPROM_Read_FilterSettings(encoderFilter_t *encoderFilterTreble, encoderFilter_t *encoderFilterMiddle,
	encoderFilter_t *encoderFilterBass, encoderFilter_t *encoderFilterLoudness)
    {
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
	EEPROM_Read(PAGE_2, Byte_0, (uint8_t*) &encoderFilterTreble->gain, 1);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	2301      	movs	r3, #1
 800669c:	2100      	movs	r1, #0
 800669e:	2002      	movs	r0, #2
 80066a0:	f7ff fe76 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_1, (uint8_t*) &encoderFilterTreble->centerFreq, 1);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	2301      	movs	r3, #1
 80066aa:	2101      	movs	r1, #1
 80066ac:	2002      	movs	r0, #2
 80066ae:	f7ff fe6f 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_2, (uint8_t*) &encoderFilterMiddle->gain, 1);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	2301      	movs	r3, #1
 80066b8:	2102      	movs	r1, #2
 80066ba:	2002      	movs	r0, #2
 80066bc:	f7ff fe68 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_3, (uint8_t*) &encoderFilterMiddle->centerFreq, 1);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	1c9a      	adds	r2, r3, #2
 80066c4:	2301      	movs	r3, #1
 80066c6:	2103      	movs	r1, #3
 80066c8:	2002      	movs	r0, #2
 80066ca:	f7ff fe61 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_4, (uint8_t*) &encoderFilterBass->gain, 1);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	2301      	movs	r3, #1
 80066d4:	2104      	movs	r1, #4
 80066d6:	2002      	movs	r0, #2
 80066d8:	f7ff fe5a 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_5, (uint8_t*) &encoderFilterBass->centerFreq, 1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	1c9a      	adds	r2, r3, #2
 80066e0:	2301      	movs	r3, #1
 80066e2:	2105      	movs	r1, #5
 80066e4:	2002      	movs	r0, #2
 80066e6:	f7ff fe53 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_6, (uint8_t*) &encoderFilterLoudness->gain, 1);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	2301      	movs	r3, #1
 80066f0:	2106      	movs	r1, #6
 80066f2:	2002      	movs	r0, #2
 80066f4:	f7ff fe4c 	bl	8006390 <EEPROM_Read>
	EEPROM_Read(PAGE_2, Byte_6, (uint8_t*) &encoderFilterLoudness->centerFreq, 1);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	1c9a      	adds	r2, r3, #2
 80066fc:	2301      	movs	r3, #1
 80066fe:	2106      	movs	r1, #6
 8006700:	2002      	movs	r0, #2
 8006702:	f7ff fe45 	bl	8006390 <EEPROM_Read>
    }
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <EEPROM_Save_FilterSettings>:

void EEPROM_Save_FilterSettings(encoderFilter_t *encoderFilterTreble, encoderFilter_t *encoderFilterMiddle,
	encoderFilter_t *encoderFilterBass, encoderFilter_t *encoderFilterLoudness)
    {
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	603b      	str	r3, [r7, #0]
	EEPROM_PageErase(PAGE_2);
 800671c:	2002      	movs	r0, #2
 800671e:	f7ff fe99 	bl	8006454 <EEPROM_PageErase>

	EEPROM_Write(PAGE_2, Byte_0, (uint8_t*) &encoderFilterTreble->gain, sizeof(encoderFilterTreble->gain));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	2301      	movs	r3, #1
 8006728:	2100      	movs	r1, #0
 800672a:	2002      	movs	r0, #2
 800672c:	f7ff fdca 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_1, (uint8_t*) &encoderFilterTreble->centerFreq,
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	1c9a      	adds	r2, r3, #2
 8006734:	2301      	movs	r3, #1
 8006736:	2101      	movs	r1, #1
 8006738:	2002      	movs	r0, #2
 800673a:	f7ff fdc3 	bl	80062c4 <EEPROM_Write>
		sizeof(encoderFilterTreble->centerFreq));
	EEPROM_Write(PAGE_2, Byte_2, (uint8_t*) &encoderFilterMiddle->gain, sizeof(encoderFilterMiddle->gain));
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	2301      	movs	r3, #1
 8006744:	2102      	movs	r1, #2
 8006746:	2002      	movs	r0, #2
 8006748:	f7ff fdbc 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_3, (uint8_t*) &encoderFilterMiddle->centerFreq,
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	1c9a      	adds	r2, r3, #2
 8006750:	2301      	movs	r3, #1
 8006752:	2103      	movs	r1, #3
 8006754:	2002      	movs	r0, #2
 8006756:	f7ff fdb5 	bl	80062c4 <EEPROM_Write>
		sizeof(encoderFilterMiddle->centerFreq));
	EEPROM_Write(PAGE_2, Byte_4, (uint8_t*) &encoderFilterBass->gain, sizeof(encoderFilterBass->gain));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	2301      	movs	r3, #1
 8006760:	2104      	movs	r1, #4
 8006762:	2002      	movs	r0, #2
 8006764:	f7ff fdae 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_5, (uint8_t*) &encoderFilterBass->centerFreq, sizeof(encoderFilterBass->centerFreq));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	1c9a      	adds	r2, r3, #2
 800676c:	2301      	movs	r3, #1
 800676e:	2105      	movs	r1, #5
 8006770:	2002      	movs	r0, #2
 8006772:	f7ff fda7 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_6, (uint8_t*) &encoderFilterLoudness->gain, sizeof(encoderFilterLoudness->gain));
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	2301      	movs	r3, #1
 800677c:	2106      	movs	r1, #6
 800677e:	2002      	movs	r0, #2
 8006780:	f7ff fda0 	bl	80062c4 <EEPROM_Write>
	EEPROM_Write(PAGE_2, Byte_7, (uint8_t*) &encoderFilterLoudness->centerFreq,
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	1c9a      	adds	r2, r3, #2
 8006788:	2301      	movs	r3, #1
 800678a:	2107      	movs	r1, #7
 800678c:	2002      	movs	r0, #2
 800678e:	f7ff fd99 	bl	80062c4 <EEPROM_Write>
		sizeof(encoderFilterLoudness->centerFreq));
    }
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <read_user_settings_on_init>:



void read_user_settings_on_init(void)
    {
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
	 EEPROM_Read_UserSetting(&savedUserSettings);
 80067a0:	4807      	ldr	r0, [pc, #28]	; (80067c0 <read_user_settings_on_init+0x24>)
 80067a2:	f7ff fe7f 	bl	80064a4 <EEPROM_Read_UserSetting>
	 EEPROM_Save_VolumeSettings(&encoderVolFront, &encoderVolBack);
 80067a6:	4907      	ldr	r1, [pc, #28]	; (80067c4 <read_user_settings_on_init+0x28>)
 80067a8:	4807      	ldr	r0, [pc, #28]	; (80067c8 <read_user_settings_on_init+0x2c>)
 80067aa:	f7ff ff31 	bl	8006610 <EEPROM_Save_VolumeSettings>
	 EEPROM_Save_FilterSettings(&encoderFilterTreble, &encoderFilterMiddle, &encoderFilterBass, &encoderFilterLoudness);
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <read_user_settings_on_init+0x30>)
 80067b0:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <read_user_settings_on_init+0x34>)
 80067b2:	4908      	ldr	r1, [pc, #32]	; (80067d4 <read_user_settings_on_init+0x38>)
 80067b4:	4808      	ldr	r0, [pc, #32]	; (80067d8 <read_user_settings_on_init+0x3c>)
 80067b6:	f7ff ffaa 	bl	800670e <EEPROM_Save_FilterSettings>
    }
 80067ba:	bf00      	nop
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000520 	.word	0x20000520
 80067c4:	20000518 	.word	0x20000518
 80067c8:	20000554 	.word	0x20000554
 80067cc:	2000053c 	.word	0x2000053c
 80067d0:	20000534 	.word	0x20000534
 80067d4:	20000510 	.word	0x20000510
 80067d8:	2000052c 	.word	0x2000052c

080067dc <encoders_init>:



// Is called only when system starts
void encoders_init(void)
    {
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80067e0:	213c      	movs	r1, #60	; 0x3c
 80067e2:	480a      	ldr	r0, [pc, #40]	; (800680c <encoders_init+0x30>)
 80067e4:	f00d fe08 	bl	80143f8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80067e8:	213c      	movs	r1, #60	; 0x3c
 80067ea:	4809      	ldr	r0, [pc, #36]	; (8006810 <encoders_init+0x34>)
 80067ec:	f00d fe04 	bl	80143f8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80067f0:	213c      	movs	r1, #60	; 0x3c
 80067f2:	4808      	ldr	r0, [pc, #32]	; (8006814 <encoders_init+0x38>)
 80067f4:	f00d fe00 	bl	80143f8 <HAL_TIM_Encoder_Start_IT>
//	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
	HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80067f8:	213c      	movs	r1, #60	; 0x3c
 80067fa:	4807      	ldr	r0, [pc, #28]	; (8006818 <encoders_init+0x3c>)
 80067fc:	f00d fdfc 	bl	80143f8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8006800:	213c      	movs	r1, #60	; 0x3c
 8006802:	4806      	ldr	r0, [pc, #24]	; (800681c <encoders_init+0x40>)
 8006804:	f00d fdf8 	bl	80143f8 <HAL_TIM_Encoder_Start_IT>
    }
 8006808:	bf00      	nop
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20007b34 	.word	0x20007b34
 8006810:	20007b80 	.word	0x20007b80
 8006814:	20007a9c 	.word	0x20007a9c
 8006818:	20007a50 	.word	0x20007a50
 800681c:	20007920 	.word	0x20007920

08006820 <volume_front_encoder_used>:

//
void volume_front_encoder_used(void)
    {
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_VOLUME_FRONT);
 8006824:	201e      	movs	r0, #30
 8006826:	f7ff f815 	bl	8005854 <save_current_display_state>
	refresh_timer_state();
 800682a:	f7ff f8b7 	bl	800599c <refresh_timer_state>

	switch (encoderVolFront.audioOutputState)
 800682e:	4b3f      	ldr	r3, [pc, #252]	; (800692c <volume_front_encoder_used+0x10c>)
 8006830:	799b      	ldrb	r3, [r3, #6]
 8006832:	2b06      	cmp	r3, #6
 8006834:	d877      	bhi.n	8006926 <volume_front_encoder_used+0x106>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <volume_front_encoder_used+0x1c>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006859 	.word	0x08006859
 8006840:	08006927 	.word	0x08006927
 8006844:	08006897 	.word	0x08006897
 8006848:	080068d5 	.word	0x080068d5
 800684c:	08006927 	.word	0x08006927
 8006850:	080068f3 	.word	0x080068f3
 8006854:	0800690d 	.word	0x0800690d
	    {
	    case MASTER:
		Check_Volume_Range_Front(&encoderVolFront.volumeMaster, 94);
 8006858:	215e      	movs	r1, #94	; 0x5e
 800685a:	4834      	ldr	r0, [pc, #208]	; (800692c <volume_front_encoder_used+0x10c>)
 800685c:	f004 fed4 	bl	800b608 <Check_Volume_Range_Front>
		if (encoderVolFront.volumeMaster >= 80)
 8006860:	4b32      	ldr	r3, [pc, #200]	; (800692c <volume_front_encoder_used+0x10c>)
 8006862:	f993 3000 	ldrsb.w	r3, [r3]
 8006866:	2b4f      	cmp	r3, #79	; 0x4f
 8006868:	dd03      	ble.n	8006872 <volume_front_encoder_used+0x52>
		    volumeMasterFlag = 1;
 800686a:	4b31      	ldr	r3, [pc, #196]	; (8006930 <volume_front_encoder_used+0x110>)
 800686c:	2201      	movs	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e002      	b.n	8006878 <volume_front_encoder_used+0x58>
		else
		    volumeMasterFlag = 0;
 8006872:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <volume_front_encoder_used+0x110>)
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackRight);
 8006878:	4b2e      	ldr	r3, [pc, #184]	; (8006934 <volume_front_encoder_used+0x114>)
 800687a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800687e:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <volume_front_encoder_used+0x118>)
 8006880:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006884:	4b2d      	ldr	r3, [pc, #180]	; (800693c <volume_front_encoder_used+0x11c>)
 8006886:	f9b3 2000 	ldrsh.w	r2, [r3]
 800688a:	4b2d      	ldr	r3, [pc, #180]	; (8006940 <volume_front_encoder_used+0x120>)
 800688c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006890:	f004 fe40 	bl	800b514 <TDA7719_SetVolume_Master>
		break;
 8006894:	e048      	b.n	8006928 <volume_front_encoder_used+0x108>
	    case MUTE:
		//jak wyłącze przerwanie on enkodera to teraz nie bedzie tutaj kod wchodził
		//więc może jakieś zerowanie rejestru CNT.
		break;
	    case MASTER_V2:
		Check_Volume_Range_Front(&encoderVolFront.volumeMaster, 94);
 8006896:	215e      	movs	r1, #94	; 0x5e
 8006898:	4824      	ldr	r0, [pc, #144]	; (800692c <volume_front_encoder_used+0x10c>)
 800689a:	f004 feb5 	bl	800b608 <Check_Volume_Range_Front>
		if (encoderVolFront.volumeMaster >= 80)
 800689e:	4b23      	ldr	r3, [pc, #140]	; (800692c <volume_front_encoder_used+0x10c>)
 80068a0:	f993 3000 	ldrsb.w	r3, [r3]
 80068a4:	2b4f      	cmp	r3, #79	; 0x4f
 80068a6:	dd03      	ble.n	80068b0 <volume_front_encoder_used+0x90>
		    volumeMasterFlag = 1;
 80068a8:	4b21      	ldr	r3, [pc, #132]	; (8006930 <volume_front_encoder_used+0x110>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e002      	b.n	80068b6 <volume_front_encoder_used+0x96>
		else
		    volumeMasterFlag = 0;
 80068b0:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <volume_front_encoder_used+0x110>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackRight);
 80068b6:	4b1f      	ldr	r3, [pc, #124]	; (8006934 <volume_front_encoder_used+0x114>)
 80068b8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80068bc:	4b1e      	ldr	r3, [pc, #120]	; (8006938 <volume_front_encoder_used+0x118>)
 80068be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80068c2:	4b1e      	ldr	r3, [pc, #120]	; (800693c <volume_front_encoder_used+0x11c>)
 80068c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80068c8:	4b1d      	ldr	r3, [pc, #116]	; (8006940 <volume_front_encoder_used+0x120>)
 80068ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ce:	f004 fe21 	bl	800b514 <TDA7719_SetVolume_Master>
		break;
 80068d2:	e029      	b.n	8006928 <volume_front_encoder_used+0x108>
	    case NORMAL:
		Check_Volume_Range_Front(&encoderVolFront.volumeLeftRight, 79);
 80068d4:	214f      	movs	r1, #79	; 0x4f
 80068d6:	481b      	ldr	r0, [pc, #108]	; (8006944 <volume_front_encoder_used+0x124>)
 80068d8:	f004 fe96 	bl	800b608 <Check_Volume_Range_Front>
		TDA7719_SetVolumeFront_LeftRight(tempVolFrontLeft, tempVolFrontRight);
 80068dc:	4b15      	ldr	r3, [pc, #84]	; (8006934 <volume_front_encoder_used+0x114>)
 80068de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <volume_front_encoder_used+0x118>)
 80068e4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f004 fe60 	bl	800b5b0 <TDA7719_SetVolumeFront_LeftRight>
		break;
 80068f0:	e01a      	b.n	8006928 <volume_front_encoder_used+0x108>
	    case ATTE_LEFT:
		Check_Volume_Range_Front(&encoderVolFront.volumeLeft, 79);
 80068f2:	214f      	movs	r1, #79	; 0x4f
 80068f4:	4814      	ldr	r0, [pc, #80]	; (8006948 <volume_front_encoder_used+0x128>)
 80068f6:	f004 fe87 	bl	800b608 <Check_Volume_Range_Front>
		TDA7719_SetVolume_LeftFront(tempVolFrontLeft, 0); //0 - 79
 80068fa:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <volume_front_encoder_used+0x114>)
 80068fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006900:	b25b      	sxtb	r3, r3
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fcc3 	bl	8008290 <TDA7719_SetVolume_LeftFront>
		break;
 800690a:	e00d      	b.n	8006928 <volume_front_encoder_used+0x108>
	    case ATTE_RIGHT:
		Check_Volume_Range_Front(&encoderVolFront.volumeRight, 79);
 800690c:	214f      	movs	r1, #79	; 0x4f
 800690e:	480f      	ldr	r0, [pc, #60]	; (800694c <volume_front_encoder_used+0x12c>)
 8006910:	f004 fe7a 	bl	800b608 <Check_Volume_Range_Front>
		TDA7719_SetVolume_RightFront(tempVolFrontRight, 0);
 8006914:	4b08      	ldr	r3, [pc, #32]	; (8006938 <volume_front_encoder_used+0x118>)
 8006916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800691a:	b25b      	sxtb	r3, r3
 800691c:	2100      	movs	r1, #0
 800691e:	4618      	mov	r0, r3
 8006920:	f001 fcf0 	bl	8008304 <TDA7719_SetVolume_RightFront>
		break;
 8006924:	e000      	b.n	8006928 <volume_front_encoder_used+0x108>
	    default:
		break;
 8006926:	bf00      	nop
	    }
    }
 8006928:	bf00      	nop
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000554 	.word	0x20000554
 8006930:	20000450 	.word	0x20000450
 8006934:	20000468 	.word	0x20000468
 8006938:	20000246 	.word	0x20000246
 800693c:	200002b0 	.word	0x200002b0
 8006940:	2000046a 	.word	0x2000046a
 8006944:	20000555 	.word	0x20000555
 8006948:	20000556 	.word	0x20000556
 800694c:	20000557 	.word	0x20000557

08006950 <volume_back_encoder_used>:

//
void volume_back_encoder_used(void)
    {
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_VOLUME_BACK);
 8006954:	201f      	movs	r0, #31
 8006956:	f7fe ff7d 	bl	8005854 <save_current_display_state>
	refresh_timer_state();
 800695a:	f7ff f81f 	bl	800599c <refresh_timer_state>
	//dodać też to kiedy wciśnięty będzie przycisk
	switch (encoderVolBack.audioOutputState)
 800695e:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <volume_back_encoder_used+0xb0>)
 8006960:	799b      	ldrb	r3, [r3, #6]
 8006962:	3b01      	subs	r3, #1
 8006964:	2b05      	cmp	r3, #5
 8006966:	d847      	bhi.n	80069f8 <volume_back_encoder_used+0xa8>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <volume_back_encoder_used+0x20>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	080069f9 	.word	0x080069f9
 8006974:	080069f9 	.word	0x080069f9
 8006978:	08006989 	.word	0x08006989
 800697c:	080069a7 	.word	0x080069a7
 8006980:	080069c5 	.word	0x080069c5
 8006984:	080069df 	.word	0x080069df
	    {
	    case NORMAL:
		Check_Volume_Range_Back(&encoderVolBack.volumeLeftRight, 79);
 8006988:	214f      	movs	r1, #79	; 0x4f
 800698a:	481e      	ldr	r0, [pc, #120]	; (8006a04 <volume_back_encoder_used+0xb4>)
 800698c:	f004 fec0 	bl	800b710 <Check_Volume_Range_Back>
		TDA7719_SetVolumeBack_LeftRight(tempVolBackLeft, tempVolBackRight);
 8006990:	4b1d      	ldr	r3, [pc, #116]	; (8006a08 <volume_back_encoder_used+0xb8>)
 8006992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006996:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <volume_back_encoder_used+0xbc>)
 8006998:	f9b2 2000 	ldrsh.w	r2, [r2]
 800699c:	4611      	mov	r1, r2
 800699e:	4618      	mov	r0, r3
 80069a0:	f004 fe8a 	bl	800b6b8 <TDA7719_SetVolumeBack_LeftRight>
		break;
 80069a4:	e029      	b.n	80069fa <volume_back_encoder_used+0xaa>
	    case MUTE:
		//no action for encoder
		break;
	    case NORMAL_V2:
		Check_Volume_Range_Back(&encoderVolBack.volumeLeftRight, 79);
 80069a6:	214f      	movs	r1, #79	; 0x4f
 80069a8:	4816      	ldr	r0, [pc, #88]	; (8006a04 <volume_back_encoder_used+0xb4>)
 80069aa:	f004 feb1 	bl	800b710 <Check_Volume_Range_Back>
		TDA7719_SetVolumeBack_LeftRight(tempVolBackLeft, tempVolBackRight);
 80069ae:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <volume_back_encoder_used+0xb8>)
 80069b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069b4:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <volume_back_encoder_used+0xbc>)
 80069b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f004 fe7b 	bl	800b6b8 <TDA7719_SetVolumeBack_LeftRight>
		break;
 80069c2:	e01a      	b.n	80069fa <volume_back_encoder_used+0xaa>
	    case ATTE_LEFT:
		Check_Volume_Range_Back(&encoderVolBack.volumeLeft, 79);
 80069c4:	214f      	movs	r1, #79	; 0x4f
 80069c6:	4812      	ldr	r0, [pc, #72]	; (8006a10 <volume_back_encoder_used+0xc0>)
 80069c8:	f004 fea2 	bl	800b710 <Check_Volume_Range_Back>
		TDA7719_SetVolume_LeftRear(tempVolBackLeft, 0);
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <volume_back_encoder_used+0xb8>)
 80069ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069d2:	b25b      	sxtb	r3, r3
 80069d4:	2100      	movs	r1, #0
 80069d6:	4618      	mov	r0, r3
 80069d8:	f001 fcce 	bl	8008378 <TDA7719_SetVolume_LeftRear>
		break;
 80069dc:	e00d      	b.n	80069fa <volume_back_encoder_used+0xaa>
	    case ATTE_RIGHT:
		Check_Volume_Range_Back(&encoderVolBack.volumeRight, 79);
 80069de:	214f      	movs	r1, #79	; 0x4f
 80069e0:	480c      	ldr	r0, [pc, #48]	; (8006a14 <volume_back_encoder_used+0xc4>)
 80069e2:	f004 fe95 	bl	800b710 <Check_Volume_Range_Back>
		TDA7719_SetVolume_RightRear(tempVolBackLeft, 0);
 80069e6:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <volume_back_encoder_used+0xb8>)
 80069e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fcfb 	bl	80083ec <TDA7719_SetVolume_RightRear>
		break;
 80069f6:	e000      	b.n	80069fa <volume_back_encoder_used+0xaa>
	    default:
		break;
 80069f8:	bf00      	nop
	    }
    }
 80069fa:	bf00      	nop
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000518 	.word	0x20000518
 8006a04:	20000519 	.word	0x20000519
 8006a08:	200002b0 	.word	0x200002b0
 8006a0c:	2000046a 	.word	0x2000046a
 8006a10:	2000051a 	.word	0x2000051a
 8006a14:	2000051b 	.word	0x2000051b

08006a18 <loudness_encoder_used>:

//
void loudness_encoder_used(void)
    {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_LOUDNESS);
 8006a1c:	2020      	movs	r0, #32
 8006a1e:	f7fe ff19 	bl	8005854 <save_current_display_state>
	refresh_timer_state();
 8006a22:	f7fe ffbb 	bl	800599c <refresh_timer_state>

	switch (encoderFilterLoudness.buttonControl)
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <loudness_encoder_used+0x84>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d81e      	bhi.n	8006a6c <loudness_encoder_used+0x54>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <loudness_encoder_used+0x1c>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a4f 	.word	0x08006a4f
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	08006a63 	.word	0x08006a63
	    {
	    case SET_GAIN:
		Check_Loudness_Param_Range(&encoderFilterLoudness.gain, 15);
 8006a44:	210f      	movs	r1, #15
 8006a46:	4816      	ldr	r0, [pc, #88]	; (8006aa0 <loudness_encoder_used+0x88>)
 8006a48:	f004 feba 	bl	800b7c0 <Check_Loudness_Param_Range>
		break;
 8006a4c:	e012      	b.n	8006a74 <loudness_encoder_used+0x5c>
	    case SET_CENTER_FREQ:
		Check_Loudness_Param_Range(&encoderFilterLoudness.centerFreq, 3);
 8006a4e:	2103      	movs	r1, #3
 8006a50:	4814      	ldr	r0, [pc, #80]	; (8006aa4 <loudness_encoder_used+0x8c>)
 8006a52:	f004 feb5 	bl	800b7c0 <Check_Loudness_Param_Range>
		break;
 8006a56:	e00d      	b.n	8006a74 <loudness_encoder_used+0x5c>
	    case SET_SOFT_STEP:
		Check_Loudness_Param_Range(&encoderFilterLoudness.soft_step, 1);
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4813      	ldr	r0, [pc, #76]	; (8006aa8 <loudness_encoder_used+0x90>)
 8006a5c:	f004 feb0 	bl	800b7c0 <Check_Loudness_Param_Range>
		break;
 8006a60:	e008      	b.n	8006a74 <loudness_encoder_used+0x5c>
	    case SET_HIGH_BOOST:
		Check_Loudness_Param_Range(&encoderFilterLoudness.high_boost, 1);
 8006a62:	2101      	movs	r1, #1
 8006a64:	4811      	ldr	r0, [pc, #68]	; (8006aac <loudness_encoder_used+0x94>)
 8006a66:	f004 feab 	bl	800b7c0 <Check_Loudness_Param_Range>
		break;
 8006a6a:	e003      	b.n	8006a74 <loudness_encoder_used+0x5c>
	    default:
		encoderFilterLoudness.buttonControl = SET_GAIN;
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <loudness_encoder_used+0x84>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
		break;
 8006a72:	bf00      	nop
	    }
	TDA7719_SetLoudness(encoderFilterLoudness.gain, encoderFilterLoudness.centerFreq,
 8006a74:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <loudness_encoder_used+0x84>)
 8006a76:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8006a7a:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <loudness_encoder_used+0x84>)
 8006a7c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8006a80:	b2d9      	uxtb	r1, r3
		encoderFilterLoudness.high_boost, encoderFilterLoudness.soft_step);
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <loudness_encoder_used+0x84>)
 8006a84:	f993 3004 	ldrsb.w	r3, [r3, #4]
	TDA7719_SetLoudness(encoderFilterLoudness.gain, encoderFilterLoudness.centerFreq,
 8006a88:	b2da      	uxtb	r2, r3
		encoderFilterLoudness.high_boost, encoderFilterLoudness.soft_step);
 8006a8a:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <loudness_encoder_used+0x84>)
 8006a8c:	f993 3003 	ldrsb.w	r3, [r3, #3]
	TDA7719_SetLoudness(encoderFilterLoudness.gain, encoderFilterLoudness.centerFreq,
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f000 ffff 	bl	8007a94 <TDA7719_SetLoudness>
    }
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	2000053c 	.word	0x2000053c
 8006aa0:	2000053d 	.word	0x2000053d
 8006aa4:	2000053e 	.word	0x2000053e
 8006aa8:	2000053f 	.word	0x2000053f
 8006aac:	20000540 	.word	0x20000540

08006ab0 <bass_encoder_used>:

//
void bass_encoder_used(void)
    {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_BASS);
 8006ab4:	2023      	movs	r0, #35	; 0x23
 8006ab6:	f7fe fecd 	bl	8005854 <save_current_display_state>
	refresh_timer_state();
 8006aba:	f7fe ff6f 	bl	800599c <refresh_timer_state>

	switch (encoderFilterBass.buttonControl)
 8006abe:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <bass_encoder_used+0x74>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d010      	beq.n	8006ae8 <bass_encoder_used+0x38>
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	dc13      	bgt.n	8006af2 <bass_encoder_used+0x42>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <bass_encoder_used+0x24>
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d005      	beq.n	8006ade <bass_encoder_used+0x2e>
 8006ad2:	e00e      	b.n	8006af2 <bass_encoder_used+0x42>
	    {
	    case SET_GAIN:
		Check_Bass_Param_Range(&encoderFilterBass.gain, 30);
 8006ad4:	211e      	movs	r1, #30
 8006ad6:	4814      	ldr	r0, [pc, #80]	; (8006b28 <bass_encoder_used+0x78>)
 8006ad8:	f004 feca 	bl	800b870 <Check_Bass_Param_Range>
		break;
 8006adc:	e00d      	b.n	8006afa <bass_encoder_used+0x4a>
	    case SET_CENTER_FREQ:
		Check_Bass_Param_Range(&encoderFilterBass.centerFreq, 3);
 8006ade:	2103      	movs	r1, #3
 8006ae0:	4812      	ldr	r0, [pc, #72]	; (8006b2c <bass_encoder_used+0x7c>)
 8006ae2:	f004 fec5 	bl	800b870 <Check_Bass_Param_Range>
		break;
 8006ae6:	e008      	b.n	8006afa <bass_encoder_used+0x4a>
	    case SET_SOFT_STEP:
		Check_Bass_Param_Range(&encoderFilterBass.soft_step, 1);
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4811      	ldr	r0, [pc, #68]	; (8006b30 <bass_encoder_used+0x80>)
 8006aec:	f004 fec0 	bl	800b870 <Check_Bass_Param_Range>
		break;
 8006af0:	e003      	b.n	8006afa <bass_encoder_used+0x4a>
	    default:
		encoderFilterBass.buttonControl = SET_GAIN;
 8006af2:	4b0c      	ldr	r3, [pc, #48]	; (8006b24 <bass_encoder_used+0x74>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
		break;
 8006af8:	bf00      	nop
	    }
	TDA7719_SetBass(encoderFilterBass.gain - 16, encoderFilterBass.centerFreq, encoderFilterBass.soft_step);
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <bass_encoder_used+0x74>)
 8006afc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	3b10      	subs	r3, #16
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	4a06      	ldr	r2, [pc, #24]	; (8006b24 <bass_encoder_used+0x74>)
 8006b0a:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8006b0e:	b2d1      	uxtb	r1, r2
 8006b10:	4a04      	ldr	r2, [pc, #16]	; (8006b24 <bass_encoder_used+0x74>)
 8006b12:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 fad1 	bl	80080c0 <TDA7719_SetBass>
    }
 8006b1e:	bf00      	nop
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000534 	.word	0x20000534
 8006b28:	20000535 	.word	0x20000535
 8006b2c:	20000536 	.word	0x20000536
 8006b30:	20000537 	.word	0x20000537

08006b34 <middle_encoder_used>:

//
void middle_encoder_used(void)
    {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_MIDDLE);
 8006b38:	2022      	movs	r0, #34	; 0x22
 8006b3a:	f7fe fe8b 	bl	8005854 <save_current_display_state>
	refresh_timer_state();
 8006b3e:	f7fe ff2d 	bl	800599c <refresh_timer_state>
	switch (encoderFilterMiddle.buttonControl)
 8006b42:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <middle_encoder_used+0x6c>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d010      	beq.n	8006b6c <middle_encoder_used+0x38>
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	dc13      	bgt.n	8006b76 <middle_encoder_used+0x42>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <middle_encoder_used+0x24>
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d005      	beq.n	8006b62 <middle_encoder_used+0x2e>
		break;
	    case SET_SOFT_STEP:
		Check_Middle_Param_Range(&encoderFilterMiddle.soft_step, 1);
		break;
	    default:
		break;
 8006b56:	e00e      	b.n	8006b76 <middle_encoder_used+0x42>
		Check_Middle_Param_Range(&encoderFilterMiddle.gain, 30);
 8006b58:	211e      	movs	r1, #30
 8006b5a:	4812      	ldr	r0, [pc, #72]	; (8006ba4 <middle_encoder_used+0x70>)
 8006b5c:	f004 fee0 	bl	800b920 <Check_Middle_Param_Range>
		break;
 8006b60:	e00a      	b.n	8006b78 <middle_encoder_used+0x44>
		Check_Middle_Param_Range(&encoderFilterMiddle.centerFreq, 3);
 8006b62:	2103      	movs	r1, #3
 8006b64:	4810      	ldr	r0, [pc, #64]	; (8006ba8 <middle_encoder_used+0x74>)
 8006b66:	f004 fedb 	bl	800b920 <Check_Middle_Param_Range>
		break;
 8006b6a:	e005      	b.n	8006b78 <middle_encoder_used+0x44>
		Check_Middle_Param_Range(&encoderFilterMiddle.soft_step, 1);
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	480f      	ldr	r0, [pc, #60]	; (8006bac <middle_encoder_used+0x78>)
 8006b70:	f004 fed6 	bl	800b920 <Check_Middle_Param_Range>
		break;
 8006b74:	e000      	b.n	8006b78 <middle_encoder_used+0x44>
		break;
 8006b76:	bf00      	nop
	    }
	TDA7719_SetMiddle(encoderFilterMiddle.gain - 16, encoderFilterMiddle.centerFreq, encoderFilterMiddle.soft_step);
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <middle_encoder_used+0x6c>)
 8006b7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	3b10      	subs	r3, #16
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <middle_encoder_used+0x6c>)
 8006b88:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8006b8c:	b2d1      	uxtb	r1, r2
 8006b8e:	4a04      	ldr	r2, [pc, #16]	; (8006ba0 <middle_encoder_used+0x6c>)
 8006b90:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f9aa 	bl	8007ef0 <TDA7719_SetMiddle>
    }
 8006b9c:	bf00      	nop
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000510 	.word	0x20000510
 8006ba4:	20000511 	.word	0x20000511
 8006ba8:	20000512 	.word	0x20000512
 8006bac:	20000513 	.word	0x20000513

08006bb0 <treble_encoder_used>:

//
void treble_encoder_used(void)
    {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_TREBLE);
 8006bb4:	2021      	movs	r0, #33	; 0x21
 8006bb6:	f7fe fe4d 	bl	8005854 <save_current_display_state>
	refresh_timer_state();
 8006bba:	f7fe feef 	bl	800599c <refresh_timer_state>

	switch (encoderFilterTreble.buttonControl)
 8006bbe:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <treble_encoder_used+0x6c>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d010      	beq.n	8006be8 <treble_encoder_used+0x38>
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	dc13      	bgt.n	8006bf2 <treble_encoder_used+0x42>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <treble_encoder_used+0x24>
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d005      	beq.n	8006bde <treble_encoder_used+0x2e>
		break;
	    case SET_SOFT_STEP:
		Check_Treble_Param_Range(&encoderFilterTreble.soft_step, 1);
		break;
	    default:
		break;
 8006bd2:	e00e      	b.n	8006bf2 <treble_encoder_used+0x42>
		Check_Treble_Param_Range(&encoderFilterTreble.gain, 30);
 8006bd4:	211e      	movs	r1, #30
 8006bd6:	4812      	ldr	r0, [pc, #72]	; (8006c20 <treble_encoder_used+0x70>)
 8006bd8:	f004 fefa 	bl	800b9d0 <Check_Treble_Param_Range>
		break;
 8006bdc:	e00a      	b.n	8006bf4 <treble_encoder_used+0x44>
		Check_Treble_Param_Range(&encoderFilterTreble.centerFreq, 3);
 8006bde:	2103      	movs	r1, #3
 8006be0:	4810      	ldr	r0, [pc, #64]	; (8006c24 <treble_encoder_used+0x74>)
 8006be2:	f004 fef5 	bl	800b9d0 <Check_Treble_Param_Range>
		break;
 8006be6:	e005      	b.n	8006bf4 <treble_encoder_used+0x44>
		Check_Treble_Param_Range(&encoderFilterTreble.soft_step, 1);
 8006be8:	2101      	movs	r1, #1
 8006bea:	480f      	ldr	r0, [pc, #60]	; (8006c28 <treble_encoder_used+0x78>)
 8006bec:	f004 fef0 	bl	800b9d0 <Check_Treble_Param_Range>
		break;
 8006bf0:	e000      	b.n	8006bf4 <treble_encoder_used+0x44>
		break;
 8006bf2:	bf00      	nop
	    }
	TDA7719_SetTreble(encoderFilterTreble.gain - 16, encoderFilterTreble.centerFreq, encoderFilterTreble.soft_step);
 8006bf4:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <treble_encoder_used+0x6c>)
 8006bf6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	3b10      	subs	r3, #16
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	b25b      	sxtb	r3, r3
 8006c02:	4a06      	ldr	r2, [pc, #24]	; (8006c1c <treble_encoder_used+0x6c>)
 8006c04:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8006c08:	b2d1      	uxtb	r1, r2
 8006c0a:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <treble_encoder_used+0x6c>)
 8006c0c:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 f884 	bl	8007d20 <TDA7719_SetTreble>
    }
 8006c18:	bf00      	nop
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2000052c 	.word	0x2000052c
 8006c20:	2000052d 	.word	0x2000052d
 8006c24:	2000052e 	.word	0x2000052e
 8006c28:	2000052f 	.word	0x2000052f

08006c2c <RDA5807_WriteAllRegs>:
// 0000 1100 0000 0000
// 1000 0100 1101 1011
// 0100 0000 0000 0000

void RDA5807_WriteAllRegs(void)
    {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af02      	add	r7, sp, #8
	uint8_t i;
	uint8_t x = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 12; i = i + 2)
 8006c36:	2300      	movs	r3, #0
 8006c38:	71fb      	strb	r3, [r7, #7]
 8006c3a:	e00e      	b.n	8006c5a <RDA5807_WriteAllRegs+0x2e>
	    {
		I2C_BUFF[i] = RDA5807M_WriteReg[x] >> 8;
 8006c3c:	79bb      	ldrb	r3, [r7, #6]
 8006c3e:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <RDA5807_WriteAllRegs+0x78>)
 8006c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c44:	0a1a      	lsrs	r2, r3, #8
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	b2d1      	uxtb	r1, r2
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <RDA5807_WriteAllRegs+0x7c>)
 8006c4c:	54d1      	strb	r1, [r2, r3]
		x++;
 8006c4e:	79bb      	ldrb	r3, [r7, #6]
 8006c50:	3301      	adds	r3, #1
 8006c52:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 12; i = i + 2)
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	3302      	adds	r3, #2
 8006c58:	71fb      	strb	r3, [r7, #7]
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b0b      	cmp	r3, #11
 8006c5e:	d9ed      	bls.n	8006c3c <RDA5807_WriteAllRegs+0x10>
	    }

	x = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	71bb      	strb	r3, [r7, #6]

	for (i = 1; i < 13; i = i + 2)
 8006c64:	2301      	movs	r3, #1
 8006c66:	71fb      	strb	r3, [r7, #7]
 8006c68:	e00d      	b.n	8006c86 <RDA5807_WriteAllRegs+0x5a>
	    {
		I2C_BUFF[i] = RDA5807M_WriteReg[x] & 0xFF;
 8006c6a:	79bb      	ldrb	r3, [r7, #6]
 8006c6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ca4 <RDA5807_WriteAllRegs+0x78>)
 8006c6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	b2d1      	uxtb	r1, r2
 8006c76:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <RDA5807_WriteAllRegs+0x7c>)
 8006c78:	54d1      	strb	r1, [r2, r3]
		x++;
 8006c7a:	79bb      	ldrb	r3, [r7, #6]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	71bb      	strb	r3, [r7, #6]
	for (i = 1; i < 13; i = i + 2)
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	3302      	adds	r3, #2
 8006c84:	71fb      	strb	r3, [r7, #7]
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2b0c      	cmp	r3, #12
 8006c8a:	d9ee      	bls.n	8006c6a <RDA5807_WriteAllRegs+0x3e>
	    }

	HAL_I2C_Master_Transmit(&hi2c2, RDASequential << 1, (void *)&I2C_BUFF, sizeof(I2C_BUFF),10);
 8006c8c:	230a      	movs	r3, #10
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	2310      	movs	r3, #16
 8006c92:	4a05      	ldr	r2, [pc, #20]	; (8006ca8 <RDA5807_WriteAllRegs+0x7c>)
 8006c94:	2120      	movs	r1, #32
 8006c96:	4805      	ldr	r0, [pc, #20]	; (8006cac <RDA5807_WriteAllRegs+0x80>)
 8006c98:	f008 fe7c 	bl	800f994 <HAL_I2C_Master_Transmit>

    }
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	2000047c 	.word	0x2000047c
 8006ca8:	200004a4 	.word	0x200004a4
 8006cac:	200006bc 	.word	0x200006bc

08006cb0 <RDA5807_Init>:

void RDA5807_Init(void)
    {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < 6; i++)
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	71fb      	strb	r3, [r7, #7]
 8006cba:	e00a      	b.n	8006cd2 <RDA5807_Init+0x22>
	    {
		RDA5807M_WriteReg[i] = RDA5807M_WriteRegDef[i];
 8006cbc:	79fa      	ldrb	r2, [r7, #7]
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	490b      	ldr	r1, [pc, #44]	; (8006cf0 <RDA5807_Init+0x40>)
 8006cc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006cc6:	490b      	ldr	r1, [pc, #44]	; (8006cf4 <RDA5807_Init+0x44>)
 8006cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t i = 0; i < 6; i++)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	71fb      	strb	r3, [r7, #7]
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	2b05      	cmp	r3, #5
 8006cd6:	d9f1      	bls.n	8006cbc <RDA5807_Init+0xc>
	    }
	RDA5807_Volume(StartingVolume);
 8006cd8:	2004      	movs	r0, #4
 8006cda:	f000 f839 	bl	8006d50 <RDA5807_Volume>
	RDA5807_SetFrequency(DefaultFreq);
 8006cde:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8006cf8 <RDA5807_Init+0x48>
 8006ce2:	f000 f871 	bl	8006dc8 <RDA5807_SetFrequency>
    }
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000008c 	.word	0x2000008c
 8006cf4:	2000047c 	.word	0x2000047c
 8006cf8:	42ae0000 	.word	0x42ae0000

08006cfc <RDA5807_PowerOn>:

void RDA5807_PowerOn(void)
    {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
	RDA5807M_WriteReg[1] = RDA5807M_WriteReg[1] | 0x0010;
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <RDA5807_PowerOn+0x34>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f043 0310 	orr.w	r3, r3, #16
 8006d08:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <RDA5807_PowerOn+0x34>)
 8006d0a:	6053      	str	r3, [r2, #4]
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] | RDA_POWER;
 8006d0c:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <RDA5807_PowerOn+0x34>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	4a06      	ldr	r2, [pc, #24]	; (8006d30 <RDA5807_PowerOn+0x34>)
 8006d16:	6013      	str	r3, [r2, #0]
	RDA5807_WriteAllRegs();
 8006d18:	f7ff ff88 	bl	8006c2c <RDA5807_WriteAllRegs>
	RDA5807M_WriteReg[1] = RDA5807M_WriteReg[1] & 0xFFEF;	//Disable tune after PowerOn operation
 8006d1c:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <RDA5807_PowerOn+0x34>)
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006d24:	4013      	ands	r3, r2
 8006d26:	4a02      	ldr	r2, [pc, #8]	; (8006d30 <RDA5807_PowerOn+0x34>)
 8006d28:	6053      	str	r3, [r2, #4]
    }
 8006d2a:	bf00      	nop
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	2000047c 	.word	0x2000047c

08006d34 <RDA5807_PowerOff>:

void RDA5807_PowerOff(void)
    {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] ^ RDA_POWER;
 8006d38:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <RDA5807_PowerOff+0x18>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f083 0301 	eor.w	r3, r3, #1
 8006d40:	4a02      	ldr	r2, [pc, #8]	; (8006d4c <RDA5807_PowerOff+0x18>)
 8006d42:	6013      	str	r3, [r2, #0]
	RDA5807_WriteAllRegs();
 8006d44:	f7ff ff72 	bl	8006c2c <RDA5807_WriteAllRegs>
    }
 8006d48:	bf00      	nop
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	2000047c 	.word	0x2000047c

08006d50 <RDA5807_Volume>:
	RDA5807_Init();
	RDA5807_PowerOn();
    }

void RDA5807_Volume(int8_t vol)
    {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	71fb      	strb	r3, [r7, #7]
	if (vol > 15)
 8006d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d5e:	2b0f      	cmp	r3, #15
 8006d60:	dd01      	ble.n	8006d66 <RDA5807_Volume+0x16>
	    {
		vol = 15;			//Volume is already at 15 level
 8006d62:	230f      	movs	r3, #15
 8006d64:	71fb      	strb	r3, [r7, #7]
	    }
	if (vol < 0)
 8006d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da01      	bge.n	8006d72 <RDA5807_Volume+0x22>
	    {
		vol = 0;			//Volume is already at 0 level
 8006d6e:	2300      	movs	r3, #0
 8006d70:	71fb      	strb	r3, [r7, #7]
	    }
	RDA5807M_WriteReg[3] = (RDA5807M_WriteReg[3] & 0xFFF0) | vol;   // Set New Volume
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <RDA5807_Volume+0x44>)
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	4a04      	ldr	r2, [pc, #16]	; (8006d94 <RDA5807_Volume+0x44>)
 8006d84:	60d3      	str	r3, [r2, #12]
	RDA5807_WriteAllRegs();
 8006d86:	f7ff ff51 	bl	8006c2c <RDA5807_WriteAllRegs>
    }
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	2000047c 	.word	0x2000047c

08006d98 <RDA5807_SeekUp>:
	    }
	RDA5807_WriteAllRegs();
    }

void RDA5807_SeekUp(void)
    {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] | RDA_SEEK_UP;   // Set Seek Up
 8006d9c:	4b08      	ldr	r3, [pc, #32]	; (8006dc0 <RDA5807_SeekUp+0x28>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006da4:	4a06      	ldr	r2, [pc, #24]	; (8006dc0 <RDA5807_SeekUp+0x28>)
 8006da6:	6013      	str	r3, [r2, #0]
	RDA5807_WriteAllRegs();
 8006da8:	f7ff ff40 	bl	8006c2c <RDA5807_WriteAllRegs>
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] & RDA_SEEK_STOP;   // Disable Seek
 8006dac:	4b04      	ldr	r3, [pc, #16]	; (8006dc0 <RDA5807_SeekUp+0x28>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8006db4:	4013      	ands	r3, r2
 8006db6:	4a02      	ldr	r2, [pc, #8]	; (8006dc0 <RDA5807_SeekUp+0x28>)
 8006db8:	6013      	str	r3, [r2, #0]
    }
 8006dba:	bf00      	nop
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	2000047c 	.word	0x2000047c
 8006dc4:	00000000 	.word	0x00000000

08006dc8 <RDA5807_SetFrequency>:
	RDA5807_WriteAllRegs();
	RDA5807M_WriteReg[0] = RDA5807M_WriteReg[0] & RDA_SEEK_STOP;   // Disable Seek
    }

void RDA5807_SetFrequency(float Freq)
    {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	ed87 0a01 	vstr	s0, [r7, #4]
	int Channel;
	Channel = ((Freq/10) - StartingFreq) / 0.1;
 8006dd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006dd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006dda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006dde:	ee16 0a90 	vmov	r0, s13
 8006de2:	f7f9 fc39 	bl	8000658 <__aeabi_f2d>
 8006de6:	a317      	add	r3, pc, #92	; (adr r3, 8006e44 <RDA5807_SetFrequency+0x7c>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fad4 	bl	8000398 <__aeabi_dsub>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	a314      	add	r3, pc, #80	; (adr r3, 8006e4c <RDA5807_SetFrequency+0x84>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f7f9 fdad 	bl	800095c <__aeabi_ddiv>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4610      	mov	r0, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f7f9 ff17 	bl	8000c3c <__aeabi_d2iz>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	60fb      	str	r3, [r7, #12]
	Channel = Channel & 0x03FF;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e18:	60fb      	str	r3, [r7, #12]
	RDA5807M_WriteReg[1] = Channel * 64 + 0x10;  // Channel + TUNE-Bit + Band=00(87-108) + Space=00(100kHz)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	019b      	lsls	r3, r3, #6
 8006e1e:	3310      	adds	r3, #16
 8006e20:	461a      	mov	r2, r3
 8006e22:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <RDA5807_SetFrequency+0x78>)
 8006e24:	605a      	str	r2, [r3, #4]
	RDA5807_WriteAllRegs();
 8006e26:	f7ff ff01 	bl	8006c2c <RDA5807_WriteAllRegs>
	RDA5807M_WriteReg[1] = RDA5807M_WriteReg[1] & RDA_TUNE_OFF;
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <RDA5807_SetFrequency+0x78>)
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006e32:	4013      	ands	r3, r2
 8006e34:	4a02      	ldr	r2, [pc, #8]	; (8006e40 <RDA5807_SetFrequency+0x78>)
 8006e36:	6053      	str	r3, [r2, #4]
    }
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	2000047c 	.word	0x2000047c
 8006e44:	00000000 	.word	0x00000000
 8006e48:	4055c000 	.word	0x4055c000
 8006e4c:	9999999a 	.word	0x9999999a
 8006e50:	3fb99999 	.word	0x3fb99999

08006e54 <RDA5807_GetFrequency>:

uint16_t RDA5807_GetFrequency(void)
    {
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
	return (freq / 100);
 8006e58:	4b06      	ldr	r3, [pc, #24]	; (8006e74 <RDA5807_GetFrequency+0x20>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a06      	ldr	r2, [pc, #24]	; (8006e78 <RDA5807_GetFrequency+0x24>)
 8006e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8006e62:	1152      	asrs	r2, r2, #5
 8006e64:	17db      	asrs	r3, r3, #31
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	b29b      	uxth	r3, r3
    }
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	20000258 	.word	0x20000258
 8006e78:	51eb851f 	.word	0x51eb851f

08006e7c <RDA5807_GetRSSI>:

uint16_t RDA5807_GetRSSI(void)
    {
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
	return signal;
 8006e80:	4b03      	ldr	r3, [pc, #12]	; (8006e90 <RDA5807_GetRSSI+0x14>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
    }
 8006e86:	4618      	mov	r0, r3
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	20000390 	.word	0x20000390

08006e94 <RDA5807_RDSinit>:
	    }
	RDA5807_WriteAllRegs();
    }

void RDA5807_RDSinit()
    {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
	strcpy(StationName, "        ");
 8006e98:	4a18      	ldr	r2, [pc, #96]	; (8006efc <RDA5807_RDSinit+0x68>)
 8006e9a:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <RDA5807_RDSinit+0x6c>)
 8006e9c:	cb03      	ldmia	r3!, {r0, r1}
 8006e9e:	6010      	str	r0, [r2, #0]
 8006ea0:	6051      	str	r1, [r2, #4]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	7213      	strb	r3, [r2, #8]
	strcpy(PSName, "        ");
 8006ea6:	4a17      	ldr	r2, [pc, #92]	; (8006f04 <RDA5807_RDSinit+0x70>)
 8006ea8:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <RDA5807_RDSinit+0x6c>)
 8006eaa:	cb03      	ldmia	r3!, {r0, r1}
 8006eac:	6010      	str	r0, [r2, #0]
 8006eae:	6051      	str	r1, [r2, #4]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	7213      	strb	r3, [r2, #8]
	strcpy(PSName1, "        ");
 8006eb4:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <RDA5807_RDSinit+0x74>)
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <RDA5807_RDSinit+0x6c>)
 8006eb8:	cb03      	ldmia	r3!, {r0, r1}
 8006eba:	6010      	str	r0, [r2, #0]
 8006ebc:	6051      	str	r1, [r2, #4]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	7213      	strb	r3, [r2, #8]
	strcpy(PSName2, "        ");
 8006ec2:	4a12      	ldr	r2, [pc, #72]	; (8006f0c <RDA5807_RDSinit+0x78>)
 8006ec4:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <RDA5807_RDSinit+0x6c>)
 8006ec6:	cb03      	ldmia	r3!, {r0, r1}
 8006ec8:	6010      	str	r0, [r2, #0]
 8006eca:	6051      	str	r1, [r2, #4]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	7213      	strb	r3, [r2, #8]
	memset(RDStext, '\0', sizeof(RDStext));
 8006ed0:	2242      	movs	r2, #66	; 0x42
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	480e      	ldr	r0, [pc, #56]	; (8006f10 <RDA5807_RDSinit+0x7c>)
 8006ed6:	f00e fe93 	bl	8015c00 <memset>
	memset(RDStextbuffer, '\0', sizeof(RDStextbuffer));
 8006eda:	2242      	movs	r2, #66	; 0x42
 8006edc:	2100      	movs	r1, #0
 8006ede:	480d      	ldr	r0, [pc, #52]	; (8006f14 <RDA5807_RDSinit+0x80>)
 8006ee0:	f00e fe8e 	bl	8015c00 <memset>
	lastTextIDX = 0;
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <RDA5807_RDSinit+0x84>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
	mins = 0;
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <RDA5807_RDSinit+0x88>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
	sprintf(CTtime, "CT --:--");
 8006ef0:	490b      	ldr	r1, [pc, #44]	; (8006f20 <RDA5807_RDSinit+0x8c>)
 8006ef2:	480c      	ldr	r0, [pc, #48]	; (8006f24 <RDA5807_RDSinit+0x90>)
 8006ef4:	f00e fe8c 	bl	8015c10 <siprintf>
    }
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000454 	.word	0x20000454
 8006f00:	0801800c 	.word	0x0801800c
 8006f04:	200002a4 	.word	0x200002a4
 8006f08:	200003f8 	.word	0x200003f8
 8006f0c:	2000023c 	.word	0x2000023c
 8006f10:	2000025c 	.word	0x2000025c
 8006f14:	200003a4 	.word	0x200003a4
 8006f18:	2000036c 	.word	0x2000036c
 8006f1c:	200003e8 	.word	0x200003e8
 8006f20:	08018018 	.word	0x08018018
 8006f24:	200003ec 	.word	0x200003ec

08006f28 <RDA5807_Read>:


// Read all RDA5807 registers
void RDA5807_Read()
    {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af02      	add	r7, sp, #8
	RDAstatus =  HAL_I2C_Master_Receive(&hi2c2, RDASequential << 1, (void *)&I2C_BUFF, 2*7, 100);
 8006f2e:	2364      	movs	r3, #100	; 0x64
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	230e      	movs	r3, #14
 8006f34:	4a85      	ldr	r2, [pc, #532]	; (800714c <RDA5807_Read+0x224>)
 8006f36:	2120      	movs	r1, #32
 8006f38:	4885      	ldr	r0, [pc, #532]	; (8007150 <RDA5807_Read+0x228>)
 8006f3a:	f008 fe1f 	bl	800fb7c <HAL_I2C_Master_Receive>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b84      	ldr	r3, [pc, #528]	; (8007154 <RDA5807_Read+0x22c>)
 8006f44:	601a      	str	r2, [r3, #0]
	int i = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	607b      	str	r3, [r7, #4]
	for ( i = 0; i < 6; i++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	e012      	b.n	8006f76 <RDA5807_Read+0x4e>
	    {
		RDA5807M_ReadReg[i] = ((I2C_BUFF[i * 2] << 8) | I2C_BUFF[(i * 2) + 1]);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	4a7d      	ldr	r2, [pc, #500]	; (800714c <RDA5807_Read+0x224>)
 8006f56:	5cd3      	ldrb	r3, [r2, r3]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	0052      	lsls	r2, r2, #1
 8006f5e:	3201      	adds	r2, #1
 8006f60:	497a      	ldr	r1, [pc, #488]	; (800714c <RDA5807_Read+0x224>)
 8006f62:	5c8a      	ldrb	r2, [r1, r2]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	4a7b      	ldr	r2, [pc, #492]	; (8007158 <RDA5807_Read+0x230>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for ( i = 0; i < 6; i++)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3301      	adds	r3, #1
 8006f74:	607b      	str	r3, [r7, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b05      	cmp	r3, #5
 8006f7a:	dde9      	ble.n	8006f50 <RDA5807_Read+0x28>
	    }

	//RDS Text data blocks
	block1 = RDA5807M_ReadReg[2];
 8006f7c:	4b76      	ldr	r3, [pc, #472]	; (8007158 <RDA5807_Read+0x230>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b76      	ldr	r3, [pc, #472]	; (800715c <RDA5807_Read+0x234>)
 8006f84:	601a      	str	r2, [r3, #0]
	block2 = RDA5807M_ReadReg[3];
 8006f86:	4b74      	ldr	r3, [pc, #464]	; (8007158 <RDA5807_Read+0x230>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4b74      	ldr	r3, [pc, #464]	; (8007160 <RDA5807_Read+0x238>)
 8006f8e:	601a      	str	r2, [r3, #0]
	block3 = RDA5807M_ReadReg[4];
 8006f90:	4b71      	ldr	r3, [pc, #452]	; (8007158 <RDA5807_Read+0x230>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	461a      	mov	r2, r3
 8006f96:	4b73      	ldr	r3, [pc, #460]	; (8007164 <RDA5807_Read+0x23c>)
 8006f98:	601a      	str	r2, [r3, #0]
	block4 = RDA5807M_ReadReg[5];
 8006f9a:	4b6f      	ldr	r3, [pc, #444]	; (8007158 <RDA5807_Read+0x230>)
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	4b71      	ldr	r3, [pc, #452]	; (8007168 <RDA5807_Read+0x240>)
 8006fa2:	601a      	str	r2, [r3, #0]

	rdsready      = RDA5807M_ReadReg[0] & 0x8000;				//if rdsready != 0 rds data are ready
 8006fa4:	4b6c      	ldr	r3, [pc, #432]	; (8007158 <RDA5807_Read+0x230>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fac:	4a6f      	ldr	r2, [pc, #444]	; (800716c <RDA5807_Read+0x244>)
 8006fae:	6013      	str	r3, [r2, #0]
	tuneok        = RDA5807M_ReadReg[0] & 0x4000;				//if tuneok != 0 seek/tune completed
 8006fb0:	4b69      	ldr	r3, [pc, #420]	; (8007158 <RDA5807_Read+0x230>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb8:	4a6d      	ldr	r2, [pc, #436]	; (8007170 <RDA5807_Read+0x248>)
 8006fba:	6013      	str	r3, [r2, #0]
	nochannel     = RDA5807M_ReadReg[0] & 0x2000;				//if nochannel != 0 no channel found
 8006fbc:	4b66      	ldr	r3, [pc, #408]	; (8007158 <RDA5807_Read+0x230>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc4:	4a6b      	ldr	r2, [pc, #428]	; (8007174 <RDA5807_Read+0x24c>)
 8006fc6:	6013      	str	r3, [r2, #0]
	rdssynchro    = RDA5807M_ReadReg[0] & 0x1000;				//if rdssynchro = 1000 rds decoder syncrhonized
 8006fc8:	4b63      	ldr	r3, [pc, #396]	; (8007158 <RDA5807_Read+0x230>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fd0:	4a69      	ldr	r2, [pc, #420]	; (8007178 <RDA5807_Read+0x250>)
 8006fd2:	6013      	str	r3, [r2, #0]
	stereo        = RDA5807M_ReadReg[0] & 0x0400; 				//if stereo = 0 station is mono else stereo
 8006fd4:	4b60      	ldr	r3, [pc, #384]	; (8007158 <RDA5807_Read+0x230>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fdc:	4a67      	ldr	r2, [pc, #412]	; (800717c <RDA5807_Read+0x254>)
 8006fde:	6013      	str	r3, [r2, #0]
	freq          = (((RDA5807M_ReadReg[0] & 0x03FF) * 100) + 87000);	//return freq ex 102600KHz > 102.6MHz
 8006fe0:	4b5d      	ldr	r3, [pc, #372]	; (8007158 <RDA5807_Read+0x230>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fe8:	2264      	movs	r2, #100	; 0x64
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	f503 33a9 	add.w	r3, r3, #86528	; 0x15200
 8006ff2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4b61      	ldr	r3, [pc, #388]	; (8007180 <RDA5807_Read+0x258>)
 8006ffa:	601a      	str	r2, [r3, #0]
	signal        = RDA5807M_ReadReg[1] >> 9;				//return signal strength rssi
 8006ffc:	4b56      	ldr	r3, [pc, #344]	; (8007158 <RDA5807_Read+0x230>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	0a5b      	lsrs	r3, r3, #9
 8007002:	461a      	mov	r2, r3
 8007004:	4b5f      	ldr	r3, [pc, #380]	; (8007184 <RDA5807_Read+0x25c>)
 8007006:	601a      	str	r2, [r3, #0]
	fmready       = RDA5807M_ReadReg[1] & 0x0008; 				//if fmready = 8 > fm is ready
 8007008:	4b53      	ldr	r3, [pc, #332]	; (8007158 <RDA5807_Read+0x230>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	4a5d      	ldr	r2, [pc, #372]	; (8007188 <RDA5807_Read+0x260>)
 8007012:	6013      	str	r3, [r2, #0]
	fmstation     = RDA5807M_ReadReg[1] & 0x0100; 				//if fmstation = 100 fm station is true
 8007014:	4b50      	ldr	r3, [pc, #320]	; (8007158 <RDA5807_Read+0x230>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701c:	4a5b      	ldr	r2, [pc, #364]	; (800718c <RDA5807_Read+0x264>)
 800701e:	6013      	str	r3, [r2, #0]
	rdsblockerror = RDA5807M_ReadReg[1] & 0x000C;				//check for rds blocks errors
 8007020:	4b4d      	ldr	r3, [pc, #308]	; (8007158 <RDA5807_Read+0x230>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f003 030c 	and.w	r3, r3, #12
 8007028:	4a59      	ldr	r2, [pc, #356]	; (8007190 <RDA5807_Read+0x268>)
 800702a:	6013      	str	r3, [r2, #0]
										//00= 0 errors,01= 1~2 errors requiring correction
										//10= 3~5 errors requiring correction
										//11= 6+ errors or error in checkword, correction not possible.

	if (rdssynchro != 0x1000)
 800702c:	4b52      	ldr	r3, [pc, #328]	; (8007178 <RDA5807_Read+0x250>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007034:	d001      	beq.n	800703a <RDA5807_Read+0x112>
	    {  // RDS not synchronised or tuning changed, reset all the RDS info.
		RDA5807_RDSinit();
 8007036:	f7ff ff2d 	bl	8006e94 <RDA5807_RDSinit>
	    }

	// analyzing Block 2
	rdsGroupType = 0x0A | ((block2 & 0xF000) >> 8) | ((block2 & 0x0800) >> 11);
 800703a:	4b49      	ldr	r3, [pc, #292]	; (8007160 <RDA5807_Read+0x238>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	121b      	asrs	r3, r3, #8
 8007040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007044:	f043 020a 	orr.w	r2, r3, #10
 8007048:	4b45      	ldr	r3, [pc, #276]	; (8007160 <RDA5807_Read+0x238>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	12db      	asrs	r3, r3, #11
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	4313      	orrs	r3, r2
 8007054:	4a4f      	ldr	r2, [pc, #316]	; (8007194 <RDA5807_Read+0x26c>)
 8007056:	6013      	str	r3, [r2, #0]
	rdsTP = (block2 & 0x0400);
 8007058:	4b41      	ldr	r3, [pc, #260]	; (8007160 <RDA5807_Read+0x238>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007060:	4a4d      	ldr	r2, [pc, #308]	; (8007198 <RDA5807_Read+0x270>)
 8007062:	6013      	str	r3, [r2, #0]
	rdsPTY = (block2 & 0x0400);
 8007064:	4b3e      	ldr	r3, [pc, #248]	; (8007160 <RDA5807_Read+0x238>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800706c:	4a4b      	ldr	r2, [pc, #300]	; (800719c <RDA5807_Read+0x274>)
 800706e:	6013      	str	r3, [r2, #0]
	switch (rdsGroupType)
 8007070:	4b48      	ldr	r3, [pc, #288]	; (8007194 <RDA5807_Read+0x26c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2bea      	cmp	r3, #234	; 0xea
 8007076:	f000 81dd 	beq.w	8007434 <RDA5807_Read+0x50c>
 800707a:	2bea      	cmp	r3, #234	; 0xea
 800707c:	f300 8204 	bgt.w	8007488 <RDA5807_Read+0x560>
 8007080:	2bca      	cmp	r3, #202	; 0xca
 8007082:	f000 8203 	beq.w	800748c <RDA5807_Read+0x564>
 8007086:	2bca      	cmp	r3, #202	; 0xca
 8007088:	f300 81fe 	bgt.w	8007488 <RDA5807_Read+0x560>
 800708c:	2baa      	cmp	r3, #170	; 0xaa
 800708e:	f000 81ff 	beq.w	8007490 <RDA5807_Read+0x568>
 8007092:	2baa      	cmp	r3, #170	; 0xaa
 8007094:	f300 81f8 	bgt.w	8007488 <RDA5807_Read+0x560>
 8007098:	2b8a      	cmp	r3, #138	; 0x8a
 800709a:	f000 81fb 	beq.w	8007494 <RDA5807_Read+0x56c>
 800709e:	2b8a      	cmp	r3, #138	; 0x8a
 80070a0:	f300 81f2 	bgt.w	8007488 <RDA5807_Read+0x560>
 80070a4:	2b6a      	cmp	r3, #106	; 0x6a
 80070a6:	f000 81f7 	beq.w	8007498 <RDA5807_Read+0x570>
 80070aa:	2b6a      	cmp	r3, #106	; 0x6a
 80070ac:	f300 81ec 	bgt.w	8007488 <RDA5807_Read+0x560>
 80070b0:	2b4a      	cmp	r3, #74	; 0x4a
 80070b2:	f000 814e 	beq.w	8007352 <RDA5807_Read+0x42a>
 80070b6:	2b4a      	cmp	r3, #74	; 0x4a
 80070b8:	f300 81e6 	bgt.w	8007488 <RDA5807_Read+0x560>
 80070bc:	2b0b      	cmp	r3, #11
 80070be:	dc02      	bgt.n	80070c6 <RDA5807_Read+0x19e>
 80070c0:	2b0a      	cmp	r3, #10
 80070c2:	da04      	bge.n	80070ce <RDA5807_Read+0x1a6>
		// IH
		break;

	    default:

		break;
 80070c4:	e1e0      	b.n	8007488 <RDA5807_Read+0x560>
	switch (rdsGroupType)
 80070c6:	2b2a      	cmp	r3, #42	; 0x2a
 80070c8:	f000 80b7 	beq.w	800723a <RDA5807_Read+0x312>
		break;
 80070cc:	e1dc      	b.n	8007488 <RDA5807_Read+0x560>
		idx = 2 * (block2 & 0x0003);
 80070ce:	4b24      	ldr	r3, [pc, #144]	; (8007160 <RDA5807_Read+0x238>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	4a31      	ldr	r2, [pc, #196]	; (80071a0 <RDA5807_Read+0x278>)
 80070da:	6013      	str	r3, [r2, #0]
		c1 = block4 >> 8;
 80070dc:	4b22      	ldr	r3, [pc, #136]	; (8007168 <RDA5807_Read+0x240>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	121b      	asrs	r3, r3, #8
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	4b2f      	ldr	r3, [pc, #188]	; (80071a4 <RDA5807_Read+0x27c>)
 80070e6:	701a      	strb	r2, [r3, #0]
		c2 = block4 & 0x00FF;
 80070e8:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <RDA5807_Read+0x240>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4b2e      	ldr	r3, [pc, #184]	; (80071a8 <RDA5807_Read+0x280>)
 80070f0:	701a      	strb	r2, [r3, #0]
		if ((PSName1[idx] == c1) && (PSName1[idx + 1] == c2))
 80070f2:	4b2b      	ldr	r3, [pc, #172]	; (80071a0 <RDA5807_Read+0x278>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2d      	ldr	r2, [pc, #180]	; (80071ac <RDA5807_Read+0x284>)
 80070f8:	5cd2      	ldrb	r2, [r2, r3]
 80070fa:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <RDA5807_Read+0x27c>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d178      	bne.n	80071f4 <RDA5807_Read+0x2cc>
 8007102:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <RDA5807_Read+0x278>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a28      	ldr	r2, [pc, #160]	; (80071ac <RDA5807_Read+0x284>)
 800710a:	5cd2      	ldrb	r2, [r2, r3]
 800710c:	4b26      	ldr	r3, [pc, #152]	; (80071a8 <RDA5807_Read+0x280>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d16f      	bne.n	80071f4 <RDA5807_Read+0x2cc>
			PSName2[idx] = c1;
 8007114:	4b22      	ldr	r3, [pc, #136]	; (80071a0 <RDA5807_Read+0x278>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a22      	ldr	r2, [pc, #136]	; (80071a4 <RDA5807_Read+0x27c>)
 800711a:	7811      	ldrb	r1, [r2, #0]
 800711c:	4a24      	ldr	r2, [pc, #144]	; (80071b0 <RDA5807_Read+0x288>)
 800711e:	54d1      	strb	r1, [r2, r3]
			PSName2[idx + 1] = c2;
 8007120:	4b1f      	ldr	r3, [pc, #124]	; (80071a0 <RDA5807_Read+0x278>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	4a20      	ldr	r2, [pc, #128]	; (80071a8 <RDA5807_Read+0x280>)
 8007128:	7811      	ldrb	r1, [r2, #0]
 800712a:	4a21      	ldr	r2, [pc, #132]	; (80071b0 <RDA5807_Read+0x288>)
 800712c:	54d1      	strb	r1, [r2, r3]
			PSName2[8] = '\0';
 800712e:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <RDA5807_Read+0x288>)
 8007130:	2200      	movs	r2, #0
 8007132:	721a      	strb	r2, [r3, #8]
			if (strcmp(PSName1, PSName2) == 0)
 8007134:	491e      	ldr	r1, [pc, #120]	; (80071b0 <RDA5807_Read+0x288>)
 8007136:	481d      	ldr	r0, [pc, #116]	; (80071ac <RDA5807_Read+0x284>)
 8007138:	f7f9 f8c2 	bl	80002c0 <strcmp>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d158      	bne.n	80071f4 <RDA5807_Read+0x2cc>
				int8_t n = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	70fb      	strb	r3, [r7, #3]
				for (i = 0; i < (8); i++)
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	e050      	b.n	80071ee <RDA5807_Read+0x2c6>
 800714c:	200004a4 	.word	0x200004a4
 8007150:	200006bc 	.word	0x200006bc
 8007154:	200001e0 	.word	0x200001e0
 8007158:	200002d0 	.word	0x200002d0
 800715c:	2000024c 	.word	0x2000024c
 8007160:	20000460 	.word	0x20000460
 8007164:	2000044c 	.word	0x2000044c
 8007168:	20000250 	.word	0x20000250
 800716c:	200002cc 	.word	0x200002cc
 8007170:	200002b4 	.word	0x200002b4
 8007174:	20000398 	.word	0x20000398
 8007178:	20000464 	.word	0x20000464
 800717c:	2000049c 	.word	0x2000049c
 8007180:	20000258 	.word	0x20000258
 8007184:	20000390 	.word	0x20000390
 8007188:	20000248 	.word	0x20000248
 800718c:	20000478 	.word	0x20000478
 8007190:	200004a0 	.word	0x200004a0
 8007194:	2000039c 	.word	0x2000039c
 8007198:	2000038c 	.word	0x2000038c
 800719c:	20000474 	.word	0x20000474
 80071a0:	200003a0 	.word	0x200003a0
 80071a4:	20000394 	.word	0x20000394
 80071a8:	20000254 	.word	0x20000254
 80071ac:	200003f8 	.word	0x200003f8
 80071b0:	2000023c 	.word	0x2000023c
					if (PSName2[i] > 31 && PSName2[i] < 127)
 80071b4:	4aa0      	ldr	r2, [pc, #640]	; (8007438 <RDA5807_Read+0x510>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b1f      	cmp	r3, #31
 80071be:	d913      	bls.n	80071e8 <RDA5807_Read+0x2c0>
 80071c0:	4a9d      	ldr	r2, [pc, #628]	; (8007438 <RDA5807_Read+0x510>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b7e      	cmp	r3, #126	; 0x7e
 80071ca:	d80d      	bhi.n	80071e8 <RDA5807_Read+0x2c0>
						StationName[n] = PSName2[i];
 80071cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071d0:	4999      	ldr	r1, [pc, #612]	; (8007438 <RDA5807_Read+0x510>)
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	440a      	add	r2, r1
 80071d6:	7811      	ldrb	r1, [r2, #0]
 80071d8:	4a98      	ldr	r2, [pc, #608]	; (800743c <RDA5807_Read+0x514>)
 80071da:	54d1      	strb	r1, [r2, r3]
						n++;
 80071dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	3301      	adds	r3, #1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	70fb      	strb	r3, [r7, #3]
				for (i = 0; i < (8); i++)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3301      	adds	r3, #1
 80071ec:	607b      	str	r3, [r7, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	dddf      	ble.n	80071b4 <RDA5807_Read+0x28c>
		if ((PSName1[idx] != c1) || (PSName1[idx + 1] != c2))
 80071f4:	4b92      	ldr	r3, [pc, #584]	; (8007440 <RDA5807_Read+0x518>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a92      	ldr	r2, [pc, #584]	; (8007444 <RDA5807_Read+0x51c>)
 80071fa:	5cd2      	ldrb	r2, [r2, r3]
 80071fc:	4b92      	ldr	r3, [pc, #584]	; (8007448 <RDA5807_Read+0x520>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d109      	bne.n	8007218 <RDA5807_Read+0x2f0>
 8007204:	4b8e      	ldr	r3, [pc, #568]	; (8007440 <RDA5807_Read+0x518>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3301      	adds	r3, #1
 800720a:	4a8e      	ldr	r2, [pc, #568]	; (8007444 <RDA5807_Read+0x51c>)
 800720c:	5cd2      	ldrb	r2, [r2, r3]
 800720e:	4b8f      	ldr	r3, [pc, #572]	; (800744c <RDA5807_Read+0x524>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	f000 8142 	beq.w	800749c <RDA5807_Read+0x574>
			PSName1[idx] = c1;
 8007218:	4b89      	ldr	r3, [pc, #548]	; (8007440 <RDA5807_Read+0x518>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a8a      	ldr	r2, [pc, #552]	; (8007448 <RDA5807_Read+0x520>)
 800721e:	7811      	ldrb	r1, [r2, #0]
 8007220:	4a88      	ldr	r2, [pc, #544]	; (8007444 <RDA5807_Read+0x51c>)
 8007222:	54d1      	strb	r1, [r2, r3]
			PSName1[idx + 1] = c2;
 8007224:	4b86      	ldr	r3, [pc, #536]	; (8007440 <RDA5807_Read+0x518>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3301      	adds	r3, #1
 800722a:	4a88      	ldr	r2, [pc, #544]	; (800744c <RDA5807_Read+0x524>)
 800722c:	7811      	ldrb	r1, [r2, #0]
 800722e:	4a85      	ldr	r2, [pc, #532]	; (8007444 <RDA5807_Read+0x51c>)
 8007230:	54d1      	strb	r1, [r2, r3]
			PSName1[8] = '\0';
 8007232:	4b84      	ldr	r3, [pc, #528]	; (8007444 <RDA5807_Read+0x51c>)
 8007234:	2200      	movs	r2, #0
 8007236:	721a      	strb	r2, [r3, #8]
		break;
 8007238:	e130      	b.n	800749c <RDA5807_Read+0x574>
		textAB = (block2 & 0x0010);
 800723a:	4b85      	ldr	r3, [pc, #532]	; (8007450 <RDA5807_Read+0x528>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	4a84      	ldr	r2, [pc, #528]	; (8007454 <RDA5807_Read+0x52c>)
 8007244:	6013      	str	r3, [r2, #0]
		idx = 4 * (block2 & 0x000F);
 8007246:	4b82      	ldr	r3, [pc, #520]	; (8007450 <RDA5807_Read+0x528>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4a7b      	ldr	r2, [pc, #492]	; (8007440 <RDA5807_Read+0x518>)
 8007252:	6013      	str	r3, [r2, #0]
		if (idx < lastTextIDX)
 8007254:	4b7a      	ldr	r3, [pc, #488]	; (8007440 <RDA5807_Read+0x518>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4b7f      	ldr	r3, [pc, #508]	; (8007458 <RDA5807_Read+0x530>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	da28      	bge.n	80072b2 <RDA5807_Read+0x38a>
			int8_t n = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	70bb      	strb	r3, [r7, #2]
			for (i = 0; i < strlen(RDStextbuffer); i++)
 8007264:	2300      	movs	r3, #0
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e01c      	b.n	80072a4 <RDA5807_Read+0x37c>
				if (RDStextbuffer[i] > 31 && RDStextbuffer[i] < 127)
 800726a:	4a7c      	ldr	r2, [pc, #496]	; (800745c <RDA5807_Read+0x534>)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	2b1f      	cmp	r3, #31
 8007274:	d913      	bls.n	800729e <RDA5807_Read+0x376>
 8007276:	4a79      	ldr	r2, [pc, #484]	; (800745c <RDA5807_Read+0x534>)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4413      	add	r3, r2
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b7e      	cmp	r3, #126	; 0x7e
 8007280:	d80d      	bhi.n	800729e <RDA5807_Read+0x376>
					RDStext[n] = RDStextbuffer[i];
 8007282:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007286:	4975      	ldr	r1, [pc, #468]	; (800745c <RDA5807_Read+0x534>)
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	440a      	add	r2, r1
 800728c:	7811      	ldrb	r1, [r2, #0]
 800728e:	4a74      	ldr	r2, [pc, #464]	; (8007460 <RDA5807_Read+0x538>)
 8007290:	54d1      	strb	r1, [r2, r3]
					n++;
 8007292:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	3301      	adds	r3, #1
 800729a:	b2db      	uxtb	r3, r3
 800729c:	70bb      	strb	r3, [r7, #2]
			for (i = 0; i < strlen(RDStextbuffer); i++)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3301      	adds	r3, #1
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	486d      	ldr	r0, [pc, #436]	; (800745c <RDA5807_Read+0x534>)
 80072a6:	f7f9 f815 	bl	80002d4 <strlen>
 80072aa:	4602      	mov	r2, r0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d8db      	bhi.n	800726a <RDA5807_Read+0x342>
		lastTextIDX = idx;
 80072b2:	4b63      	ldr	r3, [pc, #396]	; (8007440 <RDA5807_Read+0x518>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a68      	ldr	r2, [pc, #416]	; (8007458 <RDA5807_Read+0x530>)
 80072b8:	6013      	str	r3, [r2, #0]
		if (textAB != lasttextAB)
 80072ba:	4b66      	ldr	r3, [pc, #408]	; (8007454 <RDA5807_Read+0x52c>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4b69      	ldr	r3, [pc, #420]	; (8007464 <RDA5807_Read+0x53c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d00d      	beq.n	80072e2 <RDA5807_Read+0x3ba>
			lasttextAB = textAB;
 80072c6:	4b63      	ldr	r3, [pc, #396]	; (8007454 <RDA5807_Read+0x52c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a66      	ldr	r2, [pc, #408]	; (8007464 <RDA5807_Read+0x53c>)
 80072cc:	6013      	str	r3, [r2, #0]
			memset(RDStextbuffer, 0, sizeof(RDStextbuffer));
 80072ce:	2242      	movs	r2, #66	; 0x42
 80072d0:	2100      	movs	r1, #0
 80072d2:	4862      	ldr	r0, [pc, #392]	; (800745c <RDA5807_Read+0x534>)
 80072d4:	f00e fc94 	bl	8015c00 <memset>
			memset(RDStext, '\0', sizeof(RDStext));
 80072d8:	2242      	movs	r2, #66	; 0x42
 80072da:	2100      	movs	r1, #0
 80072dc:	4860      	ldr	r0, [pc, #384]	; (8007460 <RDA5807_Read+0x538>)
 80072de:	f00e fc8f 	bl	8015c00 <memset>
		if (rdsblockerror < 4)
 80072e2:	4b61      	ldr	r3, [pc, #388]	; (8007468 <RDA5807_Read+0x540>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	f300 80da 	bgt.w	80074a0 <RDA5807_Read+0x578>
			RDStextbuffer[idx] = (block3 >> 8);
 80072ec:	4b5f      	ldr	r3, [pc, #380]	; (800746c <RDA5807_Read+0x544>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	121a      	asrs	r2, r3, #8
 80072f2:	4b53      	ldr	r3, [pc, #332]	; (8007440 <RDA5807_Read+0x518>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	b2d1      	uxtb	r1, r2
 80072f8:	4a58      	ldr	r2, [pc, #352]	; (800745c <RDA5807_Read+0x534>)
 80072fa:	54d1      	strb	r1, [r2, r3]
			idx++;
 80072fc:	4b50      	ldr	r3, [pc, #320]	; (8007440 <RDA5807_Read+0x518>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	4a4f      	ldr	r2, [pc, #316]	; (8007440 <RDA5807_Read+0x518>)
 8007304:	6013      	str	r3, [r2, #0]
			RDStextbuffer[idx] = (block3 & 0x00FF);
 8007306:	4b59      	ldr	r3, [pc, #356]	; (800746c <RDA5807_Read+0x544>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b4d      	ldr	r3, [pc, #308]	; (8007440 <RDA5807_Read+0x518>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	b2d1      	uxtb	r1, r2
 8007310:	4a52      	ldr	r2, [pc, #328]	; (800745c <RDA5807_Read+0x534>)
 8007312:	54d1      	strb	r1, [r2, r3]
			idx++;
 8007314:	4b4a      	ldr	r3, [pc, #296]	; (8007440 <RDA5807_Read+0x518>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3301      	adds	r3, #1
 800731a:	4a49      	ldr	r2, [pc, #292]	; (8007440 <RDA5807_Read+0x518>)
 800731c:	6013      	str	r3, [r2, #0]
			RDStextbuffer[idx] = (block4 >> 8);
 800731e:	4b54      	ldr	r3, [pc, #336]	; (8007470 <RDA5807_Read+0x548>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	121a      	asrs	r2, r3, #8
 8007324:	4b46      	ldr	r3, [pc, #280]	; (8007440 <RDA5807_Read+0x518>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	b2d1      	uxtb	r1, r2
 800732a:	4a4c      	ldr	r2, [pc, #304]	; (800745c <RDA5807_Read+0x534>)
 800732c:	54d1      	strb	r1, [r2, r3]
			idx++;
 800732e:	4b44      	ldr	r3, [pc, #272]	; (8007440 <RDA5807_Read+0x518>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	4a42      	ldr	r2, [pc, #264]	; (8007440 <RDA5807_Read+0x518>)
 8007336:	6013      	str	r3, [r2, #0]
			RDStextbuffer[idx] = (block4 & 0x00FF);
 8007338:	4b4d      	ldr	r3, [pc, #308]	; (8007470 <RDA5807_Read+0x548>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4b40      	ldr	r3, [pc, #256]	; (8007440 <RDA5807_Read+0x518>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	b2d1      	uxtb	r1, r2
 8007342:	4a46      	ldr	r2, [pc, #280]	; (800745c <RDA5807_Read+0x534>)
 8007344:	54d1      	strb	r1, [r2, r3]
			idx++;
 8007346:	4b3e      	ldr	r3, [pc, #248]	; (8007440 <RDA5807_Read+0x518>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3301      	adds	r3, #1
 800734c:	4a3c      	ldr	r2, [pc, #240]	; (8007440 <RDA5807_Read+0x518>)
 800734e:	6013      	str	r3, [r2, #0]
		break;
 8007350:	e0a6      	b.n	80074a0 <RDA5807_Read+0x578>
		if (rdsblockerror < 3)
 8007352:	4b45      	ldr	r3, [pc, #276]	; (8007468 <RDA5807_Read+0x540>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b02      	cmp	r3, #2
 8007358:	dc21      	bgt.n	800739e <RDA5807_Read+0x476>
			offset = (block4) & 0x3F; // 6 bits
 800735a:	4b45      	ldr	r3, [pc, #276]	; (8007470 <RDA5807_Read+0x548>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007362:	4a44      	ldr	r2, [pc, #272]	; (8007474 <RDA5807_Read+0x54c>)
 8007364:	6013      	str	r3, [r2, #0]
			mins = (block4 >> 6) & 0x3F; // 6 bits
 8007366:	4b42      	ldr	r3, [pc, #264]	; (8007470 <RDA5807_Read+0x548>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	119b      	asrs	r3, r3, #6
 800736c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007370:	4a41      	ldr	r2, [pc, #260]	; (8007478 <RDA5807_Read+0x550>)
 8007372:	6013      	str	r3, [r2, #0]
			mins += 60 * (((block3 & 0x0001) << 4) | ((block4 >> 12) & 0x0F));
 8007374:	4b3d      	ldr	r3, [pc, #244]	; (800746c <RDA5807_Read+0x544>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	f003 0210 	and.w	r2, r3, #16
 800737e:	4b3c      	ldr	r3, [pc, #240]	; (8007470 <RDA5807_Read+0x548>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	131b      	asrs	r3, r3, #12
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	431a      	orrs	r2, r3
 800738a:	4613      	mov	r3, r2
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	461a      	mov	r2, r3
 8007394:	4b38      	ldr	r3, [pc, #224]	; (8007478 <RDA5807_Read+0x550>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4413      	add	r3, r2
 800739a:	4a37      	ldr	r2, [pc, #220]	; (8007478 <RDA5807_Read+0x550>)
 800739c:	6013      	str	r3, [r2, #0]
		if (offset & 0x20)
 800739e:	4b35      	ldr	r3, [pc, #212]	; (8007474 <RDA5807_Read+0x54c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00e      	beq.n	80073c8 <RDA5807_Read+0x4a0>
			mins -= 30 * (offset & 0x1F);
 80073aa:	4b32      	ldr	r3, [pc, #200]	; (8007474 <RDA5807_Read+0x54c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 021f 	and.w	r2, r3, #31
 80073b2:	4613      	mov	r3, r2
 80073b4:	0112      	lsls	r2, r2, #4
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	461a      	mov	r2, r3
 80073bc:	4b2e      	ldr	r3, [pc, #184]	; (8007478 <RDA5807_Read+0x550>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4413      	add	r3, r2
 80073c2:	4a2d      	ldr	r2, [pc, #180]	; (8007478 <RDA5807_Read+0x550>)
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e00d      	b.n	80073e4 <RDA5807_Read+0x4bc>
			mins += 30 * (offset & 0x1F);
 80073c8:	4b2a      	ldr	r3, [pc, #168]	; (8007474 <RDA5807_Read+0x54c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 021f 	and.w	r2, r3, #31
 80073d0:	4613      	mov	r3, r2
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	461a      	mov	r2, r3
 80073da:	4b27      	ldr	r3, [pc, #156]	; (8007478 <RDA5807_Read+0x550>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4413      	add	r3, r2
 80073e0:	4a25      	ldr	r2, [pc, #148]	; (8007478 <RDA5807_Read+0x550>)
 80073e2:	6013      	str	r3, [r2, #0]
		if (mins > 0 && mins < 1500)
 80073e4:	4b24      	ldr	r3, [pc, #144]	; (8007478 <RDA5807_Read+0x550>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dd5b      	ble.n	80074a4 <RDA5807_Read+0x57c>
 80073ec:	4b22      	ldr	r3, [pc, #136]	; (8007478 <RDA5807_Read+0x550>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f240 52db 	movw	r2, #1499	; 0x5db
 80073f4:	4293      	cmp	r3, r2
 80073f6:	dc55      	bgt.n	80074a4 <RDA5807_Read+0x57c>
			sprintf(CTtime, "CT %2d:%02d", (mins / 60), (mins % 60));  // CT time formatted string
 80073f8:	4b1f      	ldr	r3, [pc, #124]	; (8007478 <RDA5807_Read+0x550>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1f      	ldr	r2, [pc, #124]	; (800747c <RDA5807_Read+0x554>)
 80073fe:	fb82 1203 	smull	r1, r2, r2, r3
 8007402:	441a      	add	r2, r3
 8007404:	1152      	asrs	r2, r2, #5
 8007406:	17db      	asrs	r3, r3, #31
 8007408:	1ad0      	subs	r0, r2, r3
 800740a:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <RDA5807_Read+0x550>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b1b      	ldr	r3, [pc, #108]	; (800747c <RDA5807_Read+0x554>)
 8007410:	fb83 1302 	smull	r1, r3, r3, r2
 8007414:	4413      	add	r3, r2
 8007416:	1159      	asrs	r1, r3, #5
 8007418:	17d3      	asrs	r3, r2, #31
 800741a:	1ac9      	subs	r1, r1, r3
 800741c:	460b      	mov	r3, r1
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	1a5b      	subs	r3, r3, r1
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	1ad1      	subs	r1, r2, r3
 8007426:	460b      	mov	r3, r1
 8007428:	4602      	mov	r2, r0
 800742a:	4915      	ldr	r1, [pc, #84]	; (8007480 <RDA5807_Read+0x558>)
 800742c:	4815      	ldr	r0, [pc, #84]	; (8007484 <RDA5807_Read+0x55c>)
 800742e:	f00e fbef 	bl	8015c10 <siprintf>
		break;
 8007432:	e037      	b.n	80074a4 <RDA5807_Read+0x57c>
		break;
 8007434:	bf00      	nop
 8007436:	e036      	b.n	80074a6 <RDA5807_Read+0x57e>
 8007438:	2000023c 	.word	0x2000023c
 800743c:	20000454 	.word	0x20000454
 8007440:	200003a0 	.word	0x200003a0
 8007444:	200003f8 	.word	0x200003f8
 8007448:	20000394 	.word	0x20000394
 800744c:	20000254 	.word	0x20000254
 8007450:	20000460 	.word	0x20000460
 8007454:	20000470 	.word	0x20000470
 8007458:	2000036c 	.word	0x2000036c
 800745c:	200003a4 	.word	0x200003a4
 8007460:	2000025c 	.word	0x2000025c
 8007464:	20000370 	.word	0x20000370
 8007468:	200004a0 	.word	0x200004a0
 800746c:	2000044c 	.word	0x2000044c
 8007470:	20000250 	.word	0x20000250
 8007474:	2000046c 	.word	0x2000046c
 8007478:	200003e8 	.word	0x200003e8
 800747c:	88888889 	.word	0x88888889
 8007480:	08018024 	.word	0x08018024
 8007484:	200003ec 	.word	0x200003ec
		break;
 8007488:	bf00      	nop
 800748a:	e00c      	b.n	80074a6 <RDA5807_Read+0x57e>
		break;
 800748c:	bf00      	nop
 800748e:	e00a      	b.n	80074a6 <RDA5807_Read+0x57e>
		break;
 8007490:	bf00      	nop
 8007492:	e008      	b.n	80074a6 <RDA5807_Read+0x57e>
		break;
 8007494:	bf00      	nop
 8007496:	e006      	b.n	80074a6 <RDA5807_Read+0x57e>
		break;
 8007498:	bf00      	nop
 800749a:	e004      	b.n	80074a6 <RDA5807_Read+0x57e>
		break;
 800749c:	bf00      	nop
 800749e:	e002      	b.n	80074a6 <RDA5807_Read+0x57e>
		break;
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <RDA5807_Read+0x57e>
		break;
 80074a4:	bf00      	nop
	    }
    }
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop

080074b0 <TDA7719_init>:
// Function definitions
//--------------------------------------------------------------

//Function used for prototyping and initialing preamp on startup of MCU
void TDA7719_init(void)
    {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x7) | (5 & 0x7);		//Main source selector - input IN1
 80074b4:	4ba4      	ldr	r3, [pc, #656]	; (8007748 <TDA7719_init+0x298>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	f023 0307 	bic.w	r3, r3, #7
 80074be:	b25b      	sxtb	r3, r3
 80074c0:	f043 0305 	orr.w	r3, r3, #5
 80074c4:	b25b      	sxtb	r3, r3
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	4b9f      	ldr	r3, [pc, #636]	; (8007748 <TDA7719_init+0x298>)
 80074ca:	701a      	strb	r2, [r3, #0]
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x8) | ((1 << 3) & 0x8);	//MD1/2 confg for main selector - MD2
 80074cc:	4b9e      	ldr	r3, [pc, #632]	; (8007748 <TDA7719_init+0x298>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f043 0308 	orr.w	r3, r3, #8
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	4b9c      	ldr	r3, [pc, #624]	; (8007748 <TDA7719_init+0x298>)
 80074d8:	701a      	strb	r2, [r3, #0]
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x10) | ((0 << 4) & 0x10); 	// main source input gain select - +3dB
 80074da:	4b9b      	ldr	r3, [pc, #620]	; (8007748 <TDA7719_init+0x298>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	f023 0310 	bic.w	r3, r3, #16
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	4b98      	ldr	r3, [pc, #608]	; (8007748 <TDA7719_init+0x298>)
 80074e6:	701a      	strb	r2, [r3, #0]
	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0xE0) | ((0b101 << 5) & 0xE0); 	// CFG5
 80074e8:	4b97      	ldr	r3, [pc, #604]	; (8007748 <TDA7719_init+0x298>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b25b      	sxtb	r3, r3
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	b25b      	sxtb	r3, r3
 80074f4:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80074f8:	b25b      	sxtb	r3, r3
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	4b92      	ldr	r3, [pc, #584]	; (8007748 <TDA7719_init+0x298>)
 80074fe:	701a      	strb	r2, [r3, #0]
	I2C_send(TDA7719_INPUT, TDA7719_registers[TDA7719_INPUT]);
 8007500:	4b91      	ldr	r3, [pc, #580]	; (8007748 <TDA7719_init+0x298>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	2000      	movs	r0, #0
 8007508:	f001 f880 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x7) | (2 & 0x7);		//second source selector - IN2
 800750c:	4b8e      	ldr	r3, [pc, #568]	; (8007748 <TDA7719_init+0x298>)
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	b25b      	sxtb	r3, r3
 8007512:	f023 0307 	bic.w	r3, r3, #7
 8007516:	b25b      	sxtb	r3, r3
 8007518:	f043 0302 	orr.w	r3, r3, #2
 800751c:	b25b      	sxtb	r3, r3
 800751e:	b2da      	uxtb	r2, r3
 8007520:	4b89      	ldr	r3, [pc, #548]	; (8007748 <TDA7719_init+0x298>)
 8007522:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x8) | ((0 << 3) & 0x8);	//MD1/2 config for 2nd - MD2
 8007524:	4b88      	ldr	r3, [pc, #544]	; (8007748 <TDA7719_init+0x298>)
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	f023 0308 	bic.w	r3, r3, #8
 800752c:	b2da      	uxtb	r2, r3
 800752e:	4b86      	ldr	r3, [pc, #536]	; (8007748 <TDA7719_init+0x298>)
 8007530:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x10) | ((0 << 4) & 0x10);	//2nd Source input gain - +3dB
 8007532:	4b85      	ldr	r3, [pc, #532]	; (8007748 <TDA7719_init+0x298>)
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	f023 0310 	bic.w	r3, r3, #16
 800753a:	b2da      	uxtb	r2, r3
 800753c:	4b82      	ldr	r3, [pc, #520]	; (8007748 <TDA7719_init+0x298>)
 800753e:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x20) | ((1 << 5) & 0x20);	//QD2 Bypass (front) - OFF
 8007540:	4b81      	ldr	r3, [pc, #516]	; (8007748 <TDA7719_init+0x298>)
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	f043 0320 	orr.w	r3, r3, #32
 8007548:	b2da      	uxtb	r2, r3
 800754a:	4b7f      	ldr	r3, [pc, #508]	; (8007748 <TDA7719_init+0x298>)
 800754c:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x40) | ((1 << 6) & 0x40);	//QD3 Bypass (rear) - OFF
 800754e:	4b7e      	ldr	r3, [pc, #504]	; (8007748 <TDA7719_init+0x298>)
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007556:	b2da      	uxtb	r2, r3
 8007558:	4b7b      	ldr	r3, [pc, #492]	; (8007748 <TDA7719_init+0x298>)
 800755a:	705a      	strb	r2, [r3, #1]
	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x80) | ((1 << 7) & 0x80); 	//QD4 Bypass (Subwoofer) - OFF
 800755c:	4b7a      	ldr	r3, [pc, #488]	; (8007748 <TDA7719_init+0x298>)
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007564:	b2da      	uxtb	r2, r3
 8007566:	4b78      	ldr	r3, [pc, #480]	; (8007748 <TDA7719_init+0x298>)
 8007568:	705a      	strb	r2, [r3, #1]
	I2C_send(TDA7719_INPUT_2, TDA7719_registers[TDA7719_INPUT_2]);
 800756a:	4b77      	ldr	r3, [pc, #476]	; (8007748 <TDA7719_init+0x298>)
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	4619      	mov	r1, r3
 8007570:	2001      	movs	r0, #1
 8007572:	f001 f84b 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_MIX_SOUR] = (TDA7719_registers[TDA7719_MIX_SOUR] & ~0x7) | (0 & 0x7); 	//Mixing Source Selector - IN0
 8007576:	4b74      	ldr	r3, [pc, #464]	; (8007748 <TDA7719_init+0x298>)
 8007578:	789b      	ldrb	r3, [r3, #2]
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	b2da      	uxtb	r2, r3
 8007580:	4b71      	ldr	r3, [pc, #452]	; (8007748 <TDA7719_init+0x298>)
 8007582:	709a      	strb	r2, [r3, #2]
	TDA7719_registers[TDA7719_MIX_SOUR] = (TDA7719_registers[TDA7719_MIX_SOUR] & ~0xF8) | ((0<< 3) & 0xF8);	//Mixing attenuator - 0dB
 8007584:	4b70      	ldr	r3, [pc, #448]	; (8007748 <TDA7719_init+0x298>)
 8007586:	789b      	ldrb	r3, [r3, #2]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	b2da      	uxtb	r2, r3
 800758e:	4b6e      	ldr	r3, [pc, #440]	; (8007748 <TDA7719_init+0x298>)
 8007590:	709a      	strb	r2, [r3, #2]
	I2C_send(TDA7719_MIX_SOUR, TDA7719_registers[TDA7719_MIX_SOUR]);
 8007592:	4b6d      	ldr	r3, [pc, #436]	; (8007748 <TDA7719_init+0x298>)
 8007594:	789b      	ldrb	r3, [r3, #2]
 8007596:	4619      	mov	r1, r3
 8007598:	2002      	movs	r0, #2
 800759a:	f001 f837 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x1) | ((1 << 0) & 0x1);	//Mix to Front left - OFF
 800759e:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <TDA7719_init+0x298>)
 80075a0:	78db      	ldrb	r3, [r3, #3]
 80075a2:	f043 0301 	orr.w	r3, r3, #1
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	4b67      	ldr	r3, [pc, #412]	; (8007748 <TDA7719_init+0x298>)
 80075aa:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x2) | ((1 << 1) & 0x2);	//Mix to front right - OFF
 80075ac:	4b66      	ldr	r3, [pc, #408]	; (8007748 <TDA7719_init+0x298>)
 80075ae:	78db      	ldrb	r3, [r3, #3]
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	4b64      	ldr	r3, [pc, #400]	; (8007748 <TDA7719_init+0x298>)
 80075b8:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x4) | ((1 << 2) & 0x4);	//Mix to Rear left - OFF
 80075ba:	4b63      	ldr	r3, [pc, #396]	; (8007748 <TDA7719_init+0x298>)
 80075bc:	78db      	ldrb	r3, [r3, #3]
 80075be:	f043 0304 	orr.w	r3, r3, #4
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	4b60      	ldr	r3, [pc, #384]	; (8007748 <TDA7719_init+0x298>)
 80075c6:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x8) | ((1 << 3) & 0x8);	//Mix to Rear right - OFF
 80075c8:	4b5f      	ldr	r3, [pc, #380]	; (8007748 <TDA7719_init+0x298>)
 80075ca:	78db      	ldrb	r3, [r3, #3]
 80075cc:	f043 0308 	orr.w	r3, r3, #8
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4b5d      	ldr	r3, [pc, #372]	; (8007748 <TDA7719_init+0x298>)
 80075d4:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x10) | ((0 << 4) & 0x10);//Rear speaker input confg - Direct path/2nd source   1 - Main signal
 80075d6:	4b5c      	ldr	r3, [pc, #368]	; (8007748 <TDA7719_init+0x298>)
 80075d8:	78db      	ldrb	r3, [r3, #3]
 80075da:	f023 0310 	bic.w	r3, r3, #16
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	4b59      	ldr	r3, [pc, #356]	; (8007748 <TDA7719_init+0x298>)
 80075e2:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x20) | ((1 << 5) & 0x20);//Reference output select - internal Vre 3V3
 80075e4:	4b58      	ldr	r3, [pc, #352]	; (8007748 <TDA7719_init+0x298>)
 80075e6:	78db      	ldrb	r3, [r3, #3]
 80075e8:	f043 0320 	orr.w	r3, r3, #32
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4b56      	ldr	r3, [pc, #344]	; (8007748 <TDA7719_init+0x298>)
 80075f0:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x40) | ((1 << 6) & 0x40); //Level meter reset - RESET
 80075f2:	4b55      	ldr	r3, [pc, #340]	; (8007748 <TDA7719_init+0x298>)
 80075f4:	78db      	ldrb	r3, [r3, #3]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	4b52      	ldr	r3, [pc, #328]	; (8007748 <TDA7719_init+0x298>)
 80075fe:	70da      	strb	r2, [r3, #3]
	TDA7719_registers[TDA7719_MIX_CONT] = (TDA7719_registers[TDA7719_MIX_CONT] & ~0x80) | ((1 << 7) & 0x80); //DC offset Detector - DC offset detector
 8007600:	4b51      	ldr	r3, [pc, #324]	; (8007748 <TDA7719_init+0x298>)
 8007602:	78db      	ldrb	r3, [r3, #3]
 8007604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007608:	b2da      	uxtb	r2, r3
 800760a:	4b4f      	ldr	r3, [pc, #316]	; (8007748 <TDA7719_init+0x298>)
 800760c:	70da      	strb	r2, [r3, #3]
	I2C_send(TDA7719_MIX_CONT, TDA7719_registers[TDA7719_MIX_CONT]);
 800760e:	4b4e      	ldr	r3, [pc, #312]	; (8007748 <TDA7719_init+0x298>)
 8007610:	78db      	ldrb	r3, [r3, #3]
 8007612:	4619      	mov	r1, r3
 8007614:	2003      	movs	r0, #3
 8007616:	f000 fff9 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x1) | ((1 << 0) & 0x1);		//Soft mute - OFF
 800761a:	4b4b      	ldr	r3, [pc, #300]	; (8007748 <TDA7719_init+0x298>)
 800761c:	791b      	ldrb	r3, [r3, #4]
 800761e:	f043 0301 	orr.w	r3, r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	4b48      	ldr	r3, [pc, #288]	; (8007748 <TDA7719_init+0x298>)
 8007626:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x2) | ((0 << 1) & 0x2);		//Pin influence for mute - IIC
 8007628:	4b47      	ldr	r3, [pc, #284]	; (8007748 <TDA7719_init+0x298>)
 800762a:	791b      	ldrb	r3, [r3, #4]
 800762c:	f023 0302 	bic.w	r3, r3, #2
 8007630:	b2da      	uxtb	r2, r3
 8007632:	4b45      	ldr	r3, [pc, #276]	; (8007748 <TDA7719_init+0x298>)
 8007634:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0xC) | ((0 << 2) & 0xC);		//Soft Mute Time - 0.48ms
 8007636:	4b44      	ldr	r3, [pc, #272]	; (8007748 <TDA7719_init+0x298>)
 8007638:	791b      	ldrb	r3, [r3, #4]
 800763a:	f023 030c 	bic.w	r3, r3, #12
 800763e:	b2da      	uxtb	r2, r3
 8007640:	4b41      	ldr	r3, [pc, #260]	; (8007748 <TDA7719_init+0x298>)
 8007642:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x10) | ((1 << 4) & 0x10);	//Subwoofer input config - Bass Output
 8007644:	4b40      	ldr	r3, [pc, #256]	; (8007748 <TDA7719_init+0x298>)
 8007646:	791b      	ldrb	r3, [r3, #4]
 8007648:	f043 0310 	orr.w	r3, r3, #16
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b3e      	ldr	r3, [pc, #248]	; (8007748 <TDA7719_init+0x298>)
 8007650:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x20) | ((1 << 5) & 0x20);	//Subwoofer enable (OUTL3 & OUTR3) - OFF
 8007652:	4b3d      	ldr	r3, [pc, #244]	; (8007748 <TDA7719_init+0x298>)
 8007654:	791b      	ldrb	r3, [r3, #4]
 8007656:	f043 0320 	orr.w	r3, r3, #32
 800765a:	b2da      	uxtb	r2, r3
 800765c:	4b3a      	ldr	r3, [pc, #232]	; (8007748 <TDA7719_init+0x298>)
 800765e:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x40) | ((1 << 6) & 0x40);	//Fast charge - OFF
 8007660:	4b39      	ldr	r3, [pc, #228]	; (8007748 <TDA7719_init+0x298>)
 8007662:	791b      	ldrb	r3, [r3, #4]
 8007664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007668:	b2da      	uxtb	r2, r3
 800766a:	4b37      	ldr	r3, [pc, #220]	; (8007748 <TDA7719_init+0x298>)
 800766c:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x80) | ((1 << 7) & 0x80);	//Anti-alias filter - OFF
 800766e:	4b36      	ldr	r3, [pc, #216]	; (8007748 <TDA7719_init+0x298>)
 8007670:	791b      	ldrb	r3, [r3, #4]
 8007672:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007676:	b2da      	uxtb	r2, r3
 8007678:	4b33      	ldr	r3, [pc, #204]	; (8007748 <TDA7719_init+0x298>)
 800767a:	711a      	strb	r2, [r3, #4]
	I2C_send(TDA7719_MUTE , TDA7719_registers[TDA7719_MUTE]);
 800767c:	4b32      	ldr	r3, [pc, #200]	; (8007748 <TDA7719_init+0x298>)
 800767e:	791b      	ldrb	r3, [r3, #4]
 8007680:	4619      	mov	r1, r3
 8007682:	2004      	movs	r0, #4
 8007684:	f000 ffc2 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x1) | ((1 << 0) & 0x1);	//Loudness soft step - OFF
 8007688:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <TDA7719_init+0x298>)
 800768a:	795b      	ldrb	r3, [r3, #5]
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	4b2d      	ldr	r3, [pc, #180]	; (8007748 <TDA7719_init+0x298>)
 8007694:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x2) | ((1 << 1) & 0x2);	//Volume soft step - OFF
 8007696:	4b2c      	ldr	r3, [pc, #176]	; (8007748 <TDA7719_init+0x298>)
 8007698:	795b      	ldrb	r3, [r3, #5]
 800769a:	f043 0302 	orr.w	r3, r3, #2
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	4b29      	ldr	r3, [pc, #164]	; (8007748 <TDA7719_init+0x298>)
 80076a2:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x4) | ((1 << 2) & 0x4);	//Treble soft step - OFF
 80076a4:	4b28      	ldr	r3, [pc, #160]	; (8007748 <TDA7719_init+0x298>)
 80076a6:	795b      	ldrb	r3, [r3, #5]
 80076a8:	f043 0304 	orr.w	r3, r3, #4
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	4b26      	ldr	r3, [pc, #152]	; (8007748 <TDA7719_init+0x298>)
 80076b0:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x8) | ((1 << 3) & 0x8);	//Middle soft step - OFF
 80076b2:	4b25      	ldr	r3, [pc, #148]	; (8007748 <TDA7719_init+0x298>)
 80076b4:	795b      	ldrb	r3, [r3, #5]
 80076b6:	f043 0308 	orr.w	r3, r3, #8
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	4b22      	ldr	r3, [pc, #136]	; (8007748 <TDA7719_init+0x298>)
 80076be:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x10) | ((1 << 4) & 0x10);	//Bass soft step - OFF
 80076c0:	4b21      	ldr	r3, [pc, #132]	; (8007748 <TDA7719_init+0x298>)
 80076c2:	795b      	ldrb	r3, [r3, #5]
 80076c4:	f043 0310 	orr.w	r3, r3, #16
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	4b1f      	ldr	r3, [pc, #124]	; (8007748 <TDA7719_init+0x298>)
 80076cc:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x20) | ((1 << 5) & 0x20);	//Speaker LF soft step - OFF
 80076ce:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <TDA7719_init+0x298>)
 80076d0:	795b      	ldrb	r3, [r3, #5]
 80076d2:	f043 0320 	orr.w	r3, r3, #32
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <TDA7719_init+0x298>)
 80076da:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x40) | ((1 << 6) & 0x40);	//Speaker RF soft step - OFF
 80076dc:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <TDA7719_init+0x298>)
 80076de:	795b      	ldrb	r3, [r3, #5]
 80076e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	4b18      	ldr	r3, [pc, #96]	; (8007748 <TDA7719_init+0x298>)
 80076e8:	715a      	strb	r2, [r3, #5]
	TDA7719_registers[TDA7719_SOFT_1] = (TDA7719_registers[TDA7719_SOFT_1] & ~0x80) | ((1 << 7) & 0x80);	//Speaker RF soft step - OFF
 80076ea:	4b17      	ldr	r3, [pc, #92]	; (8007748 <TDA7719_init+0x298>)
 80076ec:	795b      	ldrb	r3, [r3, #5]
 80076ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	4b14      	ldr	r3, [pc, #80]	; (8007748 <TDA7719_init+0x298>)
 80076f6:	715a      	strb	r2, [r3, #5]
	I2C_send(TDA7719_SOFT_1 , TDA7719_registers[TDA7719_SOFT_1]);
 80076f8:	4b13      	ldr	r3, [pc, #76]	; (8007748 <TDA7719_init+0x298>)
 80076fa:	795b      	ldrb	r3, [r3, #5]
 80076fc:	4619      	mov	r1, r3
 80076fe:	2005      	movs	r0, #5
 8007700:	f000 ff84 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x1) | ((1 << 0) & 0x1);	//Speaker RR soft step - OFF
 8007704:	4b10      	ldr	r3, [pc, #64]	; (8007748 <TDA7719_init+0x298>)
 8007706:	799b      	ldrb	r3, [r3, #6]
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <TDA7719_init+0x298>)
 8007710:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x2) | ((1 << 1) & 0x2);	//Subwoofer left soft step - OFF
 8007712:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <TDA7719_init+0x298>)
 8007714:	799b      	ldrb	r3, [r3, #6]
 8007716:	f043 0302 	orr.w	r3, r3, #2
 800771a:	b2da      	uxtb	r2, r3
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <TDA7719_init+0x298>)
 800771e:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x4) | ((1 << 2) & 0x4);	//Subwoofer right soft step - OFF
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <TDA7719_init+0x298>)
 8007722:	799b      	ldrb	r3, [r3, #6]
 8007724:	f043 0304 	orr.w	r3, r3, #4
 8007728:	b2da      	uxtb	r2, r3
 800772a:	4b07      	ldr	r3, [pc, #28]	; (8007748 <TDA7719_init+0x298>)
 800772c:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x8) | ((1 << 3) & 0x8);	//soft step time - 10ms
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <TDA7719_init+0x298>)
 8007730:	799b      	ldrb	r3, [r3, #6]
 8007732:	f043 0308 	orr.w	r3, r3, #8
 8007736:	b2da      	uxtb	r2, r3
 8007738:	4b03      	ldr	r3, [pc, #12]	; (8007748 <TDA7719_init+0x298>)
 800773a:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0x30) | ((0 << 4) & 0x30);	//Zero-comparator window size - +100mV
 800773c:	4b02      	ldr	r3, [pc, #8]	; (8007748 <TDA7719_init+0x298>)
 800773e:	799b      	ldrb	r3, [r3, #6]
 8007740:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007744:	e002      	b.n	800774c <TDA7719_init+0x29c>
 8007746:	bf00      	nop
 8007748:	20000374 	.word	0x20000374
 800774c:	b2da      	uxtb	r2, r3
 800774e:	4b8b      	ldr	r3, [pc, #556]	; (800797c <TDA7719_init+0x4cc>)
 8007750:	719a      	strb	r2, [r3, #6]
	TDA7719_registers[TDA7719_SOFT_2] = (TDA7719_registers[TDA7719_SOFT_2] & ~0xC0) | ((3 << 6) & 0xC0);	//Spike rejection time constant - 44us
 8007752:	4b8a      	ldr	r3, [pc, #552]	; (800797c <TDA7719_init+0x4cc>)
 8007754:	799b      	ldrb	r3, [r3, #6]
 8007756:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800775a:	b2da      	uxtb	r2, r3
 800775c:	4b87      	ldr	r3, [pc, #540]	; (800797c <TDA7719_init+0x4cc>)
 800775e:	719a      	strb	r2, [r3, #6]
	I2C_send(TDA7719_SOFT_2 , TDA7719_registers[TDA7719_SOFT_2]);
 8007760:	4b86      	ldr	r3, [pc, #536]	; (800797c <TDA7719_init+0x4cc>)
 8007762:	799b      	ldrb	r3, [r3, #6]
 8007764:	4619      	mov	r1, r3
 8007766:	2006      	movs	r0, #6
 8007768:	f000 ff50 	bl	800860c <I2C_send>


	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x30) | ((0b1111 << 4) & 0x30);	//Loudness attenuation - 0dB
 800776c:	4b83      	ldr	r3, [pc, #524]	; (800797c <TDA7719_init+0x4cc>)
 800776e:	79db      	ldrb	r3, [r3, #7]
 8007770:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007774:	b2da      	uxtb	r2, r3
 8007776:	4b81      	ldr	r3, [pc, #516]	; (800797c <TDA7719_init+0x4cc>)
 8007778:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x40) | ((0 << 6) & 0x40);	//Center frequency - Flat
 800777a:	4b80      	ldr	r3, [pc, #512]	; (800797c <TDA7719_init+0x4cc>)
 800777c:	79db      	ldrb	r3, [r3, #7]
 800777e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007782:	b2da      	uxtb	r2, r3
 8007784:	4b7d      	ldr	r3, [pc, #500]	; (800797c <TDA7719_init+0x4cc>)
 8007786:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x80) | ((0 << 7) & 0x80);	//High boost - OFF
 8007788:	4b7c      	ldr	r3, [pc, #496]	; (800797c <TDA7719_init+0x4cc>)
 800778a:	79db      	ldrb	r3, [r3, #7]
 800778c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007790:	b2da      	uxtb	r2, r3
 8007792:	4b7a      	ldr	r3, [pc, #488]	; (800797c <TDA7719_init+0x4cc>)
 8007794:	71da      	strb	r2, [r3, #7]
	I2C_send(TDA7719_LOUD , TDA7719_registers[TDA7719_LOUD]);
 8007796:	4b79      	ldr	r3, [pc, #484]	; (800797c <TDA7719_init+0x4cc>)
 8007798:	79db      	ldrb	r3, [r3, #7]
 800779a:	4619      	mov	r1, r3
 800779c:	2007      	movs	r0, #7
 800779e:	f000 ff35 	bl	800860c <I2C_send>


	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x1F) | ((0b11100 << 0) & 0x1F);	//Volume gain/attenuation - 0dB
 80077a2:	4b76      	ldr	r3, [pc, #472]	; (800797c <TDA7719_init+0x4cc>)
 80077a4:	7a1b      	ldrb	r3, [r3, #8]
 80077a6:	b25b      	sxtb	r3, r3
 80077a8:	f023 031f 	bic.w	r3, r3, #31
 80077ac:	b25b      	sxtb	r3, r3
 80077ae:	f043 031c 	orr.w	r3, r3, #28
 80077b2:	b25b      	sxtb	r3, r3
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	4b71      	ldr	r3, [pc, #452]	; (800797c <TDA7719_init+0x4cc>)
 80077b8:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x40) | ((0 << 6) & 0x40);		//Output gain - 0dB
 80077ba:	4b70      	ldr	r3, [pc, #448]	; (800797c <TDA7719_init+0x4cc>)
 80077bc:	7a1b      	ldrb	r3, [r3, #8]
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	4b6d      	ldr	r3, [pc, #436]	; (800797c <TDA7719_init+0x4cc>)
 80077c6:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x80) | ((1 << 7) & 0x80);		//soft step action - wait
 80077c8:	4b6c      	ldr	r3, [pc, #432]	; (800797c <TDA7719_init+0x4cc>)
 80077ca:	7a1b      	ldrb	r3, [r3, #8]
 80077cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	4b6a      	ldr	r3, [pc, #424]	; (800797c <TDA7719_init+0x4cc>)
 80077d4:	721a      	strb	r2, [r3, #8]
	I2C_send(TDA7719_VOL , TDA7719_registers[TDA7719_VOL]);
 80077d6:	4b69      	ldr	r3, [pc, #420]	; (800797c <TDA7719_init+0x4cc>)
 80077d8:	7a1b      	ldrb	r3, [r3, #8]
 80077da:	4619      	mov	r1, r3
 80077dc:	2008      	movs	r0, #8
 80077de:	f000 ff15 	bl	800860c <I2C_send>


	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x1F) | ((0b11111 << 0) & 0x1F);//Treble filter gain/attenuation - 0dB
 80077e2:	4b66      	ldr	r3, [pc, #408]	; (800797c <TDA7719_init+0x4cc>)
 80077e4:	7a5b      	ldrb	r3, [r3, #9]
 80077e6:	f043 031f 	orr.w	r3, r3, #31
 80077ea:	b2da      	uxtb	r2, r3
 80077ec:	4b63      	ldr	r3, [pc, #396]	; (800797c <TDA7719_init+0x4cc>)
 80077ee:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x60) | ((0b11 << 5) & 0x60);	//treble center freq - 12.5kHz
 80077f0:	4b62      	ldr	r3, [pc, #392]	; (800797c <TDA7719_init+0x4cc>)
 80077f2:	7a5b      	ldrb	r3, [r3, #9]
 80077f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	4b60      	ldr	r3, [pc, #384]	; (800797c <TDA7719_init+0x4cc>)
 80077fc:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x80) | ((1 << 7) & 0x80);	//Soft step action - wait
 80077fe:	4b5f      	ldr	r3, [pc, #380]	; (800797c <TDA7719_init+0x4cc>)
 8007800:	7a5b      	ldrb	r3, [r3, #9]
 8007802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007806:	b2da      	uxtb	r2, r3
 8007808:	4b5c      	ldr	r3, [pc, #368]	; (800797c <TDA7719_init+0x4cc>)
 800780a:	725a      	strb	r2, [r3, #9]
	I2C_send(TDA7719_TRBLE , TDA7719_registers[TDA7719_TRBLE]);
 800780c:	4b5b      	ldr	r3, [pc, #364]	; (800797c <TDA7719_init+0x4cc>)
 800780e:	7a5b      	ldrb	r3, [r3, #9]
 8007810:	4619      	mov	r1, r3
 8007812:	2009      	movs	r0, #9
 8007814:	f000 fefa 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x1F) | ((0b11111 << 0) & 0x1F);//Middle filter gain/attenuation - 0dB
 8007818:	4b58      	ldr	r3, [pc, #352]	; (800797c <TDA7719_init+0x4cc>)
 800781a:	7a9b      	ldrb	r3, [r3, #10]
 800781c:	f043 031f 	orr.w	r3, r3, #31
 8007820:	b2da      	uxtb	r2, r3
 8007822:	4b56      	ldr	r3, [pc, #344]	; (800797c <TDA7719_init+0x4cc>)
 8007824:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x60) | ((0b11 << 5) & 0x60);	//middle q factor - 0.75
 8007826:	4b55      	ldr	r3, [pc, #340]	; (800797c <TDA7719_init+0x4cc>)
 8007828:	7a9b      	ldrb	r3, [r3, #10]
 800782a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800782e:	b2da      	uxtb	r2, r3
 8007830:	4b52      	ldr	r3, [pc, #328]	; (800797c <TDA7719_init+0x4cc>)
 8007832:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 8007834:	4b51      	ldr	r3, [pc, #324]	; (800797c <TDA7719_init+0x4cc>)
 8007836:	7a9b      	ldrb	r3, [r3, #10]
 8007838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800783c:	b2da      	uxtb	r2, r3
 800783e:	4b4f      	ldr	r3, [pc, #316]	; (800797c <TDA7719_init+0x4cc>)
 8007840:	729a      	strb	r2, [r3, #10]
	I2C_send(TDA7719_MIDDLE , TDA7719_registers[TDA7719_MIDDLE]);
 8007842:	4b4e      	ldr	r3, [pc, #312]	; (800797c <TDA7719_init+0x4cc>)
 8007844:	7a9b      	ldrb	r3, [r3, #10]
 8007846:	4619      	mov	r1, r3
 8007848:	200a      	movs	r0, #10
 800784a:	f000 fedf 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x1F) | ((0b11111 << 0) & 0x1F);	//Bass filter gain/attenuation - 0dB
 800784e:	4b4b      	ldr	r3, [pc, #300]	; (800797c <TDA7719_init+0x4cc>)
 8007850:	7adb      	ldrb	r3, [r3, #11]
 8007852:	f043 031f 	orr.w	r3, r3, #31
 8007856:	b2da      	uxtb	r2, r3
 8007858:	4b48      	ldr	r3, [pc, #288]	; (800797c <TDA7719_init+0x4cc>)
 800785a:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x60) | ((0b11 << 5) & 0x60);	//Bass Q factor - 1.25
 800785c:	4b47      	ldr	r3, [pc, #284]	; (800797c <TDA7719_init+0x4cc>)
 800785e:	7adb      	ldrb	r3, [r3, #11]
 8007860:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007864:	b2da      	uxtb	r2, r3
 8007866:	4b45      	ldr	r3, [pc, #276]	; (800797c <TDA7719_init+0x4cc>)
 8007868:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x80) | ((1 << 7) & 0x80);	//Soft step action - wait
 800786a:	4b44      	ldr	r3, [pc, #272]	; (800797c <TDA7719_init+0x4cc>)
 800786c:	7adb      	ldrb	r3, [r3, #11]
 800786e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007872:	b2da      	uxtb	r2, r3
 8007874:	4b41      	ldr	r3, [pc, #260]	; (800797c <TDA7719_init+0x4cc>)
 8007876:	72da      	strb	r2, [r3, #11]
	I2C_send(TDA7719_BASS , TDA7719_registers[TDA7719_BASS]);
 8007878:	4b40      	ldr	r3, [pc, #256]	; (800797c <TDA7719_init+0x4cc>)
 800787a:	7adb      	ldrb	r3, [r3, #11]
 800787c:	4619      	mov	r1, r3
 800787e:	200b      	movs	r0, #11
 8007880:	f000 fec4 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x3) | ((0 << 0) & 0x3);	//Subwoofer Cut-off frequency - Flat
 8007884:	4b3d      	ldr	r3, [pc, #244]	; (800797c <TDA7719_init+0x4cc>)
 8007886:	7b1b      	ldrb	r3, [r3, #12]
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	b2da      	uxtb	r2, r3
 800788e:	4b3b      	ldr	r3, [pc, #236]	; (800797c <TDA7719_init+0x4cc>)
 8007890:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x4) | ((0 << 2) & 0x4);	//Subwoofer output phase - 0deg
 8007892:	4b3a      	ldr	r3, [pc, #232]	; (800797c <TDA7719_init+0x4cc>)
 8007894:	7b1b      	ldrb	r3, [r3, #12]
 8007896:	f023 0304 	bic.w	r3, r3, #4
 800789a:	b2da      	uxtb	r2, r3
 800789c:	4b37      	ldr	r3, [pc, #220]	; (800797c <TDA7719_init+0x4cc>)
 800789e:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x18) | ((0 << 3) & 0x18);	//Middle Center Frequency - 500Hz
 80078a0:	4b36      	ldr	r3, [pc, #216]	; (800797c <TDA7719_init+0x4cc>)
 80078a2:	7b1b      	ldrb	r3, [r3, #12]
 80078a4:	f023 0318 	bic.w	r3, r3, #24
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	4b34      	ldr	r3, [pc, #208]	; (800797c <TDA7719_init+0x4cc>)
 80078ac:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x60) | ((0 << 5) & 0x60);	//Bass center Frequency - 60 Hz
 80078ae:	4b33      	ldr	r3, [pc, #204]	; (800797c <TDA7719_init+0x4cc>)
 80078b0:	7b1b      	ldrb	r3, [r3, #12]
 80078b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	4b30      	ldr	r3, [pc, #192]	; (800797c <TDA7719_init+0x4cc>)
 80078ba:	731a      	strb	r2, [r3, #12]
	TDA7719_registers[TDA7719_SUB_M_B] = (TDA7719_registers[TDA7719_SUB_M_B] & ~0x80) | ((0 << 7) & 0x80);	//Bass DC mode - OFF
 80078bc:	4b2f      	ldr	r3, [pc, #188]	; (800797c <TDA7719_init+0x4cc>)
 80078be:	7b1b      	ldrb	r3, [r3, #12]
 80078c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	4b2d      	ldr	r3, [pc, #180]	; (800797c <TDA7719_init+0x4cc>)
 80078c8:	731a      	strb	r2, [r3, #12]
	I2C_send(TDA7719_SUB_M_B , TDA7719_registers[TDA7719_SUB_M_B]);
 80078ca:	4b2c      	ldr	r3, [pc, #176]	; (800797c <TDA7719_init+0x4cc>)
 80078cc:	7b1b      	ldrb	r3, [r3, #12]
 80078ce:	4619      	mov	r1, r3
 80078d0:	200c      	movs	r0, #12
 80078d2:	f000 fe9b 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation left front - 0dB
 80078d6:	4b29      	ldr	r3, [pc, #164]	; (800797c <TDA7719_init+0x4cc>)
 80078d8:	7b5b      	ldrb	r3, [r3, #13]
 80078da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	4b26      	ldr	r3, [pc, #152]	; (800797c <TDA7719_init+0x4cc>)
 80078e2:	735a      	strb	r2, [r3, #13]
	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x80) | ((1 << 7) & 0x80);	//Soft step action - wait
 80078e4:	4b25      	ldr	r3, [pc, #148]	; (800797c <TDA7719_init+0x4cc>)
 80078e6:	7b5b      	ldrb	r3, [r3, #13]
 80078e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	4b23      	ldr	r3, [pc, #140]	; (800797c <TDA7719_init+0x4cc>)
 80078f0:	735a      	strb	r2, [r3, #13]
	I2C_send(TDA7719_ATT_LF , TDA7719_registers[TDA7719_ATT_LF]);
 80078f2:	4b22      	ldr	r3, [pc, #136]	; (800797c <TDA7719_init+0x4cc>)
 80078f4:	7b5b      	ldrb	r3, [r3, #13]
 80078f6:	4619      	mov	r1, r3
 80078f8:	200d      	movs	r0, #13
 80078fa:	f000 fe87 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation right front - 0dB
 80078fe:	4b1f      	ldr	r3, [pc, #124]	; (800797c <TDA7719_init+0x4cc>)
 8007900:	7b9b      	ldrb	r3, [r3, #14]
 8007902:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007906:	b2da      	uxtb	r2, r3
 8007908:	4b1c      	ldr	r3, [pc, #112]	; (800797c <TDA7719_init+0x4cc>)
 800790a:	739a      	strb	r2, [r3, #14]
	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 800790c:	4b1b      	ldr	r3, [pc, #108]	; (800797c <TDA7719_init+0x4cc>)
 800790e:	7b9b      	ldrb	r3, [r3, #14]
 8007910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007914:	b2da      	uxtb	r2, r3
 8007916:	4b19      	ldr	r3, [pc, #100]	; (800797c <TDA7719_init+0x4cc>)
 8007918:	739a      	strb	r2, [r3, #14]
	I2C_send(TDA7719_ATT_RF , TDA7719_registers[TDA7719_ATT_RF]);
 800791a:	4b18      	ldr	r3, [pc, #96]	; (800797c <TDA7719_init+0x4cc>)
 800791c:	7b9b      	ldrb	r3, [r3, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	200e      	movs	r0, #14
 8007922:	f000 fe73 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation left rear - 0dB
 8007926:	4b15      	ldr	r3, [pc, #84]	; (800797c <TDA7719_init+0x4cc>)
 8007928:	7bdb      	ldrb	r3, [r3, #15]
 800792a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800792e:	b2da      	uxtb	r2, r3
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <TDA7719_init+0x4cc>)
 8007932:	73da      	strb	r2, [r3, #15]
	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 8007934:	4b11      	ldr	r3, [pc, #68]	; (800797c <TDA7719_init+0x4cc>)
 8007936:	7bdb      	ldrb	r3, [r3, #15]
 8007938:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <TDA7719_init+0x4cc>)
 8007940:	73da      	strb	r2, [r3, #15]
	I2C_send(TDA7719_ATT_LR , TDA7719_registers[TDA7719_ATT_LR]);
 8007942:	4b0e      	ldr	r3, [pc, #56]	; (800797c <TDA7719_init+0x4cc>)
 8007944:	7bdb      	ldrb	r3, [r3, #15]
 8007946:	4619      	mov	r1, r3
 8007948:	200f      	movs	r0, #15
 800794a:	f000 fe5f 	bl	800860c <I2C_send>

	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x7F) | ((0 << 0) & 0x7F);	//speaker attenuation right rear - 0dB
 800794e:	4b0b      	ldr	r3, [pc, #44]	; (800797c <TDA7719_init+0x4cc>)
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007956:	b2da      	uxtb	r2, r3
 8007958:	4b08      	ldr	r3, [pc, #32]	; (800797c <TDA7719_init+0x4cc>)
 800795a:	741a      	strb	r2, [r3, #16]
	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x80) | ((1 << 7) & 0x80);	//soft step action - wait
 800795c:	4b07      	ldr	r3, [pc, #28]	; (800797c <TDA7719_init+0x4cc>)
 800795e:	7c1b      	ldrb	r3, [r3, #16]
 8007960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007964:	b2da      	uxtb	r2, r3
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <TDA7719_init+0x4cc>)
 8007968:	741a      	strb	r2, [r3, #16]
	I2C_send(TDA7719_ATT_RR , TDA7719_registers[TDA7719_ATT_RR]);
 800796a:	4b04      	ldr	r3, [pc, #16]	; (800797c <TDA7719_init+0x4cc>)
 800796c:	7c1b      	ldrb	r3, [r3, #16]
 800796e:	4619      	mov	r1, r3
 8007970:	2010      	movs	r0, #16
 8007972:	f000 fe4b 	bl	800860c <I2C_send>

	//subwoofer gain/attenuation - left
	//subwoofer gain/attenuation - right
    }
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000374 	.word	0x20000374

08007980 <TDA7719_SetMainInput>:
 *  tutaj opis konkretnych ustawień i które wybrano i przypisane
 *
 *  @param[in] input value beetween 0-7
 */
void TDA7719_SetMainInput(int8_t const input)
    {
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	71fb      	strb	r3, [r7, #7]
	if(input < 0 || input > 7)return;
 800798a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798e:	2b00      	cmp	r3, #0
 8007990:	db19      	blt.n	80079c6 <TDA7719_SetMainInput+0x46>
 8007992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007996:	2b07      	cmp	r3, #7
 8007998:	dc15      	bgt.n	80079c6 <TDA7719_SetMainInput+0x46>

	TDA7719_registers[TDA7719_INPUT] = (TDA7719_registers[TDA7719_INPUT] & ~0x7) | (input & 0x7);
 800799a:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <TDA7719_SetMainInput+0x50>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	b25a      	sxtb	r2, r3
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	b25b      	sxtb	r3, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	b25b      	sxtb	r3, r3
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <TDA7719_SetMainInput+0x50>)
 80079b6:	701a      	strb	r2, [r3, #0]
	I2C_send(TDA7719_INPUT , TDA7719_registers[TDA7719_INPUT]);
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <TDA7719_SetMainInput+0x50>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4619      	mov	r1, r3
 80079be:	2000      	movs	r0, #0
 80079c0:	f000 fe24 	bl	800860c <I2C_send>
 80079c4:	e000      	b.n	80079c8 <TDA7719_SetMainInput+0x48>
	if(input < 0 || input > 7)return;
 80079c6:	bf00      	nop
    }
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000374 	.word	0x20000374

080079d4 <TDA7719_SetSecondInput>:
 *  tutaj spis konfiguracji
 *
 *  @param[in] input, uint8_t 0...7
 */
void TDA7719_SetSecondInput(int8_t const input)
    {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	71fb      	strb	r3, [r7, #7]
	if(input < 0 || input > 7)return;
 80079de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	db19      	blt.n	8007a1a <TDA7719_SetSecondInput+0x46>
 80079e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ea:	2b07      	cmp	r3, #7
 80079ec:	dc15      	bgt.n	8007a1a <TDA7719_SetSecondInput+0x46>

	TDA7719_registers[TDA7719_INPUT_2] = (TDA7719_registers[TDA7719_INPUT_2] & ~0x7) | (input & 0x7);
 80079ee:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <TDA7719_SetSecondInput+0x50>)
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	b25b      	sxtb	r3, r3
 80079f4:	f023 0307 	bic.w	r3, r3, #7
 80079f8:	b25a      	sxtb	r2, r3
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	b25b      	sxtb	r3, r3
 8007a02:	4313      	orrs	r3, r2
 8007a04:	b25b      	sxtb	r3, r3
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <TDA7719_SetSecondInput+0x50>)
 8007a0a:	705a      	strb	r2, [r3, #1]
	I2C_send(TDA7719_INPUT_2 , TDA7719_registers[TDA7719_INPUT_2]);
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <TDA7719_SetSecondInput+0x50>)
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	4619      	mov	r1, r3
 8007a12:	2001      	movs	r0, #1
 8007a14:	f000 fdfa 	bl	800860c <I2C_send>
 8007a18:	e000      	b.n	8007a1c <TDA7719_SetSecondInput+0x48>
	if(input < 0 || input > 7)return;
 8007a1a:	bf00      	nop
    }
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000374 	.word	0x20000374

08007a28 <TDA7719_SetSoftMute>:
 *  @param[in] Soft Mute - 1 OFF, 0 - ON
 *
 *  @param[in]
 */
void TDA7719_SetSoftMute(_Bool const Mute_ON_OFF, uint8_t const SoftMuteTime)
    {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	460a      	mov	r2, r1
 8007a32:	71fb      	strb	r3, [r7, #7]
 8007a34:	4613      	mov	r3, r2
 8007a36:	71bb      	strb	r3, [r7, #6]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0x1) | ((Mute_ON_OFF << 0) & 0x1);
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <TDA7719_SetSoftMute+0x68>)
 8007a3a:	791b      	ldrb	r3, [r3, #4]
 8007a3c:	b25b      	sxtb	r3, r3
 8007a3e:	f023 0301 	bic.w	r3, r3, #1
 8007a42:	b25a      	sxtb	r2, r3
 8007a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	b25b      	sxtb	r3, r3
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	4b0e      	ldr	r3, [pc, #56]	; (8007a90 <TDA7719_SetSoftMute+0x68>)
 8007a56:	711a      	strb	r2, [r3, #4]
	TDA7719_registers[TDA7719_MUTE] = (TDA7719_registers[TDA7719_MUTE] & ~0xC) | ((SoftMuteTime << 2) & 0xC);
 8007a58:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <TDA7719_SetSoftMute+0x68>)
 8007a5a:	791b      	ldrb	r3, [r3, #4]
 8007a5c:	b25b      	sxtb	r3, r3
 8007a5e:	f023 030c 	bic.w	r3, r3, #12
 8007a62:	b25a      	sxtb	r2, r3
 8007a64:	79bb      	ldrb	r3, [r7, #6]
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	b25b      	sxtb	r3, r3
 8007a6a:	f003 030c 	and.w	r3, r3, #12
 8007a6e:	b25b      	sxtb	r3, r3
 8007a70:	4313      	orrs	r3, r2
 8007a72:	b25b      	sxtb	r3, r3
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	4b06      	ldr	r3, [pc, #24]	; (8007a90 <TDA7719_SetSoftMute+0x68>)
 8007a78:	711a      	strb	r2, [r3, #4]
	I2C_send(TDA7719_MUTE , TDA7719_registers[TDA7719_MUTE]);
 8007a7a:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <TDA7719_SetSoftMute+0x68>)
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	2004      	movs	r0, #4
 8007a82:	f000 fdc3 	bl	800860c <I2C_send>
    }
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20000374 	.word	0x20000374

08007a94 <TDA7719_SetLoudness>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetLoudness(int8_t loud_att, uint8_t const loud_f, uint8_t const loud_b, const uint8_t loud_s)
    {
 8007a94:	b590      	push	{r4, r7, lr}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	71fb      	strb	r3, [r7, #7]
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	71bb      	strb	r3, [r7, #6]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	717b      	strb	r3, [r7, #5]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	713b      	strb	r3, [r7, #4]
	loud_att = abs(loud_att);
 8007ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfb8      	it	lt
 8007aba:	425b      	neglt	r3, r3
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0xF) | ((loud_att << 0) & 0xF);
 8007ac0:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007ac2:	79db      	ldrb	r3, [r3, #7]
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	f023 030f 	bic.w	r3, r3, #15
 8007aca:	b25a      	sxtb	r2, r3
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	b25b      	sxtb	r3, r3
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	4b1e      	ldr	r3, [pc, #120]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007adc:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x30) | ((loud_f   << 4) & 0x30);
 8007ade:	4b1d      	ldr	r3, [pc, #116]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007ae0:	79db      	ldrb	r3, [r3, #7]
 8007ae2:	b25b      	sxtb	r3, r3
 8007ae4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007ae8:	b25a      	sxtb	r2, r3
 8007aea:	79bb      	ldrb	r3, [r7, #6]
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007af4:	b25b      	sxtb	r3, r3
 8007af6:	4313      	orrs	r3, r2
 8007af8:	b25b      	sxtb	r3, r3
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007afe:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x40) | ((loud_b   << 6) & 0x40);
 8007b00:	4b14      	ldr	r3, [pc, #80]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007b02:	79db      	ldrb	r3, [r3, #7]
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0a:	b25a      	sxtb	r2, r3
 8007b0c:	797b      	ldrb	r3, [r7, #5]
 8007b0e:	019b      	lsls	r3, r3, #6
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	b25b      	sxtb	r3, r3
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	b25b      	sxtb	r3, r3
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007b20:	71da      	strb	r2, [r3, #7]
	TDA7719_registers[TDA7719_LOUD] = (TDA7719_registers[TDA7719_LOUD] & ~0x80) | ((loud_s   << 7) & 0x80);
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007b24:	79db      	ldrb	r3, [r3, #7]
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b2c:	b25a      	sxtb	r2, r3
 8007b2e:	793b      	ldrb	r3, [r7, #4]
 8007b30:	01db      	lsls	r3, r3, #7
 8007b32:	b25b      	sxtb	r3, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b25b      	sxtb	r3, r3
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007b3c:	71da      	strb	r2, [r3, #7]

	I2C_send(TDA7719_LOUD , TDA7719_registers[TDA7719_LOUD]);
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <TDA7719_SetLoudness+0xc0>)
 8007b40:	79db      	ldrb	r3, [r3, #7]
 8007b42:	4619      	mov	r1, r3
 8007b44:	2007      	movs	r0, #7
 8007b46:	f000 fd61 	bl	800860c <I2C_send>
    }
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd90      	pop	{r4, r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000374 	.word	0x20000374

08007b58 <TDA7719_SetVolume>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume(int8_t gain, uint8_t const out_gain, uint8_t const soft_step)
    {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	71fb      	strb	r3, [r7, #7]
 8007b62:	460b      	mov	r3, r1
 8007b64:	71bb      	strb	r3, [r7, #6]
 8007b66:	4613      	mov	r3, r2
 8007b68:	717b      	strb	r3, [r7, #5]
	switch(gain)
 8007b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b6e:	330f      	adds	r3, #15
 8007b70:	2b1e      	cmp	r3, #30
 8007b72:	f200 809b 	bhi.w	8007cac <TDA7719_SetVolume+0x154>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <TDA7719_SetVolume+0x24>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007bf9 	.word	0x08007bf9
 8007b80:	08007bff 	.word	0x08007bff
 8007b84:	08007c05 	.word	0x08007c05
 8007b88:	08007c0b 	.word	0x08007c0b
 8007b8c:	08007c11 	.word	0x08007c11
 8007b90:	08007c17 	.word	0x08007c17
 8007b94:	08007c1d 	.word	0x08007c1d
 8007b98:	08007c23 	.word	0x08007c23
 8007b9c:	08007c29 	.word	0x08007c29
 8007ba0:	08007c2f 	.word	0x08007c2f
 8007ba4:	08007c35 	.word	0x08007c35
 8007ba8:	08007c3b 	.word	0x08007c3b
 8007bac:	08007c41 	.word	0x08007c41
 8007bb0:	08007cad 	.word	0x08007cad
 8007bb4:	08007c47 	.word	0x08007c47
 8007bb8:	08007c4d 	.word	0x08007c4d
 8007bbc:	08007c53 	.word	0x08007c53
 8007bc0:	08007c59 	.word	0x08007c59
 8007bc4:	08007c5f 	.word	0x08007c5f
 8007bc8:	08007c65 	.word	0x08007c65
 8007bcc:	08007c6b 	.word	0x08007c6b
 8007bd0:	08007c71 	.word	0x08007c71
 8007bd4:	08007c77 	.word	0x08007c77
 8007bd8:	08007c7d 	.word	0x08007c7d
 8007bdc:	08007c83 	.word	0x08007c83
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007c8f 	.word	0x08007c8f
 8007be8:	08007c95 	.word	0x08007c95
 8007bec:	08007c9b 	.word	0x08007c9b
 8007bf0:	08007ca1 	.word	0x08007ca1
 8007bf4:	08007ca7 	.word	0x08007ca7
	{
	    case -15:gain = 0b00000000;break;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	71fb      	strb	r3, [r7, #7]
 8007bfc:	e056      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -14:gain = 0b00000001;break;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	71fb      	strb	r3, [r7, #7]
 8007c02:	e053      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -13:gain = 0b00000010;break;
 8007c04:	2302      	movs	r3, #2
 8007c06:	71fb      	strb	r3, [r7, #7]
 8007c08:	e050      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -12:gain = 0b00000011;break;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	71fb      	strb	r3, [r7, #7]
 8007c0e:	e04d      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -11:gain = 0b00000100;break;
 8007c10:	2304      	movs	r3, #4
 8007c12:	71fb      	strb	r3, [r7, #7]
 8007c14:	e04a      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -10:gain = 0b00000101;break;
 8007c16:	2305      	movs	r3, #5
 8007c18:	71fb      	strb	r3, [r7, #7]
 8007c1a:	e047      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -9:gain = 0b00000110;break;
 8007c1c:	2306      	movs	r3, #6
 8007c1e:	71fb      	strb	r3, [r7, #7]
 8007c20:	e044      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -8:gain = 0b00000111;break;
 8007c22:	2307      	movs	r3, #7
 8007c24:	71fb      	strb	r3, [r7, #7]
 8007c26:	e041      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -7:gain = 0b00001000;break;
 8007c28:	2308      	movs	r3, #8
 8007c2a:	71fb      	strb	r3, [r7, #7]
 8007c2c:	e03e      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -6:gain = 0b00001001;break;
 8007c2e:	2309      	movs	r3, #9
 8007c30:	71fb      	strb	r3, [r7, #7]
 8007c32:	e03b      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -5:gain = 0b00001010;break;
 8007c34:	230a      	movs	r3, #10
 8007c36:	71fb      	strb	r3, [r7, #7]
 8007c38:	e038      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -4:gain = 0b00001011;break;
 8007c3a:	230b      	movs	r3, #11
 8007c3c:	71fb      	strb	r3, [r7, #7]
 8007c3e:	e035      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -3:gain = 0b00001100;break;
 8007c40:	230c      	movs	r3, #12
 8007c42:	71fb      	strb	r3, [r7, #7]
 8007c44:	e032      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case -1:gain = 0b00001110;break;
 8007c46:	230e      	movs	r3, #14
 8007c48:	71fb      	strb	r3, [r7, #7]
 8007c4a:	e02f      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 0:gain = 0b00001111;break;
 8007c4c:	230f      	movs	r3, #15
 8007c4e:	71fb      	strb	r3, [r7, #7]
 8007c50:	e02c      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 1:gain = 0b00011110;break;
 8007c52:	231e      	movs	r3, #30
 8007c54:	71fb      	strb	r3, [r7, #7]
 8007c56:	e029      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 2:gain = 0b00011101;break;
 8007c58:	231d      	movs	r3, #29
 8007c5a:	71fb      	strb	r3, [r7, #7]
 8007c5c:	e026      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 3:gain = 0b00011100;break;
 8007c5e:	231c      	movs	r3, #28
 8007c60:	71fb      	strb	r3, [r7, #7]
 8007c62:	e023      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 4:gain = 0b00011011;break;
 8007c64:	231b      	movs	r3, #27
 8007c66:	71fb      	strb	r3, [r7, #7]
 8007c68:	e020      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 5:gain = 0b00011010;break;
 8007c6a:	231a      	movs	r3, #26
 8007c6c:	71fb      	strb	r3, [r7, #7]
 8007c6e:	e01d      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 6:gain = 0b00011001;break;
 8007c70:	2319      	movs	r3, #25
 8007c72:	71fb      	strb	r3, [r7, #7]
 8007c74:	e01a      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 7:gain = 0b00011000;break;
 8007c76:	2318      	movs	r3, #24
 8007c78:	71fb      	strb	r3, [r7, #7]
 8007c7a:	e017      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 8:gain = 0b00010111;break;
 8007c7c:	2317      	movs	r3, #23
 8007c7e:	71fb      	strb	r3, [r7, #7]
 8007c80:	e014      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 9:gain = 0b00010110;break;
 8007c82:	2316      	movs	r3, #22
 8007c84:	71fb      	strb	r3, [r7, #7]
 8007c86:	e011      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 10:gain = 0b00010101;break;
 8007c88:	2315      	movs	r3, #21
 8007c8a:	71fb      	strb	r3, [r7, #7]
 8007c8c:	e00e      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 11:gain = 0b00010100;break;
 8007c8e:	2314      	movs	r3, #20
 8007c90:	71fb      	strb	r3, [r7, #7]
 8007c92:	e00b      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 12:gain = 0b00010011;break;
 8007c94:	2313      	movs	r3, #19
 8007c96:	71fb      	strb	r3, [r7, #7]
 8007c98:	e008      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 13:gain = 0b00010010;break;
 8007c9a:	2312      	movs	r3, #18
 8007c9c:	71fb      	strb	r3, [r7, #7]
 8007c9e:	e005      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 14:gain = 0b00010001;break;
 8007ca0:	2311      	movs	r3, #17
 8007ca2:	71fb      	strb	r3, [r7, #7]
 8007ca4:	e002      	b.n	8007cac <TDA7719_SetVolume+0x154>
	    case 15:gain = 0b00010000;break;
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	71fb      	strb	r3, [r7, #7]
 8007caa:	bf00      	nop
	}
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x1F) | ((gain << 0) & 0x1F);
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <TDA7719_SetVolume+0x1c4>)
 8007cae:	7a1b      	ldrb	r3, [r3, #8]
 8007cb0:	b25b      	sxtb	r3, r3
 8007cb2:	f023 031f 	bic.w	r3, r3, #31
 8007cb6:	b25a      	sxtb	r2, r3
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	f003 031f 	and.w	r3, r3, #31
 8007cbe:	b25b      	sxtb	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b25b      	sxtb	r3, r3
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <TDA7719_SetVolume+0x1c4>)
 8007cc8:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x40) | ((out_gain << 6) & 0x40);
 8007cca:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <TDA7719_SetVolume+0x1c4>)
 8007ccc:	7a1b      	ldrb	r3, [r3, #8]
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd4:	b25a      	sxtb	r2, r3
 8007cd6:	79bb      	ldrb	r3, [r7, #6]
 8007cd8:	019b      	lsls	r3, r3, #6
 8007cda:	b25b      	sxtb	r3, r3
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	b25b      	sxtb	r3, r3
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	b25b      	sxtb	r3, r3
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <TDA7719_SetVolume+0x1c4>)
 8007cea:	721a      	strb	r2, [r3, #8]
	TDA7719_registers[TDA7719_VOL] = (TDA7719_registers[TDA7719_VOL] & ~0x80) | ((soft_step << 7) & 0x80);
 8007cec:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <TDA7719_SetVolume+0x1c4>)
 8007cee:	7a1b      	ldrb	r3, [r3, #8]
 8007cf0:	b25b      	sxtb	r3, r3
 8007cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf6:	b25a      	sxtb	r2, r3
 8007cf8:	797b      	ldrb	r3, [r7, #5]
 8007cfa:	01db      	lsls	r3, r3, #7
 8007cfc:	b25b      	sxtb	r3, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	b25b      	sxtb	r3, r3
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <TDA7719_SetVolume+0x1c4>)
 8007d06:	721a      	strb	r2, [r3, #8]

	I2C_send(TDA7719_VOL , TDA7719_registers[TDA7719_VOL]);
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <TDA7719_SetVolume+0x1c4>)
 8007d0a:	7a1b      	ldrb	r3, [r3, #8]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	2008      	movs	r0, #8
 8007d10:	f000 fc7c 	bl	800860c <I2C_send>
    }
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000374 	.word	0x20000374

08007d20 <TDA7719_SetTreble>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetTreble(int8_t gain_treb, uint8_t const treb_f, uint8_t const soft_treb)
    {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	71bb      	strb	r3, [r7, #6]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	717b      	strb	r3, [r7, #5]
	switch(gain_treb)
 8007d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d36:	330f      	adds	r3, #15
 8007d38:	2b1e      	cmp	r3, #30
 8007d3a:	f200 809e 	bhi.w	8007e7a <TDA7719_SetTreble+0x15a>
 8007d3e:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <TDA7719_SetTreble+0x24>)
 8007d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d44:	08007dc1 	.word	0x08007dc1
 8007d48:	08007dc7 	.word	0x08007dc7
 8007d4c:	08007dcd 	.word	0x08007dcd
 8007d50:	08007dd3 	.word	0x08007dd3
 8007d54:	08007dd9 	.word	0x08007dd9
 8007d58:	08007ddf 	.word	0x08007ddf
 8007d5c:	08007de5 	.word	0x08007de5
 8007d60:	08007deb 	.word	0x08007deb
 8007d64:	08007df1 	.word	0x08007df1
 8007d68:	08007df7 	.word	0x08007df7
 8007d6c:	08007dfd 	.word	0x08007dfd
 8007d70:	08007e03 	.word	0x08007e03
 8007d74:	08007e09 	.word	0x08007e09
 8007d78:	08007e0f 	.word	0x08007e0f
 8007d7c:	08007e15 	.word	0x08007e15
 8007d80:	08007e1b 	.word	0x08007e1b
 8007d84:	08007e21 	.word	0x08007e21
 8007d88:	08007e27 	.word	0x08007e27
 8007d8c:	08007e2d 	.word	0x08007e2d
 8007d90:	08007e33 	.word	0x08007e33
 8007d94:	08007e39 	.word	0x08007e39
 8007d98:	08007e3f 	.word	0x08007e3f
 8007d9c:	08007e45 	.word	0x08007e45
 8007da0:	08007e4b 	.word	0x08007e4b
 8007da4:	08007e51 	.word	0x08007e51
 8007da8:	08007e57 	.word	0x08007e57
 8007dac:	08007e5d 	.word	0x08007e5d
 8007db0:	08007e63 	.word	0x08007e63
 8007db4:	08007e69 	.word	0x08007e69
 8007db8:	08007e6f 	.word	0x08007e6f
 8007dbc:	08007e75 	.word	0x08007e75
	{
	    case -15:gain_treb = 0b00000000;break;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	71fb      	strb	r3, [r7, #7]
 8007dc4:	e059      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -14:gain_treb = 0b00000001;break;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	71fb      	strb	r3, [r7, #7]
 8007dca:	e056      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -13:gain_treb = 0b00000010;break;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	71fb      	strb	r3, [r7, #7]
 8007dd0:	e053      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -12:gain_treb = 0b00000011;break;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	71fb      	strb	r3, [r7, #7]
 8007dd6:	e050      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -11:gain_treb = 0b00000100;break;
 8007dd8:	2304      	movs	r3, #4
 8007dda:	71fb      	strb	r3, [r7, #7]
 8007ddc:	e04d      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -10:gain_treb = 0b00000101;break;
 8007dde:	2305      	movs	r3, #5
 8007de0:	71fb      	strb	r3, [r7, #7]
 8007de2:	e04a      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -9:gain_treb = 0b00000110;break;
 8007de4:	2306      	movs	r3, #6
 8007de6:	71fb      	strb	r3, [r7, #7]
 8007de8:	e047      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -8:gain_treb = 0b00000111;break;
 8007dea:	2307      	movs	r3, #7
 8007dec:	71fb      	strb	r3, [r7, #7]
 8007dee:	e044      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -7:gain_treb = 0b00001000;break;
 8007df0:	2308      	movs	r3, #8
 8007df2:	71fb      	strb	r3, [r7, #7]
 8007df4:	e041      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -6:gain_treb = 0b00001001;break;
 8007df6:	2309      	movs	r3, #9
 8007df8:	71fb      	strb	r3, [r7, #7]
 8007dfa:	e03e      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -5:gain_treb = 0b00001010;break;
 8007dfc:	230a      	movs	r3, #10
 8007dfe:	71fb      	strb	r3, [r7, #7]
 8007e00:	e03b      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -4:gain_treb = 0b00001011;break;
 8007e02:	230b      	movs	r3, #11
 8007e04:	71fb      	strb	r3, [r7, #7]
 8007e06:	e038      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -3:gain_treb = 0b00001100;break;
 8007e08:	230c      	movs	r3, #12
 8007e0a:	71fb      	strb	r3, [r7, #7]
 8007e0c:	e035      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -2:gain_treb = 0b00001101;break;
 8007e0e:	230d      	movs	r3, #13
 8007e10:	71fb      	strb	r3, [r7, #7]
 8007e12:	e032      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case -1:gain_treb = 0b00001110;break;
 8007e14:	230e      	movs	r3, #14
 8007e16:	71fb      	strb	r3, [r7, #7]
 8007e18:	e02f      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 0:gain_treb = 0b00001111;break;
 8007e1a:	230f      	movs	r3, #15
 8007e1c:	71fb      	strb	r3, [r7, #7]
 8007e1e:	e02c      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 1:gain_treb = 0b00011110;break;
 8007e20:	231e      	movs	r3, #30
 8007e22:	71fb      	strb	r3, [r7, #7]
 8007e24:	e029      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 2:gain_treb = 0b00011101;break;
 8007e26:	231d      	movs	r3, #29
 8007e28:	71fb      	strb	r3, [r7, #7]
 8007e2a:	e026      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 3:gain_treb = 0b00011100;break;
 8007e2c:	231c      	movs	r3, #28
 8007e2e:	71fb      	strb	r3, [r7, #7]
 8007e30:	e023      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 4:gain_treb = 0b00011011;break;
 8007e32:	231b      	movs	r3, #27
 8007e34:	71fb      	strb	r3, [r7, #7]
 8007e36:	e020      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 5:gain_treb = 0b00011010;break;
 8007e38:	231a      	movs	r3, #26
 8007e3a:	71fb      	strb	r3, [r7, #7]
 8007e3c:	e01d      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 6:gain_treb = 0b00011001;break;
 8007e3e:	2319      	movs	r3, #25
 8007e40:	71fb      	strb	r3, [r7, #7]
 8007e42:	e01a      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 7:gain_treb = 0b00011000;break;
 8007e44:	2318      	movs	r3, #24
 8007e46:	71fb      	strb	r3, [r7, #7]
 8007e48:	e017      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 8:gain_treb = 0b00010111;break;
 8007e4a:	2317      	movs	r3, #23
 8007e4c:	71fb      	strb	r3, [r7, #7]
 8007e4e:	e014      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 9:gain_treb = 0b00010110;break;
 8007e50:	2316      	movs	r3, #22
 8007e52:	71fb      	strb	r3, [r7, #7]
 8007e54:	e011      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 10:gain_treb = 0b00010101;break;
 8007e56:	2315      	movs	r3, #21
 8007e58:	71fb      	strb	r3, [r7, #7]
 8007e5a:	e00e      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 11:gain_treb = 0b00010100;break;
 8007e5c:	2314      	movs	r3, #20
 8007e5e:	71fb      	strb	r3, [r7, #7]
 8007e60:	e00b      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 12:gain_treb = 0b00010011;break;
 8007e62:	2313      	movs	r3, #19
 8007e64:	71fb      	strb	r3, [r7, #7]
 8007e66:	e008      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 13:gain_treb = 0b00010010;break;
 8007e68:	2312      	movs	r3, #18
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	e005      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 14:gain_treb = 0b00010001;break;
 8007e6e:	2311      	movs	r3, #17
 8007e70:	71fb      	strb	r3, [r7, #7]
 8007e72:	e002      	b.n	8007e7a <TDA7719_SetTreble+0x15a>
	    case 15:gain_treb = 0b00010000;break;
 8007e74:	2310      	movs	r3, #16
 8007e76:	71fb      	strb	r3, [r7, #7]
 8007e78:	bf00      	nop
	}
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x1F) | ((gain_treb << 0) & 0x1F);
 8007e7a:	4b1c      	ldr	r3, [pc, #112]	; (8007eec <TDA7719_SetTreble+0x1cc>)
 8007e7c:	7a5b      	ldrb	r3, [r3, #9]
 8007e7e:	b25b      	sxtb	r3, r3
 8007e80:	f023 031f 	bic.w	r3, r3, #31
 8007e84:	b25a      	sxtb	r2, r3
 8007e86:	79fb      	ldrb	r3, [r7, #7]
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	b25b      	sxtb	r3, r3
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	b25b      	sxtb	r3, r3
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	4b15      	ldr	r3, [pc, #84]	; (8007eec <TDA7719_SetTreble+0x1cc>)
 8007e96:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x60) | ((treb_f << 5) & 0x60);
 8007e98:	4b14      	ldr	r3, [pc, #80]	; (8007eec <TDA7719_SetTreble+0x1cc>)
 8007e9a:	7a5b      	ldrb	r3, [r3, #9]
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007ea2:	b25a      	sxtb	r2, r3
 8007ea4:	79bb      	ldrb	r3, [r7, #6]
 8007ea6:	015b      	lsls	r3, r3, #5
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007eae:	b25b      	sxtb	r3, r3
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <TDA7719_SetTreble+0x1cc>)
 8007eb8:	725a      	strb	r2, [r3, #9]
	TDA7719_registers[TDA7719_TRBLE] = (TDA7719_registers[TDA7719_TRBLE] & ~0x80) | ((soft_treb << 7) & 0x80);
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <TDA7719_SetTreble+0x1cc>)
 8007ebc:	7a5b      	ldrb	r3, [r3, #9]
 8007ebe:	b25b      	sxtb	r3, r3
 8007ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec4:	b25a      	sxtb	r2, r3
 8007ec6:	797b      	ldrb	r3, [r7, #5]
 8007ec8:	01db      	lsls	r3, r3, #7
 8007eca:	b25b      	sxtb	r3, r3
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	b25b      	sxtb	r3, r3
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <TDA7719_SetTreble+0x1cc>)
 8007ed4:	725a      	strb	r2, [r3, #9]

	I2C_send(TDA7719_TRBLE , TDA7719_registers[TDA7719_TRBLE]);
 8007ed6:	4b05      	ldr	r3, [pc, #20]	; (8007eec <TDA7719_SetTreble+0x1cc>)
 8007ed8:	7a5b      	ldrb	r3, [r3, #9]
 8007eda:	4619      	mov	r1, r3
 8007edc:	2009      	movs	r0, #9
 8007ede:	f000 fb95 	bl	800860c <I2C_send>
    }
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000374 	.word	0x20000374

08007ef0 <TDA7719_SetMiddle>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetMiddle(int8_t gain_mid,  uint8_t const mid_q,  uint8_t const soft_mid)
    {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]
 8007efa:	460b      	mov	r3, r1
 8007efc:	71bb      	strb	r3, [r7, #6]
 8007efe:	4613      	mov	r3, r2
 8007f00:	717b      	strb	r3, [r7, #5]
	switch(gain_mid)
 8007f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f06:	330f      	adds	r3, #15
 8007f08:	2b1e      	cmp	r3, #30
 8007f0a:	f200 809e 	bhi.w	800804a <TDA7719_SetMiddle+0x15a>
 8007f0e:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <TDA7719_SetMiddle+0x24>)
 8007f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f14:	08007f91 	.word	0x08007f91
 8007f18:	08007f97 	.word	0x08007f97
 8007f1c:	08007f9d 	.word	0x08007f9d
 8007f20:	08007fa3 	.word	0x08007fa3
 8007f24:	08007fa9 	.word	0x08007fa9
 8007f28:	08007faf 	.word	0x08007faf
 8007f2c:	08007fb5 	.word	0x08007fb5
 8007f30:	08007fbb 	.word	0x08007fbb
 8007f34:	08007fc1 	.word	0x08007fc1
 8007f38:	08007fc7 	.word	0x08007fc7
 8007f3c:	08007fcd 	.word	0x08007fcd
 8007f40:	08007fd3 	.word	0x08007fd3
 8007f44:	08007fd9 	.word	0x08007fd9
 8007f48:	08007fdf 	.word	0x08007fdf
 8007f4c:	08007fe5 	.word	0x08007fe5
 8007f50:	08007feb 	.word	0x08007feb
 8007f54:	08007ff1 	.word	0x08007ff1
 8007f58:	08007ff7 	.word	0x08007ff7
 8007f5c:	08007ffd 	.word	0x08007ffd
 8007f60:	08008003 	.word	0x08008003
 8007f64:	08008009 	.word	0x08008009
 8007f68:	0800800f 	.word	0x0800800f
 8007f6c:	08008015 	.word	0x08008015
 8007f70:	0800801b 	.word	0x0800801b
 8007f74:	08008021 	.word	0x08008021
 8007f78:	08008027 	.word	0x08008027
 8007f7c:	0800802d 	.word	0x0800802d
 8007f80:	08008033 	.word	0x08008033
 8007f84:	08008039 	.word	0x08008039
 8007f88:	0800803f 	.word	0x0800803f
 8007f8c:	08008045 	.word	0x08008045
	{
	    case -15:gain_mid = 0b00000000;break;
 8007f90:	2300      	movs	r3, #0
 8007f92:	71fb      	strb	r3, [r7, #7]
 8007f94:	e059      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -14:gain_mid = 0b00000001;break;
 8007f96:	2301      	movs	r3, #1
 8007f98:	71fb      	strb	r3, [r7, #7]
 8007f9a:	e056      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -13:gain_mid = 0b00000010;break;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	71fb      	strb	r3, [r7, #7]
 8007fa0:	e053      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -12:gain_mid = 0b00000011;break;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	71fb      	strb	r3, [r7, #7]
 8007fa6:	e050      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -11:gain_mid = 0b00000100;break;
 8007fa8:	2304      	movs	r3, #4
 8007faa:	71fb      	strb	r3, [r7, #7]
 8007fac:	e04d      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -10:gain_mid = 0b00000101;break;
 8007fae:	2305      	movs	r3, #5
 8007fb0:	71fb      	strb	r3, [r7, #7]
 8007fb2:	e04a      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -9:gain_mid = 0b00000110;break;
 8007fb4:	2306      	movs	r3, #6
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	e047      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -8:gain_mid = 0b00000111;break;
 8007fba:	2307      	movs	r3, #7
 8007fbc:	71fb      	strb	r3, [r7, #7]
 8007fbe:	e044      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -7:gain_mid = 0b00001000;break;
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	71fb      	strb	r3, [r7, #7]
 8007fc4:	e041      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -6:gain_mid = 0b00001001;break;
 8007fc6:	2309      	movs	r3, #9
 8007fc8:	71fb      	strb	r3, [r7, #7]
 8007fca:	e03e      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -5:gain_mid = 0b00001010;break;
 8007fcc:	230a      	movs	r3, #10
 8007fce:	71fb      	strb	r3, [r7, #7]
 8007fd0:	e03b      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -4:gain_mid = 0b00001011;break;
 8007fd2:	230b      	movs	r3, #11
 8007fd4:	71fb      	strb	r3, [r7, #7]
 8007fd6:	e038      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -3:gain_mid = 0b00001100;break;
 8007fd8:	230c      	movs	r3, #12
 8007fda:	71fb      	strb	r3, [r7, #7]
 8007fdc:	e035      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -2:gain_mid = 0b00001101;break;
 8007fde:	230d      	movs	r3, #13
 8007fe0:	71fb      	strb	r3, [r7, #7]
 8007fe2:	e032      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case -1:gain_mid = 0b00001110;break;
 8007fe4:	230e      	movs	r3, #14
 8007fe6:	71fb      	strb	r3, [r7, #7]
 8007fe8:	e02f      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 0:gain_mid = 0b00001111;break;
 8007fea:	230f      	movs	r3, #15
 8007fec:	71fb      	strb	r3, [r7, #7]
 8007fee:	e02c      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 1:gain_mid = 0b00011110;break;
 8007ff0:	231e      	movs	r3, #30
 8007ff2:	71fb      	strb	r3, [r7, #7]
 8007ff4:	e029      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 2:gain_mid = 0b00011101;break;
 8007ff6:	231d      	movs	r3, #29
 8007ff8:	71fb      	strb	r3, [r7, #7]
 8007ffa:	e026      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 3:gain_mid = 0b00011100;break;
 8007ffc:	231c      	movs	r3, #28
 8007ffe:	71fb      	strb	r3, [r7, #7]
 8008000:	e023      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 4:gain_mid = 0b00011011;break;
 8008002:	231b      	movs	r3, #27
 8008004:	71fb      	strb	r3, [r7, #7]
 8008006:	e020      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 5:gain_mid = 0b00011010;break;
 8008008:	231a      	movs	r3, #26
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	e01d      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 6:gain_mid = 0b00011001;break;
 800800e:	2319      	movs	r3, #25
 8008010:	71fb      	strb	r3, [r7, #7]
 8008012:	e01a      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 7:gain_mid = 0b00011000;break;
 8008014:	2318      	movs	r3, #24
 8008016:	71fb      	strb	r3, [r7, #7]
 8008018:	e017      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 8:gain_mid = 0b00010111;break;
 800801a:	2317      	movs	r3, #23
 800801c:	71fb      	strb	r3, [r7, #7]
 800801e:	e014      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 9:gain_mid = 0b00010110;break;
 8008020:	2316      	movs	r3, #22
 8008022:	71fb      	strb	r3, [r7, #7]
 8008024:	e011      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 10:gain_mid = 0b00010101;break;
 8008026:	2315      	movs	r3, #21
 8008028:	71fb      	strb	r3, [r7, #7]
 800802a:	e00e      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 11:gain_mid = 0b00010100;break;
 800802c:	2314      	movs	r3, #20
 800802e:	71fb      	strb	r3, [r7, #7]
 8008030:	e00b      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 12:gain_mid = 0b00010011;break;
 8008032:	2313      	movs	r3, #19
 8008034:	71fb      	strb	r3, [r7, #7]
 8008036:	e008      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 13:gain_mid = 0b00010010;break;
 8008038:	2312      	movs	r3, #18
 800803a:	71fb      	strb	r3, [r7, #7]
 800803c:	e005      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 14:gain_mid = 0b00010001;break;
 800803e:	2311      	movs	r3, #17
 8008040:	71fb      	strb	r3, [r7, #7]
 8008042:	e002      	b.n	800804a <TDA7719_SetMiddle+0x15a>
	    case 15:gain_mid = 0b00010000;break;
 8008044:	2310      	movs	r3, #16
 8008046:	71fb      	strb	r3, [r7, #7]
 8008048:	bf00      	nop
	}
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x1F) | ((gain_mid << 0) & 0x1F);
 800804a:	4b1c      	ldr	r3, [pc, #112]	; (80080bc <TDA7719_SetMiddle+0x1cc>)
 800804c:	7a9b      	ldrb	r3, [r3, #10]
 800804e:	b25b      	sxtb	r3, r3
 8008050:	f023 031f 	bic.w	r3, r3, #31
 8008054:	b25a      	sxtb	r2, r3
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	f003 031f 	and.w	r3, r3, #31
 800805c:	b25b      	sxtb	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b25b      	sxtb	r3, r3
 8008062:	b2da      	uxtb	r2, r3
 8008064:	4b15      	ldr	r3, [pc, #84]	; (80080bc <TDA7719_SetMiddle+0x1cc>)
 8008066:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x60) | ((mid_q << 5) & 0x60);
 8008068:	4b14      	ldr	r3, [pc, #80]	; (80080bc <TDA7719_SetMiddle+0x1cc>)
 800806a:	7a9b      	ldrb	r3, [r3, #10]
 800806c:	b25b      	sxtb	r3, r3
 800806e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008072:	b25a      	sxtb	r2, r3
 8008074:	79bb      	ldrb	r3, [r7, #6]
 8008076:	015b      	lsls	r3, r3, #5
 8008078:	b25b      	sxtb	r3, r3
 800807a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800807e:	b25b      	sxtb	r3, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	b25b      	sxtb	r3, r3
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <TDA7719_SetMiddle+0x1cc>)
 8008088:	729a      	strb	r2, [r3, #10]
	TDA7719_registers[TDA7719_MIDDLE] = (TDA7719_registers[TDA7719_MIDDLE] & ~0x80) | ((soft_mid << 7) & 0x80);
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <TDA7719_SetMiddle+0x1cc>)
 800808c:	7a9b      	ldrb	r3, [r3, #10]
 800808e:	b25b      	sxtb	r3, r3
 8008090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008094:	b25a      	sxtb	r2, r3
 8008096:	797b      	ldrb	r3, [r7, #5]
 8008098:	01db      	lsls	r3, r3, #7
 800809a:	b25b      	sxtb	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b25b      	sxtb	r3, r3
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	4b06      	ldr	r3, [pc, #24]	; (80080bc <TDA7719_SetMiddle+0x1cc>)
 80080a4:	729a      	strb	r2, [r3, #10]
	I2C_send(TDA7719_MIDDLE , TDA7719_registers[TDA7719_MIDDLE]);
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <TDA7719_SetMiddle+0x1cc>)
 80080a8:	7a9b      	ldrb	r3, [r3, #10]
 80080aa:	4619      	mov	r1, r3
 80080ac:	200a      	movs	r0, #10
 80080ae:	f000 faad 	bl	800860c <I2C_send>
    }
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000374 	.word	0x20000374

080080c0 <TDA7719_SetBass>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetBass(int8_t gain_bass, uint8_t const bass_q, uint8_t const soft_bass)
    {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
 80080ca:	460b      	mov	r3, r1
 80080cc:	71bb      	strb	r3, [r7, #6]
 80080ce:	4613      	mov	r3, r2
 80080d0:	717b      	strb	r3, [r7, #5]
	switch(gain_bass)
 80080d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d6:	330f      	adds	r3, #15
 80080d8:	2b1e      	cmp	r3, #30
 80080da:	f200 809e 	bhi.w	800821a <TDA7719_SetBass+0x15a>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <TDA7719_SetBass+0x24>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	08008161 	.word	0x08008161
 80080e8:	08008167 	.word	0x08008167
 80080ec:	0800816d 	.word	0x0800816d
 80080f0:	08008173 	.word	0x08008173
 80080f4:	08008179 	.word	0x08008179
 80080f8:	0800817f 	.word	0x0800817f
 80080fc:	08008185 	.word	0x08008185
 8008100:	0800818b 	.word	0x0800818b
 8008104:	08008191 	.word	0x08008191
 8008108:	08008197 	.word	0x08008197
 800810c:	0800819d 	.word	0x0800819d
 8008110:	080081a3 	.word	0x080081a3
 8008114:	080081a9 	.word	0x080081a9
 8008118:	080081af 	.word	0x080081af
 800811c:	080081b5 	.word	0x080081b5
 8008120:	080081bb 	.word	0x080081bb
 8008124:	080081c1 	.word	0x080081c1
 8008128:	080081c7 	.word	0x080081c7
 800812c:	080081cd 	.word	0x080081cd
 8008130:	080081d3 	.word	0x080081d3
 8008134:	080081d9 	.word	0x080081d9
 8008138:	080081df 	.word	0x080081df
 800813c:	080081e5 	.word	0x080081e5
 8008140:	080081eb 	.word	0x080081eb
 8008144:	080081f1 	.word	0x080081f1
 8008148:	080081f7 	.word	0x080081f7
 800814c:	080081fd 	.word	0x080081fd
 8008150:	08008203 	.word	0x08008203
 8008154:	08008209 	.word	0x08008209
 8008158:	0800820f 	.word	0x0800820f
 800815c:	08008215 	.word	0x08008215
	{
	    case -15:gain_bass = 0b00000000;break;
 8008160:	2300      	movs	r3, #0
 8008162:	71fb      	strb	r3, [r7, #7]
 8008164:	e059      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -14:gain_bass = 0b00000001;break;
 8008166:	2301      	movs	r3, #1
 8008168:	71fb      	strb	r3, [r7, #7]
 800816a:	e056      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -13:gain_bass = 0b00000010;break;
 800816c:	2302      	movs	r3, #2
 800816e:	71fb      	strb	r3, [r7, #7]
 8008170:	e053      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -12:gain_bass = 0b00000011;break;
 8008172:	2303      	movs	r3, #3
 8008174:	71fb      	strb	r3, [r7, #7]
 8008176:	e050      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -11:gain_bass = 0b00000100;break;
 8008178:	2304      	movs	r3, #4
 800817a:	71fb      	strb	r3, [r7, #7]
 800817c:	e04d      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -10:gain_bass = 0b00000101;break;
 800817e:	2305      	movs	r3, #5
 8008180:	71fb      	strb	r3, [r7, #7]
 8008182:	e04a      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -9:gain_bass  = 0b00000110;break;
 8008184:	2306      	movs	r3, #6
 8008186:	71fb      	strb	r3, [r7, #7]
 8008188:	e047      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -8:gain_bass  = 0b00000111;break;
 800818a:	2307      	movs	r3, #7
 800818c:	71fb      	strb	r3, [r7, #7]
 800818e:	e044      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -7:gain_bass  = 0b00001000;break;
 8008190:	2308      	movs	r3, #8
 8008192:	71fb      	strb	r3, [r7, #7]
 8008194:	e041      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -6:gain_bass  = 0b00001001;break;
 8008196:	2309      	movs	r3, #9
 8008198:	71fb      	strb	r3, [r7, #7]
 800819a:	e03e      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -5:gain_bass  = 0b00001010;break;
 800819c:	230a      	movs	r3, #10
 800819e:	71fb      	strb	r3, [r7, #7]
 80081a0:	e03b      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -4:gain_bass  = 0b00001011;break;
 80081a2:	230b      	movs	r3, #11
 80081a4:	71fb      	strb	r3, [r7, #7]
 80081a6:	e038      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -3:gain_bass  = 0b00001100;break;
 80081a8:	230c      	movs	r3, #12
 80081aa:	71fb      	strb	r3, [r7, #7]
 80081ac:	e035      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -2:gain_bass  = 0b00001101;break;
 80081ae:	230d      	movs	r3, #13
 80081b0:	71fb      	strb	r3, [r7, #7]
 80081b2:	e032      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case -1:gain_bass  = 0b00001110;break;
 80081b4:	230e      	movs	r3, #14
 80081b6:	71fb      	strb	r3, [r7, #7]
 80081b8:	e02f      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 0:gain_bass   = 0b00001111;break;
 80081ba:	230f      	movs	r3, #15
 80081bc:	71fb      	strb	r3, [r7, #7]
 80081be:	e02c      	b.n	800821a <TDA7719_SetBass+0x15a>

	    case 1:gain_bass   = 0b00011110;break;
 80081c0:	231e      	movs	r3, #30
 80081c2:	71fb      	strb	r3, [r7, #7]
 80081c4:	e029      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 2:gain_bass   = 0b00011101;break;
 80081c6:	231d      	movs	r3, #29
 80081c8:	71fb      	strb	r3, [r7, #7]
 80081ca:	e026      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 3:gain_bass   = 0b00011100;break;
 80081cc:	231c      	movs	r3, #28
 80081ce:	71fb      	strb	r3, [r7, #7]
 80081d0:	e023      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 4:gain_bass   = 0b00011011;break;
 80081d2:	231b      	movs	r3, #27
 80081d4:	71fb      	strb	r3, [r7, #7]
 80081d6:	e020      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 5:gain_bass   = 0b00011010;break;
 80081d8:	231a      	movs	r3, #26
 80081da:	71fb      	strb	r3, [r7, #7]
 80081dc:	e01d      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 6:gain_bass   = 0b00011001;break;
 80081de:	2319      	movs	r3, #25
 80081e0:	71fb      	strb	r3, [r7, #7]
 80081e2:	e01a      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 7:gain_bass   = 0b00011000;break;
 80081e4:	2318      	movs	r3, #24
 80081e6:	71fb      	strb	r3, [r7, #7]
 80081e8:	e017      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 8:gain_bass   = 0b00010111;break;
 80081ea:	2317      	movs	r3, #23
 80081ec:	71fb      	strb	r3, [r7, #7]
 80081ee:	e014      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 9:gain_bass   = 0b00010110;break;
 80081f0:	2316      	movs	r3, #22
 80081f2:	71fb      	strb	r3, [r7, #7]
 80081f4:	e011      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 10:gain_bass  = 0b00010101;break;
 80081f6:	2315      	movs	r3, #21
 80081f8:	71fb      	strb	r3, [r7, #7]
 80081fa:	e00e      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 11:gain_bass  = 0b00010100;break;
 80081fc:	2314      	movs	r3, #20
 80081fe:	71fb      	strb	r3, [r7, #7]
 8008200:	e00b      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 12:gain_bass  = 0b00010011;break;
 8008202:	2313      	movs	r3, #19
 8008204:	71fb      	strb	r3, [r7, #7]
 8008206:	e008      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 13:gain_bass  = 0b00010010;break;
 8008208:	2312      	movs	r3, #18
 800820a:	71fb      	strb	r3, [r7, #7]
 800820c:	e005      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 14:gain_bass  = 0b00010001;break;
 800820e:	2311      	movs	r3, #17
 8008210:	71fb      	strb	r3, [r7, #7]
 8008212:	e002      	b.n	800821a <TDA7719_SetBass+0x15a>
	    case 15:gain_bass  = 0b00010000;break;
 8008214:	2310      	movs	r3, #16
 8008216:	71fb      	strb	r3, [r7, #7]
 8008218:	bf00      	nop
	}
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x1F) | ((gain_bass << 0) & 0x1F);
 800821a:	4b1c      	ldr	r3, [pc, #112]	; (800828c <TDA7719_SetBass+0x1cc>)
 800821c:	7adb      	ldrb	r3, [r3, #11]
 800821e:	b25b      	sxtb	r3, r3
 8008220:	f023 031f 	bic.w	r3, r3, #31
 8008224:	b25a      	sxtb	r2, r3
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	f003 031f 	and.w	r3, r3, #31
 800822c:	b25b      	sxtb	r3, r3
 800822e:	4313      	orrs	r3, r2
 8008230:	b25b      	sxtb	r3, r3
 8008232:	b2da      	uxtb	r2, r3
 8008234:	4b15      	ldr	r3, [pc, #84]	; (800828c <TDA7719_SetBass+0x1cc>)
 8008236:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x60) | ((bass_q << 5) & 0x60);
 8008238:	4b14      	ldr	r3, [pc, #80]	; (800828c <TDA7719_SetBass+0x1cc>)
 800823a:	7adb      	ldrb	r3, [r3, #11]
 800823c:	b25b      	sxtb	r3, r3
 800823e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008242:	b25a      	sxtb	r2, r3
 8008244:	79bb      	ldrb	r3, [r7, #6]
 8008246:	015b      	lsls	r3, r3, #5
 8008248:	b25b      	sxtb	r3, r3
 800824a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824e:	b25b      	sxtb	r3, r3
 8008250:	4313      	orrs	r3, r2
 8008252:	b25b      	sxtb	r3, r3
 8008254:	b2da      	uxtb	r2, r3
 8008256:	4b0d      	ldr	r3, [pc, #52]	; (800828c <TDA7719_SetBass+0x1cc>)
 8008258:	72da      	strb	r2, [r3, #11]
	TDA7719_registers[TDA7719_BASS] = (TDA7719_registers[TDA7719_BASS] & ~0x80) | ((soft_bass << 7) & 0x80);
 800825a:	4b0c      	ldr	r3, [pc, #48]	; (800828c <TDA7719_SetBass+0x1cc>)
 800825c:	7adb      	ldrb	r3, [r3, #11]
 800825e:	b25b      	sxtb	r3, r3
 8008260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008264:	b25a      	sxtb	r2, r3
 8008266:	797b      	ldrb	r3, [r7, #5]
 8008268:	01db      	lsls	r3, r3, #7
 800826a:	b25b      	sxtb	r3, r3
 800826c:	4313      	orrs	r3, r2
 800826e:	b25b      	sxtb	r3, r3
 8008270:	b2da      	uxtb	r2, r3
 8008272:	4b06      	ldr	r3, [pc, #24]	; (800828c <TDA7719_SetBass+0x1cc>)
 8008274:	72da      	strb	r2, [r3, #11]
	I2C_send(TDA7719_BASS , TDA7719_registers[TDA7719_BASS]);
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <TDA7719_SetBass+0x1cc>)
 8008278:	7adb      	ldrb	r3, [r3, #11]
 800827a:	4619      	mov	r1, r3
 800827c:	200b      	movs	r0, #11
 800827e:	f000 f9c5 	bl	800860c <I2C_send>
    }
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000374 	.word	0x20000374

08008290 <TDA7719_SetVolume_LeftFront>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_LeftFront(int8_t LeftFront, uint8_t const soft_lf)
    {
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	460a      	mov	r2, r1
 800829a:	71fb      	strb	r3, [r7, #7]
 800829c:	4613      	mov	r3, r2
 800829e:	71bb      	strb	r3, [r7, #6]
	LeftFront = abs(LeftFront) + 0b00010000;
 80082a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bfb8      	it	lt
 80082a8:	425b      	neglt	r3, r3
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	3310      	adds	r3, #16
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x7F) | ((LeftFront << 0) & 0x7F);
 80082b2:	4b13      	ldr	r3, [pc, #76]	; (8008300 <TDA7719_SetVolume_LeftFront+0x70>)
 80082b4:	7b5b      	ldrb	r3, [r3, #13]
 80082b6:	b25b      	sxtb	r3, r3
 80082b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082bc:	b25a      	sxtb	r2, r3
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c4:	b25b      	sxtb	r3, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <TDA7719_SetVolume_LeftFront+0x70>)
 80082ce:	735a      	strb	r2, [r3, #13]
	TDA7719_registers[TDA7719_ATT_LF] = (TDA7719_registers[TDA7719_ATT_LF] & ~0x80) | ((soft_lf << 7) & 0x80);
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <TDA7719_SetVolume_LeftFront+0x70>)
 80082d2:	7b5b      	ldrb	r3, [r3, #13]
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082da:	b25a      	sxtb	r2, r3
 80082dc:	79bb      	ldrb	r3, [r7, #6]
 80082de:	01db      	lsls	r3, r3, #7
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	b25b      	sxtb	r3, r3
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <TDA7719_SetVolume_LeftFront+0x70>)
 80082ea:	735a      	strb	r2, [r3, #13]

	I2C_send(TDA7719_ATT_LF , TDA7719_registers[TDA7719_ATT_LF]);
 80082ec:	4b04      	ldr	r3, [pc, #16]	; (8008300 <TDA7719_SetVolume_LeftFront+0x70>)
 80082ee:	7b5b      	ldrb	r3, [r3, #13]
 80082f0:	4619      	mov	r1, r3
 80082f2:	200d      	movs	r0, #13
 80082f4:	f000 f98a 	bl	800860c <I2C_send>
    }
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000374 	.word	0x20000374

08008304 <TDA7719_SetVolume_RightFront>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_RightFront(int8_t RightFront, uint8_t const soft_rf)
    {
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	460a      	mov	r2, r1
 800830e:	71fb      	strb	r3, [r7, #7]
 8008310:	4613      	mov	r3, r2
 8008312:	71bb      	strb	r3, [r7, #6]
	RightFront = abs(RightFront) + 0b00010000;
 8008314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008318:	2b00      	cmp	r3, #0
 800831a:	bfb8      	it	lt
 800831c:	425b      	neglt	r3, r3
 800831e:	b2db      	uxtb	r3, r3
 8008320:	3310      	adds	r3, #16
 8008322:	b2db      	uxtb	r3, r3
 8008324:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x7F) | ((RightFront << 0) & 0x7F);
 8008326:	4b13      	ldr	r3, [pc, #76]	; (8008374 <TDA7719_SetVolume_RightFront+0x70>)
 8008328:	7b9b      	ldrb	r3, [r3, #14]
 800832a:	b25b      	sxtb	r3, r3
 800832c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008330:	b25a      	sxtb	r2, r3
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008338:	b25b      	sxtb	r3, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	b25b      	sxtb	r3, r3
 800833e:	b2da      	uxtb	r2, r3
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <TDA7719_SetVolume_RightFront+0x70>)
 8008342:	739a      	strb	r2, [r3, #14]
	TDA7719_registers[TDA7719_ATT_RF] = (TDA7719_registers[TDA7719_ATT_RF] & ~0x80) | ((soft_rf << 7) & 0x80);
 8008344:	4b0b      	ldr	r3, [pc, #44]	; (8008374 <TDA7719_SetVolume_RightFront+0x70>)
 8008346:	7b9b      	ldrb	r3, [r3, #14]
 8008348:	b25b      	sxtb	r3, r3
 800834a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800834e:	b25a      	sxtb	r2, r3
 8008350:	79bb      	ldrb	r3, [r7, #6]
 8008352:	01db      	lsls	r3, r3, #7
 8008354:	b25b      	sxtb	r3, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	b25b      	sxtb	r3, r3
 800835a:	b2da      	uxtb	r2, r3
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <TDA7719_SetVolume_RightFront+0x70>)
 800835e:	739a      	strb	r2, [r3, #14]

	I2C_send(TDA7719_ATT_RF , TDA7719_registers[TDA7719_ATT_RF]);
 8008360:	4b04      	ldr	r3, [pc, #16]	; (8008374 <TDA7719_SetVolume_RightFront+0x70>)
 8008362:	7b9b      	ldrb	r3, [r3, #14]
 8008364:	4619      	mov	r1, r3
 8008366:	200e      	movs	r0, #14
 8008368:	f000 f950 	bl	800860c <I2C_send>
    }
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000374 	.word	0x20000374

08008378 <TDA7719_SetVolume_LeftRear>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_LeftRear(int8_t LeftRear, uint8_t const soft_lr)
    {
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	460a      	mov	r2, r1
 8008382:	71fb      	strb	r3, [r7, #7]
 8008384:	4613      	mov	r3, r2
 8008386:	71bb      	strb	r3, [r7, #6]
	LeftRear = abs(LeftRear) + 0b00010000;
 8008388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800838c:	2b00      	cmp	r3, #0
 800838e:	bfb8      	it	lt
 8008390:	425b      	neglt	r3, r3
 8008392:	b2db      	uxtb	r3, r3
 8008394:	3310      	adds	r3, #16
 8008396:	b2db      	uxtb	r3, r3
 8008398:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x7F) | ((LeftRear << 0) & 0x7F);
 800839a:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <TDA7719_SetVolume_LeftRear+0x70>)
 800839c:	7bdb      	ldrb	r3, [r3, #15]
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083a4:	b25a      	sxtb	r2, r3
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ac:	b25b      	sxtb	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	b25b      	sxtb	r3, r3
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <TDA7719_SetVolume_LeftRear+0x70>)
 80083b6:	73da      	strb	r2, [r3, #15]
	TDA7719_registers[TDA7719_ATT_LR] = (TDA7719_registers[TDA7719_ATT_LR] & ~0x80) | ((soft_lr << 7) & 0x80);
 80083b8:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <TDA7719_SetVolume_LeftRear+0x70>)
 80083ba:	7bdb      	ldrb	r3, [r3, #15]
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c2:	b25a      	sxtb	r2, r3
 80083c4:	79bb      	ldrb	r3, [r7, #6]
 80083c6:	01db      	lsls	r3, r3, #7
 80083c8:	b25b      	sxtb	r3, r3
 80083ca:	4313      	orrs	r3, r2
 80083cc:	b25b      	sxtb	r3, r3
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <TDA7719_SetVolume_LeftRear+0x70>)
 80083d2:	73da      	strb	r2, [r3, #15]

	I2C_send(TDA7719_ATT_LR , TDA7719_registers[TDA7719_ATT_LR]);
 80083d4:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <TDA7719_SetVolume_LeftRear+0x70>)
 80083d6:	7bdb      	ldrb	r3, [r3, #15]
 80083d8:	4619      	mov	r1, r3
 80083da:	200f      	movs	r0, #15
 80083dc:	f000 f916 	bl	800860c <I2C_send>
    }
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000374 	.word	0x20000374

080083ec <TDA7719_SetVolume_RightRear>:
 *  @param[in]
 *
 *  @param[in]
 */
void TDA7719_SetVolume_RightRear(int8_t RightRear, uint8_t const soft_rr)
    {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	460a      	mov	r2, r1
 80083f6:	71fb      	strb	r3, [r7, #7]
 80083f8:	4613      	mov	r3, r2
 80083fa:	71bb      	strb	r3, [r7, #6]

	RightRear = abs(RightRear) + 0b00010000;
 80083fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008400:	2b00      	cmp	r3, #0
 8008402:	bfb8      	it	lt
 8008404:	425b      	neglt	r3, r3
 8008406:	b2db      	uxtb	r3, r3
 8008408:	3310      	adds	r3, #16
 800840a:	b2db      	uxtb	r3, r3
 800840c:	71fb      	strb	r3, [r7, #7]
	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x7F) | ((RightRear << 0) & 0x7F);
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <TDA7719_SetVolume_RightRear+0x70>)
 8008410:	7c1b      	ldrb	r3, [r3, #16]
 8008412:	b25b      	sxtb	r3, r3
 8008414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008418:	b25a      	sxtb	r2, r3
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008420:	b25b      	sxtb	r3, r3
 8008422:	4313      	orrs	r3, r2
 8008424:	b25b      	sxtb	r3, r3
 8008426:	b2da      	uxtb	r2, r3
 8008428:	4b0c      	ldr	r3, [pc, #48]	; (800845c <TDA7719_SetVolume_RightRear+0x70>)
 800842a:	741a      	strb	r2, [r3, #16]
	TDA7719_registers[TDA7719_ATT_RR] = (TDA7719_registers[TDA7719_ATT_RR] & ~0x80) | ((soft_rr << 7) & 0x80);
 800842c:	4b0b      	ldr	r3, [pc, #44]	; (800845c <TDA7719_SetVolume_RightRear+0x70>)
 800842e:	7c1b      	ldrb	r3, [r3, #16]
 8008430:	b25b      	sxtb	r3, r3
 8008432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008436:	b25a      	sxtb	r2, r3
 8008438:	79bb      	ldrb	r3, [r7, #6]
 800843a:	01db      	lsls	r3, r3, #7
 800843c:	b25b      	sxtb	r3, r3
 800843e:	4313      	orrs	r3, r2
 8008440:	b25b      	sxtb	r3, r3
 8008442:	b2da      	uxtb	r2, r3
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <TDA7719_SetVolume_RightRear+0x70>)
 8008446:	741a      	strb	r2, [r3, #16]

	I2C_send(TDA7719_ATT_RR , TDA7719_registers[TDA7719_ATT_RR]);
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <TDA7719_SetVolume_RightRear+0x70>)
 800844a:	7c1b      	ldrb	r3, [r3, #16]
 800844c:	4619      	mov	r1, r3
 800844e:	2010      	movs	r0, #16
 8008450:	f000 f8dc 	bl	800860c <I2C_send>
    }
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000374 	.word	0x20000374

08008460 <check_volumes_ranges>:
    }



void check_volumes_ranges(void)
    {
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
	if (volumeMasterFlag == 1)
 8008464:	4b62      	ldr	r3, [pc, #392]	; (80085f0 <check_volumes_ranges+0x190>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d13c      	bne.n	80084e6 <check_volumes_ranges+0x86>
	    {
		tempVolFrontLeft  = (encoderVolFront.volumeLeft - 79)  + (encoderVolFront.volumeLeftRight - 79);
 800846c:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <check_volumes_ranges+0x194>)
 800846e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008472:	b29a      	uxth	r2, r3
 8008474:	4b5f      	ldr	r3, [pc, #380]	; (80085f4 <check_volumes_ranges+0x194>)
 8008476:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800847a:	b29b      	uxth	r3, r3
 800847c:	4413      	add	r3, r2
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b9e      	subs	r3, #158	; 0x9e
 8008482:	b29b      	uxth	r3, r3
 8008484:	b21a      	sxth	r2, r3
 8008486:	4b5c      	ldr	r3, [pc, #368]	; (80085f8 <check_volumes_ranges+0x198>)
 8008488:	801a      	strh	r2, [r3, #0]
		tempVolFrontRight = (encoderVolFront.volumeRight - 79) + (encoderVolFront.volumeLeftRight - 79);
 800848a:	4b5a      	ldr	r3, [pc, #360]	; (80085f4 <check_volumes_ranges+0x194>)
 800848c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008490:	b29a      	uxth	r2, r3
 8008492:	4b58      	ldr	r3, [pc, #352]	; (80085f4 <check_volumes_ranges+0x194>)
 8008494:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008498:	b29b      	uxth	r3, r3
 800849a:	4413      	add	r3, r2
 800849c:	b29b      	uxth	r3, r3
 800849e:	3b9e      	subs	r3, #158	; 0x9e
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	b21a      	sxth	r2, r3
 80084a4:	4b55      	ldr	r3, [pc, #340]	; (80085fc <check_volumes_ranges+0x19c>)
 80084a6:	801a      	strh	r2, [r3, #0]
		tempVolBackLeft   = (encoderVolBack.volumeLeft - 79)   + (encoderVolBack.volumeLeftRight - 79);
 80084a8:	4b55      	ldr	r3, [pc, #340]	; (8008600 <check_volumes_ranges+0x1a0>)
 80084aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	4b53      	ldr	r3, [pc, #332]	; (8008600 <check_volumes_ranges+0x1a0>)
 80084b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b9e      	subs	r3, #158	; 0x9e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	b21a      	sxth	r2, r3
 80084c2:	4b50      	ldr	r3, [pc, #320]	; (8008604 <check_volumes_ranges+0x1a4>)
 80084c4:	801a      	strh	r2, [r3, #0]
		tempVolBackRight  = (encoderVolBack.volumeRight - 79)  + (encoderVolBack.volumeLeftRight - 79);
 80084c6:	4b4e      	ldr	r3, [pc, #312]	; (8008600 <check_volumes_ranges+0x1a0>)
 80084c8:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	4b4c      	ldr	r3, [pc, #304]	; (8008600 <check_volumes_ranges+0x1a0>)
 80084d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4413      	add	r3, r2
 80084d8:	b29b      	uxth	r3, r3
 80084da:	3b9e      	subs	r3, #158	; 0x9e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	b21a      	sxth	r2, r3
 80084e0:	4b49      	ldr	r3, [pc, #292]	; (8008608 <check_volumes_ranges+0x1a8>)
 80084e2:	801a      	strh	r2, [r3, #0]
 80084e4:	e057      	b.n	8008596 <check_volumes_ranges+0x136>
	    }
	else if (volumeMasterFlag == 0)
 80084e6:	4b42      	ldr	r3, [pc, #264]	; (80085f0 <check_volumes_ranges+0x190>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d153      	bne.n	8008596 <check_volumes_ranges+0x136>
	    {
		tempVolFrontLeft  = (encoderVolFront.volumeMaster - 79) + (encoderVolFront.volumeLeft - 79)  + (encoderVolFront.volumeLeftRight - 79);
 80084ee:	4b41      	ldr	r3, [pc, #260]	; (80085f4 <check_volumes_ranges+0x194>)
 80084f0:	f993 3000 	ldrsb.w	r3, [r3]
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	4b3f      	ldr	r3, [pc, #252]	; (80085f4 <check_volumes_ranges+0x194>)
 80084f8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4413      	add	r3, r2
 8008500:	b29a      	uxth	r2, r3
 8008502:	4b3c      	ldr	r3, [pc, #240]	; (80085f4 <check_volumes_ranges+0x194>)
 8008504:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008508:	b29b      	uxth	r3, r3
 800850a:	4413      	add	r3, r2
 800850c:	b29b      	uxth	r3, r3
 800850e:	3bed      	subs	r3, #237	; 0xed
 8008510:	b29b      	uxth	r3, r3
 8008512:	b21a      	sxth	r2, r3
 8008514:	4b38      	ldr	r3, [pc, #224]	; (80085f8 <check_volumes_ranges+0x198>)
 8008516:	801a      	strh	r2, [r3, #0]
		tempVolFrontRight = (encoderVolFront.volumeMaster - 79) + (encoderVolFront.volumeRight - 79) + (encoderVolFront.volumeLeftRight - 79);
 8008518:	4b36      	ldr	r3, [pc, #216]	; (80085f4 <check_volumes_ranges+0x194>)
 800851a:	f993 3000 	ldrsb.w	r3, [r3]
 800851e:	b29a      	uxth	r2, r3
 8008520:	4b34      	ldr	r3, [pc, #208]	; (80085f4 <check_volumes_ranges+0x194>)
 8008522:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8008526:	b29b      	uxth	r3, r3
 8008528:	4413      	add	r3, r2
 800852a:	b29a      	uxth	r2, r3
 800852c:	4b31      	ldr	r3, [pc, #196]	; (80085f4 <check_volumes_ranges+0x194>)
 800852e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008532:	b29b      	uxth	r3, r3
 8008534:	4413      	add	r3, r2
 8008536:	b29b      	uxth	r3, r3
 8008538:	3bed      	subs	r3, #237	; 0xed
 800853a:	b29b      	uxth	r3, r3
 800853c:	b21a      	sxth	r2, r3
 800853e:	4b2f      	ldr	r3, [pc, #188]	; (80085fc <check_volumes_ranges+0x19c>)
 8008540:	801a      	strh	r2, [r3, #0]
		tempVolBackLeft   = (encoderVolFront.volumeMaster - 79) + (encoderVolBack.volumeLeft - 79)   + (encoderVolBack.volumeLeftRight - 79);
 8008542:	4b2c      	ldr	r3, [pc, #176]	; (80085f4 <check_volumes_ranges+0x194>)
 8008544:	f993 3000 	ldrsb.w	r3, [r3]
 8008548:	b29a      	uxth	r2, r3
 800854a:	4b2d      	ldr	r3, [pc, #180]	; (8008600 <check_volumes_ranges+0x1a0>)
 800854c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008550:	b29b      	uxth	r3, r3
 8008552:	4413      	add	r3, r2
 8008554:	b29a      	uxth	r2, r3
 8008556:	4b2a      	ldr	r3, [pc, #168]	; (8008600 <check_volumes_ranges+0x1a0>)
 8008558:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800855c:	b29b      	uxth	r3, r3
 800855e:	4413      	add	r3, r2
 8008560:	b29b      	uxth	r3, r3
 8008562:	3bed      	subs	r3, #237	; 0xed
 8008564:	b29b      	uxth	r3, r3
 8008566:	b21a      	sxth	r2, r3
 8008568:	4b26      	ldr	r3, [pc, #152]	; (8008604 <check_volumes_ranges+0x1a4>)
 800856a:	801a      	strh	r2, [r3, #0]
		tempVolBackRight  = (encoderVolFront.volumeMaster - 79) + (encoderVolBack.volumeRight - 79)  + (encoderVolBack.volumeLeftRight - 79);
 800856c:	4b21      	ldr	r3, [pc, #132]	; (80085f4 <check_volumes_ranges+0x194>)
 800856e:	f993 3000 	ldrsb.w	r3, [r3]
 8008572:	b29a      	uxth	r2, r3
 8008574:	4b22      	ldr	r3, [pc, #136]	; (8008600 <check_volumes_ranges+0x1a0>)
 8008576:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800857a:	b29b      	uxth	r3, r3
 800857c:	4413      	add	r3, r2
 800857e:	b29a      	uxth	r2, r3
 8008580:	4b1f      	ldr	r3, [pc, #124]	; (8008600 <check_volumes_ranges+0x1a0>)
 8008582:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008586:	b29b      	uxth	r3, r3
 8008588:	4413      	add	r3, r2
 800858a:	b29b      	uxth	r3, r3
 800858c:	3bed      	subs	r3, #237	; 0xed
 800858e:	b29b      	uxth	r3, r3
 8008590:	b21a      	sxth	r2, r3
 8008592:	4b1d      	ldr	r3, [pc, #116]	; (8008608 <check_volumes_ranges+0x1a8>)
 8008594:	801a      	strh	r2, [r3, #0]
	    }

	if (tempVolFrontLeft  <= -79)tempVolFrontLeft  = -79;
 8008596:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <check_volumes_ranges+0x198>)
 8008598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800859c:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 80085a0:	da03      	bge.n	80085aa <check_volumes_ranges+0x14a>
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <check_volumes_ranges+0x198>)
 80085a4:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 80085a8:	801a      	strh	r2, [r3, #0]
	if (tempVolFrontRight <= -79)tempVolFrontRight = -79;
 80085aa:	4b14      	ldr	r3, [pc, #80]	; (80085fc <check_volumes_ranges+0x19c>)
 80085ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085b0:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 80085b4:	da03      	bge.n	80085be <check_volumes_ranges+0x15e>
 80085b6:	4b11      	ldr	r3, [pc, #68]	; (80085fc <check_volumes_ranges+0x19c>)
 80085b8:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 80085bc:	801a      	strh	r2, [r3, #0]
	if (tempVolBackLeft   <= -79)tempVolBackLeft   = -79;
 80085be:	4b11      	ldr	r3, [pc, #68]	; (8008604 <check_volumes_ranges+0x1a4>)
 80085c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085c4:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 80085c8:	da03      	bge.n	80085d2 <check_volumes_ranges+0x172>
 80085ca:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <check_volumes_ranges+0x1a4>)
 80085cc:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 80085d0:	801a      	strh	r2, [r3, #0]
	if (tempVolBackRight  <= -79)tempVolBackRight  = -79;
 80085d2:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <check_volumes_ranges+0x1a8>)
 80085d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085d8:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 80085dc:	da03      	bge.n	80085e6 <check_volumes_ranges+0x186>
 80085de:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <check_volumes_ranges+0x1a8>)
 80085e0:	f64f 72b1 	movw	r2, #65457	; 0xffb1
 80085e4:	801a      	strh	r2, [r3, #0]
    }
 80085e6:	bf00      	nop
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20000450 	.word	0x20000450
 80085f4:	20000554 	.word	0x20000554
 80085f8:	20000468 	.word	0x20000468
 80085fc:	20000246 	.word	0x20000246
 8008600:	20000518 	.word	0x20000518
 8008604:	200002b0 	.word	0x200002b0
 8008608:	2000046a 	.word	0x2000046a

0800860c <I2C_send>:


//====================== Communication with TDA7719 device via I2C ========================//
static void I2C_send(uint8_t const SubAddress, uint8_t const Data)
    {
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af02      	add	r7, sp, #8
 8008612:	4603      	mov	r3, r0
 8008614:	460a      	mov	r2, r1
 8008616:	71fb      	strb	r3, [r7, #7]
 8008618:	4613      	mov	r3, r2
 800861a:	71bb      	strb	r3, [r7, #6]
	uint8_t tab_to_send[2];
	tab_to_send[0] = SubAddress;
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	733b      	strb	r3, [r7, #12]
	tab_to_send[1] = Data;
 8008620:	79bb      	ldrb	r3, [r7, #6]
 8008622:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c2, TDA7719_address, tab_to_send, 2,10);
 8008624:	f107 020c 	add.w	r2, r7, #12
 8008628:	230a      	movs	r3, #10
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	2302      	movs	r3, #2
 800862e:	2188      	movs	r1, #136	; 0x88
 8008630:	4803      	ldr	r0, [pc, #12]	; (8008640 <I2C_send+0x34>)
 8008632:	f007 f9af 	bl	800f994 <HAL_I2C_Master_Transmit>

    }
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	200006bc 	.word	0x200006bc

08008644 <RTC_Alarm_activated_routine>:
	Alarm_.AlarmDateWeekDay = 1;
    }

//
void RTC_Alarm_activated_routine()
    {
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
	SSD1322_Screen_State = SSD1322_SCREEN_WakeUp;
 8008648:	4b03      	ldr	r3, [pc, #12]	; (8008658 <RTC_Alarm_activated_routine+0x14>)
 800864a:	2214      	movs	r2, #20
 800864c:	701a      	strb	r2, [r3, #0]
	//init preamp
	//init display
	//init radio
    }
 800864e:	bf00      	nop
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	200004f8 	.word	0x200004f8

0800865c <HAL_RTCEx_AlarmBEventCallback>:

//
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
    {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8008664:	2200      	movs	r2, #0
 8008666:	4937      	ldr	r1, [pc, #220]	; (8008744 <HAL_RTCEx_AlarmBEventCallback+0xe8>)
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f00a f917 	bl	801289c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 800866e:	2200      	movs	r2, #0
 8008670:	4935      	ldr	r1, [pc, #212]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f00a f9fc 	bl	8012a70 <HAL_RTC_GetDate>

	switch (RTC_typeOfAlarm_B)
 8008678:	4b34      	ldr	r3, [pc, #208]	; (800874c <HAL_RTCEx_AlarmBEventCallback+0xf0>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	3b01      	subs	r3, #1
 800867e:	2b04      	cmp	r3, #4
 8008680:	d84a      	bhi.n	8008718 <HAL_RTCEx_AlarmBEventCallback+0xbc>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <HAL_RTCEx_AlarmBEventCallback+0x2c>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	0800869d 	.word	0x0800869d
 800868c:	080086b9 	.word	0x080086b9
 8008690:	08008731 	.word	0x08008731
 8008694:	080086cf 	.word	0x080086cf
 8008698:	080086fd 	.word	0x080086fd
	    {
	    case ONLY_ONE_TIME_ALARM:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	699a      	ldr	r2, [r3, #24]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086aa:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_B = false;
 80086ac:	4b28      	ldr	r3, [pc, #160]	; (8008750 <HAL_RTCEx_AlarmBEventCallback+0xf4>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 80086b2:	f7ff ffc7 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 80086b6:	e040      	b.n	800873a <HAL_RTCEx_AlarmBEventCallback+0xde>
	    case ONLY_WEEKENDS_ALARM:
		if ((sDate.WeekDay == RTC_WEEKDAY_SATURDAY)
 80086b8:	4b23      	ldr	r3, [pc, #140]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b06      	cmp	r3, #6
 80086be:	d003      	beq.n	80086c8 <HAL_RTCEx_AlarmBEventCallback+0x6c>
		|| (sDate.WeekDay == RTC_WEEKDAY_SUNDAY))
 80086c0:	4b21      	ldr	r3, [pc, #132]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b07      	cmp	r3, #7
 80086c6:	d135      	bne.n	8008734 <HAL_RTCEx_AlarmBEventCallback+0xd8>
		    RTC_Alarm_activated_routine();
 80086c8:	f7ff ffbc 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 80086cc:	e032      	b.n	8008734 <HAL_RTCEx_AlarmBEventCallback+0xd8>
	    case EVERYDAY_ALARM:
		//keep interupt on
		break;
	    case MON_to_FRI_ALARM: //go to alarm routine if it is not weekend
		if((sDate.WeekDay == RTC_WEEKDAY_MONDAY)
 80086ce:	4b1e      	ldr	r3, [pc, #120]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d00f      	beq.n	80086f6 <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_TUESDAY)
 80086d6:	4b1c      	ldr	r3, [pc, #112]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d00b      	beq.n	80086f6 <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_WEDNESDAY)
 80086de:	4b1a      	ldr	r3, [pc, #104]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d007      	beq.n	80086f6 <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_THURSDAY)
 80086e6:	4b18      	ldr	r3, [pc, #96]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d003      	beq.n	80086f6 <HAL_RTCEx_AlarmBEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_FRIDAY))
 80086ee:	4b16      	ldr	r3, [pc, #88]	; (8008748 <HAL_RTCEx_AlarmBEventCallback+0xec>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b05      	cmp	r3, #5
 80086f4:	d120      	bne.n	8008738 <HAL_RTCEx_AlarmBEventCallback+0xdc>
		    RTC_Alarm_activated_routine();
 80086f6:	f7ff ffa5 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 80086fa:	e01d      	b.n	8008738 <HAL_RTCEx_AlarmBEventCallback+0xdc>
	    case EXACT_DATE_ALRAM: //trzeba dzień
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800870a:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 800870c:	4b11      	ldr	r3, [pc, #68]	; (8008754 <HAL_RTCEx_AlarmBEventCallback+0xf8>)
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 8008712:	f7ff ff97 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 8008716:	e010      	b.n	800873a <HAL_RTCEx_AlarmBEventCallback+0xde>
	    default:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699a      	ldr	r2, [r3, #24]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008726:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008728:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <HAL_RTCEx_AlarmBEventCallback+0xf8>)
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
		break;
 800872e:	e004      	b.n	800873a <HAL_RTCEx_AlarmBEventCallback+0xde>
		break;
 8008730:	bf00      	nop
 8008732:	e002      	b.n	800873a <HAL_RTCEx_AlarmBEventCallback+0xde>
		break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <HAL_RTCEx_AlarmBEventCallback+0xde>
		break;
 8008738:	bf00      	nop
	    }

    }
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	2000178c 	.word	0x2000178c
 8008748:	200057bc 	.word	0x200057bc
 800874c:	2000050b 	.word	0x2000050b
 8008750:	200004f6 	.word	0x200004f6
 8008754:	200002ae 	.word	0x200002ae

08008758 <HAL_RTC_AlarmAEventCallback>:

//
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
    {
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 8008760:	2200      	movs	r2, #0
 8008762:	4937      	ldr	r1, [pc, #220]	; (8008840 <HAL_RTC_AlarmAEventCallback+0xe8>)
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f00a f899 	bl	801289c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 800876a:	2200      	movs	r2, #0
 800876c:	4935      	ldr	r1, [pc, #212]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f00a f97e 	bl	8012a70 <HAL_RTC_GetDate>

	switch (RTC_typeOfAlarm_A)
 8008774:	4b34      	ldr	r3, [pc, #208]	; (8008848 <HAL_RTC_AlarmAEventCallback+0xf0>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	3b01      	subs	r3, #1
 800877a:	2b04      	cmp	r3, #4
 800877c:	d84a      	bhi.n	8008814 <HAL_RTC_AlarmAEventCallback+0xbc>
 800877e:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	08008799 	.word	0x08008799
 8008788:	080087b5 	.word	0x080087b5
 800878c:	0800882d 	.word	0x0800882d
 8008790:	080087cb 	.word	0x080087cb
 8008794:	080087f9 	.word	0x080087f9
	    {
	    case ONLY_ONE_TIME_ALARM:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087a6:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 80087a8:	4b28      	ldr	r3, [pc, #160]	; (800884c <HAL_RTC_AlarmAEventCallback+0xf4>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 80087ae:	f7ff ff49 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 80087b2:	e040      	b.n	8008836 <HAL_RTC_AlarmAEventCallback+0xde>
	    case ONLY_WEEKENDS_ALARM:
		if ((sDate.WeekDay == RTC_WEEKDAY_SATURDAY)
 80087b4:	4b23      	ldr	r3, [pc, #140]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b06      	cmp	r3, #6
 80087ba:	d003      	beq.n	80087c4 <HAL_RTC_AlarmAEventCallback+0x6c>
		|| (sDate.WeekDay == RTC_WEEKDAY_SUNDAY))
 80087bc:	4b21      	ldr	r3, [pc, #132]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b07      	cmp	r3, #7
 80087c2:	d135      	bne.n	8008830 <HAL_RTC_AlarmAEventCallback+0xd8>
		    RTC_Alarm_activated_routine();
 80087c4:	f7ff ff3e 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 80087c8:	e032      	b.n	8008830 <HAL_RTC_AlarmAEventCallback+0xd8>
	    case EVERYDAY_ALARM:
		//keep interupt on
		break;
	    case MON_to_FRI_ALARM: //go to alarm routine if it is not weekend
		if((sDate.WeekDay == RTC_WEEKDAY_MONDAY)
 80087ca:	4b1e      	ldr	r3, [pc, #120]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d00f      	beq.n	80087f2 <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_TUESDAY)
 80087d2:	4b1c      	ldr	r3, [pc, #112]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d00b      	beq.n	80087f2 <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_WEDNESDAY)
 80087da:	4b1a      	ldr	r3, [pc, #104]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d007      	beq.n	80087f2 <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_THURSDAY)
 80087e2:	4b18      	ldr	r3, [pc, #96]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d003      	beq.n	80087f2 <HAL_RTC_AlarmAEventCallback+0x9a>
		|| (sDate.WeekDay == RTC_WEEKDAY_FRIDAY))
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <HAL_RTC_AlarmAEventCallback+0xec>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	d120      	bne.n	8008834 <HAL_RTC_AlarmAEventCallback+0xdc>
		    RTC_Alarm_activated_routine();
 80087f2:	f7ff ff27 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 80087f6:	e01d      	b.n	8008834 <HAL_RTC_AlarmAEventCallback+0xdc>
	    case EXACT_DATE_ALRAM: //trzeba dzień
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008806:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008808:	4b10      	ldr	r3, [pc, #64]	; (800884c <HAL_RTC_AlarmAEventCallback+0xf4>)
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
		RTC_Alarm_activated_routine();
 800880e:	f7ff ff19 	bl	8008644 <RTC_Alarm_activated_routine>
		break;
 8008812:	e010      	b.n	8008836 <HAL_RTC_AlarmAEventCallback+0xde>
	    default:
		__HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	699a      	ldr	r2, [r3, #24]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008822:	619a      	str	r2, [r3, #24]
		IS_ALARM_SET_A = false;
 8008824:	4b09      	ldr	r3, [pc, #36]	; (800884c <HAL_RTC_AlarmAEventCallback+0xf4>)
 8008826:	2200      	movs	r2, #0
 8008828:	701a      	strb	r2, [r3, #0]
		break;
 800882a:	e004      	b.n	8008836 <HAL_RTC_AlarmAEventCallback+0xde>
		break;
 800882c:	bf00      	nop
 800882e:	e002      	b.n	8008836 <HAL_RTC_AlarmAEventCallback+0xde>
		break;
 8008830:	bf00      	nop
 8008832:	e000      	b.n	8008836 <HAL_RTC_AlarmAEventCallback+0xde>
		break;
 8008834:	bf00      	nop
	    }
	//ustawia jakąś flagę, która trzeba potem wyłączyć przyciskiem
	// dodać ifa, switcha albo funkcje która zwraca typ alarmu
	//wylaczyc alarm w zaleznosci od ustawienia
	//sprawdzić czy przekaznik jest wlaczony i zalączyć muzykę w zależności od ustawień
    }
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	2000178c 	.word	0x2000178c
 8008844:	200057bc 	.word	0x200057bc
 8008848:	20000508 	.word	0x20000508
 800884c:	200002ae 	.word	0x200002ae

08008850 <switch_change_time>:

//
void switch_change_time(Clock_Data_Change_t Clock, _Bool add_subb)
    {
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	460a      	mov	r2, r1
 800885a:	71fb      	strb	r3, [r7, #7]
 800885c:	4613      	mov	r3, r2
 800885e:	71bb      	strb	r3, [r7, #6]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8008860:	2200      	movs	r2, #0
 8008862:	499d      	ldr	r1, [pc, #628]	; (8008ad8 <switch_change_time+0x288>)
 8008864:	489d      	ldr	r0, [pc, #628]	; (8008adc <switch_change_time+0x28c>)
 8008866:	f00a f819 	bl	801289c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800886a:	2200      	movs	r2, #0
 800886c:	499c      	ldr	r1, [pc, #624]	; (8008ae0 <switch_change_time+0x290>)
 800886e:	489b      	ldr	r0, [pc, #620]	; (8008adc <switch_change_time+0x28c>)
 8008870:	f00a f8fe 	bl	8012a70 <HAL_RTC_GetDate>

	switch (Clock)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	3b01      	subs	r3, #1
 8008878:	2b07      	cmp	r3, #7
 800887a:	f200 811e 	bhi.w	8008aba <switch_change_time+0x26a>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <switch_change_time+0x34>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088a5 	.word	0x080088a5
 8008888:	080088e5 	.word	0x080088e5
 800888c:	08008965 	.word	0x08008965
 8008890:	080089dd 	.word	0x080089dd
 8008894:	08008abb 	.word	0x08008abb
 8008898:	08008925 	.word	0x08008925
 800889c:	08008a2d 	.word	0x08008a2d
 80088a0:	08008a7d 	.word	0x08008a7d
	    {
	    case HOUR:
		if(add_subb)sTime.Hours--;
 80088a4:	79bb      	ldrb	r3, [r7, #6]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d006      	beq.n	80088b8 <switch_change_time+0x68>
 80088aa:	4b8b      	ldr	r3, [pc, #556]	; (8008ad8 <switch_change_time+0x288>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	4b89      	ldr	r3, [pc, #548]	; (8008ad8 <switch_change_time+0x288>)
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e005      	b.n	80088c4 <switch_change_time+0x74>
		else sTime.Hours++;
 80088b8:	4b87      	ldr	r3, [pc, #540]	; (8008ad8 <switch_change_time+0x288>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	4b85      	ldr	r3, [pc, #532]	; (8008ad8 <switch_change_time+0x288>)
 80088c2:	701a      	strb	r2, [r3, #0]
		if(sTime.Hours == UINT8_MAX) sTime.Hours = 23;
 80088c4:	4b84      	ldr	r3, [pc, #528]	; (8008ad8 <switch_change_time+0x288>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2bff      	cmp	r3, #255	; 0xff
 80088ca:	d102      	bne.n	80088d2 <switch_change_time+0x82>
 80088cc:	4b82      	ldr	r3, [pc, #520]	; (8008ad8 <switch_change_time+0x288>)
 80088ce:	2217      	movs	r2, #23
 80088d0:	701a      	strb	r2, [r3, #0]
		if (IS_RTC_HOUR24(sTime.Hours)!= true) sTime.Hours = 0x00;
 80088d2:	4b81      	ldr	r3, [pc, #516]	; (8008ad8 <switch_change_time+0x288>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b17      	cmp	r3, #23
 80088d8:	f240 80f1 	bls.w	8008abe <switch_change_time+0x26e>
 80088dc:	4b7e      	ldr	r3, [pc, #504]	; (8008ad8 <switch_change_time+0x288>)
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
		break;
 80088e2:	e0ec      	b.n	8008abe <switch_change_time+0x26e>
	    case MINUTE:
		if(add_subb)sTime.Minutes--;
 80088e4:	79bb      	ldrb	r3, [r7, #6]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <switch_change_time+0xa8>
 80088ea:	4b7b      	ldr	r3, [pc, #492]	; (8008ad8 <switch_change_time+0x288>)
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	4b79      	ldr	r3, [pc, #484]	; (8008ad8 <switch_change_time+0x288>)
 80088f4:	705a      	strb	r2, [r3, #1]
 80088f6:	e005      	b.n	8008904 <switch_change_time+0xb4>
		else sTime.Minutes++;
 80088f8:	4b77      	ldr	r3, [pc, #476]	; (8008ad8 <switch_change_time+0x288>)
 80088fa:	785b      	ldrb	r3, [r3, #1]
 80088fc:	3301      	adds	r3, #1
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	4b75      	ldr	r3, [pc, #468]	; (8008ad8 <switch_change_time+0x288>)
 8008902:	705a      	strb	r2, [r3, #1]
		if(sTime.Minutes == UINT8_MAX) sTime.Minutes = 59;
 8008904:	4b74      	ldr	r3, [pc, #464]	; (8008ad8 <switch_change_time+0x288>)
 8008906:	785b      	ldrb	r3, [r3, #1]
 8008908:	2bff      	cmp	r3, #255	; 0xff
 800890a:	d102      	bne.n	8008912 <switch_change_time+0xc2>
 800890c:	4b72      	ldr	r3, [pc, #456]	; (8008ad8 <switch_change_time+0x288>)
 800890e:	223b      	movs	r2, #59	; 0x3b
 8008910:	705a      	strb	r2, [r3, #1]
		if (IS_RTC_MINUTES(sTime.Minutes)!= true) sTime.Minutes = 0x00;
 8008912:	4b71      	ldr	r3, [pc, #452]	; (8008ad8 <switch_change_time+0x288>)
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b3b      	cmp	r3, #59	; 0x3b
 8008918:	f240 80d3 	bls.w	8008ac2 <switch_change_time+0x272>
 800891c:	4b6e      	ldr	r3, [pc, #440]	; (8008ad8 <switch_change_time+0x288>)
 800891e:	2200      	movs	r2, #0
 8008920:	705a      	strb	r2, [r3, #1]
		break;
 8008922:	e0ce      	b.n	8008ac2 <switch_change_time+0x272>
	    case SECOND:
		if(add_subb)sTime.Seconds--;
 8008924:	79bb      	ldrb	r3, [r7, #6]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d006      	beq.n	8008938 <switch_change_time+0xe8>
 800892a:	4b6b      	ldr	r3, [pc, #428]	; (8008ad8 <switch_change_time+0x288>)
 800892c:	789b      	ldrb	r3, [r3, #2]
 800892e:	3b01      	subs	r3, #1
 8008930:	b2da      	uxtb	r2, r3
 8008932:	4b69      	ldr	r3, [pc, #420]	; (8008ad8 <switch_change_time+0x288>)
 8008934:	709a      	strb	r2, [r3, #2]
 8008936:	e005      	b.n	8008944 <switch_change_time+0xf4>
		else sTime.Seconds++;
 8008938:	4b67      	ldr	r3, [pc, #412]	; (8008ad8 <switch_change_time+0x288>)
 800893a:	789b      	ldrb	r3, [r3, #2]
 800893c:	3301      	adds	r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	4b65      	ldr	r3, [pc, #404]	; (8008ad8 <switch_change_time+0x288>)
 8008942:	709a      	strb	r2, [r3, #2]
		if(sTime.Seconds == UINT8_MAX) sTime.Seconds = 59;
 8008944:	4b64      	ldr	r3, [pc, #400]	; (8008ad8 <switch_change_time+0x288>)
 8008946:	789b      	ldrb	r3, [r3, #2]
 8008948:	2bff      	cmp	r3, #255	; 0xff
 800894a:	d102      	bne.n	8008952 <switch_change_time+0x102>
 800894c:	4b62      	ldr	r3, [pc, #392]	; (8008ad8 <switch_change_time+0x288>)
 800894e:	223b      	movs	r2, #59	; 0x3b
 8008950:	709a      	strb	r2, [r3, #2]
		if (IS_RTC_SECONDS(sTime.Seconds)!= true) sTime.Seconds = 0x00;
 8008952:	4b61      	ldr	r3, [pc, #388]	; (8008ad8 <switch_change_time+0x288>)
 8008954:	789b      	ldrb	r3, [r3, #2]
 8008956:	2b3b      	cmp	r3, #59	; 0x3b
 8008958:	f240 80b5 	bls.w	8008ac6 <switch_change_time+0x276>
 800895c:	4b5e      	ldr	r3, [pc, #376]	; (8008ad8 <switch_change_time+0x288>)
 800895e:	2200      	movs	r2, #0
 8008960:	709a      	strb	r2, [r3, #2]
		break;
 8008962:	e0b0      	b.n	8008ac6 <switch_change_time+0x276>
	    case DAYWEEK:
		if(add_subb)sDate.WeekDay--;
 8008964:	79bb      	ldrb	r3, [r7, #6]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d006      	beq.n	8008978 <switch_change_time+0x128>
 800896a:	4b5d      	ldr	r3, [pc, #372]	; (8008ae0 <switch_change_time+0x290>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	3b01      	subs	r3, #1
 8008970:	b2da      	uxtb	r2, r3
 8008972:	4b5b      	ldr	r3, [pc, #364]	; (8008ae0 <switch_change_time+0x290>)
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e005      	b.n	8008984 <switch_change_time+0x134>
		else sDate.WeekDay++;
 8008978:	4b59      	ldr	r3, [pc, #356]	; (8008ae0 <switch_change_time+0x290>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	3301      	adds	r3, #1
 800897e:	b2da      	uxtb	r2, r3
 8008980:	4b57      	ldr	r3, [pc, #348]	; (8008ae0 <switch_change_time+0x290>)
 8008982:	701a      	strb	r2, [r3, #0]
		if(sDate.WeekDay == UINT8_MAX) sDate.WeekDay = 7;
 8008984:	4b56      	ldr	r3, [pc, #344]	; (8008ae0 <switch_change_time+0x290>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2bff      	cmp	r3, #255	; 0xff
 800898a:	d102      	bne.n	8008992 <switch_change_time+0x142>
 800898c:	4b54      	ldr	r3, [pc, #336]	; (8008ae0 <switch_change_time+0x290>)
 800898e:	2207      	movs	r2, #7
 8008990:	701a      	strb	r2, [r3, #0]
		if (IS_RTC_WEEKDAY(sDate.WeekDay)!= true) sDate.WeekDay = 0x00;
 8008992:	4b53      	ldr	r3, [pc, #332]	; (8008ae0 <switch_change_time+0x290>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d017      	beq.n	80089ca <switch_change_time+0x17a>
 800899a:	4b51      	ldr	r3, [pc, #324]	; (8008ae0 <switch_change_time+0x290>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d013      	beq.n	80089ca <switch_change_time+0x17a>
 80089a2:	4b4f      	ldr	r3, [pc, #316]	; (8008ae0 <switch_change_time+0x290>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d00f      	beq.n	80089ca <switch_change_time+0x17a>
 80089aa:	4b4d      	ldr	r3, [pc, #308]	; (8008ae0 <switch_change_time+0x290>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d00b      	beq.n	80089ca <switch_change_time+0x17a>
 80089b2:	4b4b      	ldr	r3, [pc, #300]	; (8008ae0 <switch_change_time+0x290>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d007      	beq.n	80089ca <switch_change_time+0x17a>
 80089ba:	4b49      	ldr	r3, [pc, #292]	; (8008ae0 <switch_change_time+0x290>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b06      	cmp	r3, #6
 80089c0:	d003      	beq.n	80089ca <switch_change_time+0x17a>
 80089c2:	4b47      	ldr	r3, [pc, #284]	; (8008ae0 <switch_change_time+0x290>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b07      	cmp	r3, #7
 80089c8:	d101      	bne.n	80089ce <switch_change_time+0x17e>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <switch_change_time+0x180>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d07a      	beq.n	8008aca <switch_change_time+0x27a>
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <switch_change_time+0x290>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	701a      	strb	r2, [r3, #0]
		break;
 80089da:	e076      	b.n	8008aca <switch_change_time+0x27a>
	    case DAY:
		if(add_subb)sDate.Date--;
 80089dc:	79bb      	ldrb	r3, [r7, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d006      	beq.n	80089f0 <switch_change_time+0x1a0>
 80089e2:	4b3f      	ldr	r3, [pc, #252]	; (8008ae0 <switch_change_time+0x290>)
 80089e4:	789b      	ldrb	r3, [r3, #2]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	4b3d      	ldr	r3, [pc, #244]	; (8008ae0 <switch_change_time+0x290>)
 80089ec:	709a      	strb	r2, [r3, #2]
 80089ee:	e005      	b.n	80089fc <switch_change_time+0x1ac>
		else sDate.Date++;
 80089f0:	4b3b      	ldr	r3, [pc, #236]	; (8008ae0 <switch_change_time+0x290>)
 80089f2:	789b      	ldrb	r3, [r3, #2]
 80089f4:	3301      	adds	r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <switch_change_time+0x290>)
 80089fa:	709a      	strb	r2, [r3, #2]
		if(sDate.Date == UINT8_MAX) sDate.Date = 30;
 80089fc:	4b38      	ldr	r3, [pc, #224]	; (8008ae0 <switch_change_time+0x290>)
 80089fe:	789b      	ldrb	r3, [r3, #2]
 8008a00:	2bff      	cmp	r3, #255	; 0xff
 8008a02:	d102      	bne.n	8008a0a <switch_change_time+0x1ba>
 8008a04:	4b36      	ldr	r3, [pc, #216]	; (8008ae0 <switch_change_time+0x290>)
 8008a06:	221e      	movs	r2, #30
 8008a08:	709a      	strb	r2, [r3, #2]
		if (IS_RTC_DATE(sDate.Date)!= true) sDate.Date = 0x00;
 8008a0a:	4b35      	ldr	r3, [pc, #212]	; (8008ae0 <switch_change_time+0x290>)
 8008a0c:	789b      	ldrb	r3, [r3, #2]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d005      	beq.n	8008a1e <switch_change_time+0x1ce>
 8008a12:	4b33      	ldr	r3, [pc, #204]	; (8008ae0 <switch_change_time+0x290>)
 8008a14:	789b      	ldrb	r3, [r3, #2]
 8008a16:	2b1f      	cmp	r3, #31
 8008a18:	d801      	bhi.n	8008a1e <switch_change_time+0x1ce>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <switch_change_time+0x1d0>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d054      	beq.n	8008ace <switch_change_time+0x27e>
 8008a24:	4b2e      	ldr	r3, [pc, #184]	; (8008ae0 <switch_change_time+0x290>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	709a      	strb	r2, [r3, #2]
		break;
 8008a2a:	e050      	b.n	8008ace <switch_change_time+0x27e>
	    case MONTH:
		if(add_subb)sDate.Month--;
 8008a2c:	79bb      	ldrb	r3, [r7, #6]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d006      	beq.n	8008a40 <switch_change_time+0x1f0>
 8008a32:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <switch_change_time+0x290>)
 8008a34:	785b      	ldrb	r3, [r3, #1]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	4b29      	ldr	r3, [pc, #164]	; (8008ae0 <switch_change_time+0x290>)
 8008a3c:	705a      	strb	r2, [r3, #1]
 8008a3e:	e005      	b.n	8008a4c <switch_change_time+0x1fc>
		else sDate.Month++;
 8008a40:	4b27      	ldr	r3, [pc, #156]	; (8008ae0 <switch_change_time+0x290>)
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	3301      	adds	r3, #1
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	4b25      	ldr	r3, [pc, #148]	; (8008ae0 <switch_change_time+0x290>)
 8008a4a:	705a      	strb	r2, [r3, #1]
		if(sDate.Month == UINT8_MAX) sDate.Month = 12;
 8008a4c:	4b24      	ldr	r3, [pc, #144]	; (8008ae0 <switch_change_time+0x290>)
 8008a4e:	785b      	ldrb	r3, [r3, #1]
 8008a50:	2bff      	cmp	r3, #255	; 0xff
 8008a52:	d102      	bne.n	8008a5a <switch_change_time+0x20a>
 8008a54:	4b22      	ldr	r3, [pc, #136]	; (8008ae0 <switch_change_time+0x290>)
 8008a56:	220c      	movs	r2, #12
 8008a58:	705a      	strb	r2, [r3, #1]
		if (IS_RTC_MONTH(sDate.Month)!= true) sDate.Month = 0x00;
 8008a5a:	4b21      	ldr	r3, [pc, #132]	; (8008ae0 <switch_change_time+0x290>)
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <switch_change_time+0x21e>
 8008a62:	4b1f      	ldr	r3, [pc, #124]	; (8008ae0 <switch_change_time+0x290>)
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b0c      	cmp	r3, #12
 8008a68:	d801      	bhi.n	8008a6e <switch_change_time+0x21e>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <switch_change_time+0x220>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d02e      	beq.n	8008ad2 <switch_change_time+0x282>
 8008a74:	4b1a      	ldr	r3, [pc, #104]	; (8008ae0 <switch_change_time+0x290>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	705a      	strb	r2, [r3, #1]
		break;
 8008a7a:	e02a      	b.n	8008ad2 <switch_change_time+0x282>
	    case YEAR:
		if(add_subb)sDate.Year--;
 8008a7c:	79bb      	ldrb	r3, [r7, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d006      	beq.n	8008a90 <switch_change_time+0x240>
 8008a82:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <switch_change_time+0x290>)
 8008a84:	78db      	ldrb	r3, [r3, #3]
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <switch_change_time+0x290>)
 8008a8c:	70da      	strb	r2, [r3, #3]
 8008a8e:	e005      	b.n	8008a9c <switch_change_time+0x24c>
		else sDate.Year++;
 8008a90:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <switch_change_time+0x290>)
 8008a92:	78db      	ldrb	r3, [r3, #3]
 8008a94:	3301      	adds	r3, #1
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <switch_change_time+0x290>)
 8008a9a:	70da      	strb	r2, [r3, #3]
		if(sDate.Year == UINT8_MAX) sDate.Year = 0;
 8008a9c:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <switch_change_time+0x290>)
 8008a9e:	78db      	ldrb	r3, [r3, #3]
 8008aa0:	2bff      	cmp	r3, #255	; 0xff
 8008aa2:	d102      	bne.n	8008aaa <switch_change_time+0x25a>
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <switch_change_time+0x290>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	70da      	strb	r2, [r3, #3]
		if (IS_RTC_YEAR(sDate.Year)!= true) sDate.Year = 0x00;
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <switch_change_time+0x290>)
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	2b63      	cmp	r3, #99	; 0x63
 8008ab0:	d918      	bls.n	8008ae4 <switch_change_time+0x294>
 8008ab2:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <switch_change_time+0x290>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	70da      	strb	r2, [r3, #3]
		break;
 8008ab8:	e014      	b.n	8008ae4 <switch_change_time+0x294>
	    default:
		//reset all values
		break;
 8008aba:	bf00      	nop
 8008abc:	e013      	b.n	8008ae6 <switch_change_time+0x296>
		break;
 8008abe:	bf00      	nop
 8008ac0:	e011      	b.n	8008ae6 <switch_change_time+0x296>
		break;
 8008ac2:	bf00      	nop
 8008ac4:	e00f      	b.n	8008ae6 <switch_change_time+0x296>
		break;
 8008ac6:	bf00      	nop
 8008ac8:	e00d      	b.n	8008ae6 <switch_change_time+0x296>
		break;
 8008aca:	bf00      	nop
 8008acc:	e00b      	b.n	8008ae6 <switch_change_time+0x296>
		break;
 8008ace:	bf00      	nop
 8008ad0:	e009      	b.n	8008ae6 <switch_change_time+0x296>
		break;
 8008ad2:	bf00      	nop
 8008ad4:	e007      	b.n	8008ae6 <switch_change_time+0x296>
 8008ad6:	bf00      	nop
 8008ad8:	2000178c 	.word	0x2000178c
 8008adc:	20007828 	.word	0x20007828
 8008ae0:	200057bc 	.word	0x200057bc
		break;
 8008ae4:	bf00      	nop
	    }
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	4906      	ldr	r1, [pc, #24]	; (8008b04 <switch_change_time+0x2b4>)
 8008aea:	4807      	ldr	r0, [pc, #28]	; (8008b08 <switch_change_time+0x2b8>)
 8008aec:	f009 fe36 	bl	801275c <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8008af0:	2200      	movs	r2, #0
 8008af2:	4906      	ldr	r1, [pc, #24]	; (8008b0c <switch_change_time+0x2bc>)
 8008af4:	4804      	ldr	r0, [pc, #16]	; (8008b08 <switch_change_time+0x2b8>)
 8008af6:	f009 ff33 	bl	8012960 <HAL_RTC_SetDate>
    }
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	2000178c 	.word	0x2000178c
 8008b08:	20007828 	.word	0x20007828
 8008b0c:	200057bc 	.word	0x200057bc

08008b10 <Set_Alarm_Mode>:

//
void Set_Alarm_Mode(RTC_typeOfAlarm_t typeOfAlarm)
    {
 8008b10:	b4b0      	push	{r4, r5, r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	71fb      	strb	r3, [r7, #7]
	// zrobic z napisow consty
	switch (typeOfAlarm)
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d839      	bhi.n	8008b96 <Set_Alarm_Mode+0x86>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <Set_Alarm_Mode+0x18>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b3d 	.word	0x08008b3d
 8008b2c:	08008b4d 	.word	0x08008b4d
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	08008b71 	.word	0x08008b71
 8008b38:	08008b83 	.word	0x08008b83
	    {
	    case ONLY_ONE_TIME_ALARM:
		strcpy(AlarmMode, "Jeden raz");
 8008b3c:	4a19      	ldr	r2, [pc, #100]	; (8008ba4 <Set_Alarm_Mode+0x94>)
 8008b3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ba8 <Set_Alarm_Mode+0x98>)
 8008b40:	cb03      	ldmia	r3!, {r0, r1}
 8008b42:	6010      	str	r0, [r2, #0]
 8008b44:	6051      	str	r1, [r2, #4]
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	8113      	strh	r3, [r2, #8]
		break;
 8008b4a:	e025      	b.n	8008b98 <Set_Alarm_Mode+0x88>
	    case ONLY_WEEKENDS_ALARM:
		strcpy(AlarmMode, "Weekendy");
 8008b4c:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <Set_Alarm_Mode+0x94>)
 8008b4e:	4b17      	ldr	r3, [pc, #92]	; (8008bac <Set_Alarm_Mode+0x9c>)
 8008b50:	cb03      	ldmia	r3!, {r0, r1}
 8008b52:	6010      	str	r0, [r2, #0]
 8008b54:	6051      	str	r1, [r2, #4]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	7213      	strb	r3, [r2, #8]
		break;
 8008b5a:	e01d      	b.n	8008b98 <Set_Alarm_Mode+0x88>
	    case EVERYDAY_ALARM:
		strcpy(AlarmMode, "Codziennie");
 8008b5c:	4a11      	ldr	r2, [pc, #68]	; (8008ba4 <Set_Alarm_Mode+0x94>)
 8008b5e:	4b14      	ldr	r3, [pc, #80]	; (8008bb0 <Set_Alarm_Mode+0xa0>)
 8008b60:	cb03      	ldmia	r3!, {r0, r1}
 8008b62:	6010      	str	r0, [r2, #0]
 8008b64:	6051      	str	r1, [r2, #4]
 8008b66:	8819      	ldrh	r1, [r3, #0]
 8008b68:	789b      	ldrb	r3, [r3, #2]
 8008b6a:	8111      	strh	r1, [r2, #8]
 8008b6c:	7293      	strb	r3, [r2, #10]
		break;
 8008b6e:	e013      	b.n	8008b98 <Set_Alarm_Mode+0x88>
	    case MON_to_FRI_ALARM:
		strcpy(AlarmMode, "Pon-Pt");
 8008b70:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <Set_Alarm_Mode+0x94>)
 8008b72:	4a10      	ldr	r2, [pc, #64]	; (8008bb4 <Set_Alarm_Mode+0xa4>)
 8008b74:	6810      	ldr	r0, [r2, #0]
 8008b76:	6018      	str	r0, [r3, #0]
 8008b78:	8891      	ldrh	r1, [r2, #4]
 8008b7a:	7992      	ldrb	r2, [r2, #6]
 8008b7c:	8099      	strh	r1, [r3, #4]
 8008b7e:	719a      	strb	r2, [r3, #6]
		break;
 8008b80:	e00a      	b.n	8008b98 <Set_Alarm_Mode+0x88>
	    case EXACT_DATE_ALRAM:
		strcpy(AlarmMode, "Konkretny Dzien");
 8008b82:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <Set_Alarm_Mode+0x94>)
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <Set_Alarm_Mode+0xa8>)
 8008b86:	4614      	mov	r4, r2
 8008b88:	461d      	mov	r5, r3
 8008b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b8c:	6020      	str	r0, [r4, #0]
 8008b8e:	6061      	str	r1, [r4, #4]
 8008b90:	60a2      	str	r2, [r4, #8]
 8008b92:	60e3      	str	r3, [r4, #12]
		break;
 8008b94:	e000      	b.n	8008b98 <Set_Alarm_Mode+0x88>
	    default:
		break;
 8008b96:	bf00      	nop
	    }
    }
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bcb0      	pop	{r4, r5, r7}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	2000055c 	.word	0x2000055c
 8008ba8:	08018030 	.word	0x08018030
 8008bac:	0801803c 	.word	0x0801803c
 8008bb0:	08018048 	.word	0x08018048
 8008bb4:	08018054 	.word	0x08018054
 8008bb8:	0801805c 	.word	0x0801805c

08008bbc <switch_change_alarm>:

//
void switch_change_alarm(AlarmDataChange_t AlarmDataChange, _Bool add_subb)
    {
 8008bbc:	b5b0      	push	{r4, r5, r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	460a      	mov	r2, r1
 8008bc6:	71fb      	strb	r3, [r7, #7]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	71bb      	strb	r3, [r7, #6]
	//dodać wyswietlanie ustawionego alarmu, może jednocześnie albo wybieralnie
	//w wyswietlaniu użyć HAL_RTC_GetAlarm
	switch (AlarmDataChange)
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	2b05      	cmp	r3, #5
 8008bd2:	f200 81af 	bhi.w	8008f34 <switch_change_alarm+0x378>
 8008bd6:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <switch_change_alarm+0x20>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bf5 	.word	0x08008bf5
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008c75 	.word	0x08008c75
 8008be8:	08008d83 	.word	0x08008d83
 8008bec:	08008dfb 	.word	0x08008dfb
 8008bf0:	08008f1d 	.word	0x08008f1d
	    {
	    case HOUR_ALARM:
		if(add_subb == true)Alarm.AlarmTime.Hours--;
 8008bf4:	79bb      	ldrb	r3, [r7, #6]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d006      	beq.n	8008c08 <switch_change_alarm+0x4c>
 8008bfa:	4ba5      	ldr	r3, [pc, #660]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4ba3      	ldr	r3, [pc, #652]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e005      	b.n	8008c14 <switch_change_alarm+0x58>
		else Alarm.AlarmTime.Hours++;
 8008c08:	4ba1      	ldr	r3, [pc, #644]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	4b9f      	ldr	r3, [pc, #636]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c12:	701a      	strb	r2, [r3, #0]

		if(Alarm.AlarmTime.Hours == UINT8_MAX) Alarm.AlarmTime.Hours = 23;
 8008c14:	4b9e      	ldr	r3, [pc, #632]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2bff      	cmp	r3, #255	; 0xff
 8008c1a:	d102      	bne.n	8008c22 <switch_change_alarm+0x66>
 8008c1c:	4b9c      	ldr	r3, [pc, #624]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c1e:	2217      	movs	r2, #23
 8008c20:	701a      	strb	r2, [r3, #0]

		if (IS_RTC_HOUR24(Alarm.AlarmTime.Hours)!= true) Alarm.AlarmTime.Hours = 0x00;
 8008c22:	4b9b      	ldr	r3, [pc, #620]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b17      	cmp	r3, #23
 8008c28:	f240 8186 	bls.w	8008f38 <switch_change_alarm+0x37c>
 8008c2c:	4b98      	ldr	r3, [pc, #608]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	701a      	strb	r2, [r3, #0]
		break;
 8008c32:	e181      	b.n	8008f38 <switch_change_alarm+0x37c>
	    case MINUTE_ALARM:
		if(add_subb == true)Alarm.AlarmTime.Minutes--;
 8008c34:	79bb      	ldrb	r3, [r7, #6]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d006      	beq.n	8008c48 <switch_change_alarm+0x8c>
 8008c3a:	4b95      	ldr	r3, [pc, #596]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	4b93      	ldr	r3, [pc, #588]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c44:	705a      	strb	r2, [r3, #1]
 8008c46:	e005      	b.n	8008c54 <switch_change_alarm+0x98>
		else Alarm.AlarmTime.Minutes++;
 8008c48:	4b91      	ldr	r3, [pc, #580]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	4b8f      	ldr	r3, [pc, #572]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c52:	705a      	strb	r2, [r3, #1]
		if(Alarm.AlarmTime.Minutes == UINT8_MAX) Alarm.AlarmTime.Minutes = 59;
 8008c54:	4b8e      	ldr	r3, [pc, #568]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c56:	785b      	ldrb	r3, [r3, #1]
 8008c58:	2bff      	cmp	r3, #255	; 0xff
 8008c5a:	d102      	bne.n	8008c62 <switch_change_alarm+0xa6>
 8008c5c:	4b8c      	ldr	r3, [pc, #560]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c5e:	223b      	movs	r2, #59	; 0x3b
 8008c60:	705a      	strb	r2, [r3, #1]
		if (IS_RTC_MINUTES(Alarm.AlarmTime.Minutes)!= true) Alarm.AlarmTime.Minutes = 0x00;
 8008c62:	4b8b      	ldr	r3, [pc, #556]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b3b      	cmp	r3, #59	; 0x3b
 8008c68:	f240 8168 	bls.w	8008f3c <switch_change_alarm+0x380>
 8008c6c:	4b88      	ldr	r3, [pc, #544]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	705a      	strb	r2, [r3, #1]
		break;
 8008c72:	e163      	b.n	8008f3c <switch_change_alarm+0x380>
	    case DAYWEEK_ALARM:
		if (Alarm.AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_WEEKDAY)
 8008c74:	4b86      	ldr	r3, [pc, #536]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7c:	d14a      	bne.n	8008d14 <switch_change_alarm+0x158>
		    {
			//dodać zeby wyświetlało także dany dzień tygodnia w tym przypadku
			if(add_subb == true)Alarm.AlarmDateWeekDay--;
 8008c7e:	79bb      	ldrb	r3, [r7, #6]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d008      	beq.n	8008c96 <switch_change_alarm+0xda>
 8008c84:	4b82      	ldr	r3, [pc, #520]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	4b80      	ldr	r3, [pc, #512]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008c94:	e007      	b.n	8008ca6 <switch_change_alarm+0xea>
			else Alarm.AlarmDateWeekDay++;
 8008c96:	4b7e      	ldr	r3, [pc, #504]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	4b7b      	ldr	r3, [pc, #492]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if(Alarm.AlarmDateWeekDay == UINT8_MAX) Alarm.AlarmDateWeekDay = 7;
 8008ca6:	4b7a      	ldr	r3, [pc, #488]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cac:	2bff      	cmp	r3, #255	; 0xff
 8008cae:	d103      	bne.n	8008cb8 <switch_change_alarm+0xfc>
 8008cb0:	4b77      	ldr	r3, [pc, #476]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008cb2:	2207      	movs	r2, #7
 8008cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (IS_RTC_WEEKDAY(Alarm.AlarmDateWeekDay)!= true) Alarm.AlarmDateWeekDay = 0x00;
 8008cb8:	4b75      	ldr	r3, [pc, #468]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d01d      	beq.n	8008cfe <switch_change_alarm+0x142>
 8008cc2:	4b73      	ldr	r3, [pc, #460]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d018      	beq.n	8008cfe <switch_change_alarm+0x142>
 8008ccc:	4b70      	ldr	r3, [pc, #448]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d013      	beq.n	8008cfe <switch_change_alarm+0x142>
 8008cd6:	4b6e      	ldr	r3, [pc, #440]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d00e      	beq.n	8008cfe <switch_change_alarm+0x142>
 8008ce0:	4b6b      	ldr	r3, [pc, #428]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ce6:	2b05      	cmp	r3, #5
 8008ce8:	d009      	beq.n	8008cfe <switch_change_alarm+0x142>
 8008cea:	4b69      	ldr	r3, [pc, #420]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf0:	2b06      	cmp	r3, #6
 8008cf2:	d004      	beq.n	8008cfe <switch_change_alarm+0x142>
 8008cf4:	4b66      	ldr	r3, [pc, #408]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cfa:	2b07      	cmp	r3, #7
 8008cfc:	d101      	bne.n	8008d02 <switch_change_alarm+0x146>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <switch_change_alarm+0x148>
 8008d02:	2300      	movs	r3, #0
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	f000 811b 	beq.w	8008f40 <switch_change_alarm+0x384>
 8008d0a:	4b61      	ldr	r3, [pc, #388]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (add_subb == true)Alarm.AlarmDateWeekDay--;
			else Alarm.AlarmDateWeekDay++;
			if (Alarm.AlarmDateWeekDay == UINT8_MAX)Alarm.AlarmDateWeekDay = 31;
			if (IS_RTC_DATE(Alarm.AlarmDateWeekDay) != true)Alarm.AlarmDateWeekDay = 0x00;
		    }
		break;
 8008d12:	e115      	b.n	8008f40 <switch_change_alarm+0x384>
		else if(Alarm.AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE )
 8008d14:	4b5e      	ldr	r3, [pc, #376]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 8111 	bne.w	8008f40 <switch_change_alarm+0x384>
			if (add_subb == true)Alarm.AlarmDateWeekDay--;
 8008d1e:	79bb      	ldrb	r3, [r7, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d008      	beq.n	8008d36 <switch_change_alarm+0x17a>
 8008d24:	4b5a      	ldr	r3, [pc, #360]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	4b58      	ldr	r3, [pc, #352]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008d34:	e007      	b.n	8008d46 <switch_change_alarm+0x18a>
			else Alarm.AlarmDateWeekDay++;
 8008d36:	4b56      	ldr	r3, [pc, #344]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	4b53      	ldr	r3, [pc, #332]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (Alarm.AlarmDateWeekDay == UINT8_MAX)Alarm.AlarmDateWeekDay = 31;
 8008d46:	4b52      	ldr	r3, [pc, #328]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d4c:	2bff      	cmp	r3, #255	; 0xff
 8008d4e:	d103      	bne.n	8008d58 <switch_change_alarm+0x19c>
 8008d50:	4b4f      	ldr	r3, [pc, #316]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d52:	221f      	movs	r2, #31
 8008d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			if (IS_RTC_DATE(Alarm.AlarmDateWeekDay) != true)Alarm.AlarmDateWeekDay = 0x00;
 8008d58:	4b4d      	ldr	r3, [pc, #308]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d006      	beq.n	8008d70 <switch_change_alarm+0x1b4>
 8008d62:	4b4b      	ldr	r3, [pc, #300]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d68:	2b1f      	cmp	r3, #31
 8008d6a:	d801      	bhi.n	8008d70 <switch_change_alarm+0x1b4>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e000      	b.n	8008d72 <switch_change_alarm+0x1b6>
 8008d70:	2300      	movs	r3, #0
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	f000 80e4 	beq.w	8008f40 <switch_change_alarm+0x384>
 8008d78:	4b45      	ldr	r3, [pc, #276]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 8008d80:	e0de      	b.n	8008f40 <switch_change_alarm+0x384>
	    case MODE_ALARM:
		if(add_subb == true)RTC_typeOfAlarm++;
 8008d82:	79bb      	ldrb	r3, [r7, #6]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <switch_change_alarm+0x1da>
 8008d88:	4b42      	ldr	r3, [pc, #264]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	4b40      	ldr	r3, [pc, #256]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008d92:	701a      	strb	r2, [r3, #0]
 8008d94:	e005      	b.n	8008da2 <switch_change_alarm+0x1e6>
		else RTC_typeOfAlarm--;
 8008d96:	4b3f      	ldr	r3, [pc, #252]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	4b3d      	ldr	r3, [pc, #244]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008da0:	701a      	strb	r2, [r3, #0]
		if (RTC_typeOfAlarm == UINT8_MAX)RTC_typeOfAlarm = 1; //przepełnienie
 8008da2:	4b3c      	ldr	r3, [pc, #240]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2bff      	cmp	r3, #255	; 0xff
 8008da8:	d103      	bne.n	8008db2 <switch_change_alarm+0x1f6>
 8008daa:	4b3a      	ldr	r3, [pc, #232]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008dac:	2201      	movs	r2, #1
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e006      	b.n	8008dc0 <switch_change_alarm+0x204>
		else if(RTC_typeOfAlarm == 6)RTC_typeOfAlarm = 1;
 8008db2:	4b38      	ldr	r3, [pc, #224]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b06      	cmp	r3, #6
 8008db8:	d102      	bne.n	8008dc0 <switch_change_alarm+0x204>
 8008dba:	4b36      	ldr	r3, [pc, #216]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]
		if((RTC_typeOfAlarm == ONLY_WEEKENDS_ALARM) || (RTC_typeOfAlarm == MON_to_FRI_ALARM))
 8008dc0:	4b34      	ldr	r3, [pc, #208]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d003      	beq.n	8008dd0 <switch_change_alarm+0x214>
 8008dc8:	4b32      	ldr	r3, [pc, #200]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d104      	bne.n	8008dda <switch_change_alarm+0x21e>
		    Alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8008dd0:	4b2f      	ldr	r3, [pc, #188]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008dd6:	625a      	str	r2, [r3, #36]	; 0x24
 8008dd8:	e002      	b.n	8008de0 <switch_change_alarm+0x224>
		else Alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8008dda:	4b2d      	ldr	r3, [pc, #180]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	625a      	str	r2, [r3, #36]	; 0x24
		if(RTC_typeOfAlarm == EXACT_DATE_ALRAM)Alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8008de0:	4b2c      	ldr	r3, [pc, #176]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b05      	cmp	r3, #5
 8008de6:	d103      	bne.n	8008df0 <switch_change_alarm+0x234>
 8008de8:	4b29      	ldr	r3, [pc, #164]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	615a      	str	r2, [r3, #20]
		else Alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
		break;
 8008dee:	e0aa      	b.n	8008f46 <switch_change_alarm+0x38a>
		else Alarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8008df0:	4b27      	ldr	r3, [pc, #156]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008df2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008df6:	615a      	str	r2, [r3, #20]
		break;
 8008df8:	e0a5      	b.n	8008f46 <switch_change_alarm+0x38a>
	    case SET_ALARM:
		if(add_subb == false)      // button down  alarm_set_A_or_B - true - alarm A, false - alarm B
 8008dfa:	79bb      	ldrb	r3, [r7, #6]
 8008dfc:	f083 0301 	eor.w	r3, r3, #1
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <switch_change_alarm+0x262>
		    {
			if(alarm_set_A_or_B == true)alarm_set_A_or_B = false; //dać enum false pierwszy i dać alarm_a
 8008e06:	4b24      	ldr	r3, [pc, #144]	; (8008e98 <switch_change_alarm+0x2dc>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <switch_change_alarm+0x25a>
 8008e0e:	4b22      	ldr	r3, [pc, #136]	; (8008e98 <switch_change_alarm+0x2dc>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	701a      	strb	r2, [r3, #0]
					HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);
					IS_ALARM_SET_B = false;
				    }
			    }
		    }
		break;
 8008e14:	e096      	b.n	8008f44 <switch_change_alarm+0x388>
			else alarm_set_A_or_B = true;
 8008e16:	4b20      	ldr	r3, [pc, #128]	; (8008e98 <switch_change_alarm+0x2dc>)
 8008e18:	2201      	movs	r2, #1
 8008e1a:	701a      	strb	r2, [r3, #0]
		break;
 8008e1c:	e092      	b.n	8008f44 <switch_change_alarm+0x388>
		else if (add_subb == true) //button up
 8008e1e:	79bb      	ldrb	r3, [r7, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 808f 	beq.w	8008f44 <switch_change_alarm+0x388>
			if (alarm_set_A_or_B == true)
 8008e26:	4b1c      	ldr	r3, [pc, #112]	; (8008e98 <switch_change_alarm+0x2dc>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d03e      	beq.n	8008eac <switch_change_alarm+0x2f0>
				if (IS_ALARM_SET_A == false) //if alarm is set FLAG then deactive by pressing this button
 8008e2e:	4b1b      	ldr	r3, [pc, #108]	; (8008e9c <switch_change_alarm+0x2e0>)
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	f083 0301 	eor.w	r3, r3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01c      	beq.n	8008e76 <switch_change_alarm+0x2ba>
					Alarm_A = Alarm;
 8008e3c:	4a18      	ldr	r2, [pc, #96]	; (8008ea0 <switch_change_alarm+0x2e4>)
 8008e3e:	4b14      	ldr	r3, [pc, #80]	; (8008e90 <switch_change_alarm+0x2d4>)
 8008e40:	4614      	mov	r4, r2
 8008e42:	461d      	mov	r5, r3
 8008e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Alarm_A.Alarm = RTC_ALARM_A;
 8008e54:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <switch_change_alarm+0x2e4>)
 8008e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e5a:	62da      	str	r2, [r3, #44]	; 0x2c
					RTC_typeOfAlarm_A = RTC_typeOfAlarm;
 8008e5c:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <switch_change_alarm+0x2d8>)
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <switch_change_alarm+0x2e8>)
 8008e62:	701a      	strb	r2, [r3, #0]
					HAL_RTC_SetAlarm_IT(&hrtc, &Alarm_A, RTC_FORMAT_BIN);
 8008e64:	2200      	movs	r2, #0
 8008e66:	490e      	ldr	r1, [pc, #56]	; (8008ea0 <switch_change_alarm+0x2e4>)
 8008e68:	480f      	ldr	r0, [pc, #60]	; (8008ea8 <switch_change_alarm+0x2ec>)
 8008e6a:	f009 fe4f 	bl	8012b0c <HAL_RTC_SetAlarm_IT>
					IS_ALARM_SET_A = true;
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <switch_change_alarm+0x2e0>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	701a      	strb	r2, [r3, #0]
		break;
 8008e74:	e066      	b.n	8008f44 <switch_change_alarm+0x388>
				else if (IS_ALARM_SET_A == true)
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <switch_change_alarm+0x2e0>)
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d062      	beq.n	8008f44 <switch_change_alarm+0x388>
					HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8008e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e82:	4809      	ldr	r0, [pc, #36]	; (8008ea8 <switch_change_alarm+0x2ec>)
 8008e84:	f009 ff3a 	bl	8012cfc <HAL_RTC_DeactivateAlarm>
					IS_ALARM_SET_A = false;
 8008e88:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <switch_change_alarm+0x2e0>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
		break;
 8008e8e:	e059      	b.n	8008f44 <switch_change_alarm+0x388>
 8008e90:	2000074c 	.word	0x2000074c
 8008e94:	2000050c 	.word	0x2000050c
 8008e98:	200000a4 	.word	0x200000a4
 8008e9c:	200002ae 	.word	0x200002ae
 8008ea0:	20000718 	.word	0x20000718
 8008ea4:	20000508 	.word	0x20000508
 8008ea8:	20007828 	.word	0x20007828
			else if (alarm_set_A_or_B == false)
 8008eac:	4b28      	ldr	r3, [pc, #160]	; (8008f50 <switch_change_alarm+0x394>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f083 0301 	eor.w	r3, r3, #1
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d044      	beq.n	8008f44 <switch_change_alarm+0x388>
				if (IS_ALARM_SET_B == false) //if alarm is set FLAG then deactive by pressing this button
 8008eba:	4b26      	ldr	r3, [pc, #152]	; (8008f54 <switch_change_alarm+0x398>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	f083 0301 	eor.w	r3, r3, #1
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01c      	beq.n	8008f02 <switch_change_alarm+0x346>
					Alarm_B = Alarm;
 8008ec8:	4a23      	ldr	r2, [pc, #140]	; (8008f58 <switch_change_alarm+0x39c>)
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <switch_change_alarm+0x3a0>)
 8008ecc:	4614      	mov	r4, r2
 8008ece:	461d      	mov	r5, r3
 8008ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008edc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Alarm_B.Alarm = RTC_ALARM_B;
 8008ee0:	4b1d      	ldr	r3, [pc, #116]	; (8008f58 <switch_change_alarm+0x39c>)
 8008ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ee6:	62da      	str	r2, [r3, #44]	; 0x2c
					RTC_typeOfAlarm_B = RTC_typeOfAlarm;
 8008ee8:	4b1d      	ldr	r3, [pc, #116]	; (8008f60 <switch_change_alarm+0x3a4>)
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	4b1d      	ldr	r3, [pc, #116]	; (8008f64 <switch_change_alarm+0x3a8>)
 8008eee:	701a      	strb	r2, [r3, #0]
					HAL_RTC_SetAlarm_IT(&hrtc, &Alarm_B, RTC_FORMAT_BIN);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	4919      	ldr	r1, [pc, #100]	; (8008f58 <switch_change_alarm+0x39c>)
 8008ef4:	481c      	ldr	r0, [pc, #112]	; (8008f68 <switch_change_alarm+0x3ac>)
 8008ef6:	f009 fe09 	bl	8012b0c <HAL_RTC_SetAlarm_IT>
					IS_ALARM_SET_B = true;
 8008efa:	4b16      	ldr	r3, [pc, #88]	; (8008f54 <switch_change_alarm+0x398>)
 8008efc:	2201      	movs	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
		break;
 8008f00:	e020      	b.n	8008f44 <switch_change_alarm+0x388>
				else if (IS_ALARM_SET_B == true)
 8008f02:	4b14      	ldr	r3, [pc, #80]	; (8008f54 <switch_change_alarm+0x398>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01c      	beq.n	8008f44 <switch_change_alarm+0x388>
					HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);
 8008f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f0e:	4816      	ldr	r0, [pc, #88]	; (8008f68 <switch_change_alarm+0x3ac>)
 8008f10:	f009 fef4 	bl	8012cfc <HAL_RTC_DeactivateAlarm>
					IS_ALARM_SET_B = false;
 8008f14:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <switch_change_alarm+0x398>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
		break;
 8008f1a:	e013      	b.n	8008f44 <switch_change_alarm+0x388>
	    case PREVIEW_ALARM:
		//zmienianie flagi ekarnu
		if(PreviewAlarm == true)PreviewAlarm = false;
 8008f1c:	4b13      	ldr	r3, [pc, #76]	; (8008f6c <switch_change_alarm+0x3b0>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <switch_change_alarm+0x370>
 8008f24:	4b11      	ldr	r3, [pc, #68]	; (8008f6c <switch_change_alarm+0x3b0>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	701a      	strb	r2, [r3, #0]
		else PreviewAlarm = true;
		break;
 8008f2a:	e00c      	b.n	8008f46 <switch_change_alarm+0x38a>
		else PreviewAlarm = true;
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <switch_change_alarm+0x3b0>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	701a      	strb	r2, [r3, #0]
		break;
 8008f32:	e008      	b.n	8008f46 <switch_change_alarm+0x38a>
	    default:
		break;
 8008f34:	bf00      	nop
 8008f36:	e006      	b.n	8008f46 <switch_change_alarm+0x38a>
		break;
 8008f38:	bf00      	nop
 8008f3a:	e004      	b.n	8008f46 <switch_change_alarm+0x38a>
		break;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <switch_change_alarm+0x38a>
		break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <switch_change_alarm+0x38a>
		break;
 8008f44:	bf00      	nop
	    }
    }
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	200000a4 	.word	0x200000a4
 8008f54:	200004f6 	.word	0x200004f6
 8008f58:	200077c8 	.word	0x200077c8
 8008f5c:	2000074c 	.word	0x2000074c
 8008f60:	2000050c 	.word	0x2000050c
 8008f64:	2000050b 	.word	0x2000050b
 8008f68:	20007828 	.word	0x20007828
 8008f6c:	200000a5 	.word	0x200000a5

08008f70 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	; 0x28
 8008f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008f76:	f107 031c 	add.w	r3, r7, #28
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	605a      	str	r2, [r3, #4]
 8008f80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008f82:	1d3b      	adds	r3, r7, #4
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	605a      	str	r2, [r3, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
 8008f8c:	60da      	str	r2, [r3, #12]
 8008f8e:	611a      	str	r2, [r3, #16]
 8008f90:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8008f92:	4b2f      	ldr	r3, [pc, #188]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008f94:	4a2f      	ldr	r2, [pc, #188]	; (8009054 <MX_ADC1_Init+0xe4>)
 8008f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008f98:	4b2d      	ldr	r3, [pc, #180]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008f9e:	4b2c      	ldr	r3, [pc, #176]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008fa4:	4b2a      	ldr	r3, [pc, #168]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008faa:	4b29      	ldr	r3, [pc, #164]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008fb0:	4b27      	ldr	r3, [pc, #156]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fb2:	2204      	movs	r2, #4
 8008fb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008fb6:	4b26      	ldr	r3, [pc, #152]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008fbc:	4b24      	ldr	r3, [pc, #144]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8008fc2:	4b23      	ldr	r3, [pc, #140]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008fc8:	4b21      	ldr	r3, [pc, #132]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008fd0:	4b1f      	ldr	r3, [pc, #124]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008fd6:	4b1e      	ldr	r3, [pc, #120]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008fdc:	4b1c      	ldr	r3, [pc, #112]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8008fea:	4b19      	ldr	r3, [pc, #100]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008ff2:	4817      	ldr	r0, [pc, #92]	; (8009050 <MX_ADC1_Init+0xe0>)
 8008ff4:	f004 f8aa 	bl	800d14c <HAL_ADC_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8008ffe:	f001 f97d 	bl	800a2fc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8009002:	2300      	movs	r3, #0
 8009004:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009006:	f107 031c 	add.w	r3, r7, #28
 800900a:	4619      	mov	r1, r3
 800900c:	4810      	ldr	r0, [pc, #64]	; (8009050 <MX_ADC1_Init+0xe0>)
 800900e:	f005 fba3 	bl	800e758 <HAL_ADCEx_MultiModeConfigChannel>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8009018:	f001 f970 	bl	800a2fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <MX_ADC1_Init+0xe8>)
 800901e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009020:	2306      	movs	r3, #6
 8009022:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009028:	237f      	movs	r3, #127	; 0x7f
 800902a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800902c:	2304      	movs	r3, #4
 800902e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009034:	1d3b      	adds	r3, r7, #4
 8009036:	4619      	mov	r1, r3
 8009038:	4805      	ldr	r0, [pc, #20]	; (8009050 <MX_ADC1_Init+0xe0>)
 800903a:	f004 fd27 	bl	800da8c <HAL_ADC_ConfigChannel>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8009044:	f001 f95a 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009048:	bf00      	nop
 800904a:	3728      	adds	r7, #40	; 0x28
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	200005e0 	.word	0x200005e0
 8009054:	50040000 	.word	0x50040000
 8009058:	cb840000 	.word	0xcb840000

0800905c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009062:	463b      	mov	r3, r7
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	605a      	str	r2, [r3, #4]
 800906a:	609a      	str	r2, [r3, #8]
 800906c:	60da      	str	r2, [r3, #12]
 800906e:	611a      	str	r2, [r3, #16]
 8009070:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8009072:	4b3f      	ldr	r3, [pc, #252]	; (8009170 <MX_ADC2_Init+0x114>)
 8009074:	4a3f      	ldr	r2, [pc, #252]	; (8009174 <MX_ADC2_Init+0x118>)
 8009076:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009078:	4b3d      	ldr	r3, [pc, #244]	; (8009170 <MX_ADC2_Init+0x114>)
 800907a:	2200      	movs	r2, #0
 800907c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800907e:	4b3c      	ldr	r3, [pc, #240]	; (8009170 <MX_ADC2_Init+0x114>)
 8009080:	2200      	movs	r2, #0
 8009082:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009084:	4b3a      	ldr	r3, [pc, #232]	; (8009170 <MX_ADC2_Init+0x114>)
 8009086:	2200      	movs	r2, #0
 8009088:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800908a:	4b39      	ldr	r3, [pc, #228]	; (8009170 <MX_ADC2_Init+0x114>)
 800908c:	2201      	movs	r2, #1
 800908e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009090:	4b37      	ldr	r3, [pc, #220]	; (8009170 <MX_ADC2_Init+0x114>)
 8009092:	2204      	movs	r2, #4
 8009094:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8009096:	4b36      	ldr	r3, [pc, #216]	; (8009170 <MX_ADC2_Init+0x114>)
 8009098:	2200      	movs	r2, #0
 800909a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800909c:	4b34      	ldr	r3, [pc, #208]	; (8009170 <MX_ADC2_Init+0x114>)
 800909e:	2200      	movs	r2, #0
 80090a0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 4;
 80090a2:	4b33      	ldr	r3, [pc, #204]	; (8009170 <MX_ADC2_Init+0x114>)
 80090a4:	2204      	movs	r2, #4
 80090a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80090a8:	4b31      	ldr	r3, [pc, #196]	; (8009170 <MX_ADC2_Init+0x114>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80090b0:	4b2f      	ldr	r3, [pc, #188]	; (8009170 <MX_ADC2_Init+0x114>)
 80090b2:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 80090b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80090b8:	4b2d      	ldr	r3, [pc, #180]	; (8009170 <MX_ADC2_Init+0x114>)
 80090ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80090c0:	4b2b      	ldr	r3, [pc, #172]	; (8009170 <MX_ADC2_Init+0x114>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80090c8:	4b29      	ldr	r3, [pc, #164]	; (8009170 <MX_ADC2_Init+0x114>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80090ce:	4b28      	ldr	r3, [pc, #160]	; (8009170 <MX_ADC2_Init+0x114>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80090d6:	4826      	ldr	r0, [pc, #152]	; (8009170 <MX_ADC2_Init+0x114>)
 80090d8:	f004 f838 	bl	800d14c <HAL_ADC_Init>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80090e2:	f001 f90b 	bl	800a2fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80090e6:	4b24      	ldr	r3, [pc, #144]	; (8009178 <MX_ADC2_Init+0x11c>)
 80090e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80090ea:	2306      	movs	r3, #6
 80090ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80090ee:	2302      	movs	r3, #2
 80090f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80090f2:	237f      	movs	r3, #127	; 0x7f
 80090f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80090f6:	2304      	movs	r3, #4
 80090f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80090fe:	463b      	mov	r3, r7
 8009100:	4619      	mov	r1, r3
 8009102:	481b      	ldr	r0, [pc, #108]	; (8009170 <MX_ADC2_Init+0x114>)
 8009104:	f004 fcc2 	bl	800da8c <HAL_ADC_ConfigChannel>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800910e:	f001 f8f5 	bl	800a2fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8009112:	4b1a      	ldr	r3, [pc, #104]	; (800917c <MX_ADC2_Init+0x120>)
 8009114:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009116:	230c      	movs	r3, #12
 8009118:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800911a:	463b      	mov	r3, r7
 800911c:	4619      	mov	r1, r3
 800911e:	4814      	ldr	r0, [pc, #80]	; (8009170 <MX_ADC2_Init+0x114>)
 8009120:	f004 fcb4 	bl	800da8c <HAL_ADC_ConfigChannel>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800912a:	f001 f8e7 	bl	800a2fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <MX_ADC2_Init+0x124>)
 8009130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009132:	2312      	movs	r3, #18
 8009134:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009136:	463b      	mov	r3, r7
 8009138:	4619      	mov	r1, r3
 800913a:	480d      	ldr	r0, [pc, #52]	; (8009170 <MX_ADC2_Init+0x114>)
 800913c:	f004 fca6 	bl	800da8c <HAL_ADC_ConfigChannel>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8009146:	f001 f8d9 	bl	800a2fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800914a:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <MX_ADC2_Init+0x128>)
 800914c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800914e:	2318      	movs	r3, #24
 8009150:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009152:	463b      	mov	r3, r7
 8009154:	4619      	mov	r1, r3
 8009156:	4806      	ldr	r0, [pc, #24]	; (8009170 <MX_ADC2_Init+0x114>)
 8009158:	f004 fc98 	bl	800da8c <HAL_ADC_ConfigChannel>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8009162:	f001 f8cb 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8009166:	bf00      	nop
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000578 	.word	0x20000578
 8009174:	50040100 	.word	0x50040100
 8009178:	1d500080 	.word	0x1d500080
 800917c:	21800100 	.word	0x21800100
 8009180:	32601000 	.word	0x32601000
 8009184:	36902000 	.word	0x36902000

08009188 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08c      	sub	sp, #48	; 0x30
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009190:	f107 031c 	add.w	r3, r7, #28
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	605a      	str	r2, [r3, #4]
 800919a:	609a      	str	r2, [r3, #8]
 800919c:	60da      	str	r2, [r3, #12]
 800919e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a49      	ldr	r2, [pc, #292]	; (80092cc <HAL_ADC_MspInit+0x144>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d116      	bne.n	80091d8 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80091aa:	4b49      	ldr	r3, [pc, #292]	; (80092d0 <HAL_ADC_MspInit+0x148>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	3301      	adds	r3, #1
 80091b0:	4a47      	ldr	r2, [pc, #284]	; (80092d0 <HAL_ADC_MspInit+0x148>)
 80091b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80091b4:	4b46      	ldr	r3, [pc, #280]	; (80092d0 <HAL_ADC_MspInit+0x148>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	f040 8083 	bne.w	80092c4 <HAL_ADC_MspInit+0x13c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80091be:	4b45      	ldr	r3, [pc, #276]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 80091c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c2:	4a44      	ldr	r2, [pc, #272]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 80091c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091ca:	4b42      	ldr	r3, [pc, #264]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 80091cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091d2:	61bb      	str	r3, [r7, #24]
 80091d4:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80091d6:	e075      	b.n	80092c4 <HAL_ADC_MspInit+0x13c>
  else if(adcHandle->Instance==ADC2)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a3e      	ldr	r2, [pc, #248]	; (80092d8 <HAL_ADC_MspInit+0x150>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d170      	bne.n	80092c4 <HAL_ADC_MspInit+0x13c>
    HAL_RCC_ADC_CLK_ENABLED++;
 80091e2:	4b3b      	ldr	r3, [pc, #236]	; (80092d0 <HAL_ADC_MspInit+0x148>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3301      	adds	r3, #1
 80091e8:	4a39      	ldr	r2, [pc, #228]	; (80092d0 <HAL_ADC_MspInit+0x148>)
 80091ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80091ec:	4b38      	ldr	r3, [pc, #224]	; (80092d0 <HAL_ADC_MspInit+0x148>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d10b      	bne.n	800920c <HAL_ADC_MspInit+0x84>
      __HAL_RCC_ADC_CLK_ENABLE();
 80091f4:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 80091f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f8:	4a36      	ldr	r2, [pc, #216]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 80091fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009200:	4b34      	ldr	r3, [pc, #208]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 8009202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009208:	617b      	str	r3, [r7, #20]
 800920a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800920c:	4b31      	ldr	r3, [pc, #196]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 800920e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009210:	4a30      	ldr	r2, [pc, #192]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 8009212:	f043 0301 	orr.w	r3, r3, #1
 8009216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009218:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 800921a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	613b      	str	r3, [r7, #16]
 8009222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009224:	4b2b      	ldr	r3, [pc, #172]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 8009226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009228:	4a2a      	ldr	r2, [pc, #168]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 800922a:	f043 0304 	orr.w	r3, r3, #4
 800922e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009230:	4b28      	ldr	r3, [pc, #160]	; (80092d4 <HAL_ADC_MspInit+0x14c>)
 8009232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009234:	f003 0304 	and.w	r3, r3, #4
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 800923c:	238c      	movs	r3, #140	; 0x8c
 800923e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8009240:	230b      	movs	r3, #11
 8009242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009244:	2300      	movs	r3, #0
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009248:	f107 031c 	add.w	r3, r7, #28
 800924c:	4619      	mov	r1, r3
 800924e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009252:	f006 f935 	bl	800f4c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009256:	2310      	movs	r3, #16
 8009258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800925a:	230b      	movs	r3, #11
 800925c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800925e:	2300      	movs	r3, #0
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009262:	f107 031c 	add.w	r3, r7, #28
 8009266:	4619      	mov	r1, r3
 8009268:	481c      	ldr	r0, [pc, #112]	; (80092dc <HAL_ADC_MspInit+0x154>)
 800926a:	f006 f929 	bl	800f4c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 800926e:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 8009270:	4a1c      	ldr	r2, [pc, #112]	; (80092e4 <HAL_ADC_MspInit+0x15c>)
 8009272:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8009274:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 8009276:	2206      	movs	r2, #6
 8009278:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800927a:	4b19      	ldr	r3, [pc, #100]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 800927c:	2200      	movs	r2, #0
 800927e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8009280:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 8009282:	2200      	movs	r2, #0
 8009284:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8009286:	4b16      	ldr	r3, [pc, #88]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 8009288:	2280      	movs	r2, #128	; 0x80
 800928a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800928c:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 800928e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009292:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009294:	4b12      	ldr	r3, [pc, #72]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 8009296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800929a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800929c:	4b10      	ldr	r3, [pc, #64]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 800929e:	2220      	movs	r2, #32
 80092a0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80092a2:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80092a8:	480d      	ldr	r0, [pc, #52]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 80092aa:	f005 fddb 	bl	800ee64 <HAL_DMA_Init>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80092b4:	f001 f822 	bl	800a2fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 80092bc:	651a      	str	r2, [r3, #80]	; 0x50
 80092be:	4a08      	ldr	r2, [pc, #32]	; (80092e0 <HAL_ADC_MspInit+0x158>)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80092c4:	bf00      	nop
 80092c6:	3730      	adds	r7, #48	; 0x30
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	50040000 	.word	0x50040000
 80092d0:	200001e4 	.word	0x200001e4
 80092d4:	40021000 	.word	0x40021000
 80092d8:	50040100 	.word	0x50040100
 80092dc:	48000800 	.word	0x48000800
 80092e0:	20000648 	.word	0x20000648
 80092e4:	40020030 	.word	0x40020030

080092e8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	; 0x28
 80092ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80092ee:	463b      	mov	r3, r7
 80092f0:	2228      	movs	r2, #40	; 0x28
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f00c fc83 	bl	8015c00 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80092fa:	4b17      	ldr	r3, [pc, #92]	; (8009358 <MX_DAC1_Init+0x70>)
 80092fc:	4a17      	ldr	r2, [pc, #92]	; (800935c <MX_DAC1_Init+0x74>)
 80092fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8009300:	4815      	ldr	r0, [pc, #84]	; (8009358 <MX_DAC1_Init+0x70>)
 8009302:	f005 fbde 	bl	800eac2 <HAL_DAC_Init>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800930c:	f000 fff6 	bl	800a2fc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8009310:	2300      	movs	r3, #0
 8009312:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8009314:	2300      	movs	r3, #0
 8009316:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800931c:	2300      	movs	r3, #0
 800931e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009324:	463b      	mov	r3, r7
 8009326:	2200      	movs	r2, #0
 8009328:	4619      	mov	r1, r3
 800932a:	480b      	ldr	r0, [pc, #44]	; (8009358 <MX_DAC1_Init+0x70>)
 800932c:	f005 fc50 	bl	800ebd0 <HAL_DAC_ConfigChannel>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8009336:	f000 ffe1 	bl	800a2fc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800933a:	463b      	mov	r3, r7
 800933c:	2210      	movs	r2, #16
 800933e:	4619      	mov	r1, r3
 8009340:	4805      	ldr	r0, [pc, #20]	; (8009358 <MX_DAC1_Init+0x70>)
 8009342:	f005 fc45 	bl	800ebd0 <HAL_DAC_ConfigChannel>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800934c:	f000 ffd6 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8009350:	bf00      	nop
 8009352:	3728      	adds	r7, #40	; 0x28
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	200006a8 	.word	0x200006a8
 800935c:	40007400 	.word	0x40007400

08009360 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	; 0x28
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009368:	f107 0314 	add.w	r3, r7, #20
 800936c:	2200      	movs	r2, #0
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	605a      	str	r2, [r3, #4]
 8009372:	609a      	str	r2, [r3, #8]
 8009374:	60da      	str	r2, [r3, #12]
 8009376:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <HAL_DAC_MspInit+0x74>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d124      	bne.n	80093cc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <HAL_DAC_MspInit+0x78>)
 8009384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009386:	4a14      	ldr	r2, [pc, #80]	; (80093d8 <HAL_DAC_MspInit+0x78>)
 8009388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800938c:	6593      	str	r3, [r2, #88]	; 0x58
 800938e:	4b12      	ldr	r3, [pc, #72]	; (80093d8 <HAL_DAC_MspInit+0x78>)
 8009390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800939a:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <HAL_DAC_MspInit+0x78>)
 800939c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800939e:	4a0e      	ldr	r2, [pc, #56]	; (80093d8 <HAL_DAC_MspInit+0x78>)
 80093a0:	f043 0301 	orr.w	r3, r3, #1
 80093a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <HAL_DAC_MspInit+0x78>)
 80093a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80093b2:	2330      	movs	r3, #48	; 0x30
 80093b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80093b6:	2303      	movs	r3, #3
 80093b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093be:	f107 0314 	add.w	r3, r7, #20
 80093c2:	4619      	mov	r1, r3
 80093c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80093c8:	f006 f87a 	bl	800f4c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80093cc:	bf00      	nop
 80093ce:	3728      	adds	r7, #40	; 0x28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	40007400 	.word	0x40007400
 80093d8:	40021000 	.word	0x40021000

080093dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <MX_DMA_Init+0x44>)
 80093e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e6:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <MX_DMA_Init+0x44>)
 80093e8:	f043 0304 	orr.w	r3, r3, #4
 80093ec:	6493      	str	r3, [r2, #72]	; 0x48
 80093ee:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <MX_DMA_Init+0x44>)
 80093f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	607b      	str	r3, [r7, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80093fa:	4b09      	ldr	r3, [pc, #36]	; (8009420 <MX_DMA_Init+0x44>)
 80093fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fe:	4a08      	ldr	r2, [pc, #32]	; (8009420 <MX_DMA_Init+0x44>)
 8009400:	f043 0301 	orr.w	r3, r3, #1
 8009404:	6493      	str	r3, [r2, #72]	; 0x48
 8009406:	4b06      	ldr	r3, [pc, #24]	; (8009420 <MX_DMA_Init+0x44>)
 8009408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	603b      	str	r3, [r7, #0]
 8009410:	683b      	ldr	r3, [r7, #0]

}
 8009412:	bf00      	nop
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40021000 	.word	0x40021000

08009424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	; 0x28
 8009428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800942a:	f107 0314 	add.w	r3, r7, #20
 800942e:	2200      	movs	r2, #0
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	605a      	str	r2, [r3, #4]
 8009434:	609a      	str	r2, [r3, #8]
 8009436:	60da      	str	r2, [r3, #12]
 8009438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800943a:	4b50      	ldr	r3, [pc, #320]	; (800957c <MX_GPIO_Init+0x158>)
 800943c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943e:	4a4f      	ldr	r2, [pc, #316]	; (800957c <MX_GPIO_Init+0x158>)
 8009440:	f043 0304 	orr.w	r3, r3, #4
 8009444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009446:	4b4d      	ldr	r3, [pc, #308]	; (800957c <MX_GPIO_Init+0x158>)
 8009448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944a:	f003 0304 	and.w	r3, r3, #4
 800944e:	613b      	str	r3, [r7, #16]
 8009450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009452:	4b4a      	ldr	r3, [pc, #296]	; (800957c <MX_GPIO_Init+0x158>)
 8009454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009456:	4a49      	ldr	r2, [pc, #292]	; (800957c <MX_GPIO_Init+0x158>)
 8009458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800945e:	4b47      	ldr	r3, [pc, #284]	; (800957c <MX_GPIO_Init+0x158>)
 8009460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800946a:	4b44      	ldr	r3, [pc, #272]	; (800957c <MX_GPIO_Init+0x158>)
 800946c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946e:	4a43      	ldr	r2, [pc, #268]	; (800957c <MX_GPIO_Init+0x158>)
 8009470:	f043 0301 	orr.w	r3, r3, #1
 8009474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009476:	4b41      	ldr	r3, [pc, #260]	; (800957c <MX_GPIO_Init+0x158>)
 8009478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	60bb      	str	r3, [r7, #8]
 8009480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009482:	4b3e      	ldr	r3, [pc, #248]	; (800957c <MX_GPIO_Init+0x158>)
 8009484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009486:	4a3d      	ldr	r2, [pc, #244]	; (800957c <MX_GPIO_Init+0x158>)
 8009488:	f043 0302 	orr.w	r3, r3, #2
 800948c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800948e:	4b3b      	ldr	r3, [pc, #236]	; (800957c <MX_GPIO_Init+0x158>)
 8009490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	607b      	str	r3, [r7, #4]
 8009498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI5_RESET_Pin|SPI5_DC_Pin|SPI5_CS_Pin, GPIO_PIN_RESET);
 800949a:	2200      	movs	r2, #0
 800949c:	f24c 0104 	movw	r1, #49156	; 0xc004
 80094a0:	4837      	ldr	r0, [pc, #220]	; (8009580 <MX_GPIO_Init+0x15c>)
 80094a2:	f006 f9b7 	bl	800f814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80094a6:	2200      	movs	r2, #0
 80094a8:	2108      	movs	r1, #8
 80094aa:	4836      	ldr	r0, [pc, #216]	; (8009584 <MX_GPIO_Init+0x160>)
 80094ac:	f006 f9b2 	bl	800f814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SPI5_RESET_Pin|SPI5_DC_Pin|SPI5_CS_Pin;
 80094b0:	f24c 0304 	movw	r3, #49156	; 0xc004
 80094b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094b6:	2301      	movs	r3, #1
 80094b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094be:	2300      	movs	r3, #0
 80094c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094c2:	f107 0314 	add.w	r3, r7, #20
 80094c6:	4619      	mov	r1, r3
 80094c8:	482d      	ldr	r0, [pc, #180]	; (8009580 <MX_GPIO_Init+0x15c>)
 80094ca:	f005 fff9 	bl	800f4c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_1_Pin;
 80094ce:	2320      	movs	r3, #32
 80094d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80094d2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80094d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d8:	2300      	movs	r3, #0
 80094da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 80094dc:	f107 0314 	add.w	r3, r7, #20
 80094e0:	4619      	mov	r1, r3
 80094e2:	4827      	ldr	r0, [pc, #156]	; (8009580 <MX_GPIO_Init+0x15c>)
 80094e4:	f005 ffec 	bl	800f4c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = USER_BUTTON_2_Pin|USER_BUTTON_3_Pin|USER_BUTTON_4_Pin;
 80094e8:	2307      	movs	r3, #7
 80094ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80094ec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80094f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094f6:	f107 0314 	add.w	r3, r7, #20
 80094fa:	4619      	mov	r1, r3
 80094fc:	4822      	ldr	r0, [pc, #136]	; (8009588 <MX_GPIO_Init+0x164>)
 80094fe:	f005 ffdf 	bl	800f4c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_BUTTON_Pin;
 8009502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009508:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800950c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800950e:	2301      	movs	r3, #1
 8009510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8009512:	f107 0314 	add.w	r3, r7, #20
 8009516:	4619      	mov	r1, r3
 8009518:	481b      	ldr	r0, [pc, #108]	; (8009588 <MX_GPIO_Init+0x164>)
 800951a:	f005 ffd1 	bl	800f4c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_VOLUME_FRONT_Pin|ENCODER_BUTTON_VOLUME_BACK_Pin;
 800951e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8009522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009524:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800952a:	2301      	movs	r3, #1
 800952c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800952e:	f107 0314 	add.w	r3, r7, #20
 8009532:	4619      	mov	r1, r3
 8009534:	4814      	ldr	r0, [pc, #80]	; (8009588 <MX_GPIO_Init+0x164>)
 8009536:	f005 ffc3 	bl	800f4c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_BUTTON_LOUDNESS_Pin;
 800953a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800953e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009540:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009546:	2301      	movs	r3, #1
 8009548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_BUTTON_LOUDNESS_GPIO_Port, &GPIO_InitStruct);
 800954a:	f107 0314 	add.w	r3, r7, #20
 800954e:	4619      	mov	r1, r3
 8009550:	480b      	ldr	r0, [pc, #44]	; (8009580 <MX_GPIO_Init+0x15c>)
 8009552:	f005 ffb5 	bl	800f4c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8009556:	2308      	movs	r3, #8
 8009558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800955a:	2301      	movs	r3, #1
 800955c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800955e:	2300      	movs	r3, #0
 8009560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009562:	2300      	movs	r3, #0
 8009564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8009566:	f107 0314 	add.w	r3, r7, #20
 800956a:	4619      	mov	r1, r3
 800956c:	4805      	ldr	r0, [pc, #20]	; (8009584 <MX_GPIO_Init+0x160>)
 800956e:	f005 ffa7 	bl	800f4c0 <HAL_GPIO_Init>

}
 8009572:	bf00      	nop
 8009574:	3728      	adds	r7, #40	; 0x28
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	40021000 	.word	0x40021000
 8009580:	48000800 	.word	0x48000800
 8009584:	48001c00 	.word	0x48001c00
 8009588:	48000400 	.word	0x48000400

0800958c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009590:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <MX_I2C2_Init+0x74>)
 8009592:	4a1c      	ldr	r2, [pc, #112]	; (8009604 <MX_I2C2_Init+0x78>)
 8009594:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8009596:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <MX_I2C2_Init+0x74>)
 8009598:	4a1b      	ldr	r2, [pc, #108]	; (8009608 <MX_I2C2_Init+0x7c>)
 800959a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800959c:	4b18      	ldr	r3, [pc, #96]	; (8009600 <MX_I2C2_Init+0x74>)
 800959e:	2200      	movs	r2, #0
 80095a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095a2:	4b17      	ldr	r3, [pc, #92]	; (8009600 <MX_I2C2_Init+0x74>)
 80095a4:	2201      	movs	r2, #1
 80095a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095a8:	4b15      	ldr	r3, [pc, #84]	; (8009600 <MX_I2C2_Init+0x74>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80095ae:	4b14      	ldr	r3, [pc, #80]	; (8009600 <MX_I2C2_Init+0x74>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80095b4:	4b12      	ldr	r3, [pc, #72]	; (8009600 <MX_I2C2_Init+0x74>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095ba:	4b11      	ldr	r3, [pc, #68]	; (8009600 <MX_I2C2_Init+0x74>)
 80095bc:	2200      	movs	r2, #0
 80095be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095c0:	4b0f      	ldr	r3, [pc, #60]	; (8009600 <MX_I2C2_Init+0x74>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80095c6:	480e      	ldr	r0, [pc, #56]	; (8009600 <MX_I2C2_Init+0x74>)
 80095c8:	f006 f954 	bl	800f874 <HAL_I2C_Init>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80095d2:	f000 fe93 	bl	800a2fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80095d6:	2100      	movs	r1, #0
 80095d8:	4809      	ldr	r0, [pc, #36]	; (8009600 <MX_I2C2_Init+0x74>)
 80095da:	f007 f913 	bl	8010804 <HAL_I2CEx_ConfigAnalogFilter>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80095e4:	f000 fe8a 	bl	800a2fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80095e8:	2100      	movs	r1, #0
 80095ea:	4805      	ldr	r0, [pc, #20]	; (8009600 <MX_I2C2_Init+0x74>)
 80095ec:	f007 f955 	bl	801089a <HAL_I2CEx_ConfigDigitalFilter>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80095f6:	f000 fe81 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80095fa:	bf00      	nop
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	200006bc 	.word	0x200006bc
 8009604:	40005800 	.word	0x40005800
 8009608:	307075b1 	.word	0x307075b1

0800960c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b0b0      	sub	sp, #192	; 0xc0
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009614:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	609a      	str	r2, [r3, #8]
 8009620:	60da      	str	r2, [r3, #12]
 8009622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009624:	f107 0314 	add.w	r3, r7, #20
 8009628:	2298      	movs	r2, #152	; 0x98
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f00c fae7 	bl	8015c00 <memset>
  if(i2cHandle->Instance==I2C2)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a21      	ldr	r2, [pc, #132]	; (80096bc <HAL_I2C_MspInit+0xb0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d13b      	bne.n	80096b4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800963c:	2380      	movs	r3, #128	; 0x80
 800963e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009640:	2300      	movs	r3, #0
 8009642:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009644:	f107 0314 	add.w	r3, r7, #20
 8009648:	4618      	mov	r0, r3
 800964a:	f008 f945 	bl	80118d8 <HAL_RCCEx_PeriphCLKConfig>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009654:	f000 fe52 	bl	800a2fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009658:	4b19      	ldr	r3, [pc, #100]	; (80096c0 <HAL_I2C_MspInit+0xb4>)
 800965a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965c:	4a18      	ldr	r2, [pc, #96]	; (80096c0 <HAL_I2C_MspInit+0xb4>)
 800965e:	f043 0302 	orr.w	r3, r3, #2
 8009662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009664:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <HAL_I2C_MspInit+0xb4>)
 8009666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009668:	f003 0302 	and.w	r3, r3, #2
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8009670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009678:	2312      	movs	r3, #18
 800967a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967e:	2300      	movs	r3, #0
 8009680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009684:	2303      	movs	r3, #3
 8009686:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800968a:	2304      	movs	r3, #4
 800968c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009690:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009694:	4619      	mov	r1, r3
 8009696:	480b      	ldr	r0, [pc, #44]	; (80096c4 <HAL_I2C_MspInit+0xb8>)
 8009698:	f005 ff12 	bl	800f4c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800969c:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <HAL_I2C_MspInit+0xb4>)
 800969e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a0:	4a07      	ldr	r2, [pc, #28]	; (80096c0 <HAL_I2C_MspInit+0xb4>)
 80096a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80096a6:	6593      	str	r3, [r2, #88]	; 0x58
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <HAL_I2C_MspInit+0xb4>)
 80096aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80096b4:	bf00      	nop
 80096b6:	37c0      	adds	r7, #192	; 0xc0
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	40005800 	.word	0x40005800
 80096c0:	40021000 	.word	0x40021000
 80096c4:	48000400 	.word	0x48000400

080096c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80096cc:	f3bf 8f4f 	dsb	sy
}
 80096d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80096d2:	4b06      	ldr	r3, [pc, #24]	; (80096ec <__NVIC_SystemReset+0x24>)
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80096da:	4904      	ldr	r1, [pc, #16]	; (80096ec <__NVIC_SystemReset+0x24>)
 80096dc:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <__NVIC_SystemReset+0x28>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80096e2:	f3bf 8f4f 	dsb	sy
}
 80096e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <__NVIC_SystemReset+0x20>
 80096ec:	e000ed00 	.word	0xe000ed00
 80096f0:	05fa0004 	.word	0x05fa0004

080096f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80096f8:	f003 fa37 	bl	800cb6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80096fc:	f000 f862 	bl	80097c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8009700:	f000 f8b3 	bl	800986a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009704:	f7ff fe8e 	bl	8009424 <MX_GPIO_Init>
  MX_DMA_Init();
 8009708:	f7ff fe68 	bl	80093dc <MX_DMA_Init>
  MX_ADC2_Init();
 800970c:	f7ff fca6 	bl	800905c <MX_ADC2_Init>
  MX_ADC1_Init();
 8009710:	f7ff fc2e 	bl	8008f70 <MX_ADC1_Init>
  MX_DAC1_Init();
 8009714:	f7ff fde8 	bl	80092e8 <MX_DAC1_Init>
  MX_I2C2_Init();
 8009718:	f7ff ff38 	bl	800958c <MX_I2C2_Init>
  MX_RTC_Init();
 800971c:	f000 fe46 	bl	800a3ac <MX_RTC_Init>
  MX_SPI3_Init();
 8009720:	f000 ff22 	bl	800a568 <MX_SPI3_Init>
  MX_TIM1_Init();
 8009724:	f001 f942 	bl	800a9ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8009728:	f001 f99a 	bl	800aa60 <MX_TIM2_Init>
  MX_TIM3_Init();
 800972c:	f001 f9ec 	bl	800ab08 <MX_TIM3_Init>
  MX_TIM5_Init();
 8009730:	f001 fa96 	bl	800ac60 <MX_TIM5_Init>
  MX_TIM6_Init();
 8009734:	f001 faea 	bl	800ad0c <MX_TIM6_Init>
  MX_TIM8_Init();
 8009738:	f001 fb1e 	bl	800ad78 <MX_TIM8_Init>
  MX_TIM15_Init();
 800973c:	f001 fb76 	bl	800ae2c <MX_TIM15_Init>
  MX_TIM16_Init();
 8009740:	f001 fc08 	bl	800af54 <MX_TIM16_Init>
  MX_TIM17_Init();
 8009744:	f001 fc7e 	bl	800b044 <MX_TIM17_Init>
  MX_RNG_Init();
 8009748:	f000 fde0 	bl	800a30c <MX_RNG_Init>
  MX_TIM4_Init();
 800974c:	f001 fa32 	bl	800abb4 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8009750:	f000 f8ba 	bl	80098c8 <MX_NVIC_Init>
	//dodać generowanie sinusoidy z wybieraną HZ
	//zasygnalizować wyłączenie urządzenia
	//przy starcie systemu glośność stopniowo zwiększać
	//możliwość włączania i wyłączania maksymalnie z częstotliwością 0,5s
	//przełączanie przekaźnika z back do słuchawek
	HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_1);
 8009754:	2100      	movs	r1, #0
 8009756:	4815      	ldr	r0, [pc, #84]	; (80097ac <main+0xb8>)
 8009758:	f00a fa08 	bl	8013b6c <HAL_TIM_OC_Start_IT>
	display_init_on_start(DisplayOLEDBuffer);
 800975c:	4814      	ldr	r0, [pc, #80]	; (80097b0 <main+0xbc>)
 800975e:	f7f8 ff7f 	bl	8002660 <display_init_on_start>
	set_init_values();
 8009762:	f000 f9bf 	bl	8009ae4 <set_init_values>
	encoders_init();
 8009766:	f7fd f839 	bl	80067dc <encoders_init>
	TDA7719_init();
 800976a:	f7fd fea1 	bl	80074b0 <TDA7719_init>
	RDA5807_Init();
 800976e:	f7fd fa9f 	bl	8006cb0 <RDA5807_Init>
	RDA5807_PowerOff();
 8009772:	f7fd fadf 	bl	8006d34 <RDA5807_PowerOff>

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8009776:	2201      	movs	r2, #1
 8009778:	2108      	movs	r1, #8
 800977a:	480e      	ldr	r0, [pc, #56]	; (80097b4 <main+0xc0>)
 800977c:	f006 f84a 	bl	800f814 <HAL_GPIO_WritePin>
	// HAL_GPIO_WritePin(CS43L21_RESET_GPIO_Port, CS43L21_RESET_Pin, SET);
	arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);
 8009780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009784:	480c      	ldr	r0, [pc, #48]	; (80097b8 <main+0xc4>)
 8009786:	f7f8 fd85 	bl	8002294 <arm_rfft_fast_init_f32>
	read_user_settings_on_init();
 800978a:	f7fd f807 	bl	800679c <read_user_settings_on_init>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800978e:	2100      	movs	r1, #0
 8009790:	480a      	ldr	r0, [pc, #40]	; (80097bc <main+0xc8>)
 8009792:	f00a fc85 	bl	80140a0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		change_power_led_brigh();
 8009796:	f000 fa6d 	bl	8009c74 <change_power_led_brigh>
		check_FFT_flag(); //if fft flag == 0 then do fft
 800979a:	f000 fc3b 	bl	800a014 <check_FFT_flag>
		//if(refresh_display_time_delay == true)
		Refresh_display(SSD1322_Screen_State);
 800979e:	4b08      	ldr	r3, [pc, #32]	; (80097c0 <main+0xcc>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f9 fb94 	bl	8002ed0 <Refresh_display>
		change_power_led_brigh();
 80097a8:	e7f5      	b.n	8009796 <main+0xa2>
 80097aa:	bf00      	nop
 80097ac:	200079b8 	.word	0x200079b8
 80097b0:	200037bc 	.word	0x200037bc
 80097b4:	48001c00 	.word	0x48001c00
 80097b8:	200037a0 	.word	0x200037a0
 80097bc:	20007bcc 	.word	0x20007bcc
 80097c0:	200004f8 	.word	0x200004f8

080097c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b098      	sub	sp, #96	; 0x60
 80097c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80097ca:	f107 0318 	add.w	r3, r7, #24
 80097ce:	2248      	movs	r2, #72	; 0x48
 80097d0:	2100      	movs	r1, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f00c fa14 	bl	8015c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80097d8:	1d3b      	adds	r3, r7, #4
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	605a      	str	r2, [r3, #4]
 80097e0:	609a      	str	r2, [r3, #8]
 80097e2:	60da      	str	r2, [r3, #12]
 80097e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80097e6:	2000      	movs	r0, #0
 80097e8:	f007 f8c4 	bl	8010974 <HAL_PWREx_ControlVoltageScaling>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80097f2:	f000 fd83 	bl	800a2fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80097f6:	2318      	movs	r3, #24
 80097f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80097fa:	2301      	movs	r3, #1
 80097fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80097fe:	2301      	movs	r3, #1
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009806:	2360      	movs	r3, #96	; 0x60
 8009808:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800980a:	2302      	movs	r3, #2
 800980c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800980e:	2301      	movs	r3, #1
 8009810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009812:	2301      	movs	r3, #1
 8009814:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8009816:	233c      	movs	r3, #60	; 0x3c
 8009818:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800981a:	2302      	movs	r3, #2
 800981c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800981e:	2302      	movs	r3, #2
 8009820:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009822:	2302      	movs	r3, #2
 8009824:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009826:	f107 0318 	add.w	r3, r7, #24
 800982a:	4618      	mov	r0, r3
 800982c:	f007 f946 	bl	8010abc <HAL_RCC_OscConfig>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8009836:	f000 fd61 	bl	800a2fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800983a:	230f      	movs	r3, #15
 800983c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800983e:	2303      	movs	r3, #3
 8009840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009842:	2300      	movs	r3, #0
 8009844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009846:	2300      	movs	r3, #0
 8009848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800984a:	2300      	movs	r3, #0
 800984c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800984e:	1d3b      	adds	r3, r7, #4
 8009850:	2105      	movs	r1, #5
 8009852:	4618      	mov	r0, r3
 8009854:	f007 fdba 	bl	80113cc <HAL_RCC_ClockConfig>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800985e:	f000 fd4d 	bl	800a2fc <Error_Handler>
  }
}
 8009862:	bf00      	nop
 8009864:	3760      	adds	r7, #96	; 0x60
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b0a6      	sub	sp, #152	; 0x98
 800986e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009870:	463b      	mov	r3, r7
 8009872:	2298      	movs	r2, #152	; 0x98
 8009874:	2100      	movs	r1, #0
 8009876:	4618      	mov	r0, r3
 8009878:	f00c f9c2 	bl	8015c00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 800987c:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 8009880:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8009882:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800988a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800988e:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009890:	2301      	movs	r3, #1
 8009892:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009894:	2301      	movs	r3, #1
 8009896:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8009898:	2310      	movs	r3, #16
 800989a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800989c:	2302      	movs	r3, #2
 800989e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80098a0:	2302      	movs	r3, #2
 80098a2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80098a4:	2302      	movs	r3, #2
 80098a6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80098a8:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80098ac:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80098ae:	463b      	mov	r3, r7
 80098b0:	4618      	mov	r0, r3
 80098b2:	f008 f811 	bl	80118d8 <HAL_RCCEx_PeriphCLKConfig>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d001      	beq.n	80098c0 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80098bc:	f000 fd1e 	bl	800a2fc <Error_Handler>
  }
}
 80098c0:	bf00      	nop
 80098c2:	3798      	adds	r7, #152	; 0x98
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80098cc:	2200      	movs	r2, #0
 80098ce:	2105      	movs	r1, #5
 80098d0:	2006      	movs	r0, #6
 80098d2:	f005 f8c0 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80098d6:	2006      	movs	r0, #6
 80098d8:	f005 f8d9 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80098dc:	2200      	movs	r2, #0
 80098de:	2105      	movs	r1, #5
 80098e0:	2007      	movs	r0, #7
 80098e2:	f005 f8b8 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80098e6:	2007      	movs	r0, #7
 80098e8:	f005 f8d1 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80098ec:	2200      	movs	r2, #0
 80098ee:	2105      	movs	r1, #5
 80098f0:	2008      	movs	r0, #8
 80098f2:	f005 f8b0 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80098f6:	2008      	movs	r0, #8
 80098f8:	f005 f8c9 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80098fc:	2200      	movs	r2, #0
 80098fe:	2101      	movs	r1, #1
 8009900:	200b      	movs	r0, #11
 8009902:	f005 f8a8 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009906:	200b      	movs	r0, #11
 8009908:	f005 f8c1 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 1, 0);
 800990c:	2200      	movs	r2, #0
 800990e:	2101      	movs	r1, #1
 8009910:	200d      	movs	r0, #13
 8009912:	f005 f8a0 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009916:	200d      	movs	r0, #13
 8009918:	f005 f8b9 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800991c:	2200      	movs	r2, #0
 800991e:	2101      	movs	r1, #1
 8009920:	2012      	movs	r0, #18
 8009922:	f005 f898 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8009926:	2012      	movs	r0, #18
 8009928:	f005 f8b1 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800992c:	2200      	movs	r2, #0
 800992e:	2105      	movs	r1, #5
 8009930:	2017      	movs	r0, #23
 8009932:	f005 f890 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009936:	2017      	movs	r0, #23
 8009938:	f005 f8a9 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 3, 0);
 800993c:	2200      	movs	r2, #0
 800993e:	2103      	movs	r1, #3
 8009940:	2018      	movs	r0, #24
 8009942:	f005 f888 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8009946:	2018      	movs	r0, #24
 8009948:	f005 f8a1 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 3, 0);
 800994c:	2200      	movs	r2, #0
 800994e:	2103      	movs	r1, #3
 8009950:	2019      	movs	r0, #25
 8009952:	f005 f880 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009956:	2019      	movs	r0, #25
 8009958:	f005 f899 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 3, 0);
 800995c:	2200      	movs	r2, #0
 800995e:	2103      	movs	r1, #3
 8009960:	201a      	movs	r0, #26
 8009962:	f005 f878 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8009966:	201a      	movs	r0, #26
 8009968:	f005 f891 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 800996c:	2200      	movs	r2, #0
 800996e:	2103      	movs	r1, #3
 8009970:	201b      	movs	r0, #27
 8009972:	f005 f870 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8009976:	201b      	movs	r0, #27
 8009978:	f005 f889 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800997c:	2200      	movs	r2, #0
 800997e:	2103      	movs	r1, #3
 8009980:	201c      	movs	r0, #28
 8009982:	f005 f868 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009986:	201c      	movs	r0, #28
 8009988:	f005 f881 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800998c:	2200      	movs	r2, #0
 800998e:	2103      	movs	r1, #3
 8009990:	201d      	movs	r0, #29
 8009992:	f005 f860 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009996:	201d      	movs	r0, #29
 8009998:	f005 f879 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800999c:	2200      	movs	r2, #0
 800999e:	2103      	movs	r1, #3
 80099a0:	201e      	movs	r0, #30
 80099a2:	f005 f858 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80099a6:	201e      	movs	r0, #30
 80099a8:	f005 f871 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80099ac:	2200      	movs	r2, #0
 80099ae:	2105      	movs	r1, #5
 80099b0:	2028      	movs	r0, #40	; 0x28
 80099b2:	f005 f850 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80099b6:	2028      	movs	r0, #40	; 0x28
 80099b8:	f005 f869 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80099bc:	2200      	movs	r2, #0
 80099be:	2105      	movs	r1, #5
 80099c0:	2029      	movs	r0, #41	; 0x29
 80099c2:	f005 f848 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80099c6:	2029      	movs	r0, #41	; 0x29
 80099c8:	f005 f861 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM8_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_CC_IRQn, 3, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	2103      	movs	r1, #3
 80099d0:	202e      	movs	r0, #46	; 0x2e
 80099d2:	f005 f840 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80099d6:	202e      	movs	r0, #46	; 0x2e
 80099d8:	f005 f859 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 3, 0);
 80099dc:	2200      	movs	r2, #0
 80099de:	2103      	movs	r1, #3
 80099e0:	2032      	movs	r0, #50	; 0x32
 80099e2:	f005 f838 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80099e6:	2032      	movs	r0, #50	; 0x32
 80099e8:	f005 f851 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 80099ec:	2200      	movs	r2, #0
 80099ee:	2101      	movs	r1, #1
 80099f0:	2033      	movs	r0, #51	; 0x33
 80099f2:	f005 f830 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80099f6:	2033      	movs	r0, #51	; 0x33
 80099f8:	f005 f849 	bl	800ea8e <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80099fc:	2200      	movs	r2, #0
 80099fe:	2100      	movs	r1, #0
 8009a00:	2036      	movs	r0, #54	; 0x36
 8009a02:	f005 f828 	bl	800ea56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009a06:	2036      	movs	r0, #54	; 0x36
 8009a08:	f005 f841 	bl	800ea8e <HAL_NVIC_EnableIRQ>
}
 8009a0c:	bf00      	nop
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_TIM_OC_DelayElapsedCallback>:
 * - TIM15 - changing screen state if set, comming back to saved screen
 * - TIM16 - PWM timer for power LED
 * - TIM17 - Used for debouncing all buttons
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	/* Interupt callback after timer counts 3 secs.
	 * Timer is started when any encoder is moved
	 * Refresh display timer or change display mode timer
	 */
	if (htim->Instance == TIM15)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a0f      	ldr	r2, [pc, #60]	; (8009a5c <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d111      	bne.n	8009a46 <HAL_TIM_OC_DelayElapsedCallback+0x36>
	    {

		/* Check if interupt is from change display */
		if (htim->ChannelState[0] == HAL_TIM_CHANNEL_STATE_BUSY)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d102      	bne.n	8009a34 <HAL_TIM_OC_DelayElapsedCallback+0x24>
		    {
			change_display_state(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7fb ff60 	bl	80058f4 <change_display_state>
		    }

		/* Check if interupt is from return to last saved display state */
		if (htim->ChannelState[1] == HAL_TIM_CHANNEL_STATE_BUSY)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d102      	bne.n	8009a46 <HAL_TIM_OC_DelayElapsedCallback+0x36>
		    {
			set_saved_display(htim);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f7fb fedf 	bl	8005804 <set_saved_display>
		    }
	    }

	/* Routine after getting a interupt from GPIO ports */
	if (htim->Instance == TIM17) //timer 17 is used only for debouncing
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a05      	ldr	r2, [pc, #20]	; (8009a60 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d101      	bne.n	8009a54 <HAL_TIM_OC_DelayElapsedCallback+0x44>
	    {
		any_buttons_pressed_routine();
 8009a50:	f002 f816 	bl	800ba80 <any_buttons_pressed_routine>
	    }
    }
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	40014000 	.word	0x40014000
 8009a60:	40014800 	.word	0x40014800

08009a64 <HAL_TIM_IC_CaptureCallback>:

/* Time input capture callback
 * Is called whenever any encoder change it's position (expect for radio encoder)
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
    {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
	display_on_standby_mode();
 8009a6c:	f7f8 fe22 	bl	80026b4 <display_on_standby_mode>
	check_volumes_ranges();
 8009a70:	f7fe fcf6 	bl	8008460 <check_volumes_ranges>

	/* Volume front encoder */
	if (htim->Instance == TIM2)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7c:	d101      	bne.n	8009a82 <HAL_TIM_IC_CaptureCallback+0x1e>
	    {
		volume_front_encoder_used();
 8009a7e:	f7fc fecf 	bl	8006820 <volume_front_encoder_used>
	    }
	/* Volume back encoder */
	if (htim->Instance == TIM8)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d101      	bne.n	8009a90 <HAL_TIM_IC_CaptureCallback+0x2c>
	    {
		volume_back_encoder_used();
 8009a8c:	f7fc ff60 	bl	8006950 <volume_back_encoder_used>
	    }
	/* Loundness encoder */
	if (htim->Instance == TIM1)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a0f      	ldr	r2, [pc, #60]	; (8009ad4 <HAL_TIM_IC_CaptureCallback+0x70>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d101      	bne.n	8009a9e <HAL_TIM_IC_CaptureCallback+0x3a>
	    {
		loudness_encoder_used();
 8009a9a:	f7fc ffbd 	bl	8006a18 <loudness_encoder_used>
	    }

	/* Bass encoder */
	if (htim->Instance == TIM4)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a0d      	ldr	r2, [pc, #52]	; (8009ad8 <HAL_TIM_IC_CaptureCallback+0x74>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d101      	bne.n	8009aac <HAL_TIM_IC_CaptureCallback+0x48>
	    {
		bass_encoder_used();
 8009aa8:	f7fd f802 	bl	8006ab0 <bass_encoder_used>
	    }

	/* Middle encoder */
	if (htim->Instance == TIM3)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <HAL_TIM_IC_CaptureCallback+0x78>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d101      	bne.n	8009aba <HAL_TIM_IC_CaptureCallback+0x56>
	    {
		middle_encoder_used();
 8009ab6:	f7fd f83d 	bl	8006b34 <middle_encoder_used>
	    }

	/* Treble encoder */
	if (htim->Instance == TIM5)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a08      	ldr	r2, [pc, #32]	; (8009ae0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d101      	bne.n	8009ac8 <HAL_TIM_IC_CaptureCallback+0x64>
	    {
		treble_encoder_used();
 8009ac4:	f7fd f874 	bl	8006bb0 <treble_encoder_used>
	/* Radio  encoder */
	//if(htim->Instance == TIM1)
	{
	    //radio_encoder_used();
	}
    }
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	40013400 	.word	0x40013400
 8009ad4:	40012c00 	.word	0x40012c00
 8009ad8:	40000800 	.word	0x40000800
 8009adc:	40000400 	.word	0x40000400
 8009ae0:	40000c00 	.word	0x40000c00

08009ae4 <set_init_values>:

// Set init values to specified variables
void set_init_values()
    {
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
	SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 8009ae8:	4b30      	ldr	r3, [pc, #192]	; (8009bac <set_init_values+0xc8>)
 8009aea:	2201      	movs	r2, #1
 8009aec:	701a      	strb	r2, [r3, #0]
	AlarmDataChange = 1;
 8009aee:	4b30      	ldr	r3, [pc, #192]	; (8009bb0 <set_init_values+0xcc>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	701a      	strb	r2, [r3, #0]
	Clock_Data_Time = 1;
 8009af4:	4b2f      	ldr	r3, [pc, #188]	; (8009bb4 <set_init_values+0xd0>)
 8009af6:	2201      	movs	r2, #1
 8009af8:	701a      	strb	r2, [r3, #0]
	RTC_typeOfAlarm = 1;
 8009afa:	4b2f      	ldr	r3, [pc, #188]	; (8009bb8 <set_init_values+0xd4>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	701a      	strb	r2, [r3, #0]
	Alarm.AlarmDateWeekDay = 1;
 8009b00:	4b2e      	ldr	r3, [pc, #184]	; (8009bbc <set_init_values+0xd8>)
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	encoderVolFront.audioOutputState = MASTER;
 8009b08:	4b2d      	ldr	r3, [pc, #180]	; (8009bc0 <set_init_values+0xdc>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	719a      	strb	r2, [r3, #6]
	encoderVolBack.audioOutputState = NORMAL;
 8009b0e:	4b2d      	ldr	r3, [pc, #180]	; (8009bc4 <set_init_values+0xe0>)
 8009b10:	2203      	movs	r2, #3
 8009b12:	719a      	strb	r2, [r3, #6]
	encoderVolFront.volumeMaster = 79;
 8009b14:	4b2a      	ldr	r3, [pc, #168]	; (8009bc0 <set_init_values+0xdc>)
 8009b16:	224f      	movs	r2, #79	; 0x4f
 8009b18:	701a      	strb	r2, [r3, #0]
	encoderVolFront.volumeLeftRight = 79;
 8009b1a:	4b29      	ldr	r3, [pc, #164]	; (8009bc0 <set_init_values+0xdc>)
 8009b1c:	224f      	movs	r2, #79	; 0x4f
 8009b1e:	705a      	strb	r2, [r3, #1]
	encoderVolFront.volumeLeft = 79;
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <set_init_values+0xdc>)
 8009b22:	224f      	movs	r2, #79	; 0x4f
 8009b24:	709a      	strb	r2, [r3, #2]
	encoderVolFront.volumeRight = 79;
 8009b26:	4b26      	ldr	r3, [pc, #152]	; (8009bc0 <set_init_values+0xdc>)
 8009b28:	224f      	movs	r2, #79	; 0x4f
 8009b2a:	70da      	strb	r2, [r3, #3]
	encoderVolBack.volumeLeftRight = 79;
 8009b2c:	4b25      	ldr	r3, [pc, #148]	; (8009bc4 <set_init_values+0xe0>)
 8009b2e:	224f      	movs	r2, #79	; 0x4f
 8009b30:	705a      	strb	r2, [r3, #1]
	encoderVolBack.volumeLeft = 79;
 8009b32:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <set_init_values+0xe0>)
 8009b34:	224f      	movs	r2, #79	; 0x4f
 8009b36:	709a      	strb	r2, [r3, #2]
	encoderVolBack.volumeRight = 79;
 8009b38:	4b22      	ldr	r3, [pc, #136]	; (8009bc4 <set_init_values+0xe0>)
 8009b3a:	224f      	movs	r2, #79	; 0x4f
 8009b3c:	70da      	strb	r2, [r3, #3]
	encoderFilterLoudness.gain = 15;
 8009b3e:	4b22      	ldr	r3, [pc, #136]	; (8009bc8 <set_init_values+0xe4>)
 8009b40:	220f      	movs	r2, #15
 8009b42:	705a      	strb	r2, [r3, #1]
	encoderFilterLoudness.buttonControl = SET_GAIN;
 8009b44:	4b20      	ldr	r3, [pc, #128]	; (8009bc8 <set_init_values+0xe4>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
	encoderFilterTreble.gain = 10;
 8009b4a:	4b20      	ldr	r3, [pc, #128]	; (8009bcc <set_init_values+0xe8>)
 8009b4c:	220a      	movs	r2, #10
 8009b4e:	705a      	strb	r2, [r3, #1]
	encoderFilterTreble.buttonControl = SET_GAIN;
 8009b50:	4b1e      	ldr	r3, [pc, #120]	; (8009bcc <set_init_values+0xe8>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	701a      	strb	r2, [r3, #0]
	encoderFilterMiddle.gain = 10;
 8009b56:	4b1e      	ldr	r3, [pc, #120]	; (8009bd0 <set_init_values+0xec>)
 8009b58:	220a      	movs	r2, #10
 8009b5a:	705a      	strb	r2, [r3, #1]
	encoderFilterMiddle.buttonControl = SET_GAIN;
 8009b5c:	4b1c      	ldr	r3, [pc, #112]	; (8009bd0 <set_init_values+0xec>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]
	TDA7719_config.set_input_front = JACK_1;
 8009b62:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <set_init_values+0xf0>)
 8009b64:	2201      	movs	r2, #1
 8009b66:	701a      	strb	r2, [r3, #0]
	TDA7719_config.set_input_back = JACK_2;
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <set_init_values+0xf0>)
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	705a      	strb	r2, [r3, #1]
//	savedUserSettings.radio_freq = 958;
//	savedUserSettings.stationSaved_1 = 923;
//	savedUserSettings.stationSaved_2 = 1021;
//	savedUserSettings.stationSaved_3 = 875;
	savedUserSettings.displayRefreshTime = 100;
 8009b6e:	4b1a      	ldr	r3, [pc, #104]	; (8009bd8 <set_init_values+0xf4>)
 8009b70:	2264      	movs	r2, #100	; 0x64
 8009b72:	811a      	strh	r2, [r3, #8]
	RADIO_IS_ON_front_flag = false;
 8009b74:	4b19      	ldr	r3, [pc, #100]	; (8009bdc <set_init_values+0xf8>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	701a      	strb	r2, [r3, #0]
	RADIO_IS_ON_back_flag = false;
 8009b7a:	4b19      	ldr	r3, [pc, #100]	; (8009be0 <set_init_values+0xfc>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
	SettingsUserMenu.AlarmSource_A = JACK_1;
 8009b80:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <set_init_values+0x100>)
 8009b82:	2201      	movs	r2, #1
 8009b84:	709a      	strb	r2, [r3, #2]
	SettingsUserMenu.AlarmSource_B = RADIO;
 8009b86:	4b17      	ldr	r3, [pc, #92]	; (8009be4 <set_init_values+0x100>)
 8009b88:	2205      	movs	r2, #5
 8009b8a:	70da      	strb	r2, [r3, #3]
	SettingsUserMenu.RefreshScreenTime = 65535;
 8009b8c:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <set_init_values+0x100>)
 8009b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b92:	801a      	strh	r2, [r3, #0]
	SettingsUserMenu.Power_LED = 5;
 8009b94:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <set_init_values+0x100>)
 8009b96:	2205      	movs	r2, #5
 8009b98:	715a      	strb	r2, [r3, #5]
	SettingsUserMenu.Display_mode = 1;
 8009b9a:	4b12      	ldr	r3, [pc, #72]	; (8009be4 <set_init_values+0x100>)
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	711a      	strb	r2, [r3, #4]


    }
 8009ba0:	bf00      	nop
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	200004f8 	.word	0x200004f8
 8009bb0:	200004f9 	.word	0x200004f9
 8009bb4:	2000050a 	.word	0x2000050a
 8009bb8:	2000050c 	.word	0x2000050c
 8009bbc:	2000074c 	.word	0x2000074c
 8009bc0:	20000554 	.word	0x20000554
 8009bc4:	20000518 	.word	0x20000518
 8009bc8:	2000053c 	.word	0x2000053c
 8009bcc:	2000052c 	.word	0x2000052c
 8009bd0:	20000510 	.word	0x20000510
 8009bd4:	20000544 	.word	0x20000544
 8009bd8:	20000520 	.word	0x20000520
 8009bdc:	200077f8 	.word	0x200077f8
 8009be0:	200037b9 	.word	0x200037b9
 8009be4:	20007c18 	.word	0x20007c18

08009be8 <calc_pwm>:

// change linear scale to more eye-friendly
float calc_pwm(float val)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.1f;
 8009bf2:	4b1d      	ldr	r3, [pc, #116]	; (8009c68 <calc_pwm+0x80>)
 8009bf4:	60fb      	str	r3, [r7, #12]
    const float x0 = 60.0f;
 8009bf6:	4b1d      	ldr	r3, [pc, #116]	; (8009c6c <calc_pwm+0x84>)
 8009bf8:	60bb      	str	r3, [r7, #8]
    return 300.0f / (1.0f + exp(-k * (val - x0)));
 8009bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8009bfe:	eeb1 7a67 	vneg.f32	s14, s15
 8009c02:	edd7 6a01 	vldr	s13, [r7, #4]
 8009c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c12:	ee17 0a90 	vmov	r0, s15
 8009c16:	f7f6 fd1f 	bl	8000658 <__aeabi_f2d>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	ec43 2b10 	vmov	d0, r2, r3
 8009c22:	f00c fd05 	bl	8016630 <exp>
 8009c26:	ec51 0b10 	vmov	r0, r1, d0
 8009c2a:	f04f 0200 	mov.w	r2, #0
 8009c2e:	4b10      	ldr	r3, [pc, #64]	; (8009c70 <calc_pwm+0x88>)
 8009c30:	f7f6 fbb4 	bl	800039c <__adddf3>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	a109      	add	r1, pc, #36	; (adr r1, 8009c60 <calc_pwm+0x78>)
 8009c3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c3e:	f7f6 fe8d 	bl	800095c <__aeabi_ddiv>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4610      	mov	r0, r2
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f7f7 f81f 	bl	8000c8c <__aeabi_d2f>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	ee07 3a90 	vmov	s15, r3
}
 8009c54:	eeb0 0a67 	vmov.f32	s0, s15
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	00000000 	.word	0x00000000
 8009c64:	4072c000 	.word	0x4072c000
 8009c68:	3dcccccd 	.word	0x3dcccccd
 8009c6c:	42700000 	.word	0x42700000
 8009c70:	3ff00000 	.word	0x3ff00000

08009c74 <change_power_led_brigh>:

// change power led brightness according to settings
void change_power_led_brigh(void)
    {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
	//static uint32_t timer_counter;
	static float r;

	//dodać hal_gettick();

	switch (SettingsUserMenu.Power_LED)
 8009c78:	4b30      	ldr	r3, [pc, #192]	; (8009d3c <change_power_led_brigh+0xc8>)
 8009c7a:	795b      	ldrb	r3, [r3, #5]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	d859      	bhi.n	8009d36 <change_power_led_brigh+0xc2>
 8009c82:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <change_power_led_brigh+0x14>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009d37 	.word	0x08009d37
 8009c8c:	08009d37 	.word	0x08009d37
 8009c90:	08009c9d 	.word	0x08009c9d
 8009c94:	08009ca7 	.word	0x08009ca7
 8009c98:	08009cb1 	.word	0x08009cb1
//			__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, calc_pwm(r));
//			led_counter++;
		}
		break;
	    case Always_OFF:
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 0);
 8009c9c:	4b28      	ldr	r3, [pc, #160]	; (8009d40 <change_power_led_brigh+0xcc>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8009ca4:	e048      	b.n	8009d38 <change_power_led_brigh+0xc4>

	    case Always_ON:
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 255);
 8009ca6:	4b26      	ldr	r3, [pc, #152]	; (8009d40 <change_power_led_brigh+0xcc>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	22ff      	movs	r2, #255	; 0xff
 8009cac:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8009cae:	e043      	b.n	8009d38 <change_power_led_brigh+0xc4>

	    case Change_brigh:
		 r = 50 * (1.0f + sin(led_counter / 100.0f));
 8009cb0:	4b24      	ldr	r3, [pc, #144]	; (8009d44 <change_power_led_brigh+0xd0>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009d48 <change_power_led_brigh+0xd4>
 8009cc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009cc4:	ee16 0a90 	vmov	r0, s13
 8009cc8:	f7f6 fcc6 	bl	8000658 <__aeabi_f2d>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	ec43 2b10 	vmov	d0, r2, r3
 8009cd4:	f00c fc58 	bl	8016588 <sin>
 8009cd8:	ec51 0b10 	vmov	r0, r1, d0
 8009cdc:	f04f 0200 	mov.w	r2, #0
 8009ce0:	4b1a      	ldr	r3, [pc, #104]	; (8009d4c <change_power_led_brigh+0xd8>)
 8009ce2:	f7f6 fb5b 	bl	800039c <__adddf3>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4610      	mov	r0, r2
 8009cec:	4619      	mov	r1, r3
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	4b17      	ldr	r3, [pc, #92]	; (8009d50 <change_power_led_brigh+0xdc>)
 8009cf4:	f7f6 fd08 	bl	8000708 <__aeabi_dmul>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f7f6 ffc4 	bl	8000c8c <__aeabi_d2f>
 8009d04:	4603      	mov	r3, r0
 8009d06:	4a13      	ldr	r2, [pc, #76]	; (8009d54 <change_power_led_brigh+0xe0>)
 8009d08:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, calc_pwm(r));
 8009d0a:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <change_power_led_brigh+0xe0>)
 8009d0c:	edd3 7a00 	vldr	s15, [r3]
 8009d10:	eeb0 0a67 	vmov.f32	s0, s15
 8009d14:	f7ff ff68 	bl	8009be8 <calc_pwm>
 8009d18:	eef0 7a40 	vmov.f32	s15, s0
 8009d1c:	4b08      	ldr	r3, [pc, #32]	; (8009d40 <change_power_led_brigh+0xcc>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d24:	ee17 2a90 	vmov	r2, s15
 8009d28:	635a      	str	r2, [r3, #52]	; 0x34
		led_counter++;
 8009d2a:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <change_power_led_brigh+0xd0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	4a04      	ldr	r2, [pc, #16]	; (8009d44 <change_power_led_brigh+0xd0>)
 8009d32:	6013      	str	r3, [r2, #0]

		break;
 8009d34:	e000      	b.n	8009d38 <change_power_led_brigh+0xc4>
		//może case gdzie użytkownik podaje parametr określający jasność
	    default:
		break;
 8009d36:	bf00      	nop
	    }
    }
 8009d38:	bf00      	nop
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20007c18 	.word	0x20007c18
 8009d40:	20007bcc 	.word	0x20007bcc
 8009d44:	200001ec 	.word	0x200001ec
 8009d48:	42c80000 	.word	0x42c80000
 8009d4c:	3ff00000 	.word	0x3ff00000
 8009d50:	40490000 	.word	0x40490000
 8009d54:	200001f0 	.word	0x200001f0

08009d58 <complexABS>:

//
float complexABS(float real, float compl)
    {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009d62:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real * real + compl * compl);
 8009d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009d6e:	edd7 7a00 	vldr	s15, [r7]
 8009d72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8009d7e:	f00c fcdb 	bl	8016738 <sqrtf>
 8009d82:	eef0 7a40 	vmov.f32	s15, s0
    }
 8009d86:	eeb0 0a67 	vmov.f32	s0, s15
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <CalculateFFT>:

//
void CalculateFFT(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
	FFT_calc_done = 1;
 8009d9a:	4b99      	ldr	r3, [pc, #612]	; (800a000 <CalculateFFT+0x270>)
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	701a      	strb	r2, [r3, #0]

	arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);
 8009da0:	2300      	movs	r3, #0
 8009da2:	4a98      	ldr	r2, [pc, #608]	; (800a004 <CalculateFFT+0x274>)
 8009da4:	4998      	ldr	r1, [pc, #608]	; (800a008 <CalculateFFT+0x278>)
 8009da6:	4899      	ldr	r0, [pc, #612]	; (800a00c <CalculateFFT+0x27c>)
 8009da8:	f7f8 fa47 	bl	800223a <arm_rfft_fast_f32>

	int Freqs[FFT_SAMPLES];
	int FreqPoint = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009db2:	f102 020c 	add.w	r2, r2, #12
 8009db6:	6013      	str	r3, [r2, #0]
	int Offset = 60; // variable noise floor offset
 8009db8:	233c      	movs	r3, #60	; 0x3c
 8009dba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009dbe:	f102 0204 	add.w	r2, r2, #4
 8009dc2:	6013      	str	r3, [r2, #0]

	// calculate abs values and linear-to-dB
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009dca:	f102 0208 	add.w	r2, r2, #8
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	e067      	b.n	8009ea2 <CalculateFFT+0x112>
	{
		Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 8009dd2:	4a8c      	ldr	r2, [pc, #560]	; (800a004 <CalculateFFT+0x274>)
 8009dd4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009dd8:	f103 0308 	add.w	r3, r3, #8
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	edd3 7a00 	vldr	s15, [r3]
 8009de6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009dea:	f103 0308 	add.w	r3, r3, #8
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	4a84      	ldr	r2, [pc, #528]	; (800a004 <CalculateFFT+0x274>)
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	ed93 7a00 	vldr	s14, [r3]
 8009dfc:	eef0 0a47 	vmov.f32	s1, s14
 8009e00:	eeb0 0a67 	vmov.f32	s0, s15
 8009e04:	f7ff ffa8 	bl	8009d58 <complexABS>
 8009e08:	eef0 7a40 	vmov.f32	s15, s0
 8009e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8009e10:	f00c fc5c 	bl	80166cc <log10f>
 8009e14:	eef0 7a40 	vmov.f32	s15, s0
 8009e18:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8009e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e24:	ee17 2a90 	vmov	r2, s15
 8009e28:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009e2c:	f103 0304 	add.w	r3, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	1ad1      	subs	r1, r2, r3
 8009e34:	f107 0310 	add.w	r3, r7, #16
 8009e38:	3b0c      	subs	r3, #12
 8009e3a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009e3e:	f102 020c 	add.w	r2, r2, #12
 8009e42:	6812      	ldr	r2, [r2, #0]
 8009e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if(Freqs[FreqPoint] < 0)
 8009e48:	f107 0310 	add.w	r3, r7, #16
 8009e4c:	3b0c      	subs	r3, #12
 8009e4e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009e52:	f102 020c 	add.w	r2, r2, #12
 8009e56:	6812      	ldr	r2, [r2, #0]
 8009e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	da0a      	bge.n	8009e76 <CalculateFFT+0xe6>
		{
			Freqs[FreqPoint] = 0;
 8009e60:	f107 0310 	add.w	r3, r7, #16
 8009e64:	3b0c      	subs	r3, #12
 8009e66:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009e6a:	f102 020c 	add.w	r2, r2, #12
 8009e6e:	6812      	ldr	r2, [r2, #0]
 8009e70:	2100      	movs	r1, #0
 8009e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		FreqPoint++;
 8009e76:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009e7a:	f103 030c 	add.w	r3, r3, #12
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009e86:	f102 020c 	add.w	r2, r2, #12
 8009e8a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 8009e8c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009e90:	f103 0308 	add.w	r3, r3, #8
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3302      	adds	r3, #2
 8009e98:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8009e9c:	f102 0208 	add.w	r2, r2, #8
 8009ea0:	6013      	str	r3, [r2, #0]
 8009ea2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8009ea6:	f103 0308 	add.w	r3, r3, #8
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009eb0:	db8f      	blt.n	8009dd2 <CalculateFFT+0x42>
//	for (uint32_t k = 0;  k < 1024;  k++)
//	    {
//
//	    }

	OutFreqArray[0]  = (uint8_t)Freqs[1]; // 20 Hz
 8009eb2:	f107 0310 	add.w	r3, r7, #16
 8009eb6:	3b0c      	subs	r3, #12
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	4b54      	ldr	r3, [pc, #336]	; (800a010 <CalculateFFT+0x280>)
 8009ebe:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1]  = (uint8_t)Freqs[3]; // 50 Hz
 8009ec0:	f107 0310 	add.w	r3, r7, #16
 8009ec4:	3b0c      	subs	r3, #12
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	4b51      	ldr	r3, [pc, #324]	; (800a010 <CalculateFFT+0x280>)
 8009ecc:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2]  = (uint8_t)Freqs[4]; // 75 Hz
 8009ece:	f107 0310 	add.w	r3, r7, #16
 8009ed2:	3b0c      	subs	r3, #12
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	4b4d      	ldr	r3, [pc, #308]	; (800a010 <CalculateFFT+0x280>)
 8009eda:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3]  = (uint8_t)Freqs[6]; // 125 Hz
 8009edc:	f107 0310 	add.w	r3, r7, #16
 8009ee0:	3b0c      	subs	r3, #12
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	4b4a      	ldr	r3, [pc, #296]	; (800a010 <CalculateFFT+0x280>)
 8009ee8:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4]  = (uint8_t)Freqs[10]; // 200 Hz
 8009eea:	f107 0310 	add.w	r3, r7, #16
 8009eee:	3b0c      	subs	r3, #12
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	4b46      	ldr	r3, [pc, #280]	; (800a010 <CalculateFFT+0x280>)
 8009ef6:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5]  = (uint8_t)Freqs[17]; // 1000 Hz
 8009ef8:	f107 0310 	add.w	r3, r7, #16
 8009efc:	3b0c      	subs	r3, #12
 8009efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	4b43      	ldr	r3, [pc, #268]	; (800a010 <CalculateFFT+0x280>)
 8009f04:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6]  = (uint8_t)Freqs[24]; // 2200 Hz
 8009f06:	f107 0310 	add.w	r3, r7, #16
 8009f0a:	3b0c      	subs	r3, #12
 8009f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	4b3f      	ldr	r3, [pc, #252]	; (800a010 <CalculateFFT+0x280>)
 8009f12:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7]  = (uint8_t)Freqs[35]; // 4500 Hz
 8009f14:	f107 0310 	add.w	r3, r7, #16
 8009f18:	3b0c      	subs	r3, #12
 8009f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	4b3b      	ldr	r3, [pc, #236]	; (800a010 <CalculateFFT+0x280>)
 8009f22:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8]  = (uint8_t)Freqs[47]; // 9000 Hz
 8009f24:	f107 0310 	add.w	r3, r7, #16
 8009f28:	3b0c      	subs	r3, #12
 8009f2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	4b37      	ldr	r3, [pc, #220]	; (800a010 <CalculateFFT+0x280>)
 8009f32:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9]  = (uint8_t)Freqs[59]; // 15000 Hz
 8009f34:	f107 0310 	add.w	r3, r7, #16
 8009f38:	3b0c      	subs	r3, #12
 8009f3a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	4b33      	ldr	r3, [pc, #204]	; (800a010 <CalculateFFT+0x280>)
 8009f42:	725a      	strb	r2, [r3, #9]
	OutFreqArray[10] = (uint8_t)Freqs[82]; //
 8009f44:	f107 0310 	add.w	r3, r7, #16
 8009f48:	3b0c      	subs	r3, #12
 8009f4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	4b2f      	ldr	r3, [pc, #188]	; (800a010 <CalculateFFT+0x280>)
 8009f52:	729a      	strb	r2, [r3, #10]
	OutFreqArray[11] = (uint8_t)Freqs[117]; // 63 Hz
 8009f54:	f107 0310 	add.w	r3, r7, #16
 8009f58:	3b0c      	subs	r3, #12
 8009f5a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	4b2b      	ldr	r3, [pc, #172]	; (800a010 <CalculateFFT+0x280>)
 8009f62:	72da      	strb	r2, [r3, #11]
	OutFreqArray[12] = (uint8_t)Freqs[186]; // 125 Hz
 8009f64:	f107 0310 	add.w	r3, r7, #16
 8009f68:	3b0c      	subs	r3, #12
 8009f6a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	4b27      	ldr	r3, [pc, #156]	; (800a010 <CalculateFFT+0x280>)
 8009f72:	731a      	strb	r2, [r3, #12]
	OutFreqArray[13] = (uint8_t)Freqs[256]; // 250 Hz
 8009f74:	f107 0310 	add.w	r3, r7, #16
 8009f78:	3b0c      	subs	r3, #12
 8009f7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	4b23      	ldr	r3, [pc, #140]	; (800a010 <CalculateFFT+0x280>)
 8009f82:	735a      	strb	r2, [r3, #13]
	OutFreqArray[14] = (uint8_t)Freqs[326]; // 500 Hz
 8009f84:	f107 0310 	add.w	r3, r7, #16
 8009f88:	3b0c      	subs	r3, #12
 8009f8a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	4b1f      	ldr	r3, [pc, #124]	; (800a010 <CalculateFFT+0x280>)
 8009f92:	739a      	strb	r2, [r3, #14]
	OutFreqArray[15] = (uint8_t)Freqs[372]; // 1000 Hz
 8009f94:	f107 0310 	add.w	r3, r7, #16
 8009f98:	3b0c      	subs	r3, #12
 8009f9a:	f8d3 35d0 	ldr.w	r3, [r3, #1488]	; 0x5d0
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	4b1b      	ldr	r3, [pc, #108]	; (800a010 <CalculateFFT+0x280>)
 8009fa2:	73da      	strb	r2, [r3, #15]
	OutFreqArray[16] = (uint8_t)Freqs[465]; // 2200 Hz
 8009fa4:	f107 0310 	add.w	r3, r7, #16
 8009fa8:	3b0c      	subs	r3, #12
 8009faa:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	4b17      	ldr	r3, [pc, #92]	; (800a010 <CalculateFFT+0x280>)
 8009fb2:	741a      	strb	r2, [r3, #16]
	OutFreqArray[17] = (uint8_t)Freqs[558]; // 4500 Hz
 8009fb4:	f107 0310 	add.w	r3, r7, #16
 8009fb8:	3b0c      	subs	r3, #12
 8009fba:	f8d3 38b8 	ldr.w	r3, [r3, #2232]	; 0x8b8
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	4b13      	ldr	r3, [pc, #76]	; (800a010 <CalculateFFT+0x280>)
 8009fc2:	745a      	strb	r2, [r3, #17]
	OutFreqArray[18] = (uint8_t)Freqs[651]; // 9000 Hz
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	3b0c      	subs	r3, #12
 8009fca:	f8d3 3a2c 	ldr.w	r3, [r3, #2604]	; 0xa2c
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <CalculateFFT+0x280>)
 8009fd2:	749a      	strb	r2, [r3, #18]
	OutFreqArray[19] = (uint8_t)Freqs[836]; // 15000 Hz
 8009fd4:	f107 0310 	add.w	r3, r7, #16
 8009fd8:	3b0c      	subs	r3, #12
 8009fda:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <CalculateFFT+0x280>)
 8009fe2:	74da      	strb	r2, [r3, #19]
	OutFreqArray[20] = (uint8_t)Freqs[929]; // 15000 Hz
 8009fe4:	f107 0310 	add.w	r3, r7, #16
 8009fe8:	3b0c      	subs	r3, #12
 8009fea:	f8d3 3e84 	ldr.w	r3, [r3, #3716]	; 0xe84
 8009fee:	b2da      	uxtb	r2, r3
 8009ff0:	4b07      	ldr	r3, [pc, #28]	; (800a010 <CalculateFFT+0x280>)
 8009ff2:	751a      	strb	r2, [r3, #20]
}
 8009ff4:	bf00      	nop
 8009ff6:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	200001e9 	.word	0x200001e9
 800a004:	200017a0 	.word	0x200017a0
 800a008:	200057c8 	.word	0x200057c8
 800a00c:	200037a0 	.word	0x200037a0
 800a010:	200077fc 	.word	0x200077fc

0800a014 <check_FFT_flag>:

//
void check_FFT_flag(void)
    {
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
	  if(Samples_ready == 1)
 800a01a:	4b13      	ldr	r3, [pc, #76]	; (800a068 <check_FFT_flag+0x54>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b01      	cmp	r3, #1
 800a022:	d11c      	bne.n	800a05e <check_FFT_flag+0x4a>
	  {
		  Samples_ready = 0;
 800a024:	4b10      	ldr	r3, [pc, #64]	; (800a068 <check_FFT_flag+0x54>)
 800a026:	2200      	movs	r2, #0
 800a028:	701a      	strb	r2, [r3, #0]

		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
 800a02e:	e010      	b.n	800a052 <check_FFT_flag+0x3e>
		  {
			  FFTInBuffer[i] =  (float)ADC_In[i];
 800a030:	4a0e      	ldr	r2, [pc, #56]	; (800a06c <check_FFT_flag+0x58>)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a038:	ee07 3a90 	vmov	s15, r3
 800a03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a040:	4a0b      	ldr	r2, [pc, #44]	; (800a070 <check_FFT_flag+0x5c>)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	edc3 7a00 	vstr	s15, [r3]
		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3301      	adds	r3, #1
 800a050:	607b      	str	r3, [r7, #4]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a058:	d3ea      	bcc.n	800a030 <check_FFT_flag+0x1c>
		  }

		  CalculateFFT();
 800a05a:	f7ff fe99 	bl	8009d90 <CalculateFFT>
	  }
    }
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20001788 	.word	0x20001788
 800a06c:	2000077c 	.word	0x2000077c
 800a070:	200057c8 	.word	0x200057c8

0800a074 <map>:

//
uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
    {
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	69b9      	ldr	r1, [r7, #24]
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	1a8a      	subs	r2, r1, r2
 800a08e:	fb02 f203 	mul.w	r2, r2, r3
 800a092:	6879      	ldr	r1, [r7, #4]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	1acb      	subs	r3, r1, r3
 800a098:	fbb2 f2f3 	udiv	r2, r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	4413      	add	r3, r2
    }
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <SplitNumberToDignits>:

//
int16_t SplitNumberToDignits(int16_t position, int16_t number)
    {
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	460a      	mov	r2, r1
 800a0b6:	80fb      	strh	r3, [r7, #6]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	80bb      	strh	r3, [r7, #4]
	while (position--)
 800a0bc:	e008      	b.n	800a0d0 <SplitNumberToDignits+0x24>
	    number /= 10;
 800a0be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a0c2:	4a11      	ldr	r2, [pc, #68]	; (800a108 <SplitNumberToDignits+0x5c>)
 800a0c4:	fb82 1203 	smull	r1, r2, r2, r3
 800a0c8:	1092      	asrs	r2, r2, #2
 800a0ca:	17db      	asrs	r3, r3, #31
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	80bb      	strh	r3, [r7, #4]
	while (position--)
 800a0d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	3a01      	subs	r2, #1
 800a0d8:	b292      	uxth	r2, r2
 800a0da:	80fa      	strh	r2, [r7, #6]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1ee      	bne.n	800a0be <SplitNumberToDignits+0x12>
	return number % 10;
 800a0e0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800a0e4:	4b08      	ldr	r3, [pc, #32]	; (800a108 <SplitNumberToDignits+0x5c>)
 800a0e6:	fb83 1302 	smull	r1, r3, r3, r2
 800a0ea:	1099      	asrs	r1, r3, #2
 800a0ec:	17d3      	asrs	r3, r2, #31
 800a0ee:	1ac9      	subs	r1, r1, r3
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	b21b      	sxth	r3, r3
    }
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	66666667 	.word	0x66666667

0800a10c <HAL_ADC_ConvCpltCallback>:


// Constains operations needed to calculate FFT and UVmeter - it's using ADC1 perph
// ADC2 is used for monitoring battery voltage while disconnected from main power source
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
    {
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	static uint16_t i = 0;

	if(hadc->Instance == ADC1)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a33      	ldr	r2, [pc, #204]	; (800a1e8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d160      	bne.n	800a1e0 <HAL_ADC_ConvCpltCallback+0xd4>
	    {

		if (SSD1322_Screen_State == SSD1322_SCREEN_UVMETER)
 800a11e:	4b33      	ldr	r3, [pc, #204]	; (800a1ec <HAL_ADC_ConvCpltCallback+0xe0>)
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b04      	cmp	r3, #4
 800a124:	d111      	bne.n	800a14a <HAL_ADC_ConvCpltCallback+0x3e>
		    {
			if (UV_meter_front_back == UV_METER_FRONT)
 800a126:	4b32      	ldr	r3, [pc, #200]	; (800a1f0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d104      	bne.n	800a138 <HAL_ADC_ConvCpltCallback+0x2c>
			    {
				ADC_calc_UV_value(ADC_CHANNEL_LEFT_FRONT, ADC_CHANNEL_RIGHT_FRONT);
 800a12e:	2102      	movs	r1, #2
 800a130:	2001      	movs	r0, #1
 800a132:	f000 f869 	bl	800a208 <ADC_calc_UV_value>
 800a136:	e053      	b.n	800a1e0 <HAL_ADC_ConvCpltCallback+0xd4>
			    }
			else if (UV_meter_front_back == UV_METER_BACK)
 800a138:	4b2d      	ldr	r3, [pc, #180]	; (800a1f0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d14f      	bne.n	800a1e0 <HAL_ADC_ConvCpltCallback+0xd4>
			    {
				ADC_calc_UV_value(ADC_CHANNEL_LEFT_BACK, ADC_CHANNEL_RIGHT_BACK);
 800a140:	2100      	movs	r1, #0
 800a142:	2003      	movs	r0, #3
 800a144:	f000 f860 	bl	800a208 <ADC_calc_UV_value>
 800a148:	e04a      	b.n	800a1e0 <HAL_ADC_ConvCpltCallback+0xd4>
			    }
		    }
		else if(SSD1322_Screen_State == SSD1322_SCREEN_FFT)
 800a14a:	4b28      	ldr	r3, [pc, #160]	; (800a1ec <HAL_ADC_ConvCpltCallback+0xe0>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d146      	bne.n	800a1e0 <HAL_ADC_ConvCpltCallback+0xd4>
		    {
			switch (FFT_channel_source)
 800a152:	4b28      	ldr	r3, [pc, #160]	; (800a1f4 <HAL_ADC_ConvCpltCallback+0xe8>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	3b01      	subs	r3, #1
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d82f      	bhi.n	800a1bc <HAL_ADC_ConvCpltCallback+0xb0>
 800a15c:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <HAL_ADC_ConvCpltCallback+0x58>)
 800a15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a162:	bf00      	nop
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a187 	.word	0x0800a187
 800a16c:	0800a199 	.word	0x0800a199
 800a170:	0800a1ab 	.word	0x0800a1ab
			    {
				case FFT_front_left:
				   ADC_In[i] = ADC_SamplesTEST[1];
 800a174:	4b20      	ldr	r3, [pc, #128]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	4b20      	ldr	r3, [pc, #128]	; (800a1fc <HAL_ADC_ConvCpltCallback+0xf0>)
 800a17c:	8859      	ldrh	r1, [r3, #2]
 800a17e:	4b20      	ldr	r3, [pc, #128]	; (800a200 <HAL_ADC_ConvCpltCallback+0xf4>)
 800a180:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 800a184:	e01b      	b.n	800a1be <HAL_ADC_ConvCpltCallback+0xb2>
				case FFT_front_right:
				    ADC_In[i] = ADC_SamplesTEST[2];
 800a186:	4b1c      	ldr	r3, [pc, #112]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	4b1b      	ldr	r3, [pc, #108]	; (800a1fc <HAL_ADC_ConvCpltCallback+0xf0>)
 800a18e:	8899      	ldrh	r1, [r3, #4]
 800a190:	4b1b      	ldr	r3, [pc, #108]	; (800a200 <HAL_ADC_ConvCpltCallback+0xf4>)
 800a192:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 800a196:	e012      	b.n	800a1be <HAL_ADC_ConvCpltCallback+0xb2>
				case FFT_back_left:
				    ADC_In[i] = ADC_SamplesTEST[3];
 800a198:	4b17      	ldr	r3, [pc, #92]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <HAL_ADC_ConvCpltCallback+0xf0>)
 800a1a0:	88d9      	ldrh	r1, [r3, #6]
 800a1a2:	4b17      	ldr	r3, [pc, #92]	; (800a200 <HAL_ADC_ConvCpltCallback+0xf4>)
 800a1a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 800a1a8:	e009      	b.n	800a1be <HAL_ADC_ConvCpltCallback+0xb2>
				case FFT_back_right:
				    ADC_In[i] = ADC_SamplesTEST[0];
 800a1aa:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4b12      	ldr	r3, [pc, #72]	; (800a1fc <HAL_ADC_ConvCpltCallback+0xf0>)
 800a1b2:	8819      	ldrh	r1, [r3, #0]
 800a1b4:	4b12      	ldr	r3, [pc, #72]	; (800a200 <HAL_ADC_ConvCpltCallback+0xf4>)
 800a1b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				break;
 800a1ba:	e000      	b.n	800a1be <HAL_ADC_ConvCpltCallback+0xb2>
				default:
				break;
 800a1bc:	bf00      	nop
			    }

			i++;
 800a1be:	4b0e      	ldr	r3, [pc, #56]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	4b0c      	ldr	r3, [pc, #48]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a1c8:	801a      	strh	r2, [r3, #0]

			if(i == FFT_SAMPLES)
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1d2:	d105      	bne.n	800a1e0 <HAL_ADC_ConvCpltCallback+0xd4>
			{
				i = 0;
 800a1d4:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <HAL_ADC_ConvCpltCallback+0xec>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	801a      	strh	r2, [r3, #0]
				Samples_ready = 1;
 800a1da:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <HAL_ADC_ConvCpltCallback+0xf8>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	701a      	strb	r2, [r3, #0]
	if(hadc->Instance == ADC2)
	    {

	    }

    }
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	50040000 	.word	0x50040000
 800a1ec:	200004f8 	.word	0x200004f8
 800a1f0:	200037b8 	.word	0x200037b8
 800a1f4:	200000ba 	.word	0x200000ba
 800a1f8:	200001f4 	.word	0x200001f4
 800a1fc:	200057c0 	.word	0x200057c0
 800a200:	2000077c 	.word	0x2000077c
 800a204:	20001788 	.word	0x20001788

0800a208 <ADC_calc_UV_value>:


// Calculates mean value for selected audio channels.
void ADC_calc_UV_value(uint8_t adc_channel_left, uint8_t adc_channel_right)
    {
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	460a      	mov	r2, r1
 800a212:	71fb      	strb	r3, [r7, #7]
 800a214:	4613      	mov	r3, r2
 800a216:	71bb      	strb	r3, [r7, #6]
	static uint32_t sum_right = 0;
	static uint32_t div_left  = 1;
	static uint32_t div_right = 1;
	static uint32_t num_of_samples = 0;

	num_of_samples++; //ilość zbieranych próbek do obliczania sredniej RMS
 800a218:	4b31      	ldr	r3, [pc, #196]	; (800a2e0 <ADC_calc_UV_value+0xd8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3301      	adds	r3, #1
 800a21e:	4a30      	ldr	r2, [pc, #192]	; (800a2e0 <ADC_calc_UV_value+0xd8>)
 800a220:	6013      	str	r3, [r2, #0]
	//według warunku sumować albo front albo back
	if (ADC_SamplesTEST[adc_channel_left] > 1920)// take only positive probes
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	4a2f      	ldr	r2, [pc, #188]	; (800a2e4 <ADC_calc_UV_value+0xdc>)
 800a226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a22a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800a22e:	d91a      	bls.n	800a266 <ADC_calc_UV_value+0x5e>
	    {
		sum_left = sum_left + ADC_SamplesTEST[adc_channel_left] - 1919;	//minus offset from volate divader
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	4a2c      	ldr	r2, [pc, #176]	; (800a2e4 <ADC_calc_UV_value+0xdc>)
 800a234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a238:	461a      	mov	r2, r3
 800a23a:	4b2b      	ldr	r3, [pc, #172]	; (800a2e8 <ADC_calc_UV_value+0xe0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4413      	add	r3, r2
 800a240:	f2a3 737f 	subw	r3, r3, #1919	; 0x77f
 800a244:	4a28      	ldr	r2, [pc, #160]	; (800a2e8 <ADC_calc_UV_value+0xe0>)
 800a246:	6013      	str	r3, [r2, #0]
		ADC_SamplesSUM[adc_channel_left] = sum_left / div_left;
 800a248:	4b27      	ldr	r3, [pc, #156]	; (800a2e8 <ADC_calc_UV_value+0xe0>)
 800a24a:	6819      	ldr	r1, [r3, #0]
 800a24c:	4b27      	ldr	r3, [pc, #156]	; (800a2ec <ADC_calc_UV_value+0xe4>)
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	79fb      	ldrb	r3, [r7, #7]
 800a252:	fbb1 f2f2 	udiv	r2, r1, r2
 800a256:	4926      	ldr	r1, [pc, #152]	; (800a2f0 <ADC_calc_UV_value+0xe8>)
 800a258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		div_left++;
 800a25c:	4b23      	ldr	r3, [pc, #140]	; (800a2ec <ADC_calc_UV_value+0xe4>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3301      	adds	r3, #1
 800a262:	4a22      	ldr	r2, [pc, #136]	; (800a2ec <ADC_calc_UV_value+0xe4>)
 800a264:	6013      	str	r3, [r2, #0]
	    }
	if(ADC_SamplesTEST[adc_channel_right] > 1920)
 800a266:	79bb      	ldrb	r3, [r7, #6]
 800a268:	4a1e      	ldr	r2, [pc, #120]	; (800a2e4 <ADC_calc_UV_value+0xdc>)
 800a26a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a26e:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800a272:	d91a      	bls.n	800a2aa <ADC_calc_UV_value+0xa2>
	    {
		sum_right = sum_right + ADC_SamplesTEST[adc_channel_right] - 1919;
 800a274:	79bb      	ldrb	r3, [r7, #6]
 800a276:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <ADC_calc_UV_value+0xdc>)
 800a278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a27c:	461a      	mov	r2, r3
 800a27e:	4b1d      	ldr	r3, [pc, #116]	; (800a2f4 <ADC_calc_UV_value+0xec>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4413      	add	r3, r2
 800a284:	f2a3 737f 	subw	r3, r3, #1919	; 0x77f
 800a288:	4a1a      	ldr	r2, [pc, #104]	; (800a2f4 <ADC_calc_UV_value+0xec>)
 800a28a:	6013      	str	r3, [r2, #0]
		ADC_SamplesSUM[adc_channel_right] = sum_right / div_right;
 800a28c:	4b19      	ldr	r3, [pc, #100]	; (800a2f4 <ADC_calc_UV_value+0xec>)
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	4b19      	ldr	r3, [pc, #100]	; (800a2f8 <ADC_calc_UV_value+0xf0>)
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	79bb      	ldrb	r3, [r7, #6]
 800a296:	fbb1 f2f2 	udiv	r2, r1, r2
 800a29a:	4915      	ldr	r1, [pc, #84]	; (800a2f0 <ADC_calc_UV_value+0xe8>)
 800a29c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		div_right++;
 800a2a0:	4b15      	ldr	r3, [pc, #84]	; (800a2f8 <ADC_calc_UV_value+0xf0>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	4a14      	ldr	r2, [pc, #80]	; (800a2f8 <ADC_calc_UV_value+0xf0>)
 800a2a8:	6013      	str	r3, [r2, #0]
	    }
	if(num_of_samples > 10000)
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	; (800a2e0 <ADC_calc_UV_value+0xd8>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d90e      	bls.n	800a2d4 <ADC_calc_UV_value+0xcc>
	    {
		num_of_samples = 0;
 800a2b6:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <ADC_calc_UV_value+0xd8>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
		div_left = 1;
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <ADC_calc_UV_value+0xe4>)
 800a2be:	2201      	movs	r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]
		div_right = 1;
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <ADC_calc_UV_value+0xf0>)
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]
		sum_left = 0;
 800a2c8:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <ADC_calc_UV_value+0xe0>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
		sum_right = 0;
 800a2ce:	4b09      	ldr	r3, [pc, #36]	; (800a2f4 <ADC_calc_UV_value+0xec>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
	    }
    }
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	200001f8 	.word	0x200001f8
 800a2e4:	200057c0 	.word	0x200057c0
 800a2e8:	200001fc 	.word	0x200001fc
 800a2ec:	200000ac 	.word	0x200000ac
 800a2f0:	20000708 	.word	0x20000708
 800a2f4:	20000200 	.word	0x20000200
 800a2f8:	200000b0 	.word	0x200000b0

0800a2fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800a300:	b672      	cpsid	i
}
 800a302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	__NOP();
 800a304:	bf00      	nop
	//__bswap16();
	__NVIC_SystemReset();
 800a306:	f7ff f9df 	bl	80096c8 <__NVIC_SystemReset>
	...

0800a30c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a310:	4b07      	ldr	r3, [pc, #28]	; (800a330 <MX_RNG_Init+0x24>)
 800a312:	4a08      	ldr	r2, [pc, #32]	; (800a334 <MX_RNG_Init+0x28>)
 800a314:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a316:	4b06      	ldr	r3, [pc, #24]	; (800a330 <MX_RNG_Init+0x24>)
 800a318:	2200      	movs	r2, #0
 800a31a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a31c:	4804      	ldr	r0, [pc, #16]	; (800a330 <MX_RNG_Init+0x24>)
 800a31e:	f008 f82f 	bl	8012380 <HAL_RNG_Init>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800a328:	f7ff ffe8 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a32c:	bf00      	nop
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20007814 	.word	0x20007814
 800a334:	50060800 	.word	0x50060800

0800a338 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a0a      	ldr	r2, [pc, #40]	; (800a370 <HAL_RNG_MspInit+0x38>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d10b      	bne.n	800a362 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800a34a:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <HAL_RNG_MspInit+0x3c>)
 800a34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a34e:	4a09      	ldr	r2, [pc, #36]	; (800a374 <HAL_RNG_MspInit+0x3c>)
 800a350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a354:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a356:	4b07      	ldr	r3, [pc, #28]	; (800a374 <HAL_RNG_MspInit+0x3c>)
 800a358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a35a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800a362:	bf00      	nop
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	50060800 	.word	0x50060800
 800a374:	40021000 	.word	0x40021000

0800a378 <HAL_RNG_MspDeInit>:

void HAL_RNG_MspDeInit(RNG_HandleTypeDef* rngHandle)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a07      	ldr	r2, [pc, #28]	; (800a3a4 <HAL_RNG_MspDeInit+0x2c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d105      	bne.n	800a396 <HAL_RNG_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <HAL_RNG_MspDeInit+0x30>)
 800a38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a38e:	4a06      	ldr	r2, [pc, #24]	; (800a3a8 <HAL_RNG_MspDeInit+0x30>)
 800a390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a394:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }
}
 800a396:	bf00      	nop
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	50060800 	.word	0x50060800
 800a3a8:	40021000 	.word	0x40021000

0800a3ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b092      	sub	sp, #72	; 0x48
 800a3b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a3b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	605a      	str	r2, [r3, #4]
 800a3bc:	609a      	str	r2, [r3, #8]
 800a3be:	60da      	str	r2, [r3, #12]
 800a3c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	2230      	movs	r2, #48	; 0x30
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f00b fc17 	bl	8015c00 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800a3d2:	4b44      	ldr	r3, [pc, #272]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3d4:	4a44      	ldr	r2, [pc, #272]	; (800a4e8 <MX_RTC_Init+0x13c>)
 800a3d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a3d8:	4b42      	ldr	r3, [pc, #264]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800a3de:	4b41      	ldr	r3, [pc, #260]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3e0:	227f      	movs	r2, #127	; 0x7f
 800a3e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800a3e4:	4b3f      	ldr	r3, [pc, #252]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3e6:	22ff      	movs	r2, #255	; 0xff
 800a3e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a3ea:	4b3e      	ldr	r3, [pc, #248]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a3f0:	4b3c      	ldr	r3, [pc, #240]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a3f6:	4b3b      	ldr	r3, [pc, #236]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a3fc:	4b39      	ldr	r3, [pc, #228]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a3fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a402:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800a404:	4b37      	ldr	r3, [pc, #220]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a406:	2200      	movs	r2, #0
 800a408:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a40a:	4836      	ldr	r0, [pc, #216]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a40c:	f008 f916 	bl	801263c <HAL_RTC_Init>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800a416:	f7ff ff71 	bl	800a2fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 800a41a:	230a      	movs	r3, #10
 800a41c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 20;
 800a420:	2314      	movs	r3, #20
 800a422:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 45;
 800a426:	232d      	movs	r3, #45	; 0x2d
 800a428:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a42c:	2300      	movs	r3, #0
 800a42e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a430:	2300      	movs	r3, #0
 800a432:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800a434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a438:	2200      	movs	r2, #0
 800a43a:	4619      	mov	r1, r3
 800a43c:	4829      	ldr	r0, [pc, #164]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a43e:	f008 f98d 	bl	801275c <HAL_RTC_SetTime>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800a448:	f7ff ff58 	bl	800a2fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a44c:	2301      	movs	r3, #1
 800a44e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800a452:	2301      	movs	r3, #1
 800a454:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 21;
 800a45e:	2315      	movs	r3, #21
 800a460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800a464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a468:	2200      	movs	r2, #0
 800a46a:	4619      	mov	r1, r3
 800a46c:	481d      	ldr	r0, [pc, #116]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a46e:	f008 fa77 	bl	8012960 <HAL_RTC_SetDate>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 800a478:	f7ff ff40 	bl	800a2fc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800a47c:	2300      	movs	r3, #0
 800a47e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a488:	2300      	movs	r3, #0
 800a48a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a48c:	2300      	movs	r3, #0
 800a48e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a490:	2300      	movs	r3, #0
 800a492:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a494:	2300      	movs	r3, #0
 800a496:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a498:	2300      	movs	r3, #0
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 800a49c:	2301      	movs	r3, #1
 800a49e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800a4a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a4a8:	463b      	mov	r3, r7
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	480d      	ldr	r0, [pc, #52]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a4b0:	f008 fb2c 	bl	8012b0c <HAL_RTC_SetAlarm_IT>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <MX_RTC_Init+0x112>
  {
    Error_Handler();
 800a4ba:	f7ff ff1f 	bl	800a2fc <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800a4be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	4806      	ldr	r0, [pc, #24]	; (800a4e4 <MX_RTC_Init+0x138>)
 800a4cc:	f008 fb1e 	bl	8012b0c <HAL_RTC_SetAlarm_IT>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 800a4d6:	f7ff ff11 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a4da:	bf00      	nop
 800a4dc:	3748      	adds	r7, #72	; 0x48
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20007828 	.word	0x20007828
 800a4e8:	40002800 	.word	0x40002800

0800a4ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b0aa      	sub	sp, #168	; 0xa8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a4f4:	f107 0310 	add.w	r3, r7, #16
 800a4f8:	2298      	movs	r2, #152	; 0x98
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f00b fb7f 	bl	8015c00 <memset>
  if(rtcHandle->Instance==RTC)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a16      	ldr	r2, [pc, #88]	; (800a560 <HAL_RTC_MspInit+0x74>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d124      	bne.n	800a556 <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a50c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a510:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a512:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a51a:	f107 0310 	add.w	r3, r7, #16
 800a51e:	4618      	mov	r0, r3
 800a520:	f007 f9da 	bl	80118d8 <HAL_RCCEx_PeriphCLKConfig>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800a52a:	f7ff fee7 	bl	800a2fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a52e:	4b0d      	ldr	r3, [pc, #52]	; (800a564 <HAL_RTC_MspInit+0x78>)
 800a530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a534:	4a0b      	ldr	r2, [pc, #44]	; (800a564 <HAL_RTC_MspInit+0x78>)
 800a536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a53a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a53e:	4b09      	ldr	r3, [pc, #36]	; (800a564 <HAL_RTC_MspInit+0x78>)
 800a540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a542:	4a08      	ldr	r2, [pc, #32]	; (800a564 <HAL_RTC_MspInit+0x78>)
 800a544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a548:	6593      	str	r3, [r2, #88]	; 0x58
 800a54a:	4b06      	ldr	r3, [pc, #24]	; (800a564 <HAL_RTC_MspInit+0x78>)
 800a54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a54e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800a556:	bf00      	nop
 800a558:	37a8      	adds	r7, #168	; 0xa8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	40002800 	.word	0x40002800
 800a564:	40021000 	.word	0x40021000

0800a568 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a56c:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a56e:	4a1c      	ldr	r2, [pc, #112]	; (800a5e0 <MX_SPI3_Init+0x78>)
 800a570:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a572:	4b1a      	ldr	r3, [pc, #104]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a574:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a578:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a57a:	4b18      	ldr	r3, [pc, #96]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a580:	4b16      	ldr	r3, [pc, #88]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a586:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a588:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a590:	2200      	movs	r2, #0
 800a592:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a59a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a59e:	2218      	movs	r2, #24
 800a5a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a5a2:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800a5b4:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a5b6:	2207      	movs	r2, #7
 800a5b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a5ba:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a5c0:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a5c2:	2208      	movs	r2, #8
 800a5c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a5c6:	4805      	ldr	r0, [pc, #20]	; (800a5dc <MX_SPI3_Init+0x74>)
 800a5c8:	f008 fcfc 	bl	8012fc4 <HAL_SPI_Init>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800a5d2:	f7ff fe93 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a5d6:	bf00      	nop
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	2000785c 	.word	0x2000785c
 800a5e0:	40003c00 	.word	0x40003c00

0800a5e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08a      	sub	sp, #40	; 0x28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5ec:	f107 0314 	add.w	r3, r7, #20
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	605a      	str	r2, [r3, #4]
 800a5f6:	609a      	str	r2, [r3, #8]
 800a5f8:	60da      	str	r2, [r3, #12]
 800a5fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a2c      	ldr	r2, [pc, #176]	; (800a6b4 <HAL_SPI_MspInit+0xd0>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d151      	bne.n	800a6aa <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a606:	4b2c      	ldr	r3, [pc, #176]	; (800a6b8 <HAL_SPI_MspInit+0xd4>)
 800a608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60a:	4a2b      	ldr	r2, [pc, #172]	; (800a6b8 <HAL_SPI_MspInit+0xd4>)
 800a60c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a610:	6593      	str	r3, [r2, #88]	; 0x58
 800a612:	4b29      	ldr	r3, [pc, #164]	; (800a6b8 <HAL_SPI_MspInit+0xd4>)
 800a614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a61a:	613b      	str	r3, [r7, #16]
 800a61c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a61e:	4b26      	ldr	r3, [pc, #152]	; (800a6b8 <HAL_SPI_MspInit+0xd4>)
 800a620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a622:	4a25      	ldr	r2, [pc, #148]	; (800a6b8 <HAL_SPI_MspInit+0xd4>)
 800a624:	f043 0304 	orr.w	r3, r3, #4
 800a628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a62a:	4b23      	ldr	r3, [pc, #140]	; (800a6b8 <HAL_SPI_MspInit+0xd4>)
 800a62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62e:	f003 0304 	and.w	r3, r3, #4
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800a636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a63a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a63c:	2302      	movs	r3, #2
 800a63e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a640:	2300      	movs	r3, #0
 800a642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a644:	2303      	movs	r3, #3
 800a646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a648:	2306      	movs	r3, #6
 800a64a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a64c:	f107 0314 	add.w	r3, r7, #20
 800a650:	4619      	mov	r1, r3
 800a652:	481a      	ldr	r0, [pc, #104]	; (800a6bc <HAL_SPI_MspInit+0xd8>)
 800a654:	f004 ff34 	bl	800f4c0 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel1;
 800a658:	4b19      	ldr	r3, [pc, #100]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a65a:	4a1a      	ldr	r2, [pc, #104]	; (800a6c4 <HAL_SPI_MspInit+0xe0>)
 800a65c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800a65e:	4b18      	ldr	r3, [pc, #96]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a660:	2210      	movs	r2, #16
 800a662:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a664:	4b16      	ldr	r3, [pc, #88]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a666:	2210      	movs	r2, #16
 800a668:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a66a:	4b15      	ldr	r3, [pc, #84]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a670:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a672:	2280      	movs	r2, #128	; 0x80
 800a674:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a676:	4b12      	ldr	r3, [pc, #72]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a678:	2200      	movs	r2, #0
 800a67a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a67e:	2200      	movs	r2, #0
 800a680:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800a682:	4b0f      	ldr	r3, [pc, #60]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a684:	2200      	movs	r2, #0
 800a686:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800a68e:	480c      	ldr	r0, [pc, #48]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a690:	f004 fbe8 	bl	800ee64 <HAL_DMA_Init>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800a69a:	f7ff fe2f 	bl	800a2fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a07      	ldr	r2, [pc, #28]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a6a2:	655a      	str	r2, [r3, #84]	; 0x54
 800a6a4:	4a06      	ldr	r2, [pc, #24]	; (800a6c0 <HAL_SPI_MspInit+0xdc>)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800a6aa:	bf00      	nop
 800a6ac:	3728      	adds	r7, #40	; 0x28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	40003c00 	.word	0x40003c00
 800a6b8:	40021000 	.word	0x40021000
 800a6bc:	48000800 	.word	0x48000800
 800a6c0:	200078c0 	.word	0x200078c0
 800a6c4:	40020008 	.word	0x40020008

0800a6c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6ce:	4b0f      	ldr	r3, [pc, #60]	; (800a70c <HAL_MspInit+0x44>)
 800a6d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6d2:	4a0e      	ldr	r2, [pc, #56]	; (800a70c <HAL_MspInit+0x44>)
 800a6d4:	f043 0301 	orr.w	r3, r3, #1
 800a6d8:	6613      	str	r3, [r2, #96]	; 0x60
 800a6da:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <HAL_MspInit+0x44>)
 800a6dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6de:	f003 0301 	and.w	r3, r3, #1
 800a6e2:	607b      	str	r3, [r7, #4]
 800a6e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6e6:	4b09      	ldr	r3, [pc, #36]	; (800a70c <HAL_MspInit+0x44>)
 800a6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ea:	4a08      	ldr	r2, [pc, #32]	; (800a70c <HAL_MspInit+0x44>)
 800a6ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6f0:	6593      	str	r3, [r2, #88]	; 0x58
 800a6f2:	4b06      	ldr	r3, [pc, #24]	; (800a70c <HAL_MspInit+0x44>)
 800a6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40021000 	.word	0x40021000

0800a710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a710:	b480      	push	{r7}
 800a712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a714:	e7fe      	b.n	800a714 <NMI_Handler+0x4>

0800a716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a716:	b480      	push	{r7}
 800a718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a71a:	e7fe      	b.n	800a71a <HardFault_Handler+0x4>

0800a71c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a71c:	b480      	push	{r7}
 800a71e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a720:	e7fe      	b.n	800a720 <MemManage_Handler+0x4>

0800a722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a722:	b480      	push	{r7}
 800a724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a726:	e7fe      	b.n	800a726 <BusFault_Handler+0x4>

0800a728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a72c:	e7fe      	b.n	800a72c <UsageFault_Handler+0x4>

0800a72e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a72e:	b480      	push	{r7}
 800a730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a732:	bf00      	nop
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a740:	bf00      	nop
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a74a:	b480      	push	{r7}
 800a74c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a74e:	bf00      	nop
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a75c:	f002 fa5a 	bl	800cc14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a760:	bf00      	nop
 800a762:	bd80      	pop	{r7, pc}

0800a764 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_2_Pin);
 800a768:	2001      	movs	r0, #1
 800a76a:	f005 f86b 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a76e:	bf00      	nop
 800a770:	bd80      	pop	{r7, pc}

0800a772 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_3_Pin);
 800a776:	2002      	movs	r0, #2
 800a778:	f005 f864 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800a77c:	bf00      	nop
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI5_CS_Pin);
 800a784:	2004      	movs	r0, #4
 800a786:	f005 f85d 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800a78a:	bf00      	nop
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800a794:	4802      	ldr	r0, [pc, #8]	; (800a7a0 <DMA1_Channel1_IRQHandler+0x10>)
 800a796:	f004 fd43 	bl	800f220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a79a:	bf00      	nop
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	200078c0 	.word	0x200078c0

0800a7a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800a7a8:	4802      	ldr	r0, [pc, #8]	; (800a7b4 <DMA1_Channel3_IRQHandler+0x10>)
 800a7aa:	f004 fd39 	bl	800f220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a7ae:	bf00      	nop
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000648 	.word	0x20000648

0800a7b8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a7bc:	4803      	ldr	r0, [pc, #12]	; (800a7cc <ADC1_2_IRQHandler+0x14>)
 800a7be:	f002 ff2d 	bl	800d61c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800a7c2:	4803      	ldr	r0, [pc, #12]	; (800a7d0 <ADC1_2_IRQHandler+0x18>)
 800a7c4:	f002 ff2a 	bl	800d61c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800a7c8:	bf00      	nop
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	200005e0 	.word	0x200005e0
 800a7d0:	20000578 	.word	0x20000578

0800a7d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_1_Pin);
 800a7d8:	2020      	movs	r0, #32
 800a7da:	f005 f833 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_BUTTON_LOUDNESS_Pin);
 800a7de:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a7e2:	f005 f82f 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a7e6:	bf00      	nop
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a7f0:	4803      	ldr	r0, [pc, #12]	; (800a800 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800a7f2:	f009 ff74 	bl	80146de <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800a7f6:	4803      	ldr	r0, [pc, #12]	; (800a804 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800a7f8:	f009 ff71 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800a7fc:	bf00      	nop
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20007b34 	.word	0x20007b34
 800a804:	200079b8 	.word	0x200079b8

0800a808 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a80c:	4803      	ldr	r0, [pc, #12]	; (800a81c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800a80e:	f009 ff66 	bl	80146de <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800a812:	4803      	ldr	r0, [pc, #12]	; (800a820 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800a814:	f009 ff63 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a818:	bf00      	nop
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20007b34 	.word	0x20007b34
 800a820:	20007bcc 	.word	0x20007bcc

0800a824 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a828:	4803      	ldr	r0, [pc, #12]	; (800a838 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800a82a:	f009 ff58 	bl	80146de <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800a82e:	4803      	ldr	r0, [pc, #12]	; (800a83c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800a830:	f009 ff55 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800a834:	bf00      	nop
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20007b34 	.word	0x20007b34
 800a83c:	20007a04 	.word	0x20007a04

0800a840 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a844:	4802      	ldr	r0, [pc, #8]	; (800a850 <TIM1_CC_IRQHandler+0x10>)
 800a846:	f009 ff4a 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800a84a:	bf00      	nop
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20007b34 	.word	0x20007b34

0800a854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a858:	4802      	ldr	r0, [pc, #8]	; (800a864 <TIM2_IRQHandler+0x10>)
 800a85a:	f009 ff40 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a85e:	bf00      	nop
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20007b80 	.word	0x20007b80

0800a868 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a86c:	4802      	ldr	r0, [pc, #8]	; (800a878 <TIM3_IRQHandler+0x10>)
 800a86e:	f009 ff36 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a872:	bf00      	nop
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20007a9c 	.word	0x20007a9c

0800a87c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a880:	4802      	ldr	r0, [pc, #8]	; (800a88c <TIM4_IRQHandler+0x10>)
 800a882:	f009 ff2c 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a886:	bf00      	nop
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000796c 	.word	0x2000796c

0800a890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(POWER_BUTTON_Pin);
 800a894:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a898:	f004 ffd4 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_BUTTON_VOLUME_FRONT_Pin);
 800a89c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a8a0:	f004 ffd0 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPI5_DC_Pin);
 800a8a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a8a8:	f004 ffcc 	bl	800f844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a8ac:	bf00      	nop
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800a8b4:	4802      	ldr	r0, [pc, #8]	; (800a8c0 <RTC_Alarm_IRQHandler+0x10>)
 800a8b6:	f008 fa83 	bl	8012dc0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800a8ba:	bf00      	nop
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20007828 	.word	0x20007828

0800a8c4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800a8c8:	4802      	ldr	r0, [pc, #8]	; (800a8d4 <TIM8_CC_IRQHandler+0x10>)
 800a8ca:	f009 ff08 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800a8ce:	bf00      	nop
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20007920 	.word	0x20007920

0800a8d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800a8dc:	4802      	ldr	r0, [pc, #8]	; (800a8e8 <TIM5_IRQHandler+0x10>)
 800a8de:	f009 fefe 	bl	80146de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800a8e2:	bf00      	nop
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20007a50 	.word	0x20007a50

0800a8ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800a8f0:	4802      	ldr	r0, [pc, #8]	; (800a8fc <SPI3_IRQHandler+0x10>)
 800a8f2:	f008 fd79 	bl	80133e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800a8f6:	bf00      	nop
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	2000785c 	.word	0x2000785c

0800a900 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a904:	4803      	ldr	r0, [pc, #12]	; (800a914 <TIM6_DAC_IRQHandler+0x14>)
 800a906:	f009 feea 	bl	80146de <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800a90a:	4803      	ldr	r0, [pc, #12]	; (800a918 <TIM6_DAC_IRQHandler+0x18>)
 800a90c:	f004 f8fb 	bl	800eb06 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a910:	bf00      	nop
 800a912:	bd80      	pop	{r7, pc}
 800a914:	20007ae8 	.word	0x20007ae8
 800a918:	200006a8 	.word	0x200006a8

0800a91c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a924:	4a14      	ldr	r2, [pc, #80]	; (800a978 <_sbrk+0x5c>)
 800a926:	4b15      	ldr	r3, [pc, #84]	; (800a97c <_sbrk+0x60>)
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a930:	4b13      	ldr	r3, [pc, #76]	; (800a980 <_sbrk+0x64>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a938:	4b11      	ldr	r3, [pc, #68]	; (800a980 <_sbrk+0x64>)
 800a93a:	4a12      	ldr	r2, [pc, #72]	; (800a984 <_sbrk+0x68>)
 800a93c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a93e:	4b10      	ldr	r3, [pc, #64]	; (800a980 <_sbrk+0x64>)
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4413      	add	r3, r2
 800a946:	693a      	ldr	r2, [r7, #16]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d207      	bcs.n	800a95c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a94c:	f00b f92e 	bl	8015bac <__errno>
 800a950:	4603      	mov	r3, r0
 800a952:	220c      	movs	r2, #12
 800a954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	e009      	b.n	800a970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a95c:	4b08      	ldr	r3, [pc, #32]	; (800a980 <_sbrk+0x64>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a962:	4b07      	ldr	r3, [pc, #28]	; (800a980 <_sbrk+0x64>)
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4413      	add	r3, r2
 800a96a:	4a05      	ldr	r2, [pc, #20]	; (800a980 <_sbrk+0x64>)
 800a96c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a96e:	68fb      	ldr	r3, [r7, #12]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3718      	adds	r7, #24
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	20050000 	.word	0x20050000
 800a97c:	00002000 	.word	0x00002000
 800a980:	20000204 	.word	0x20000204
 800a984:	20007c40 	.word	0x20007c40

0800a988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a988:	b480      	push	{r7}
 800a98a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a98c:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <SystemInit+0x20>)
 800a98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a992:	4a05      	ldr	r2, [pc, #20]	; (800a9a8 <SystemInit+0x20>)
 800a994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a99c:	bf00      	nop
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	e000ed00 	.word	0xe000ed00

0800a9ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08c      	sub	sp, #48	; 0x30
 800a9b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a9b2:	f107 030c 	add.w	r3, r7, #12
 800a9b6:	2224      	movs	r2, #36	; 0x24
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f00b f920 	bl	8015c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	605a      	str	r2, [r3, #4]
 800a9c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a9ca:	4b23      	ldr	r3, [pc, #140]	; (800aa58 <MX_TIM1_Init+0xac>)
 800a9cc:	4a23      	ldr	r2, [pc, #140]	; (800aa5c <MX_TIM1_Init+0xb0>)
 800a9ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a9d0:	4b21      	ldr	r3, [pc, #132]	; (800aa58 <MX_TIM1_Init+0xac>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9d6:	4b20      	ldr	r3, [pc, #128]	; (800aa58 <MX_TIM1_Init+0xac>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a9dc:	4b1e      	ldr	r3, [pc, #120]	; (800aa58 <MX_TIM1_Init+0xac>)
 800a9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9e4:	4b1c      	ldr	r3, [pc, #112]	; (800aa58 <MX_TIM1_Init+0xac>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a9ea:	4b1b      	ldr	r3, [pc, #108]	; (800aa58 <MX_TIM1_Init+0xac>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9f0:	4b19      	ldr	r3, [pc, #100]	; (800aa58 <MX_TIM1_Init+0xac>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800aa02:	2300      	movs	r3, #0
 800aa04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800aa12:	2300      	movs	r3, #0
 800aa14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800aa16:	2300      	movs	r3, #0
 800aa18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800aa1a:	f107 030c 	add.w	r3, r7, #12
 800aa1e:	4619      	mov	r1, r3
 800aa20:	480d      	ldr	r0, [pc, #52]	; (800aa58 <MX_TIM1_Init+0xac>)
 800aa22:	f009 fc43 	bl	80142ac <HAL_TIM_Encoder_Init>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800aa2c:	f7ff fc66 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa30:	2300      	movs	r3, #0
 800aa32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800aa34:	2300      	movs	r3, #0
 800aa36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800aa3c:	463b      	mov	r3, r7
 800aa3e:	4619      	mov	r1, r3
 800aa40:	4805      	ldr	r0, [pc, #20]	; (800aa58 <MX_TIM1_Init+0xac>)
 800aa42:	f00a fcad 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800aa4c:	f7ff fc56 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800aa50:	bf00      	nop
 800aa52:	3730      	adds	r7, #48	; 0x30
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20007b34 	.word	0x20007b34
 800aa5c:	40012c00 	.word	0x40012c00

0800aa60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08c      	sub	sp, #48	; 0x30
 800aa64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800aa66:	f107 030c 	add.w	r3, r7, #12
 800aa6a:	2224      	movs	r2, #36	; 0x24
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f00b f8c6 	bl	8015c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa74:	463b      	mov	r3, r7
 800aa76:	2200      	movs	r2, #0
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	605a      	str	r2, [r3, #4]
 800aa7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800aa7e:	4b21      	ldr	r3, [pc, #132]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aa80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800aa84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800aa86:	4b1f      	ldr	r3, [pc, #124]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa8c:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 800aa92:	4b1c      	ldr	r3, [pc, #112]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aa94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aa98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa9a:	4b1a      	ldr	r3, [pc, #104]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aaa0:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800aaae:	2301      	movs	r3, #1
 800aab0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800aab2:	2300      	movs	r3, #0
 800aab4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800aaba:	2300      	movs	r3, #0
 800aabc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800aabe:	2301      	movs	r3, #1
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800aac2:	2300      	movs	r3, #0
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800aaca:	f107 030c 	add.w	r3, r7, #12
 800aace:	4619      	mov	r1, r3
 800aad0:	480c      	ldr	r0, [pc, #48]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aad2:	f009 fbeb 	bl	80142ac <HAL_TIM_Encoder_Init>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800aadc:	f7ff fc0e 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aae0:	2300      	movs	r3, #0
 800aae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800aae8:	463b      	mov	r3, r7
 800aaea:	4619      	mov	r1, r3
 800aaec:	4805      	ldr	r0, [pc, #20]	; (800ab04 <MX_TIM2_Init+0xa4>)
 800aaee:	f00a fc57 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800aaf8:	f7ff fc00 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800aafc:	bf00      	nop
 800aafe:	3730      	adds	r7, #48	; 0x30
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	20007b80 	.word	0x20007b80

0800ab08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08c      	sub	sp, #48	; 0x30
 800ab0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ab0e:	f107 030c 	add.w	r3, r7, #12
 800ab12:	2224      	movs	r2, #36	; 0x24
 800ab14:	2100      	movs	r1, #0
 800ab16:	4618      	mov	r0, r3
 800ab18:	f00b f872 	bl	8015c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab1c:	463b      	mov	r3, r7
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	605a      	str	r2, [r3, #4]
 800ab24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ab26:	4b21      	ldr	r3, [pc, #132]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab28:	4a21      	ldr	r2, [pc, #132]	; (800abb0 <MX_TIM3_Init+0xa8>)
 800ab2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ab2c:	4b1f      	ldr	r3, [pc, #124]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab32:	4b1e      	ldr	r3, [pc, #120]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800ab38:	4b1c      	ldr	r3, [pc, #112]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ab40:	4b1a      	ldr	r3, [pc, #104]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab46:	4b19      	ldr	r3, [pc, #100]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800ab50:	2300      	movs	r3, #0
 800ab52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ab54:	2301      	movs	r3, #1
 800ab56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ab60:	2300      	movs	r3, #0
 800ab62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ab64:	2301      	movs	r3, #1
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	4619      	mov	r1, r3
 800ab76:	480d      	ldr	r0, [pc, #52]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab78:	f009 fb98 	bl	80142ac <HAL_TIM_Encoder_Init>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800ab82:	f7ff fbbb 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab86:	2300      	movs	r3, #0
 800ab88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ab8e:	463b      	mov	r3, r7
 800ab90:	4619      	mov	r1, r3
 800ab92:	4806      	ldr	r0, [pc, #24]	; (800abac <MX_TIM3_Init+0xa4>)
 800ab94:	f00a fc04 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800ab9e:	f7ff fbad 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800aba2:	bf00      	nop
 800aba4:	3730      	adds	r7, #48	; 0x30
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20007a9c 	.word	0x20007a9c
 800abb0:	40000400 	.word	0x40000400

0800abb4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08c      	sub	sp, #48	; 0x30
 800abb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800abba:	f107 030c 	add.w	r3, r7, #12
 800abbe:	2224      	movs	r2, #36	; 0x24
 800abc0:	2100      	movs	r1, #0
 800abc2:	4618      	mov	r0, r3
 800abc4:	f00b f81c 	bl	8015c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abc8:	463b      	mov	r3, r7
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	605a      	str	r2, [r3, #4]
 800abd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800abd2:	4b21      	ldr	r3, [pc, #132]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800abd4:	4a21      	ldr	r2, [pc, #132]	; (800ac5c <MX_TIM4_Init+0xa8>)
 800abd6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800abd8:	4b1f      	ldr	r3, [pc, #124]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800abda:	2200      	movs	r2, #0
 800abdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abde:	4b1e      	ldr	r3, [pc, #120]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800abe4:	4b1c      	ldr	r3, [pc, #112]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800abe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abec:	4b1a      	ldr	r3, [pc, #104]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800abee:	2200      	movs	r2, #0
 800abf0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800abf2:	4b19      	ldr	r3, [pc, #100]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800abf8:	2301      	movs	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800abfc:	2300      	movs	r3, #0
 800abfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800ac00:	2301      	movs	r3, #1
 800ac02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ac10:	2301      	movs	r3, #1
 800ac12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ac14:	2300      	movs	r3, #0
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800ac1c:	f107 030c 	add.w	r3, r7, #12
 800ac20:	4619      	mov	r1, r3
 800ac22:	480d      	ldr	r0, [pc, #52]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800ac24:	f009 fb42 	bl	80142ac <HAL_TIM_Encoder_Init>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800ac2e:	f7ff fb65 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ac32:	2300      	movs	r3, #0
 800ac34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ac3a:	463b      	mov	r3, r7
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4806      	ldr	r0, [pc, #24]	; (800ac58 <MX_TIM4_Init+0xa4>)
 800ac40:	f00a fbae 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800ac4a:	f7ff fb57 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800ac4e:	bf00      	nop
 800ac50:	3730      	adds	r7, #48	; 0x30
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000796c 	.word	0x2000796c
 800ac5c:	40000800 	.word	0x40000800

0800ac60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08c      	sub	sp, #48	; 0x30
 800ac64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ac66:	f107 030c 	add.w	r3, r7, #12
 800ac6a:	2224      	movs	r2, #36	; 0x24
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f00a ffc6 	bl	8015c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac74:	463b      	mov	r3, r7
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	605a      	str	r2, [r3, #4]
 800ac7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800ac7e:	4b21      	ldr	r3, [pc, #132]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800ac80:	4a21      	ldr	r2, [pc, #132]	; (800ad08 <MX_TIM5_Init+0xa8>)
 800ac82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800ac84:	4b1f      	ldr	r3, [pc, #124]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac8a:	4b1e      	ldr	r3, [pc, #120]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65534;
 800ac90:	4b1c      	ldr	r3, [pc, #112]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800ac92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac98:	4b1a      	ldr	r3, [pc, #104]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac9e:	4b19      	ldr	r3, [pc, #100]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800aca4:	2301      	movs	r3, #1
 800aca6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800aca8:	2300      	movs	r3, #0
 800acaa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800acac:	2301      	movs	r3, #1
 800acae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800acb0:	2300      	movs	r3, #0
 800acb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800acb8:	2300      	movs	r3, #0
 800acba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800acbc:	2301      	movs	r3, #1
 800acbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800acc0:	2300      	movs	r3, #0
 800acc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800acc8:	f107 030c 	add.w	r3, r7, #12
 800accc:	4619      	mov	r1, r3
 800acce:	480d      	ldr	r0, [pc, #52]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800acd0:	f009 faec 	bl	80142ac <HAL_TIM_Encoder_Init>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800acda:	f7ff fb0f 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800acde:	2300      	movs	r3, #0
 800ace0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ace2:	2300      	movs	r3, #0
 800ace4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ace6:	463b      	mov	r3, r7
 800ace8:	4619      	mov	r1, r3
 800acea:	4806      	ldr	r0, [pc, #24]	; (800ad04 <MX_TIM5_Init+0xa4>)
 800acec:	f00a fb58 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800acf6:	f7ff fb01 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800acfa:	bf00      	nop
 800acfc:	3730      	adds	r7, #48	; 0x30
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20007a50 	.word	0x20007a50
 800ad08:	40000c00 	.word	0x40000c00

0800ad0c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad12:	1d3b      	adds	r3, r7, #4
 800ad14:	2200      	movs	r2, #0
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	605a      	str	r2, [r3, #4]
 800ad1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ad1c:	4b14      	ldr	r3, [pc, #80]	; (800ad70 <MX_TIM6_Init+0x64>)
 800ad1e:	4a15      	ldr	r2, [pc, #84]	; (800ad74 <MX_TIM6_Init+0x68>)
 800ad20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1357;
 800ad22:	4b13      	ldr	r3, [pc, #76]	; (800ad70 <MX_TIM6_Init+0x64>)
 800ad24:	f240 524d 	movw	r2, #1357	; 0x54d
 800ad28:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad2a:	4b11      	ldr	r3, [pc, #68]	; (800ad70 <MX_TIM6_Init+0x64>)
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 800ad30:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <MX_TIM6_Init+0x64>)
 800ad32:	2201      	movs	r2, #1
 800ad34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad36:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <MX_TIM6_Init+0x64>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ad3c:	480c      	ldr	r0, [pc, #48]	; (800ad70 <MX_TIM6_Init+0x64>)
 800ad3e:	f008 fdd7 	bl	80138f0 <HAL_TIM_Base_Init>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800ad48:	f7ff fad8 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ad54:	1d3b      	adds	r3, r7, #4
 800ad56:	4619      	mov	r1, r3
 800ad58:	4805      	ldr	r0, [pc, #20]	; (800ad70 <MX_TIM6_Init+0x64>)
 800ad5a:	f00a fb21 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800ad64:	f7ff faca 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ad68:	bf00      	nop
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20007ae8 	.word	0x20007ae8
 800ad74:	40001000 	.word	0x40001000

0800ad78 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08c      	sub	sp, #48	; 0x30
 800ad7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800ad7e:	f107 030c 	add.w	r3, r7, #12
 800ad82:	2224      	movs	r2, #36	; 0x24
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f00a ff3a 	bl	8015c00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad8c:	463b      	mov	r3, r7
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	605a      	str	r2, [r3, #4]
 800ad94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800ad96:	4b23      	ldr	r3, [pc, #140]	; (800ae24 <MX_TIM8_Init+0xac>)
 800ad98:	4a23      	ldr	r2, [pc, #140]	; (800ae28 <MX_TIM8_Init+0xb0>)
 800ad9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800ad9c:	4b21      	ldr	r3, [pc, #132]	; (800ae24 <MX_TIM8_Init+0xac>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ada2:	4b20      	ldr	r3, [pc, #128]	; (800ae24 <MX_TIM8_Init+0xac>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800ada8:	4b1e      	ldr	r3, [pc, #120]	; (800ae24 <MX_TIM8_Init+0xac>)
 800adaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800adb0:	4b1c      	ldr	r3, [pc, #112]	; (800ae24 <MX_TIM8_Init+0xac>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800adb6:	4b1b      	ldr	r3, [pc, #108]	; (800ae24 <MX_TIM8_Init+0xac>)
 800adb8:	2200      	movs	r2, #0
 800adba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800adbc:	4b19      	ldr	r3, [pc, #100]	; (800ae24 <MX_TIM8_Init+0xac>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800adc2:	2301      	movs	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800adc6:	2300      	movs	r3, #0
 800adc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800adca:	2301      	movs	r3, #1
 800adcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800adce:	2300      	movs	r3, #0
 800add0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800add6:	2300      	movs	r3, #0
 800add8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800adda:	2301      	movs	r3, #1
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800adde:	2300      	movs	r3, #0
 800ade0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800ade6:	f107 030c 	add.w	r3, r7, #12
 800adea:	4619      	mov	r1, r3
 800adec:	480d      	ldr	r0, [pc, #52]	; (800ae24 <MX_TIM8_Init+0xac>)
 800adee:	f009 fa5d 	bl	80142ac <HAL_TIM_Encoder_Init>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800adf8:	f7ff fa80 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800adfc:	2300      	movs	r3, #0
 800adfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ae00:	2300      	movs	r3, #0
 800ae02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae04:	2300      	movs	r3, #0
 800ae06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ae08:	463b      	mov	r3, r7
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4805      	ldr	r0, [pc, #20]	; (800ae24 <MX_TIM8_Init+0xac>)
 800ae0e:	f00a fac7 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800ae18:	f7ff fa70 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800ae1c:	bf00      	nop
 800ae1e:	3730      	adds	r7, #48	; 0x30
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	20007920 	.word	0x20007920
 800ae28:	40013400 	.word	0x40013400

0800ae2c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b096      	sub	sp, #88	; 0x58
 800ae30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ae32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ae36:	2200      	movs	r2, #0
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	605a      	str	r2, [r3, #4]
 800ae3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ae3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
 800ae46:	605a      	str	r2, [r3, #4]
 800ae48:	609a      	str	r2, [r3, #8]
 800ae4a:	60da      	str	r2, [r3, #12]
 800ae4c:	611a      	str	r2, [r3, #16]
 800ae4e:	615a      	str	r2, [r3, #20]
 800ae50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ae52:	1d3b      	adds	r3, r7, #4
 800ae54:	222c      	movs	r2, #44	; 0x2c
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f00a fed1 	bl	8015c00 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800ae5e:	4b3b      	ldr	r3, [pc, #236]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae60:	4a3b      	ldr	r2, [pc, #236]	; (800af50 <MX_TIM15_Init+0x124>)
 800ae62:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 65535;
 800ae64:	4b39      	ldr	r3, [pc, #228]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae6a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae6c:	4b37      	ldr	r3, [pc, #220]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800ae72:	4b36      	ldr	r3, [pc, #216]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae78:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800ae7a:	4b34      	ldr	r3, [pc, #208]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800ae82:	4b32      	ldr	r3, [pc, #200]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae88:	4b30      	ldr	r3, [pc, #192]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 800ae8e:	482f      	ldr	r0, [pc, #188]	; (800af4c <MX_TIM15_Init+0x120>)
 800ae90:	f008 fe15 	bl	8013abe <HAL_TIM_OC_Init>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d001      	beq.n	800ae9e <MX_TIM15_Init+0x72>
  {
    Error_Handler();
 800ae9a:	f7ff fa2f 	bl	800a2fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800aea6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4827      	ldr	r0, [pc, #156]	; (800af4c <MX_TIM15_Init+0x120>)
 800aeae:	f00a fa77 	bl	80153a0 <HAL_TIMEx_MasterConfigSynchronization>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 800aeb8:	f7ff fa20 	bl	800a2fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800aebc:	2300      	movs	r3, #0
 800aebe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 55000;
 800aec0:	f24d 63d8 	movw	r3, #55000	; 0xd6d8
 800aec4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800aeca:	2300      	movs	r3, #0
 800aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aece:	2300      	movs	r3, #0
 800aed0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800aed2:	2300      	movs	r3, #0
 800aed4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800aed6:	2300      	movs	r3, #0
 800aed8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aeda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aede:	2200      	movs	r2, #0
 800aee0:	4619      	mov	r1, r3
 800aee2:	481a      	ldr	r0, [pc, #104]	; (800af4c <MX_TIM15_Init+0x120>)
 800aee4:	f009 fd1a 	bl	801491c <HAL_TIM_OC_ConfigChannel>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800aeee:	f7ff fa05 	bl	800a2fc <Error_Handler>
  }
  sConfigOC.Pulse = 5500;
 800aef2:	f241 537c 	movw	r3, #5500	; 0x157c
 800aef6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800aef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aefc:	2204      	movs	r2, #4
 800aefe:	4619      	mov	r1, r3
 800af00:	4812      	ldr	r0, [pc, #72]	; (800af4c <MX_TIM15_Init+0x120>)
 800af02:	f009 fd0b 	bl	801491c <HAL_TIM_OC_ConfigChannel>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 800af0c:	f7ff f9f6 	bl	800a2fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800af10:	2300      	movs	r3, #0
 800af12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800af14:	2300      	movs	r3, #0
 800af16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800af20:	2300      	movs	r3, #0
 800af22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800af24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800af28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800af2e:	1d3b      	adds	r3, r7, #4
 800af30:	4619      	mov	r1, r3
 800af32:	4806      	ldr	r0, [pc, #24]	; (800af4c <MX_TIM15_Init+0x120>)
 800af34:	f00a fabc 	bl	80154b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 800af3e:	f7ff f9dd 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800af42:	bf00      	nop
 800af44:	3758      	adds	r7, #88	; 0x58
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	200079b8 	.word	0x200079b8
 800af50:	40014000 	.word	0x40014000

0800af54 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b092      	sub	sp, #72	; 0x48
 800af58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800af5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	605a      	str	r2, [r3, #4]
 800af64:	609a      	str	r2, [r3, #8]
 800af66:	60da      	str	r2, [r3, #12]
 800af68:	611a      	str	r2, [r3, #16]
 800af6a:	615a      	str	r2, [r3, #20]
 800af6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800af6e:	463b      	mov	r3, r7
 800af70:	222c      	movs	r2, #44	; 0x2c
 800af72:	2100      	movs	r1, #0
 800af74:	4618      	mov	r0, r3
 800af76:	f00a fe43 	bl	8015c00 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800af7a:	4b30      	ldr	r3, [pc, #192]	; (800b03c <MX_TIM16_Init+0xe8>)
 800af7c:	4a30      	ldr	r2, [pc, #192]	; (800b040 <MX_TIM16_Init+0xec>)
 800af7e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1199;
 800af80:	4b2e      	ldr	r3, [pc, #184]	; (800b03c <MX_TIM16_Init+0xe8>)
 800af82:	f240 42af 	movw	r2, #1199	; 0x4af
 800af86:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af88:	4b2c      	ldr	r3, [pc, #176]	; (800b03c <MX_TIM16_Init+0xe8>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800af8e:	4b2b      	ldr	r3, [pc, #172]	; (800b03c <MX_TIM16_Init+0xe8>)
 800af90:	f240 32e7 	movw	r2, #999	; 0x3e7
 800af94:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af96:	4b29      	ldr	r3, [pc, #164]	; (800b03c <MX_TIM16_Init+0xe8>)
 800af98:	2200      	movs	r2, #0
 800af9a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800af9c:	4b27      	ldr	r3, [pc, #156]	; (800b03c <MX_TIM16_Init+0xe8>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afa2:	4b26      	ldr	r3, [pc, #152]	; (800b03c <MX_TIM16_Init+0xe8>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800afa8:	4824      	ldr	r0, [pc, #144]	; (800b03c <MX_TIM16_Init+0xe8>)
 800afaa:	f008 fca1 	bl	80138f0 <HAL_TIM_Base_Init>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800afb4:	f7ff f9a2 	bl	800a2fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800afb8:	4820      	ldr	r0, [pc, #128]	; (800b03c <MX_TIM16_Init+0xe8>)
 800afba:	f009 f80f 	bl	8013fdc <HAL_TIM_PWM_Init>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800afc4:	f7ff f99a 	bl	800a2fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800afc8:	2360      	movs	r3, #96	; 0x60
 800afca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800afd0:	2300      	movs	r3, #0
 800afd2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800afd4:	2300      	movs	r3, #0
 800afd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800afd8:	2300      	movs	r3, #0
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800afdc:	2300      	movs	r3, #0
 800afde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800afe0:	2300      	movs	r3, #0
 800afe2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800afe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afe8:	2200      	movs	r2, #0
 800afea:	4619      	mov	r1, r3
 800afec:	4813      	ldr	r0, [pc, #76]	; (800b03c <MX_TIM16_Init+0xe8>)
 800afee:	f009 fd0f 	bl	8014a10 <HAL_TIM_PWM_ConfigChannel>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 800aff8:	f7ff f980 	bl	800a2fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800affc:	2300      	movs	r3, #0
 800affe:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b000:	2300      	movs	r3, #0
 800b002:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b004:	2300      	movs	r3, #0
 800b006:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b014:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b016:	2300      	movs	r3, #0
 800b018:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800b01a:	463b      	mov	r3, r7
 800b01c:	4619      	mov	r1, r3
 800b01e:	4807      	ldr	r0, [pc, #28]	; (800b03c <MX_TIM16_Init+0xe8>)
 800b020:	f00a fa46 	bl	80154b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800b02a:	f7ff f967 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800b02e:	4803      	ldr	r0, [pc, #12]	; (800b03c <MX_TIM16_Init+0xe8>)
 800b030:	f000 fa3a 	bl	800b4a8 <HAL_TIM_MspPostInit>

}
 800b034:	bf00      	nop
 800b036:	3748      	adds	r7, #72	; 0x48
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	20007bcc 	.word	0x20007bcc
 800b040:	40014400 	.word	0x40014400

0800b044 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b092      	sub	sp, #72	; 0x48
 800b048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800b04a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b04e:	2200      	movs	r2, #0
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	605a      	str	r2, [r3, #4]
 800b054:	609a      	str	r2, [r3, #8]
 800b056:	60da      	str	r2, [r3, #12]
 800b058:	611a      	str	r2, [r3, #16]
 800b05a:	615a      	str	r2, [r3, #20]
 800b05c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b05e:	463b      	mov	r3, r7
 800b060:	222c      	movs	r2, #44	; 0x2c
 800b062:	2100      	movs	r1, #0
 800b064:	4618      	mov	r0, r3
 800b066:	f00a fdcb 	bl	8015c00 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800b06a:	4b2f      	ldr	r3, [pc, #188]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b06c:	4a2f      	ldr	r2, [pc, #188]	; (800b12c <MX_TIM17_Init+0xe8>)
 800b06e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2999;
 800b070:	4b2d      	ldr	r3, [pc, #180]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b072:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800b076:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b078:	4b2b      	ldr	r3, [pc, #172]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 800b07e:	4b2a      	ldr	r3, [pc, #168]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b080:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b084:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b086:	4b28      	ldr	r3, [pc, #160]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b088:	2200      	movs	r2, #0
 800b08a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800b08c:	4b26      	ldr	r3, [pc, #152]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b08e:	2200      	movs	r2, #0
 800b090:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b092:	4b25      	ldr	r3, [pc, #148]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b094:	2200      	movs	r2, #0
 800b096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800b098:	4823      	ldr	r0, [pc, #140]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b09a:	f008 fc29 	bl	80138f0 <HAL_TIM_Base_Init>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 800b0a4:	f7ff f92a 	bl	800a2fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 800b0a8:	481f      	ldr	r0, [pc, #124]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b0aa:	f008 fd08 	bl	8013abe <HAL_TIM_OC_Init>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 800b0b4:	f7ff f922 	bl	800a2fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 2998;
 800b0bc:	f640 33b6 	movw	r3, #2998	; 0xbb6
 800b0c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b0d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b0da:	2200      	movs	r2, #0
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4812      	ldr	r0, [pc, #72]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b0e0:	f009 fc1c 	bl	801491c <HAL_TIM_OC_ConfigChannel>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800b0ea:	f7ff f907 	bl	800a2fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b106:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b108:	2300      	movs	r3, #0
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800b10c:	463b      	mov	r3, r7
 800b10e:	4619      	mov	r1, r3
 800b110:	4805      	ldr	r0, [pc, #20]	; (800b128 <MX_TIM17_Init+0xe4>)
 800b112:	f00a f9cd 	bl	80154b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 800b11c:	f7ff f8ee 	bl	800a2fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800b120:	bf00      	nop
 800b122:	3748      	adds	r7, #72	; 0x48
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	20007a04 	.word	0x20007a04
 800b12c:	40014800 	.word	0x40014800

0800b130 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b094      	sub	sp, #80	; 0x50
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b138:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b13c:	2200      	movs	r2, #0
 800b13e:	601a      	str	r2, [r3, #0]
 800b140:	605a      	str	r2, [r3, #4]
 800b142:	609a      	str	r2, [r3, #8]
 800b144:	60da      	str	r2, [r3, #12]
 800b146:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a9a      	ldr	r2, [pc, #616]	; (800b3b8 <HAL_TIM_Encoder_MspInit+0x288>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d12a      	bne.n	800b1a8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800b152:	4b9a      	ldr	r3, [pc, #616]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b156:	4a99      	ldr	r2, [pc, #612]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b15c:	6613      	str	r3, [r2, #96]	; 0x60
 800b15e:	4b97      	ldr	r3, [pc, #604]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b166:	63bb      	str	r3, [r7, #56]	; 0x38
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b16a:	4b94      	ldr	r3, [pc, #592]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b16e:	4a93      	ldr	r2, [pc, #588]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b176:	4b91      	ldr	r3, [pc, #580]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b17a:	f003 0301 	and.w	r3, r3, #1
 800b17e:	637b      	str	r3, [r7, #52]	; 0x34
 800b180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800b182:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b188:	2302      	movs	r3, #2
 800b18a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b190:	2300      	movs	r3, #0
 800b192:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b194:	2301      	movs	r3, #1
 800b196:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b198:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b19c:	4619      	mov	r1, r3
 800b19e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b1a2:	f004 f98d 	bl	800f4c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800b1a6:	e103      	b.n	800b3b0 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM2)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1b0:	d146      	bne.n	800b240 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b1b2:	4b82      	ldr	r3, [pc, #520]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b6:	4a81      	ldr	r2, [pc, #516]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1b8:	f043 0301 	orr.w	r3, r3, #1
 800b1bc:	6593      	str	r3, [r2, #88]	; 0x58
 800b1be:	4b7f      	ldr	r3, [pc, #508]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	633b      	str	r3, [r7, #48]	; 0x30
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1ca:	4b7c      	ldr	r3, [pc, #496]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ce:	4a7b      	ldr	r2, [pc, #492]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1d0:	f043 0301 	orr.w	r3, r3, #1
 800b1d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1d6:	4b79      	ldr	r3, [pc, #484]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1da:	f003 0301 	and.w	r3, r3, #1
 800b1de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b1e2:	4b76      	ldr	r3, [pc, #472]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1e6:	4a75      	ldr	r2, [pc, #468]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1e8:	f043 0302 	orr.w	r3, r3, #2
 800b1ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b1ee:	4b73      	ldr	r3, [pc, #460]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f2:	f003 0302 	and.w	r3, r3, #2
 800b1f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800b1fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b200:	2302      	movs	r3, #2
 800b202:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b204:	2300      	movs	r3, #0
 800b206:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b208:	2300      	movs	r3, #0
 800b20a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b20c:	2301      	movs	r3, #1
 800b20e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b210:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b214:	4619      	mov	r1, r3
 800b216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b21a:	f004 f951 	bl	800f4c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b21e:	2308      	movs	r3, #8
 800b220:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b222:	2302      	movs	r3, #2
 800b224:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b226:	2300      	movs	r3, #0
 800b228:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b22a:	2300      	movs	r3, #0
 800b22c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b22e:	2301      	movs	r3, #1
 800b230:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b232:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b236:	4619      	mov	r1, r3
 800b238:	4861      	ldr	r0, [pc, #388]	; (800b3c0 <HAL_TIM_Encoder_MspInit+0x290>)
 800b23a:	f004 f941 	bl	800f4c0 <HAL_GPIO_Init>
}
 800b23e:	e0b7      	b.n	800b3b0 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM3)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a5f      	ldr	r2, [pc, #380]	; (800b3c4 <HAL_TIM_Encoder_MspInit+0x294>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d128      	bne.n	800b29c <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b24a:	4b5c      	ldr	r3, [pc, #368]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b24c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24e:	4a5b      	ldr	r2, [pc, #364]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b250:	f043 0302 	orr.w	r3, r3, #2
 800b254:	6593      	str	r3, [r2, #88]	; 0x58
 800b256:	4b59      	ldr	r3, [pc, #356]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	627b      	str	r3, [r7, #36]	; 0x24
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b262:	4b56      	ldr	r3, [pc, #344]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b266:	4a55      	ldr	r2, [pc, #340]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b268:	f043 0302 	orr.w	r3, r3, #2
 800b26c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b26e:	4b53      	ldr	r3, [pc, #332]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	623b      	str	r3, [r7, #32]
 800b278:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800b27a:	2330      	movs	r3, #48	; 0x30
 800b27c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b27e:	2302      	movs	r3, #2
 800b280:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b282:	2300      	movs	r3, #0
 800b284:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b286:	2300      	movs	r3, #0
 800b288:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b28a:	2302      	movs	r3, #2
 800b28c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b28e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b292:	4619      	mov	r1, r3
 800b294:	484a      	ldr	r0, [pc, #296]	; (800b3c0 <HAL_TIM_Encoder_MspInit+0x290>)
 800b296:	f004 f913 	bl	800f4c0 <HAL_GPIO_Init>
}
 800b29a:	e089      	b.n	800b3b0 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM4)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a49      	ldr	r2, [pc, #292]	; (800b3c8 <HAL_TIM_Encoder_MspInit+0x298>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d128      	bne.n	800b2f8 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b2a6:	4b45      	ldr	r3, [pc, #276]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2aa:	4a44      	ldr	r2, [pc, #272]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2ac:	f043 0304 	orr.w	r3, r3, #4
 800b2b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b2b2:	4b42      	ldr	r3, [pc, #264]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	61fb      	str	r3, [r7, #28]
 800b2bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2be:	4b3f      	ldr	r3, [pc, #252]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2c2:	4a3e      	ldr	r2, [pc, #248]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2c4:	f043 0302 	orr.w	r3, r3, #2
 800b2c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2ca:	4b3c      	ldr	r3, [pc, #240]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	61bb      	str	r3, [r7, #24]
 800b2d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b2d6:	23c0      	movs	r3, #192	; 0xc0
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2da:	2302      	movs	r3, #2
 800b2dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4833      	ldr	r0, [pc, #204]	; (800b3c0 <HAL_TIM_Encoder_MspInit+0x290>)
 800b2f2:	f004 f8e5 	bl	800f4c0 <HAL_GPIO_Init>
}
 800b2f6:	e05b      	b.n	800b3b0 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM5)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a33      	ldr	r2, [pc, #204]	; (800b3cc <HAL_TIM_Encoder_MspInit+0x29c>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d129      	bne.n	800b356 <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b302:	4b2e      	ldr	r3, [pc, #184]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b306:	4a2d      	ldr	r2, [pc, #180]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b308:	f043 0308 	orr.w	r3, r3, #8
 800b30c:	6593      	str	r3, [r2, #88]	; 0x58
 800b30e:	4b2b      	ldr	r3, [pc, #172]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b312:	f003 0308 	and.w	r3, r3, #8
 800b316:	617b      	str	r3, [r7, #20]
 800b318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b31a:	4b28      	ldr	r3, [pc, #160]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b31e:	4a27      	ldr	r2, [pc, #156]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b320:	f043 0301 	orr.w	r3, r3, #1
 800b324:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b326:	4b25      	ldr	r3, [pc, #148]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	613b      	str	r3, [r7, #16]
 800b330:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b332:	2303      	movs	r3, #3
 800b334:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b336:	2302      	movs	r3, #2
 800b338:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b33e:	2300      	movs	r3, #0
 800b340:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b342:	2302      	movs	r3, #2
 800b344:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b346:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b34a:	4619      	mov	r1, r3
 800b34c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b350:	f004 f8b6 	bl	800f4c0 <HAL_GPIO_Init>
}
 800b354:	e02c      	b.n	800b3b0 <HAL_TIM_Encoder_MspInit+0x280>
  else if(tim_encoderHandle->Instance==TIM8)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a1d      	ldr	r2, [pc, #116]	; (800b3d0 <HAL_TIM_Encoder_MspInit+0x2a0>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d127      	bne.n	800b3b0 <HAL_TIM_Encoder_MspInit+0x280>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b360:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b364:	4a15      	ldr	r2, [pc, #84]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b36a:	6613      	str	r3, [r2, #96]	; 0x60
 800b36c:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b36e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b374:	60fb      	str	r3, [r7, #12]
 800b376:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b378:	4b10      	ldr	r3, [pc, #64]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b37a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37c:	4a0f      	ldr	r2, [pc, #60]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b37e:	f043 0304 	orr.w	r3, r3, #4
 800b382:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b384:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <HAL_TIM_Encoder_MspInit+0x28c>)
 800b386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	60bb      	str	r3, [r7, #8]
 800b38e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b390:	23c0      	movs	r3, #192	; 0xc0
 800b392:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b394:	2302      	movs	r3, #2
 800b396:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b398:	2300      	movs	r3, #0
 800b39a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b39c:	2300      	movs	r3, #0
 800b39e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b3a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	480a      	ldr	r0, [pc, #40]	; (800b3d4 <HAL_TIM_Encoder_MspInit+0x2a4>)
 800b3ac:	f004 f888 	bl	800f4c0 <HAL_GPIO_Init>
}
 800b3b0:	bf00      	nop
 800b3b2:	3750      	adds	r7, #80	; 0x50
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	40012c00 	.word	0x40012c00
 800b3bc:	40021000 	.word	0x40021000
 800b3c0:	48000400 	.word	0x48000400
 800b3c4:	40000400 	.word	0x40000400
 800b3c8:	40000800 	.word	0x40000800
 800b3cc:	40000c00 	.word	0x40000c00
 800b3d0:	40013400 	.word	0x40013400
 800b3d4:	48000800 	.word	0x48000800

0800b3d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a1c      	ldr	r2, [pc, #112]	; (800b458 <HAL_TIM_Base_MspInit+0x80>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d10c      	bne.n	800b404 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b3ea:	4b1c      	ldr	r3, [pc, #112]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ee:	4a1b      	ldr	r2, [pc, #108]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b3f0:	f043 0310 	orr.w	r3, r3, #16
 800b3f4:	6593      	str	r3, [r2, #88]	; 0x58
 800b3f6:	4b19      	ldr	r3, [pc, #100]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3fa:	f003 0310 	and.w	r3, r3, #16
 800b3fe:	617b      	str	r3, [r7, #20]
 800b400:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800b402:	e022      	b.n	800b44a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a15      	ldr	r2, [pc, #84]	; (800b460 <HAL_TIM_Base_MspInit+0x88>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d10c      	bne.n	800b428 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800b40e:	4b13      	ldr	r3, [pc, #76]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b412:	4a12      	ldr	r2, [pc, #72]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b418:	6613      	str	r3, [r2, #96]	; 0x60
 800b41a:	4b10      	ldr	r3, [pc, #64]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b422:	613b      	str	r3, [r7, #16]
 800b424:	693b      	ldr	r3, [r7, #16]
}
 800b426:	e010      	b.n	800b44a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM17)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a0d      	ldr	r2, [pc, #52]	; (800b464 <HAL_TIM_Base_MspInit+0x8c>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d10b      	bne.n	800b44a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800b432:	4b0a      	ldr	r3, [pc, #40]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b436:	4a09      	ldr	r2, [pc, #36]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b43c:	6613      	str	r3, [r2, #96]	; 0x60
 800b43e:	4b07      	ldr	r3, [pc, #28]	; (800b45c <HAL_TIM_Base_MspInit+0x84>)
 800b440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	68fb      	ldr	r3, [r7, #12]
}
 800b44a:	bf00      	nop
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	40001000 	.word	0x40001000
 800b45c:	40021000 	.word	0x40021000
 800b460:	40014400 	.word	0x40014400
 800b464:	40014800 	.word	0x40014800

0800b468 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM15)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a0a      	ldr	r2, [pc, #40]	; (800b4a0 <HAL_TIM_OC_MspInit+0x38>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d10b      	bne.n	800b492 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800b47a:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <HAL_TIM_OC_MspInit+0x3c>)
 800b47c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b47e:	4a09      	ldr	r2, [pc, #36]	; (800b4a4 <HAL_TIM_OC_MspInit+0x3c>)
 800b480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b484:	6613      	str	r3, [r2, #96]	; 0x60
 800b486:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <HAL_TIM_OC_MspInit+0x3c>)
 800b488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b48a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800b492:	bf00      	nop
 800b494:	3714      	adds	r7, #20
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	40021000 	.word	0x40021000

0800b4a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4b0:	f107 030c 	add.w	r3, r7, #12
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	605a      	str	r2, [r3, #4]
 800b4ba:	609a      	str	r2, [r3, #8]
 800b4bc:	60da      	str	r2, [r3, #12]
 800b4be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a11      	ldr	r2, [pc, #68]	; (800b50c <HAL_TIM_MspPostInit+0x64>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d11c      	bne.n	800b504 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4ca:	4b11      	ldr	r3, [pc, #68]	; (800b510 <HAL_TIM_MspPostInit+0x68>)
 800b4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ce:	4a10      	ldr	r2, [pc, #64]	; (800b510 <HAL_TIM_MspPostInit+0x68>)
 800b4d0:	f043 0301 	orr.w	r3, r3, #1
 800b4d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <HAL_TIM_MspPostInit+0x68>)
 800b4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4da:	f003 0301 	and.w	r3, r3, #1
 800b4de:	60bb      	str	r3, [r7, #8]
 800b4e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b4e2:	2340      	movs	r3, #64	; 0x40
 800b4e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800b4f2:	230e      	movs	r3, #14
 800b4f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4f6:	f107 030c 	add.w	r3, r7, #12
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b500:	f003 ffde 	bl	800f4c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800b504:	bf00      	nop
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	40014400 	.word	0x40014400
 800b510:	40021000 	.word	0x40021000

0800b514 <TDA7719_SetVolume_Master>:
// Global functions for encoders
//--------------------------------------------------------------

// Volume master takes into account attenuator of each channel and front and back volume aswell
void TDA7719_SetVolume_Master(const int16_t VolFrontLeft, const int16_t VolFrontRight, const int16_t VolBackLeft, const int16_t VolBackRight)
    {
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4604      	mov	r4, r0
 800b51c:	4608      	mov	r0, r1
 800b51e:	4611      	mov	r1, r2
 800b520:	461a      	mov	r2, r3
 800b522:	4623      	mov	r3, r4
 800b524:	80fb      	strh	r3, [r7, #6]
 800b526:	4603      	mov	r3, r0
 800b528:	80bb      	strh	r3, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	807b      	strh	r3, [r7, #2]
 800b52e:	4613      	mov	r3, r2
 800b530:	803b      	strh	r3, [r7, #0]
	//write to diffrent TDA7719 register depending on value
	if ((encoderVolFront.volumeMaster <= 94) && (encoderVolFront.volumeMaster >= 80))
 800b532:	4b1e      	ldr	r3, [pc, #120]	; (800b5ac <TDA7719_SetVolume_Master+0x98>)
 800b534:	f993 3000 	ldrsb.w	r3, [r3]
 800b538:	2b5e      	cmp	r3, #94	; 0x5e
 800b53a:	dc11      	bgt.n	800b560 <TDA7719_SetVolume_Master+0x4c>
 800b53c:	4b1b      	ldr	r3, [pc, #108]	; (800b5ac <TDA7719_SetVolume_Master+0x98>)
 800b53e:	f993 3000 	ldrsb.w	r3, [r3]
 800b542:	2b4f      	cmp	r3, #79	; 0x4f
 800b544:	dd0c      	ble.n	800b560 <TDA7719_SetVolume_Master+0x4c>
	    {
		TDA7719_SetVolume((encoderVolFront.volumeMaster) - 79, 0, 0);
 800b546:	4b19      	ldr	r3, [pc, #100]	; (800b5ac <TDA7719_SetVolume_Master+0x98>)
 800b548:	f993 3000 	ldrsb.w	r3, [r3]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	3b4f      	subs	r3, #79	; 0x4f
 800b550:	b2db      	uxtb	r3, r3
 800b552:	b25b      	sxtb	r3, r3
 800b554:	2200      	movs	r2, #0
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fc fafd 	bl	8007b58 <TDA7719_SetVolume>
		TDA7719_SetVolume_LeftFront ((VolFrontLeft) , 0);
		TDA7719_SetVolume_RightFront((VolFrontRight), 0);
		TDA7719_SetVolume_LeftRear  ((VolBackLeft)  , 0);
		TDA7719_SetVolume_RightRear ((VolBackRight) , 0);
	    }
    }
 800b55e:	e021      	b.n	800b5a4 <TDA7719_SetVolume_Master+0x90>
	else if ((encoderVolFront.volumeMaster >= 0 ) && (encoderVolFront.volumeMaster <= 79))
 800b560:	4b12      	ldr	r3, [pc, #72]	; (800b5ac <TDA7719_SetVolume_Master+0x98>)
 800b562:	f993 3000 	ldrsb.w	r3, [r3]
 800b566:	2b00      	cmp	r3, #0
 800b568:	db1c      	blt.n	800b5a4 <TDA7719_SetVolume_Master+0x90>
 800b56a:	4b10      	ldr	r3, [pc, #64]	; (800b5ac <TDA7719_SetVolume_Master+0x98>)
 800b56c:	f993 3000 	ldrsb.w	r3, [r3]
 800b570:	2b4f      	cmp	r3, #79	; 0x4f
 800b572:	dc17      	bgt.n	800b5a4 <TDA7719_SetVolume_Master+0x90>
		TDA7719_SetVolume_LeftFront ((VolFrontLeft) , 0);
 800b574:	88fb      	ldrh	r3, [r7, #6]
 800b576:	b25b      	sxtb	r3, r3
 800b578:	2100      	movs	r1, #0
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fc fe88 	bl	8008290 <TDA7719_SetVolume_LeftFront>
		TDA7719_SetVolume_RightFront((VolFrontRight), 0);
 800b580:	88bb      	ldrh	r3, [r7, #4]
 800b582:	b25b      	sxtb	r3, r3
 800b584:	2100      	movs	r1, #0
 800b586:	4618      	mov	r0, r3
 800b588:	f7fc febc 	bl	8008304 <TDA7719_SetVolume_RightFront>
		TDA7719_SetVolume_LeftRear  ((VolBackLeft)  , 0);
 800b58c:	887b      	ldrh	r3, [r7, #2]
 800b58e:	b25b      	sxtb	r3, r3
 800b590:	2100      	movs	r1, #0
 800b592:	4618      	mov	r0, r3
 800b594:	f7fc fef0 	bl	8008378 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear ((VolBackRight) , 0);
 800b598:	883b      	ldrh	r3, [r7, #0]
 800b59a:	b25b      	sxtb	r3, r3
 800b59c:	2100      	movs	r1, #0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fc ff24 	bl	80083ec <TDA7719_SetVolume_RightRear>
    }
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd90      	pop	{r4, r7, pc}
 800b5ac:	20000554 	.word	0x20000554

0800b5b0 <TDA7719_SetVolumeFront_LeftRight>:

// Sets volume just for both front channels
void TDA7719_SetVolumeFront_LeftRight(const int16_t VolFrontLeft, const int16_t VolFrontRight)
    {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	460a      	mov	r2, r1
 800b5ba:	80fb      	strh	r3, [r7, #6]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	80bb      	strh	r3, [r7, #4]

	if (VolFrontLeft <= -79)
 800b5c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5c4:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b5c8:	da04      	bge.n	800b5d4 <TDA7719_SetVolumeFront_LeftRight+0x24>
		TDA7719_SetVolume_LeftFront(VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	2060      	movs	r0, #96	; 0x60
 800b5ce:	f7fc fe5f 	bl	8008290 <TDA7719_SetVolume_LeftFront>
 800b5d2:	e005      	b.n	800b5e0 <TDA7719_SetVolumeFront_LeftRight+0x30>
	else 	TDA7719_SetVolume_LeftFront(VolFrontLeft, 0);
 800b5d4:	88fb      	ldrh	r3, [r7, #6]
 800b5d6:	b25b      	sxtb	r3, r3
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fc fe58 	bl	8008290 <TDA7719_SetVolume_LeftFront>

	if(VolFrontRight <= -79)
 800b5e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b5e4:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b5e8:	da04      	bge.n	800b5f4 <TDA7719_SetVolumeFront_LeftRight+0x44>
		TDA7719_SetVolume_RightFront(VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	2060      	movs	r0, #96	; 0x60
 800b5ee:	f7fc fe89 	bl	8008304 <TDA7719_SetVolume_RightFront>
	else 	TDA7719_SetVolume_RightFront(VolFrontRight, 0);

    }
 800b5f2:	e005      	b.n	800b600 <TDA7719_SetVolumeFront_LeftRight+0x50>
	else 	TDA7719_SetVolume_RightFront(VolFrontRight, 0);
 800b5f4:	88bb      	ldrh	r3, [r7, #4]
 800b5f6:	b25b      	sxtb	r3, r3
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fc fe82 	bl	8008304 <TDA7719_SetVolume_RightFront>
    }
 800b600:	bf00      	nop
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <Check_Volume_Range_Front>:

// Checks if given value (volume) is given range
// It also increments or decrements value depending on CNT register upgraded by volume front encoder
void Check_Volume_Range_Front(volatile int8_t *const volume, const uint8_t maxVolume)
    {
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff1;
	static uint16_t LastTimerCounter1;

	TimerDiff1 = htim2.Instance->CNT - LastTimerCounter1;
 800b614:	4b25      	ldr	r3, [pc, #148]	; (800b6ac <Check_Volume_Range_Front+0xa4>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	4b24      	ldr	r3, [pc, #144]	; (800b6b0 <Check_Volume_Range_Front+0xa8>)
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	b29b      	uxth	r3, r3
 800b624:	b21a      	sxth	r2, r3
 800b626:	4b23      	ldr	r3, [pc, #140]	; (800b6b4 <Check_Volume_Range_Front+0xac>)
 800b628:	801a      	strh	r2, [r3, #0]
	if(TimerDiff1 >= 4 || TimerDiff1 <= -4)
 800b62a:	4b22      	ldr	r3, [pc, #136]	; (800b6b4 <Check_Volume_Range_Front+0xac>)
 800b62c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b630:	2b03      	cmp	r3, #3
 800b632:	dc05      	bgt.n	800b640 <Check_Volume_Range_Front+0x38>
 800b634:	4b1f      	ldr	r3, [pc, #124]	; (800b6b4 <Check_Volume_Range_Front+0xac>)
 800b636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b63a:	f113 0f03 	cmn.w	r3, #3
 800b63e:	da2f      	bge.n	800b6a0 <Check_Volume_Range_Front+0x98>
	{
	    TimerDiff1 /= 4;
 800b640:	4b1c      	ldr	r3, [pc, #112]	; (800b6b4 <Check_Volume_Range_Front+0xac>)
 800b642:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b646:	2b00      	cmp	r3, #0
 800b648:	da00      	bge.n	800b64c <Check_Volume_Range_Front+0x44>
 800b64a:	3303      	adds	r3, #3
 800b64c:	109b      	asrs	r3, r3, #2
 800b64e:	b21a      	sxth	r2, r3
 800b650:	4b18      	ldr	r3, [pc, #96]	; (800b6b4 <Check_Volume_Range_Front+0xac>)
 800b652:	801a      	strh	r2, [r3, #0]
	    (*volume) += (int8_t) TimerDiff1;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	b25b      	sxtb	r3, r3
 800b65a:	b2da      	uxtb	r2, r3
 800b65c:	4b15      	ldr	r3, [pc, #84]	; (800b6b4 <Check_Volume_Range_Front+0xac>)
 800b65e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	4413      	add	r3, r2
 800b666:	b2db      	uxtb	r3, r3
 800b668:	b25a      	sxtb	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	701a      	strb	r2, [r3, #0]
	    if((*volume) > maxVolume) (*volume) = maxVolume;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b25b      	sxtb	r3, r3
 800b674:	461a      	mov	r2, r3
 800b676:	78fb      	ldrb	r3, [r7, #3]
 800b678:	429a      	cmp	r2, r3
 800b67a:	dd03      	ble.n	800b684 <Check_Volume_Range_Front+0x7c>
 800b67c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	701a      	strb	r2, [r3, #0]
	    if((*volume) < 0)  (*volume) = 0;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	b25b      	sxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	da02      	bge.n	800b694 <Check_Volume_Range_Front+0x8c>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter1 = htim2.Instance->CNT;
 800b694:	4b05      	ldr	r3, [pc, #20]	; (800b6ac <Check_Volume_Range_Front+0xa4>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <Check_Volume_Range_Front+0xa8>)
 800b69e:	801a      	strh	r2, [r3, #0]
	}
    }
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	20007b80 	.word	0x20007b80
 800b6b0:	2000020a 	.word	0x2000020a
 800b6b4:	2000020c 	.word	0x2000020c

0800b6b8 <TDA7719_SetVolumeBack_LeftRight>:

// Sets volume just for both back channels
void TDA7719_SetVolumeBack_LeftRight(const int16_t VolBackLeft, const int16_t VolBackRight)
    {
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	460a      	mov	r2, r1
 800b6c2:	80fb      	strh	r3, [r7, #6]
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	80bb      	strh	r3, [r7, #4]
	if (VolBackLeft <= -79)
 800b6c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6cc:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b6d0:	da04      	bge.n	800b6dc <TDA7719_SetVolumeBack_LeftRight+0x24>
		TDA7719_SetVolume_LeftRear (VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	2060      	movs	r0, #96	; 0x60
 800b6d6:	f7fc fe4f 	bl	8008378 <TDA7719_SetVolume_LeftRear>
 800b6da:	e005      	b.n	800b6e8 <TDA7719_SetVolumeBack_LeftRight+0x30>
	else 	TDA7719_SetVolume_LeftRear (VolBackLeft, 0);
 800b6dc:	88fb      	ldrh	r3, [r7, #6]
 800b6de:	b25b      	sxtb	r3, r3
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fc fe48 	bl	8008378 <TDA7719_SetVolume_LeftRear>

	if(VolBackRight <= -79)
 800b6e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b6ec:	f113 0f4e 	cmn.w	r3, #78	; 0x4e
 800b6f0:	da04      	bge.n	800b6fc <TDA7719_SetVolumeBack_LeftRight+0x44>
		TDA7719_SetVolume_RightRear(VOLUME_MUTE, 0); //0 - mute, 79 - max_volume
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	2060      	movs	r0, #96	; 0x60
 800b6f6:	f7fc fe79 	bl	80083ec <TDA7719_SetVolume_RightRear>
	else 	TDA7719_SetVolume_RightRear(VolBackRight, 0);

    }
 800b6fa:	e005      	b.n	800b708 <TDA7719_SetVolumeBack_LeftRight+0x50>
	else 	TDA7719_SetVolume_RightRear(VolBackRight, 0);
 800b6fc:	88bb      	ldrh	r3, [r7, #4]
 800b6fe:	b25b      	sxtb	r3, r3
 800b700:	2100      	movs	r1, #0
 800b702:	4618      	mov	r0, r3
 800b704:	f7fc fe72 	bl	80083ec <TDA7719_SetVolume_RightRear>
    }
 800b708:	bf00      	nop
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <Check_Volume_Range_Back>:

// Checks if given value (volume) is given range
// It also increments or decrements value depending on CNT register upgraded by volume back encoder
void Check_Volume_Range_Back(volatile int8_t *const volume, const uint8_t maxVolume)
    {
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff2;
	static uint16_t LastTimerCounter2;

	TimerDiff2 = htim8.Instance->CNT - LastTimerCounter2;
 800b71c:	4b25      	ldr	r3, [pc, #148]	; (800b7b4 <Check_Volume_Range_Back+0xa4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b722:	b29a      	uxth	r2, r3
 800b724:	4b24      	ldr	r3, [pc, #144]	; (800b7b8 <Check_Volume_Range_Back+0xa8>)
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	b21a      	sxth	r2, r3
 800b72e:	4b23      	ldr	r3, [pc, #140]	; (800b7bc <Check_Volume_Range_Back+0xac>)
 800b730:	801a      	strh	r2, [r3, #0]
	if(TimerDiff2 >= 4 || TimerDiff2 <= -4)
 800b732:	4b22      	ldr	r3, [pc, #136]	; (800b7bc <Check_Volume_Range_Back+0xac>)
 800b734:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b738:	2b03      	cmp	r3, #3
 800b73a:	dc05      	bgt.n	800b748 <Check_Volume_Range_Back+0x38>
 800b73c:	4b1f      	ldr	r3, [pc, #124]	; (800b7bc <Check_Volume_Range_Back+0xac>)
 800b73e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b742:	f113 0f03 	cmn.w	r3, #3
 800b746:	da2f      	bge.n	800b7a8 <Check_Volume_Range_Back+0x98>
	{
	    TimerDiff2 /= 4;
 800b748:	4b1c      	ldr	r3, [pc, #112]	; (800b7bc <Check_Volume_Range_Back+0xac>)
 800b74a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	da00      	bge.n	800b754 <Check_Volume_Range_Back+0x44>
 800b752:	3303      	adds	r3, #3
 800b754:	109b      	asrs	r3, r3, #2
 800b756:	b21a      	sxth	r2, r3
 800b758:	4b18      	ldr	r3, [pc, #96]	; (800b7bc <Check_Volume_Range_Back+0xac>)
 800b75a:	801a      	strh	r2, [r3, #0]
	    (*volume) += (int8_t) TimerDiff2;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	b25b      	sxtb	r3, r3
 800b762:	b2da      	uxtb	r2, r3
 800b764:	4b15      	ldr	r3, [pc, #84]	; (800b7bc <Check_Volume_Range_Back+0xac>)
 800b766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	4413      	add	r3, r2
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	b25a      	sxtb	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	701a      	strb	r2, [r3, #0]
	    if((*volume) > maxVolume) (*volume) = maxVolume;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	b25b      	sxtb	r3, r3
 800b77c:	461a      	mov	r2, r3
 800b77e:	78fb      	ldrb	r3, [r7, #3]
 800b780:	429a      	cmp	r2, r3
 800b782:	dd03      	ble.n	800b78c <Check_Volume_Range_Back+0x7c>
 800b784:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	701a      	strb	r2, [r3, #0]
	    if((*volume) < 0)  (*volume) = 0;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	b25b      	sxtb	r3, r3
 800b792:	2b00      	cmp	r3, #0
 800b794:	da02      	bge.n	800b79c <Check_Volume_Range_Back+0x8c>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter2 = htim8.Instance->CNT;
 800b79c:	4b05      	ldr	r3, [pc, #20]	; (800b7b4 <Check_Volume_Range_Back+0xa4>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <Check_Volume_Range_Back+0xa8>)
 800b7a6:	801a      	strh	r2, [r3, #0]
	}
    }
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	20007920 	.word	0x20007920
 800b7b8:	2000020e 	.word	0x2000020e
 800b7bc:	20000210 	.word	0x20000210

0800b7c0 <Check_Loudness_Param_Range>:

// Checks if given value (loudness attenuator, center freqency, soft step, high boost) is given range
// It also increments or decrements value depending on CNT register upgraded by loudness encoder
void Check_Loudness_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b7c0:	b480      	push	{r7}
 800b7c2:	b083      	sub	sp, #12
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim1.Instance->CNT - LastTimerCounter3;
 800b7cc:	4b25      	ldr	r3, [pc, #148]	; (800b864 <Check_Loudness_Param_Range+0xa4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	4b24      	ldr	r3, [pc, #144]	; (800b868 <Check_Loudness_Param_Range+0xa8>)
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	b21a      	sxth	r2, r3
 800b7de:	4b23      	ldr	r3, [pc, #140]	; (800b86c <Check_Loudness_Param_Range+0xac>)
 800b7e0:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800b7e2:	4b22      	ldr	r3, [pc, #136]	; (800b86c <Check_Loudness_Param_Range+0xac>)
 800b7e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	dc05      	bgt.n	800b7f8 <Check_Loudness_Param_Range+0x38>
 800b7ec:	4b1f      	ldr	r3, [pc, #124]	; (800b86c <Check_Loudness_Param_Range+0xac>)
 800b7ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7f2:	f113 0f03 	cmn.w	r3, #3
 800b7f6:	da2f      	bge.n	800b858 <Check_Loudness_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800b7f8:	4b1c      	ldr	r3, [pc, #112]	; (800b86c <Check_Loudness_Param_Range+0xac>)
 800b7fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	da00      	bge.n	800b804 <Check_Loudness_Param_Range+0x44>
 800b802:	3303      	adds	r3, #3
 800b804:	109b      	asrs	r3, r3, #2
 800b806:	b21a      	sxth	r2, r3
 800b808:	4b18      	ldr	r3, [pc, #96]	; (800b86c <Check_Loudness_Param_Range+0xac>)
 800b80a:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	b25b      	sxtb	r3, r3
 800b812:	b2da      	uxtb	r2, r3
 800b814:	4b15      	ldr	r3, [pc, #84]	; (800b86c <Check_Loudness_Param_Range+0xac>)
 800b816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	4413      	add	r3, r2
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	b25a      	sxtb	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	b25b      	sxtb	r3, r3
 800b82c:	461a      	mov	r2, r3
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	429a      	cmp	r2, r3
 800b832:	db03      	blt.n	800b83c <Check_Loudness_Param_Range+0x7c>
 800b834:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0)       (*gain) = 0;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	b25b      	sxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	dc02      	bgt.n	800b84c <Check_Loudness_Param_Range+0x8c>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim1.Instance->CNT;
 800b84c:	4b05      	ldr	r3, [pc, #20]	; (800b864 <Check_Loudness_Param_Range+0xa4>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	b29a      	uxth	r2, r3
 800b854:	4b04      	ldr	r3, [pc, #16]	; (800b868 <Check_Loudness_Param_Range+0xa8>)
 800b856:	801a      	strh	r2, [r3, #0]
	}
    }
 800b858:	bf00      	nop
 800b85a:	370c      	adds	r7, #12
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	20007b34 	.word	0x20007b34
 800b868:	20000212 	.word	0x20000212
 800b86c:	20000214 	.word	0x20000214

0800b870 <Check_Bass_Param_Range>:

// Checks if given value (loudness, Bass Q Factor, soft step) is given range
// It also increments or decrements value depending on CNT register upgraded by bass encoder
void Check_Bass_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim1.Instance->CNT - LastTimerCounter3;
 800b87c:	4b25      	ldr	r3, [pc, #148]	; (800b914 <Check_Bass_Param_Range+0xa4>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	b29a      	uxth	r2, r3
 800b884:	4b24      	ldr	r3, [pc, #144]	; (800b918 <Check_Bass_Param_Range+0xa8>)
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	b21a      	sxth	r2, r3
 800b88e:	4b23      	ldr	r3, [pc, #140]	; (800b91c <Check_Bass_Param_Range+0xac>)
 800b890:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800b892:	4b22      	ldr	r3, [pc, #136]	; (800b91c <Check_Bass_Param_Range+0xac>)
 800b894:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b898:	2b03      	cmp	r3, #3
 800b89a:	dc05      	bgt.n	800b8a8 <Check_Bass_Param_Range+0x38>
 800b89c:	4b1f      	ldr	r3, [pc, #124]	; (800b91c <Check_Bass_Param_Range+0xac>)
 800b89e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8a2:	f113 0f03 	cmn.w	r3, #3
 800b8a6:	da2f      	bge.n	800b908 <Check_Bass_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800b8a8:	4b1c      	ldr	r3, [pc, #112]	; (800b91c <Check_Bass_Param_Range+0xac>)
 800b8aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	da00      	bge.n	800b8b4 <Check_Bass_Param_Range+0x44>
 800b8b2:	3303      	adds	r3, #3
 800b8b4:	109b      	asrs	r3, r3, #2
 800b8b6:	b21a      	sxth	r2, r3
 800b8b8:	4b18      	ldr	r3, [pc, #96]	; (800b91c <Check_Bass_Param_Range+0xac>)
 800b8ba:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	b25b      	sxtb	r3, r3
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	4b15      	ldr	r3, [pc, #84]	; (800b91c <Check_Bass_Param_Range+0xac>)
 800b8c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	4413      	add	r3, r2
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	b25a      	sxtb	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	b25b      	sxtb	r3, r3
 800b8dc:	461a      	mov	r2, r3
 800b8de:	78fb      	ldrb	r3, [r7, #3]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	db03      	blt.n	800b8ec <Check_Bass_Param_Range+0x7c>
 800b8e4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0) 	   (*gain) = 0;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	b25b      	sxtb	r3, r3
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	dc02      	bgt.n	800b8fc <Check_Bass_Param_Range+0x8c>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim1.Instance->CNT;
 800b8fc:	4b05      	ldr	r3, [pc, #20]	; (800b914 <Check_Bass_Param_Range+0xa4>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	b29a      	uxth	r2, r3
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <Check_Bass_Param_Range+0xa8>)
 800b906:	801a      	strh	r2, [r3, #0]
	}
    }
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	20007b34 	.word	0x20007b34
 800b918:	20000216 	.word	0x20000216
 800b91c:	20000218 	.word	0x20000218

0800b920 <Check_Middle_Param_Range>:

// Checks if given value (loudness, middle Q Factor, soft step) is given range
// It also increments or decrements value depending on CNT register upgraded by middle encoder
void Check_Middle_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim3.Instance->CNT - LastTimerCounter3;
 800b92c:	4b25      	ldr	r3, [pc, #148]	; (800b9c4 <Check_Middle_Param_Range+0xa4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	b29a      	uxth	r2, r3
 800b934:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <Check_Middle_Param_Range+0xa8>)
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	b21a      	sxth	r2, r3
 800b93e:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <Check_Middle_Param_Range+0xac>)
 800b940:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800b942:	4b22      	ldr	r3, [pc, #136]	; (800b9cc <Check_Middle_Param_Range+0xac>)
 800b944:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b948:	2b03      	cmp	r3, #3
 800b94a:	dc05      	bgt.n	800b958 <Check_Middle_Param_Range+0x38>
 800b94c:	4b1f      	ldr	r3, [pc, #124]	; (800b9cc <Check_Middle_Param_Range+0xac>)
 800b94e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b952:	f113 0f03 	cmn.w	r3, #3
 800b956:	da2f      	bge.n	800b9b8 <Check_Middle_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800b958:	4b1c      	ldr	r3, [pc, #112]	; (800b9cc <Check_Middle_Param_Range+0xac>)
 800b95a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	da00      	bge.n	800b964 <Check_Middle_Param_Range+0x44>
 800b962:	3303      	adds	r3, #3
 800b964:	109b      	asrs	r3, r3, #2
 800b966:	b21a      	sxth	r2, r3
 800b968:	4b18      	ldr	r3, [pc, #96]	; (800b9cc <Check_Middle_Param_Range+0xac>)
 800b96a:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	b25b      	sxtb	r3, r3
 800b972:	b2da      	uxtb	r2, r3
 800b974:	4b15      	ldr	r3, [pc, #84]	; (800b9cc <Check_Middle_Param_Range+0xac>)
 800b976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	4413      	add	r3, r2
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	b25a      	sxtb	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	b25b      	sxtb	r3, r3
 800b98c:	461a      	mov	r2, r3
 800b98e:	78fb      	ldrb	r3, [r7, #3]
 800b990:	429a      	cmp	r2, r3
 800b992:	db03      	blt.n	800b99c <Check_Middle_Param_Range+0x7c>
 800b994:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0)  	   (*gain) = 0;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	b25b      	sxtb	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	dc02      	bgt.n	800b9ac <Check_Middle_Param_Range+0x8c>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim3.Instance->CNT;
 800b9ac:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <Check_Middle_Param_Range+0xa4>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <Check_Middle_Param_Range+0xa8>)
 800b9b6:	801a      	strh	r2, [r3, #0]
	}
    }
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr
 800b9c4:	20007a9c 	.word	0x20007a9c
 800b9c8:	2000021a 	.word	0x2000021a
 800b9cc:	2000021c 	.word	0x2000021c

0800b9d0 <Check_Treble_Param_Range>:

// Checks if given value (loudness, treble Q Factor, soft step) is given range
// It also increments or decrements value depending on CNT register upgraded by treble encoder
void Check_Treble_Param_Range(volatile int8_t *const gain, const uint8_t maxGain)
    {
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
	static int16_t  TimerDiff3;
	static uint16_t LastTimerCounter3;

	TimerDiff3 = htim5.Instance->CNT - LastTimerCounter3;
 800b9dc:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <Check_Treble_Param_Range+0xa4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <Check_Treble_Param_Range+0xa8>)
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	b21a      	sxth	r2, r3
 800b9ee:	4b23      	ldr	r3, [pc, #140]	; (800ba7c <Check_Treble_Param_Range+0xac>)
 800b9f0:	801a      	strh	r2, [r3, #0]
	if(TimerDiff3 >= 4 || TimerDiff3 <= -4)
 800b9f2:	4b22      	ldr	r3, [pc, #136]	; (800ba7c <Check_Treble_Param_Range+0xac>)
 800b9f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	dc05      	bgt.n	800ba08 <Check_Treble_Param_Range+0x38>
 800b9fc:	4b1f      	ldr	r3, [pc, #124]	; (800ba7c <Check_Treble_Param_Range+0xac>)
 800b9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba02:	f113 0f03 	cmn.w	r3, #3
 800ba06:	da2f      	bge.n	800ba68 <Check_Treble_Param_Range+0x98>
	{
	    TimerDiff3 /= 4;
 800ba08:	4b1c      	ldr	r3, [pc, #112]	; (800ba7c <Check_Treble_Param_Range+0xac>)
 800ba0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	da00      	bge.n	800ba14 <Check_Treble_Param_Range+0x44>
 800ba12:	3303      	adds	r3, #3
 800ba14:	109b      	asrs	r3, r3, #2
 800ba16:	b21a      	sxth	r2, r3
 800ba18:	4b18      	ldr	r3, [pc, #96]	; (800ba7c <Check_Treble_Param_Range+0xac>)
 800ba1a:	801a      	strh	r2, [r3, #0]
	    (*gain) += (int8_t) TimerDiff3;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	b25b      	sxtb	r3, r3
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <Check_Treble_Param_Range+0xac>)
 800ba26:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	4413      	add	r3, r2
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	b25a      	sxtb	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	701a      	strb	r2, [r3, #0]
	    if((*gain) >= maxGain) (*gain) = maxGain;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	b25b      	sxtb	r3, r3
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	db03      	blt.n	800ba4c <Check_Treble_Param_Range+0x7c>
 800ba44:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	701a      	strb	r2, [r3, #0]
	    if((*gain) <= 0)	   (*gain) = 0;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	b25b      	sxtb	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	dc02      	bgt.n	800ba5c <Check_Treble_Param_Range+0x8c>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	701a      	strb	r2, [r3, #0]
	    LastTimerCounter3 = htim5.Instance->CNT;
 800ba5c:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <Check_Treble_Param_Range+0xa4>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	4b04      	ldr	r3, [pc, #16]	; (800ba78 <Check_Treble_Param_Range+0xa8>)
 800ba66:	801a      	strh	r2, [r3, #0]
	}
    }
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	20007a50 	.word	0x20007a50
 800ba78:	2000021e 	.word	0x2000021e
 800ba7c:	20000220 	.word	0x20000220

0800ba80 <any_buttons_pressed_routine>:

//
void any_buttons_pressed_routine(void)
    {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	af00      	add	r7, sp, #0
	//if(SysTick_CTRL->ENABLE == true)
	if (is_display_on_standby_flag == true)
 800ba84:	4b6f      	ldr	r3, [pc, #444]	; (800bc44 <any_buttons_pressed_routine+0x1c4>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d013      	beq.n	800bab6 <any_buttons_pressed_routine+0x36>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800ba8e:	2200      	movs	r2, #0
 800ba90:	496d      	ldr	r1, [pc, #436]	; (800bc48 <any_buttons_pressed_routine+0x1c8>)
 800ba92:	486e      	ldr	r0, [pc, #440]	; (800bc4c <any_buttons_pressed_routine+0x1cc>)
 800ba94:	f006 ff02 	bl	801289c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800ba98:	2200      	movs	r2, #0
 800ba9a:	496d      	ldr	r1, [pc, #436]	; (800bc50 <any_buttons_pressed_routine+0x1d0>)
 800ba9c:	486b      	ldr	r0, [pc, #428]	; (800bc4c <any_buttons_pressed_routine+0x1cc>)
 800ba9e:	f006 ffe7 	bl	8012a70 <HAL_RTC_GetDate>
		SSD1322_API_sleep_off();
 800baa2:	f7f6 fd92 	bl	80025ca <SSD1322_API_sleep_off>
		saved_seconds = sTime.Seconds;
 800baa6:	4b68      	ldr	r3, [pc, #416]	; (800bc48 <any_buttons_pressed_routine+0x1c8>)
 800baa8:	789a      	ldrb	r2, [r3, #2]
 800baaa:	4b6a      	ldr	r3, [pc, #424]	; (800bc54 <any_buttons_pressed_routine+0x1d4>)
 800baac:	701a      	strb	r2, [r3, #0]
		saved_minutes = sTime.Minutes;
 800baae:	4b66      	ldr	r3, [pc, #408]	; (800bc48 <any_buttons_pressed_routine+0x1c8>)
 800bab0:	785a      	ldrb	r2, [r3, #1]
 800bab2:	4b69      	ldr	r3, [pc, #420]	; (800bc58 <any_buttons_pressed_routine+0x1d8>)
 800bab4:	701a      	strb	r2, [r3, #0]
	    }

	button_debou_state = true;
 800bab6:	4b69      	ldr	r3, [pc, #420]	; (800bc5c <any_buttons_pressed_routine+0x1dc>)
 800bab8:	2201      	movs	r2, #1
 800baba:	701a      	strb	r2, [r3, #0]
	HAL_TIM_OC_Stop_IT(&htim17, TIM_CHANNEL_1);
 800babc:	2100      	movs	r1, #0
 800babe:	4868      	ldr	r0, [pc, #416]	; (800bc60 <any_buttons_pressed_routine+0x1e0>)
 800bac0:	f008 f9a8 	bl	8013e14 <HAL_TIM_OC_Stop_IT>
//		HAL_TIM_OC_Start_IT(&htim16, TIM_CHANNEL_1);
	switch (gGPIO_Pin)
 800bac4:	4b67      	ldr	r3, [pc, #412]	; (800bc64 <any_buttons_pressed_routine+0x1e4>)
 800bac6:	881b      	ldrh	r3, [r3, #0]
 800bac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bacc:	f000 8099 	beq.w	800bc02 <any_buttons_pressed_routine+0x182>
 800bad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bad4:	f300 80b4 	bgt.w	800bc40 <any_buttons_pressed_routine+0x1c0>
 800bad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800badc:	f000 8086 	beq.w	800bbec <any_buttons_pressed_routine+0x16c>
 800bae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bae4:	f300 80ac 	bgt.w	800bc40 <any_buttons_pressed_routine+0x1c0>
 800bae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baec:	d054      	beq.n	800bb98 <any_buttons_pressed_routine+0x118>
 800baee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baf2:	f300 80a5 	bgt.w	800bc40 <any_buttons_pressed_routine+0x1c0>
 800baf6:	2b20      	cmp	r3, #32
 800baf8:	dc4a      	bgt.n	800bb90 <any_buttons_pressed_routine+0x110>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f340 80a0 	ble.w	800bc40 <any_buttons_pressed_routine+0x1c0>
 800bb00:	3b01      	subs	r3, #1
 800bb02:	2b1f      	cmp	r3, #31
 800bb04:	f200 809c 	bhi.w	800bc40 <any_buttons_pressed_routine+0x1c0>
 800bb08:	a201      	add	r2, pc, #4	; (adr r2, 800bb10 <any_buttons_pressed_routine+0x90>)
 800bb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0e:	bf00      	nop
 800bb10:	0800bbcd 	.word	0x0800bbcd
 800bb14:	0800bbe1 	.word	0x0800bbe1
 800bb18:	0800bc41 	.word	0x0800bc41
 800bb1c:	0800bbe7 	.word	0x0800bbe7
 800bb20:	0800bc41 	.word	0x0800bc41
 800bb24:	0800bc41 	.word	0x0800bc41
 800bb28:	0800bc41 	.word	0x0800bc41
 800bb2c:	0800bc41 	.word	0x0800bc41
 800bb30:	0800bc41 	.word	0x0800bc41
 800bb34:	0800bc41 	.word	0x0800bc41
 800bb38:	0800bc41 	.word	0x0800bc41
 800bb3c:	0800bc41 	.word	0x0800bc41
 800bb40:	0800bc41 	.word	0x0800bc41
 800bb44:	0800bc41 	.word	0x0800bc41
 800bb48:	0800bc41 	.word	0x0800bc41
 800bb4c:	0800bc41 	.word	0x0800bc41
 800bb50:	0800bc41 	.word	0x0800bc41
 800bb54:	0800bc41 	.word	0x0800bc41
 800bb58:	0800bc41 	.word	0x0800bc41
 800bb5c:	0800bc41 	.word	0x0800bc41
 800bb60:	0800bc41 	.word	0x0800bc41
 800bb64:	0800bc41 	.word	0x0800bc41
 800bb68:	0800bc41 	.word	0x0800bc41
 800bb6c:	0800bc41 	.word	0x0800bc41
 800bb70:	0800bc41 	.word	0x0800bc41
 800bb74:	0800bc41 	.word	0x0800bc41
 800bb78:	0800bc41 	.word	0x0800bc41
 800bb7c:	0800bc41 	.word	0x0800bc41
 800bb80:	0800bc41 	.word	0x0800bc41
 800bb84:	0800bc41 	.word	0x0800bc41
 800bb88:	0800bc41 	.word	0x0800bc41
 800bb8c:	0800bb9f 	.word	0x0800bb9f
 800bb90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb94:	d040      	beq.n	800bc18 <any_buttons_pressed_routine+0x198>
//			    }
//			break;
//		    default:
//			break;
	    }
    }
 800bb96:	e053      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		Power_button_pressed();
 800bb98:	f000 fb74 	bl	800c284 <Power_button_pressed>
		break;
 800bb9c:	e050      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		if (HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin) == GPIO_PIN_RESET)
 800bb9e:	2120      	movs	r1, #32
 800bba0:	4831      	ldr	r0, [pc, #196]	; (800bc68 <any_buttons_pressed_routine+0x1e8>)
 800bba2:	f003 fe1f 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d140      	bne.n	800bc2e <any_buttons_pressed_routine+0x1ae>
			SSD1322_Screen_State++;
 800bbac:	4b2f      	ldr	r3, [pc, #188]	; (800bc6c <any_buttons_pressed_routine+0x1ec>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	4b2d      	ldr	r3, [pc, #180]	; (800bc6c <any_buttons_pressed_routine+0x1ec>)
 800bbb6:	701a      	strb	r2, [r3, #0]
			if (ENUM_MAX_USER_DISPLAY == SSD1322_Screen_State) SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800bbb8:	4b2c      	ldr	r3, [pc, #176]	; (800bc6c <any_buttons_pressed_routine+0x1ec>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	2b0a      	cmp	r3, #10
 800bbbe:	d102      	bne.n	800bbc6 <any_buttons_pressed_routine+0x146>
 800bbc0:	4b2a      	ldr	r3, [pc, #168]	; (800bc6c <any_buttons_pressed_routine+0x1ec>)
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	701a      	strb	r2, [r3, #0]
			Button_pressed_change_screen();
 800bbc6:	f000 f86f 	bl	800bca8 <Button_pressed_change_screen>
		break;
 800bbca:	e030      	b.n	800bc2e <any_buttons_pressed_routine+0x1ae>
		if (HAL_GPIO_ReadPin(USER_BUTTON_2_GPIO_Port, USER_BUTTON_2_Pin) == GPIO_PIN_RESET)
 800bbcc:	2101      	movs	r1, #1
 800bbce:	4828      	ldr	r0, [pc, #160]	; (800bc70 <any_buttons_pressed_routine+0x1f0>)
 800bbd0:	f003 fe08 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d12b      	bne.n	800bc32 <any_buttons_pressed_routine+0x1b2>
			Button_pressed_accept();
 800bbda:	f000 f8c9 	bl	800bd70 <Button_pressed_accept>
		break;
 800bbde:	e028      	b.n	800bc32 <any_buttons_pressed_routine+0x1b2>
		    Button_pressed_set_down();
 800bbe0:	f000 f932 	bl	800be48 <Button_pressed_set_down>
		break;
 800bbe4:	e02c      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		    Button_pressed_set_up();
 800bbe6:	f000 f9ad 	bl	800bf44 <Button_pressed_set_up>
		break;
 800bbea:	e029      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		if (HAL_GPIO_ReadPin(ENCODER_BUTTON_VOLUME_FRONT_GPIO_Port, ENCODER_BUTTON_VOLUME_FRONT_Pin) == GPIO_PIN_RESET)
 800bbec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bbf0:	481f      	ldr	r0, [pc, #124]	; (800bc70 <any_buttons_pressed_routine+0x1f0>)
 800bbf2:	f003 fdf7 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d11c      	bne.n	800bc36 <any_buttons_pressed_routine+0x1b6>
			Encoder_button_volume_front();
 800bbfc:	f000 fa12 	bl	800c024 <Encoder_button_volume_front>
		break;
 800bc00:	e019      	b.n	800bc36 <any_buttons_pressed_routine+0x1b6>
		if (HAL_GPIO_ReadPin(ENCODER_BUTTON_VOLUME_BACK_GPIO_Port, ENCODER_BUTTON_VOLUME_BACK_Pin) == GPIO_PIN_RESET)
 800bc02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc06:	481a      	ldr	r0, [pc, #104]	; (800bc70 <any_buttons_pressed_routine+0x1f0>)
 800bc08:	f003 fdec 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d113      	bne.n	800bc3a <any_buttons_pressed_routine+0x1ba>
			Encoder_button_volume_back();
 800bc12:	f000 faa1 	bl	800c158 <Encoder_button_volume_back>
		break;
 800bc16:	e010      	b.n	800bc3a <any_buttons_pressed_routine+0x1ba>
		if (HAL_GPIO_ReadPin(ENCODER_BUTTON_LOUDNESS_GPIO_Port, ENCODER_BUTTON_LOUDNESS_Pin) == GPIO_PIN_RESET)
 800bc18:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc1c:	4812      	ldr	r0, [pc, #72]	; (800bc68 <any_buttons_pressed_routine+0x1e8>)
 800bc1e:	f003 fde1 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <any_buttons_pressed_routine+0x1be>
			Encoder_button_loudness();
 800bc28:	f000 fafe 	bl	800c228 <Encoder_button_loudness>
		break;
 800bc2c:	e007      	b.n	800bc3e <any_buttons_pressed_routine+0x1be>
		break;
 800bc2e:	bf00      	nop
 800bc30:	e006      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc32:	bf00      	nop
 800bc34:	e004      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc36:	bf00      	nop
 800bc38:	e002      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc3a:	bf00      	nop
 800bc3c:	e000      	b.n	800bc40 <any_buttons_pressed_routine+0x1c0>
		break;
 800bc3e:	bf00      	nop
    }
 800bc40:	bf00      	nop
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20000195 	.word	0x20000195
 800bc48:	2000178c 	.word	0x2000178c
 800bc4c:	20007828 	.word	0x20007828
 800bc50:	200057bc 	.word	0x200057bc
 800bc54:	20000193 	.word	0x20000193
 800bc58:	20000194 	.word	0x20000194
 800bc5c:	200000a7 	.word	0x200000a7
 800bc60:	20007a04 	.word	0x20007a04
 800bc64:	20000748 	.word	0x20000748
 800bc68:	48000800 	.word	0x48000800
 800bc6c:	200004f8 	.word	0x200004f8
 800bc70:	48000400 	.word	0x48000400

0800bc74 <HAL_GPIO_EXTI_Callback>:

//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    {
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	80fb      	strh	r3, [r7, #6]
	// after debouncing time go to timer output compare callback
//	if (states1 == true) // zabezpieczenie przed kolejnym wywołaniem przed zakończeniem timera
	    {
		HAL_TIM_OC_Start_IT(&htim17, TIM_CHANNEL_1);
 800bc7e:	2100      	movs	r1, #0
 800bc80:	4806      	ldr	r0, [pc, #24]	; (800bc9c <HAL_GPIO_EXTI_Callback+0x28>)
 800bc82:	f007 ff73 	bl	8013b6c <HAL_TIM_OC_Start_IT>
		button_debou_state = false;
 800bc86:	4b06      	ldr	r3, [pc, #24]	; (800bca0 <HAL_GPIO_EXTI_Callback+0x2c>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	701a      	strb	r2, [r3, #0]
		gGPIO_Pin = GPIO_Pin;
 800bc8c:	4a05      	ldr	r2, [pc, #20]	; (800bca4 <HAL_GPIO_EXTI_Callback+0x30>)
 800bc8e:	88fb      	ldrh	r3, [r7, #6]
 800bc90:	8013      	strh	r3, [r2, #0]
	    }

    }
 800bc92:	bf00      	nop
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20007a04 	.word	0x20007a04
 800bca0:	200000a7 	.word	0x200000a7
 800bca4:	20000748 	.word	0x20000748

0800bca8 <Button_pressed_change_screen>:
//--------------------------------------------------------------


// -_-
void Button_pressed_change_screen(void)
    {
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	af00      	add	r7, sp, #0
	if(ADC_IS_ON_flag == true)
 800bcac:	4b2a      	ldr	r3, [pc, #168]	; (800bd58 <Button_pressed_change_screen+0xb0>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d108      	bne.n	800bcc8 <Button_pressed_change_screen+0x20>
	    {
		HAL_TIM_Base_Stop(&htim6);
 800bcb6:	4829      	ldr	r0, [pc, #164]	; (800bd5c <Button_pressed_change_screen+0xb4>)
 800bcb8:	f007 feda 	bl	8013a70 <HAL_TIM_Base_Stop>
		HAL_ADC_Stop_DMA(&hadc1);
 800bcbc:	4828      	ldr	r0, [pc, #160]	; (800bd60 <Button_pressed_change_screen+0xb8>)
 800bcbe:	f001 fc4b 	bl	800d558 <HAL_ADC_Stop_DMA>
		ADC_IS_ON_flag = false;
 800bcc2:	4b25      	ldr	r3, [pc, #148]	; (800bd58 <Button_pressed_change_screen+0xb0>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	701a      	strb	r2, [r3, #0]
	    }


	switch (SSD1322_Screen_State)
 800bcc8:	4b26      	ldr	r3, [pc, #152]	; (800bd64 <Button_pressed_change_screen+0xbc>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	2b0a      	cmp	r3, #10
 800bcd0:	d834      	bhi.n	800bd3c <Button_pressed_change_screen+0x94>
 800bcd2:	a201      	add	r2, pc, #4	; (adr r2, 800bcd8 <Button_pressed_change_screen+0x30>)
 800bcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd8:	0800bd4d 	.word	0x0800bd4d
 800bcdc:	0800bd4d 	.word	0x0800bd4d
 800bce0:	0800bd05 	.word	0x0800bd05
 800bce4:	0800bd21 	.word	0x0800bd21
 800bce8:	0800bd4d 	.word	0x0800bd4d
 800bcec:	0800bd4d 	.word	0x0800bd4d
 800bcf0:	0800bd4d 	.word	0x0800bd4d
 800bcf4:	0800bd4d 	.word	0x0800bd4d
 800bcf8:	0800bd4d 	.word	0x0800bd4d
 800bcfc:	0800bd3d 	.word	0x0800bd3d
 800bd00:	0800bd4d 	.word	0x0800bd4d
		break;
	    case SSD1322_SCREEN_RADIO:

		break;
	    case SSD1322_SCREEN_FFT:
		HAL_TIM_Base_Start(&htim6);
 800bd04:	4815      	ldr	r0, [pc, #84]	; (800bd5c <Button_pressed_change_screen+0xb4>)
 800bd06:	f007 fe4b 	bl	80139a0 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_SamplesTEST, UV_meter_numb_of_chan);
 800bd0a:	4b17      	ldr	r3, [pc, #92]	; (800bd68 <Button_pressed_change_screen+0xc0>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	4916      	ldr	r1, [pc, #88]	; (800bd6c <Button_pressed_change_screen+0xc4>)
 800bd12:	4813      	ldr	r0, [pc, #76]	; (800bd60 <Button_pressed_change_screen+0xb8>)
 800bd14:	f001 fb6c 	bl	800d3f0 <HAL_ADC_Start_DMA>
		ADC_IS_ON_flag = true;
 800bd18:	4b0f      	ldr	r3, [pc, #60]	; (800bd58 <Button_pressed_change_screen+0xb0>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	701a      	strb	r2, [r3, #0]
		break;
 800bd1e:	e018      	b.n	800bd52 <Button_pressed_change_screen+0xaa>
	    case SSD1322_SCREEN_UVMETER:
		HAL_TIM_Base_Start(&htim6);
 800bd20:	480e      	ldr	r0, [pc, #56]	; (800bd5c <Button_pressed_change_screen+0xb4>)
 800bd22:	f007 fe3d 	bl	80139a0 <HAL_TIM_Base_Start>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC_SamplesTEST, UV_meter_numb_of_chan);
 800bd26:	4b10      	ldr	r3, [pc, #64]	; (800bd68 <Button_pressed_change_screen+0xc0>)
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	490f      	ldr	r1, [pc, #60]	; (800bd6c <Button_pressed_change_screen+0xc4>)
 800bd2e:	480c      	ldr	r0, [pc, #48]	; (800bd60 <Button_pressed_change_screen+0xb8>)
 800bd30:	f001 fb5e 	bl	800d3f0 <HAL_ADC_Start_DMA>
		ADC_IS_ON_flag = true;
 800bd34:	4b08      	ldr	r3, [pc, #32]	; (800bd58 <Button_pressed_change_screen+0xb0>)
 800bd36:	2201      	movs	r2, #1
 800bd38:	701a      	strb	r2, [r3, #0]
		//set flag indicating that adc is on
		break;
 800bd3a:	e00a      	b.n	800bd52 <Button_pressed_change_screen+0xaa>
		break;
	    case SSD1322_SCREEN_TIME_BOUNCING:

		break;
	    default:
		if (ENUM_MAX_USER_DISPLAY == SSD1322_Screen_State)
 800bd3c:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <Button_pressed_change_screen+0xbc>)
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b0a      	cmp	r3, #10
 800bd42:	d105      	bne.n	800bd50 <Button_pressed_change_screen+0xa8>
		    {
			SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800bd44:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <Button_pressed_change_screen+0xbc>)
 800bd46:	2201      	movs	r2, #1
 800bd48:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800bd4a:	e001      	b.n	800bd50 <Button_pressed_change_screen+0xa8>
		break;
 800bd4c:	bf00      	nop
 800bd4e:	e000      	b.n	800bd52 <Button_pressed_change_screen+0xaa>
		break;
 800bd50:	bf00      	nop
	    }

    }
 800bd52:	bf00      	nop
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	200001e8 	.word	0x200001e8
 800bd5c:	20007ae8 	.word	0x20007ae8
 800bd60:	200005e0 	.word	0x200005e0
 800bd64:	200004f8 	.word	0x200004f8
 800bd68:	200000a8 	.word	0x200000a8
 800bd6c:	200057c0 	.word	0x200057c0

0800bd70 <Button_pressed_accept>:

//
void Button_pressed_accept(void)
    {
 800bd70:	b580      	push	{r7, lr}
 800bd72:	af00      	add	r7, sp, #0
	switch (SSD1322_Screen_State)
 800bd74:	4b31      	ldr	r3, [pc, #196]	; (800be3c <Button_pressed_accept+0xcc>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	2b16      	cmp	r3, #22
 800bd7c:	d852      	bhi.n	800be24 <Button_pressed_accept+0xb4>
 800bd7e:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <Button_pressed_accept+0x14>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800be2d 	.word	0x0800be2d
 800bd88:	0800bde1 	.word	0x0800bde1
 800bd8c:	0800be2d 	.word	0x0800be2d
 800bd90:	0800be2d 	.word	0x0800be2d
 800bd94:	0800be25 	.word	0x0800be25
 800bd98:	0800be25 	.word	0x0800be25
 800bd9c:	0800bde7 	.word	0x0800bde7
 800bda0:	0800be03 	.word	0x0800be03
 800bda4:	0800be1f 	.word	0x0800be1f
 800bda8:	0800be25 	.word	0x0800be25
 800bdac:	0800be2d 	.word	0x0800be2d
 800bdb0:	0800be25 	.word	0x0800be25
 800bdb4:	0800be25 	.word	0x0800be25
 800bdb8:	0800be25 	.word	0x0800be25
 800bdbc:	0800be25 	.word	0x0800be25
 800bdc0:	0800be25 	.word	0x0800be25
 800bdc4:	0800be25 	.word	0x0800be25
 800bdc8:	0800be25 	.word	0x0800be25
 800bdcc:	0800be25 	.word	0x0800be25
 800bdd0:	0800be2d 	.word	0x0800be2d
 800bdd4:	0800be25 	.word	0x0800be25
 800bdd8:	0800be2d 	.word	0x0800be2d
 800bddc:	0800be2d 	.word	0x0800be2d
	    {
	    case SSD1322_SCREEN_TIME:
		break;
	    case SSD1322_SCREEN_RADIO:
		RDA5807_SeekUp();
 800bde0:	f7fa ffda 	bl	8006d98 <RDA5807_SeekUp>
		break;
 800bde4:	e027      	b.n	800be36 <Button_pressed_accept+0xc6>
	    case SSD1322_SCREEN_OFF:
		break;
	    case SSD1322_SCREEN_GoodBye:
		break;
	    case SSD1322_SCREEN_SETCLOCK:
		Clock_Data_Time++;
 800bde6:	4b16      	ldr	r3, [pc, #88]	; (800be40 <Button_pressed_accept+0xd0>)
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	4b14      	ldr	r3, [pc, #80]	; (800be40 <Button_pressed_accept+0xd0>)
 800bdf0:	701a      	strb	r2, [r3, #0]
		if (9 == Clock_Data_Time)
 800bdf2:	4b13      	ldr	r3, [pc, #76]	; (800be40 <Button_pressed_accept+0xd0>)
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b09      	cmp	r3, #9
 800bdf8:	d11a      	bne.n	800be30 <Button_pressed_accept+0xc0>
		    {
			Clock_Data_Time = 1;
 800bdfa:	4b11      	ldr	r3, [pc, #68]	; (800be40 <Button_pressed_accept+0xd0>)
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800be00:	e016      	b.n	800be30 <Button_pressed_accept+0xc0>
	    case SSD1322_SCREEN_SETALARM:
		AlarmDataChange++;
 800be02:	4b10      	ldr	r3, [pc, #64]	; (800be44 <Button_pressed_accept+0xd4>)
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	3301      	adds	r3, #1
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	4b0e      	ldr	r3, [pc, #56]	; (800be44 <Button_pressed_accept+0xd4>)
 800be0c:	701a      	strb	r2, [r3, #0]
		if (7 == AlarmDataChange)
 800be0e:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <Button_pressed_accept+0xd4>)
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	2b07      	cmp	r3, #7
 800be14:	d10e      	bne.n	800be34 <Button_pressed_accept+0xc4>
		    {
			AlarmDataChange = 1;
 800be16:	4b0b      	ldr	r3, [pc, #44]	; (800be44 <Button_pressed_accept+0xd4>)
 800be18:	2201      	movs	r2, #1
 800be1a:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800be1c:	e00a      	b.n	800be34 <Button_pressed_accept+0xc4>
	    case SSD1322_SCREEN_SETTINGS:
		Change_selected_setting();
 800be1e:	f000 fb1f 	bl	800c460 <Change_selected_setting>
		break;
 800be22:	e008      	b.n	800be36 <Button_pressed_accept+0xc6>
	    case SSD1322_SCREEN_USB:
		//tutaj akcept wejście w folder albo otworzenie pliku
		//jeżeli brak podpiętego USB to komunikat żeby podłączyć z formatowanie FatFS
		break;
	    default:
		SSD1322_Screen_State = SSD1322_SCREEN_TIME;
 800be24:	4b05      	ldr	r3, [pc, #20]	; (800be3c <Button_pressed_accept+0xcc>)
 800be26:	2201      	movs	r2, #1
 800be28:	701a      	strb	r2, [r3, #0]
		break;
 800be2a:	e004      	b.n	800be36 <Button_pressed_accept+0xc6>
		break;
 800be2c:	bf00      	nop
 800be2e:	e002      	b.n	800be36 <Button_pressed_accept+0xc6>
		break;
 800be30:	bf00      	nop
 800be32:	e000      	b.n	800be36 <Button_pressed_accept+0xc6>
		break;
 800be34:	bf00      	nop
	    }
    }
 800be36:	bf00      	nop
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	200004f8 	.word	0x200004f8
 800be40:	2000050a 	.word	0x2000050a
 800be44:	200004f9 	.word	0x200004f9

0800be48 <Button_pressed_set_down>:

//
void Button_pressed_set_down(void)
    {
 800be48:	b580      	push	{r7, lr}
 800be4a:	af00      	add	r7, sp, #0
	switch (SSD1322_Screen_State)
 800be4c:	4b38      	ldr	r3, [pc, #224]	; (800bf30 <Button_pressed_set_down+0xe8>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	3b01      	subs	r3, #1
 800be52:	2b16      	cmp	r3, #22
 800be54:	d863      	bhi.n	800bf1e <Button_pressed_set_down+0xd6>
 800be56:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <Button_pressed_set_down+0x14>)
 800be58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5c:	0800bf1f 	.word	0x0800bf1f
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800bebf 	.word	0x0800bebf
 800be68:	0800bec5 	.word	0x0800bec5
 800be6c:	0800bf1f 	.word	0x0800bf1f
 800be70:	0800bf19 	.word	0x0800bf19
 800be74:	0800bedb 	.word	0x0800bedb
 800be78:	0800bef7 	.word	0x0800bef7
 800be7c:	0800bf13 	.word	0x0800bf13
 800be80:	0800bf1f 	.word	0x0800bf1f
 800be84:	0800bf1f 	.word	0x0800bf1f
 800be88:	0800bf1f 	.word	0x0800bf1f
 800be8c:	0800bf1f 	.word	0x0800bf1f
 800be90:	0800bf1f 	.word	0x0800bf1f
 800be94:	0800bf1f 	.word	0x0800bf1f
 800be98:	0800bf1f 	.word	0x0800bf1f
 800be9c:	0800bf1f 	.word	0x0800bf1f
 800bea0:	0800bf1f 	.word	0x0800bf1f
 800bea4:	0800bf1f 	.word	0x0800bf1f
 800bea8:	0800bf1f 	.word	0x0800bf1f
 800beac:	0800bf1f 	.word	0x0800bf1f
 800beb0:	0800bf1f 	.word	0x0800bf1f
 800beb4:	0800bf1f 	.word	0x0800bf1f
	    {
	    case SSD1322_SCREEN_TIME:
		break;
	    case SSD1322_SCREEN_RADIO:
		Save_Station_Freq_1();
 800beb8:	f000 fa8e 	bl	800c3d8 <Save_Station_Freq_1>
		break;
 800bebc:	e036      	b.n	800bf2c <Button_pressed_set_down+0xe4>
	    case SSD1322_SCREEN_WakeUp:
		break;
	    case SSD1322_SCREEN_FFT:
		Change_FFT_source_Down();
 800bebe:	f000 fddf 	bl	800ca80 <Change_FFT_source_Down>
		break;
 800bec2:	e033      	b.n	800bf2c <Button_pressed_set_down+0xe4>
	    case SSD1322_SCREEN_UVMETER:
		if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800bec4:	2102      	movs	r1, #2
 800bec6:	481b      	ldr	r0, [pc, #108]	; (800bf34 <Button_pressed_set_down+0xec>)
 800bec8:	f003 fc8c 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d127      	bne.n	800bf22 <Button_pressed_set_down+0xda>
		    {
			UV_meter_front_back = UV_METER_BACK;
 800bed2:	4b19      	ldr	r3, [pc, #100]	; (800bf38 <Button_pressed_set_down+0xf0>)
 800bed4:	2201      	movs	r2, #1
 800bed6:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800bed8:	e023      	b.n	800bf22 <Button_pressed_set_down+0xda>
	    case SSD1322_SCREEN_OFF:
		break;
	    case SSD1322_SCREEN_GoodBye:
		break;
	    case SSD1322_SCREEN_SETCLOCK:
		if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800beda:	2102      	movs	r1, #2
 800bedc:	4815      	ldr	r0, [pc, #84]	; (800bf34 <Button_pressed_set_down+0xec>)
 800bede:	f003 fc81 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d11e      	bne.n	800bf26 <Button_pressed_set_down+0xde>
		    {
			switch_change_time(Clock_Data_Time, 0);
 800bee8:	4b14      	ldr	r3, [pc, #80]	; (800bf3c <Button_pressed_set_down+0xf4>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2100      	movs	r1, #0
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fc fcae 	bl	8008850 <switch_change_time>
		    }
		break;
 800bef4:	e017      	b.n	800bf26 <Button_pressed_set_down+0xde>
	    case SSD1322_SCREEN_SETALARM:
		if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800bef6:	2102      	movs	r1, #2
 800bef8:	480e      	ldr	r0, [pc, #56]	; (800bf34 <Button_pressed_set_down+0xec>)
 800befa:	f003 fc73 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d112      	bne.n	800bf2a <Button_pressed_set_down+0xe2>
		    {
			switch_change_alarm(AlarmDataChange, 0);
 800bf04:	4b0e      	ldr	r3, [pc, #56]	; (800bf40 <Button_pressed_set_down+0xf8>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	2100      	movs	r1, #0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fc fe56 	bl	8008bbc <switch_change_alarm>
		    }
		break;
 800bf10:	e00b      	b.n	800bf2a <Button_pressed_set_down+0xe2>
	    case SSD1322_SCREEN_SETTINGS:
		Change_Down_Settings();
 800bf12:	f000 fae3 	bl	800c4dc <Change_Down_Settings>
		break;
 800bf16:	e009      	b.n	800bf2c <Button_pressed_set_down+0xe4>
	    case SSD1322_SCREEN_USB:
		break;
	    case SSD1322_SCREEN_SETINPUT:
		Change_Down_Input();
 800bf18:	f000 fcaa 	bl	800c870 <Change_Down_Input>
		break;
 800bf1c:	e006      	b.n	800bf2c <Button_pressed_set_down+0xe4>
	    default:
		break;
 800bf1e:	bf00      	nop
 800bf20:	e004      	b.n	800bf2c <Button_pressed_set_down+0xe4>
		break;
 800bf22:	bf00      	nop
 800bf24:	e002      	b.n	800bf2c <Button_pressed_set_down+0xe4>
		break;
 800bf26:	bf00      	nop
 800bf28:	e000      	b.n	800bf2c <Button_pressed_set_down+0xe4>
		break;
 800bf2a:	bf00      	nop
	    }
    }
 800bf2c:	bf00      	nop
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	200004f8 	.word	0x200004f8
 800bf34:	48000400 	.word	0x48000400
 800bf38:	200037b8 	.word	0x200037b8
 800bf3c:	2000050a 	.word	0x2000050a
 800bf40:	200004f9 	.word	0x200004f9

0800bf44 <Button_pressed_set_up>:

//
void Button_pressed_set_up(void)
    {
 800bf44:	b580      	push	{r7, lr}
 800bf46:	af00      	add	r7, sp, #0
	switch (SSD1322_Screen_State)
 800bf48:	4b32      	ldr	r3, [pc, #200]	; (800c014 <Button_pressed_set_up+0xd0>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	2b16      	cmp	r3, #22
 800bf50:	d858      	bhi.n	800c004 <Button_pressed_set_up+0xc0>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <Button_pressed_set_up+0x14>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800c005 	.word	0x0800c005
 800bf5c:	0800bfb5 	.word	0x0800bfb5
 800bf60:	0800bfbb 	.word	0x0800bfbb
 800bf64:	0800bfc1 	.word	0x0800bfc1
 800bf68:	0800c005 	.word	0x0800c005
 800bf6c:	0800bfff 	.word	0x0800bfff
 800bf70:	0800bfd7 	.word	0x0800bfd7
 800bf74:	0800bfdd 	.word	0x0800bfdd
 800bf78:	0800bff9 	.word	0x0800bff9
 800bf7c:	0800c005 	.word	0x0800c005
 800bf80:	0800c005 	.word	0x0800c005
 800bf84:	0800c005 	.word	0x0800c005
 800bf88:	0800c005 	.word	0x0800c005
 800bf8c:	0800c005 	.word	0x0800c005
 800bf90:	0800c005 	.word	0x0800c005
 800bf94:	0800c005 	.word	0x0800c005
 800bf98:	0800c005 	.word	0x0800c005
 800bf9c:	0800c005 	.word	0x0800c005
 800bfa0:	0800c005 	.word	0x0800c005
 800bfa4:	0800c005 	.word	0x0800c005
 800bfa8:	0800c005 	.word	0x0800c005
 800bfac:	0800c005 	.word	0x0800c005
 800bfb0:	0800c005 	.word	0x0800c005
	    {
	    case SSD1322_SCREEN_TIME:
		break;
	    case SSD1322_SCREEN_RADIO:
		Save_Station_Freq_2();
 800bfb4:	f000 f9cc 	bl	800c350 <Save_Station_Freq_2>
		break;
 800bfb8:	e029      	b.n	800c00e <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_WakeUp:
		break;
	    case SSD1322_SCREEN_FFT:
		Change_FFT_source_Up();
 800bfba:	f000 fd45 	bl	800ca48 <Change_FFT_source_Up>
		break;
 800bfbe:	e026      	b.n	800c00e <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_UVMETER:
		if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800bfc0:	2104      	movs	r1, #4
 800bfc2:	4815      	ldr	r0, [pc, #84]	; (800c018 <Button_pressed_set_up+0xd4>)
 800bfc4:	f003 fc0e 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d11c      	bne.n	800c008 <Button_pressed_set_up+0xc4>
		    {
			UV_meter_front_back = UV_METER_FRONT;
 800bfce:	4b13      	ldr	r3, [pc, #76]	; (800c01c <Button_pressed_set_up+0xd8>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	701a      	strb	r2, [r3, #0]
		    }
		break;
 800bfd4:	e018      	b.n	800c008 <Button_pressed_set_up+0xc4>
	    case SSD1322_SCREEN_OFF:
		break;
	    case SSD1322_SCREEN_GoodBye:
		break;
	    case SSD1322_SCREEN_SETCLOCK:
		Read_Set_TimeAndDate();
 800bfd6:	f000 fd6f 	bl	800cab8 <Read_Set_TimeAndDate>
		break;
 800bfda:	e018      	b.n	800c00e <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_SETALARM:
		if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800bfdc:	2104      	movs	r1, #4
 800bfde:	480e      	ldr	r0, [pc, #56]	; (800c018 <Button_pressed_set_up+0xd4>)
 800bfe0:	f003 fc00 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d110      	bne.n	800c00c <Button_pressed_set_up+0xc8>
		    {
			switch_change_alarm(AlarmDataChange, 1);
 800bfea:	4b0d      	ldr	r3, [pc, #52]	; (800c020 <Button_pressed_set_up+0xdc>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2101      	movs	r1, #1
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fc fde3 	bl	8008bbc <switch_change_alarm>
		    }
		break;
 800bff6:	e009      	b.n	800c00c <Button_pressed_set_up+0xc8>
	    case SSD1322_SCREEN_SETTINGS:
		Change_Up_Settings();
 800bff8:	f000 fb50 	bl	800c69c <Change_Up_Settings>
		break;
 800bffc:	e007      	b.n	800c00e <Button_pressed_set_up+0xca>
	    case SSD1322_SCREEN_USB:
		break;
	    case SSD1322_SCREEN_SETINPUT:
		Change_Up_Input();
 800bffe:	f000 fcad 	bl	800c95c <Change_Up_Input>
		break;
 800c002:	e004      	b.n	800c00e <Button_pressed_set_up+0xca>
	    default:
		break;
 800c004:	bf00      	nop
 800c006:	e002      	b.n	800c00e <Button_pressed_set_up+0xca>
		break;
 800c008:	bf00      	nop
 800c00a:	e000      	b.n	800c00e <Button_pressed_set_up+0xca>
		break;
 800c00c:	bf00      	nop
	    }
    }
 800c00e:	bf00      	nop
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	200004f8 	.word	0x200004f8
 800c018:	48000400 	.word	0x48000400
 800c01c:	200037b8 	.word	0x200037b8
 800c020:	200004f9 	.word	0x200004f9

0800c024 <Encoder_button_volume_front>:
*/
//--------------------------------------------------------------

//
void Encoder_button_volume_front(void)
    {
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0
	save_current_display_state(SSD1322_SCREEN_ENCODER_VOLUME_FRONT);
 800c028:	201e      	movs	r0, #30
 800c02a:	f7f9 fc13 	bl	8005854 <save_current_display_state>
	refresh_timer_state();
 800c02e:	f7f9 fcb5 	bl	800599c <refresh_timer_state>


	switch (encoderVolFront.audioOutputState)
 800c032:	4b43      	ldr	r3, [pc, #268]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c034:	799b      	ldrb	r3, [r3, #6]
 800c036:	2b06      	cmp	r3, #6
 800c038:	d87c      	bhi.n	800c134 <Encoder_button_volume_front+0x110>
 800c03a:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <Encoder_button_volume_front+0x1c>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c05d 	.word	0x0800c05d
 800c044:	0800c08d 	.word	0x0800c08d
 800c048:	0800c0f9 	.word	0x0800c0f9
 800c04c:	0800c11d 	.word	0x0800c11d
 800c050:	0800c135 	.word	0x0800c135
 800c054:	0800c125 	.word	0x0800c125
 800c058:	0800c12d 	.word	0x0800c12d
	    {
	    case MASTER:
		encoderVolFront.audioOutputState = MUTE;
 800c05c:	4b38      	ldr	r3, [pc, #224]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c05e:	2201      	movs	r2, #1
 800c060:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftFront (VOLUME_MUTE, 0);
 800c062:	2100      	movs	r1, #0
 800c064:	2060      	movs	r0, #96	; 0x60
 800c066:	f7fc f913 	bl	8008290 <TDA7719_SetVolume_LeftFront>
		TDA7719_SetVolume_RightFront(VOLUME_MUTE, 0);
 800c06a:	2100      	movs	r1, #0
 800c06c:	2060      	movs	r0, #96	; 0x60
 800c06e:	f7fc f949 	bl	8008304 <TDA7719_SetVolume_RightFront>
		TDA7719_SetVolume_LeftRear  (VOLUME_MUTE, 0);
 800c072:	2100      	movs	r1, #0
 800c074:	2060      	movs	r0, #96	; 0x60
 800c076:	f7fc f97f 	bl	8008378 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear (VOLUME_MUTE, 0);
 800c07a:	2100      	movs	r1, #0
 800c07c:	2060      	movs	r0, #96	; 0x60
 800c07e:	f7fc f9b5 	bl	80083ec <TDA7719_SetVolume_RightRear>
		HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 800c082:	213c      	movs	r1, #60	; 0x3c
 800c084:	482f      	ldr	r0, [pc, #188]	; (800c144 <Encoder_button_volume_front+0x120>)
 800c086:	f008 fa65 	bl	8014554 <HAL_TIM_Encoder_Stop_IT>
		break;
 800c08a:	e057      	b.n	800c13c <Encoder_button_volume_front+0x118>
	    case MUTE:
		encoderVolFront.audioOutputState = MASTER_V2;
 800c08c:	4b2c      	ldr	r3, [pc, #176]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c08e:	2202      	movs	r2, #2
 800c090:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftFront (tempVolFrontLeft, 0);
 800c092:	4b2d      	ldr	r3, [pc, #180]	; (800c148 <Encoder_button_volume_front+0x124>)
 800c094:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c098:	b25b      	sxtb	r3, r3
 800c09a:	2100      	movs	r1, #0
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fc f8f7 	bl	8008290 <TDA7719_SetVolume_LeftFront>
		TDA7719_SetVolume_RightFront(tempVolFrontRight, 0);
 800c0a2:	4b2a      	ldr	r3, [pc, #168]	; (800c14c <Encoder_button_volume_front+0x128>)
 800c0a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0a8:	b25b      	sxtb	r3, r3
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fc f929 	bl	8008304 <TDA7719_SetVolume_RightFront>
		TDA7719_SetVolume_LeftRear  (tempVolBackLeft, 0);
 800c0b2:	4b27      	ldr	r3, [pc, #156]	; (800c150 <Encoder_button_volume_front+0x12c>)
 800c0b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0b8:	b25b      	sxtb	r3, r3
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fc f95b 	bl	8008378 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear (tempVolBackLeft, 0);
 800c0c2:	4b23      	ldr	r3, [pc, #140]	; (800c150 <Encoder_button_volume_front+0x12c>)
 800c0c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0c8:	b25b      	sxtb	r3, r3
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fc f98d 	bl	80083ec <TDA7719_SetVolume_RightRear>
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackLeft);
 800c0d2:	4b1d      	ldr	r3, [pc, #116]	; (800c148 <Encoder_button_volume_front+0x124>)
 800c0d4:	f9b3 0000 	ldrsh.w	r0, [r3]
 800c0d8:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <Encoder_button_volume_front+0x128>)
 800c0da:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c0de:	4b1c      	ldr	r3, [pc, #112]	; (800c150 <Encoder_button_volume_front+0x12c>)
 800c0e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c0e4:	4b1a      	ldr	r3, [pc, #104]	; (800c150 <Encoder_button_volume_front+0x12c>)
 800c0e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0ea:	f7ff fa13 	bl	800b514 <TDA7719_SetVolume_Master>
		HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800c0ee:	213c      	movs	r1, #60	; 0x3c
 800c0f0:	4814      	ldr	r0, [pc, #80]	; (800c144 <Encoder_button_volume_front+0x120>)
 800c0f2:	f008 f981 	bl	80143f8 <HAL_TIM_Encoder_Start_IT>
//		HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_2);
		break;
 800c0f6:	e021      	b.n	800c13c <Encoder_button_volume_front+0x118>
	    case MASTER_V2:
		encoderVolFront.audioOutputState = NORMAL;
 800c0f8:	4b11      	ldr	r3, [pc, #68]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c0fa:	2203      	movs	r2, #3
 800c0fc:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_Master(tempVolFrontLeft, tempVolFrontRight, tempVolBackLeft, tempVolBackRight);
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <Encoder_button_volume_front+0x124>)
 800c100:	f9b3 0000 	ldrsh.w	r0, [r3]
 800c104:	4b11      	ldr	r3, [pc, #68]	; (800c14c <Encoder_button_volume_front+0x128>)
 800c106:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c10a:	4b11      	ldr	r3, [pc, #68]	; (800c150 <Encoder_button_volume_front+0x12c>)
 800c10c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c110:	4b10      	ldr	r3, [pc, #64]	; (800c154 <Encoder_button_volume_front+0x130>)
 800c112:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c116:	f7ff f9fd 	bl	800b514 <TDA7719_SetVolume_Master>
//		HAL_TIM_OC_Stop_IT(&htim15, TIM_CHANNEL_2);	//zmienić na 5 - 10 sekund
		break;
 800c11a:	e00f      	b.n	800c13c <Encoder_button_volume_front+0x118>
	    case NORMAL:
		encoderVolFront.audioOutputState = ATTE_LEFT;
 800c11c:	4b08      	ldr	r3, [pc, #32]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c11e:	2205      	movs	r2, #5
 800c120:	719a      	strb	r2, [r3, #6]
		break;
 800c122:	e00b      	b.n	800c13c <Encoder_button_volume_front+0x118>
	    case ATTE_LEFT:
		encoderVolFront.audioOutputState = ATTE_RIGHT;
 800c124:	4b06      	ldr	r3, [pc, #24]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c126:	2206      	movs	r2, #6
 800c128:	719a      	strb	r2, [r3, #6]
		break;
 800c12a:	e007      	b.n	800c13c <Encoder_button_volume_front+0x118>
	    case ATTE_RIGHT:
		encoderVolFront.audioOutputState = MASTER;
 800c12c:	4b04      	ldr	r3, [pc, #16]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c12e:	2200      	movs	r2, #0
 800c130:	719a      	strb	r2, [r3, #6]
		break;
 800c132:	e003      	b.n	800c13c <Encoder_button_volume_front+0x118>
	    default:
		encoderVolFront.audioOutputState = MASTER;
 800c134:	4b02      	ldr	r3, [pc, #8]	; (800c140 <Encoder_button_volume_front+0x11c>)
 800c136:	2200      	movs	r2, #0
 800c138:	719a      	strb	r2, [r3, #6]
		break;
 800c13a:	bf00      	nop
	    }

    }
 800c13c:	bf00      	nop
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	20000554 	.word	0x20000554
 800c144:	20007b80 	.word	0x20007b80
 800c148:	20000468 	.word	0x20000468
 800c14c:	20000246 	.word	0x20000246
 800c150:	200002b0 	.word	0x200002b0
 800c154:	2000046a 	.word	0x2000046a

0800c158 <Encoder_button_volume_back>:
//
void Encoder_button_volume_back(void)
    {
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
	switch (encoderVolBack.audioOutputState)
 800c15c:	4b2e      	ldr	r3, [pc, #184]	; (800c218 <Encoder_button_volume_back+0xc0>)
 800c15e:	799b      	ldrb	r3, [r3, #6]
 800c160:	3b01      	subs	r3, #1
 800c162:	2b05      	cmp	r3, #5
 800c164:	d852      	bhi.n	800c20c <Encoder_button_volume_back+0xb4>
 800c166:	a201      	add	r2, pc, #4	; (adr r2, 800c16c <Encoder_button_volume_back+0x14>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c1a5 	.word	0x0800c1a5
 800c170:	0800c20d 	.word	0x0800c20d
 800c174:	0800c185 	.word	0x0800c185
 800c178:	0800c1d5 	.word	0x0800c1d5
 800c17c:	0800c1fd 	.word	0x0800c1fd
 800c180:	0800c205 	.word	0x0800c205
	    {
	    case NORMAL:
		encoderVolBack.audioOutputState = MUTE;
 800c184:	4b24      	ldr	r3, [pc, #144]	; (800c218 <Encoder_button_volume_back+0xc0>)
 800c186:	2201      	movs	r2, #1
 800c188:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftRear (VOLUME_MUTE, 0);
 800c18a:	2100      	movs	r1, #0
 800c18c:	2060      	movs	r0, #96	; 0x60
 800c18e:	f7fc f8f3 	bl	8008378 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear(VOLUME_MUTE, 0);
 800c192:	2100      	movs	r1, #0
 800c194:	2060      	movs	r0, #96	; 0x60
 800c196:	f7fc f929 	bl	80083ec <TDA7719_SetVolume_RightRear>
		HAL_TIM_Encoder_Stop_IT(&htim8, TIM_CHANNEL_ALL);
 800c19a:	213c      	movs	r1, #60	; 0x3c
 800c19c:	481f      	ldr	r0, [pc, #124]	; (800c21c <Encoder_button_volume_back+0xc4>)
 800c19e:	f008 f9d9 	bl	8014554 <HAL_TIM_Encoder_Stop_IT>
		break;
 800c1a2:	e037      	b.n	800c214 <Encoder_button_volume_back+0xbc>
	    case MUTE:
		encoderVolBack.audioOutputState = NORMAL_V2;
 800c1a4:	4b1c      	ldr	r3, [pc, #112]	; (800c218 <Encoder_button_volume_back+0xc0>)
 800c1a6:	2204      	movs	r2, #4
 800c1a8:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftRear (tempVolBackLeft, 0);
 800c1aa:	4b1d      	ldr	r3, [pc, #116]	; (800c220 <Encoder_button_volume_back+0xc8>)
 800c1ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1b0:	b25b      	sxtb	r3, r3
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fc f8df 	bl	8008378 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear(tempVolBackRight, 0);
 800c1ba:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <Encoder_button_volume_back+0xcc>)
 800c1bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1c0:	b25b      	sxtb	r3, r3
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fc f911 	bl	80083ec <TDA7719_SetVolume_RightRear>
		HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800c1ca:	213c      	movs	r1, #60	; 0x3c
 800c1cc:	4813      	ldr	r0, [pc, #76]	; (800c21c <Encoder_button_volume_back+0xc4>)
 800c1ce:	f008 f913 	bl	80143f8 <HAL_TIM_Encoder_Start_IT>
		break;
 800c1d2:	e01f      	b.n	800c214 <Encoder_button_volume_back+0xbc>
	    case NORMAL_V2:
		encoderVolBack.audioOutputState = ATTE_LEFT;
 800c1d4:	4b10      	ldr	r3, [pc, #64]	; (800c218 <Encoder_button_volume_back+0xc0>)
 800c1d6:	2205      	movs	r2, #5
 800c1d8:	719a      	strb	r2, [r3, #6]
		TDA7719_SetVolume_LeftRear (tempVolBackLeft, 0);
 800c1da:	4b11      	ldr	r3, [pc, #68]	; (800c220 <Encoder_button_volume_back+0xc8>)
 800c1dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1e0:	b25b      	sxtb	r3, r3
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fc f8c7 	bl	8008378 <TDA7719_SetVolume_LeftRear>
		TDA7719_SetVolume_RightRear(tempVolBackRight, 0);
 800c1ea:	4b0e      	ldr	r3, [pc, #56]	; (800c224 <Encoder_button_volume_back+0xcc>)
 800c1ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1f0:	b25b      	sxtb	r3, r3
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fc f8f9 	bl	80083ec <TDA7719_SetVolume_RightRear>
		//HAL_TIM_OC_Start_IT(&htim16, TIM_CHANNEL_1);
		break;
 800c1fa:	e00b      	b.n	800c214 <Encoder_button_volume_back+0xbc>
	    case ATTE_LEFT:
		encoderVolBack.audioOutputState = ATTE_RIGHT;
 800c1fc:	4b06      	ldr	r3, [pc, #24]	; (800c218 <Encoder_button_volume_back+0xc0>)
 800c1fe:	2206      	movs	r2, #6
 800c200:	719a      	strb	r2, [r3, #6]
		break;
 800c202:	e007      	b.n	800c214 <Encoder_button_volume_back+0xbc>
	    case ATTE_RIGHT:
		encoderVolBack.audioOutputState = NORMAL;
 800c204:	4b04      	ldr	r3, [pc, #16]	; (800c218 <Encoder_button_volume_back+0xc0>)
 800c206:	2203      	movs	r2, #3
 800c208:	719a      	strb	r2, [r3, #6]
		break;
 800c20a:	e003      	b.n	800c214 <Encoder_button_volume_back+0xbc>
	    default:
		encoderVolBack.audioOutputState = NORMAL;
 800c20c:	4b02      	ldr	r3, [pc, #8]	; (800c218 <Encoder_button_volume_back+0xc0>)
 800c20e:	2203      	movs	r2, #3
 800c210:	719a      	strb	r2, [r3, #6]
		break;
 800c212:	bf00      	nop
	    }
    }
 800c214:	bf00      	nop
 800c216:	bd80      	pop	{r7, pc}
 800c218:	20000518 	.word	0x20000518
 800c21c:	20007920 	.word	0x20007920
 800c220:	200002b0 	.word	0x200002b0
 800c224:	2000046a 	.word	0x2000046a

0800c228 <Encoder_button_loudness>:
//
void Encoder_button_loudness(void)
    {
 800c228:	b480      	push	{r7}
 800c22a:	af00      	add	r7, sp, #0
//	save_display_state(SSD1322_SCREEN_ENCODER_LOUDNESS);
//	TIM_state_Cos_tam();

	switch (encoderFilterLoudness.buttonControl)
 800c22c:	4b14      	ldr	r3, [pc, #80]	; (800c280 <Encoder_button_loudness+0x58>)
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	2b03      	cmp	r3, #3
 800c232:	d81b      	bhi.n	800c26c <Encoder_button_loudness+0x44>
 800c234:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <Encoder_button_loudness+0x14>)
 800c236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23a:	bf00      	nop
 800c23c:	0800c24d 	.word	0x0800c24d
 800c240:	0800c255 	.word	0x0800c255
 800c244:	0800c25d 	.word	0x0800c25d
 800c248:	0800c265 	.word	0x0800c265
	    {
	    case SET_GAIN:
		encoderFilterLoudness.buttonControl = SET_CENTER_FREQ;
 800c24c:	4b0c      	ldr	r3, [pc, #48]	; (800c280 <Encoder_button_loudness+0x58>)
 800c24e:	2201      	movs	r2, #1
 800c250:	701a      	strb	r2, [r3, #0]
		break;
 800c252:	e00f      	b.n	800c274 <Encoder_button_loudness+0x4c>
	    case SET_CENTER_FREQ:
		encoderFilterLoudness.buttonControl = SET_SOFT_STEP;
 800c254:	4b0a      	ldr	r3, [pc, #40]	; (800c280 <Encoder_button_loudness+0x58>)
 800c256:	2202      	movs	r2, #2
 800c258:	701a      	strb	r2, [r3, #0]
		break;
 800c25a:	e00b      	b.n	800c274 <Encoder_button_loudness+0x4c>
	    case SET_SOFT_STEP:
		encoderFilterLoudness.buttonControl = SET_HIGH_BOOST;
 800c25c:	4b08      	ldr	r3, [pc, #32]	; (800c280 <Encoder_button_loudness+0x58>)
 800c25e:	2203      	movs	r2, #3
 800c260:	701a      	strb	r2, [r3, #0]
		break;
 800c262:	e007      	b.n	800c274 <Encoder_button_loudness+0x4c>
	    case SET_HIGH_BOOST:
		encoderFilterLoudness.buttonControl = SET_GAIN;
 800c264:	4b06      	ldr	r3, [pc, #24]	; (800c280 <Encoder_button_loudness+0x58>)
 800c266:	2200      	movs	r2, #0
 800c268:	701a      	strb	r2, [r3, #0]
		break;
 800c26a:	e003      	b.n	800c274 <Encoder_button_loudness+0x4c>
	    default:
		encoderFilterLoudness.buttonControl = SET_GAIN;
 800c26c:	4b04      	ldr	r3, [pc, #16]	; (800c280 <Encoder_button_loudness+0x58>)
 800c26e:	2200      	movs	r2, #0
 800c270:	701a      	strb	r2, [r3, #0]
		break;
 800c272:	bf00      	nop
	    }
    }
 800c274:	bf00      	nop
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	2000053c 	.word	0x2000053c

0800c284 <Power_button_pressed>:
		break;
	    }
    }
//
void Power_button_pressed(void)
    {
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
	//stopniowo zmniejszać głośność przez kilka sekund - opcja do włączenia w settings
	//w między czasie albo na końcu odpalić ekran pożegnalny

	/* routine after power button is pressed*/
	if(HAL_GPIO_ReadPin(POWER_BUTTON_GPIO_Port, POWER_BUTTON_Pin) == GPIO_PIN_RESET)
 800c288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c28c:	4826      	ldr	r0, [pc, #152]	; (800c328 <Power_button_pressed+0xa4>)
 800c28e:	f003 faa9 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d140      	bne.n	800c31a <Power_button_pressed+0x96>
	    {
		/* if power button is pressed while device is ON*/
		if(POWER_device_state_flag == 1)
 800c298:	4b24      	ldr	r3, [pc, #144]	; (800c32c <Power_button_pressed+0xa8>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d11b      	bne.n	800c2da <Power_button_pressed+0x56>
		    {
			//change global flag
			POWER_device_state_flag = 0;
 800c2a2:	4b22      	ldr	r3, [pc, #136]	; (800c32c <Power_button_pressed+0xa8>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
			//turn off display
			SSD1322_API_sleep_on();
 800c2a8:	f7f6 f988 	bl	80025bc <SSD1322_API_sleep_on>
			//turn off radio
			RDA5807_PowerOff();
 800c2ac:	f7fa fd42 	bl	8006d34 <RDA5807_PowerOff>
			//turn off preamp
			TDA7719_SetSoftMute(0, 1); //change to deinit TDA
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f7fb fbb8 	bl	8007a28 <TDA7719_SetSoftMute>
			//change power led mode
			SettingsUserMenu.Power_LED = 1;
 800c2b8:	4b1d      	ldr	r3, [pc, #116]	; (800c330 <Power_button_pressed+0xac>)
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	715a      	strb	r2, [r3, #5]
			//save to eeprom
			EEPROM_Save_FilterSettings(&encoderFilterTreble, &encoderFilterMiddle, &encoderFilterBass, &encoderFilterLoudness);
 800c2be:	4b1d      	ldr	r3, [pc, #116]	; (800c334 <Power_button_pressed+0xb0>)
 800c2c0:	4a1d      	ldr	r2, [pc, #116]	; (800c338 <Power_button_pressed+0xb4>)
 800c2c2:	491e      	ldr	r1, [pc, #120]	; (800c33c <Power_button_pressed+0xb8>)
 800c2c4:	481e      	ldr	r0, [pc, #120]	; (800c340 <Power_button_pressed+0xbc>)
 800c2c6:	f7fa fa22 	bl	800670e <EEPROM_Save_FilterSettings>
			EEPROM_Save_UserSetting(&savedUserSettings);
 800c2ca:	481e      	ldr	r0, [pc, #120]	; (800c344 <Power_button_pressed+0xc0>)
 800c2cc:	f7fa f924 	bl	8006518 <EEPROM_Save_UserSetting>
			EEPROM_Save_VolumeSettings(&encoderVolFront, &encoderVolBack);
 800c2d0:	491d      	ldr	r1, [pc, #116]	; (800c348 <Power_button_pressed+0xc4>)
 800c2d2:	481e      	ldr	r0, [pc, #120]	; (800c34c <Power_button_pressed+0xc8>)
 800c2d4:	f7fa f99c 	bl	8006610 <EEPROM_Save_VolumeSettings>
 800c2d8:	e01f      	b.n	800c31a <Power_button_pressed+0x96>
//			__NVIC_DisableIRQ(IRQn);
			//turn off relay
			//HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
		    }

		else if(POWER_device_state_flag == 0) //schować w funkcje, która będzie wywoływana przy starcie systemu, albo przy starcie będzie inny startup routine
 800c2da:	4b14      	ldr	r3, [pc, #80]	; (800c32c <Power_button_pressed+0xa8>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d11a      	bne.n	800c31a <Power_button_pressed+0x96>
		    {
			POWER_device_state_flag = 1;
 800c2e4:	4b11      	ldr	r3, [pc, #68]	; (800c32c <Power_button_pressed+0xa8>)
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	701a      	strb	r2, [r3, #0]
			//turn on display
			SSD1322_API_sleep_on();
 800c2ea:	f7f6 f967 	bl	80025bc <SSD1322_API_sleep_on>
			//turn on radio
			RDA5807_PowerOn();
 800c2ee:	f7fa fd05 	bl	8006cfc <RDA5807_PowerOn>
			//RDA5807_Init();
			//turn off preamp
			//TDA7719_init();
			TDA7719_SetSoftMute(1, 1);
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	f7fb fb97 	bl	8007a28 <TDA7719_SetSoftMute>
			//change power led mode
			SettingsUserMenu.Power_LED = 1;
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	; (800c330 <Power_button_pressed+0xac>)
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	715a      	strb	r2, [r3, #5]
			//read from eeprom settings
			EEPROM_Read_FilterSettings(&encoderFilterTreble, &encoderFilterMiddle, &encoderFilterBass, &encoderFilterLoudness);
 800c300:	4b0c      	ldr	r3, [pc, #48]	; (800c334 <Power_button_pressed+0xb0>)
 800c302:	4a0d      	ldr	r2, [pc, #52]	; (800c338 <Power_button_pressed+0xb4>)
 800c304:	490d      	ldr	r1, [pc, #52]	; (800c33c <Power_button_pressed+0xb8>)
 800c306:	480e      	ldr	r0, [pc, #56]	; (800c340 <Power_button_pressed+0xbc>)
 800c308:	f7fa f9be 	bl	8006688 <EEPROM_Read_FilterSettings>
			EEPROM_Read_UserSetting(&savedUserSettings);
 800c30c:	480d      	ldr	r0, [pc, #52]	; (800c344 <Power_button_pressed+0xc0>)
 800c30e:	f7fa f8c9 	bl	80064a4 <EEPROM_Read_UserSetting>
			EEPROM_Read_VolumeSettings(&encoderVolFront, &encoderVolBack);
 800c312:	490d      	ldr	r1, [pc, #52]	; (800c348 <Power_button_pressed+0xc4>)
 800c314:	480d      	ldr	r0, [pc, #52]	; (800c34c <Power_button_pressed+0xc8>)
 800c316:	f7fa f942 	bl	800659e <EEPROM_Read_VolumeSettings>

		    }
	    }

	/* routine after power button is realesed*/
	if(HAL_GPIO_ReadPin(POWER_BUTTON_GPIO_Port, POWER_BUTTON_Pin) == GPIO_PIN_SET)
 800c31a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c31e:	4802      	ldr	r0, [pc, #8]	; (800c328 <Power_button_pressed+0xa4>)
 800c320:	f003 fa60 	bl	800f7e4 <HAL_GPIO_ReadPin>
	    {


	    }
    }
 800c324:	bf00      	nop
 800c326:	bd80      	pop	{r7, pc}
 800c328:	48000400 	.word	0x48000400
 800c32c:	200001ea 	.word	0x200001ea
 800c330:	20007c18 	.word	0x20007c18
 800c334:	2000053c 	.word	0x2000053c
 800c338:	20000534 	.word	0x20000534
 800c33c:	20000510 	.word	0x20000510
 800c340:	2000052c 	.word	0x2000052c
 800c344:	20000520 	.word	0x20000520
 800c348:	20000518 	.word	0x20000518
 800c34c:	20000554 	.word	0x20000554

0800c350 <Save_Station_Freq_2>:
// Static functions definictions
//--------------------------------------------------------------

//
static void Save_Station_Freq_2(void)
    {
 800c350:	b580      	push	{r7, lr}
 800c352:	af00      	add	r7, sp, #0
	static uint32_t button_tim;
	static uint32_t button_tim1;

	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800c354:	2104      	movs	r1, #4
 800c356:	481c      	ldr	r0, [pc, #112]	; (800c3c8 <Save_Station_Freq_2+0x78>)
 800c358:	f003 fa44 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d104      	bne.n	800c36c <Save_Station_Freq_2+0x1c>
	    {
		button_tim = HAL_GetTick();
 800c362:	f000 fc6b 	bl	800cc3c <HAL_GetTick>
 800c366:	4603      	mov	r3, r0
 800c368:	4a18      	ldr	r2, [pc, #96]	; (800c3cc <Save_Station_Freq_2+0x7c>)
 800c36a:	6013      	str	r3, [r2, #0]
	    }

	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_SET)
 800c36c:	2104      	movs	r1, #4
 800c36e:	4816      	ldr	r0, [pc, #88]	; (800c3c8 <Save_Station_Freq_2+0x78>)
 800c370:	f003 fa38 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c374:	4603      	mov	r3, r0
 800c376:	2b01      	cmp	r3, #1
 800c378:	d124      	bne.n	800c3c4 <Save_Station_Freq_2+0x74>
	    {
		button_tim1 = HAL_GetTick();
 800c37a:	f000 fc5f 	bl	800cc3c <HAL_GetTick>
 800c37e:	4603      	mov	r3, r0
 800c380:	4a13      	ldr	r2, [pc, #76]	; (800c3d0 <Save_Station_Freq_2+0x80>)
 800c382:	6013      	str	r3, [r2, #0]

		if (button_tim + 2000 <= button_tim1) //if holded for more than 2 secs
 800c384:	4b11      	ldr	r3, [pc, #68]	; (800c3cc <Save_Station_Freq_2+0x7c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c38c:	4b10      	ldr	r3, [pc, #64]	; (800c3d0 <Save_Station_Freq_2+0x80>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	429a      	cmp	r2, r3
 800c392:	d805      	bhi.n	800c3a0 <Save_Station_Freq_2+0x50>
		    {
			savedUserSettings.stationSaved_2 = RDA5807_GetFrequency();
 800c394:	f7fa fd5e 	bl	8006e54 <RDA5807_GetFrequency>
 800c398:	4603      	mov	r3, r0
 800c39a:	461a      	mov	r2, r3
 800c39c:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <Save_Station_Freq_2+0x84>)
 800c39e:	809a      	strh	r2, [r3, #4]
		    }

		if (button_tim + 2000 >= button_tim1) //if holed for less than 2 secs
 800c3a0:	4b0a      	ldr	r3, [pc, #40]	; (800c3cc <Save_Station_Freq_2+0x7c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c3a8:	4b09      	ldr	r3, [pc, #36]	; (800c3d0 <Save_Station_Freq_2+0x80>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d309      	bcc.n	800c3c4 <Save_Station_Freq_2+0x74>
		    {
			RDA5807_SetFrequency(savedUserSettings.stationSaved_2);
 800c3b0:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <Save_Station_Freq_2+0x84>)
 800c3b2:	889b      	ldrh	r3, [r3, #4]
 800c3b4:	ee07 3a90 	vmov	s15, r3
 800c3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c3c0:	f7fa fd02 	bl	8006dc8 <RDA5807_SetFrequency>
		    }
	    }
    }
 800c3c4:	bf00      	nop
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	48000400 	.word	0x48000400
 800c3cc:	20000224 	.word	0x20000224
 800c3d0:	20000228 	.word	0x20000228
 800c3d4:	20000520 	.word	0x20000520

0800c3d8 <Save_Station_Freq_1>:

//
static void Save_Station_Freq_1(void)
    {
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
	static uint32_t button_timer;
	static uint32_t button_timer1;

	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800c3dc:	2102      	movs	r1, #2
 800c3de:	481c      	ldr	r0, [pc, #112]	; (800c450 <Save_Station_Freq_1+0x78>)
 800c3e0:	f003 fa00 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d104      	bne.n	800c3f4 <Save_Station_Freq_1+0x1c>
	    {
		button_timer = HAL_GetTick();
 800c3ea:	f000 fc27 	bl	800cc3c <HAL_GetTick>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	4a18      	ldr	r2, [pc, #96]	; (800c454 <Save_Station_Freq_1+0x7c>)
 800c3f2:	6013      	str	r3, [r2, #0]
	    }

	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_SET)
 800c3f4:	2102      	movs	r1, #2
 800c3f6:	4816      	ldr	r0, [pc, #88]	; (800c450 <Save_Station_Freq_1+0x78>)
 800c3f8:	f003 f9f4 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d124      	bne.n	800c44c <Save_Station_Freq_1+0x74>
	    {
		button_timer1 = HAL_GetTick();
 800c402:	f000 fc1b 	bl	800cc3c <HAL_GetTick>
 800c406:	4603      	mov	r3, r0
 800c408:	4a13      	ldr	r2, [pc, #76]	; (800c458 <Save_Station_Freq_1+0x80>)
 800c40a:	6013      	str	r3, [r2, #0]

		if (button_timer + 2000 <= button_timer1) //if holded for more than 2 secs
 800c40c:	4b11      	ldr	r3, [pc, #68]	; (800c454 <Save_Station_Freq_1+0x7c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c414:	4b10      	ldr	r3, [pc, #64]	; (800c458 <Save_Station_Freq_1+0x80>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d805      	bhi.n	800c428 <Save_Station_Freq_1+0x50>
		    {
			savedUserSettings.stationSaved_1 = RDA5807_GetFrequency();
 800c41c:	f7fa fd1a 	bl	8006e54 <RDA5807_GetFrequency>
 800c420:	4603      	mov	r3, r0
 800c422:	461a      	mov	r2, r3
 800c424:	4b0d      	ldr	r3, [pc, #52]	; (800c45c <Save_Station_Freq_1+0x84>)
 800c426:	805a      	strh	r2, [r3, #2]
			//EEPROM_Save_UserSetting(&savedUserSettings);
		    }

		if (button_timer + 2000 >= button_timer1) //if holed for less than 2 secs
 800c428:	4b0a      	ldr	r3, [pc, #40]	; (800c454 <Save_Station_Freq_1+0x7c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 800c430:	4b09      	ldr	r3, [pc, #36]	; (800c458 <Save_Station_Freq_1+0x80>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	429a      	cmp	r2, r3
 800c436:	d309      	bcc.n	800c44c <Save_Station_Freq_1+0x74>
		    {
			RDA5807_SetFrequency(savedUserSettings.stationSaved_1);
 800c438:	4b08      	ldr	r3, [pc, #32]	; (800c45c <Save_Station_Freq_1+0x84>)
 800c43a:	885b      	ldrh	r3, [r3, #2]
 800c43c:	ee07 3a90 	vmov	s15, r3
 800c440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c444:	eeb0 0a67 	vmov.f32	s0, s15
 800c448:	f7fa fcbe 	bl	8006dc8 <RDA5807_SetFrequency>
		    }
	    }
    }
 800c44c:	bf00      	nop
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	48000400 	.word	0x48000400
 800c454:	2000022c 	.word	0x2000022c
 800c458:	20000230 	.word	0x20000230
 800c45c:	20000520 	.word	0x20000520

0800c460 <Change_selected_setting>:

//
static void Change_selected_setting(void)
    {
 800c460:	b480      	push	{r7}
 800c462:	af00      	add	r7, sp, #0
	switch (SettingsUserMenu.SETTINGS_USER_MENU)
 800c464:	4b1b      	ldr	r3, [pc, #108]	; (800c4d4 <Change_selected_setting+0x74>)
 800c466:	7c1b      	ldrb	r3, [r3, #16]
 800c468:	2b05      	cmp	r3, #5
 800c46a:	d82d      	bhi.n	800c4c8 <Change_selected_setting+0x68>
 800c46c:	a201      	add	r2, pc, #4	; (adr r2, 800c474 <Change_selected_setting+0x14>)
 800c46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c472:	bf00      	nop
 800c474:	0800c495 	.word	0x0800c495
 800c478:	0800c49d 	.word	0x0800c49d
 800c47c:	0800c48d 	.word	0x0800c48d
 800c480:	0800c4a5 	.word	0x0800c4a5
 800c484:	0800c4b3 	.word	0x0800c4b3
 800c488:	0800c4bb 	.word	0x0800c4bb
	    {
	    case REFRESH_SCREEN_TIME:
		SettingsUserMenu.SETTINGS_USER_MENU = ALARM_SOURCE_A;
 800c48c:	4b11      	ldr	r3, [pc, #68]	; (800c4d4 <Change_selected_setting+0x74>)
 800c48e:	2200      	movs	r2, #0
 800c490:	741a      	strb	r2, [r3, #16]
		break;
 800c492:	e01a      	b.n	800c4ca <Change_selected_setting+0x6a>
	    case ALARM_SOURCE_A:
		SettingsUserMenu.SETTINGS_USER_MENU = ALARM_SOURCE_B;
 800c494:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <Change_selected_setting+0x74>)
 800c496:	2201      	movs	r2, #1
 800c498:	741a      	strb	r2, [r3, #16]
		break;
 800c49a:	e016      	b.n	800c4ca <Change_selected_setting+0x6a>
	    case ALARM_SOURCE_B:
		SettingsUserMenu.SETTINGS_USER_MENU = USER_NAME;
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <Change_selected_setting+0x74>)
 800c49e:	2203      	movs	r2, #3
 800c4a0:	741a      	strb	r2, [r3, #16]
		break;
 800c4a2:	e012      	b.n	800c4ca <Change_selected_setting+0x6a>
	    case USER_NAME:
		SettingsUserMenu.SETTINGS_USER_MENU = DISPLAY_MODE_ON_OFF;
 800c4a4:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <Change_selected_setting+0x74>)
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	741a      	strb	r2, [r3, #16]
		settings_page = PAGE_SETTINGS_2;
 800c4aa:	4b0b      	ldr	r3, [pc, #44]	; (800c4d8 <Change_selected_setting+0x78>)
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	701a      	strb	r2, [r3, #0]
		break;
 800c4b0:	e00b      	b.n	800c4ca <Change_selected_setting+0x6a>
	    case DISPLAY_MODE_ON_OFF:
		SettingsUserMenu.SETTINGS_USER_MENU = POWER_LED;
 800c4b2:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <Change_selected_setting+0x74>)
 800c4b4:	2205      	movs	r2, #5
 800c4b6:	741a      	strb	r2, [r3, #16]
		break;
 800c4b8:	e007      	b.n	800c4ca <Change_selected_setting+0x6a>
	    case POWER_LED:
		SettingsUserMenu.SETTINGS_USER_MENU = REFRESH_SCREEN_TIME;
 800c4ba:	4b06      	ldr	r3, [pc, #24]	; (800c4d4 <Change_selected_setting+0x74>)
 800c4bc:	2202      	movs	r2, #2
 800c4be:	741a      	strb	r2, [r3, #16]
		settings_page = PAGE_SETTINGS_1;
 800c4c0:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <Change_selected_setting+0x78>)
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	701a      	strb	r2, [r3, #0]
		break;
 800c4c6:	e000      	b.n	800c4ca <Change_selected_setting+0x6a>
	    default:
		break;
 800c4c8:	bf00      	nop
	    }
    }
 800c4ca:	bf00      	nop
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	20007c18 	.word	0x20007c18
 800c4d8:	20000192 	.word	0x20000192

0800c4dc <Change_Down_Settings>:

//
static void Change_Down_Settings(void)
    {
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800c4e0:	2102      	movs	r1, #2
 800c4e2:	4863      	ldr	r0, [pc, #396]	; (800c670 <Change_Down_Settings+0x194>)
 800c4e4:	f003 f97e 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f040 80b2 	bne.w	800c654 <Change_Down_Settings+0x178>
	    {
	switch (SettingsUserMenu.SETTINGS_USER_MENU)
 800c4f0:	4b60      	ldr	r3, [pc, #384]	; (800c674 <Change_Down_Settings+0x198>)
 800c4f2:	7c1b      	ldrb	r3, [r3, #16]
 800c4f4:	2b05      	cmp	r3, #5
 800c4f6:	f200 80af 	bhi.w	800c658 <Change_Down_Settings+0x17c>
 800c4fa:	a201      	add	r2, pc, #4	; (adr r2, 800c500 <Change_Down_Settings+0x24>)
 800c4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c500:	0800c519 	.word	0x0800c519
 800c504:	0800c545 	.word	0x0800c545
 800c508:	0800c56f 	.word	0x0800c56f
 800c50c:	0800c5b7 	.word	0x0800c5b7
 800c510:	0800c5d3 	.word	0x0800c5d3
 800c514:	0800c639 	.word	0x0800c639
	    {
	    case ALARM_SOURCE_A:
		SettingsUserMenu.AlarmSource_A ++;
 800c518:	4b56      	ldr	r3, [pc, #344]	; (800c674 <Change_Down_Settings+0x198>)
 800c51a:	789b      	ldrb	r3, [r3, #2]
 800c51c:	3301      	adds	r3, #1
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	4b54      	ldr	r3, [pc, #336]	; (800c674 <Change_Down_Settings+0x198>)
 800c522:	709a      	strb	r2, [r3, #2]
		if(SettingsUserMenu.AlarmSource_A == 3) SettingsUserMenu.AlarmSource_A = RADIO;
 800c524:	4b53      	ldr	r3, [pc, #332]	; (800c674 <Change_Down_Settings+0x198>)
 800c526:	789b      	ldrb	r3, [r3, #2]
 800c528:	2b03      	cmp	r3, #3
 800c52a:	d102      	bne.n	800c532 <Change_Down_Settings+0x56>
 800c52c:	4b51      	ldr	r3, [pc, #324]	; (800c674 <Change_Down_Settings+0x198>)
 800c52e:	2205      	movs	r2, #5
 800c530:	709a      	strb	r2, [r3, #2]
		if(SettingsUserMenu.AlarmSource_A == 7) SettingsUserMenu.AlarmSource_A = JACK_1;
 800c532:	4b50      	ldr	r3, [pc, #320]	; (800c674 <Change_Down_Settings+0x198>)
 800c534:	789b      	ldrb	r3, [r3, #2]
 800c536:	2b07      	cmp	r3, #7
 800c538:	f040 8090 	bne.w	800c65c <Change_Down_Settings+0x180>
 800c53c:	4b4d      	ldr	r3, [pc, #308]	; (800c674 <Change_Down_Settings+0x198>)
 800c53e:	2201      	movs	r2, #1
 800c540:	709a      	strb	r2, [r3, #2]
		break;
 800c542:	e08b      	b.n	800c65c <Change_Down_Settings+0x180>
	    case ALARM_SOURCE_B:
		SettingsUserMenu.AlarmSource_B ++;
 800c544:	4b4b      	ldr	r3, [pc, #300]	; (800c674 <Change_Down_Settings+0x198>)
 800c546:	78db      	ldrb	r3, [r3, #3]
 800c548:	3301      	adds	r3, #1
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	4b49      	ldr	r3, [pc, #292]	; (800c674 <Change_Down_Settings+0x198>)
 800c54e:	70da      	strb	r2, [r3, #3]
		if(SettingsUserMenu.AlarmSource_B == 3) SettingsUserMenu.AlarmSource_B = RADIO;
 800c550:	4b48      	ldr	r3, [pc, #288]	; (800c674 <Change_Down_Settings+0x198>)
 800c552:	78db      	ldrb	r3, [r3, #3]
 800c554:	2b03      	cmp	r3, #3
 800c556:	d102      	bne.n	800c55e <Change_Down_Settings+0x82>
 800c558:	4b46      	ldr	r3, [pc, #280]	; (800c674 <Change_Down_Settings+0x198>)
 800c55a:	2205      	movs	r2, #5
 800c55c:	70da      	strb	r2, [r3, #3]
		if(SettingsUserMenu.AlarmSource_B == 7) SettingsUserMenu.AlarmSource_B = JACK_1;
 800c55e:	4b45      	ldr	r3, [pc, #276]	; (800c674 <Change_Down_Settings+0x198>)
 800c560:	78db      	ldrb	r3, [r3, #3]
 800c562:	2b07      	cmp	r3, #7
 800c564:	d17c      	bne.n	800c660 <Change_Down_Settings+0x184>
 800c566:	4b43      	ldr	r3, [pc, #268]	; (800c674 <Change_Down_Settings+0x198>)
 800c568:	2201      	movs	r2, #1
 800c56a:	70da      	strb	r2, [r3, #3]
		break;
 800c56c:	e078      	b.n	800c660 <Change_Down_Settings+0x184>
	    case REFRESH_SCREEN_TIME:
		{
		    if (SettingsUserMenu.Display_mode == Disp_normal)
 800c56e:	4b41      	ldr	r3, [pc, #260]	; (800c674 <Change_Down_Settings+0x198>)
 800c570:	791b      	ldrb	r3, [r3, #4]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d104      	bne.n	800c580 <Change_Down_Settings+0xa4>
			{
			    SettingsUserMenu.RefreshScreenTime = 65535;
 800c576:	4b3f      	ldr	r3, [pc, #252]	; (800c674 <Change_Down_Settings+0x198>)
 800c578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c57c:	801a      	strh	r2, [r3, #0]
			    break;
 800c57e:	e074      	b.n	800c66a <Change_Down_Settings+0x18e>
			}
		    refresh_time--;
 800c580:	4b3d      	ldr	r3, [pc, #244]	; (800c678 <Change_Down_Settings+0x19c>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	3b01      	subs	r3, #1
 800c586:	b2da      	uxtb	r2, r3
 800c588:	4b3b      	ldr	r3, [pc, #236]	; (800c678 <Change_Down_Settings+0x19c>)
 800c58a:	701a      	strb	r2, [r3, #0]
		    if(refresh_time == 0) refresh_time = 5;
 800c58c:	4b3a      	ldr	r3, [pc, #232]	; (800c678 <Change_Down_Settings+0x19c>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <Change_Down_Settings+0xbe>
 800c594:	4b38      	ldr	r3, [pc, #224]	; (800c678 <Change_Down_Settings+0x19c>)
 800c596:	2205      	movs	r2, #5
 800c598:	701a      	strb	r2, [r3, #0]
		    SettingsUserMenu.RefreshScreenTime = refresh_time_values[refresh_time];
 800c59a:	4b37      	ldr	r3, [pc, #220]	; (800c678 <Change_Down_Settings+0x19c>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	4b36      	ldr	r3, [pc, #216]	; (800c67c <Change_Down_Settings+0x1a0>)
 800c5a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c5a6:	4b33      	ldr	r3, [pc, #204]	; (800c674 <Change_Down_Settings+0x198>)
 800c5a8:	801a      	strh	r2, [r3, #0]
		    set_change_time_of_display(SettingsUserMenu.RefreshScreenTime);
 800c5aa:	4b32      	ldr	r3, [pc, #200]	; (800c674 <Change_Down_Settings+0x198>)
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7f6 f86e 	bl	8002690 <set_change_time_of_display>
		}
		break;
 800c5b4:	e059      	b.n	800c66a <Change_Down_Settings+0x18e>
	    case USER_NAME:
		{
		    inc++;
 800c5b6:	4b32      	ldr	r3, [pc, #200]	; (800c680 <Change_Down_Settings+0x1a4>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	4b30      	ldr	r3, [pc, #192]	; (800c680 <Change_Down_Settings+0x1a4>)
 800c5c0:	701a      	strb	r2, [r3, #0]
		    if(inc == 10) inc = 0;
 800c5c2:	4b2f      	ldr	r3, [pc, #188]	; (800c680 <Change_Down_Settings+0x1a4>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b0a      	cmp	r3, #10
 800c5c8:	d14c      	bne.n	800c664 <Change_Down_Settings+0x188>
 800c5ca:	4b2d      	ldr	r3, [pc, #180]	; (800c680 <Change_Down_Settings+0x1a4>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 800c5d0:	e048      	b.n	800c664 <Change_Down_Settings+0x188>
	    case DISPLAY_MODE_ON_OFF:
		{
		    //go to sleep mode after no actions is taken after 3 sec
		    SettingsUserMenu.Display_mode++;
 800c5d2:	4b28      	ldr	r3, [pc, #160]	; (800c674 <Change_Down_Settings+0x198>)
 800c5d4:	791b      	ldrb	r3, [r3, #4]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	4b26      	ldr	r3, [pc, #152]	; (800c674 <Change_Down_Settings+0x198>)
 800c5dc:	711a      	strb	r2, [r3, #4]
		    if(SettingsUserMenu.Display_mode == 5) SettingsUserMenu.Display_mode = 1;
 800c5de:	4b25      	ldr	r3, [pc, #148]	; (800c674 <Change_Down_Settings+0x198>)
 800c5e0:	791b      	ldrb	r3, [r3, #4]
 800c5e2:	2b05      	cmp	r3, #5
 800c5e4:	d102      	bne.n	800c5ec <Change_Down_Settings+0x110>
 800c5e6:	4b23      	ldr	r3, [pc, #140]	; (800c674 <Change_Down_Settings+0x198>)
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	711a      	strb	r2, [r3, #4]
		    if(SettingsUserMenu.Display_mode == Disp_normal) SettingsUserMenu.RefreshScreenTime = 65535;
 800c5ec:	4b21      	ldr	r3, [pc, #132]	; (800c674 <Change_Down_Settings+0x198>)
 800c5ee:	791b      	ldrb	r3, [r3, #4]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d103      	bne.n	800c5fc <Change_Down_Settings+0x120>
 800c5f4:	4b1f      	ldr	r3, [pc, #124]	; (800c674 <Change_Down_Settings+0x198>)
 800c5f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5fa:	801a      	strh	r2, [r3, #0]
		    if(SettingsUserMenu.Display_mode == Disp_standby)
 800c5fc:	4b1d      	ldr	r3, [pc, #116]	; (800c674 <Change_Down_Settings+0x198>)
 800c5fe:	791b      	ldrb	r3, [r3, #4]
 800c600:	2b03      	cmp	r3, #3
 800c602:	d115      	bne.n	800c630 <Change_Down_Settings+0x154>
			{
			    is_display_on_standby_flag = true;
 800c604:	4b1f      	ldr	r3, [pc, #124]	; (800c684 <Change_Down_Settings+0x1a8>)
 800c606:	2201      	movs	r2, #1
 800c608:	701a      	strb	r2, [r3, #0]
			    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c60a:	2200      	movs	r2, #0
 800c60c:	491e      	ldr	r1, [pc, #120]	; (800c688 <Change_Down_Settings+0x1ac>)
 800c60e:	481f      	ldr	r0, [pc, #124]	; (800c68c <Change_Down_Settings+0x1b0>)
 800c610:	f006 f944 	bl	801289c <HAL_RTC_GetTime>
			    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c614:	2200      	movs	r2, #0
 800c616:	491e      	ldr	r1, [pc, #120]	; (800c690 <Change_Down_Settings+0x1b4>)
 800c618:	481c      	ldr	r0, [pc, #112]	; (800c68c <Change_Down_Settings+0x1b0>)
 800c61a:	f006 fa29 	bl	8012a70 <HAL_RTC_GetDate>
			    saved_seconds = sTime.Seconds;
 800c61e:	4b1a      	ldr	r3, [pc, #104]	; (800c688 <Change_Down_Settings+0x1ac>)
 800c620:	789a      	ldrb	r2, [r3, #2]
 800c622:	4b1c      	ldr	r3, [pc, #112]	; (800c694 <Change_Down_Settings+0x1b8>)
 800c624:	701a      	strb	r2, [r3, #0]
			    saved_minutes = sTime.Minutes;
 800c626:	4b18      	ldr	r3, [pc, #96]	; (800c688 <Change_Down_Settings+0x1ac>)
 800c628:	785a      	ldrb	r2, [r3, #1]
 800c62a:	4b1b      	ldr	r3, [pc, #108]	; (800c698 <Change_Down_Settings+0x1bc>)
 800c62c:	701a      	strb	r2, [r3, #0]
		    else
			{
			    is_display_on_standby_flag = false;
			}
		}
		break;
 800c62e:	e01c      	b.n	800c66a <Change_Down_Settings+0x18e>
			    is_display_on_standby_flag = false;
 800c630:	4b14      	ldr	r3, [pc, #80]	; (800c684 <Change_Down_Settings+0x1a8>)
 800c632:	2200      	movs	r2, #0
 800c634:	701a      	strb	r2, [r3, #0]
		break;
 800c636:	e018      	b.n	800c66a <Change_Down_Settings+0x18e>
	    case POWER_LED:
		{
		    SettingsUserMenu.Power_LED++;
 800c638:	4b0e      	ldr	r3, [pc, #56]	; (800c674 <Change_Down_Settings+0x198>)
 800c63a:	795b      	ldrb	r3, [r3, #5]
 800c63c:	3301      	adds	r3, #1
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	4b0c      	ldr	r3, [pc, #48]	; (800c674 <Change_Down_Settings+0x198>)
 800c642:	715a      	strb	r2, [r3, #5]
		    if(SettingsUserMenu.Power_LED == 6) SettingsUserMenu.Power_LED = 1;
 800c644:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <Change_Down_Settings+0x198>)
 800c646:	795b      	ldrb	r3, [r3, #5]
 800c648:	2b06      	cmp	r3, #6
 800c64a:	d10d      	bne.n	800c668 <Change_Down_Settings+0x18c>
 800c64c:	4b09      	ldr	r3, [pc, #36]	; (800c674 <Change_Down_Settings+0x198>)
 800c64e:	2201      	movs	r2, #1
 800c650:	715a      	strb	r2, [r3, #5]
		}
		break;
 800c652:	e009      	b.n	800c668 <Change_Down_Settings+0x18c>
	    default:
		break;
	    }
	    }
 800c654:	bf00      	nop
 800c656:	e008      	b.n	800c66a <Change_Down_Settings+0x18e>
		break;
 800c658:	bf00      	nop
 800c65a:	e006      	b.n	800c66a <Change_Down_Settings+0x18e>
		break;
 800c65c:	bf00      	nop
 800c65e:	e004      	b.n	800c66a <Change_Down_Settings+0x18e>
		break;
 800c660:	bf00      	nop
 800c662:	e002      	b.n	800c66a <Change_Down_Settings+0x18e>
		break;
 800c664:	bf00      	nop
 800c666:	e000      	b.n	800c66a <Change_Down_Settings+0x18e>
		break;
 800c668:	bf00      	nop
    }
 800c66a:	bf00      	nop
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	48000400 	.word	0x48000400
 800c674:	20007c18 	.word	0x20007c18
 800c678:	200000b8 	.word	0x200000b8
 800c67c:	0801806c 	.word	0x0801806c
 800c680:	20000208 	.word	0x20000208
 800c684:	20000195 	.word	0x20000195
 800c688:	2000178c 	.word	0x2000178c
 800c68c:	20007828 	.word	0x20007828
 800c690:	200057bc 	.word	0x200057bc
 800c694:	20000193 	.word	0x20000193
 800c698:	20000194 	.word	0x20000194

0800c69c <Change_Up_Settings>:

//
static void Change_Up_Settings(void)
    {
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800c6a0:	2104      	movs	r1, #4
 800c6a2:	4866      	ldr	r0, [pc, #408]	; (800c83c <Change_Up_Settings+0x1a0>)
 800c6a4:	f003 f89e 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f040 80ba 	bne.w	800c824 <Change_Up_Settings+0x188>
	    {
		switch (SettingsUserMenu.SETTINGS_USER_MENU)
 800c6b0:	4b63      	ldr	r3, [pc, #396]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c6b2:	7c1b      	ldrb	r3, [r3, #16]
 800c6b4:	2b05      	cmp	r3, #5
 800c6b6:	f200 80b7 	bhi.w	800c828 <Change_Up_Settings+0x18c>
 800c6ba:	a201      	add	r2, pc, #4	; (adr r2, 800c6c0 <Change_Up_Settings+0x24>)
 800c6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c0:	0800c6d9 	.word	0x0800c6d9
 800c6c4:	0800c705 	.word	0x0800c705
 800c6c8:	0800c731 	.word	0x0800c731
 800c6cc:	0800c779 	.word	0x0800c779
 800c6d0:	0800c7a3 	.word	0x0800c7a3
 800c6d4:	0800c809 	.word	0x0800c809
		    {
		    case ALARM_SOURCE_A:
			SettingsUserMenu.AlarmSource_A--;
 800c6d8:	4b59      	ldr	r3, [pc, #356]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c6da:	789b      	ldrb	r3, [r3, #2]
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	4b57      	ldr	r3, [pc, #348]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c6e2:	709a      	strb	r2, [r3, #2]
			if (SettingsUserMenu.AlarmSource_A == 4)
 800c6e4:	4b56      	ldr	r3, [pc, #344]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c6e6:	789b      	ldrb	r3, [r3, #2]
 800c6e8:	2b04      	cmp	r3, #4
 800c6ea:	d102      	bne.n	800c6f2 <Change_Up_Settings+0x56>
			    SettingsUserMenu.AlarmSource_A = JACK_2;
 800c6ec:	4b54      	ldr	r3, [pc, #336]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	709a      	strb	r2, [r3, #2]
			if (SettingsUserMenu.AlarmSource_A == 255)
 800c6f2:	4b53      	ldr	r3, [pc, #332]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c6f4:	789b      	ldrb	r3, [r3, #2]
 800c6f6:	2bff      	cmp	r3, #255	; 0xff
 800c6f8:	f040 8098 	bne.w	800c82c <Change_Up_Settings+0x190>
			    SettingsUserMenu.AlarmSource_A = MICROPHONE;
 800c6fc:	4b50      	ldr	r3, [pc, #320]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c6fe:	2206      	movs	r2, #6
 800c700:	709a      	strb	r2, [r3, #2]
			break;
 800c702:	e093      	b.n	800c82c <Change_Up_Settings+0x190>
		    case ALARM_SOURCE_B:
			SettingsUserMenu.AlarmSource_B--;
 800c704:	4b4e      	ldr	r3, [pc, #312]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c706:	78db      	ldrb	r3, [r3, #3]
 800c708:	3b01      	subs	r3, #1
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	4b4c      	ldr	r3, [pc, #304]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c70e:	70da      	strb	r2, [r3, #3]
			if (SettingsUserMenu.AlarmSource_B == 4)
 800c710:	4b4b      	ldr	r3, [pc, #300]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c712:	78db      	ldrb	r3, [r3, #3]
 800c714:	2b04      	cmp	r3, #4
 800c716:	d102      	bne.n	800c71e <Change_Up_Settings+0x82>
			    SettingsUserMenu.AlarmSource_B = JACK_2;
 800c718:	4b49      	ldr	r3, [pc, #292]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c71a:	2202      	movs	r2, #2
 800c71c:	70da      	strb	r2, [r3, #3]
			if (SettingsUserMenu.AlarmSource_B == 255)
 800c71e:	4b48      	ldr	r3, [pc, #288]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c720:	78db      	ldrb	r3, [r3, #3]
 800c722:	2bff      	cmp	r3, #255	; 0xff
 800c724:	f040 8084 	bne.w	800c830 <Change_Up_Settings+0x194>
			    SettingsUserMenu.AlarmSource_B = MICROPHONE;
 800c728:	4b45      	ldr	r3, [pc, #276]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c72a:	2206      	movs	r2, #6
 800c72c:	70da      	strb	r2, [r3, #3]
			break;
 800c72e:	e07f      	b.n	800c830 <Change_Up_Settings+0x194>
		    case REFRESH_SCREEN_TIME:
			{
			    if (SettingsUserMenu.Display_mode == Disp_normal)
 800c730:	4b43      	ldr	r3, [pc, #268]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c732:	791b      	ldrb	r3, [r3, #4]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d104      	bne.n	800c742 <Change_Up_Settings+0xa6>
				{
				    SettingsUserMenu.RefreshScreenTime = 65535;
 800c738:	4b41      	ldr	r3, [pc, #260]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c73a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c73e:	801a      	strh	r2, [r3, #0]
				    break;
 800c740:	e079      	b.n	800c836 <Change_Up_Settings+0x19a>
				}
			    refresh_time++;
 800c742:	4b40      	ldr	r3, [pc, #256]	; (800c844 <Change_Up_Settings+0x1a8>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	3301      	adds	r3, #1
 800c748:	b2da      	uxtb	r2, r3
 800c74a:	4b3e      	ldr	r3, [pc, #248]	; (800c844 <Change_Up_Settings+0x1a8>)
 800c74c:	701a      	strb	r2, [r3, #0]
			    if (refresh_time == 6)refresh_time = 1;
 800c74e:	4b3d      	ldr	r3, [pc, #244]	; (800c844 <Change_Up_Settings+0x1a8>)
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b06      	cmp	r3, #6
 800c754:	d102      	bne.n	800c75c <Change_Up_Settings+0xc0>
 800c756:	4b3b      	ldr	r3, [pc, #236]	; (800c844 <Change_Up_Settings+0x1a8>)
 800c758:	2201      	movs	r2, #1
 800c75a:	701a      	strb	r2, [r3, #0]
			    SettingsUserMenu.RefreshScreenTime = refresh_time_values[refresh_time];
 800c75c:	4b39      	ldr	r3, [pc, #228]	; (800c844 <Change_Up_Settings+0x1a8>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	461a      	mov	r2, r3
 800c762:	4b39      	ldr	r3, [pc, #228]	; (800c848 <Change_Up_Settings+0x1ac>)
 800c764:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c768:	4b35      	ldr	r3, [pc, #212]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c76a:	801a      	strh	r2, [r3, #0]
			    set_change_time_of_display(SettingsUserMenu.RefreshScreenTime);
 800c76c:	4b34      	ldr	r3, [pc, #208]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	4618      	mov	r0, r3
 800c772:	f7f5 ff8d 	bl	8002690 <set_change_time_of_display>
			}
			break;
 800c776:	e05e      	b.n	800c836 <Change_Up_Settings+0x19a>
		    case USER_NAME:
			    letter++;
 800c778:	4b34      	ldr	r3, [pc, #208]	; (800c84c <Change_Up_Settings+0x1b0>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	3301      	adds	r3, #1
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	4b32      	ldr	r3, [pc, #200]	; (800c84c <Change_Up_Settings+0x1b0>)
 800c782:	701a      	strb	r2, [r3, #0]
			    if(letter == '{') letter = 'a';
 800c784:	4b31      	ldr	r3, [pc, #196]	; (800c84c <Change_Up_Settings+0x1b0>)
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b7b      	cmp	r3, #123	; 0x7b
 800c78a:	d102      	bne.n	800c792 <Change_Up_Settings+0xf6>
 800c78c:	4b2f      	ldr	r3, [pc, #188]	; (800c84c <Change_Up_Settings+0x1b0>)
 800c78e:	2261      	movs	r2, #97	; 0x61
 800c790:	701a      	strb	r2, [r3, #0]
			    user_name[inc] = letter;
 800c792:	4b2f      	ldr	r3, [pc, #188]	; (800c850 <Change_Up_Settings+0x1b4>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	461a      	mov	r2, r3
 800c798:	4b2c      	ldr	r3, [pc, #176]	; (800c84c <Change_Up_Settings+0x1b0>)
 800c79a:	7819      	ldrb	r1, [r3, #0]
 800c79c:	4b2d      	ldr	r3, [pc, #180]	; (800c854 <Change_Up_Settings+0x1b8>)
 800c79e:	5499      	strb	r1, [r3, r2]
			break;
 800c7a0:	e049      	b.n	800c836 <Change_Up_Settings+0x19a>
		    case DISPLAY_MODE_ON_OFF:
			    SettingsUserMenu.Display_mode--;
 800c7a2:	4b27      	ldr	r3, [pc, #156]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c7a4:	791b      	ldrb	r3, [r3, #4]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	4b25      	ldr	r3, [pc, #148]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c7ac:	711a      	strb	r2, [r3, #4]
			    if(SettingsUserMenu.Display_mode == 0) SettingsUserMenu.Display_mode = 4;
 800c7ae:	4b24      	ldr	r3, [pc, #144]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c7b0:	791b      	ldrb	r3, [r3, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d102      	bne.n	800c7bc <Change_Up_Settings+0x120>
 800c7b6:	4b22      	ldr	r3, [pc, #136]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	711a      	strb	r2, [r3, #4]
			    if(SettingsUserMenu.Display_mode == Disp_normal) SettingsUserMenu.RefreshScreenTime = 65535;
 800c7bc:	4b20      	ldr	r3, [pc, #128]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c7be:	791b      	ldrb	r3, [r3, #4]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d103      	bne.n	800c7cc <Change_Up_Settings+0x130>
 800c7c4:	4b1e      	ldr	r3, [pc, #120]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7ca:	801a      	strh	r2, [r3, #0]
			    if(SettingsUserMenu.Display_mode == Disp_standby)
 800c7cc:	4b1c      	ldr	r3, [pc, #112]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c7ce:	791b      	ldrb	r3, [r3, #4]
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d115      	bne.n	800c800 <Change_Up_Settings+0x164>
				{
				    is_display_on_standby_flag = true;
 800c7d4:	4b20      	ldr	r3, [pc, #128]	; (800c858 <Change_Up_Settings+0x1bc>)
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	701a      	strb	r2, [r3, #0]
				    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800c7da:	2200      	movs	r2, #0
 800c7dc:	491f      	ldr	r1, [pc, #124]	; (800c85c <Change_Up_Settings+0x1c0>)
 800c7de:	4820      	ldr	r0, [pc, #128]	; (800c860 <Change_Up_Settings+0x1c4>)
 800c7e0:	f006 f85c 	bl	801289c <HAL_RTC_GetTime>
				    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	491f      	ldr	r1, [pc, #124]	; (800c864 <Change_Up_Settings+0x1c8>)
 800c7e8:	481d      	ldr	r0, [pc, #116]	; (800c860 <Change_Up_Settings+0x1c4>)
 800c7ea:	f006 f941 	bl	8012a70 <HAL_RTC_GetDate>
				    saved_seconds = sTime.Seconds;
 800c7ee:	4b1b      	ldr	r3, [pc, #108]	; (800c85c <Change_Up_Settings+0x1c0>)
 800c7f0:	789a      	ldrb	r2, [r3, #2]
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <Change_Up_Settings+0x1cc>)
 800c7f4:	701a      	strb	r2, [r3, #0]
				    saved_minutes = sTime.Minutes;
 800c7f6:	4b19      	ldr	r3, [pc, #100]	; (800c85c <Change_Up_Settings+0x1c0>)
 800c7f8:	785a      	ldrb	r2, [r3, #1]
 800c7fa:	4b1c      	ldr	r3, [pc, #112]	; (800c86c <Change_Up_Settings+0x1d0>)
 800c7fc:	701a      	strb	r2, [r3, #0]
				}
			    else
				{
				    is_display_on_standby_flag = false;
				}
			break;
 800c7fe:	e01a      	b.n	800c836 <Change_Up_Settings+0x19a>
				    is_display_on_standby_flag = false;
 800c800:	4b15      	ldr	r3, [pc, #84]	; (800c858 <Change_Up_Settings+0x1bc>)
 800c802:	2200      	movs	r2, #0
 800c804:	701a      	strb	r2, [r3, #0]
			break;
 800c806:	e016      	b.n	800c836 <Change_Up_Settings+0x19a>
		    case POWER_LED:
			    SettingsUserMenu.Power_LED--;
 800c808:	4b0d      	ldr	r3, [pc, #52]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c80a:	795b      	ldrb	r3, [r3, #5]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c812:	715a      	strb	r2, [r3, #5]
			    if(SettingsUserMenu.Power_LED == 0) SettingsUserMenu.Power_LED = 5;
 800c814:	4b0a      	ldr	r3, [pc, #40]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c816:	795b      	ldrb	r3, [r3, #5]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10b      	bne.n	800c834 <Change_Up_Settings+0x198>
 800c81c:	4b08      	ldr	r3, [pc, #32]	; (800c840 <Change_Up_Settings+0x1a4>)
 800c81e:	2205      	movs	r2, #5
 800c820:	715a      	strb	r2, [r3, #5]
			break;
 800c822:	e007      	b.n	800c834 <Change_Up_Settings+0x198>
		    default:
			break;
		    }
	    }
 800c824:	bf00      	nop
 800c826:	e006      	b.n	800c836 <Change_Up_Settings+0x19a>
			break;
 800c828:	bf00      	nop
 800c82a:	e004      	b.n	800c836 <Change_Up_Settings+0x19a>
			break;
 800c82c:	bf00      	nop
 800c82e:	e002      	b.n	800c836 <Change_Up_Settings+0x19a>
			break;
 800c830:	bf00      	nop
 800c832:	e000      	b.n	800c836 <Change_Up_Settings+0x19a>
			break;
 800c834:	bf00      	nop
    }
 800c836:	bf00      	nop
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	48000400 	.word	0x48000400
 800c840:	20007c18 	.word	0x20007c18
 800c844:	200000b8 	.word	0x200000b8
 800c848:	0801806c 	.word	0x0801806c
 800c84c:	200000b9 	.word	0x200000b9
 800c850:	20000208 	.word	0x20000208
 800c854:	200004fc 	.word	0x200004fc
 800c858:	20000195 	.word	0x20000195
 800c85c:	2000178c 	.word	0x2000178c
 800c860:	20007828 	.word	0x20007828
 800c864:	200057bc 	.word	0x200057bc
 800c868:	20000193 	.word	0x20000193
 800c86c:	20000194 	.word	0x20000194

0800c870 <Change_Down_Input>:

//
static void Change_Down_Input(void)
    {
 800c870:	b580      	push	{r7, lr}
 800c872:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800c874:	2102      	movs	r1, #2
 800c876:	4834      	ldr	r0, [pc, #208]	; (800c948 <Change_Down_Input+0xd8>)
 800c878:	f002 ffb4 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d160      	bne.n	800c944 <Change_Down_Input+0xd4>
	    {
		switch (TDA7719_config.set_input_front)
 800c882:	4b32      	ldr	r3, [pc, #200]	; (800c94c <Change_Down_Input+0xdc>)
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	b2db      	uxtb	r3, r3
 800c888:	2b06      	cmp	r3, #6
 800c88a:	d84f      	bhi.n	800c92c <Change_Down_Input+0xbc>
 800c88c:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <Change_Down_Input+0x24>)
 800c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c892:	bf00      	nop
 800c894:	0800c8b1 	.word	0x0800c8b1
 800c898:	0800c8b9 	.word	0x0800c8b9
 800c89c:	0800c8c1 	.word	0x0800c8c1
 800c8a0:	0800c92d 	.word	0x0800c92d
 800c8a4:	0800c92d 	.word	0x0800c92d
 800c8a8:	0800c8ff 	.word	0x0800c8ff
 800c8ac:	0800c925 	.word	0x0800c925
		    {
		    case BLUETOOTH:
			TDA7719_config.set_input_front = JACK_1;
 800c8b0:	4b26      	ldr	r3, [pc, #152]	; (800c94c <Change_Down_Input+0xdc>)
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	701a      	strb	r2, [r3, #0]
			break;
 800c8b6:	e03e      	b.n	800c936 <Change_Down_Input+0xc6>
		    case JACK_1:
			TDA7719_config.set_input_front = JACK_2;
 800c8b8:	4b24      	ldr	r3, [pc, #144]	; (800c94c <Change_Down_Input+0xdc>)
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	701a      	strb	r2, [r3, #0]
			break;
 800c8be:	e03a      	b.n	800c936 <Change_Down_Input+0xc6>
		    case JACK_2:
			TDA7719_config.set_input_front = RADIO;
 800c8c0:	4b22      	ldr	r3, [pc, #136]	; (800c94c <Change_Down_Input+0xdc>)
 800c8c2:	2205      	movs	r2, #5
 800c8c4:	701a      	strb	r2, [r3, #0]
			RADIO_IS_ON_front_flag = true;
 800c8c6:	4b22      	ldr	r3, [pc, #136]	; (800c950 <Change_Down_Input+0xe0>)
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_front_flag == true && RADIO_IS_ON_back_flag == false)
 800c8cc:	4b20      	ldr	r3, [pc, #128]	; (800c950 <Change_Down_Input+0xe0>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d12c      	bne.n	800c930 <Change_Down_Input+0xc0>
 800c8d6:	4b1f      	ldr	r3, [pc, #124]	; (800c954 <Change_Down_Input+0xe4>)
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d127      	bne.n	800c930 <Change_Down_Input+0xc0>
			    {
				RDA5807_Init();
 800c8e0:	f7fa f9e6 	bl	8006cb0 <RDA5807_Init>
				RDA5807_PowerOn();
 800c8e4:	f7fa fa0a 	bl	8006cfc <RDA5807_PowerOn>
				RDA5807_SetFrequency(savedUserSettings.radio_freq);
 800c8e8:	4b1b      	ldr	r3, [pc, #108]	; (800c958 <Change_Down_Input+0xe8>)
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	ee07 3a90 	vmov	s15, r3
 800c8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c8f8:	f7fa fa66 	bl	8006dc8 <RDA5807_SetFrequency>
				break;
 800c8fc:	e01b      	b.n	800c936 <Change_Down_Input+0xc6>
			    }
			else
			    break;
		    case RADIO:
			TDA7719_config.set_input_front = MICROPHONE;
 800c8fe:	4b13      	ldr	r3, [pc, #76]	; (800c94c <Change_Down_Input+0xdc>)
 800c900:	2206      	movs	r2, #6
 800c902:	701a      	strb	r2, [r3, #0]
			RADIO_IS_ON_front_flag = false;
 800c904:	4b12      	ldr	r3, [pc, #72]	; (800c950 <Change_Down_Input+0xe0>)
 800c906:	2200      	movs	r2, #0
 800c908:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_front_flag == false && RADIO_IS_ON_back_flag == false)
 800c90a:	4b11      	ldr	r3, [pc, #68]	; (800c950 <Change_Down_Input+0xe0>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10f      	bne.n	800c934 <Change_Down_Input+0xc4>
 800c914:	4b0f      	ldr	r3, [pc, #60]	; (800c954 <Change_Down_Input+0xe4>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10a      	bne.n	800c934 <Change_Down_Input+0xc4>
			    {
				RDA5807_PowerOff();
 800c91e:	f7fa fa09 	bl	8006d34 <RDA5807_PowerOff>
			    }
			break;
 800c922:	e007      	b.n	800c934 <Change_Down_Input+0xc4>
		    case MICROPHONE:
			TDA7719_config.set_input_front = BLUETOOTH;
 800c924:	4b09      	ldr	r3, [pc, #36]	; (800c94c <Change_Down_Input+0xdc>)
 800c926:	2200      	movs	r2, #0
 800c928:	701a      	strb	r2, [r3, #0]
			break;
 800c92a:	e004      	b.n	800c936 <Change_Down_Input+0xc6>
		    default:
			break;
 800c92c:	bf00      	nop
 800c92e:	e002      	b.n	800c936 <Change_Down_Input+0xc6>
		    }
		TDA7719_SetMainInput(TDA7719_config.set_input_front);
 800c930:	bf00      	nop
 800c932:	e000      	b.n	800c936 <Change_Down_Input+0xc6>
			break;
 800c934:	bf00      	nop
		TDA7719_SetMainInput(TDA7719_config.set_input_front);
 800c936:	4b05      	ldr	r3, [pc, #20]	; (800c94c <Change_Down_Input+0xdc>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	b25b      	sxtb	r3, r3
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fb f81e 	bl	8007980 <TDA7719_SetMainInput>
	    }
    }
 800c944:	bf00      	nop
 800c946:	bd80      	pop	{r7, pc}
 800c948:	48000400 	.word	0x48000400
 800c94c:	20000544 	.word	0x20000544
 800c950:	200077f8 	.word	0x200077f8
 800c954:	200037b9 	.word	0x200037b9
 800c958:	20000520 	.word	0x20000520

0800c95c <Change_Up_Input>:

//
static void Change_Up_Input(void)
    {
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800c960:	2104      	movs	r1, #4
 800c962:	4834      	ldr	r0, [pc, #208]	; (800ca34 <Change_Up_Input+0xd8>)
 800c964:	f002 ff3e 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d160      	bne.n	800ca30 <Change_Up_Input+0xd4>
	    {
		switch (TDA7719_config.set_input_back)
 800c96e:	4b32      	ldr	r3, [pc, #200]	; (800ca38 <Change_Up_Input+0xdc>)
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	2b06      	cmp	r3, #6
 800c976:	d84f      	bhi.n	800ca18 <Change_Up_Input+0xbc>
 800c978:	a201      	add	r2, pc, #4	; (adr r2, 800c980 <Change_Up_Input+0x24>)
 800c97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97e:	bf00      	nop
 800c980:	0800c99d 	.word	0x0800c99d
 800c984:	0800c9a5 	.word	0x0800c9a5
 800c988:	0800c9ad 	.word	0x0800c9ad
 800c98c:	0800ca19 	.word	0x0800ca19
 800c990:	0800ca19 	.word	0x0800ca19
 800c994:	0800c9eb 	.word	0x0800c9eb
 800c998:	0800ca11 	.word	0x0800ca11
		    {
		    case BLUETOOTH:
			TDA7719_config.set_input_back = JACK_1;
 800c99c:	4b26      	ldr	r3, [pc, #152]	; (800ca38 <Change_Up_Input+0xdc>)
 800c99e:	2201      	movs	r2, #1
 800c9a0:	705a      	strb	r2, [r3, #1]
			break;
 800c9a2:	e03e      	b.n	800ca22 <Change_Up_Input+0xc6>
		    case JACK_1:
			TDA7719_config.set_input_back = JACK_2;
 800c9a4:	4b24      	ldr	r3, [pc, #144]	; (800ca38 <Change_Up_Input+0xdc>)
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	705a      	strb	r2, [r3, #1]
			break;
 800c9aa:	e03a      	b.n	800ca22 <Change_Up_Input+0xc6>
		    case JACK_2:
			TDA7719_config.set_input_back = RADIO;
 800c9ac:	4b22      	ldr	r3, [pc, #136]	; (800ca38 <Change_Up_Input+0xdc>)
 800c9ae:	2205      	movs	r2, #5
 800c9b0:	705a      	strb	r2, [r3, #1]
			RADIO_IS_ON_back_flag = true;
 800c9b2:	4b22      	ldr	r3, [pc, #136]	; (800ca3c <Change_Up_Input+0xe0>)
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_back_flag == true && RADIO_IS_ON_front_flag == false)
 800c9b8:	4b20      	ldr	r3, [pc, #128]	; (800ca3c <Change_Up_Input+0xe0>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d12c      	bne.n	800ca1c <Change_Up_Input+0xc0>
 800c9c2:	4b1f      	ldr	r3, [pc, #124]	; (800ca40 <Change_Up_Input+0xe4>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d127      	bne.n	800ca1c <Change_Up_Input+0xc0>
			    {
				RDA5807_Init();
 800c9cc:	f7fa f970 	bl	8006cb0 <RDA5807_Init>
				RDA5807_PowerOn();
 800c9d0:	f7fa f994 	bl	8006cfc <RDA5807_PowerOn>
				RDA5807_SetFrequency(savedUserSettings.radio_freq);
 800c9d4:	4b1b      	ldr	r3, [pc, #108]	; (800ca44 <Change_Up_Input+0xe8>)
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	ee07 3a90 	vmov	s15, r3
 800c9dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c9e4:	f7fa f9f0 	bl	8006dc8 <RDA5807_SetFrequency>
				break;
 800c9e8:	e01b      	b.n	800ca22 <Change_Up_Input+0xc6>
			    }
			break;
		    case RADIO:
			TDA7719_config.set_input_back = MICROPHONE;
 800c9ea:	4b13      	ldr	r3, [pc, #76]	; (800ca38 <Change_Up_Input+0xdc>)
 800c9ec:	2206      	movs	r2, #6
 800c9ee:	705a      	strb	r2, [r3, #1]
			RADIO_IS_ON_back_flag = false;
 800c9f0:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <Change_Up_Input+0xe0>)
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	701a      	strb	r2, [r3, #0]
			if (RADIO_IS_ON_back_flag == false && RADIO_IS_ON_front_flag == false)
 800c9f6:	4b11      	ldr	r3, [pc, #68]	; (800ca3c <Change_Up_Input+0xe0>)
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10f      	bne.n	800ca20 <Change_Up_Input+0xc4>
 800ca00:	4b0f      	ldr	r3, [pc, #60]	; (800ca40 <Change_Up_Input+0xe4>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10a      	bne.n	800ca20 <Change_Up_Input+0xc4>
			    {
				RDA5807_PowerOff();
 800ca0a:	f7fa f993 	bl	8006d34 <RDA5807_PowerOff>
			    }
			break;
 800ca0e:	e007      	b.n	800ca20 <Change_Up_Input+0xc4>
		    case MICROPHONE:
			TDA7719_config.set_input_back = BLUETOOTH;
 800ca10:	4b09      	ldr	r3, [pc, #36]	; (800ca38 <Change_Up_Input+0xdc>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	705a      	strb	r2, [r3, #1]
			break;
 800ca16:	e004      	b.n	800ca22 <Change_Up_Input+0xc6>
		    default:
			break;
 800ca18:	bf00      	nop
 800ca1a:	e002      	b.n	800ca22 <Change_Up_Input+0xc6>
			break;
 800ca1c:	bf00      	nop
 800ca1e:	e000      	b.n	800ca22 <Change_Up_Input+0xc6>
			break;
 800ca20:	bf00      	nop
		    }
		TDA7719_SetSecondInput(TDA7719_config.set_input_back);
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <Change_Up_Input+0xdc>)
 800ca24:	785b      	ldrb	r3, [r3, #1]
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	b25b      	sxtb	r3, r3
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fa ffd2 	bl	80079d4 <TDA7719_SetSecondInput>
	    }
    }
 800ca30:	bf00      	nop
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	48000400 	.word	0x48000400
 800ca38:	20000544 	.word	0x20000544
 800ca3c:	200037b9 	.word	0x200037b9
 800ca40:	200077f8 	.word	0x200077f8
 800ca44:	20000520 	.word	0x20000520

0800ca48 <Change_FFT_source_Up>:

//
static void Change_FFT_source_Up(void)
    {
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800ca4c:	2104      	movs	r1, #4
 800ca4e:	480a      	ldr	r0, [pc, #40]	; (800ca78 <Change_FFT_source_Up+0x30>)
 800ca50:	f002 fec8 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d10c      	bne.n	800ca74 <Change_FFT_source_Up+0x2c>
	    {
		FFT_channel_source--;
 800ca5a:	4b08      	ldr	r3, [pc, #32]	; (800ca7c <Change_FFT_source_Up+0x34>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	4b06      	ldr	r3, [pc, #24]	; (800ca7c <Change_FFT_source_Up+0x34>)
 800ca64:	701a      	strb	r2, [r3, #0]
		if (FFT_channel_source == FFT_ch_src_enum_MIN)
 800ca66:	4b05      	ldr	r3, [pc, #20]	; (800ca7c <Change_FFT_source_Up+0x34>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d102      	bne.n	800ca74 <Change_FFT_source_Up+0x2c>
		    {
			FFT_channel_source = FFT_back_right;
 800ca6e:	4b03      	ldr	r3, [pc, #12]	; (800ca7c <Change_FFT_source_Up+0x34>)
 800ca70:	2204      	movs	r2, #4
 800ca72:	701a      	strb	r2, [r3, #0]
		    }
	    }
    }
 800ca74:	bf00      	nop
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	48000400 	.word	0x48000400
 800ca7c:	200000ba 	.word	0x200000ba

0800ca80 <Change_FFT_source_Down>:

//
static void Change_FFT_source_Down(void)
    {
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_3_GPIO_Port, USER_BUTTON_3_Pin) == GPIO_PIN_RESET)
 800ca84:	2102      	movs	r1, #2
 800ca86:	480a      	ldr	r0, [pc, #40]	; (800cab0 <Change_FFT_source_Down+0x30>)
 800ca88:	f002 feac 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10c      	bne.n	800caac <Change_FFT_source_Down+0x2c>
	    {
		FFT_channel_source++;
 800ca92:	4b08      	ldr	r3, [pc, #32]	; (800cab4 <Change_FFT_source_Down+0x34>)
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	3301      	adds	r3, #1
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	4b06      	ldr	r3, [pc, #24]	; (800cab4 <Change_FFT_source_Down+0x34>)
 800ca9c:	701a      	strb	r2, [r3, #0]
		if (FFT_channel_source >= FFT_ch_src_enum_MAX)
 800ca9e:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <Change_FFT_source_Down+0x34>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b04      	cmp	r3, #4
 800caa4:	d902      	bls.n	800caac <Change_FFT_source_Down+0x2c>
		    {
			FFT_channel_source = FFT_front_left;
 800caa6:	4b03      	ldr	r3, [pc, #12]	; (800cab4 <Change_FFT_source_Down+0x34>)
 800caa8:	2201      	movs	r2, #1
 800caaa:	701a      	strb	r2, [r3, #0]
		    }
	    }
    }
 800caac:	bf00      	nop
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	48000400 	.word	0x48000400
 800cab4:	200000ba 	.word	0x200000ba

0800cab8 <Read_Set_TimeAndDate>:

//
static void Read_Set_TimeAndDate(void)
    {
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(USER_BUTTON_4_GPIO_Port, USER_BUTTON_4_Pin) == GPIO_PIN_RESET)
 800cabc:	2104      	movs	r1, #4
 800cabe:	4811      	ldr	r0, [pc, #68]	; (800cb04 <Read_Set_TimeAndDate+0x4c>)
 800cac0:	f002 fe90 	bl	800f7e4 <HAL_GPIO_ReadPin>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d119      	bne.n	800cafe <Read_Set_TimeAndDate+0x46>
	    {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800caca:	2200      	movs	r2, #0
 800cacc:	490e      	ldr	r1, [pc, #56]	; (800cb08 <Read_Set_TimeAndDate+0x50>)
 800cace:	480f      	ldr	r0, [pc, #60]	; (800cb0c <Read_Set_TimeAndDate+0x54>)
 800cad0:	f005 fee4 	bl	801289c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800cad4:	2200      	movs	r2, #0
 800cad6:	490e      	ldr	r1, [pc, #56]	; (800cb10 <Read_Set_TimeAndDate+0x58>)
 800cad8:	480c      	ldr	r0, [pc, #48]	; (800cb0c <Read_Set_TimeAndDate+0x54>)
 800cada:	f005 ffc9 	bl	8012a70 <HAL_RTC_GetDate>
		switch_change_time(Clock_Data_Time, 1);
 800cade:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <Read_Set_TimeAndDate+0x5c>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2101      	movs	r1, #1
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fb feb3 	bl	8008850 <switch_change_time>
		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800caea:	2200      	movs	r2, #0
 800caec:	4906      	ldr	r1, [pc, #24]	; (800cb08 <Read_Set_TimeAndDate+0x50>)
 800caee:	4807      	ldr	r0, [pc, #28]	; (800cb0c <Read_Set_TimeAndDate+0x54>)
 800caf0:	f005 fe34 	bl	801275c <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800caf4:	2200      	movs	r2, #0
 800caf6:	4906      	ldr	r1, [pc, #24]	; (800cb10 <Read_Set_TimeAndDate+0x58>)
 800caf8:	4804      	ldr	r0, [pc, #16]	; (800cb0c <Read_Set_TimeAndDate+0x54>)
 800cafa:	f005 ff31 	bl	8012960 <HAL_RTC_SetDate>
	    }
    }
 800cafe:	bf00      	nop
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	48000400 	.word	0x48000400
 800cb08:	2000178c 	.word	0x2000178c
 800cb0c:	20007828 	.word	0x20007828
 800cb10:	200057bc 	.word	0x200057bc
 800cb14:	2000050a 	.word	0x2000050a

0800cb18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800cb18:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cb50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800cb1c:	f7fd ff34 	bl	800a988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800cb20:	480c      	ldr	r0, [pc, #48]	; (800cb54 <LoopForever+0x6>)
  ldr r1, =_edata
 800cb22:	490d      	ldr	r1, [pc, #52]	; (800cb58 <LoopForever+0xa>)
  ldr r2, =_sidata
 800cb24:	4a0d      	ldr	r2, [pc, #52]	; (800cb5c <LoopForever+0xe>)
  movs r3, #0
 800cb26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cb28:	e002      	b.n	800cb30 <LoopCopyDataInit>

0800cb2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cb2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cb2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cb2e:	3304      	adds	r3, #4

0800cb30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cb30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cb32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cb34:	d3f9      	bcc.n	800cb2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cb36:	4a0a      	ldr	r2, [pc, #40]	; (800cb60 <LoopForever+0x12>)
  ldr r4, =_ebss
 800cb38:	4c0a      	ldr	r4, [pc, #40]	; (800cb64 <LoopForever+0x16>)
  movs r3, #0
 800cb3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cb3c:	e001      	b.n	800cb42 <LoopFillZerobss>

0800cb3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cb3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cb40:	3204      	adds	r2, #4

0800cb42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cb42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cb44:	d3fb      	bcc.n	800cb3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800cb46:	f009 f837 	bl	8015bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800cb4a:	f7fc fdd3 	bl	80096f4 <main>

0800cb4e <LoopForever>:

LoopForever:
    b LoopForever
 800cb4e:	e7fe      	b.n	800cb4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800cb50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800cb54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cb58:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 800cb5c:	08037660 	.word	0x08037660
  ldr r2, =_sbss
 800cb60:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 800cb64:	20007c40 	.word	0x20007c40

0800cb68 <AES_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800cb68:	e7fe      	b.n	800cb68 <AES_IRQHandler>

0800cb6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b082      	sub	sp, #8
 800cb6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cb74:	2003      	movs	r0, #3
 800cb76:	f001 ff63 	bl	800ea40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	f000 f80e 	bl	800cb9c <HAL_InitTick>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d002      	beq.n	800cb8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	71fb      	strb	r3, [r7, #7]
 800cb8a:	e001      	b.n	800cb90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800cb8c:	f7fd fd9c 	bl	800a6c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800cb90:	79fb      	ldrb	r3, [r7, #7]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800cba8:	4b17      	ldr	r3, [pc, #92]	; (800cc08 <HAL_InitTick+0x6c>)
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d023      	beq.n	800cbf8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800cbb0:	4b16      	ldr	r3, [pc, #88]	; (800cc0c <HAL_InitTick+0x70>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	4b14      	ldr	r3, [pc, #80]	; (800cc08 <HAL_InitTick+0x6c>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cbbe:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f001 ff6f 	bl	800eaaa <HAL_SYSTICK_Config>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10f      	bne.n	800cbf2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b0f      	cmp	r3, #15
 800cbd6:	d809      	bhi.n	800cbec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cbd8:	2200      	movs	r2, #0
 800cbda:	6879      	ldr	r1, [r7, #4]
 800cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe0:	f001 ff39 	bl	800ea56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800cbe4:	4a0a      	ldr	r2, [pc, #40]	; (800cc10 <HAL_InitTick+0x74>)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	e007      	b.n	800cbfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	73fb      	strb	r3, [r7, #15]
 800cbf0:	e004      	b.n	800cbfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	73fb      	strb	r3, [r7, #15]
 800cbf6:	e001      	b.n	800cbfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	200000c0 	.word	0x200000c0
 800cc0c:	200000b4 	.word	0x200000b4
 800cc10:	200000bc 	.word	0x200000bc

0800cc14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cc18:	4b06      	ldr	r3, [pc, #24]	; (800cc34 <HAL_IncTick+0x20>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <HAL_IncTick+0x24>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4413      	add	r3, r2
 800cc24:	4a04      	ldr	r2, [pc, #16]	; (800cc38 <HAL_IncTick+0x24>)
 800cc26:	6013      	str	r3, [r2, #0]
}
 800cc28:	bf00      	nop
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	200000c0 	.word	0x200000c0
 800cc38:	20007c2c 	.word	0x20007c2c

0800cc3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
  return uwTick;
 800cc40:	4b03      	ldr	r3, [pc, #12]	; (800cc50 <HAL_GetTick+0x14>)
 800cc42:	681b      	ldr	r3, [r3, #0]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	20007c2c 	.word	0x20007c2c

0800cc54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cc5c:	f7ff ffee 	bl	800cc3c <HAL_GetTick>
 800cc60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6c:	d005      	beq.n	800cc7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800cc6e:	4b0a      	ldr	r3, [pc, #40]	; (800cc98 <HAL_Delay+0x44>)
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	461a      	mov	r2, r3
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	4413      	add	r3, r2
 800cc78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cc7a:	bf00      	nop
 800cc7c:	f7ff ffde 	bl	800cc3c <HAL_GetTick>
 800cc80:	4602      	mov	r2, r0
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d8f7      	bhi.n	800cc7c <HAL_Delay+0x28>
  {
  }
}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	200000c0 	.word	0x200000c0

0800cc9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	609a      	str	r2, [r3, #8]
}
 800ccb6:	bf00      	nop
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b083      	sub	sp, #12
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	431a      	orrs	r2, r3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	609a      	str	r2, [r3, #8]
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
 800cd10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3360      	adds	r3, #96	; 0x60
 800cd16:	461a      	mov	r2, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	4413      	add	r3, r2
 800cd1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	4b08      	ldr	r3, [pc, #32]	; (800cd48 <LL_ADC_SetOffset+0x44>)
 800cd26:	4013      	ands	r3, r2
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	4313      	orrs	r3, r2
 800cd34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800cd3c:	bf00      	nop
 800cd3e:	371c      	adds	r7, #28
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr
 800cd48:	03fff000 	.word	0x03fff000

0800cd4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	3360      	adds	r3, #96	; 0x60
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	4413      	add	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	3360      	adds	r3, #96	; 0x60
 800cd88:	461a      	mov	r2, r3
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	431a      	orrs	r2, r3
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800cda2:	bf00      	nop
 800cda4:	371c      	adds	r7, #28
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	695b      	ldr	r3, [r3, #20]
 800cdbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	615a      	str	r2, [r3, #20]
}
 800cdc8:	bf00      	nop
 800cdca:	370c      	adds	r7, #12
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800cde8:	2301      	movs	r3, #1
 800cdea:	e000      	b.n	800cdee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	370c      	adds	r7, #12
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800cdfa:	b480      	push	{r7}
 800cdfc:	b087      	sub	sp, #28
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	60f8      	str	r0, [r7, #12]
 800ce02:	60b9      	str	r1, [r7, #8]
 800ce04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3330      	adds	r3, #48	; 0x30
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	0a1b      	lsrs	r3, r3, #8
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	f003 030c 	and.w	r3, r3, #12
 800ce16:	4413      	add	r3, r2
 800ce18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	f003 031f 	and.w	r3, r3, #31
 800ce24:	211f      	movs	r1, #31
 800ce26:	fa01 f303 	lsl.w	r3, r1, r3
 800ce2a:	43db      	mvns	r3, r3
 800ce2c:	401a      	ands	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	0e9b      	lsrs	r3, r3, #26
 800ce32:	f003 011f 	and.w	r1, r3, #31
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	f003 031f 	and.w	r3, r3, #31
 800ce3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce40:	431a      	orrs	r2, r3
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ce46:	bf00      	nop
 800ce48:	371c      	adds	r7, #28
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d101      	bne.n	800ce6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e000      	b.n	800ce6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3314      	adds	r3, #20
 800ce88:	461a      	mov	r2, r3
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	0e5b      	lsrs	r3, r3, #25
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	f003 0304 	and.w	r3, r3, #4
 800ce94:	4413      	add	r3, r2
 800ce96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	0d1b      	lsrs	r3, r3, #20
 800cea0:	f003 031f 	and.w	r3, r3, #31
 800cea4:	2107      	movs	r1, #7
 800cea6:	fa01 f303 	lsl.w	r3, r1, r3
 800ceaa:	43db      	mvns	r3, r3
 800ceac:	401a      	ands	r2, r3
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	0d1b      	lsrs	r3, r3, #20
 800ceb2:	f003 031f 	and.w	r3, r3, #31
 800ceb6:	6879      	ldr	r1, [r7, #4]
 800ceb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cebc:	431a      	orrs	r2, r3
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800cec2:	bf00      	nop
 800cec4:	371c      	adds	r7, #28
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
	...

0800ced0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cee8:	43db      	mvns	r3, r3
 800ceea:	401a      	ands	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f003 0318 	and.w	r3, r3, #24
 800cef2:	4908      	ldr	r1, [pc, #32]	; (800cf14 <LL_ADC_SetChannelSingleDiff+0x44>)
 800cef4:	40d9      	lsrs	r1, r3
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	400b      	ands	r3, r1
 800cefa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cefe:	431a      	orrs	r2, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800cf06:	bf00      	nop
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	0007ffff 	.word	0x0007ffff

0800cf18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	f003 031f 	and.w	r3, r3, #31
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800cf60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	6093      	str	r3, [r2, #8]
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf88:	d101      	bne.n	800cf8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e000      	b.n	800cf90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800cf8e:	2300      	movs	r3, #0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800cfac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cfb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfd8:	d101      	bne.n	800cfde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	e000      	b.n	800cfe0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d000:	f043 0201 	orr.w	r2, r3, #1
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800d008:	bf00      	nop
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr

0800d014 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d028:	f043 0202 	orr.w	r2, r3, #2
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d101      	bne.n	800d054 <LL_ADC_IsEnabled+0x18>
 800d050:	2301      	movs	r3, #1
 800d052:	e000      	b.n	800d056 <LL_ADC_IsEnabled+0x1a>
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f003 0302 	and.w	r3, r3, #2
 800d072:	2b02      	cmp	r3, #2
 800d074:	d101      	bne.n	800d07a <LL_ADC_IsDisableOngoing+0x18>
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <LL_ADC_IsDisableOngoing+0x1a>
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d09c:	f043 0204 	orr.w	r2, r3, #4
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d0c4:	f043 0210 	orr.w	r2, r3, #16
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800d0cc:	bf00      	nop
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	f003 0304 	and.w	r3, r3, #4
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	d101      	bne.n	800d0f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e000      	b.n	800d0f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800d0fe:	b480      	push	{r7}
 800d100:	b083      	sub	sp, #12
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d10e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d112:	f043 0220 	orr.w	r2, r3, #32
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800d11a:	bf00      	nop
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800d126:	b480      	push	{r7}
 800d128:	b083      	sub	sp, #12
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	f003 0308 	and.w	r3, r3, #8
 800d136:	2b08      	cmp	r3, #8
 800d138:	d101      	bne.n	800d13e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d14c:	b590      	push	{r4, r7, lr}
 800d14e:	b089      	sub	sp, #36	; 0x24
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800d158:	2300      	movs	r3, #0
 800d15a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d101      	bne.n	800d166 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e134      	b.n	800d3d0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d170:	2b00      	cmp	r3, #0
 800d172:	d109      	bne.n	800d188 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7fc f807 	bl	8009188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7ff fef1 	bl	800cf74 <LL_ADC_IsDeepPowerDownEnabled>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fed7 	bl	800cf50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7ff ff0c 	bl	800cfc4 <LL_ADC_IsInternalRegulatorEnabled>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d115      	bne.n	800d1de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7ff fef0 	bl	800cf9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d1bc:	4b86      	ldr	r3, [pc, #536]	; (800d3d8 <HAL_ADC_Init+0x28c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	099b      	lsrs	r3, r3, #6
 800d1c2:	4a86      	ldr	r2, [pc, #536]	; (800d3dc <HAL_ADC_Init+0x290>)
 800d1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c8:	099b      	lsrs	r3, r3, #6
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800d1d0:	e002      	b.n	800d1d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1f9      	bne.n	800d1d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff feee 	bl	800cfc4 <LL_ADC_IsInternalRegulatorEnabled>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10d      	bne.n	800d20a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f2:	f043 0210 	orr.w	r2, r3, #16
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1fe:	f043 0201 	orr.w	r2, r3, #1
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff ff62 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800d214:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d21a:	f003 0310 	and.w	r3, r3, #16
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f040 80cd 	bne.w	800d3be <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	2b00      	cmp	r3, #0
 800d228:	f040 80c9 	bne.w	800d3be <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d230:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800d234:	f043 0202 	orr.w	r2, r3, #2
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4618      	mov	r0, r3
 800d242:	f7ff fefb 	bl	800d03c <LL_ADC_IsEnabled>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d110      	bne.n	800d26e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d24c:	4864      	ldr	r0, [pc, #400]	; (800d3e0 <HAL_ADC_Init+0x294>)
 800d24e:	f7ff fef5 	bl	800d03c <LL_ADC_IsEnabled>
 800d252:	4604      	mov	r4, r0
 800d254:	4863      	ldr	r0, [pc, #396]	; (800d3e4 <HAL_ADC_Init+0x298>)
 800d256:	f7ff fef1 	bl	800d03c <LL_ADC_IsEnabled>
 800d25a:	4603      	mov	r3, r0
 800d25c:	4323      	orrs	r3, r4
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d105      	bne.n	800d26e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	4619      	mov	r1, r3
 800d268:	485f      	ldr	r0, [pc, #380]	; (800d3e8 <HAL_ADC_Init+0x29c>)
 800d26a:	f7ff fd17 	bl	800cc9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	7e5b      	ldrb	r3, [r3, #25]
 800d272:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800d278:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800d27e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800d284:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d28c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800d28e:	4313      	orrs	r3, r2
 800d290:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d106      	bne.n	800d2aa <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	045b      	lsls	r3, r3, #17
 800d2a4:	69ba      	ldr	r2, [r7, #24]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d009      	beq.n	800d2c6 <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	4b47      	ldr	r3, [pc, #284]	; (800d3ec <HAL_ADC_Init+0x2a0>)
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	6812      	ldr	r2, [r2, #0]
 800d2d4:	69b9      	ldr	r1, [r7, #24]
 800d2d6:	430b      	orrs	r3, r1
 800d2d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fefa 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800d2e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7ff ff1b 	bl	800d126 <LL_ADC_INJ_IsConversionOngoing>
 800d2f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d140      	bne.n	800d37a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d13d      	bne.n	800d37a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	7e1b      	ldrb	r3, [r3, #24]
 800d306:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800d308:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d310:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800d312:	4313      	orrs	r3, r2
 800d314:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d320:	f023 0306 	bic.w	r3, r3, #6
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	6812      	ldr	r2, [r2, #0]
 800d328:	69b9      	ldr	r1, [r7, #24]
 800d32a:	430b      	orrs	r3, r1
 800d32c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d334:	2b01      	cmp	r3, #1
 800d336:	d118      	bne.n	800d36a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d342:	f023 0304 	bic.w	r3, r3, #4
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d34e:	4311      	orrs	r1, r2
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800d354:	4311      	orrs	r1, r2
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d35a:	430a      	orrs	r2, r1
 800d35c:	431a      	orrs	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f042 0201 	orr.w	r2, r2, #1
 800d366:	611a      	str	r2, [r3, #16]
 800d368:	e007      	b.n	800d37a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	691a      	ldr	r2, [r3, #16]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f022 0201 	bic.w	r2, r2, #1
 800d378:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d10c      	bne.n	800d39c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d388:	f023 010f 	bic.w	r1, r3, #15
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	1e5a      	subs	r2, r3, #1
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	430a      	orrs	r2, r1
 800d398:	631a      	str	r2, [r3, #48]	; 0x30
 800d39a:	e007      	b.n	800d3ac <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f022 020f 	bic.w	r2, r2, #15
 800d3aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3b0:	f023 0303 	bic.w	r3, r3, #3
 800d3b4:	f043 0201 	orr.w	r2, r3, #1
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	659a      	str	r2, [r3, #88]	; 0x58
 800d3bc:	e007      	b.n	800d3ce <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3c2:	f043 0210 	orr.w	r2, r3, #16
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800d3ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3724      	adds	r7, #36	; 0x24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd90      	pop	{r4, r7, pc}
 800d3d8:	200000b4 	.word	0x200000b4
 800d3dc:	053e2d63 	.word	0x053e2d63
 800d3e0:	50040000 	.word	0x50040000
 800d3e4:	50040100 	.word	0x50040100
 800d3e8:	50040300 	.word	0x50040300
 800d3ec:	fff0c007 	.word	0xfff0c007

0800d3f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d3fc:	4850      	ldr	r0, [pc, #320]	; (800d540 <HAL_ADC_Start_DMA+0x150>)
 800d3fe:	f7ff fd8b 	bl	800cf18 <LL_ADC_GetMultimode>
 800d402:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fe65 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	f040 808e 	bne.w	800d532 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d101      	bne.n	800d424 <HAL_ADC_Start_DMA+0x34>
 800d420:	2302      	movs	r3, #2
 800d422:	e089      	b.n	800d538 <HAL_ADC_Start_DMA+0x148>
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2201      	movs	r2, #1
 800d428:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d005      	beq.n	800d43e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	2b05      	cmp	r3, #5
 800d436:	d002      	beq.n	800d43e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	2b09      	cmp	r3, #9
 800d43c:	d172      	bne.n	800d524 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f000 ffdc 	bl	800e3fc <ADC_Enable>
 800d444:	4603      	mov	r3, r0
 800d446:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800d448:	7dfb      	ldrb	r3, [r7, #23]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d165      	bne.n	800d51a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d456:	f023 0301 	bic.w	r3, r3, #1
 800d45a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a37      	ldr	r2, [pc, #220]	; (800d544 <HAL_ADC_Start_DMA+0x154>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d002      	beq.n	800d472 <HAL_ADC_Start_DMA+0x82>
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	e000      	b.n	800d474 <HAL_ADC_Start_DMA+0x84>
 800d472:	4b35      	ldr	r3, [pc, #212]	; (800d548 <HAL_ADC_Start_DMA+0x158>)
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	6812      	ldr	r2, [r2, #0]
 800d478:	4293      	cmp	r3, r2
 800d47a:	d002      	beq.n	800d482 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d105      	bne.n	800d48e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d486:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d496:	2b00      	cmp	r3, #0
 800d498:	d006      	beq.n	800d4a8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d49e:	f023 0206 	bic.w	r2, r3, #6
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800d4a6:	e002      	b.n	800d4ae <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b2:	4a26      	ldr	r2, [pc, #152]	; (800d54c <HAL_ADC_Start_DMA+0x15c>)
 800d4b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ba:	4a25      	ldr	r2, [pc, #148]	; (800d550 <HAL_ADC_Start_DMA+0x160>)
 800d4bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c2:	4a24      	ldr	r2, [pc, #144]	; (800d554 <HAL_ADC_Start_DMA+0x164>)
 800d4c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	221c      	movs	r2, #28
 800d4cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f042 0210 	orr.w	r2, r2, #16
 800d4e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f042 0201 	orr.w	r2, r2, #1
 800d4f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3340      	adds	r3, #64	; 0x40
 800d500:	4619      	mov	r1, r3
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f001 fd55 	bl	800efb4 <HAL_DMA_Start_IT>
 800d50a:	4603      	mov	r3, r0
 800d50c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff fdb8 	bl	800d088 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800d518:	e00d      	b.n	800d536 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 800d522:	e008      	b.n	800d536 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800d524:	2301      	movs	r3, #1
 800d526:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800d530:	e001      	b.n	800d536 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d532:	2302      	movs	r3, #2
 800d534:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800d536:	7dfb      	ldrb	r3, [r7, #23]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	50040300 	.word	0x50040300
 800d544:	50040100 	.word	0x50040100
 800d548:	50040000 	.word	0x50040000
 800d54c:	0800e57f 	.word	0x0800e57f
 800d550:	0800e657 	.word	0x0800e657
 800d554:	0800e673 	.word	0x0800e673

0800d558 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d566:	2b01      	cmp	r3, #1
 800d568:	d101      	bne.n	800d56e <HAL_ADC_Stop_DMA+0x16>
 800d56a:	2302      	movs	r3, #2
 800d56c:	e051      	b.n	800d612 <HAL_ADC_Stop_DMA+0xba>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800d576:	2103      	movs	r1, #3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fe83 	bl	800e284 <ADC_ConversionStop>
 800d57e:	4603      	mov	r3, r0
 800d580:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800d582:	7bfb      	ldrb	r3, [r7, #15]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d13f      	bne.n	800d608 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68da      	ldr	r2, [r3, #12]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f022 0201 	bic.w	r2, r2, #1
 800d596:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d59c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b02      	cmp	r3, #2
 800d5a4:	d10f      	bne.n	800d5c6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 fd7d 	bl	800f0aa <HAL_DMA_Abort>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f022 0210 	bic.w	r2, r2, #16
 800d5d4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d105      	bne.n	800d5e8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 ff6f 	bl	800e4c0 <ADC_Disable>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	73fb      	strb	r3, [r7, #15]
 800d5e6:	e002      	b.n	800d5ee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 ff69 	bl	800e4c0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d109      	bne.n	800d608 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d5fc:	f023 0301 	bic.w	r3, r3, #1
 800d600:	f043 0201 	orr.w	r2, r3, #1
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800d610:	7bfb      	ldrb	r3, [r7, #15]
}
 800d612:	4618      	mov	r0, r3
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08a      	sub	sp, #40	; 0x28
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800d624:	2300      	movs	r3, #0
 800d626:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d638:	4882      	ldr	r0, [pc, #520]	; (800d844 <HAL_ADC_IRQHandler+0x228>)
 800d63a:	f7ff fc6d 	bl	800cf18 <LL_ADC_GetMultimode>
 800d63e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	f003 0302 	and.w	r3, r3, #2
 800d646:	2b00      	cmp	r3, #0
 800d648:	d017      	beq.n	800d67a <HAL_ADC_IRQHandler+0x5e>
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	f003 0302 	and.w	r3, r3, #2
 800d650:	2b00      	cmp	r3, #0
 800d652:	d012      	beq.n	800d67a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d658:	f003 0310 	and.w	r3, r3, #16
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d105      	bne.n	800d66c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d664:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f001 f868 	bl	800e742 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2202      	movs	r2, #2
 800d678:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	f003 0304 	and.w	r3, r3, #4
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <HAL_ADC_IRQHandler+0x72>
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	f003 0304 	and.w	r3, r3, #4
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10a      	bne.n	800d6a4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800d694:	2b00      	cmp	r3, #0
 800d696:	f000 8083 	beq.w	800d7a0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	f003 0308 	and.w	r3, r3, #8
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d07d      	beq.n	800d7a0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a8:	f003 0310 	and.w	r3, r3, #16
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d105      	bne.n	800d6bc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff fb87 	bl	800cdd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d062      	beq.n	800d792 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a5d      	ldr	r2, [pc, #372]	; (800d848 <HAL_ADC_IRQHandler+0x22c>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d002      	beq.n	800d6dc <HAL_ADC_IRQHandler+0xc0>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	e000      	b.n	800d6de <HAL_ADC_IRQHandler+0xc2>
 800d6dc:	4b5b      	ldr	r3, [pc, #364]	; (800d84c <HAL_ADC_IRQHandler+0x230>)
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	6812      	ldr	r2, [r2, #0]
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d008      	beq.n	800d6f8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d005      	beq.n	800d6f8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b05      	cmp	r3, #5
 800d6f0:	d002      	beq.n	800d6f8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2b09      	cmp	r3, #9
 800d6f6:	d104      	bne.n	800d702 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	623b      	str	r3, [r7, #32]
 800d700:	e00c      	b.n	800d71c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a50      	ldr	r2, [pc, #320]	; (800d848 <HAL_ADC_IRQHandler+0x22c>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d002      	beq.n	800d712 <HAL_ADC_IRQHandler+0xf6>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	e000      	b.n	800d714 <HAL_ADC_IRQHandler+0xf8>
 800d712:	4b4e      	ldr	r3, [pc, #312]	; (800d84c <HAL_ADC_IRQHandler+0x230>)
 800d714:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800d71c:	6a3b      	ldr	r3, [r7, #32]
 800d71e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d135      	bne.n	800d792 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f003 0308 	and.w	r3, r3, #8
 800d730:	2b08      	cmp	r3, #8
 800d732:	d12e      	bne.n	800d792 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fccd 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d11a      	bne.n	800d77a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	685a      	ldr	r2, [r3, #4]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f022 020c 	bic.w	r2, r2, #12
 800d752:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d112      	bne.n	800d792 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d770:	f043 0201 	orr.w	r2, r3, #1
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	659a      	str	r2, [r3, #88]	; 0x58
 800d778:	e00b      	b.n	800d792 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d77e:	f043 0210 	orr.w	r2, r3, #16
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d78a:	f043 0201 	orr.w	r2, r3, #1
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7fc fcba 	bl	800a10c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	220c      	movs	r2, #12
 800d79e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	f003 0320 	and.w	r3, r3, #32
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d004      	beq.n	800d7b4 <HAL_ADC_IRQHandler+0x198>
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	f003 0320 	and.w	r3, r3, #32
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10b      	bne.n	800d7cc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 809f 	beq.w	800d8fe <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f000 8099 	beq.w	800d8fe <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7d0:	f003 0310 	and.w	r3, r3, #16
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d105      	bne.n	800d7e4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fb32 	bl	800ce52 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800d7ee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7ff faed 	bl	800cdd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d7fa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a11      	ldr	r2, [pc, #68]	; (800d848 <HAL_ADC_IRQHandler+0x22c>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d002      	beq.n	800d80c <HAL_ADC_IRQHandler+0x1f0>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	e000      	b.n	800d80e <HAL_ADC_IRQHandler+0x1f2>
 800d80c:	4b0f      	ldr	r3, [pc, #60]	; (800d84c <HAL_ADC_IRQHandler+0x230>)
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	6812      	ldr	r2, [r2, #0]
 800d812:	4293      	cmp	r3, r2
 800d814:	d008      	beq.n	800d828 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	2b06      	cmp	r3, #6
 800d820:	d002      	beq.n	800d828 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	2b07      	cmp	r3, #7
 800d826:	d104      	bne.n	800d832 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	623b      	str	r3, [r7, #32]
 800d830:	e013      	b.n	800d85a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a04      	ldr	r2, [pc, #16]	; (800d848 <HAL_ADC_IRQHandler+0x22c>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d009      	beq.n	800d850 <HAL_ADC_IRQHandler+0x234>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	e007      	b.n	800d852 <HAL_ADC_IRQHandler+0x236>
 800d842:	bf00      	nop
 800d844:	50040300 	.word	0x50040300
 800d848:	50040100 	.word	0x50040100
 800d84c:	50040000 	.word	0x50040000
 800d850:	4b7d      	ldr	r3, [pc, #500]	; (800da48 <HAL_ADC_IRQHandler+0x42c>)
 800d852:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d047      	beq.n	800d8f0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d866:	2b00      	cmp	r3, #0
 800d868:	d007      	beq.n	800d87a <HAL_ADC_IRQHandler+0x25e>
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d03f      	beq.n	800d8f0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800d876:	2b00      	cmp	r3, #0
 800d878:	d13a      	bne.n	800d8f0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d884:	2b40      	cmp	r3, #64	; 0x40
 800d886:	d133      	bne.n	800d8f0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d12e      	bne.n	800d8f0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fc45 	bl	800d126 <LL_ADC_INJ_IsConversionOngoing>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d11a      	bne.n	800d8d8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800d8b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d112      	bne.n	800d8f0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8ce:	f043 0201 	orr.w	r2, r3, #1
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	659a      	str	r2, [r3, #88]	; 0x58
 800d8d6:	e00b      	b.n	800d8f0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8dc:	f043 0210 	orr.w	r2, r3, #16
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8e8:	f043 0201 	orr.w	r2, r3, #1
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fefe 	bl	800e6f2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2260      	movs	r2, #96	; 0x60
 800d8fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d904:	2b00      	cmp	r3, #0
 800d906:	d011      	beq.n	800d92c <HAL_ADC_IRQHandler+0x310>
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00c      	beq.n	800d92c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f8a0 	bl	800da64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2280      	movs	r2, #128	; 0x80
 800d92a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d932:	2b00      	cmp	r3, #0
 800d934:	d012      	beq.n	800d95c <HAL_ADC_IRQHandler+0x340>
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00d      	beq.n	800d95c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d944:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fee4 	bl	800e71a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d95a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d962:	2b00      	cmp	r3, #0
 800d964:	d012      	beq.n	800d98c <HAL_ADC_IRQHandler+0x370>
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00d      	beq.n	800d98c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d974:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 fed6 	bl	800e72e <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d98a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f003 0310 	and.w	r3, r3, #16
 800d992:	2b00      	cmp	r3, #0
 800d994:	d036      	beq.n	800da04 <HAL_ADC_IRQHandler+0x3e8>
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	f003 0310 	and.w	r3, r3, #16
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d031      	beq.n	800da04 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d102      	bne.n	800d9ae <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d9ac:	e014      	b.n	800d9d8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d008      	beq.n	800d9c6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800d9b4:	4825      	ldr	r0, [pc, #148]	; (800da4c <HAL_ADC_IRQHandler+0x430>)
 800d9b6:	f7ff fabd 	bl	800cf34 <LL_ADC_GetMultiDMATransfer>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00b      	beq.n	800d9d8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	627b      	str	r3, [r7, #36]	; 0x24
 800d9c4:	e008      	b.n	800d9d8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d001      	beq.n	800d9d8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d10e      	bne.n	800d9fc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9ee:	f043 0202 	orr.w	r2, r3, #2
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f83e 	bl	800da78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2210      	movs	r2, #16
 800da02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d018      	beq.n	800da40 <HAL_ADC_IRQHandler+0x424>
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da14:	2b00      	cmp	r3, #0
 800da16:	d013      	beq.n	800da40 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da1c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da28:	f043 0208 	orr.w	r2, r3, #8
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da38:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fe63 	bl	800e706 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800da40:	bf00      	nop
 800da42:	3728      	adds	r7, #40	; 0x28
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	50040000 	.word	0x50040000
 800da4c:	50040300 	.word	0x50040300

0800da50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800da58:	bf00      	nop
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800da6c:	bf00      	nop
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b0b6      	sub	sp, #216	; 0xd8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800da9c:	2300      	movs	r3, #0
 800da9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d101      	bne.n	800daae <HAL_ADC_ConfigChannel+0x22>
 800daaa:	2302      	movs	r3, #2
 800daac:	e3d5      	b.n	800e25a <HAL_ADC_ConfigChannel+0x7ce>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4618      	mov	r0, r3
 800dabc:	f7ff fb0c 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f040 83ba 	bne.w	800e23c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	2b05      	cmp	r3, #5
 800dace:	d824      	bhi.n	800db1a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	3b02      	subs	r3, #2
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d81b      	bhi.n	800db12 <HAL_ADC_ConfigChannel+0x86>
 800dada:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <HAL_ADC_ConfigChannel+0x54>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800daf1 	.word	0x0800daf1
 800dae4:	0800daf9 	.word	0x0800daf9
 800dae8:	0800db01 	.word	0x0800db01
 800daec:	0800db09 	.word	0x0800db09
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	220c      	movs	r2, #12
 800daf4:	605a      	str	r2, [r3, #4]
          break;
 800daf6:	e011      	b.n	800db1c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	2212      	movs	r2, #18
 800dafc:	605a      	str	r2, [r3, #4]
          break;
 800dafe:	e00d      	b.n	800db1c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	2218      	movs	r2, #24
 800db04:	605a      	str	r2, [r3, #4]
          break;
 800db06:	e009      	b.n	800db1c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db0e:	605a      	str	r2, [r3, #4]
          break;
 800db10:	e004      	b.n	800db1c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	2206      	movs	r2, #6
 800db16:	605a      	str	r2, [r3, #4]
          break;
 800db18:	e000      	b.n	800db1c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800db1a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6818      	ldr	r0, [r3, #0]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	6859      	ldr	r1, [r3, #4]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	461a      	mov	r2, r3
 800db2a:	f7ff f966 	bl	800cdfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fad0 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800db38:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4618      	mov	r0, r3
 800db42:	f7ff faf0 	bl	800d126 <LL_ADC_INJ_IsConversionOngoing>
 800db46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800db4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f040 81c1 	bne.w	800ded6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800db54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f040 81bc 	bne.w	800ded6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db66:	d10f      	bne.n	800db88 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6818      	ldr	r0, [r3, #0]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2200      	movs	r2, #0
 800db72:	4619      	mov	r1, r3
 800db74:	f7ff f980 	bl	800ce78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff f914 	bl	800cdae <LL_ADC_SetSamplingTimeCommonConfig>
 800db86:	e00e      	b.n	800dba6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	6819      	ldr	r1, [r3, #0]
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	461a      	mov	r2, r3
 800db96:	f7ff f96f 	bl	800ce78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2100      	movs	r1, #0
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7ff f904 	bl	800cdae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	695a      	ldr	r2, [r3, #20]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	08db      	lsrs	r3, r3, #3
 800dbb2:	f003 0303 	and.w	r3, r3, #3
 800dbb6:	005b      	lsls	r3, r3, #1
 800dbb8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	2b04      	cmp	r3, #4
 800dbc6:	d00a      	beq.n	800dbde <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6818      	ldr	r0, [r3, #0]
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	6919      	ldr	r1, [r3, #16]
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dbd8:	f7ff f894 	bl	800cd04 <LL_ADC_SetOffset>
 800dbdc:	e17b      	b.n	800ded6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff f8b1 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10a      	bne.n	800dc0a <HAL_ADC_ConfigChannel+0x17e>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7ff f8a6 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dc00:	4603      	mov	r3, r0
 800dc02:	0e9b      	lsrs	r3, r3, #26
 800dc04:	f003 021f 	and.w	r2, r3, #31
 800dc08:	e01e      	b.n	800dc48 <HAL_ADC_ConfigChannel+0x1bc>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2100      	movs	r1, #0
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7ff f89b 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dc16:	4603      	mov	r3, r0
 800dc18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc20:	fa93 f3a3 	rbit	r3, r3
 800dc24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800dc28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800dc30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d101      	bne.n	800dc3c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800dc38:	2320      	movs	r3, #32
 800dc3a:	e004      	b.n	800dc46 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800dc3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc40:	fab3 f383 	clz	r3, r3
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d105      	bne.n	800dc60 <HAL_ADC_ConfigChannel+0x1d4>
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	0e9b      	lsrs	r3, r3, #26
 800dc5a:	f003 031f 	and.w	r3, r3, #31
 800dc5e:	e018      	b.n	800dc92 <HAL_ADC_ConfigChannel+0x206>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dc6c:	fa93 f3a3 	rbit	r3, r3
 800dc70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800dc74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800dc7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800dc84:	2320      	movs	r3, #32
 800dc86:	e004      	b.n	800dc92 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800dc88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dc8c:	fab3 f383 	clz	r3, r3
 800dc90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d106      	bne.n	800dca4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff f86a 	bl	800cd78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2101      	movs	r1, #1
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7ff f84e 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d10a      	bne.n	800dcd0 <HAL_ADC_ConfigChannel+0x244>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2101      	movs	r1, #1
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff f843 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	0e9b      	lsrs	r3, r3, #26
 800dcca:	f003 021f 	and.w	r2, r3, #31
 800dcce:	e01e      	b.n	800dd0e <HAL_ADC_ConfigChannel+0x282>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff f838 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dce6:	fa93 f3a3 	rbit	r3, r3
 800dcea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800dcee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800dcf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800dcfe:	2320      	movs	r3, #32
 800dd00:	e004      	b.n	800dd0c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800dd02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd06:	fab3 f383 	clz	r3, r3
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d105      	bne.n	800dd26 <HAL_ADC_ConfigChannel+0x29a>
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	0e9b      	lsrs	r3, r3, #26
 800dd20:	f003 031f 	and.w	r3, r3, #31
 800dd24:	e018      	b.n	800dd58 <HAL_ADC_ConfigChannel+0x2cc>
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dd32:	fa93 f3a3 	rbit	r3, r3
 800dd36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800dd3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dd3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800dd42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d101      	bne.n	800dd4e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800dd4a:	2320      	movs	r3, #32
 800dd4c:	e004      	b.n	800dd58 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800dd4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd52:	fab3 f383 	clz	r3, r3
 800dd56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d106      	bne.n	800dd6a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2200      	movs	r2, #0
 800dd62:	2101      	movs	r1, #1
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7ff f807 	bl	800cd78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2102      	movs	r1, #2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fe ffeb 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dd76:	4603      	mov	r3, r0
 800dd78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10a      	bne.n	800dd96 <HAL_ADC_ConfigChannel+0x30a>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2102      	movs	r1, #2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fe ffe0 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	0e9b      	lsrs	r3, r3, #26
 800dd90:	f003 021f 	and.w	r2, r3, #31
 800dd94:	e01e      	b.n	800ddd4 <HAL_ADC_ConfigChannel+0x348>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2102      	movs	r1, #2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fe ffd5 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800dda2:	4603      	mov	r3, r0
 800dda4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dda8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddac:	fa93 f3a3 	rbit	r3, r3
 800ddb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800ddb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ddb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800ddbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800ddc4:	2320      	movs	r3, #32
 800ddc6:	e004      	b.n	800ddd2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800ddc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddcc:	fab3 f383 	clz	r3, r3
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d105      	bne.n	800ddec <HAL_ADC_ConfigChannel+0x360>
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	0e9b      	lsrs	r3, r3, #26
 800dde6:	f003 031f 	and.w	r3, r3, #31
 800ddea:	e016      	b.n	800de1a <HAL_ADC_ConfigChannel+0x38e>
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ddf8:	fa93 f3a3 	rbit	r3, r3
 800ddfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800ddfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800de04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800de0c:	2320      	movs	r3, #32
 800de0e:	e004      	b.n	800de1a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800de10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de14:	fab3 f383 	clz	r3, r3
 800de18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d106      	bne.n	800de2c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2200      	movs	r2, #0
 800de24:	2102      	movs	r1, #2
 800de26:	4618      	mov	r0, r3
 800de28:	f7fe ffa6 	bl	800cd78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2103      	movs	r1, #3
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe ff8a 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800de38:	4603      	mov	r3, r0
 800de3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10a      	bne.n	800de58 <HAL_ADC_ConfigChannel+0x3cc>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2103      	movs	r1, #3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fe ff7f 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800de4e:	4603      	mov	r3, r0
 800de50:	0e9b      	lsrs	r3, r3, #26
 800de52:	f003 021f 	and.w	r2, r3, #31
 800de56:	e017      	b.n	800de88 <HAL_ADC_ConfigChannel+0x3fc>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2103      	movs	r1, #3
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fe ff74 	bl	800cd4c <LL_ADC_GetOffsetChannel>
 800de64:	4603      	mov	r3, r0
 800de66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de6a:	fa93 f3a3 	rbit	r3, r3
 800de6e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800de70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de72:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800de74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de76:	2b00      	cmp	r3, #0
 800de78:	d101      	bne.n	800de7e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800de7a:	2320      	movs	r3, #32
 800de7c:	e003      	b.n	800de86 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800de7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de80:	fab3 f383 	clz	r3, r3
 800de84:	b2db      	uxtb	r3, r3
 800de86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800de90:	2b00      	cmp	r3, #0
 800de92:	d105      	bne.n	800dea0 <HAL_ADC_ConfigChannel+0x414>
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	0e9b      	lsrs	r3, r3, #26
 800de9a:	f003 031f 	and.w	r3, r3, #31
 800de9e:	e011      	b.n	800dec4 <HAL_ADC_ConfigChannel+0x438>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dea8:	fa93 f3a3 	rbit	r3, r3
 800deac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800deae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800deb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800deb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800deb8:	2320      	movs	r3, #32
 800deba:	e003      	b.n	800dec4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800debc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800debe:	fab3 f383 	clz	r3, r3
 800dec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d106      	bne.n	800ded6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2200      	movs	r2, #0
 800dece:	2103      	movs	r1, #3
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe ff51 	bl	800cd78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7ff f8ae 	bl	800d03c <LL_ADC_IsEnabled>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f040 8140 	bne.w	800e168 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6818      	ldr	r0, [r3, #0]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	6819      	ldr	r1, [r3, #0]
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	461a      	mov	r2, r3
 800def6:	f7fe ffeb 	bl	800ced0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	4a8f      	ldr	r2, [pc, #572]	; (800e13c <HAL_ADC_ConfigChannel+0x6b0>)
 800df00:	4293      	cmp	r3, r2
 800df02:	f040 8131 	bne.w	800e168 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df12:	2b00      	cmp	r3, #0
 800df14:	d10b      	bne.n	800df2e <HAL_ADC_ConfigChannel+0x4a2>
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	0e9b      	lsrs	r3, r3, #26
 800df1c:	3301      	adds	r3, #1
 800df1e:	f003 031f 	and.w	r3, r3, #31
 800df22:	2b09      	cmp	r3, #9
 800df24:	bf94      	ite	ls
 800df26:	2301      	movls	r3, #1
 800df28:	2300      	movhi	r3, #0
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	e019      	b.n	800df62 <HAL_ADC_ConfigChannel+0x4d6>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df36:	fa93 f3a3 	rbit	r3, r3
 800df3a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800df3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800df40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800df46:	2320      	movs	r3, #32
 800df48:	e003      	b.n	800df52 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800df4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df4c:	fab3 f383 	clz	r3, r3
 800df50:	b2db      	uxtb	r3, r3
 800df52:	3301      	adds	r3, #1
 800df54:	f003 031f 	and.w	r3, r3, #31
 800df58:	2b09      	cmp	r3, #9
 800df5a:	bf94      	ite	ls
 800df5c:	2301      	movls	r3, #1
 800df5e:	2300      	movhi	r3, #0
 800df60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800df62:	2b00      	cmp	r3, #0
 800df64:	d079      	beq.n	800e05a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d107      	bne.n	800df82 <HAL_ADC_ConfigChannel+0x4f6>
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	0e9b      	lsrs	r3, r3, #26
 800df78:	3301      	adds	r3, #1
 800df7a:	069b      	lsls	r3, r3, #26
 800df7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800df80:	e015      	b.n	800dfae <HAL_ADC_ConfigChannel+0x522>
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df8a:	fa93 f3a3 	rbit	r3, r3
 800df8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800df90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df92:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800df94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df96:	2b00      	cmp	r3, #0
 800df98:	d101      	bne.n	800df9e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800df9a:	2320      	movs	r3, #32
 800df9c:	e003      	b.n	800dfa6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800df9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa0:	fab3 f383 	clz	r3, r3
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	069b      	lsls	r3, r3, #26
 800dfaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d109      	bne.n	800dfce <HAL_ADC_ConfigChannel+0x542>
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	0e9b      	lsrs	r3, r3, #26
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	f003 031f 	and.w	r3, r3, #31
 800dfc6:	2101      	movs	r1, #1
 800dfc8:	fa01 f303 	lsl.w	r3, r1, r3
 800dfcc:	e017      	b.n	800dffe <HAL_ADC_ConfigChannel+0x572>
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd6:	fa93 f3a3 	rbit	r3, r3
 800dfda:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800dfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800dfe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800dfe6:	2320      	movs	r3, #32
 800dfe8:	e003      	b.n	800dff2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800dfea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfec:	fab3 f383 	clz	r3, r3
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	3301      	adds	r3, #1
 800dff4:	f003 031f 	and.w	r3, r3, #31
 800dff8:	2101      	movs	r1, #1
 800dffa:	fa01 f303 	lsl.w	r3, r1, r3
 800dffe:	ea42 0103 	orr.w	r1, r2, r3
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d10a      	bne.n	800e024 <HAL_ADC_ConfigChannel+0x598>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	0e9b      	lsrs	r3, r3, #26
 800e014:	3301      	adds	r3, #1
 800e016:	f003 021f 	and.w	r2, r3, #31
 800e01a:	4613      	mov	r3, r2
 800e01c:	005b      	lsls	r3, r3, #1
 800e01e:	4413      	add	r3, r2
 800e020:	051b      	lsls	r3, r3, #20
 800e022:	e018      	b.n	800e056 <HAL_ADC_ConfigChannel+0x5ca>
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	fa93 f3a3 	rbit	r3, r3
 800e030:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800e032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e034:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800e036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800e03c:	2320      	movs	r3, #32
 800e03e:	e003      	b.n	800e048 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800e040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e042:	fab3 f383 	clz	r3, r3
 800e046:	b2db      	uxtb	r3, r3
 800e048:	3301      	adds	r3, #1
 800e04a:	f003 021f 	and.w	r2, r3, #31
 800e04e:	4613      	mov	r3, r2
 800e050:	005b      	lsls	r3, r3, #1
 800e052:	4413      	add	r3, r2
 800e054:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e056:	430b      	orrs	r3, r1
 800e058:	e081      	b.n	800e15e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e062:	2b00      	cmp	r3, #0
 800e064:	d107      	bne.n	800e076 <HAL_ADC_ConfigChannel+0x5ea>
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	0e9b      	lsrs	r3, r3, #26
 800e06c:	3301      	adds	r3, #1
 800e06e:	069b      	lsls	r3, r3, #26
 800e070:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e074:	e015      	b.n	800e0a2 <HAL_ADC_ConfigChannel+0x616>
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07e:	fa93 f3a3 	rbit	r3, r3
 800e082:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800e088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d101      	bne.n	800e092 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800e08e:	2320      	movs	r3, #32
 800e090:	e003      	b.n	800e09a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800e092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e094:	fab3 f383 	clz	r3, r3
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	3301      	adds	r3, #1
 800e09c:	069b      	lsls	r3, r3, #26
 800e09e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d109      	bne.n	800e0c2 <HAL_ADC_ConfigChannel+0x636>
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	0e9b      	lsrs	r3, r3, #26
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	f003 031f 	and.w	r3, r3, #31
 800e0ba:	2101      	movs	r1, #1
 800e0bc:	fa01 f303 	lsl.w	r3, r1, r3
 800e0c0:	e017      	b.n	800e0f2 <HAL_ADC_ConfigChannel+0x666>
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	fa93 f3a3 	rbit	r3, r3
 800e0ce:	61fb      	str	r3, [r7, #28]
  return result;
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800e0da:	2320      	movs	r3, #32
 800e0dc:	e003      	b.n	800e0e6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e0:	fab3 f383 	clz	r3, r3
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	f003 031f 	and.w	r3, r3, #31
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e0f2:	ea42 0103 	orr.w	r1, r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10d      	bne.n	800e11e <HAL_ADC_ConfigChannel+0x692>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	0e9b      	lsrs	r3, r3, #26
 800e108:	3301      	adds	r3, #1
 800e10a:	f003 021f 	and.w	r2, r3, #31
 800e10e:	4613      	mov	r3, r2
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	4413      	add	r3, r2
 800e114:	3b1e      	subs	r3, #30
 800e116:	051b      	lsls	r3, r3, #20
 800e118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e11c:	e01e      	b.n	800e15c <HAL_ADC_ConfigChannel+0x6d0>
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	fa93 f3a3 	rbit	r3, r3
 800e12a:	613b      	str	r3, [r7, #16]
  return result;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d104      	bne.n	800e140 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800e136:	2320      	movs	r3, #32
 800e138:	e006      	b.n	800e148 <HAL_ADC_ConfigChannel+0x6bc>
 800e13a:	bf00      	nop
 800e13c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	fab3 f383 	clz	r3, r3
 800e146:	b2db      	uxtb	r3, r3
 800e148:	3301      	adds	r3, #1
 800e14a:	f003 021f 	and.w	r2, r3, #31
 800e14e:	4613      	mov	r3, r2
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	4413      	add	r3, r2
 800e154:	3b1e      	subs	r3, #30
 800e156:	051b      	lsls	r3, r3, #20
 800e158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800e15c:	430b      	orrs	r3, r1
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	6892      	ldr	r2, [r2, #8]
 800e162:	4619      	mov	r1, r3
 800e164:	f7fe fe88 	bl	800ce78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	4b3d      	ldr	r3, [pc, #244]	; (800e264 <HAL_ADC_ConfigChannel+0x7d8>)
 800e16e:	4013      	ands	r3, r2
 800e170:	2b00      	cmp	r3, #0
 800e172:	d06c      	beq.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800e174:	483c      	ldr	r0, [pc, #240]	; (800e268 <HAL_ADC_ConfigChannel+0x7dc>)
 800e176:	f7fe fdb7 	bl	800cce8 <LL_ADC_GetCommonPathInternalCh>
 800e17a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4a3a      	ldr	r2, [pc, #232]	; (800e26c <HAL_ADC_ConfigChannel+0x7e0>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d127      	bne.n	800e1d8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800e188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e18c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e190:	2b00      	cmp	r3, #0
 800e192:	d121      	bne.n	800e1d8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a35      	ldr	r2, [pc, #212]	; (800e270 <HAL_ADC_ConfigChannel+0x7e4>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d157      	bne.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e19e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e1a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	482f      	ldr	r0, [pc, #188]	; (800e268 <HAL_ADC_ConfigChannel+0x7dc>)
 800e1aa:	f7fe fd8a 	bl	800ccc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800e1ae:	4b31      	ldr	r3, [pc, #196]	; (800e274 <HAL_ADC_ConfigChannel+0x7e8>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	099b      	lsrs	r3, r3, #6
 800e1b4:	4a30      	ldr	r2, [pc, #192]	; (800e278 <HAL_ADC_ConfigChannel+0x7ec>)
 800e1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ba:	099b      	lsrs	r3, r3, #6
 800e1bc:	1c5a      	adds	r2, r3, #1
 800e1be:	4613      	mov	r3, r2
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	4413      	add	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800e1c8:	e002      	b.n	800e1d0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3b01      	subs	r3, #1
 800e1ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d1f9      	bne.n	800e1ca <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800e1d6:	e03a      	b.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a27      	ldr	r2, [pc, #156]	; (800e27c <HAL_ADC_ConfigChannel+0x7f0>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d113      	bne.n	800e20a <HAL_ADC_ConfigChannel+0x77e>
 800e1e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e1e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10d      	bne.n	800e20a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4a1f      	ldr	r2, [pc, #124]	; (800e270 <HAL_ADC_ConfigChannel+0x7e4>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d12a      	bne.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e1f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e1fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e200:	4619      	mov	r1, r3
 800e202:	4819      	ldr	r0, [pc, #100]	; (800e268 <HAL_ADC_ConfigChannel+0x7dc>)
 800e204:	f7fe fd5d 	bl	800ccc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800e208:	e021      	b.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a1c      	ldr	r2, [pc, #112]	; (800e280 <HAL_ADC_ConfigChannel+0x7f4>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d11c      	bne.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800e214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d116      	bne.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a12      	ldr	r2, [pc, #72]	; (800e270 <HAL_ADC_ConfigChannel+0x7e4>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d111      	bne.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800e22a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e22e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e232:	4619      	mov	r1, r3
 800e234:	480c      	ldr	r0, [pc, #48]	; (800e268 <HAL_ADC_ConfigChannel+0x7dc>)
 800e236:	f7fe fd44 	bl	800ccc2 <LL_ADC_SetCommonPathInternalCh>
 800e23a:	e008      	b.n	800e24e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e240:	f043 0220 	orr.w	r2, r3, #32
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800e256:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	37d8      	adds	r7, #216	; 0xd8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	80080000 	.word	0x80080000
 800e268:	50040300 	.word	0x50040300
 800e26c:	c7520000 	.word	0xc7520000
 800e270:	50040000 	.word	0x50040000
 800e274:	200000b4 	.word	0x200000b4
 800e278:	053e2d63 	.word	0x053e2d63
 800e27c:	cb840000 	.word	0xcb840000
 800e280:	80000001 	.word	0x80000001

0800e284 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b088      	sub	sp, #32
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800e28e:	2300      	movs	r3, #0
 800e290:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe ff1c 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800e2a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe ff3d 	bl	800d126 <LL_ADC_INJ_IsConversionOngoing>
 800e2ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d103      	bne.n	800e2bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f000 8098 	beq.w	800e3ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d02a      	beq.n	800e320 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	7e5b      	ldrb	r3, [r3, #25]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d126      	bne.n	800e320 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	7e1b      	ldrb	r3, [r3, #24]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d122      	bne.n	800e320 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800e2de:	e014      	b.n	800e30a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	4a45      	ldr	r2, [pc, #276]	; (800e3f8 <ADC_ConversionStop+0x174>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d90d      	bls.n	800e304 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2ec:	f043 0210 	orr.w	r2, r3, #16
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2f8:	f043 0201 	orr.w	r2, r3, #1
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e300:	2301      	movs	r3, #1
 800e302:	e074      	b.n	800e3ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	3301      	adds	r3, #1
 800e308:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e314:	2b40      	cmp	r3, #64	; 0x40
 800e316:	d1e3      	bne.n	800e2e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2240      	movs	r2, #64	; 0x40
 800e31e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	2b02      	cmp	r3, #2
 800e324:	d014      	beq.n	800e350 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe fed4 	bl	800d0d8 <LL_ADC_REG_IsConversionOngoing>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00c      	beq.n	800e350 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fe fe91 	bl	800d062 <LL_ADC_IsDisableOngoing>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d104      	bne.n	800e350 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe feb0 	bl	800d0b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d014      	beq.n	800e380 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe fee3 	bl	800d126 <LL_ADC_INJ_IsConversionOngoing>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d00c      	beq.n	800e380 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fe fe79 	bl	800d062 <LL_ADC_IsDisableOngoing>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d104      	bne.n	800e380 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fe febf 	bl	800d0fe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	2b02      	cmp	r3, #2
 800e384:	d005      	beq.n	800e392 <ADC_ConversionStop+0x10e>
 800e386:	69bb      	ldr	r3, [r7, #24]
 800e388:	2b03      	cmp	r3, #3
 800e38a:	d105      	bne.n	800e398 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800e38c:	230c      	movs	r3, #12
 800e38e:	617b      	str	r3, [r7, #20]
        break;
 800e390:	e005      	b.n	800e39e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800e392:	2308      	movs	r3, #8
 800e394:	617b      	str	r3, [r7, #20]
        break;
 800e396:	e002      	b.n	800e39e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800e398:	2304      	movs	r3, #4
 800e39a:	617b      	str	r3, [r7, #20]
        break;
 800e39c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800e39e:	f7fe fc4d 	bl	800cc3c <HAL_GetTick>
 800e3a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800e3a4:	e01b      	b.n	800e3de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800e3a6:	f7fe fc49 	bl	800cc3c <HAL_GetTick>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	2b05      	cmp	r3, #5
 800e3b2:	d914      	bls.n	800e3de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	689a      	ldr	r2, [r3, #8]
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	4013      	ands	r3, r2
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00d      	beq.n	800e3de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3c6:	f043 0210 	orr.w	r2, r3, #16
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3d2:	f043 0201 	orr.w	r2, r3, #1
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e007      	b.n	800e3ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	689a      	ldr	r2, [r3, #8]
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1dc      	bne.n	800e3a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3720      	adds	r7, #32
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	a33fffff 	.word	0xa33fffff

0800e3fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fe fe17 	bl	800d03c <LL_ADC_IsEnabled>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d14d      	bne.n	800e4b0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	689a      	ldr	r2, [r3, #8]
 800e41a:	4b28      	ldr	r3, [pc, #160]	; (800e4bc <ADC_Enable+0xc0>)
 800e41c:	4013      	ands	r3, r2
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00d      	beq.n	800e43e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e426:	f043 0210 	orr.w	r2, r3, #16
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e432:	f043 0201 	orr.w	r2, r3, #1
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e039      	b.n	800e4b2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe fdd2 	bl	800cfec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800e448:	f7fe fbf8 	bl	800cc3c <HAL_GetTick>
 800e44c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e44e:	e028      	b.n	800e4a2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4618      	mov	r0, r3
 800e456:	f7fe fdf1 	bl	800d03c <LL_ADC_IsEnabled>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d104      	bne.n	800e46a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe fdc1 	bl	800cfec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e46a:	f7fe fbe7 	bl	800cc3c <HAL_GetTick>
 800e46e:	4602      	mov	r2, r0
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	2b02      	cmp	r3, #2
 800e476:	d914      	bls.n	800e4a2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f003 0301 	and.w	r3, r3, #1
 800e482:	2b01      	cmp	r3, #1
 800e484:	d00d      	beq.n	800e4a2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48a:	f043 0210 	orr.w	r2, r3, #16
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e496:	f043 0201 	orr.w	r2, r3, #1
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e007      	b.n	800e4b2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f003 0301 	and.w	r3, r3, #1
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d1cf      	bne.n	800e450 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	8000003f 	.word	0x8000003f

0800e4c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe fdc8 	bl	800d062 <LL_ADC_IsDisableOngoing>
 800e4d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fe fdaf 	bl	800d03c <LL_ADC_IsEnabled>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d047      	beq.n	800e574 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d144      	bne.n	800e574 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	f003 030d 	and.w	r3, r3, #13
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d10c      	bne.n	800e512 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fd89 	bl	800d014 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2203      	movs	r2, #3
 800e508:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800e50a:	f7fe fb97 	bl	800cc3c <HAL_GetTick>
 800e50e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e510:	e029      	b.n	800e566 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e516:	f043 0210 	orr.w	r2, r3, #16
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e522:	f043 0201 	orr.w	r2, r3, #1
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e023      	b.n	800e576 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800e52e:	f7fe fb85 	bl	800cc3c <HAL_GetTick>
 800e532:	4602      	mov	r2, r0
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	2b02      	cmp	r3, #2
 800e53a:	d914      	bls.n	800e566 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	f003 0301 	and.w	r3, r3, #1
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00d      	beq.n	800e566 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e54e:	f043 0210 	orr.w	r2, r3, #16
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e55a:	f043 0201 	orr.w	r2, r3, #1
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	e007      	b.n	800e576 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	f003 0301 	and.w	r3, r3, #1
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1dc      	bne.n	800e52e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b084      	sub	sp, #16
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e58a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e590:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e594:	2b00      	cmp	r3, #0
 800e596:	d14b      	bne.n	800e630 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e59c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f003 0308 	and.w	r3, r3, #8
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d021      	beq.n	800e5f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fc0c 	bl	800cdd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d032      	beq.n	800e628 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d12b      	bne.n	800e628 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d11f      	bne.n	800e628 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ec:	f043 0201 	orr.w	r2, r3, #1
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	659a      	str	r2, [r3, #88]	; 0x58
 800e5f4:	e018      	b.n	800e628 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f003 0302 	and.w	r3, r3, #2
 800e600:	2b00      	cmp	r3, #0
 800e602:	d111      	bne.n	800e628 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e608:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d105      	bne.n	800e628 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e620:	f043 0201 	orr.w	r2, r3, #1
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f7fb fd6f 	bl	800a10c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800e62e:	e00e      	b.n	800e64e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e634:	f003 0310 	and.w	r3, r3, #16
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d003      	beq.n	800e644 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7ff fa1b 	bl	800da78 <HAL_ADC_ErrorCallback>
}
 800e642:	e004      	b.n	800e64e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	4798      	blx	r3
}
 800e64e:	bf00      	nop
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b084      	sub	sp, #16
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e662:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7ff f9f3 	bl	800da50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e66a:	bf00      	nop
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b084      	sub	sp, #16
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e67e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e690:	f043 0204 	orr.w	r2, r3, #4
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f7ff f9ed 	bl	800da78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e69e:	bf00      	nop
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <LL_ADC_IsEnabled>:
{
 800e6a6:	b480      	push	{r7}
 800e6a8:	b083      	sub	sp, #12
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	689b      	ldr	r3, [r3, #8]
 800e6b2:	f003 0301 	and.w	r3, r3, #1
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d101      	bne.n	800e6be <LL_ADC_IsEnabled+0x18>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	e000      	b.n	800e6c0 <LL_ADC_IsEnabled+0x1a>
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <LL_ADC_REG_IsConversionOngoing>:
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	f003 0304 	and.w	r3, r3, #4
 800e6dc:	2b04      	cmp	r3, #4
 800e6de:	d101      	bne.n	800e6e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800e6f2:	b480      	push	{r7}
 800e6f4:	b083      	sub	sp, #12
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800e6fa:	bf00      	nop
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800e706:	b480      	push	{r7}
 800e708:	b083      	sub	sp, #12
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800e70e:	bf00      	nop
 800e710:	370c      	adds	r7, #12
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800e71a:	b480      	push	{r7}
 800e71c:	b083      	sub	sp, #12
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800e722:	bf00      	nop
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800e72e:	b480      	push	{r7}
 800e730:	b083      	sub	sp, #12
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800e736:	bf00      	nop
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800e742:	b480      	push	{r7}
 800e744:	b083      	sub	sp, #12
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800e74a:	bf00      	nop
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
	...

0800e758 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b0a1      	sub	sp, #132	; 0x84
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e762:	2300      	movs	r3, #0
 800e764:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d101      	bne.n	800e776 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800e772:	2302      	movs	r3, #2
 800e774:	e089      	b.n	800e88a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2201      	movs	r2, #1
 800e77a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800e77e:	2300      	movs	r3, #0
 800e780:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800e782:	2300      	movs	r3, #0
 800e784:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a42      	ldr	r2, [pc, #264]	; (800e894 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d102      	bne.n	800e796 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800e790:	4b41      	ldr	r3, [pc, #260]	; (800e898 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	e001      	b.n	800e79a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800e796:	2300      	movs	r3, #0
 800e798:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10b      	bne.n	800e7b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7a4:	f043 0220 	orr.w	r2, r3, #32
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e068      	b.n	800e88a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7ff ff86 	bl	800e6cc <LL_ADC_REG_IsConversionOngoing>
 800e7c0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7ff ff80 	bl	800e6cc <LL_ADC_REG_IsConversionOngoing>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d14a      	bne.n	800e868 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800e7d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d147      	bne.n	800e868 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800e7d8:	4b30      	ldr	r3, [pc, #192]	; (800e89c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800e7da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d027      	beq.n	800e834 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800e7e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	6859      	ldr	r1, [r3, #4]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e7f6:	035b      	lsls	r3, r3, #13
 800e7f8:	430b      	orrs	r3, r1
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800e800:	4824      	ldr	r0, [pc, #144]	; (800e894 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800e802:	f7ff ff50 	bl	800e6a6 <LL_ADC_IsEnabled>
 800e806:	4604      	mov	r4, r0
 800e808:	4823      	ldr	r0, [pc, #140]	; (800e898 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800e80a:	f7ff ff4c 	bl	800e6a6 <LL_ADC_IsEnabled>
 800e80e:	4603      	mov	r3, r0
 800e810:	4323      	orrs	r3, r4
 800e812:	2b00      	cmp	r3, #0
 800e814:	d132      	bne.n	800e87c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800e816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800e81e:	f023 030f 	bic.w	r3, r3, #15
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	6811      	ldr	r1, [r2, #0]
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	6892      	ldr	r2, [r2, #8]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	431a      	orrs	r2, r3
 800e82e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e830:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e832:	e023      	b.n	800e87c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800e834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e83e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800e840:	4814      	ldr	r0, [pc, #80]	; (800e894 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800e842:	f7ff ff30 	bl	800e6a6 <LL_ADC_IsEnabled>
 800e846:	4604      	mov	r4, r0
 800e848:	4813      	ldr	r0, [pc, #76]	; (800e898 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800e84a:	f7ff ff2c 	bl	800e6a6 <LL_ADC_IsEnabled>
 800e84e:	4603      	mov	r3, r0
 800e850:	4323      	orrs	r3, r4
 800e852:	2b00      	cmp	r3, #0
 800e854:	d112      	bne.n	800e87c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800e856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800e85e:	f023 030f 	bic.w	r3, r3, #15
 800e862:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e864:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e866:	e009      	b.n	800e87c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e86c:	f043 0220 	orr.w	r2, r3, #32
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800e87a:	e000      	b.n	800e87e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800e87c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2200      	movs	r2, #0
 800e882:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800e886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3784      	adds	r7, #132	; 0x84
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd90      	pop	{r4, r7, pc}
 800e892:	bf00      	nop
 800e894:	50040000 	.word	0x50040000
 800e898:	50040100 	.word	0x50040100
 800e89c:	50040300 	.word	0x50040300

0800e8a0 <__NVIC_SetPriorityGrouping>:
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f003 0307 	and.w	r3, r3, #7
 800e8ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e8b0:	4b0c      	ldr	r3, [pc, #48]	; (800e8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e8b6:	68ba      	ldr	r2, [r7, #8]
 800e8b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e8bc:	4013      	ands	r3, r2
 800e8be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e8c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e8cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e8d2:	4a04      	ldr	r2, [pc, #16]	; (800e8e4 <__NVIC_SetPriorityGrouping+0x44>)
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	60d3      	str	r3, [r2, #12]
}
 800e8d8:	bf00      	nop
 800e8da:	3714      	adds	r7, #20
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	e000ed00 	.word	0xe000ed00

0800e8e8 <__NVIC_GetPriorityGrouping>:
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e8ec:	4b04      	ldr	r3, [pc, #16]	; (800e900 <__NVIC_GetPriorityGrouping+0x18>)
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	0a1b      	lsrs	r3, r3, #8
 800e8f2:	f003 0307 	and.w	r3, r3, #7
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	e000ed00 	.word	0xe000ed00

0800e904 <__NVIC_EnableIRQ>:
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	4603      	mov	r3, r0
 800e90c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e90e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e912:	2b00      	cmp	r3, #0
 800e914:	db0b      	blt.n	800e92e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	f003 021f 	and.w	r2, r3, #31
 800e91c:	4907      	ldr	r1, [pc, #28]	; (800e93c <__NVIC_EnableIRQ+0x38>)
 800e91e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e922:	095b      	lsrs	r3, r3, #5
 800e924:	2001      	movs	r0, #1
 800e926:	fa00 f202 	lsl.w	r2, r0, r2
 800e92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e92e:	bf00      	nop
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	e000e100 	.word	0xe000e100

0800e940 <__NVIC_SetPriority>:
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	4603      	mov	r3, r0
 800e948:	6039      	str	r1, [r7, #0]
 800e94a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e94c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e950:	2b00      	cmp	r3, #0
 800e952:	db0a      	blt.n	800e96a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	b2da      	uxtb	r2, r3
 800e958:	490c      	ldr	r1, [pc, #48]	; (800e98c <__NVIC_SetPriority+0x4c>)
 800e95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e95e:	0112      	lsls	r2, r2, #4
 800e960:	b2d2      	uxtb	r2, r2
 800e962:	440b      	add	r3, r1
 800e964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e968:	e00a      	b.n	800e980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	4908      	ldr	r1, [pc, #32]	; (800e990 <__NVIC_SetPriority+0x50>)
 800e970:	79fb      	ldrb	r3, [r7, #7]
 800e972:	f003 030f 	and.w	r3, r3, #15
 800e976:	3b04      	subs	r3, #4
 800e978:	0112      	lsls	r2, r2, #4
 800e97a:	b2d2      	uxtb	r2, r2
 800e97c:	440b      	add	r3, r1
 800e97e:	761a      	strb	r2, [r3, #24]
}
 800e980:	bf00      	nop
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr
 800e98c:	e000e100 	.word	0xe000e100
 800e990:	e000ed00 	.word	0xe000ed00

0800e994 <NVIC_EncodePriority>:
{
 800e994:	b480      	push	{r7}
 800e996:	b089      	sub	sp, #36	; 0x24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f003 0307 	and.w	r3, r3, #7
 800e9a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	f1c3 0307 	rsb	r3, r3, #7
 800e9ae:	2b04      	cmp	r3, #4
 800e9b0:	bf28      	it	cs
 800e9b2:	2304      	movcs	r3, #4
 800e9b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	2b06      	cmp	r3, #6
 800e9bc:	d902      	bls.n	800e9c4 <NVIC_EncodePriority+0x30>
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	3b03      	subs	r3, #3
 800e9c2:	e000      	b.n	800e9c6 <NVIC_EncodePriority+0x32>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e9d2:	43da      	mvns	r2, r3
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	401a      	ands	r2, r3
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e9dc:	f04f 31ff 	mov.w	r1, #4294967295
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9e6:	43d9      	mvns	r1, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9ec:	4313      	orrs	r3, r2
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3724      	adds	r7, #36	; 0x24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
	...

0800e9fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3b01      	subs	r3, #1
 800ea08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ea0c:	d301      	bcc.n	800ea12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ea0e:	2301      	movs	r3, #1
 800ea10:	e00f      	b.n	800ea32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ea12:	4a0a      	ldr	r2, [pc, #40]	; (800ea3c <SysTick_Config+0x40>)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ea1a:	210f      	movs	r1, #15
 800ea1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea20:	f7ff ff8e 	bl	800e940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ea24:	4b05      	ldr	r3, [pc, #20]	; (800ea3c <SysTick_Config+0x40>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ea2a:	4b04      	ldr	r3, [pc, #16]	; (800ea3c <SysTick_Config+0x40>)
 800ea2c:	2207      	movs	r2, #7
 800ea2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	e000e010 	.word	0xe000e010

0800ea40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7ff ff29 	bl	800e8a0 <__NVIC_SetPriorityGrouping>
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b086      	sub	sp, #24
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	607a      	str	r2, [r7, #4]
 800ea62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ea64:	2300      	movs	r3, #0
 800ea66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ea68:	f7ff ff3e 	bl	800e8e8 <__NVIC_GetPriorityGrouping>
 800ea6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	68b9      	ldr	r1, [r7, #8]
 800ea72:	6978      	ldr	r0, [r7, #20]
 800ea74:	f7ff ff8e 	bl	800e994 <NVIC_EncodePriority>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea7e:	4611      	mov	r1, r2
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7ff ff5d 	bl	800e940 <__NVIC_SetPriority>
}
 800ea86:	bf00      	nop
 800ea88:	3718      	adds	r7, #24
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b082      	sub	sp, #8
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	4603      	mov	r3, r0
 800ea96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ea98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7ff ff31 	bl	800e904 <__NVIC_EnableIRQ>
}
 800eaa2:	bf00      	nop
 800eaa4:	3708      	adds	r7, #8
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b082      	sub	sp, #8
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff ffa2 	bl	800e9fc <SysTick_Config>
 800eab8:	4603      	mov	r3, r0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b082      	sub	sp, #8
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d101      	bne.n	800ead4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e014      	b.n	800eafe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	791b      	ldrb	r3, [r3, #4]
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d105      	bne.n	800eaea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7fa fc3b 	bl	8009360 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2202      	movs	r2, #2
 800eaee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb1c:	d120      	bne.n	800eb60 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb2c:	d118      	bne.n	800eb60 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2204      	movs	r2, #4
 800eb32:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	f043 0201 	orr.w	r2, r3, #1
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eb58:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f82d 	bl	800ebba <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb6e:	d120      	bne.n	800ebb2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb7e:	d118      	bne.n	800ebb2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2204      	movs	r2, #4
 800eb84:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	691b      	ldr	r3, [r3, #16]
 800eb8a:	f043 0202 	orr.w	r2, r3, #2
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800eb9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ebaa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f94f 	bl	800ee50 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800ebb2:	bf00      	nop
 800ebb4:	3708      	adds	r7, #8
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800ebba:	b480      	push	{r7}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800ebc2:	bf00      	nop
 800ebc4:	370c      	adds	r7, #12
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
	...

0800ebd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b088      	sub	sp, #32
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	795b      	ldrb	r3, [r3, #5]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d101      	bne.n	800ebec <HAL_DAC_ConfigChannel+0x1c>
 800ebe8:	2302      	movs	r3, #2
 800ebea:	e12a      	b.n	800ee42 <HAL_DAC_ConfigChannel+0x272>
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d174      	bne.n	800ecea <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800ec00:	f7fe f81c 	bl	800cc3c <HAL_GetTick>
 800ec04:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d134      	bne.n	800ec76 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800ec0c:	e011      	b.n	800ec32 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800ec0e:	f7fe f815 	bl	800cc3c <HAL_GetTick>
 800ec12:	4602      	mov	r2, r0
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	1ad3      	subs	r3, r2, r3
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d90a      	bls.n	800ec32 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	f043 0208 	orr.w	r2, r3, #8
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2203      	movs	r2, #3
 800ec2c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800ec2e:	2303      	movs	r3, #3
 800ec30:	e107      	b.n	800ee42 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1e6      	bne.n	800ec0e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800ec40:	2001      	movs	r0, #1
 800ec42:	f7fe f807 	bl	800cc54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	69d2      	ldr	r2, [r2, #28]
 800ec4e:	641a      	str	r2, [r3, #64]	; 0x40
 800ec50:	e01e      	b.n	800ec90 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800ec52:	f7fd fff3 	bl	800cc3c <HAL_GetTick>
 800ec56:	4602      	mov	r2, r0
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d90a      	bls.n	800ec76 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	691b      	ldr	r3, [r3, #16]
 800ec64:	f043 0208 	orr.w	r2, r3, #8
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2203      	movs	r2, #3
 800ec70:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e0e5      	b.n	800ee42 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	dbe8      	blt.n	800ec52 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800ec80:	2001      	movs	r0, #1
 800ec82:	f7fd ffe7 	bl	800cc54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	69d2      	ldr	r2, [r2, #28]
 800ec8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f003 0310 	and.w	r3, r3, #16
 800ec9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800eca0:	fa01 f303 	lsl.w	r3, r1, r3
 800eca4:	43db      	mvns	r3, r3
 800eca6:	ea02 0103 	and.w	r1, r2, r3
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	6a1a      	ldr	r2, [r3, #32]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f003 0310 	and.w	r3, r3, #16
 800ecb4:	409a      	lsls	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	430a      	orrs	r2, r1
 800ecbc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f003 0310 	and.w	r3, r3, #16
 800ecca:	21ff      	movs	r1, #255	; 0xff
 800eccc:	fa01 f303 	lsl.w	r3, r1, r3
 800ecd0:	43db      	mvns	r3, r3
 800ecd2:	ea02 0103 	and.w	r1, r2, r3
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f003 0310 	and.w	r3, r3, #16
 800ece0:	409a      	lsls	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	430a      	orrs	r2, r1
 800ece8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	695b      	ldr	r3, [r3, #20]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d11d      	bne.n	800ed2e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf8:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f003 0310 	and.w	r3, r3, #16
 800ed00:	221f      	movs	r2, #31
 800ed02:	fa02 f303 	lsl.w	r3, r2, r3
 800ed06:	43db      	mvns	r3, r3
 800ed08:	69fa      	ldr	r2, [r7, #28]
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f003 0310 	and.w	r3, r3, #16
 800ed1a:	697a      	ldr	r2, [r7, #20]
 800ed1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed20:	69fa      	ldr	r2, [r7, #28]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	69fa      	ldr	r2, [r7, #28]
 800ed2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed34:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f003 0310 	and.w	r3, r3, #16
 800ed3c:	2207      	movs	r2, #7
 800ed3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ed42:	43db      	mvns	r3, r3
 800ed44:	69fa      	ldr	r2, [r7, #28]
 800ed46:	4013      	ands	r3, r2
 800ed48:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	685a      	ldr	r2, [r3, #4]
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	431a      	orrs	r2, r3
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f003 0310 	and.w	r3, r3, #16
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	fa02 f303 	lsl.w	r3, r2, r3
 800ed68:	69fa      	ldr	r2, [r7, #28]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	69fa      	ldr	r2, [r7, #28]
 800ed74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	6819      	ldr	r1, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f003 0310 	and.w	r3, r3, #16
 800ed82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ed86:	fa02 f303 	lsl.w	r3, r2, r3
 800ed8a:	43da      	mvns	r2, r3
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	400a      	ands	r2, r1
 800ed92:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f003 0310 	and.w	r3, r3, #16
 800eda2:	f640 72fe 	movw	r2, #4094	; 0xffe
 800eda6:	fa02 f303 	lsl.w	r3, r2, r3
 800edaa:	43db      	mvns	r3, r3
 800edac:	69fa      	ldr	r2, [r7, #28]
 800edae:	4013      	ands	r3, r2
 800edb0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f003 0310 	and.w	r3, r3, #16
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	fa02 f303 	lsl.w	r3, r2, r3
 800edc4:	69fa      	ldr	r2, [r7, #28]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edd2:	d104      	bne.n	800edde <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edda:	61fb      	str	r3, [r7, #28]
 800eddc:	e018      	b.n	800ee10 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d104      	bne.n	800edf0 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800edec:	61fb      	str	r3, [r7, #28]
 800edee:	e00f      	b.n	800ee10 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800edf0:	f002 fca4 	bl	801173c <HAL_RCC_GetHCLKFreq>
 800edf4:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	4a14      	ldr	r2, [pc, #80]	; (800ee4c <HAL_DAC_ConfigChannel+0x27c>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d904      	bls.n	800ee08 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee04:	61fb      	str	r3, [r7, #28]
 800ee06:	e003      	b.n	800ee10 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ee0e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	69fa      	ldr	r2, [r7, #28]
 800ee16:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6819      	ldr	r1, [r3, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f003 0310 	and.w	r3, r3, #16
 800ee24:	22c0      	movs	r2, #192	; 0xc0
 800ee26:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2a:	43da      	mvns	r2, r3
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	400a      	ands	r2, r1
 800ee32:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2201      	movs	r2, #1
 800ee38:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3720      	adds	r7, #32
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	04c4b400 	.word	0x04c4b400

0800ee50 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800ee58:	bf00      	nop
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d101      	bne.n	800ee76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e08d      	b.n	800ef92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	4b47      	ldr	r3, [pc, #284]	; (800ef9c <HAL_DMA_Init+0x138>)
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d80f      	bhi.n	800eea2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	4b45      	ldr	r3, [pc, #276]	; (800efa0 <HAL_DMA_Init+0x13c>)
 800ee8a:	4413      	add	r3, r2
 800ee8c:	4a45      	ldr	r2, [pc, #276]	; (800efa4 <HAL_DMA_Init+0x140>)
 800ee8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee92:	091b      	lsrs	r3, r3, #4
 800ee94:	009a      	lsls	r2, r3, #2
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4a42      	ldr	r2, [pc, #264]	; (800efa8 <HAL_DMA_Init+0x144>)
 800ee9e:	641a      	str	r2, [r3, #64]	; 0x40
 800eea0:	e00e      	b.n	800eec0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	461a      	mov	r2, r3
 800eea8:	4b40      	ldr	r3, [pc, #256]	; (800efac <HAL_DMA_Init+0x148>)
 800eeaa:	4413      	add	r3, r2
 800eeac:	4a3d      	ldr	r2, [pc, #244]	; (800efa4 <HAL_DMA_Init+0x140>)
 800eeae:	fba2 2303 	umull	r2, r3, r2, r3
 800eeb2:	091b      	lsrs	r3, r3, #4
 800eeb4:	009a      	lsls	r2, r3, #2
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a3c      	ldr	r2, [pc, #240]	; (800efb0 <HAL_DMA_Init+0x14c>)
 800eebe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800eed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800eee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	691b      	ldr	r3, [r3, #16]
 800eeea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	699b      	ldr	r3, [r3, #24]
 800eef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eefc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ef04:	68fa      	ldr	r2, [r7, #12]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fa72 	bl	800f3fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ef20:	d102      	bne.n	800ef28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2200      	movs	r2, #0
 800ef26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef30:	b2d2      	uxtb	r2, r2
 800ef32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ef3c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d010      	beq.n	800ef68 <HAL_DMA_Init+0x104>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	2b04      	cmp	r3, #4
 800ef4c:	d80c      	bhi.n	800ef68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 fa92 	bl	800f478 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef58:	2200      	movs	r2, #0
 800ef5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ef64:	605a      	str	r2, [r3, #4]
 800ef66:	e008      	b.n	800ef7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2201      	movs	r2, #1
 800ef84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	40020407 	.word	0x40020407
 800efa0:	bffdfff8 	.word	0xbffdfff8
 800efa4:	cccccccd 	.word	0xcccccccd
 800efa8:	40020000 	.word	0x40020000
 800efac:	bffdfbf8 	.word	0xbffdfbf8
 800efb0:	40020400 	.word	0x40020400

0800efb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
 800efc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efc2:	2300      	movs	r3, #0
 800efc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d101      	bne.n	800efd4 <HAL_DMA_Start_IT+0x20>
 800efd0:	2302      	movs	r3, #2
 800efd2:	e066      	b.n	800f0a2 <HAL_DMA_Start_IT+0xee>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2201      	movs	r2, #1
 800efd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d155      	bne.n	800f094 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2202      	movs	r2, #2
 800efec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f022 0201 	bic.w	r2, r2, #1
 800f004:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	68b9      	ldr	r1, [r7, #8]
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	f000 f9b6 	bl	800f37e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f016:	2b00      	cmp	r3, #0
 800f018:	d008      	beq.n	800f02c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f042 020e 	orr.w	r2, r2, #14
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	e00f      	b.n	800f04c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f022 0204 	bic.w	r2, r2, #4
 800f03a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f042 020a 	orr.w	r2, r2, #10
 800f04a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f056:	2b00      	cmp	r3, #0
 800f058:	d007      	beq.n	800f06a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f064:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f068:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d007      	beq.n	800f082 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f07c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f080:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f042 0201 	orr.w	r2, r2, #1
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	e005      	b.n	800f0a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800f09c:	2302      	movs	r3, #2
 800f09e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800f0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3718      	adds	r7, #24
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b085      	sub	sp, #20
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d008      	beq.n	800f0d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2204      	movs	r2, #4
 800f0c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e040      	b.n	800f156 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	681a      	ldr	r2, [r3, #0]
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f022 020e 	bic.w	r2, r2, #14
 800f0e2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f0f2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	f022 0201 	bic.w	r2, r2, #1
 800f102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f108:	f003 021c 	and.w	r2, r3, #28
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f110:	2101      	movs	r1, #1
 800f112:	fa01 f202 	lsl.w	r2, r1, r2
 800f116:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f120:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00c      	beq.n	800f144 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f138:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f142:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2201      	movs	r2, #1
 800f148:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800f154:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800f156:	4618      	mov	r0, r3
 800f158:	3714      	adds	r7, #20
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f16a:	2300      	movs	r3, #0
 800f16c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b02      	cmp	r3, #2
 800f178:	d005      	beq.n	800f186 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2204      	movs	r2, #4
 800f17e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	73fb      	strb	r3, [r7, #15]
 800f184:	e047      	b.n	800f216 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f022 020e 	bic.w	r2, r2, #14
 800f194:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f022 0201 	bic.w	r2, r2, #1
 800f1a4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f1b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ba:	f003 021c 	and.w	r2, r3, #28
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	fa01 f202 	lsl.w	r2, r1, r2
 800f1c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f1d2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00c      	beq.n	800f1f6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f1ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f1f4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d003      	beq.n	800f216 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	4798      	blx	r3
    }
  }
  return status;
 800f216:	7bfb      	ldrb	r3, [r7, #15]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3710      	adds	r7, #16
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f23c:	f003 031c 	and.w	r3, r3, #28
 800f240:	2204      	movs	r2, #4
 800f242:	409a      	lsls	r2, r3
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	4013      	ands	r3, r2
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d026      	beq.n	800f29a <HAL_DMA_IRQHandler+0x7a>
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	f003 0304 	and.w	r3, r3, #4
 800f252:	2b00      	cmp	r3, #0
 800f254:	d021      	beq.n	800f29a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f003 0320 	and.w	r3, r3, #32
 800f260:	2b00      	cmp	r3, #0
 800f262:	d107      	bne.n	800f274 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f022 0204 	bic.w	r2, r2, #4
 800f272:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f278:	f003 021c 	and.w	r2, r3, #28
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f280:	2104      	movs	r1, #4
 800f282:	fa01 f202 	lsl.w	r2, r1, r2
 800f286:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d071      	beq.n	800f374 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800f298:	e06c      	b.n	800f374 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f29e:	f003 031c 	and.w	r3, r3, #28
 800f2a2:	2202      	movs	r2, #2
 800f2a4:	409a      	lsls	r2, r3
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	4013      	ands	r3, r2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d02e      	beq.n	800f30c <HAL_DMA_IRQHandler+0xec>
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	f003 0302 	and.w	r3, r3, #2
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d029      	beq.n	800f30c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f003 0320 	and.w	r3, r3, #32
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d10b      	bne.n	800f2de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f022 020a 	bic.w	r2, r2, #10
 800f2d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2201      	movs	r2, #1
 800f2da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2e2:	f003 021c 	and.w	r2, r3, #28
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ea:	2102      	movs	r1, #2
 800f2ec:	fa01 f202 	lsl.w	r2, r1, r2
 800f2f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d038      	beq.n	800f374 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f30a:	e033      	b.n	800f374 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f310:	f003 031c 	and.w	r3, r3, #28
 800f314:	2208      	movs	r2, #8
 800f316:	409a      	lsls	r2, r3
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	4013      	ands	r3, r2
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d02a      	beq.n	800f376 <HAL_DMA_IRQHandler+0x156>
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	f003 0308 	and.w	r3, r3, #8
 800f326:	2b00      	cmp	r3, #0
 800f328:	d025      	beq.n	800f376 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	681a      	ldr	r2, [r3, #0]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f022 020e 	bic.w	r2, r2, #14
 800f338:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f33e:	f003 021c 	and.w	r2, r3, #28
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f346:	2101      	movs	r1, #1
 800f348:	fa01 f202 	lsl.w	r2, r1, r2
 800f34c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2201      	movs	r2, #1
 800f352:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d004      	beq.n	800f376 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f374:	bf00      	nop
 800f376:	bf00      	nop
}
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f37e:	b480      	push	{r7}
 800f380:	b085      	sub	sp, #20
 800f382:	af00      	add	r7, sp, #0
 800f384:	60f8      	str	r0, [r7, #12]
 800f386:	60b9      	str	r1, [r7, #8]
 800f388:	607a      	str	r2, [r7, #4]
 800f38a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800f394:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d004      	beq.n	800f3a8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f3a6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ac:	f003 021c 	and.w	r2, r3, #28
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	fa01 f202 	lsl.w	r2, r1, r2
 800f3ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	2b10      	cmp	r3, #16
 800f3ca:	d108      	bne.n	800f3de <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800f3dc:	e007      	b.n	800f3ee <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	60da      	str	r2, [r3, #12]
}
 800f3ee:	bf00      	nop
 800f3f0:	3714      	adds	r7, #20
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr
	...

0800f3fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b085      	sub	sp, #20
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	461a      	mov	r2, r3
 800f40a:	4b17      	ldr	r3, [pc, #92]	; (800f468 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d80a      	bhi.n	800f426 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f414:	089b      	lsrs	r3, r3, #2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f41c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	6493      	str	r3, [r2, #72]	; 0x48
 800f424:	e007      	b.n	800f436 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f42a:	089b      	lsrs	r3, r3, #2
 800f42c:	009a      	lsls	r2, r3, #2
 800f42e:	4b0f      	ldr	r3, [pc, #60]	; (800f46c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800f430:	4413      	add	r3, r2
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	3b08      	subs	r3, #8
 800f43e:	4a0c      	ldr	r2, [pc, #48]	; (800f470 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800f440:	fba2 2303 	umull	r2, r3, r2, r3
 800f444:	091b      	lsrs	r3, r3, #4
 800f446:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4a0a      	ldr	r2, [pc, #40]	; (800f474 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800f44c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f003 031f 	and.w	r3, r3, #31
 800f454:	2201      	movs	r2, #1
 800f456:	409a      	lsls	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f45c:	bf00      	nop
 800f45e:	3714      	adds	r7, #20
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr
 800f468:	40020407 	.word	0x40020407
 800f46c:	4002081c 	.word	0x4002081c
 800f470:	cccccccd 	.word	0xcccccccd
 800f474:	40020880 	.word	0x40020880

0800f478 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	b2db      	uxtb	r3, r3
 800f486:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	4b0b      	ldr	r3, [pc, #44]	; (800f4b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800f48c:	4413      	add	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	461a      	mov	r2, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a08      	ldr	r2, [pc, #32]	; (800f4bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800f49a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	f003 0303 	and.w	r3, r3, #3
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	409a      	lsls	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800f4ac:	bf00      	nop
 800f4ae:	3714      	adds	r7, #20
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	1000823f 	.word	0x1000823f
 800f4bc:	40020940 	.word	0x40020940

0800f4c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f4ce:	e166      	b.n	800f79e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	2101      	movs	r1, #1
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4dc:	4013      	ands	r3, r2
 800f4de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	f000 8158 	beq.w	800f798 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	f003 0303 	and.w	r3, r3, #3
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d005      	beq.n	800f500 <HAL_GPIO_Init+0x40>
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	f003 0303 	and.w	r3, r3, #3
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d130      	bne.n	800f562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	005b      	lsls	r3, r3, #1
 800f50a:	2203      	movs	r2, #3
 800f50c:	fa02 f303 	lsl.w	r3, r2, r3
 800f510:	43db      	mvns	r3, r3
 800f512:	693a      	ldr	r2, [r7, #16]
 800f514:	4013      	ands	r3, r2
 800f516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	68da      	ldr	r2, [r3, #12]
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	005b      	lsls	r3, r3, #1
 800f520:	fa02 f303 	lsl.w	r3, r2, r3
 800f524:	693a      	ldr	r2, [r7, #16]
 800f526:	4313      	orrs	r3, r2
 800f528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	693a      	ldr	r2, [r7, #16]
 800f52e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f536:	2201      	movs	r2, #1
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	fa02 f303 	lsl.w	r3, r2, r3
 800f53e:	43db      	mvns	r3, r3
 800f540:	693a      	ldr	r2, [r7, #16]
 800f542:	4013      	ands	r3, r2
 800f544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	091b      	lsrs	r3, r3, #4
 800f54c:	f003 0201 	and.w	r2, r3, #1
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	fa02 f303 	lsl.w	r3, r2, r3
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	4313      	orrs	r3, r2
 800f55a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	f003 0303 	and.w	r3, r3, #3
 800f56a:	2b03      	cmp	r3, #3
 800f56c:	d017      	beq.n	800f59e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	005b      	lsls	r3, r3, #1
 800f578:	2203      	movs	r2, #3
 800f57a:	fa02 f303 	lsl.w	r3, r2, r3
 800f57e:	43db      	mvns	r3, r3
 800f580:	693a      	ldr	r2, [r7, #16]
 800f582:	4013      	ands	r3, r2
 800f584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	689a      	ldr	r2, [r3, #8]
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	005b      	lsls	r3, r3, #1
 800f58e:	fa02 f303 	lsl.w	r3, r2, r3
 800f592:	693a      	ldr	r2, [r7, #16]
 800f594:	4313      	orrs	r3, r2
 800f596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	693a      	ldr	r2, [r7, #16]
 800f59c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	f003 0303 	and.w	r3, r3, #3
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d123      	bne.n	800f5f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	08da      	lsrs	r2, r3, #3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	3208      	adds	r2, #8
 800f5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f003 0307 	and.w	r3, r3, #7
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	220f      	movs	r2, #15
 800f5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f5c6:	43db      	mvns	r3, r3
 800f5c8:	693a      	ldr	r2, [r7, #16]
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	691a      	ldr	r2, [r3, #16]
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	f003 0307 	and.w	r3, r3, #7
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	fa02 f303 	lsl.w	r3, r2, r3
 800f5de:	693a      	ldr	r2, [r7, #16]
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	08da      	lsrs	r2, r3, #3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	3208      	adds	r2, #8
 800f5ec:	6939      	ldr	r1, [r7, #16]
 800f5ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	2203      	movs	r2, #3
 800f5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f602:	43db      	mvns	r3, r3
 800f604:	693a      	ldr	r2, [r7, #16]
 800f606:	4013      	ands	r3, r2
 800f608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	f003 0203 	and.w	r2, r3, #3
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	005b      	lsls	r3, r3, #1
 800f616:	fa02 f303 	lsl.w	r3, r2, r3
 800f61a:	693a      	ldr	r2, [r7, #16]
 800f61c:	4313      	orrs	r3, r2
 800f61e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	693a      	ldr	r2, [r7, #16]
 800f624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 80b2 	beq.w	800f798 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f634:	4b61      	ldr	r3, [pc, #388]	; (800f7bc <HAL_GPIO_Init+0x2fc>)
 800f636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f638:	4a60      	ldr	r2, [pc, #384]	; (800f7bc <HAL_GPIO_Init+0x2fc>)
 800f63a:	f043 0301 	orr.w	r3, r3, #1
 800f63e:	6613      	str	r3, [r2, #96]	; 0x60
 800f640:	4b5e      	ldr	r3, [pc, #376]	; (800f7bc <HAL_GPIO_Init+0x2fc>)
 800f642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f644:	f003 0301 	and.w	r3, r3, #1
 800f648:	60bb      	str	r3, [r7, #8]
 800f64a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800f64c:	4a5c      	ldr	r2, [pc, #368]	; (800f7c0 <HAL_GPIO_Init+0x300>)
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	089b      	lsrs	r3, r3, #2
 800f652:	3302      	adds	r3, #2
 800f654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	f003 0303 	and.w	r3, r3, #3
 800f660:	009b      	lsls	r3, r3, #2
 800f662:	220f      	movs	r2, #15
 800f664:	fa02 f303 	lsl.w	r3, r2, r3
 800f668:	43db      	mvns	r3, r3
 800f66a:	693a      	ldr	r2, [r7, #16]
 800f66c:	4013      	ands	r3, r2
 800f66e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800f676:	d02b      	beq.n	800f6d0 <HAL_GPIO_Init+0x210>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	4a52      	ldr	r2, [pc, #328]	; (800f7c4 <HAL_GPIO_Init+0x304>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d025      	beq.n	800f6cc <HAL_GPIO_Init+0x20c>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a51      	ldr	r2, [pc, #324]	; (800f7c8 <HAL_GPIO_Init+0x308>)
 800f684:	4293      	cmp	r3, r2
 800f686:	d01f      	beq.n	800f6c8 <HAL_GPIO_Init+0x208>
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	4a50      	ldr	r2, [pc, #320]	; (800f7cc <HAL_GPIO_Init+0x30c>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d019      	beq.n	800f6c4 <HAL_GPIO_Init+0x204>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a4f      	ldr	r2, [pc, #316]	; (800f7d0 <HAL_GPIO_Init+0x310>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d013      	beq.n	800f6c0 <HAL_GPIO_Init+0x200>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a4e      	ldr	r2, [pc, #312]	; (800f7d4 <HAL_GPIO_Init+0x314>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d00d      	beq.n	800f6bc <HAL_GPIO_Init+0x1fc>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a4d      	ldr	r2, [pc, #308]	; (800f7d8 <HAL_GPIO_Init+0x318>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d007      	beq.n	800f6b8 <HAL_GPIO_Init+0x1f8>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a4c      	ldr	r2, [pc, #304]	; (800f7dc <HAL_GPIO_Init+0x31c>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d101      	bne.n	800f6b4 <HAL_GPIO_Init+0x1f4>
 800f6b0:	2307      	movs	r3, #7
 800f6b2:	e00e      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6b4:	2308      	movs	r3, #8
 800f6b6:	e00c      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6b8:	2306      	movs	r3, #6
 800f6ba:	e00a      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6bc:	2305      	movs	r3, #5
 800f6be:	e008      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6c0:	2304      	movs	r3, #4
 800f6c2:	e006      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6c4:	2303      	movs	r3, #3
 800f6c6:	e004      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	e002      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e000      	b.n	800f6d2 <HAL_GPIO_Init+0x212>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	f002 0203 	and.w	r2, r2, #3
 800f6d8:	0092      	lsls	r2, r2, #2
 800f6da:	4093      	lsls	r3, r2
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800f6e2:	4937      	ldr	r1, [pc, #220]	; (800f7c0 <HAL_GPIO_Init+0x300>)
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	089b      	lsrs	r3, r3, #2
 800f6e8:	3302      	adds	r3, #2
 800f6ea:	693a      	ldr	r2, [r7, #16]
 800f6ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f6f0:	4b3b      	ldr	r3, [pc, #236]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	43db      	mvns	r3, r3
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	4013      	ands	r3, r2
 800f6fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d003      	beq.n	800f714 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800f70c:	693a      	ldr	r2, [r7, #16]
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	4313      	orrs	r3, r2
 800f712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f714:	4a32      	ldr	r2, [pc, #200]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800f71a:	4b31      	ldr	r3, [pc, #196]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	43db      	mvns	r3, r3
 800f724:	693a      	ldr	r2, [r7, #16]
 800f726:	4013      	ands	r3, r2
 800f728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f732:	2b00      	cmp	r3, #0
 800f734:	d003      	beq.n	800f73e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800f736:	693a      	ldr	r2, [r7, #16]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f73e:	4a28      	ldr	r2, [pc, #160]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800f744:	4b26      	ldr	r3, [pc, #152]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	43db      	mvns	r3, r3
 800f74e:	693a      	ldr	r2, [r7, #16]
 800f750:	4013      	ands	r3, r2
 800f752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d003      	beq.n	800f768 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800f760:	693a      	ldr	r2, [r7, #16]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	4313      	orrs	r3, r2
 800f766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f768:	4a1d      	ldr	r2, [pc, #116]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800f76e:	4b1c      	ldr	r3, [pc, #112]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	43db      	mvns	r3, r3
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	4013      	ands	r3, r2
 800f77c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f786:	2b00      	cmp	r3, #0
 800f788:	d003      	beq.n	800f792 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	4313      	orrs	r3, r2
 800f790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f792:	4a13      	ldr	r2, [pc, #76]	; (800f7e0 <HAL_GPIO_Init+0x320>)
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	3301      	adds	r3, #1
 800f79c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f47f ae91 	bne.w	800f4d0 <HAL_GPIO_Init+0x10>
  }
}
 800f7ae:	bf00      	nop
 800f7b0:	bf00      	nop
 800f7b2:	371c      	adds	r7, #28
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr
 800f7bc:	40021000 	.word	0x40021000
 800f7c0:	40010000 	.word	0x40010000
 800f7c4:	48000400 	.word	0x48000400
 800f7c8:	48000800 	.word	0x48000800
 800f7cc:	48000c00 	.word	0x48000c00
 800f7d0:	48001000 	.word	0x48001000
 800f7d4:	48001400 	.word	0x48001400
 800f7d8:	48001800 	.word	0x48001800
 800f7dc:	48001c00 	.word	0x48001c00
 800f7e0:	40010400 	.word	0x40010400

0800f7e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	691a      	ldr	r2, [r3, #16]
 800f7f4:	887b      	ldrh	r3, [r7, #2]
 800f7f6:	4013      	ands	r3, r2
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d002      	beq.n	800f802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	73fb      	strb	r3, [r7, #15]
 800f800:	e001      	b.n	800f806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f802:	2300      	movs	r3, #0
 800f804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f806:	7bfb      	ldrb	r3, [r7, #15]
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3714      	adds	r7, #20
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	460b      	mov	r3, r1
 800f81e:	807b      	strh	r3, [r7, #2]
 800f820:	4613      	mov	r3, r2
 800f822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f824:	787b      	ldrb	r3, [r7, #1]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d003      	beq.n	800f832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f82a:	887a      	ldrh	r2, [r7, #2]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f830:	e002      	b.n	800f838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f832:	887a      	ldrh	r2, [r7, #2]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f838:	bf00      	nop
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800f84e:	4b08      	ldr	r3, [pc, #32]	; (800f870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f850:	695a      	ldr	r2, [r3, #20]
 800f852:	88fb      	ldrh	r3, [r7, #6]
 800f854:	4013      	ands	r3, r2
 800f856:	2b00      	cmp	r3, #0
 800f858:	d006      	beq.n	800f868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f85a:	4a05      	ldr	r2, [pc, #20]	; (800f870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f85c:	88fb      	ldrh	r3, [r7, #6]
 800f85e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f860:	88fb      	ldrh	r3, [r7, #6]
 800f862:	4618      	mov	r0, r3
 800f864:	f7fc fa06 	bl	800bc74 <HAL_GPIO_EXTI_Callback>
  }
}
 800f868:	bf00      	nop
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	40010400 	.word	0x40010400

0800f874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d101      	bne.n	800f886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	e081      	b.n	800f98a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d106      	bne.n	800f8a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f7f9 feb6 	bl	800960c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2224      	movs	r2, #36	; 0x24
 800f8a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f022 0201 	bic.w	r2, r2, #1
 800f8b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685a      	ldr	r2, [r3, #4]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f8c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	689a      	ldr	r2, [r3, #8]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f8d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d107      	bne.n	800f8ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	689a      	ldr	r2, [r3, #8]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f8ea:	609a      	str	r2, [r3, #8]
 800f8ec:	e006      	b.n	800f8fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	689a      	ldr	r2, [r3, #8]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800f8fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	2b02      	cmp	r3, #2
 800f902:	d104      	bne.n	800f90e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f90c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	6812      	ldr	r2, [r2, #0]
 800f918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f91c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f920:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	68da      	ldr	r2, [r3, #12]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f930:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	691a      	ldr	r2, [r3, #16]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	695b      	ldr	r3, [r3, #20]
 800f93a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	430a      	orrs	r2, r1
 800f94a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	69d9      	ldr	r1, [r3, #28]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a1a      	ldr	r2, [r3, #32]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	430a      	orrs	r2, r1
 800f95a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f042 0201 	orr.w	r2, r2, #1
 800f96a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2220      	movs	r2, #32
 800f976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800f988:	2300      	movs	r3, #0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
	...

0800f994 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b088      	sub	sp, #32
 800f998:	af02      	add	r7, sp, #8
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	607a      	str	r2, [r7, #4]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	817b      	strh	r3, [r7, #10]
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	2b20      	cmp	r3, #32
 800f9b2:	f040 80da 	bne.w	800fb6a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d101      	bne.n	800f9c4 <HAL_I2C_Master_Transmit+0x30>
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	e0d3      	b.n	800fb6c <HAL_I2C_Master_Transmit+0x1d8>
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f9cc:	f7fd f936 	bl	800cc3c <HAL_GetTick>
 800f9d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	2319      	movs	r3, #25
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f000 fcbc 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e0be      	b.n	800fb6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2221      	movs	r2, #33	; 0x21
 800f9f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2210      	movs	r2, #16
 800f9fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	893a      	ldrh	r2, [r7, #8]
 800fa0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	2bff      	cmp	r3, #255	; 0xff
 800fa1e:	d90e      	bls.n	800fa3e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	22ff      	movs	r2, #255	; 0xff
 800fa24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	8979      	ldrh	r1, [r7, #10]
 800fa2e:	4b51      	ldr	r3, [pc, #324]	; (800fb74 <HAL_I2C_Master_Transmit+0x1e0>)
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fa36:	68f8      	ldr	r0, [r7, #12]
 800fa38:	f000 feb2 	bl	80107a0 <I2C_TransferConfig>
 800fa3c:	e06c      	b.n	800fb18 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa4c:	b2da      	uxtb	r2, r3
 800fa4e:	8979      	ldrh	r1, [r7, #10]
 800fa50:	4b48      	ldr	r3, [pc, #288]	; (800fb74 <HAL_I2C_Master_Transmit+0x1e0>)
 800fa52:	9300      	str	r3, [sp, #0]
 800fa54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fa58:	68f8      	ldr	r0, [r7, #12]
 800fa5a:	f000 fea1 	bl	80107a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800fa5e:	e05b      	b.n	800fb18 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa60:	697a      	ldr	r2, [r7, #20]
 800fa62:	6a39      	ldr	r1, [r7, #32]
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f000 fcb9 	bl	80103dc <I2C_WaitOnTXISFlagUntilTimeout>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d001      	beq.n	800fa74 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800fa70:	2301      	movs	r3, #1
 800fa72:	e07b      	b.n	800fb6c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa78:	781a      	ldrb	r2, [r3, #0]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa84:	1c5a      	adds	r2, r3, #1
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	3b01      	subs	r3, #1
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d034      	beq.n	800fb18 <HAL_I2C_Master_Transmit+0x184>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d130      	bne.n	800fb18 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	9300      	str	r3, [sp, #0]
 800faba:	6a3b      	ldr	r3, [r7, #32]
 800fabc:	2200      	movs	r2, #0
 800fabe:	2180      	movs	r1, #128	; 0x80
 800fac0:	68f8      	ldr	r0, [r7, #12]
 800fac2:	f000 fc4b 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d001      	beq.n	800fad0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	e04d      	b.n	800fb6c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	2bff      	cmp	r3, #255	; 0xff
 800fad8:	d90e      	bls.n	800faf8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	22ff      	movs	r2, #255	; 0xff
 800fade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	8979      	ldrh	r1, [r7, #10]
 800fae8:	2300      	movs	r3, #0
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f000 fe55 	bl	80107a0 <I2C_TransferConfig>
 800faf6:	e00f      	b.n	800fb18 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	8979      	ldrh	r1, [r7, #10]
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f000 fe44 	bl	80107a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d19e      	bne.n	800fa60 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	6a39      	ldr	r1, [r7, #32]
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	f000 fc98 	bl	801045c <I2C_WaitOnSTOPFlagUntilTimeout>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800fb32:	2301      	movs	r3, #1
 800fb34:	e01a      	b.n	800fb6c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2220      	movs	r2, #32
 800fb3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	6859      	ldr	r1, [r3, #4]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	4b0b      	ldr	r3, [pc, #44]	; (800fb78 <HAL_I2C_Master_Transmit+0x1e4>)
 800fb4a:	400b      	ands	r3, r1
 800fb4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2220      	movs	r2, #32
 800fb52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2200      	movs	r2, #0
 800fb62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fb66:	2300      	movs	r3, #0
 800fb68:	e000      	b.n	800fb6c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800fb6a:	2302      	movs	r3, #2
  }
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	80002000 	.word	0x80002000
 800fb78:	fe00e800 	.word	0xfe00e800

0800fb7c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b088      	sub	sp, #32
 800fb80:	af02      	add	r7, sp, #8
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	607a      	str	r2, [r7, #4]
 800fb86:	461a      	mov	r2, r3
 800fb88:	460b      	mov	r3, r1
 800fb8a:	817b      	strh	r3, [r7, #10]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	2b20      	cmp	r3, #32
 800fb9a:	f040 80db 	bne.w	800fd54 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d101      	bne.n	800fbac <HAL_I2C_Master_Receive+0x30>
 800fba8:	2302      	movs	r3, #2
 800fbaa:	e0d4      	b.n	800fd56 <HAL_I2C_Master_Receive+0x1da>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2201      	movs	r2, #1
 800fbb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fbb4:	f7fd f842 	bl	800cc3c <HAL_GetTick>
 800fbb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	2319      	movs	r3, #25
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f000 fbc8 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d001      	beq.n	800fbd6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	e0bf      	b.n	800fd56 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2222      	movs	r2, #34	; 0x22
 800fbda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2210      	movs	r2, #16
 800fbe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	893a      	ldrh	r2, [r7, #8]
 800fbf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	2bff      	cmp	r3, #255	; 0xff
 800fc06:	d90e      	bls.n	800fc26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	22ff      	movs	r2, #255	; 0xff
 800fc0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc12:	b2da      	uxtb	r2, r3
 800fc14:	8979      	ldrh	r1, [r7, #10]
 800fc16:	4b52      	ldr	r3, [pc, #328]	; (800fd60 <HAL_I2C_Master_Receive+0x1e4>)
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	f000 fdbe 	bl	80107a0 <I2C_TransferConfig>
 800fc24:	e06d      	b.n	800fd02 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc34:	b2da      	uxtb	r2, r3
 800fc36:	8979      	ldrh	r1, [r7, #10]
 800fc38:	4b49      	ldr	r3, [pc, #292]	; (800fd60 <HAL_I2C_Master_Receive+0x1e4>)
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fc40:	68f8      	ldr	r0, [r7, #12]
 800fc42:	f000 fdad 	bl	80107a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fc46:	e05c      	b.n	800fd02 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	6a39      	ldr	r1, [r7, #32]
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 fc41 	bl	80104d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e07c      	b.n	800fd56 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc66:	b2d2      	uxtb	r2, r2
 800fc68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	3b01      	subs	r3, #1
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d034      	beq.n	800fd02 <HAL_I2C_Master_Receive+0x186>
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d130      	bne.n	800fd02 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	9300      	str	r3, [sp, #0]
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	2200      	movs	r2, #0
 800fca8:	2180      	movs	r1, #128	; 0x80
 800fcaa:	68f8      	ldr	r0, [r7, #12]
 800fcac:	f000 fb56 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d001      	beq.n	800fcba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e04d      	b.n	800fd56 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	2bff      	cmp	r3, #255	; 0xff
 800fcc2:	d90e      	bls.n	800fce2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	22ff      	movs	r2, #255	; 0xff
 800fcc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcce:	b2da      	uxtb	r2, r3
 800fcd0:	8979      	ldrh	r1, [r7, #10]
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f000 fd60 	bl	80107a0 <I2C_TransferConfig>
 800fce0:	e00f      	b.n	800fd02 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	8979      	ldrh	r1, [r7, #10]
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 fd4f 	bl	80107a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d19d      	bne.n	800fc48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	6a39      	ldr	r1, [r7, #32]
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 fba3 	bl	801045c <I2C_WaitOnSTOPFlagUntilTimeout>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d001      	beq.n	800fd20 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	e01a      	b.n	800fd56 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	2220      	movs	r2, #32
 800fd26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	6859      	ldr	r1, [r3, #4]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681a      	ldr	r2, [r3, #0]
 800fd32:	4b0c      	ldr	r3, [pc, #48]	; (800fd64 <HAL_I2C_Master_Receive+0x1e8>)
 800fd34:	400b      	ands	r3, r1
 800fd36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2220      	movs	r2, #32
 800fd3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800fd50:	2300      	movs	r3, #0
 800fd52:	e000      	b.n	800fd56 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800fd54:	2302      	movs	r3, #2
  }
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3718      	adds	r7, #24
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	80002400 	.word	0x80002400
 800fd64:	fe00e800 	.word	0xfe00e800

0800fd68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b088      	sub	sp, #32
 800fd6c:	af02      	add	r7, sp, #8
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	4608      	mov	r0, r1
 800fd72:	4611      	mov	r1, r2
 800fd74:	461a      	mov	r2, r3
 800fd76:	4603      	mov	r3, r0
 800fd78:	817b      	strh	r3, [r7, #10]
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	813b      	strh	r3, [r7, #8]
 800fd7e:	4613      	mov	r3, r2
 800fd80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b20      	cmp	r3, #32
 800fd8c:	f040 80f9 	bne.w	800ff82 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd90:	6a3b      	ldr	r3, [r7, #32]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <HAL_I2C_Mem_Write+0x34>
 800fd96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d105      	bne.n	800fda8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fda2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800fda4:	2301      	movs	r3, #1
 800fda6:	e0ed      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d101      	bne.n	800fdb6 <HAL_I2C_Mem_Write+0x4e>
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	e0e6      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800fdbe:	f7fc ff3d 	bl	800cc3c <HAL_GetTick>
 800fdc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	2319      	movs	r3, #25
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f000 fac3 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d001      	beq.n	800fde0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800fddc:	2301      	movs	r3, #1
 800fdde:	e0d1      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2221      	movs	r2, #33	; 0x21
 800fde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2240      	movs	r2, #64	; 0x40
 800fdec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	6a3a      	ldr	r2, [r7, #32]
 800fdfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fe00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2200      	movs	r2, #0
 800fe06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800fe08:	88f8      	ldrh	r0, [r7, #6]
 800fe0a:	893a      	ldrh	r2, [r7, #8]
 800fe0c:	8979      	ldrh	r1, [r7, #10]
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	9301      	str	r3, [sp, #4]
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	9300      	str	r3, [sp, #0]
 800fe16:	4603      	mov	r3, r0
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f000 f9d3 	bl	80101c4 <I2C_RequestMemoryWrite>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d005      	beq.n	800fe30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2200      	movs	r2, #0
 800fe28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e0a9      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	2bff      	cmp	r3, #255	; 0xff
 800fe38:	d90e      	bls.n	800fe58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	22ff      	movs	r2, #255	; 0xff
 800fe3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe44:	b2da      	uxtb	r2, r3
 800fe46:	8979      	ldrh	r1, [r7, #10]
 800fe48:	2300      	movs	r3, #0
 800fe4a:	9300      	str	r3, [sp, #0]
 800fe4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f000 fca5 	bl	80107a0 <I2C_TransferConfig>
 800fe56:	e00f      	b.n	800fe78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe5c:	b29a      	uxth	r2, r3
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe66:	b2da      	uxtb	r2, r3
 800fe68:	8979      	ldrh	r1, [r7, #10]
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	9300      	str	r3, [sp, #0]
 800fe6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f000 fc94 	bl	80107a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fe78:	697a      	ldr	r2, [r7, #20]
 800fe7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f000 faad 	bl	80103dc <I2C_WaitOnTXISFlagUntilTimeout>
 800fe82:	4603      	mov	r3, r0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	e07b      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe90:	781a      	ldrb	r2, [r3, #0]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	3b01      	subs	r3, #1
 800feaa:	b29a      	uxth	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800feb4:	3b01      	subs	r3, #1
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d034      	beq.n	800ff30 <HAL_I2C_Mem_Write+0x1c8>
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d130      	bne.n	800ff30 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	2200      	movs	r2, #0
 800fed6:	2180      	movs	r1, #128	; 0x80
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f000 fa3f 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800fee4:	2301      	movs	r3, #1
 800fee6:	e04d      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800feec:	b29b      	uxth	r3, r3
 800feee:	2bff      	cmp	r3, #255	; 0xff
 800fef0:	d90e      	bls.n	800ff10 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	22ff      	movs	r2, #255	; 0xff
 800fef6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fefc:	b2da      	uxtb	r2, r3
 800fefe:	8979      	ldrh	r1, [r7, #10]
 800ff00:	2300      	movs	r3, #0
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f000 fc49 	bl	80107a0 <I2C_TransferConfig>
 800ff0e:	e00f      	b.n	800ff30 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	8979      	ldrh	r1, [r7, #10]
 800ff22:	2300      	movs	r3, #0
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f000 fc38 	bl	80107a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d19e      	bne.n	800fe78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ff3a:	697a      	ldr	r2, [r7, #20]
 800ff3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f000 fa8c 	bl	801045c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d001      	beq.n	800ff4e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e01a      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2220      	movs	r2, #32
 800ff54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	6859      	ldr	r1, [r3, #4]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681a      	ldr	r2, [r3, #0]
 800ff60:	4b0a      	ldr	r3, [pc, #40]	; (800ff8c <HAL_I2C_Mem_Write+0x224>)
 800ff62:	400b      	ands	r3, r1
 800ff64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	e000      	b.n	800ff84 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ff82:	2302      	movs	r3, #2
  }
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3718      	adds	r7, #24
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	fe00e800 	.word	0xfe00e800

0800ff90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b088      	sub	sp, #32
 800ff94:	af02      	add	r7, sp, #8
 800ff96:	60f8      	str	r0, [r7, #12]
 800ff98:	4608      	mov	r0, r1
 800ff9a:	4611      	mov	r1, r2
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	817b      	strh	r3, [r7, #10]
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	813b      	strh	r3, [r7, #8]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ffb0:	b2db      	uxtb	r3, r3
 800ffb2:	2b20      	cmp	r3, #32
 800ffb4:	f040 80fd 	bne.w	80101b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffb8:	6a3b      	ldr	r3, [r7, #32]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d002      	beq.n	800ffc4 <HAL_I2C_Mem_Read+0x34>
 800ffbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d105      	bne.n	800ffd0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e0f1      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d101      	bne.n	800ffde <HAL_I2C_Mem_Read+0x4e>
 800ffda:	2302      	movs	r3, #2
 800ffdc:	e0ea      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ffe6:	f7fc fe29 	bl	800cc3c <HAL_GetTick>
 800ffea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	2319      	movs	r3, #25
 800fff2:	2201      	movs	r2, #1
 800fff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	f000 f9af 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d001      	beq.n	8010008 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8010004:	2301      	movs	r3, #1
 8010006:	e0d5      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2222      	movs	r2, #34	; 0x22
 801000c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2240      	movs	r2, #64	; 0x40
 8010014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2200      	movs	r2, #0
 801001c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	6a3a      	ldr	r2, [r7, #32]
 8010022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010030:	88f8      	ldrh	r0, [r7, #6]
 8010032:	893a      	ldrh	r2, [r7, #8]
 8010034:	8979      	ldrh	r1, [r7, #10]
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	4603      	mov	r3, r0
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f000 f913 	bl	801026c <I2C_RequestMemoryRead>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d005      	beq.n	8010058 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2200      	movs	r2, #0
 8010050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8010054:	2301      	movs	r3, #1
 8010056:	e0ad      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801005c:	b29b      	uxth	r3, r3
 801005e:	2bff      	cmp	r3, #255	; 0xff
 8010060:	d90e      	bls.n	8010080 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	22ff      	movs	r2, #255	; 0xff
 8010066:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801006c:	b2da      	uxtb	r2, r3
 801006e:	8979      	ldrh	r1, [r7, #10]
 8010070:	4b52      	ldr	r3, [pc, #328]	; (80101bc <HAL_I2C_Mem_Read+0x22c>)
 8010072:	9300      	str	r3, [sp, #0]
 8010074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010078:	68f8      	ldr	r0, [r7, #12]
 801007a:	f000 fb91 	bl	80107a0 <I2C_TransferConfig>
 801007e:	e00f      	b.n	80100a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010084:	b29a      	uxth	r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801008e:	b2da      	uxtb	r2, r3
 8010090:	8979      	ldrh	r1, [r7, #10]
 8010092:	4b4a      	ldr	r3, [pc, #296]	; (80101bc <HAL_I2C_Mem_Read+0x22c>)
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801009a:	68f8      	ldr	r0, [r7, #12]
 801009c:	f000 fb80 	bl	80107a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	9300      	str	r3, [sp, #0]
 80100a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a6:	2200      	movs	r2, #0
 80100a8:	2104      	movs	r1, #4
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f000 f956 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80100b6:	2301      	movs	r3, #1
 80100b8:	e07c      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c4:	b2d2      	uxtb	r2, r2
 80100c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100d6:	3b01      	subs	r3, #1
 80100d8:	b29a      	uxth	r2, r3
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	3b01      	subs	r3, #1
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d034      	beq.n	8010160 <HAL_I2C_Mem_Read+0x1d0>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d130      	bne.n	8010160 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	2200      	movs	r2, #0
 8010106:	2180      	movs	r1, #128	; 0x80
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f000 f927 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d001      	beq.n	8010118 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8010114:	2301      	movs	r3, #1
 8010116:	e04d      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801011c:	b29b      	uxth	r3, r3
 801011e:	2bff      	cmp	r3, #255	; 0xff
 8010120:	d90e      	bls.n	8010140 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	22ff      	movs	r2, #255	; 0xff
 8010126:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801012c:	b2da      	uxtb	r2, r3
 801012e:	8979      	ldrh	r1, [r7, #10]
 8010130:	2300      	movs	r3, #0
 8010132:	9300      	str	r3, [sp, #0]
 8010134:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f000 fb31 	bl	80107a0 <I2C_TransferConfig>
 801013e:	e00f      	b.n	8010160 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010144:	b29a      	uxth	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801014e:	b2da      	uxtb	r2, r3
 8010150:	8979      	ldrh	r1, [r7, #10]
 8010152:	2300      	movs	r3, #0
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801015a:	68f8      	ldr	r0, [r7, #12]
 801015c:	f000 fb20 	bl	80107a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010164:	b29b      	uxth	r3, r3
 8010166:	2b00      	cmp	r3, #0
 8010168:	d19a      	bne.n	80100a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f000 f974 	bl	801045c <I2C_WaitOnSTOPFlagUntilTimeout>
 8010174:	4603      	mov	r3, r0
 8010176:	2b00      	cmp	r3, #0
 8010178:	d001      	beq.n	801017e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801017a:	2301      	movs	r3, #1
 801017c:	e01a      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2220      	movs	r2, #32
 8010184:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	6859      	ldr	r1, [r3, #4]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	4b0b      	ldr	r3, [pc, #44]	; (80101c0 <HAL_I2C_Mem_Read+0x230>)
 8010192:	400b      	ands	r3, r1
 8010194:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2220      	movs	r2, #32
 801019a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2200      	movs	r2, #0
 80101a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80101ae:	2300      	movs	r3, #0
 80101b0:	e000      	b.n	80101b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80101b2:	2302      	movs	r3, #2
  }
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3718      	adds	r7, #24
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	80002400 	.word	0x80002400
 80101c0:	fe00e800 	.word	0xfe00e800

080101c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af02      	add	r7, sp, #8
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	4608      	mov	r0, r1
 80101ce:	4611      	mov	r1, r2
 80101d0:	461a      	mov	r2, r3
 80101d2:	4603      	mov	r3, r0
 80101d4:	817b      	strh	r3, [r7, #10]
 80101d6:	460b      	mov	r3, r1
 80101d8:	813b      	strh	r3, [r7, #8]
 80101da:	4613      	mov	r3, r2
 80101dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80101de:	88fb      	ldrh	r3, [r7, #6]
 80101e0:	b2da      	uxtb	r2, r3
 80101e2:	8979      	ldrh	r1, [r7, #10]
 80101e4:	4b20      	ldr	r3, [pc, #128]	; (8010268 <I2C_RequestMemoryWrite+0xa4>)
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80101ec:	68f8      	ldr	r0, [r7, #12]
 80101ee:	f000 fad7 	bl	80107a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80101f2:	69fa      	ldr	r2, [r7, #28]
 80101f4:	69b9      	ldr	r1, [r7, #24]
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f000 f8f0 	bl	80103dc <I2C_WaitOnTXISFlagUntilTimeout>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d001      	beq.n	8010206 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8010202:	2301      	movs	r3, #1
 8010204:	e02c      	b.n	8010260 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010206:	88fb      	ldrh	r3, [r7, #6]
 8010208:	2b01      	cmp	r3, #1
 801020a:	d105      	bne.n	8010218 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801020c:	893b      	ldrh	r3, [r7, #8]
 801020e:	b2da      	uxtb	r2, r3
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	629a      	str	r2, [r3, #40]	; 0x28
 8010216:	e015      	b.n	8010244 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010218:	893b      	ldrh	r3, [r7, #8]
 801021a:	0a1b      	lsrs	r3, r3, #8
 801021c:	b29b      	uxth	r3, r3
 801021e:	b2da      	uxtb	r2, r3
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010226:	69fa      	ldr	r2, [r7, #28]
 8010228:	69b9      	ldr	r1, [r7, #24]
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f000 f8d6 	bl	80103dc <I2C_WaitOnTXISFlagUntilTimeout>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d001      	beq.n	801023a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8010236:	2301      	movs	r3, #1
 8010238:	e012      	b.n	8010260 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801023a:	893b      	ldrh	r3, [r7, #8]
 801023c:	b2da      	uxtb	r2, r3
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	2200      	movs	r2, #0
 801024c:	2180      	movs	r1, #128	; 0x80
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f000 f884 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d001      	beq.n	801025e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801025a:	2301      	movs	r3, #1
 801025c:	e000      	b.n	8010260 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801025e:	2300      	movs	r3, #0
}
 8010260:	4618      	mov	r0, r3
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	80002000 	.word	0x80002000

0801026c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af02      	add	r7, sp, #8
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	4608      	mov	r0, r1
 8010276:	4611      	mov	r1, r2
 8010278:	461a      	mov	r2, r3
 801027a:	4603      	mov	r3, r0
 801027c:	817b      	strh	r3, [r7, #10]
 801027e:	460b      	mov	r3, r1
 8010280:	813b      	strh	r3, [r7, #8]
 8010282:	4613      	mov	r3, r2
 8010284:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8010286:	88fb      	ldrh	r3, [r7, #6]
 8010288:	b2da      	uxtb	r2, r3
 801028a:	8979      	ldrh	r1, [r7, #10]
 801028c:	4b20      	ldr	r3, [pc, #128]	; (8010310 <I2C_RequestMemoryRead+0xa4>)
 801028e:	9300      	str	r3, [sp, #0]
 8010290:	2300      	movs	r3, #0
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f000 fa84 	bl	80107a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010298:	69fa      	ldr	r2, [r7, #28]
 801029a:	69b9      	ldr	r1, [r7, #24]
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 f89d 	bl	80103dc <I2C_WaitOnTXISFlagUntilTimeout>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d001      	beq.n	80102ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80102a8:	2301      	movs	r3, #1
 80102aa:	e02c      	b.n	8010306 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80102ac:	88fb      	ldrh	r3, [r7, #6]
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d105      	bne.n	80102be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80102b2:	893b      	ldrh	r3, [r7, #8]
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	629a      	str	r2, [r3, #40]	; 0x28
 80102bc:	e015      	b.n	80102ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80102be:	893b      	ldrh	r3, [r7, #8]
 80102c0:	0a1b      	lsrs	r3, r3, #8
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	b2da      	uxtb	r2, r3
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80102cc:	69fa      	ldr	r2, [r7, #28]
 80102ce:	69b9      	ldr	r1, [r7, #24]
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f000 f883 	bl	80103dc <I2C_WaitOnTXISFlagUntilTimeout>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d001      	beq.n	80102e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80102dc:	2301      	movs	r3, #1
 80102de:	e012      	b.n	8010306 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80102e0:	893b      	ldrh	r3, [r7, #8]
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	9300      	str	r3, [sp, #0]
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	2200      	movs	r2, #0
 80102f2:	2140      	movs	r1, #64	; 0x40
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f000 f831 	bl	801035c <I2C_WaitOnFlagUntilTimeout>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d001      	beq.n	8010304 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8010300:	2301      	movs	r3, #1
 8010302:	e000      	b.n	8010306 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	80002000 	.word	0x80002000

08010314 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010314:	b480      	push	{r7}
 8010316:	b083      	sub	sp, #12
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	f003 0302 	and.w	r3, r3, #2
 8010326:	2b02      	cmp	r3, #2
 8010328:	d103      	bne.n	8010332 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2200      	movs	r2, #0
 8010330:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	699b      	ldr	r3, [r3, #24]
 8010338:	f003 0301 	and.w	r3, r3, #1
 801033c:	2b01      	cmp	r3, #1
 801033e:	d007      	beq.n	8010350 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	699a      	ldr	r2, [r3, #24]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f042 0201 	orr.w	r2, r2, #1
 801034e:	619a      	str	r2, [r3, #24]
  }
}
 8010350:	bf00      	nop
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr

0801035c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b084      	sub	sp, #16
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	603b      	str	r3, [r7, #0]
 8010368:	4613      	mov	r3, r2
 801036a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801036c:	e022      	b.n	80103b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010374:	d01e      	beq.n	80103b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010376:	f7fc fc61 	bl	800cc3c <HAL_GetTick>
 801037a:	4602      	mov	r2, r0
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	683a      	ldr	r2, [r7, #0]
 8010382:	429a      	cmp	r2, r3
 8010384:	d302      	bcc.n	801038c <I2C_WaitOnFlagUntilTimeout+0x30>
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d113      	bne.n	80103b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010390:	f043 0220 	orr.w	r2, r3, #32
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2220      	movs	r2, #32
 801039c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80103b0:	2301      	movs	r3, #1
 80103b2:	e00f      	b.n	80103d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	699a      	ldr	r2, [r3, #24]
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	4013      	ands	r3, r2
 80103be:	68ba      	ldr	r2, [r7, #8]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	bf0c      	ite	eq
 80103c4:	2301      	moveq	r3, #1
 80103c6:	2300      	movne	r3, #0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	461a      	mov	r2, r3
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d0cd      	beq.n	801036e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80103e8:	e02c      	b.n	8010444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80103ea:	687a      	ldr	r2, [r7, #4]
 80103ec:	68b9      	ldr	r1, [r7, #8]
 80103ee:	68f8      	ldr	r0, [r7, #12]
 80103f0:	f000 f8ea 	bl	80105c8 <I2C_IsErrorOccurred>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d001      	beq.n	80103fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80103fa:	2301      	movs	r3, #1
 80103fc:	e02a      	b.n	8010454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010404:	d01e      	beq.n	8010444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010406:	f7fc fc19 	bl	800cc3c <HAL_GetTick>
 801040a:	4602      	mov	r2, r0
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	68ba      	ldr	r2, [r7, #8]
 8010412:	429a      	cmp	r2, r3
 8010414:	d302      	bcc.n	801041c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d113      	bne.n	8010444 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010420:	f043 0220 	orr.w	r2, r3, #32
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2220      	movs	r2, #32
 801042c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2200      	movs	r2, #0
 8010434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2200      	movs	r2, #0
 801043c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8010440:	2301      	movs	r3, #1
 8010442:	e007      	b.n	8010454 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	f003 0302 	and.w	r3, r3, #2
 801044e:	2b02      	cmp	r3, #2
 8010450:	d1cb      	bne.n	80103ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010468:	e028      	b.n	80104bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	68b9      	ldr	r1, [r7, #8]
 801046e:	68f8      	ldr	r0, [r7, #12]
 8010470:	f000 f8aa 	bl	80105c8 <I2C_IsErrorOccurred>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d001      	beq.n	801047e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801047a:	2301      	movs	r3, #1
 801047c:	e026      	b.n	80104cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801047e:	f7fc fbdd 	bl	800cc3c <HAL_GetTick>
 8010482:	4602      	mov	r2, r0
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	1ad3      	subs	r3, r2, r3
 8010488:	68ba      	ldr	r2, [r7, #8]
 801048a:	429a      	cmp	r2, r3
 801048c:	d302      	bcc.n	8010494 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d113      	bne.n	80104bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010498:	f043 0220 	orr.w	r2, r3, #32
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2220      	movs	r2, #32
 80104a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80104b8:	2301      	movs	r3, #1
 80104ba:	e007      	b.n	80104cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	699b      	ldr	r3, [r3, #24]
 80104c2:	f003 0320 	and.w	r3, r3, #32
 80104c6:	2b20      	cmp	r3, #32
 80104c8:	d1cf      	bne.n	801046a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3710      	adds	r7, #16
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}

080104d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	60b9      	str	r1, [r7, #8]
 80104de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80104e0:	e064      	b.n	80105ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	68b9      	ldr	r1, [r7, #8]
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f000 f86e 	bl	80105c8 <I2C_IsErrorOccurred>
 80104ec:	4603      	mov	r3, r0
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80104f2:	2301      	movs	r3, #1
 80104f4:	e062      	b.n	80105bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	f003 0320 	and.w	r3, r3, #32
 8010500:	2b20      	cmp	r3, #32
 8010502:	d138      	bne.n	8010576 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	699b      	ldr	r3, [r3, #24]
 801050a:	f003 0304 	and.w	r3, r3, #4
 801050e:	2b04      	cmp	r3, #4
 8010510:	d105      	bne.n	801051e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	e04e      	b.n	80105bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	699b      	ldr	r3, [r3, #24]
 8010524:	f003 0310 	and.w	r3, r3, #16
 8010528:	2b10      	cmp	r3, #16
 801052a:	d107      	bne.n	801053c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2210      	movs	r2, #16
 8010532:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2204      	movs	r2, #4
 8010538:	645a      	str	r2, [r3, #68]	; 0x44
 801053a:	e002      	b.n	8010542 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2200      	movs	r2, #0
 8010540:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2220      	movs	r2, #32
 8010548:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6859      	ldr	r1, [r3, #4]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	4b1b      	ldr	r3, [pc, #108]	; (80105c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8010556:	400b      	ands	r3, r1
 8010558:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2220      	movs	r2, #32
 801055e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2200      	movs	r2, #0
 8010566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	2200      	movs	r2, #0
 801056e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	e022      	b.n	80105bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010576:	f7fc fb61 	bl	800cc3c <HAL_GetTick>
 801057a:	4602      	mov	r2, r0
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	68ba      	ldr	r2, [r7, #8]
 8010582:	429a      	cmp	r2, r3
 8010584:	d302      	bcc.n	801058c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d10f      	bne.n	80105ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010590:	f043 0220 	orr.w	r2, r3, #32
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2220      	movs	r2, #32
 801059c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	e007      	b.n	80105bc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	699b      	ldr	r3, [r3, #24]
 80105b2:	f003 0304 	and.w	r3, r3, #4
 80105b6:	2b04      	cmp	r3, #4
 80105b8:	d193      	bne.n	80104e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	fe00e800 	.word	0xfe00e800

080105c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b08a      	sub	sp, #40	; 0x28
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	699b      	ldr	r3, [r3, #24]
 80105e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	f003 0310 	and.w	r3, r3, #16
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d075      	beq.n	80106e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2210      	movs	r2, #16
 80105fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80105fc:	e056      	b.n	80106ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010604:	d052      	beq.n	80106ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010606:	f7fc fb19 	bl	800cc3c <HAL_GetTick>
 801060a:	4602      	mov	r2, r0
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	429a      	cmp	r2, r3
 8010614:	d302      	bcc.n	801061c <I2C_IsErrorOccurred+0x54>
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d147      	bne.n	80106ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010626:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801062e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801063a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801063e:	d12e      	bne.n	801069e <I2C_IsErrorOccurred+0xd6>
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010646:	d02a      	beq.n	801069e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8010648:	7cfb      	ldrb	r3, [r7, #19]
 801064a:	2b20      	cmp	r3, #32
 801064c:	d027      	beq.n	801069e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	685a      	ldr	r2, [r3, #4]
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801065c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801065e:	f7fc faed 	bl	800cc3c <HAL_GetTick>
 8010662:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010664:	e01b      	b.n	801069e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010666:	f7fc fae9 	bl	800cc3c <HAL_GetTick>
 801066a:	4602      	mov	r2, r0
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	1ad3      	subs	r3, r2, r3
 8010670:	2b19      	cmp	r3, #25
 8010672:	d914      	bls.n	801069e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010678:	f043 0220 	orr.w	r2, r3, #32
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2220      	movs	r2, #32
 8010684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2200      	movs	r2, #0
 801068c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	2200      	movs	r2, #0
 8010694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8010698:	2301      	movs	r3, #1
 801069a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	699b      	ldr	r3, [r3, #24]
 80106a4:	f003 0320 	and.w	r3, r3, #32
 80106a8:	2b20      	cmp	r3, #32
 80106aa:	d1dc      	bne.n	8010666 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	699b      	ldr	r3, [r3, #24]
 80106b2:	f003 0320 	and.w	r3, r3, #32
 80106b6:	2b20      	cmp	r3, #32
 80106b8:	d003      	beq.n	80106c2 <I2C_IsErrorOccurred+0xfa>
 80106ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d09d      	beq.n	80105fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80106c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d103      	bne.n	80106d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2220      	movs	r2, #32
 80106d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80106d2:	6a3b      	ldr	r3, [r7, #32]
 80106d4:	f043 0304 	orr.w	r3, r3, #4
 80106d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80106da:	2301      	movs	r3, #1
 80106dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	699b      	ldr	r3, [r3, #24]
 80106e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00b      	beq.n	801070a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80106f2:	6a3b      	ldr	r3, [r7, #32]
 80106f4:	f043 0301 	orr.w	r3, r3, #1
 80106f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010702:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010704:	2301      	movs	r3, #1
 8010706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010710:	2b00      	cmp	r3, #0
 8010712:	d00b      	beq.n	801072c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	f043 0308 	orr.w	r3, r3, #8
 801071a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010724:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010726:	2301      	movs	r3, #1
 8010728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00b      	beq.n	801074e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010736:	6a3b      	ldr	r3, [r7, #32]
 8010738:	f043 0302 	orr.w	r3, r3, #2
 801073c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010746:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010748:	2301      	movs	r3, #1
 801074a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801074e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010752:	2b00      	cmp	r3, #0
 8010754:	d01c      	beq.n	8010790 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7ff fddc 	bl	8010314 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	6859      	ldr	r1, [r3, #4]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	4b0d      	ldr	r3, [pc, #52]	; (801079c <I2C_IsErrorOccurred+0x1d4>)
 8010768:	400b      	ands	r3, r1
 801076a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010770:	6a3b      	ldr	r3, [r7, #32]
 8010772:	431a      	orrs	r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2220      	movs	r2, #32
 801077c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2200      	movs	r2, #0
 801078c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8010790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010794:	4618      	mov	r0, r3
 8010796:	3728      	adds	r7, #40	; 0x28
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	fe00e800 	.word	0xfe00e800

080107a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b087      	sub	sp, #28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	607b      	str	r3, [r7, #4]
 80107aa:	460b      	mov	r3, r1
 80107ac:	817b      	strh	r3, [r7, #10]
 80107ae:	4613      	mov	r3, r2
 80107b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107b2:	897b      	ldrh	r3, [r7, #10]
 80107b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80107b8:	7a7b      	ldrb	r3, [r7, #9]
 80107ba:	041b      	lsls	r3, r3, #16
 80107bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80107c6:	6a3b      	ldr	r3, [r7, #32]
 80107c8:	4313      	orrs	r3, r2
 80107ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	685a      	ldr	r2, [r3, #4]
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	0d5b      	lsrs	r3, r3, #21
 80107da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80107de:	4b08      	ldr	r3, [pc, #32]	; (8010800 <I2C_TransferConfig+0x60>)
 80107e0:	430b      	orrs	r3, r1
 80107e2:	43db      	mvns	r3, r3
 80107e4:	ea02 0103 	and.w	r1, r2, r3
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	697a      	ldr	r2, [r7, #20]
 80107ee:	430a      	orrs	r2, r1
 80107f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80107f2:	bf00      	nop
 80107f4:	371c      	adds	r7, #28
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr
 80107fe:	bf00      	nop
 8010800:	03ff63ff 	.word	0x03ff63ff

08010804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010814:	b2db      	uxtb	r3, r3
 8010816:	2b20      	cmp	r3, #32
 8010818:	d138      	bne.n	801088c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010820:	2b01      	cmp	r3, #1
 8010822:	d101      	bne.n	8010828 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010824:	2302      	movs	r3, #2
 8010826:	e032      	b.n	801088e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2224      	movs	r2, #36	; 0x24
 8010834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	f022 0201 	bic.w	r2, r2, #1
 8010846:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010856:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	6819      	ldr	r1, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	683a      	ldr	r2, [r7, #0]
 8010864:	430a      	orrs	r2, r1
 8010866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f042 0201 	orr.w	r2, r2, #1
 8010876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2220      	movs	r2, #32
 801087c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010888:	2300      	movs	r3, #0
 801088a:	e000      	b.n	801088e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801088c:	2302      	movs	r3, #2
  }
}
 801088e:	4618      	mov	r0, r3
 8010890:	370c      	adds	r7, #12
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801089a:	b480      	push	{r7}
 801089c:	b085      	sub	sp, #20
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
 80108a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	2b20      	cmp	r3, #32
 80108ae:	d139      	bne.n	8010924 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d101      	bne.n	80108be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80108ba:	2302      	movs	r3, #2
 80108bc:	e033      	b.n	8010926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2201      	movs	r2, #1
 80108c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2224      	movs	r2, #36	; 0x24
 80108ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f022 0201 	bic.w	r2, r2, #1
 80108dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80108ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	021b      	lsls	r3, r3, #8
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	4313      	orrs	r3, r2
 80108f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f042 0201 	orr.w	r2, r2, #1
 801090e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2220      	movs	r2, #32
 8010914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010920:	2300      	movs	r3, #0
 8010922:	e000      	b.n	8010926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010924:	2302      	movs	r3, #2
  }
}
 8010926:	4618      	mov	r0, r3
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr
	...

08010934 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010934:	b480      	push	{r7}
 8010936:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8010938:	4b0d      	ldr	r3, [pc, #52]	; (8010970 <HAL_PWREx_GetVoltageRange+0x3c>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010944:	d102      	bne.n	801094c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8010946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801094a:	e00b      	b.n	8010964 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 801094c:	4b08      	ldr	r3, [pc, #32]	; (8010970 <HAL_PWREx_GetVoltageRange+0x3c>)
 801094e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801095a:	d102      	bne.n	8010962 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 801095c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010960:	e000      	b.n	8010964 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8010962:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8010964:	4618      	mov	r0, r3
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	40007000 	.word	0x40007000

08010974 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d141      	bne.n	8010a06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8010982:	4b4b      	ldr	r3, [pc, #300]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801098a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801098e:	d131      	bne.n	80109f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8010990:	4b47      	ldr	r3, [pc, #284]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010996:	4a46      	ldr	r2, [pc, #280]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801099c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80109a0:	4b43      	ldr	r3, [pc, #268]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80109a8:	4a41      	ldr	r2, [pc, #260]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80109ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80109b0:	4b40      	ldr	r3, [pc, #256]	; (8010ab4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2232      	movs	r2, #50	; 0x32
 80109b6:	fb02 f303 	mul.w	r3, r2, r3
 80109ba:	4a3f      	ldr	r2, [pc, #252]	; (8010ab8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80109bc:	fba2 2303 	umull	r2, r3, r2, r3
 80109c0:	0c9b      	lsrs	r3, r3, #18
 80109c2:	3301      	adds	r3, #1
 80109c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80109c6:	e002      	b.n	80109ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	3b01      	subs	r3, #1
 80109cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80109ce:	4b38      	ldr	r3, [pc, #224]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109d0:	695b      	ldr	r3, [r3, #20]
 80109d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109da:	d102      	bne.n	80109e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d1f2      	bne.n	80109c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80109e2:	4b33      	ldr	r3, [pc, #204]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109e4:	695b      	ldr	r3, [r3, #20]
 80109e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109ee:	d158      	bne.n	8010aa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80109f0:	2303      	movs	r3, #3
 80109f2:	e057      	b.n	8010aa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80109f4:	4b2e      	ldr	r3, [pc, #184]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109fa:	4a2d      	ldr	r2, [pc, #180]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80109fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8010a04:	e04d      	b.n	8010aa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a0c:	d141      	bne.n	8010a92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8010a0e:	4b28      	ldr	r3, [pc, #160]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a1a:	d131      	bne.n	8010a80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8010a1c:	4b24      	ldr	r3, [pc, #144]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a22:	4a23      	ldr	r2, [pc, #140]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8010a2c:	4b20      	ldr	r3, [pc, #128]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010a34:	4a1e      	ldr	r2, [pc, #120]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010a3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8010a3c:	4b1d      	ldr	r3, [pc, #116]	; (8010ab4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	2232      	movs	r2, #50	; 0x32
 8010a42:	fb02 f303 	mul.w	r3, r2, r3
 8010a46:	4a1c      	ldr	r2, [pc, #112]	; (8010ab8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8010a48:	fba2 2303 	umull	r2, r3, r2, r3
 8010a4c:	0c9b      	lsrs	r3, r3, #18
 8010a4e:	3301      	adds	r3, #1
 8010a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010a52:	e002      	b.n	8010a5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	3b01      	subs	r3, #1
 8010a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8010a5a:	4b15      	ldr	r3, [pc, #84]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a5c:	695b      	ldr	r3, [r3, #20]
 8010a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a66:	d102      	bne.n	8010a6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d1f2      	bne.n	8010a54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010a6e:	4b10      	ldr	r3, [pc, #64]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a70:	695b      	ldr	r3, [r3, #20]
 8010a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a7a:	d112      	bne.n	8010aa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	e011      	b.n	8010aa4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8010a80:	4b0b      	ldr	r3, [pc, #44]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a86:	4a0a      	ldr	r2, [pc, #40]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8010a90:	e007      	b.n	8010aa2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010a92:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010a9a:	4a05      	ldr	r2, [pc, #20]	; (8010ab0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8010a9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010aa0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8010aa2:	2300      	movs	r3, #0
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3714      	adds	r7, #20
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	40007000 	.word	0x40007000
 8010ab4:	200000b4 	.word	0x200000b4
 8010ab8:	431bde83 	.word	0x431bde83

08010abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b08a      	sub	sp, #40	; 0x28
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d102      	bne.n	8010ad0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010aca:	2301      	movs	r3, #1
 8010acc:	f000 bc76 	b.w	80113bc <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010ad0:	4ba1      	ldr	r3, [pc, #644]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010ad2:	689b      	ldr	r3, [r3, #8]
 8010ad4:	f003 030c 	and.w	r3, r3, #12
 8010ad8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010ada:	4b9f      	ldr	r3, [pc, #636]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	f003 0303 	and.w	r3, r3, #3
 8010ae2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	f003 0310 	and.w	r3, r3, #16
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f000 80e6 	beq.w	8010cbe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010af2:	6a3b      	ldr	r3, [r7, #32]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d007      	beq.n	8010b08 <HAL_RCC_OscConfig+0x4c>
 8010af8:	6a3b      	ldr	r3, [r7, #32]
 8010afa:	2b0c      	cmp	r3, #12
 8010afc:	f040 808d 	bne.w	8010c1a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	f040 8089 	bne.w	8010c1a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010b08:	4b93      	ldr	r3, [pc, #588]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f003 0302 	and.w	r3, r3, #2
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d006      	beq.n	8010b22 <HAL_RCC_OscConfig+0x66>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	69db      	ldr	r3, [r3, #28]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d102      	bne.n	8010b22 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	f000 bc4d 	b.w	80113bc <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b26:	4b8c      	ldr	r3, [pc, #560]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f003 0308 	and.w	r3, r3, #8
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d004      	beq.n	8010b3c <HAL_RCC_OscConfig+0x80>
 8010b32:	4b89      	ldr	r3, [pc, #548]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b3a:	e005      	b.n	8010b48 <HAL_RCC_OscConfig+0x8c>
 8010b3c:	4b86      	ldr	r3, [pc, #536]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010b42:	091b      	lsrs	r3, r3, #4
 8010b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d224      	bcs.n	8010b96 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b50:	4618      	mov	r0, r3
 8010b52:	f000 fdff 	bl	8011754 <RCC_SetFlashLatencyFromMSIRange>
 8010b56:	4603      	mov	r3, r0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	f000 bc2d 	b.w	80113bc <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010b62:	4b7d      	ldr	r3, [pc, #500]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a7c      	ldr	r2, [pc, #496]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b68:	f043 0308 	orr.w	r3, r3, #8
 8010b6c:	6013      	str	r3, [r2, #0]
 8010b6e:	4b7a      	ldr	r3, [pc, #488]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7a:	4977      	ldr	r1, [pc, #476]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010b80:	4b75      	ldr	r3, [pc, #468]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6a1b      	ldr	r3, [r3, #32]
 8010b8c:	021b      	lsls	r3, r3, #8
 8010b8e:	4972      	ldr	r1, [pc, #456]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b90:	4313      	orrs	r3, r2
 8010b92:	604b      	str	r3, [r1, #4]
 8010b94:	e025      	b.n	8010be2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010b96:	4b70      	ldr	r3, [pc, #448]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a6f      	ldr	r2, [pc, #444]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010b9c:	f043 0308 	orr.w	r3, r3, #8
 8010ba0:	6013      	str	r3, [r2, #0]
 8010ba2:	4b6d      	ldr	r3, [pc, #436]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bae:	496a      	ldr	r1, [pc, #424]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010bb4:	4b68      	ldr	r3, [pc, #416]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6a1b      	ldr	r3, [r3, #32]
 8010bc0:	021b      	lsls	r3, r3, #8
 8010bc2:	4965      	ldr	r1, [pc, #404]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d109      	bne.n	8010be2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f000 fdbe 	bl	8011754 <RCC_SetFlashLatencyFromMSIRange>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d001      	beq.n	8010be2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8010bde:	2301      	movs	r3, #1
 8010be0:	e3ec      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010be2:	f000 fd1f 	bl	8011624 <HAL_RCC_GetSysClockFreq>
 8010be6:	4602      	mov	r2, r0
 8010be8:	4b5b      	ldr	r3, [pc, #364]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	091b      	lsrs	r3, r3, #4
 8010bee:	f003 030f 	and.w	r3, r3, #15
 8010bf2:	495a      	ldr	r1, [pc, #360]	; (8010d5c <HAL_RCC_OscConfig+0x2a0>)
 8010bf4:	5ccb      	ldrb	r3, [r1, r3]
 8010bf6:	f003 031f 	and.w	r3, r3, #31
 8010bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8010bfe:	4a58      	ldr	r2, [pc, #352]	; (8010d60 <HAL_RCC_OscConfig+0x2a4>)
 8010c00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8010c02:	4b58      	ldr	r3, [pc, #352]	; (8010d64 <HAL_RCC_OscConfig+0x2a8>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fb ffc8 	bl	800cb9c <HAL_InitTick>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8010c10:	7dfb      	ldrb	r3, [r7, #23]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d052      	beq.n	8010cbc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8010c16:	7dfb      	ldrb	r3, [r7, #23]
 8010c18:	e3d0      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	69db      	ldr	r3, [r3, #28]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d032      	beq.n	8010c88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010c22:	4b4d      	ldr	r3, [pc, #308]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	4a4c      	ldr	r2, [pc, #304]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c28:	f043 0301 	orr.w	r3, r3, #1
 8010c2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010c2e:	f7fc f805 	bl	800cc3c <HAL_GetTick>
 8010c32:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010c34:	e008      	b.n	8010c48 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010c36:	f7fc f801 	bl	800cc3c <HAL_GetTick>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	2b02      	cmp	r3, #2
 8010c42:	d901      	bls.n	8010c48 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8010c44:	2303      	movs	r3, #3
 8010c46:	e3b9      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010c48:	4b43      	ldr	r3, [pc, #268]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	f003 0302 	and.w	r3, r3, #2
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d0f0      	beq.n	8010c36 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010c54:	4b40      	ldr	r3, [pc, #256]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4a3f      	ldr	r2, [pc, #252]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c5a:	f043 0308 	orr.w	r3, r3, #8
 8010c5e:	6013      	str	r3, [r2, #0]
 8010c60:	4b3d      	ldr	r3, [pc, #244]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6c:	493a      	ldr	r1, [pc, #232]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010c72:	4b39      	ldr	r3, [pc, #228]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6a1b      	ldr	r3, [r3, #32]
 8010c7e:	021b      	lsls	r3, r3, #8
 8010c80:	4935      	ldr	r1, [pc, #212]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c82:	4313      	orrs	r3, r2
 8010c84:	604b      	str	r3, [r1, #4]
 8010c86:	e01a      	b.n	8010cbe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8010c88:	4b33      	ldr	r3, [pc, #204]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a32      	ldr	r2, [pc, #200]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010c8e:	f023 0301 	bic.w	r3, r3, #1
 8010c92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010c94:	f7fb ffd2 	bl	800cc3c <HAL_GetTick>
 8010c98:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010c9a:	e008      	b.n	8010cae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010c9c:	f7fb ffce 	bl	800cc3c <HAL_GetTick>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	69bb      	ldr	r3, [r7, #24]
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	2b02      	cmp	r3, #2
 8010ca8:	d901      	bls.n	8010cae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8010caa:	2303      	movs	r3, #3
 8010cac:	e386      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010cae:	4b2a      	ldr	r3, [pc, #168]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f003 0302 	and.w	r3, r3, #2
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1f0      	bne.n	8010c9c <HAL_RCC_OscConfig+0x1e0>
 8010cba:	e000      	b.n	8010cbe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8010cbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f003 0301 	and.w	r3, r3, #1
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d073      	beq.n	8010db2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8010cca:	6a3b      	ldr	r3, [r7, #32]
 8010ccc:	2b08      	cmp	r3, #8
 8010cce:	d005      	beq.n	8010cdc <HAL_RCC_OscConfig+0x220>
 8010cd0:	6a3b      	ldr	r3, [r7, #32]
 8010cd2:	2b0c      	cmp	r3, #12
 8010cd4:	d10e      	bne.n	8010cf4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8010cd6:	69fb      	ldr	r3, [r7, #28]
 8010cd8:	2b03      	cmp	r3, #3
 8010cda:	d10b      	bne.n	8010cf4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010cdc:	4b1e      	ldr	r3, [pc, #120]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d063      	beq.n	8010db0 <HAL_RCC_OscConfig+0x2f4>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d15f      	bne.n	8010db0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e363      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cfc:	d106      	bne.n	8010d0c <HAL_RCC_OscConfig+0x250>
 8010cfe:	4b16      	ldr	r3, [pc, #88]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a15      	ldr	r2, [pc, #84]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d08:	6013      	str	r3, [r2, #0]
 8010d0a:	e01d      	b.n	8010d48 <HAL_RCC_OscConfig+0x28c>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010d14:	d10c      	bne.n	8010d30 <HAL_RCC_OscConfig+0x274>
 8010d16:	4b10      	ldr	r3, [pc, #64]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4a0f      	ldr	r2, [pc, #60]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010d20:	6013      	str	r3, [r2, #0]
 8010d22:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a0c      	ldr	r2, [pc, #48]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d2c:	6013      	str	r3, [r2, #0]
 8010d2e:	e00b      	b.n	8010d48 <HAL_RCC_OscConfig+0x28c>
 8010d30:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a08      	ldr	r2, [pc, #32]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010d3a:	6013      	str	r3, [r2, #0]
 8010d3c:	4b06      	ldr	r3, [pc, #24]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a05      	ldr	r2, [pc, #20]	; (8010d58 <HAL_RCC_OscConfig+0x29c>)
 8010d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d01b      	beq.n	8010d88 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d50:	f7fb ff74 	bl	800cc3c <HAL_GetTick>
 8010d54:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010d56:	e010      	b.n	8010d7a <HAL_RCC_OscConfig+0x2be>
 8010d58:	40021000 	.word	0x40021000
 8010d5c:	08023f80 	.word	0x08023f80
 8010d60:	200000b4 	.word	0x200000b4
 8010d64:	200000bc 	.word	0x200000bc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d68:	f7fb ff68 	bl	800cc3c <HAL_GetTick>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	69bb      	ldr	r3, [r7, #24]
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	2b64      	cmp	r3, #100	; 0x64
 8010d74:	d901      	bls.n	8010d7a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8010d76:	2303      	movs	r3, #3
 8010d78:	e320      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010d7a:	4ba0      	ldr	r3, [pc, #640]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d0f0      	beq.n	8010d68 <HAL_RCC_OscConfig+0x2ac>
 8010d86:	e014      	b.n	8010db2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010d88:	f7fb ff58 	bl	800cc3c <HAL_GetTick>
 8010d8c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010d8e:	e008      	b.n	8010da2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010d90:	f7fb ff54 	bl	800cc3c <HAL_GetTick>
 8010d94:	4602      	mov	r2, r0
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	2b64      	cmp	r3, #100	; 0x64
 8010d9c:	d901      	bls.n	8010da2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8010d9e:	2303      	movs	r3, #3
 8010da0:	e30c      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010da2:	4b96      	ldr	r3, [pc, #600]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1f0      	bne.n	8010d90 <HAL_RCC_OscConfig+0x2d4>
 8010dae:	e000      	b.n	8010db2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f003 0302 	and.w	r3, r3, #2
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d060      	beq.n	8010e80 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8010dbe:	6a3b      	ldr	r3, [r7, #32]
 8010dc0:	2b04      	cmp	r3, #4
 8010dc2:	d005      	beq.n	8010dd0 <HAL_RCC_OscConfig+0x314>
 8010dc4:	6a3b      	ldr	r3, [r7, #32]
 8010dc6:	2b0c      	cmp	r3, #12
 8010dc8:	d119      	bne.n	8010dfe <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d116      	bne.n	8010dfe <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010dd0:	4b8a      	ldr	r3, [pc, #552]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d005      	beq.n	8010de8 <HAL_RCC_OscConfig+0x32c>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d101      	bne.n	8010de8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8010de4:	2301      	movs	r3, #1
 8010de6:	e2e9      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010de8:	4b84      	ldr	r3, [pc, #528]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	061b      	lsls	r3, r3, #24
 8010df6:	4981      	ldr	r1, [pc, #516]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010dfc:	e040      	b.n	8010e80 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d023      	beq.n	8010e4e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010e06:	4b7d      	ldr	r3, [pc, #500]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	4a7c      	ldr	r2, [pc, #496]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e12:	f7fb ff13 	bl	800cc3c <HAL_GetTick>
 8010e16:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010e18:	e008      	b.n	8010e2c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e1a:	f7fb ff0f 	bl	800cc3c <HAL_GetTick>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	1ad3      	subs	r3, r2, r3
 8010e24:	2b02      	cmp	r3, #2
 8010e26:	d901      	bls.n	8010e2c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8010e28:	2303      	movs	r3, #3
 8010e2a:	e2c7      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010e2c:	4b73      	ldr	r3, [pc, #460]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d0f0      	beq.n	8010e1a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010e38:	4b70      	ldr	r3, [pc, #448]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	061b      	lsls	r3, r3, #24
 8010e46:	496d      	ldr	r1, [pc, #436]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	604b      	str	r3, [r1, #4]
 8010e4c:	e018      	b.n	8010e80 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010e4e:	4b6b      	ldr	r3, [pc, #428]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	4a6a      	ldr	r2, [pc, #424]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e5a:	f7fb feef 	bl	800cc3c <HAL_GetTick>
 8010e5e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010e60:	e008      	b.n	8010e74 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010e62:	f7fb feeb 	bl	800cc3c <HAL_GetTick>
 8010e66:	4602      	mov	r2, r0
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	1ad3      	subs	r3, r2, r3
 8010e6c:	2b02      	cmp	r3, #2
 8010e6e:	d901      	bls.n	8010e74 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8010e70:	2303      	movs	r3, #3
 8010e72:	e2a3      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010e74:	4b61      	ldr	r3, [pc, #388]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f0      	bne.n	8010e62 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f003 0308 	and.w	r3, r3, #8
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d07f      	beq.n	8010f8c <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	695b      	ldr	r3, [r3, #20]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d05f      	beq.n	8010f54 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8010e94:	4b59      	ldr	r3, [pc, #356]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010e9a:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	699a      	ldr	r2, [r3, #24]
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	f003 0310 	and.w	r3, r3, #16
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d037      	beq.n	8010f1a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	f003 0302 	and.w	r3, r3, #2
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d006      	beq.n	8010ec2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d101      	bne.n	8010ec2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e27c      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	f003 0301 	and.w	r3, r3, #1
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d01b      	beq.n	8010f04 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8010ecc:	4b4b      	ldr	r3, [pc, #300]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ed2:	4a4a      	ldr	r2, [pc, #296]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010ed4:	f023 0301 	bic.w	r3, r3, #1
 8010ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010edc:	f7fb feae 	bl	800cc3c <HAL_GetTick>
 8010ee0:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010ee2:	e008      	b.n	8010ef6 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010ee4:	f7fb feaa 	bl	800cc3c <HAL_GetTick>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	2b11      	cmp	r3, #17
 8010ef0:	d901      	bls.n	8010ef6 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8010ef2:	2303      	movs	r3, #3
 8010ef4:	e262      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010ef6:	4b41      	ldr	r3, [pc, #260]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010efc:	f003 0302 	and.w	r3, r3, #2
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d1ef      	bne.n	8010ee4 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8010f04:	4b3d      	ldr	r3, [pc, #244]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f0a:	f023 0210 	bic.w	r2, r3, #16
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	699b      	ldr	r3, [r3, #24]
 8010f12:	493a      	ldr	r1, [pc, #232]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f14:	4313      	orrs	r3, r2
 8010f16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010f1a:	4b38      	ldr	r3, [pc, #224]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f20:	4a36      	ldr	r2, [pc, #216]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f22:	f043 0301 	orr.w	r3, r3, #1
 8010f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f2a:	f7fb fe87 	bl	800cc3c <HAL_GetTick>
 8010f2e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010f30:	e008      	b.n	8010f44 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f32:	f7fb fe83 	bl	800cc3c <HAL_GetTick>
 8010f36:	4602      	mov	r2, r0
 8010f38:	69bb      	ldr	r3, [r7, #24]
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	2b11      	cmp	r3, #17
 8010f3e:	d901      	bls.n	8010f44 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8010f40:	2303      	movs	r3, #3
 8010f42:	e23b      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010f44:	4b2d      	ldr	r3, [pc, #180]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f4a:	f003 0302 	and.w	r3, r3, #2
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d0ef      	beq.n	8010f32 <HAL_RCC_OscConfig+0x476>
 8010f52:	e01b      	b.n	8010f8c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010f54:	4b29      	ldr	r3, [pc, #164]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f5a:	4a28      	ldr	r2, [pc, #160]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f5c:	f023 0301 	bic.w	r3, r3, #1
 8010f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010f64:	f7fb fe6a 	bl	800cc3c <HAL_GetTick>
 8010f68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010f6a:	e008      	b.n	8010f7e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010f6c:	f7fb fe66 	bl	800cc3c <HAL_GetTick>
 8010f70:	4602      	mov	r2, r0
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	2b11      	cmp	r3, #17
 8010f78:	d901      	bls.n	8010f7e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	e21e      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010f7e:	4b1f      	ldr	r3, [pc, #124]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f84:	f003 0302 	and.w	r3, r3, #2
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d1ef      	bne.n	8010f6c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f003 0304 	and.w	r3, r3, #4
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f000 80c1 	beq.w	801111c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8010fa0:	4b16      	ldr	r3, [pc, #88]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10e      	bne.n	8010fca <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010fac:	4b13      	ldr	r3, [pc, #76]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fb0:	4a12      	ldr	r2, [pc, #72]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8010fb8:	4b10      	ldr	r3, [pc, #64]	; (8010ffc <HAL_RCC_OscConfig+0x540>)
 8010fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010fc0:	60fb      	str	r3, [r7, #12]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010fca:	4b0d      	ldr	r3, [pc, #52]	; (8011000 <HAL_RCC_OscConfig+0x544>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d11c      	bne.n	8011010 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010fd6:	4b0a      	ldr	r3, [pc, #40]	; (8011000 <HAL_RCC_OscConfig+0x544>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	4a09      	ldr	r2, [pc, #36]	; (8011000 <HAL_RCC_OscConfig+0x544>)
 8010fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010fe2:	f7fb fe2b 	bl	800cc3c <HAL_GetTick>
 8010fe6:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010fe8:	e00c      	b.n	8011004 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010fea:	f7fb fe27 	bl	800cc3c <HAL_GetTick>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	1ad3      	subs	r3, r2, r3
 8010ff4:	2b02      	cmp	r3, #2
 8010ff6:	d905      	bls.n	8011004 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8010ff8:	2303      	movs	r3, #3
 8010ffa:	e1df      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
 8010ffc:	40021000 	.word	0x40021000
 8011000:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011004:	4b99      	ldr	r3, [pc, #612]	; (801126c <HAL_RCC_OscConfig+0x7b0>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801100c:	2b00      	cmp	r3, #0
 801100e:	d0ec      	beq.n	8010fea <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	689b      	ldr	r3, [r3, #8]
 8011014:	f003 0301 	and.w	r3, r3, #1
 8011018:	2b00      	cmp	r3, #0
 801101a:	d02c      	beq.n	8011076 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 801101c:	4b94      	ldr	r3, [pc, #592]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801101e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801102e:	4990      	ldr	r1, [pc, #576]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011030:	4313      	orrs	r3, r2
 8011032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	f003 0304 	and.w	r3, r3, #4
 801103e:	2b00      	cmp	r3, #0
 8011040:	d010      	beq.n	8011064 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8011042:	4b8b      	ldr	r3, [pc, #556]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011048:	4a89      	ldr	r2, [pc, #548]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801104a:	f043 0304 	orr.w	r3, r3, #4
 801104e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011052:	4b87      	ldr	r3, [pc, #540]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011058:	4a85      	ldr	r2, [pc, #532]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801105a:	f043 0301 	orr.w	r3, r3, #1
 801105e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011062:	e018      	b.n	8011096 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011064:	4b82      	ldr	r3, [pc, #520]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801106a:	4a81      	ldr	r2, [pc, #516]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801106c:	f043 0301 	orr.w	r3, r3, #1
 8011070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8011074:	e00f      	b.n	8011096 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8011076:	4b7e      	ldr	r3, [pc, #504]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801107c:	4a7c      	ldr	r2, [pc, #496]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801107e:	f023 0301 	bic.w	r3, r3, #1
 8011082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8011086:	4b7a      	ldr	r3, [pc, #488]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801108c:	4a78      	ldr	r2, [pc, #480]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801108e:	f023 0304 	bic.w	r3, r3, #4
 8011092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d016      	beq.n	80110cc <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801109e:	f7fb fdcd 	bl	800cc3c <HAL_GetTick>
 80110a2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110a4:	e00a      	b.n	80110bc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110a6:	f7fb fdc9 	bl	800cc3c <HAL_GetTick>
 80110aa:	4602      	mov	r2, r0
 80110ac:	69bb      	ldr	r3, [r7, #24]
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d901      	bls.n	80110bc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80110b8:	2303      	movs	r3, #3
 80110ba:	e17f      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80110bc:	4b6c      	ldr	r3, [pc, #432]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 80110be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110c2:	f003 0302 	and.w	r3, r3, #2
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d0ed      	beq.n	80110a6 <HAL_RCC_OscConfig+0x5ea>
 80110ca:	e01d      	b.n	8011108 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110cc:	f7fb fdb6 	bl	800cc3c <HAL_GetTick>
 80110d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80110d2:	e00a      	b.n	80110ea <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80110d4:	f7fb fdb2 	bl	800cc3c <HAL_GetTick>
 80110d8:	4602      	mov	r2, r0
 80110da:	69bb      	ldr	r3, [r7, #24]
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	f241 3288 	movw	r2, #5000	; 0x1388
 80110e2:	4293      	cmp	r3, r2
 80110e4:	d901      	bls.n	80110ea <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80110e6:	2303      	movs	r3, #3
 80110e8:	e168      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80110ea:	4b61      	ldr	r3, [pc, #388]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 80110ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110f0:	f003 0302 	and.w	r3, r3, #2
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1ed      	bne.n	80110d4 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80110f8:	4b5d      	ldr	r3, [pc, #372]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 80110fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110fe:	4a5c      	ldr	r2, [pc, #368]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801110c:	2b01      	cmp	r3, #1
 801110e:	d105      	bne.n	801111c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011110:	4b57      	ldr	r3, [pc, #348]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011114:	4a56      	ldr	r2, [pc, #344]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801111a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f003 0320 	and.w	r3, r3, #32
 8011124:	2b00      	cmp	r3, #0
 8011126:	d03c      	beq.n	80111a2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801112c:	2b00      	cmp	r3, #0
 801112e:	d01c      	beq.n	801116a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011130:	4b4f      	ldr	r3, [pc, #316]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011136:	4a4e      	ldr	r2, [pc, #312]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011138:	f043 0301 	orr.w	r3, r3, #1
 801113c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011140:	f7fb fd7c 	bl	800cc3c <HAL_GetTick>
 8011144:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8011146:	e008      	b.n	801115a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011148:	f7fb fd78 	bl	800cc3c <HAL_GetTick>
 801114c:	4602      	mov	r2, r0
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	2b02      	cmp	r3, #2
 8011154:	d901      	bls.n	801115a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8011156:	2303      	movs	r3, #3
 8011158:	e130      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801115a:	4b45      	ldr	r3, [pc, #276]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801115c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011160:	f003 0302 	and.w	r3, r3, #2
 8011164:	2b00      	cmp	r3, #0
 8011166:	d0ef      	beq.n	8011148 <HAL_RCC_OscConfig+0x68c>
 8011168:	e01b      	b.n	80111a2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801116a:	4b41      	ldr	r3, [pc, #260]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801116c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011170:	4a3f      	ldr	r2, [pc, #252]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011172:	f023 0301 	bic.w	r3, r3, #1
 8011176:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801117a:	f7fb fd5f 	bl	800cc3c <HAL_GetTick>
 801117e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8011180:	e008      	b.n	8011194 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011182:	f7fb fd5b 	bl	800cc3c <HAL_GetTick>
 8011186:	4602      	mov	r2, r0
 8011188:	69bb      	ldr	r3, [r7, #24]
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	2b02      	cmp	r3, #2
 801118e:	d901      	bls.n	8011194 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8011190:	2303      	movs	r3, #3
 8011192:	e113      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8011194:	4b36      	ldr	r3, [pc, #216]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d1ef      	bne.n	8011182 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f000 8107 	beq.w	80113ba <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b0:	2b02      	cmp	r3, #2
 80111b2:	f040 80cf 	bne.w	8011354 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80111b6:	4b2e      	ldr	r3, [pc, #184]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80111bc:	69fb      	ldr	r3, [r7, #28]
 80111be:	f003 0203 	and.w	r2, r3, #3
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d12c      	bne.n	8011224 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111d4:	3b01      	subs	r3, #1
 80111d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80111d8:	429a      	cmp	r2, r3
 80111da:	d123      	bne.n	8011224 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d11b      	bne.n	8011224 <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d113      	bne.n	8011224 <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011206:	085b      	lsrs	r3, r3, #1
 8011208:	3b01      	subs	r3, #1
 801120a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801120c:	429a      	cmp	r2, r3
 801120e:	d109      	bne.n	8011224 <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801121a:	085b      	lsrs	r3, r3, #1
 801121c:	3b01      	subs	r3, #1
 801121e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011220:	429a      	cmp	r2, r3
 8011222:	d071      	beq.n	8011308 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	2b0c      	cmp	r3, #12
 8011228:	d06c      	beq.n	8011304 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801122a:	4b11      	ldr	r3, [pc, #68]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011232:	2b00      	cmp	r3, #0
 8011234:	d105      	bne.n	8011242 <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8011236:	4b0e      	ldr	r3, [pc, #56]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8011242:	2301      	movs	r3, #1
 8011244:	e0ba      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8011246:	4b0a      	ldr	r3, [pc, #40]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	4a09      	ldr	r2, [pc, #36]	; (8011270 <HAL_RCC_OscConfig+0x7b4>)
 801124c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011250:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8011252:	f7fb fcf3 	bl	800cc3c <HAL_GetTick>
 8011256:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011258:	e00c      	b.n	8011274 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801125a:	f7fb fcef 	bl	800cc3c <HAL_GetTick>
 801125e:	4602      	mov	r2, r0
 8011260:	69bb      	ldr	r3, [r7, #24]
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	2b02      	cmp	r3, #2
 8011266:	d905      	bls.n	8011274 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8011268:	2303      	movs	r3, #3
 801126a:	e0a7      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
 801126c:	40007000 	.word	0x40007000
 8011270:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011274:	4b53      	ldr	r3, [pc, #332]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d1ec      	bne.n	801125a <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011280:	4b50      	ldr	r3, [pc, #320]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011282:	68da      	ldr	r2, [r3, #12]
 8011284:	4b50      	ldr	r3, [pc, #320]	; (80113c8 <HAL_RCC_OscConfig+0x90c>)
 8011286:	4013      	ands	r3, r2
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011290:	3a01      	subs	r2, #1
 8011292:	0112      	lsls	r2, r2, #4
 8011294:	4311      	orrs	r1, r2
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801129a:	0212      	lsls	r2, r2, #8
 801129c:	4311      	orrs	r1, r2
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80112a2:	0852      	lsrs	r2, r2, #1
 80112a4:	3a01      	subs	r2, #1
 80112a6:	0552      	lsls	r2, r2, #21
 80112a8:	4311      	orrs	r1, r2
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80112ae:	0852      	lsrs	r2, r2, #1
 80112b0:	3a01      	subs	r2, #1
 80112b2:	0652      	lsls	r2, r2, #25
 80112b4:	4311      	orrs	r1, r2
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80112ba:	06d2      	lsls	r2, r2, #27
 80112bc:	430a      	orrs	r2, r1
 80112be:	4941      	ldr	r1, [pc, #260]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 80112c0:	4313      	orrs	r3, r2
 80112c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80112c4:	4b3f      	ldr	r3, [pc, #252]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4a3e      	ldr	r2, [pc, #248]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 80112ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80112d0:	4b3c      	ldr	r3, [pc, #240]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	4a3b      	ldr	r2, [pc, #236]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 80112d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80112da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80112dc:	f7fb fcae 	bl	800cc3c <HAL_GetTick>
 80112e0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80112e2:	e008      	b.n	80112f6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112e4:	f7fb fcaa 	bl	800cc3c <HAL_GetTick>
 80112e8:	4602      	mov	r2, r0
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	d901      	bls.n	80112f6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 80112f2:	2303      	movs	r3, #3
 80112f4:	e062      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80112f6:	4b33      	ldr	r3, [pc, #204]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d0f0      	beq.n	80112e4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011302:	e05a      	b.n	80113ba <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8011304:	2301      	movs	r3, #1
 8011306:	e059      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011308:	4b2e      	ldr	r3, [pc, #184]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011310:	2b00      	cmp	r3, #0
 8011312:	d152      	bne.n	80113ba <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8011314:	4b2b      	ldr	r3, [pc, #172]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4a2a      	ldr	r2, [pc, #168]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 801131a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801131e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8011320:	4b28      	ldr	r3, [pc, #160]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	4a27      	ldr	r2, [pc, #156]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801132a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801132c:	f7fb fc86 	bl	800cc3c <HAL_GetTick>
 8011330:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011332:	e008      	b.n	8011346 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011334:	f7fb fc82 	bl	800cc3c <HAL_GetTick>
 8011338:	4602      	mov	r2, r0
 801133a:	69bb      	ldr	r3, [r7, #24]
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	2b02      	cmp	r3, #2
 8011340:	d901      	bls.n	8011346 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8011342:	2303      	movs	r3, #3
 8011344:	e03a      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011346:	4b1f      	ldr	r3, [pc, #124]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801134e:	2b00      	cmp	r3, #0
 8011350:	d0f0      	beq.n	8011334 <HAL_RCC_OscConfig+0x878>
 8011352:	e032      	b.n	80113ba <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8011354:	6a3b      	ldr	r3, [r7, #32]
 8011356:	2b0c      	cmp	r3, #12
 8011358:	d02d      	beq.n	80113b6 <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801135a:	4b1a      	ldr	r3, [pc, #104]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	4a19      	ldr	r2, [pc, #100]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011364:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8011366:	4b17      	ldr	r3, [pc, #92]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 801136e:	2b00      	cmp	r3, #0
 8011370:	d105      	bne.n	801137e <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8011372:	4b14      	ldr	r3, [pc, #80]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	4a13      	ldr	r2, [pc, #76]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011378:	f023 0303 	bic.w	r3, r3, #3
 801137c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801137e:	4b11      	ldr	r3, [pc, #68]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	4a10      	ldr	r2, [pc, #64]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 8011384:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8011388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801138c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801138e:	f7fb fc55 	bl	800cc3c <HAL_GetTick>
 8011392:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011394:	e008      	b.n	80113a8 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011396:	f7fb fc51 	bl	800cc3c <HAL_GetTick>
 801139a:	4602      	mov	r2, r0
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d901      	bls.n	80113a8 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 80113a4:	2303      	movs	r3, #3
 80113a6:	e009      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80113a8:	4b06      	ldr	r3, [pc, #24]	; (80113c4 <HAL_RCC_OscConfig+0x908>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1f0      	bne.n	8011396 <HAL_RCC_OscConfig+0x8da>
 80113b4:	e001      	b.n	80113ba <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80113b6:	2301      	movs	r3, #1
 80113b8:	e000      	b.n	80113bc <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 80113ba:	2300      	movs	r3, #0
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3728      	adds	r7, #40	; 0x28
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	40021000 	.word	0x40021000
 80113c8:	019d800c 	.word	0x019d800c

080113cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80113d6:	2300      	movs	r3, #0
 80113d8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d101      	bne.n	80113e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80113e0:	2301      	movs	r3, #1
 80113e2:	e10f      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80113e4:	4b89      	ldr	r3, [pc, #548]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f003 030f 	and.w	r3, r3, #15
 80113ec:	683a      	ldr	r2, [r7, #0]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d910      	bls.n	8011414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80113f2:	4b86      	ldr	r3, [pc, #536]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	f023 020f 	bic.w	r2, r3, #15
 80113fa:	4984      	ldr	r1, [pc, #528]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	4313      	orrs	r3, r2
 8011400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011402:	4b82      	ldr	r3, [pc, #520]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f003 030f 	and.w	r3, r3, #15
 801140a:	683a      	ldr	r2, [r7, #0]
 801140c:	429a      	cmp	r2, r3
 801140e:	d001      	beq.n	8011414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8011410:	2301      	movs	r3, #1
 8011412:	e0f7      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f003 0301 	and.w	r3, r3, #1
 801141c:	2b00      	cmp	r3, #0
 801141e:	f000 8089 	beq.w	8011534 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	2b03      	cmp	r3, #3
 8011428:	d133      	bne.n	8011492 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801142a:	4b79      	ldr	r3, [pc, #484]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011432:	2b00      	cmp	r3, #0
 8011434:	d101      	bne.n	801143a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8011436:	2301      	movs	r3, #1
 8011438:	e0e4      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 801143a:	f000 f9e5 	bl	8011808 <RCC_GetSysClockFreqFromPLLSource>
 801143e:	4603      	mov	r3, r0
 8011440:	4a74      	ldr	r2, [pc, #464]	; (8011614 <HAL_RCC_ClockConfig+0x248>)
 8011442:	4293      	cmp	r3, r2
 8011444:	d955      	bls.n	80114f2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8011446:	4b72      	ldr	r3, [pc, #456]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 8011448:	689b      	ldr	r3, [r3, #8]
 801144a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10a      	bne.n	8011468 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8011452:	4b6f      	ldr	r3, [pc, #444]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 8011454:	689b      	ldr	r3, [r3, #8]
 8011456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801145a:	4a6d      	ldr	r2, [pc, #436]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 801145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8011462:	2380      	movs	r3, #128	; 0x80
 8011464:	617b      	str	r3, [r7, #20]
 8011466:	e044      	b.n	80114f2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f003 0302 	and.w	r3, r3, #2
 8011470:	2b00      	cmp	r3, #0
 8011472:	d03e      	beq.n	80114f2 <HAL_RCC_ClockConfig+0x126>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	689b      	ldr	r3, [r3, #8]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d13a      	bne.n	80114f2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801147c:	4b64      	ldr	r3, [pc, #400]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 801147e:	689b      	ldr	r3, [r3, #8]
 8011480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011484:	4a62      	ldr	r2, [pc, #392]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 8011486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801148a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801148c:	2380      	movs	r3, #128	; 0x80
 801148e:	617b      	str	r3, [r7, #20]
 8011490:	e02f      	b.n	80114f2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	2b02      	cmp	r3, #2
 8011498:	d107      	bne.n	80114aa <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801149a:	4b5d      	ldr	r3, [pc, #372]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d115      	bne.n	80114d2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80114a6:	2301      	movs	r3, #1
 80114a8:	e0ac      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d107      	bne.n	80114c2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80114b2:	4b57      	ldr	r3, [pc, #348]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	f003 0302 	and.w	r3, r3, #2
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d109      	bne.n	80114d2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80114be:	2301      	movs	r3, #1
 80114c0:	e0a0      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80114c2:	4b53      	ldr	r3, [pc, #332]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d101      	bne.n	80114d2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80114ce:	2301      	movs	r3, #1
 80114d0:	e098      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80114d2:	f000 f8a7 	bl	8011624 <HAL_RCC_GetSysClockFreq>
 80114d6:	4603      	mov	r3, r0
 80114d8:	4a4e      	ldr	r2, [pc, #312]	; (8011614 <HAL_RCC_ClockConfig+0x248>)
 80114da:	4293      	cmp	r3, r2
 80114dc:	d909      	bls.n	80114f2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80114de:	4b4c      	ldr	r3, [pc, #304]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80114e0:	689b      	ldr	r3, [r3, #8]
 80114e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80114e6:	4a4a      	ldr	r2, [pc, #296]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80114e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80114ee:	2380      	movs	r3, #128	; 0x80
 80114f0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80114f2:	4b47      	ldr	r3, [pc, #284]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80114f4:	689b      	ldr	r3, [r3, #8]
 80114f6:	f023 0203 	bic.w	r2, r3, #3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	4944      	ldr	r1, [pc, #272]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 8011500:	4313      	orrs	r3, r2
 8011502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011504:	f7fb fb9a 	bl	800cc3c <HAL_GetTick>
 8011508:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801150a:	e00a      	b.n	8011522 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801150c:	f7fb fb96 	bl	800cc3c <HAL_GetTick>
 8011510:	4602      	mov	r2, r0
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	f241 3288 	movw	r2, #5000	; 0x1388
 801151a:	4293      	cmp	r3, r2
 801151c:	d901      	bls.n	8011522 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 801151e:	2303      	movs	r3, #3
 8011520:	e070      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011522:	4b3b      	ldr	r3, [pc, #236]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	f003 020c 	and.w	r2, r3, #12
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	009b      	lsls	r3, r3, #2
 8011530:	429a      	cmp	r2, r3
 8011532:	d1eb      	bne.n	801150c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	f003 0302 	and.w	r3, r3, #2
 801153c:	2b00      	cmp	r3, #0
 801153e:	d009      	beq.n	8011554 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011540:	4b33      	ldr	r3, [pc, #204]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 8011542:	689b      	ldr	r3, [r3, #8]
 8011544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	4930      	ldr	r1, [pc, #192]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 801154e:	4313      	orrs	r3, r2
 8011550:	608b      	str	r3, [r1, #8]
 8011552:	e008      	b.n	8011566 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	2b80      	cmp	r3, #128	; 0x80
 8011558:	d105      	bne.n	8011566 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801155a:	4b2d      	ldr	r3, [pc, #180]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 801155c:	689b      	ldr	r3, [r3, #8]
 801155e:	4a2c      	ldr	r2, [pc, #176]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 8011560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011564:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011566:	4b29      	ldr	r3, [pc, #164]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f003 030f 	and.w	r3, r3, #15
 801156e:	683a      	ldr	r2, [r7, #0]
 8011570:	429a      	cmp	r2, r3
 8011572:	d210      	bcs.n	8011596 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011574:	4b25      	ldr	r3, [pc, #148]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f023 020f 	bic.w	r2, r3, #15
 801157c:	4923      	ldr	r1, [pc, #140]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	4313      	orrs	r3, r2
 8011582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011584:	4b21      	ldr	r3, [pc, #132]	; (801160c <HAL_RCC_ClockConfig+0x240>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f003 030f 	and.w	r3, r3, #15
 801158c:	683a      	ldr	r2, [r7, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	d001      	beq.n	8011596 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8011592:	2301      	movs	r3, #1
 8011594:	e036      	b.n	8011604 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f003 0304 	and.w	r3, r3, #4
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d008      	beq.n	80115b4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80115a2:	4b1b      	ldr	r3, [pc, #108]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68db      	ldr	r3, [r3, #12]
 80115ae:	4918      	ldr	r1, [pc, #96]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80115b0:	4313      	orrs	r3, r2
 80115b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f003 0308 	and.w	r3, r3, #8
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d009      	beq.n	80115d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80115c0:	4b13      	ldr	r3, [pc, #76]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80115c2:	689b      	ldr	r3, [r3, #8]
 80115c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	691b      	ldr	r3, [r3, #16]
 80115cc:	00db      	lsls	r3, r3, #3
 80115ce:	4910      	ldr	r1, [pc, #64]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80115d0:	4313      	orrs	r3, r2
 80115d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80115d4:	f000 f826 	bl	8011624 <HAL_RCC_GetSysClockFreq>
 80115d8:	4602      	mov	r2, r0
 80115da:	4b0d      	ldr	r3, [pc, #52]	; (8011610 <HAL_RCC_ClockConfig+0x244>)
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	091b      	lsrs	r3, r3, #4
 80115e0:	f003 030f 	and.w	r3, r3, #15
 80115e4:	490c      	ldr	r1, [pc, #48]	; (8011618 <HAL_RCC_ClockConfig+0x24c>)
 80115e6:	5ccb      	ldrb	r3, [r1, r3]
 80115e8:	f003 031f 	and.w	r3, r3, #31
 80115ec:	fa22 f303 	lsr.w	r3, r2, r3
 80115f0:	4a0a      	ldr	r2, [pc, #40]	; (801161c <HAL_RCC_ClockConfig+0x250>)
 80115f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80115f4:	4b0a      	ldr	r3, [pc, #40]	; (8011620 <HAL_RCC_ClockConfig+0x254>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fb facf 	bl	800cb9c <HAL_InitTick>
 80115fe:	4603      	mov	r3, r0
 8011600:	73fb      	strb	r3, [r7, #15]

  return status;
 8011602:	7bfb      	ldrb	r3, [r7, #15]
}
 8011604:	4618      	mov	r0, r3
 8011606:	3718      	adds	r7, #24
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	40022000 	.word	0x40022000
 8011610:	40021000 	.word	0x40021000
 8011614:	04c4b400 	.word	0x04c4b400
 8011618:	08023f80 	.word	0x08023f80
 801161c:	200000b4 	.word	0x200000b4
 8011620:	200000bc 	.word	0x200000bc

08011624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011624:	b480      	push	{r7}
 8011626:	b089      	sub	sp, #36	; 0x24
 8011628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801162a:	2300      	movs	r3, #0
 801162c:	61fb      	str	r3, [r7, #28]
 801162e:	2300      	movs	r3, #0
 8011630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011632:	4b3e      	ldr	r3, [pc, #248]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 8011634:	689b      	ldr	r3, [r3, #8]
 8011636:	f003 030c 	and.w	r3, r3, #12
 801163a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801163c:	4b3b      	ldr	r3, [pc, #236]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	f003 0303 	and.w	r3, r3, #3
 8011644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d005      	beq.n	8011658 <HAL_RCC_GetSysClockFreq+0x34>
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	2b0c      	cmp	r3, #12
 8011650:	d121      	bne.n	8011696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d11e      	bne.n	8011696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8011658:	4b34      	ldr	r3, [pc, #208]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	f003 0308 	and.w	r3, r3, #8
 8011660:	2b00      	cmp	r3, #0
 8011662:	d107      	bne.n	8011674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011664:	4b31      	ldr	r3, [pc, #196]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 8011666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801166a:	0a1b      	lsrs	r3, r3, #8
 801166c:	f003 030f 	and.w	r3, r3, #15
 8011670:	61fb      	str	r3, [r7, #28]
 8011672:	e005      	b.n	8011680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011674:	4b2d      	ldr	r3, [pc, #180]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	091b      	lsrs	r3, r3, #4
 801167a:	f003 030f 	and.w	r3, r3, #15
 801167e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8011680:	4a2b      	ldr	r2, [pc, #172]	; (8011730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d10d      	bne.n	80116ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011694:	e00a      	b.n	80116ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	2b04      	cmp	r3, #4
 801169a:	d102      	bne.n	80116a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801169c:	4b25      	ldr	r3, [pc, #148]	; (8011734 <HAL_RCC_GetSysClockFreq+0x110>)
 801169e:	61bb      	str	r3, [r7, #24]
 80116a0:	e004      	b.n	80116ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	2b08      	cmp	r3, #8
 80116a6:	d101      	bne.n	80116ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80116a8:	4b23      	ldr	r3, [pc, #140]	; (8011738 <HAL_RCC_GetSysClockFreq+0x114>)
 80116aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	2b0c      	cmp	r3, #12
 80116b0:	d134      	bne.n	801171c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80116b2:	4b1e      	ldr	r3, [pc, #120]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	f003 0303 	and.w	r3, r3, #3
 80116ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	2b02      	cmp	r3, #2
 80116c0:	d003      	beq.n	80116ca <HAL_RCC_GetSysClockFreq+0xa6>
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	2b03      	cmp	r3, #3
 80116c6:	d003      	beq.n	80116d0 <HAL_RCC_GetSysClockFreq+0xac>
 80116c8:	e005      	b.n	80116d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80116ca:	4b1a      	ldr	r3, [pc, #104]	; (8011734 <HAL_RCC_GetSysClockFreq+0x110>)
 80116cc:	617b      	str	r3, [r7, #20]
      break;
 80116ce:	e005      	b.n	80116dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80116d0:	4b19      	ldr	r3, [pc, #100]	; (8011738 <HAL_RCC_GetSysClockFreq+0x114>)
 80116d2:	617b      	str	r3, [r7, #20]
      break;
 80116d4:	e002      	b.n	80116dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	617b      	str	r3, [r7, #20]
      break;
 80116da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80116dc:	4b13      	ldr	r3, [pc, #76]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	091b      	lsrs	r3, r3, #4
 80116e2:	f003 030f 	and.w	r3, r3, #15
 80116e6:	3301      	adds	r3, #1
 80116e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80116ea:	4b10      	ldr	r3, [pc, #64]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 80116ec:	68db      	ldr	r3, [r3, #12]
 80116ee:	0a1b      	lsrs	r3, r3, #8
 80116f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116f4:	697a      	ldr	r2, [r7, #20]
 80116f6:	fb02 f203 	mul.w	r2, r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8011702:	4b0a      	ldr	r3, [pc, #40]	; (801172c <HAL_RCC_GetSysClockFreq+0x108>)
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	0e5b      	lsrs	r3, r3, #25
 8011708:	f003 0303 	and.w	r3, r3, #3
 801170c:	3301      	adds	r3, #1
 801170e:	005b      	lsls	r3, r3, #1
 8011710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8011712:	697a      	ldr	r2, [r7, #20]
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	fbb2 f3f3 	udiv	r3, r2, r3
 801171a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801171c:	69bb      	ldr	r3, [r7, #24]
}
 801171e:	4618      	mov	r0, r3
 8011720:	3724      	adds	r7, #36	; 0x24
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	40021000 	.word	0x40021000
 8011730:	08023f90 	.word	0x08023f90
 8011734:	00f42400 	.word	0x00f42400
 8011738:	007a1200 	.word	0x007a1200

0801173c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801173c:	b480      	push	{r7}
 801173e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011740:	4b03      	ldr	r3, [pc, #12]	; (8011750 <HAL_RCC_GetHCLKFreq+0x14>)
 8011742:	681b      	ldr	r3, [r3, #0]
}
 8011744:	4618      	mov	r0, r3
 8011746:	46bd      	mov	sp, r7
 8011748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	200000b4 	.word	0x200000b4

08011754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b086      	sub	sp, #24
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801175c:	2300      	movs	r3, #0
 801175e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8011760:	4b27      	ldr	r3, [pc, #156]	; (8011800 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8011762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011768:	2b00      	cmp	r3, #0
 801176a:	d003      	beq.n	8011774 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801176c:	f7ff f8e2 	bl	8010934 <HAL_PWREx_GetVoltageRange>
 8011770:	6178      	str	r0, [r7, #20]
 8011772:	e014      	b.n	801179e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8011774:	4b22      	ldr	r3, [pc, #136]	; (8011800 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8011776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011778:	4a21      	ldr	r2, [pc, #132]	; (8011800 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 801177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801177e:	6593      	str	r3, [r2, #88]	; 0x58
 8011780:	4b1f      	ldr	r3, [pc, #124]	; (8011800 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8011782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011788:	60fb      	str	r3, [r7, #12]
 801178a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801178c:	f7ff f8d2 	bl	8010934 <HAL_PWREx_GetVoltageRange>
 8011790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8011792:	4b1b      	ldr	r3, [pc, #108]	; (8011800 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8011794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011796:	4a1a      	ldr	r2, [pc, #104]	; (8011800 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8011798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801179c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117a4:	d10b      	bne.n	80117be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2b80      	cmp	r3, #128	; 0x80
 80117aa:	d913      	bls.n	80117d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2ba0      	cmp	r3, #160	; 0xa0
 80117b0:	d902      	bls.n	80117b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80117b2:	2302      	movs	r3, #2
 80117b4:	613b      	str	r3, [r7, #16]
 80117b6:	e00d      	b.n	80117d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80117b8:	2301      	movs	r3, #1
 80117ba:	613b      	str	r3, [r7, #16]
 80117bc:	e00a      	b.n	80117d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2b7f      	cmp	r3, #127	; 0x7f
 80117c2:	d902      	bls.n	80117ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80117c4:	2302      	movs	r3, #2
 80117c6:	613b      	str	r3, [r7, #16]
 80117c8:	e004      	b.n	80117d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b70      	cmp	r3, #112	; 0x70
 80117ce:	d101      	bne.n	80117d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80117d0:	2301      	movs	r3, #1
 80117d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80117d4:	4b0b      	ldr	r3, [pc, #44]	; (8011804 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f023 020f 	bic.w	r2, r3, #15
 80117dc:	4909      	ldr	r1, [pc, #36]	; (8011804 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	4313      	orrs	r3, r2
 80117e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80117e4:	4b07      	ldr	r3, [pc, #28]	; (8011804 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	f003 030f 	and.w	r3, r3, #15
 80117ec:	693a      	ldr	r2, [r7, #16]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d001      	beq.n	80117f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80117f2:	2301      	movs	r3, #1
 80117f4:	e000      	b.n	80117f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80117f6:	2300      	movs	r3, #0
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3718      	adds	r7, #24
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	40021000 	.word	0x40021000
 8011804:	40022000 	.word	0x40022000

08011808 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8011808:	b480      	push	{r7}
 801180a:	b087      	sub	sp, #28
 801180c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 801180e:	2300      	movs	r3, #0
 8011810:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8011812:	4b2d      	ldr	r3, [pc, #180]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	f003 0303 	and.w	r3, r3, #3
 801181a:	2b01      	cmp	r3, #1
 801181c:	d118      	bne.n	8011850 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801181e:	4b2a      	ldr	r3, [pc, #168]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f003 0308 	and.w	r3, r3, #8
 8011826:	2b00      	cmp	r3, #0
 8011828:	d107      	bne.n	801183a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801182a:	4b27      	ldr	r3, [pc, #156]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 801182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011830:	0a1b      	lsrs	r3, r3, #8
 8011832:	f003 030f 	and.w	r3, r3, #15
 8011836:	617b      	str	r3, [r7, #20]
 8011838:	e005      	b.n	8011846 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801183a:	4b23      	ldr	r3, [pc, #140]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	091b      	lsrs	r3, r3, #4
 8011840:	f003 030f 	and.w	r3, r3, #15
 8011844:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8011846:	4a21      	ldr	r2, [pc, #132]	; (80118cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801184e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8011850:	4b1d      	ldr	r3, [pc, #116]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	f003 0303 	and.w	r3, r3, #3
 8011858:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2b02      	cmp	r3, #2
 801185e:	d003      	beq.n	8011868 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b03      	cmp	r3, #3
 8011864:	d003      	beq.n	801186e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8011866:	e005      	b.n	8011874 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8011868:	4b19      	ldr	r3, [pc, #100]	; (80118d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 801186a:	613b      	str	r3, [r7, #16]
    break;
 801186c:	e005      	b.n	801187a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 801186e:	4b19      	ldr	r3, [pc, #100]	; (80118d4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8011870:	613b      	str	r3, [r7, #16]
    break;
 8011872:	e002      	b.n	801187a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	613b      	str	r3, [r7, #16]
    break;
 8011878:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801187a:	4b13      	ldr	r3, [pc, #76]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 801187c:	68db      	ldr	r3, [r3, #12]
 801187e:	091b      	lsrs	r3, r3, #4
 8011880:	f003 030f 	and.w	r3, r3, #15
 8011884:	3301      	adds	r3, #1
 8011886:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8011888:	4b0f      	ldr	r3, [pc, #60]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	0a1b      	lsrs	r3, r3, #8
 801188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011892:	693a      	ldr	r2, [r7, #16]
 8011894:	fb02 f203 	mul.w	r2, r2, r3
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	fbb2 f3f3 	udiv	r3, r2, r3
 801189e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80118a0:	4b09      	ldr	r3, [pc, #36]	; (80118c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	0e5b      	lsrs	r3, r3, #25
 80118a6:	f003 0303 	and.w	r3, r3, #3
 80118aa:	3301      	adds	r3, #1
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80118b0:	693a      	ldr	r2, [r7, #16]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80118b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80118ba:	683b      	ldr	r3, [r7, #0]
}
 80118bc:	4618      	mov	r0, r3
 80118be:	371c      	adds	r7, #28
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr
 80118c8:	40021000 	.word	0x40021000
 80118cc:	08023f90 	.word	0x08023f90
 80118d0:	00f42400 	.word	0x00f42400
 80118d4:	007a1200 	.word	0x007a1200

080118d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b086      	sub	sp, #24
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80118e0:	2300      	movs	r3, #0
 80118e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80118e4:	2300      	movs	r3, #0
 80118e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d040      	beq.n	8011976 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118f8:	2b80      	cmp	r3, #128	; 0x80
 80118fa:	d02a      	beq.n	8011952 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80118fc:	2b80      	cmp	r3, #128	; 0x80
 80118fe:	d825      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8011900:	2b60      	cmp	r3, #96	; 0x60
 8011902:	d026      	beq.n	8011952 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011904:	2b60      	cmp	r3, #96	; 0x60
 8011906:	d821      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8011908:	2b40      	cmp	r3, #64	; 0x40
 801190a:	d006      	beq.n	801191a <HAL_RCCEx_PeriphCLKConfig+0x42>
 801190c:	2b40      	cmp	r3, #64	; 0x40
 801190e:	d81d      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8011910:	2b00      	cmp	r3, #0
 8011912:	d009      	beq.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8011914:	2b20      	cmp	r3, #32
 8011916:	d010      	beq.n	801193a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8011918:	e018      	b.n	801194c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801191a:	4b89      	ldr	r3, [pc, #548]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	4a88      	ldr	r2, [pc, #544]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011924:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011926:	e015      	b.n	8011954 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3304      	adds	r3, #4
 801192c:	2100      	movs	r1, #0
 801192e:	4618      	mov	r0, r3
 8011930:	f000 fb3e 	bl	8011fb0 <RCCEx_PLLSAI1_Config>
 8011934:	4603      	mov	r3, r0
 8011936:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011938:	e00c      	b.n	8011954 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3320      	adds	r3, #32
 801193e:	2100      	movs	r1, #0
 8011940:	4618      	mov	r0, r3
 8011942:	f000 fc29 	bl	8012198 <RCCEx_PLLSAI2_Config>
 8011946:	4603      	mov	r3, r0
 8011948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801194a:	e003      	b.n	8011954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801194c:	2301      	movs	r3, #1
 801194e:	74fb      	strb	r3, [r7, #19]
      break;
 8011950:	e000      	b.n	8011954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8011952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011954:	7cfb      	ldrb	r3, [r7, #19]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d10b      	bne.n	8011972 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801195a:	4b79      	ldr	r3, [pc, #484]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801195c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011960:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011968:	4975      	ldr	r1, [pc, #468]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 801196a:	4313      	orrs	r3, r2
 801196c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8011970:	e001      	b.n	8011976 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011972:	7cfb      	ldrb	r3, [r7, #19]
 8011974:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801197e:	2b00      	cmp	r3, #0
 8011980:	d047      	beq.n	8011a12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801198a:	d030      	beq.n	80119ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 801198c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011990:	d82a      	bhi.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8011992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011996:	d02a      	beq.n	80119ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8011998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801199c:	d824      	bhi.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 801199e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119a2:	d008      	beq.n	80119b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80119a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119a8:	d81e      	bhi.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d00a      	beq.n	80119c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80119ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119b2:	d010      	beq.n	80119d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80119b4:	e018      	b.n	80119e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80119b6:	4b62      	ldr	r3, [pc, #392]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	4a61      	ldr	r2, [pc, #388]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80119bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80119c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80119c2:	e015      	b.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	3304      	adds	r3, #4
 80119c8:	2100      	movs	r1, #0
 80119ca:	4618      	mov	r0, r3
 80119cc:	f000 faf0 	bl	8011fb0 <RCCEx_PLLSAI1_Config>
 80119d0:	4603      	mov	r3, r0
 80119d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80119d4:	e00c      	b.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	3320      	adds	r3, #32
 80119da:	2100      	movs	r1, #0
 80119dc:	4618      	mov	r0, r3
 80119de:	f000 fbdb 	bl	8012198 <RCCEx_PLLSAI2_Config>
 80119e2:	4603      	mov	r3, r0
 80119e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80119e6:	e003      	b.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80119e8:	2301      	movs	r3, #1
 80119ea:	74fb      	strb	r3, [r7, #19]
      break;
 80119ec:	e000      	b.n	80119f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80119ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80119f0:	7cfb      	ldrb	r3, [r7, #19]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d10b      	bne.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80119f6:	4b52      	ldr	r3, [pc, #328]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80119f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80119fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a04:	494e      	ldr	r1, [pc, #312]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a06:	4313      	orrs	r3, r2
 8011a08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8011a0c:	e001      	b.n	8011a12 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a0e:	7cfb      	ldrb	r3, [r7, #19]
 8011a10:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	f000 809f 	beq.w	8011b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011a20:	2300      	movs	r3, #0
 8011a22:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8011a24:	4b46      	ldr	r3, [pc, #280]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d101      	bne.n	8011a34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8011a30:	2301      	movs	r3, #1
 8011a32:	e000      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8011a34:	2300      	movs	r3, #0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00d      	beq.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a3a:	4b41      	ldr	r3, [pc, #260]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a3e:	4a40      	ldr	r2, [pc, #256]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a44:	6593      	str	r3, [r2, #88]	; 0x58
 8011a46:	4b3e      	ldr	r3, [pc, #248]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a4e:	60bb      	str	r3, [r7, #8]
 8011a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011a52:	2301      	movs	r3, #1
 8011a54:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a56:	4b3b      	ldr	r3, [pc, #236]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a3a      	ldr	r2, [pc, #232]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a62:	f7fb f8eb 	bl	800cc3c <HAL_GetTick>
 8011a66:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011a68:	e009      	b.n	8011a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a6a:	f7fb f8e7 	bl	800cc3c <HAL_GetTick>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	2b02      	cmp	r3, #2
 8011a76:	d902      	bls.n	8011a7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8011a78:	2303      	movs	r3, #3
 8011a7a:	74fb      	strb	r3, [r7, #19]
        break;
 8011a7c:	e005      	b.n	8011a8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8011a7e:	4b31      	ldr	r3, [pc, #196]	; (8011b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d0ef      	beq.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8011a8a:	7cfb      	ldrb	r3, [r7, #19]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d15b      	bne.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8011a90:	4b2b      	ldr	r3, [pc, #172]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011a9a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d01f      	beq.n	8011ae2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011aa8:	697a      	ldr	r2, [r7, #20]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d019      	beq.n	8011ae2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011aae:	4b24      	ldr	r3, [pc, #144]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ab8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011aba:	4b21      	ldr	r3, [pc, #132]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ac0:	4a1f      	ldr	r2, [pc, #124]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011aca:	4b1d      	ldr	r3, [pc, #116]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ad0:	4a1b      	ldr	r2, [pc, #108]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011ada:	4a19      	ldr	r2, [pc, #100]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	f003 0301 	and.w	r3, r3, #1
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d016      	beq.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011aec:	f7fb f8a6 	bl	800cc3c <HAL_GetTick>
 8011af0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011af2:	e00b      	b.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011af4:	f7fb f8a2 	bl	800cc3c <HAL_GetTick>
 8011af8:	4602      	mov	r2, r0
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	1ad3      	subs	r3, r2, r3
 8011afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d902      	bls.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8011b06:	2303      	movs	r3, #3
 8011b08:	74fb      	strb	r3, [r7, #19]
            break;
 8011b0a:	e006      	b.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011b0c:	4b0c      	ldr	r3, [pc, #48]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b12:	f003 0302 	and.w	r3, r3, #2
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d0ec      	beq.n	8011af4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8011b1a:	7cfb      	ldrb	r3, [r7, #19]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d10c      	bne.n	8011b3a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011b20:	4b07      	ldr	r3, [pc, #28]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011b30:	4903      	ldr	r1, [pc, #12]	; (8011b40 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8011b32:	4313      	orrs	r3, r2
 8011b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8011b38:	e008      	b.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011b3a:	7cfb      	ldrb	r3, [r7, #19]
 8011b3c:	74bb      	strb	r3, [r7, #18]
 8011b3e:	e005      	b.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8011b40:	40021000 	.word	0x40021000
 8011b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b48:	7cfb      	ldrb	r3, [r7, #19]
 8011b4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011b4c:	7c7b      	ldrb	r3, [r7, #17]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d105      	bne.n	8011b5e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011b52:	4ba0      	ldr	r3, [pc, #640]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b56:	4a9f      	ldr	r2, [pc, #636]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	f003 0301 	and.w	r3, r3, #1
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d00a      	beq.n	8011b80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011b6a:	4b9a      	ldr	r3, [pc, #616]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b70:	f023 0203 	bic.w	r2, r3, #3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b78:	4996      	ldr	r1, [pc, #600]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	f003 0302 	and.w	r3, r3, #2
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d00a      	beq.n	8011ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011b8c:	4b91      	ldr	r3, [pc, #580]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b92:	f023 020c 	bic.w	r2, r3, #12
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b9a:	498e      	ldr	r1, [pc, #568]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f003 0304 	and.w	r3, r3, #4
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d00a      	beq.n	8011bc4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011bae:	4b89      	ldr	r3, [pc, #548]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bbc:	4985      	ldr	r1, [pc, #532]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bbe:	4313      	orrs	r3, r2
 8011bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f003 0308 	and.w	r3, r3, #8
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00a      	beq.n	8011be6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011bd0:	4b80      	ldr	r3, [pc, #512]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bde:	497d      	ldr	r1, [pc, #500]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011be0:	4313      	orrs	r3, r2
 8011be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f003 0310 	and.w	r3, r3, #16
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d00a      	beq.n	8011c08 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011bf2:	4b78      	ldr	r3, [pc, #480]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c00:	4974      	ldr	r1, [pc, #464]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c02:	4313      	orrs	r3, r2
 8011c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f003 0320 	and.w	r3, r3, #32
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00a      	beq.n	8011c2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011c14:	4b6f      	ldr	r3, [pc, #444]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c22:	496c      	ldr	r1, [pc, #432]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c24:	4313      	orrs	r3, r2
 8011c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d00a      	beq.n	8011c4c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011c36:	4b67      	ldr	r3, [pc, #412]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c44:	4963      	ldr	r1, [pc, #396]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c46:	4313      	orrs	r3, r2
 8011c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00a      	beq.n	8011c6e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011c58:	4b5e      	ldr	r3, [pc, #376]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c66:	495b      	ldr	r1, [pc, #364]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c68:	4313      	orrs	r3, r2
 8011c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00a      	beq.n	8011c90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011c7a:	4b56      	ldr	r3, [pc, #344]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c88:	4952      	ldr	r1, [pc, #328]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c8a:	4313      	orrs	r3, r2
 8011c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00a      	beq.n	8011cb2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011c9c:	4b4d      	ldr	r3, [pc, #308]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ca2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011caa:	494a      	ldr	r1, [pc, #296]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cac:	4313      	orrs	r3, r2
 8011cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d00a      	beq.n	8011cd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011cbe:	4b45      	ldr	r3, [pc, #276]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ccc:	4941      	ldr	r1, [pc, #260]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00a      	beq.n	8011cf6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011ce0:	4b3c      	ldr	r3, [pc, #240]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011ce6:	f023 0203 	bic.w	r2, r3, #3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cee:	4939      	ldr	r1, [pc, #228]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011cf0:	4313      	orrs	r3, r2
 8011cf2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d028      	beq.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011d02:	4b34      	ldr	r3, [pc, #208]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d10:	4930      	ldr	r1, [pc, #192]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d12:	4313      	orrs	r3, r2
 8011d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d20:	d106      	bne.n	8011d30 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011d22:	4b2c      	ldr	r3, [pc, #176]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	4a2b      	ldr	r2, [pc, #172]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d2c:	60d3      	str	r3, [r2, #12]
 8011d2e:	e011      	b.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011d38:	d10c      	bne.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	3304      	adds	r3, #4
 8011d3e:	2101      	movs	r1, #1
 8011d40:	4618      	mov	r0, r3
 8011d42:	f000 f935 	bl	8011fb0 <RCCEx_PLLSAI1_Config>
 8011d46:	4603      	mov	r3, r0
 8011d48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8011d4a:	7cfb      	ldrb	r3, [r7, #19]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d001      	beq.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8011d50:	7cfb      	ldrb	r3, [r7, #19]
 8011d52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d04d      	beq.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d68:	d108      	bne.n	8011d7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8011d6a:	4b1a      	ldr	r3, [pc, #104]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011d70:	4a18      	ldr	r2, [pc, #96]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011d76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8011d7a:	e012      	b.n	8011da2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8011d7c:	4b15      	ldr	r3, [pc, #84]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011d82:	4a14      	ldr	r2, [pc, #80]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8011d8c:	4b11      	ldr	r3, [pc, #68]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d9a:	490e      	ldr	r1, [pc, #56]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011daa:	d106      	bne.n	8011dba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011dac:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	4a08      	ldr	r2, [pc, #32]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011db6:	60d3      	str	r3, [r2, #12]
 8011db8:	e020      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011dc2:	d109      	bne.n	8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011dc4:	4b03      	ldr	r3, [pc, #12]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dc6:	68db      	ldr	r3, [r3, #12]
 8011dc8:	4a02      	ldr	r2, [pc, #8]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8011dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011dce:	60d3      	str	r3, [r2, #12]
 8011dd0:	e014      	b.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8011dd2:	bf00      	nop
 8011dd4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011de0:	d10c      	bne.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	3304      	adds	r3, #4
 8011de6:	2101      	movs	r1, #1
 8011de8:	4618      	mov	r0, r3
 8011dea:	f000 f8e1 	bl	8011fb0 <RCCEx_PLLSAI1_Config>
 8011dee:	4603      	mov	r3, r0
 8011df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011df2:	7cfb      	ldrb	r3, [r7, #19]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d001      	beq.n	8011dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8011df8:	7cfb      	ldrb	r3, [r7, #19]
 8011dfa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d028      	beq.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011e08:	4b68      	ldr	r3, [pc, #416]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e16:	4965      	ldr	r1, [pc, #404]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e18:	4313      	orrs	r3, r2
 8011e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e26:	d106      	bne.n	8011e36 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011e28:	4b60      	ldr	r3, [pc, #384]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	4a5f      	ldr	r2, [pc, #380]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e32:	60d3      	str	r3, [r2, #12]
 8011e34:	e011      	b.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011e3e:	d10c      	bne.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	3304      	adds	r3, #4
 8011e44:	2101      	movs	r1, #1
 8011e46:	4618      	mov	r0, r3
 8011e48:	f000 f8b2 	bl	8011fb0 <RCCEx_PLLSAI1_Config>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011e50:	7cfb      	ldrb	r3, [r7, #19]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d001      	beq.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8011e56:	7cfb      	ldrb	r3, [r7, #19]
 8011e58:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d01e      	beq.n	8011ea4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011e66:	4b51      	ldr	r3, [pc, #324]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e76:	494d      	ldr	r1, [pc, #308]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011e78:	4313      	orrs	r3, r2
 8011e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011e88:	d10c      	bne.n	8011ea4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	2102      	movs	r1, #2
 8011e90:	4618      	mov	r0, r3
 8011e92:	f000 f88d 	bl	8011fb0 <RCCEx_PLLSAI1_Config>
 8011e96:	4603      	mov	r3, r0
 8011e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011e9a:	7cfb      	ldrb	r3, [r7, #19]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8011ea0:	7cfb      	ldrb	r3, [r7, #19]
 8011ea2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d00b      	beq.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011eb0:	4b3e      	ldr	r3, [pc, #248]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011eb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011eb6:	f023 0204 	bic.w	r2, r3, #4
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ec0:	493a      	ldr	r1, [pc, #232]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00b      	beq.n	8011eec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8011ed4:	4b35      	ldr	r3, [pc, #212]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011eda:	f023 0218 	bic.w	r2, r3, #24
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ee4:	4931      	ldr	r1, [pc, #196]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d035      	beq.n	8011f64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8011ef8:	4b2c      	ldr	r3, [pc, #176]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4a2b      	ldr	r2, [pc, #172]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f04:	f7fa fe9a 	bl	800cc3c <HAL_GetTick>
 8011f08:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011f0a:	e009      	b.n	8011f20 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011f0c:	f7fa fe96 	bl	800cc3c <HAL_GetTick>
 8011f10:	4602      	mov	r2, r0
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	1ad3      	subs	r3, r2, r3
 8011f16:	2b02      	cmp	r3, #2
 8011f18:	d902      	bls.n	8011f20 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	74fb      	strb	r3, [r7, #19]
        break;
 8011f1e:	e005      	b.n	8011f2c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011f20:	4b22      	ldr	r3, [pc, #136]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1ef      	bne.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8011f2c:	7cfb      	ldrb	r3, [r7, #19]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d113      	bne.n	8011f5a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8011f32:	4b1e      	ldr	r3, [pc, #120]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f42:	491a      	ldr	r1, [pc, #104]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f44:	4313      	orrs	r3, r2
 8011f46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	3320      	adds	r3, #32
 8011f4e:	2102      	movs	r1, #2
 8011f50:	4618      	mov	r0, r3
 8011f52:	f000 f921 	bl	8012198 <RCCEx_PLLSAI2_Config>
 8011f56:	4603      	mov	r3, r0
 8011f58:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8011f5a:	7cfb      	ldrb	r3, [r7, #19]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8011f60:	7cfb      	ldrb	r3, [r7, #19]
 8011f62:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d017      	beq.n	8011fa0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011f70:	4b0e      	ldr	r3, [pc, #56]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011f76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f80:	490a      	ldr	r1, [pc, #40]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f82:	4313      	orrs	r3, r2
 8011f84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f92:	d105      	bne.n	8011fa0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011f94:	4b05      	ldr	r3, [pc, #20]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	4a04      	ldr	r2, [pc, #16]	; (8011fac <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8011f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011fa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3718      	adds	r7, #24
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	40021000 	.word	0x40021000

08011fb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011fbe:	4b72      	ldr	r3, [pc, #456]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	f003 0303 	and.w	r3, r3, #3
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d00e      	beq.n	8011fe8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8011fca:	4b6f      	ldr	r3, [pc, #444]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8011fcc:	68db      	ldr	r3, [r3, #12]
 8011fce:	f003 0203 	and.w	r2, r3, #3
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d103      	bne.n	8011fe2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d142      	bne.n	8012068 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	73fb      	strb	r3, [r7, #15]
 8011fe6:	e03f      	b.n	8012068 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b03      	cmp	r3, #3
 8011fee:	d018      	beq.n	8012022 <RCCEx_PLLSAI1_Config+0x72>
 8011ff0:	2b03      	cmp	r3, #3
 8011ff2:	d825      	bhi.n	8012040 <RCCEx_PLLSAI1_Config+0x90>
 8011ff4:	2b01      	cmp	r3, #1
 8011ff6:	d002      	beq.n	8011ffe <RCCEx_PLLSAI1_Config+0x4e>
 8011ff8:	2b02      	cmp	r3, #2
 8011ffa:	d009      	beq.n	8012010 <RCCEx_PLLSAI1_Config+0x60>
 8011ffc:	e020      	b.n	8012040 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011ffe:	4b62      	ldr	r3, [pc, #392]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f003 0302 	and.w	r3, r3, #2
 8012006:	2b00      	cmp	r3, #0
 8012008:	d11d      	bne.n	8012046 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 801200a:	2301      	movs	r3, #1
 801200c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801200e:	e01a      	b.n	8012046 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012010:	4b5d      	ldr	r3, [pc, #372]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012018:	2b00      	cmp	r3, #0
 801201a:	d116      	bne.n	801204a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 801201c:	2301      	movs	r3, #1
 801201e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012020:	e013      	b.n	801204a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012022:	4b59      	ldr	r3, [pc, #356]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801202a:	2b00      	cmp	r3, #0
 801202c:	d10f      	bne.n	801204e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801202e:	4b56      	ldr	r3, [pc, #344]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012036:	2b00      	cmp	r3, #0
 8012038:	d109      	bne.n	801204e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 801203a:	2301      	movs	r3, #1
 801203c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801203e:	e006      	b.n	801204e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8012040:	2301      	movs	r3, #1
 8012042:	73fb      	strb	r3, [r7, #15]
      break;
 8012044:	e004      	b.n	8012050 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8012046:	bf00      	nop
 8012048:	e002      	b.n	8012050 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 801204a:	bf00      	nop
 801204c:	e000      	b.n	8012050 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 801204e:	bf00      	nop
    }

    if(status == HAL_OK)
 8012050:	7bfb      	ldrb	r3, [r7, #15]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d108      	bne.n	8012068 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8012056:	4b4c      	ldr	r3, [pc, #304]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	f023 0203 	bic.w	r2, r3, #3
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4949      	ldr	r1, [pc, #292]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012064:	4313      	orrs	r3, r2
 8012066:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8012068:	7bfb      	ldrb	r3, [r7, #15]
 801206a:	2b00      	cmp	r3, #0
 801206c:	f040 8086 	bne.w	801217c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012070:	4b45      	ldr	r3, [pc, #276]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4a44      	ldr	r2, [pc, #272]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012076:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801207a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801207c:	f7fa fdde 	bl	800cc3c <HAL_GetTick>
 8012080:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012082:	e009      	b.n	8012098 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012084:	f7fa fdda 	bl	800cc3c <HAL_GetTick>
 8012088:	4602      	mov	r2, r0
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	1ad3      	subs	r3, r2, r3
 801208e:	2b02      	cmp	r3, #2
 8012090:	d902      	bls.n	8012098 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8012092:	2303      	movs	r3, #3
 8012094:	73fb      	strb	r3, [r7, #15]
        break;
 8012096:	e005      	b.n	80120a4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012098:	4b3b      	ldr	r3, [pc, #236]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d1ef      	bne.n	8012084 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80120a4:	7bfb      	ldrb	r3, [r7, #15]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d168      	bne.n	801217c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d113      	bne.n	80120d8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80120b0:	4b35      	ldr	r3, [pc, #212]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 80120b2:	691a      	ldr	r2, [r3, #16]
 80120b4:	4b35      	ldr	r3, [pc, #212]	; (801218c <RCCEx_PLLSAI1_Config+0x1dc>)
 80120b6:	4013      	ands	r3, r2
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	6892      	ldr	r2, [r2, #8]
 80120bc:	0211      	lsls	r1, r2, #8
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	68d2      	ldr	r2, [r2, #12]
 80120c2:	06d2      	lsls	r2, r2, #27
 80120c4:	4311      	orrs	r1, r2
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	6852      	ldr	r2, [r2, #4]
 80120ca:	3a01      	subs	r2, #1
 80120cc:	0112      	lsls	r2, r2, #4
 80120ce:	430a      	orrs	r2, r1
 80120d0:	492d      	ldr	r1, [pc, #180]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 80120d2:	4313      	orrs	r3, r2
 80120d4:	610b      	str	r3, [r1, #16]
 80120d6:	e02d      	b.n	8012134 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2b01      	cmp	r3, #1
 80120dc:	d115      	bne.n	801210a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80120de:	4b2a      	ldr	r3, [pc, #168]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 80120e0:	691a      	ldr	r2, [r3, #16]
 80120e2:	4b2b      	ldr	r3, [pc, #172]	; (8012190 <RCCEx_PLLSAI1_Config+0x1e0>)
 80120e4:	4013      	ands	r3, r2
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	6892      	ldr	r2, [r2, #8]
 80120ea:	0211      	lsls	r1, r2, #8
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	6912      	ldr	r2, [r2, #16]
 80120f0:	0852      	lsrs	r2, r2, #1
 80120f2:	3a01      	subs	r2, #1
 80120f4:	0552      	lsls	r2, r2, #21
 80120f6:	4311      	orrs	r1, r2
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	6852      	ldr	r2, [r2, #4]
 80120fc:	3a01      	subs	r2, #1
 80120fe:	0112      	lsls	r2, r2, #4
 8012100:	430a      	orrs	r2, r1
 8012102:	4921      	ldr	r1, [pc, #132]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012104:	4313      	orrs	r3, r2
 8012106:	610b      	str	r3, [r1, #16]
 8012108:	e014      	b.n	8012134 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801210a:	4b1f      	ldr	r3, [pc, #124]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 801210c:	691a      	ldr	r2, [r3, #16]
 801210e:	4b21      	ldr	r3, [pc, #132]	; (8012194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8012110:	4013      	ands	r3, r2
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	6892      	ldr	r2, [r2, #8]
 8012116:	0211      	lsls	r1, r2, #8
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	6952      	ldr	r2, [r2, #20]
 801211c:	0852      	lsrs	r2, r2, #1
 801211e:	3a01      	subs	r2, #1
 8012120:	0652      	lsls	r2, r2, #25
 8012122:	4311      	orrs	r1, r2
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	6852      	ldr	r2, [r2, #4]
 8012128:	3a01      	subs	r2, #1
 801212a:	0112      	lsls	r2, r2, #4
 801212c:	430a      	orrs	r2, r1
 801212e:	4916      	ldr	r1, [pc, #88]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012130:	4313      	orrs	r3, r2
 8012132:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012134:	4b14      	ldr	r3, [pc, #80]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4a13      	ldr	r2, [pc, #76]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 801213a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801213e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012140:	f7fa fd7c 	bl	800cc3c <HAL_GetTick>
 8012144:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012146:	e009      	b.n	801215c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012148:	f7fa fd78 	bl	800cc3c <HAL_GetTick>
 801214c:	4602      	mov	r2, r0
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	1ad3      	subs	r3, r2, r3
 8012152:	2b02      	cmp	r3, #2
 8012154:	d902      	bls.n	801215c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8012156:	2303      	movs	r3, #3
 8012158:	73fb      	strb	r3, [r7, #15]
          break;
 801215a:	e005      	b.n	8012168 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801215c:	4b0a      	ldr	r3, [pc, #40]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012164:	2b00      	cmp	r3, #0
 8012166:	d0ef      	beq.n	8012148 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8012168:	7bfb      	ldrb	r3, [r7, #15]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801216e:	4b06      	ldr	r3, [pc, #24]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012170:	691a      	ldr	r2, [r3, #16]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	699b      	ldr	r3, [r3, #24]
 8012176:	4904      	ldr	r1, [pc, #16]	; (8012188 <RCCEx_PLLSAI1_Config+0x1d8>)
 8012178:	4313      	orrs	r3, r2
 801217a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801217c:	7bfb      	ldrb	r3, [r7, #15]
}
 801217e:	4618      	mov	r0, r3
 8012180:	3710      	adds	r7, #16
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	40021000 	.word	0x40021000
 801218c:	07ff800f 	.word	0x07ff800f
 8012190:	ff9f800f 	.word	0xff9f800f
 8012194:	f9ff800f 	.word	0xf9ff800f

08012198 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80121a2:	2300      	movs	r3, #0
 80121a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80121a6:	4b72      	ldr	r3, [pc, #456]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	f003 0303 	and.w	r3, r3, #3
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00e      	beq.n	80121d0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80121b2:	4b6f      	ldr	r3, [pc, #444]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	f003 0203 	and.w	r2, r3, #3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d103      	bne.n	80121ca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
       ||
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d142      	bne.n	8012250 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80121ca:	2301      	movs	r3, #1
 80121cc:	73fb      	strb	r3, [r7, #15]
 80121ce:	e03f      	b.n	8012250 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b03      	cmp	r3, #3
 80121d6:	d018      	beq.n	801220a <RCCEx_PLLSAI2_Config+0x72>
 80121d8:	2b03      	cmp	r3, #3
 80121da:	d825      	bhi.n	8012228 <RCCEx_PLLSAI2_Config+0x90>
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d002      	beq.n	80121e6 <RCCEx_PLLSAI2_Config+0x4e>
 80121e0:	2b02      	cmp	r3, #2
 80121e2:	d009      	beq.n	80121f8 <RCCEx_PLLSAI2_Config+0x60>
 80121e4:	e020      	b.n	8012228 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80121e6:	4b62      	ldr	r3, [pc, #392]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f003 0302 	and.w	r3, r3, #2
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d11d      	bne.n	801222e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80121f2:	2301      	movs	r3, #1
 80121f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80121f6:	e01a      	b.n	801222e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80121f8:	4b5d      	ldr	r3, [pc, #372]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012200:	2b00      	cmp	r3, #0
 8012202:	d116      	bne.n	8012232 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8012204:	2301      	movs	r3, #1
 8012206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012208:	e013      	b.n	8012232 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801220a:	4b59      	ldr	r3, [pc, #356]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012212:	2b00      	cmp	r3, #0
 8012214:	d10f      	bne.n	8012236 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8012216:	4b56      	ldr	r3, [pc, #344]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801221e:	2b00      	cmp	r3, #0
 8012220:	d109      	bne.n	8012236 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8012222:	2301      	movs	r3, #1
 8012224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012226:	e006      	b.n	8012236 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8012228:	2301      	movs	r3, #1
 801222a:	73fb      	strb	r3, [r7, #15]
      break;
 801222c:	e004      	b.n	8012238 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 801222e:	bf00      	nop
 8012230:	e002      	b.n	8012238 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8012232:	bf00      	nop
 8012234:	e000      	b.n	8012238 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8012236:	bf00      	nop
    }

    if(status == HAL_OK)
 8012238:	7bfb      	ldrb	r3, [r7, #15]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d108      	bne.n	8012250 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 801223e:	4b4c      	ldr	r3, [pc, #304]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	f023 0203 	bic.w	r2, r3, #3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4949      	ldr	r1, [pc, #292]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 801224c:	4313      	orrs	r3, r2
 801224e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8012250:	7bfb      	ldrb	r3, [r7, #15]
 8012252:	2b00      	cmp	r3, #0
 8012254:	f040 8086 	bne.w	8012364 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8012258:	4b45      	ldr	r3, [pc, #276]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4a44      	ldr	r2, [pc, #272]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 801225e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012264:	f7fa fcea 	bl	800cc3c <HAL_GetTick>
 8012268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801226a:	e009      	b.n	8012280 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801226c:	f7fa fce6 	bl	800cc3c <HAL_GetTick>
 8012270:	4602      	mov	r2, r0
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	2b02      	cmp	r3, #2
 8012278:	d902      	bls.n	8012280 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 801227a:	2303      	movs	r3, #3
 801227c:	73fb      	strb	r3, [r7, #15]
        break;
 801227e:	e005      	b.n	801228c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012280:	4b3b      	ldr	r3, [pc, #236]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1ef      	bne.n	801226c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 801228c:	7bfb      	ldrb	r3, [r7, #15]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d168      	bne.n	8012364 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d113      	bne.n	80122c0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8012298:	4b35      	ldr	r3, [pc, #212]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 801229a:	695a      	ldr	r2, [r3, #20]
 801229c:	4b35      	ldr	r3, [pc, #212]	; (8012374 <RCCEx_PLLSAI2_Config+0x1dc>)
 801229e:	4013      	ands	r3, r2
 80122a0:	687a      	ldr	r2, [r7, #4]
 80122a2:	6892      	ldr	r2, [r2, #8]
 80122a4:	0211      	lsls	r1, r2, #8
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	68d2      	ldr	r2, [r2, #12]
 80122aa:	06d2      	lsls	r2, r2, #27
 80122ac:	4311      	orrs	r1, r2
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	6852      	ldr	r2, [r2, #4]
 80122b2:	3a01      	subs	r2, #1
 80122b4:	0112      	lsls	r2, r2, #4
 80122b6:	430a      	orrs	r2, r1
 80122b8:	492d      	ldr	r1, [pc, #180]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122ba:	4313      	orrs	r3, r2
 80122bc:	614b      	str	r3, [r1, #20]
 80122be:	e02d      	b.n	801231c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d115      	bne.n	80122f2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80122c6:	4b2a      	ldr	r3, [pc, #168]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122c8:	695a      	ldr	r2, [r3, #20]
 80122ca:	4b2b      	ldr	r3, [pc, #172]	; (8012378 <RCCEx_PLLSAI2_Config+0x1e0>)
 80122cc:	4013      	ands	r3, r2
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	6892      	ldr	r2, [r2, #8]
 80122d2:	0211      	lsls	r1, r2, #8
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	6912      	ldr	r2, [r2, #16]
 80122d8:	0852      	lsrs	r2, r2, #1
 80122da:	3a01      	subs	r2, #1
 80122dc:	0552      	lsls	r2, r2, #21
 80122de:	4311      	orrs	r1, r2
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	6852      	ldr	r2, [r2, #4]
 80122e4:	3a01      	subs	r2, #1
 80122e6:	0112      	lsls	r2, r2, #4
 80122e8:	430a      	orrs	r2, r1
 80122ea:	4921      	ldr	r1, [pc, #132]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122ec:	4313      	orrs	r3, r2
 80122ee:	614b      	str	r3, [r1, #20]
 80122f0:	e014      	b.n	801231c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80122f2:	4b1f      	ldr	r3, [pc, #124]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 80122f4:	695a      	ldr	r2, [r3, #20]
 80122f6:	4b21      	ldr	r3, [pc, #132]	; (801237c <RCCEx_PLLSAI2_Config+0x1e4>)
 80122f8:	4013      	ands	r3, r2
 80122fa:	687a      	ldr	r2, [r7, #4]
 80122fc:	6892      	ldr	r2, [r2, #8]
 80122fe:	0211      	lsls	r1, r2, #8
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	6952      	ldr	r2, [r2, #20]
 8012304:	0852      	lsrs	r2, r2, #1
 8012306:	3a01      	subs	r2, #1
 8012308:	0652      	lsls	r2, r2, #25
 801230a:	4311      	orrs	r1, r2
 801230c:	687a      	ldr	r2, [r7, #4]
 801230e:	6852      	ldr	r2, [r2, #4]
 8012310:	3a01      	subs	r2, #1
 8012312:	0112      	lsls	r2, r2, #4
 8012314:	430a      	orrs	r2, r1
 8012316:	4916      	ldr	r1, [pc, #88]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012318:	4313      	orrs	r3, r2
 801231a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801231c:	4b14      	ldr	r3, [pc, #80]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4a13      	ldr	r2, [pc, #76]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012328:	f7fa fc88 	bl	800cc3c <HAL_GetTick>
 801232c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801232e:	e009      	b.n	8012344 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012330:	f7fa fc84 	bl	800cc3c <HAL_GetTick>
 8012334:	4602      	mov	r2, r0
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	1ad3      	subs	r3, r2, r3
 801233a:	2b02      	cmp	r3, #2
 801233c:	d902      	bls.n	8012344 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 801233e:	2303      	movs	r3, #3
 8012340:	73fb      	strb	r3, [r7, #15]
          break;
 8012342:	e005      	b.n	8012350 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012344:	4b0a      	ldr	r3, [pc, #40]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801234c:	2b00      	cmp	r3, #0
 801234e:	d0ef      	beq.n	8012330 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8012350:	7bfb      	ldrb	r3, [r7, #15]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d106      	bne.n	8012364 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8012356:	4b06      	ldr	r3, [pc, #24]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012358:	695a      	ldr	r2, [r3, #20]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	4904      	ldr	r1, [pc, #16]	; (8012370 <RCCEx_PLLSAI2_Config+0x1d8>)
 8012360:	4313      	orrs	r3, r2
 8012362:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012364:	7bfb      	ldrb	r3, [r7, #15]
}
 8012366:	4618      	mov	r0, r3
 8012368:	3710      	adds	r7, #16
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	40021000 	.word	0x40021000
 8012374:	07ff800f 	.word	0x07ff800f
 8012378:	ff9f800f 	.word	0xff9f800f
 801237c:	f9ff800f 	.word	0xf9ff800f

08012380 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d101      	bne.n	8012392 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801238e:	2301      	movs	r3, #1
 8012390:	e096      	b.n	80124c0 <HAL_RNG_Init+0x140>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	7a5b      	ldrb	r3, [r3, #9]
 8012396:	b2db      	uxtb	r3, r3
 8012398:	2b00      	cmp	r3, #0
 801239a:	d105      	bne.n	80123a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f7f7 ffc8 	bl	800a338 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2202      	movs	r2, #2
 80123ac:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	f022 0204 	bic.w	r2, r2, #4
 80123bc:	601a      	str	r2, [r3, #0]

  /* RNG CR register configuration. Set value in CR register for CONFIG 1, CONFIG 2 and CONFIG 3 values */
  cr_value = (uint32_t) (RNG_CR_CONFIG_VAL);
 80123be:	4b42      	ldr	r3, [pc, #264]	; (80124c8 <HAL_RNG_Init+0x148>)
 80123c0:	60fb      	str	r3, [r7, #12]

  /* Configuration of 
     - Clock Error Detection 
     - CONFIG1, CONFIG2, CONFIG3 fields
     when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG1
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	4b40      	ldr	r3, [pc, #256]	; (80124cc <HAL_RNG_Init+0x14c>)
 80123ca:	4013      	ands	r3, r2
 80123cc:	687a      	ldr	r2, [r7, #4]
 80123ce:	6851      	ldr	r1, [r2, #4]
 80123d0:	68fa      	ldr	r2, [r7, #12]
 80123d2:	430a      	orrs	r2, r1
 80123d4:	431a      	orrs	r2, r3
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80123de:	601a      	str	r2, [r3, #0]
                                 | RNG_CR_RNG_CONFIG2 | RNG_CR_RNG_CONFIG3,
                                 (uint32_t) (RNG_CR_CONDRST | hrng->Init.ClockErrorDetection | cr_value));

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	4a3a      	ldr	r2, [pc, #232]	; (80124d0 <HAL_RNG_Init+0x150>)
 80123e6:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	f64a 2274 	movw	r2, #43636	; 0xaa74
 80123f0:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8012400:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012402:	f7fa fc1b 	bl	800cc3c <HAL_GetTick>
 8012406:	60b8      	str	r0, [r7, #8]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012408:	e016      	b.n	8012438 <HAL_RNG_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 801240a:	f7fa fc17 	bl	800cc3c <HAL_GetTick>
 801240e:	4602      	mov	r2, r0
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	2b02      	cmp	r3, #2
 8012416:	d90f      	bls.n	8012438 <HAL_RNG_Init+0xb8>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012426:	d107      	bne.n	8012438 <HAL_RNG_Init+0xb8>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2201      	movs	r2, #1
 801242c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2202      	movs	r2, #2
 8012432:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8012434:	2301      	movs	r3, #1
 8012436:	e043      	b.n	80124c0 <HAL_RNG_Init+0x140>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012446:	d0e0      	beq.n	801240a <HAL_RNG_Init+0x8a>
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	681a      	ldr	r2, [r3, #0]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f042 0204 	orr.w	r2, r2, #4
 8012456:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012462:	2b40      	cmp	r3, #64	; 0x40
 8012464:	d104      	bne.n	8012470 <HAL_RNG_Init+0xf0>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2204      	movs	r2, #4
 801246a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 801246c:	2301      	movs	r3, #1
 801246e:	e027      	b.n	80124c0 <HAL_RNG_Init+0x140>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8012470:	f7fa fbe4 	bl	800cc3c <HAL_GetTick>
 8012474:	60b8      	str	r0, [r7, #8]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8012476:	e015      	b.n	80124a4 <HAL_RNG_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8012478:	f7fa fbe0 	bl	800cc3c <HAL_GetTick>
 801247c:	4602      	mov	r2, r0
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	1ad3      	subs	r3, r2, r3
 8012482:	2b02      	cmp	r3, #2
 8012484:	d90e      	bls.n	80124a4 <HAL_RNG_Init+0x124>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	f003 0304 	and.w	r3, r3, #4
 8012490:	2b04      	cmp	r3, #4
 8012492:	d107      	bne.n	80124a4 <HAL_RNG_Init+0x124>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2204      	movs	r2, #4
 8012498:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2202      	movs	r2, #2
 801249e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80124a0:	2301      	movs	r3, #1
 80124a2:	e00d      	b.n	80124c0 <HAL_RNG_Init+0x140>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	685b      	ldr	r3, [r3, #4]
 80124aa:	f003 0304 	and.w	r3, r3, #4
 80124ae:	2b04      	cmp	r3, #4
 80124b0:	d0e2      	beq.n	8012478 <HAL_RNG_Init+0xf8>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2201      	movs	r2, #1
 80124b6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2200      	movs	r2, #0
 80124bc:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3710      	adds	r7, #16
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	00f00d00 	.word	0x00f00d00
 80124cc:	bc0f10df 	.word	0xbc0f10df
 80124d0:	17590abc 	.word	0x17590abc

080124d4 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;
#endif
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d101      	bne.n	80124e6 <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 80124e2:	2301      	movs	r3, #1
 80124e4:	e056      	b.n	8012594 <HAL_RNG_DeInit+0xc0>
  }

#if defined(RNG_CR_CONDRST)
  /* Clear Clock Error Detection bit when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, RNG_CED_ENABLE | RNG_CR_CONDRST);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80124f0:	f023 0320 	bic.w	r3, r3, #32
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	6812      	ldr	r2, [r2, #0]
 80124f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124fc:	6013      	str	r3, [r2, #0]

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 801250c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801250e:	f7fa fb95 	bl	800cc3c <HAL_GetTick>
 8012512:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012514:	e019      	b.n	801254a <HAL_RNG_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 8012516:	f7fa fb91 	bl	800cc3c <HAL_GetTick>
 801251a:	4602      	mov	r2, r0
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	2b02      	cmp	r3, #2
 8012522:	d912      	bls.n	801254a <HAL_RNG_DeInit+0x76>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801252e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012532:	d10a      	bne.n	801254a <HAL_RNG_DeInit+0x76>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2201      	movs	r2, #1
 8012538:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2202      	movs	r2, #2
 801253e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2200      	movs	r2, #0
 8012544:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8012546:	2301      	movs	r3, #1
 8012548:	e024      	b.n	8012594 <HAL_RNG_DeInit+0xc0>
  while(HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012558:	d0dd      	beq.n	8012516 <HAL_RNG_DeInit+0x42>
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	f022 020c 	bic.w	r2, r2, #12
 8012568:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	685a      	ldr	r2, [r3, #4]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012578:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7f7 fefc 	bl	800a378 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2200      	movs	r2, #0
 8012584:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2200      	movs	r2, #0
 801258a:	60da      	str	r2, [r3, #12]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2200      	movs	r2, #0
 8012590:	721a      	strb	r2, [r3, #8]

  /* Return the function status */
  return HAL_OK;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	3710      	adds	r7, #16
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80125a6:	2300      	movs	r3, #0
 80125a8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	7a1b      	ldrb	r3, [r3, #8]
 80125ae:	2b01      	cmp	r3, #1
 80125b0:	d101      	bne.n	80125b6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80125b2:	2302      	movs	r3, #2
 80125b4:	e03d      	b.n	8012632 <HAL_RNG_GenerateRandomNumber+0x96>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2201      	movs	r2, #1
 80125ba:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	7a5b      	ldrb	r3, [r3, #9]
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	2b01      	cmp	r3, #1
 80125c4:	d12c      	bne.n	8012620 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2202      	movs	r2, #2
 80125ca:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80125cc:	f7fa fb36 	bl	800cc3c <HAL_GetTick>
 80125d0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80125d2:	e011      	b.n	80125f8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80125d4:	f7fa fb32 	bl	800cc3c <HAL_GetTick>
 80125d8:	4602      	mov	r2, r0
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	1ad3      	subs	r3, r2, r3
 80125de:	2b02      	cmp	r3, #2
 80125e0:	d90a      	bls.n	80125f8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2201      	movs	r2, #1
 80125e6:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2202      	movs	r2, #2
 80125ec:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2200      	movs	r2, #0
 80125f2:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 80125f4:	2301      	movs	r3, #1
 80125f6:	e01c      	b.n	8012632 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	f003 0301 	and.w	r3, r3, #1
 8012602:	2b01      	cmp	r3, #1
 8012604:	d1e6      	bne.n	80125d4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	689a      	ldr	r2, [r3, #8]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	691a      	ldr	r2, [r3, #16]
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2201      	movs	r2, #1
 801261c:	725a      	strb	r2, [r3, #9]
 801261e:	e004      	b.n	801262a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2204      	movs	r2, #4
 8012624:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8012626:	2301      	movs	r3, #1
 8012628:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	721a      	strb	r2, [r3, #8]

  return status;
 8012630:	7bfb      	ldrb	r3, [r7, #15]
}
 8012632:	4618      	mov	r0, r3
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
	...

0801263c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012644:	2301      	movs	r3, #1
 8012646:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d07f      	beq.n	801274e <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012654:	b2db      	uxtb	r3, r3
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2200      	movs	r2, #0
 801265e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7f7 ff42 	bl	800a4ec <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 801266e:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2202      	movs	r2, #2
 8012674:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	22ca      	movs	r2, #202	; 0xca
 801267e:	625a      	str	r2, [r3, #36]	; 0x24
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	2253      	movs	r2, #83	; 0x53
 8012686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fbed 	bl	8012e68 <RTC_EnterInitMode>
 801268e:	4603      	mov	r3, r0
 8012690:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8012692:	7bfb      	ldrb	r3, [r7, #15]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d15a      	bne.n	801274e <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	699b      	ldr	r3, [r3, #24]
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	6812      	ldr	r2, [r2, #0]
 80126a2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80126a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126aa:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	6999      	ldr	r1, [r3, #24]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	689a      	ldr	r2, [r3, #8]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	695b      	ldr	r3, [r3, #20]
 80126ba:	431a      	orrs	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	69db      	ldr	r3, [r3, #28]
 80126c0:	431a      	orrs	r2, r3
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	430a      	orrs	r2, r1
 80126c8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	687a      	ldr	r2, [r7, #4]
 80126d0:	6912      	ldr	r2, [r2, #16]
 80126d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	6919      	ldr	r1, [r3, #16]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	041a      	lsls	r2, r3, #16
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	430a      	orrs	r2, r1
 80126e6:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80126e8:	4b1b      	ldr	r3, [pc, #108]	; (8012758 <HAL_RTC_Init+0x11c>)
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f8:	430b      	orrs	r3, r1
 80126fa:	4917      	ldr	r1, [pc, #92]	; (8012758 <HAL_RTC_Init+0x11c>)
 80126fc:	4313      	orrs	r3, r2
 80126fe:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f000 fbe7 	bl	8012ed4 <RTC_ExitInitMode>
 8012706:	4603      	mov	r3, r0
 8012708:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801270a:	7bfb      	ldrb	r3, [r7, #15]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d11e      	bne.n	801274e <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	699a      	ldr	r2, [r3, #24]
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 801271e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	6999      	ldr	r1, [r3, #24]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6a1b      	ldr	r3, [r3, #32]
 801272e:	431a      	orrs	r2, r3
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	699b      	ldr	r3, [r3, #24]
 8012734:	431a      	orrs	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	430a      	orrs	r2, r1
 801273c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	22ff      	movs	r2, #255	; 0xff
 8012744:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2201      	movs	r2, #1
 801274a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 801274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	40002800 	.word	0x40002800

0801275c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801275c:	b590      	push	{r4, r7, lr}
 801275e:	b087      	sub	sp, #28
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801276e:	2b01      	cmp	r3, #1
 8012770:	d101      	bne.n	8012776 <HAL_RTC_SetTime+0x1a>
 8012772:	2302      	movs	r3, #2
 8012774:	e08b      	b.n	801288e <HAL_RTC_SetTime+0x132>
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2201      	movs	r2, #1
 801277a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2202      	movs	r2, #2
 8012782:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	22ca      	movs	r2, #202	; 0xca
 801278c:	625a      	str	r2, [r3, #36]	; 0x24
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	2253      	movs	r2, #83	; 0x53
 8012794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012796:	68f8      	ldr	r0, [r7, #12]
 8012798:	f000 fb66 	bl	8012e68 <RTC_EnterInitMode>
 801279c:	4603      	mov	r3, r0
 801279e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80127a0:	7cfb      	ldrb	r3, [r7, #19]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d15e      	bne.n	8012864 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80127a6:	4b3c      	ldr	r3, [pc, #240]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80127ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127b2:	d057      	beq.n	8012864 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d125      	bne.n	8012806 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80127ba:	4b37      	ldr	r3, [pc, #220]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 80127bc:	699b      	ldr	r3, [r3, #24]
 80127be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d102      	bne.n	80127cc <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	2200      	movs	r2, #0
 80127ca:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f000 fbbd 	bl	8012f50 <RTC_ByteToBcd2>
 80127d6:	4603      	mov	r3, r0
 80127d8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	785b      	ldrb	r3, [r3, #1]
 80127de:	4618      	mov	r0, r3
 80127e0:	f000 fbb6 	bl	8012f50 <RTC_ByteToBcd2>
 80127e4:	4603      	mov	r3, r0
 80127e6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80127e8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	789b      	ldrb	r3, [r3, #2]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f000 fbae 	bl	8012f50 <RTC_ByteToBcd2>
 80127f4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80127f6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	78db      	ldrb	r3, [r3, #3]
 80127fe:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012800:	4313      	orrs	r3, r2
 8012802:	617b      	str	r3, [r7, #20]
 8012804:	e017      	b.n	8012836 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8012806:	4b24      	ldr	r3, [pc, #144]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 8012808:	699b      	ldr	r3, [r3, #24]
 801280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801280e:	2b00      	cmp	r3, #0
 8012810:	d102      	bne.n	8012818 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	2200      	movs	r2, #0
 8012816:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801281e:	68bb      	ldr	r3, [r7, #8]
 8012820:	785b      	ldrb	r3, [r3, #1]
 8012822:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012824:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8012826:	68ba      	ldr	r2, [r7, #8]
 8012828:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801282a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	78db      	ldrb	r3, [r3, #3]
 8012830:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8012832:	4313      	orrs	r3, r2
 8012834:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8012836:	4a18      	ldr	r2, [pc, #96]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801283e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012842:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8012844:	4b14      	ldr	r3, [pc, #80]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 8012846:	699b      	ldr	r3, [r3, #24]
 8012848:	4a13      	ldr	r2, [pc, #76]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 801284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801284e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8012850:	4b11      	ldr	r3, [pc, #68]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 8012852:	699a      	ldr	r2, [r3, #24]
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	68d9      	ldr	r1, [r3, #12]
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	430b      	orrs	r3, r1
 801285e:	490e      	ldr	r1, [pc, #56]	; (8012898 <HAL_RTC_SetTime+0x13c>)
 8012860:	4313      	orrs	r3, r2
 8012862:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8012864:	68f8      	ldr	r0, [r7, #12]
 8012866:	f000 fb35 	bl	8012ed4 <RTC_ExitInitMode>
 801286a:	4603      	mov	r3, r0
 801286c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	22ff      	movs	r2, #255	; 0xff
 8012874:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012876:	7cfb      	ldrb	r3, [r7, #19]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d103      	bne.n	8012884 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2201      	movs	r2, #1
 8012880:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	2200      	movs	r2, #0
 8012888:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 801288c:	7cfb      	ldrb	r3, [r7, #19]
}
 801288e:	4618      	mov	r0, r3
 8012890:	371c      	adds	r7, #28
 8012892:	46bd      	mov	sp, r7
 8012894:	bd90      	pop	{r4, r7, pc}
 8012896:	bf00      	nop
 8012898:	40002800 	.word	0x40002800

0801289c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b086      	sub	sp, #24
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	60f8      	str	r0, [r7, #12]
 80128a4:	60b9      	str	r1, [r7, #8]
 80128a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80128a8:	4b2c      	ldr	r3, [pc, #176]	; (801295c <HAL_RTC_GetTime+0xc0>)
 80128aa:	689a      	ldr	r2, [r3, #8]
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80128b0:	4b2a      	ldr	r3, [pc, #168]	; (801295c <HAL_RTC_GetTime+0xc0>)
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80128b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80128bc:	d049      	beq.n	8012952 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80128be:	4b27      	ldr	r3, [pc, #156]	; (801295c <HAL_RTC_GetTime+0xc0>)
 80128c0:	691b      	ldr	r3, [r3, #16]
 80128c2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80128ca:	4b24      	ldr	r3, [pc, #144]	; (801295c <HAL_RTC_GetTime+0xc0>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80128d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80128d6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	0c1b      	lsrs	r3, r3, #16
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128e2:	b2da      	uxtb	r2, r3
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	0a1b      	lsrs	r3, r3, #8
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	b2db      	uxtb	r3, r3
 80128fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012900:	b2da      	uxtb	r2, r3
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	0d9b      	lsrs	r3, r3, #22
 801290a:	b2db      	uxtb	r3, r3
 801290c:	f003 0301 	and.w	r3, r3, #1
 8012910:	b2da      	uxtb	r2, r3
 8012912:	68bb      	ldr	r3, [r7, #8]
 8012914:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d11a      	bne.n	8012952 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801291c:	68bb      	ldr	r3, [r7, #8]
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	4618      	mov	r0, r3
 8012922:	f000 fb35 	bl	8012f90 <RTC_Bcd2ToByte>
 8012926:	4603      	mov	r3, r0
 8012928:	461a      	mov	r2, r3
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	785b      	ldrb	r3, [r3, #1]
 8012932:	4618      	mov	r0, r3
 8012934:	f000 fb2c 	bl	8012f90 <RTC_Bcd2ToByte>
 8012938:	4603      	mov	r3, r0
 801293a:	461a      	mov	r2, r3
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	789b      	ldrb	r3, [r3, #2]
 8012944:	4618      	mov	r0, r3
 8012946:	f000 fb23 	bl	8012f90 <RTC_Bcd2ToByte>
 801294a:	4603      	mov	r3, r0
 801294c:	461a      	mov	r2, r3
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8012952:	2300      	movs	r3, #0
}
 8012954:	4618      	mov	r0, r3
 8012956:	3718      	adds	r7, #24
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	40002800 	.word	0x40002800

08012960 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012960:	b590      	push	{r4, r7, lr}
 8012962:	b087      	sub	sp, #28
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012972:	2b01      	cmp	r3, #1
 8012974:	d101      	bne.n	801297a <HAL_RTC_SetDate+0x1a>
 8012976:	2302      	movs	r3, #2
 8012978:	e074      	b.n	8012a64 <HAL_RTC_SetDate+0x104>
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2201      	movs	r2, #1
 801297e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2202      	movs	r2, #2
 8012986:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d10e      	bne.n	80129ae <HAL_RTC_SetDate+0x4e>
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	785b      	ldrb	r3, [r3, #1]
 8012994:	f003 0310 	and.w	r3, r3, #16
 8012998:	2b00      	cmp	r3, #0
 801299a:	d008      	beq.n	80129ae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	785b      	ldrb	r3, [r3, #1]
 80129a0:	f023 0310 	bic.w	r3, r3, #16
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	330a      	adds	r3, #10
 80129a8:	b2da      	uxtb	r2, r3
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d11c      	bne.n	80129ee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	78db      	ldrb	r3, [r3, #3]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 fac9 	bl	8012f50 <RTC_ByteToBcd2>
 80129be:	4603      	mov	r3, r0
 80129c0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	785b      	ldrb	r3, [r3, #1]
 80129c6:	4618      	mov	r0, r3
 80129c8:	f000 fac2 	bl	8012f50 <RTC_ByteToBcd2>
 80129cc:	4603      	mov	r3, r0
 80129ce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80129d0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	789b      	ldrb	r3, [r3, #2]
 80129d6:	4618      	mov	r0, r3
 80129d8:	f000 faba 	bl	8012f50 <RTC_ByteToBcd2>
 80129dc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80129de:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	781b      	ldrb	r3, [r3, #0]
 80129e6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80129e8:	4313      	orrs	r3, r2
 80129ea:	617b      	str	r3, [r7, #20]
 80129ec:	e00e      	b.n	8012a0c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	78db      	ldrb	r3, [r3, #3]
 80129f2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	785b      	ldrb	r3, [r3, #1]
 80129f8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80129fa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80129fc:	68ba      	ldr	r2, [r7, #8]
 80129fe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8012a00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8012a08:	4313      	orrs	r3, r2
 8012a0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	22ca      	movs	r2, #202	; 0xca
 8012a12:	625a      	str	r2, [r3, #36]	; 0x24
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2253      	movs	r2, #83	; 0x53
 8012a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012a1c:	68f8      	ldr	r0, [r7, #12]
 8012a1e:	f000 fa23 	bl	8012e68 <RTC_EnterInitMode>
 8012a22:	4603      	mov	r3, r0
 8012a24:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012a26:	7cfb      	ldrb	r3, [r7, #19]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d10b      	bne.n	8012a44 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8012a2c:	4a0f      	ldr	r2, [pc, #60]	; (8012a6c <HAL_RTC_SetDate+0x10c>)
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012a34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012a38:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012a3a:	68f8      	ldr	r0, [r7, #12]
 8012a3c:	f000 fa4a 	bl	8012ed4 <RTC_ExitInitMode>
 8012a40:	4603      	mov	r3, r0
 8012a42:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	22ff      	movs	r2, #255	; 0xff
 8012a4a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012a4c:	7cfb      	ldrb	r3, [r7, #19]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d103      	bne.n	8012a5a <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2201      	movs	r2, #1
 8012a56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8012a62:	7cfb      	ldrb	r3, [r7, #19]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	371c      	adds	r7, #28
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd90      	pop	{r4, r7, pc}
 8012a6c:	40002800 	.word	0x40002800

08012a70 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b086      	sub	sp, #24
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8012a7c:	4b22      	ldr	r3, [pc, #136]	; (8012b08 <HAL_RTC_GetDate+0x98>)
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012a84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012a88:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	0c1b      	lsrs	r3, r3, #16
 8012a8e:	b2da      	uxtb	r2, r3
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	0a1b      	lsrs	r3, r3, #8
 8012a98:	b2db      	uxtb	r3, r3
 8012a9a:	f003 031f 	and.w	r3, r3, #31
 8012a9e:	b2da      	uxtb	r2, r3
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012aac:	b2da      	uxtb	r2, r3
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	0b5b      	lsrs	r3, r3, #13
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	f003 0307 	and.w	r3, r3, #7
 8012abc:	b2da      	uxtb	r2, r3
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d11a      	bne.n	8012afe <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	78db      	ldrb	r3, [r3, #3]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f000 fa5f 	bl	8012f90 <RTC_Bcd2ToByte>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012ada:	68bb      	ldr	r3, [r7, #8]
 8012adc:	785b      	ldrb	r3, [r3, #1]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f000 fa56 	bl	8012f90 <RTC_Bcd2ToByte>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	789b      	ldrb	r3, [r3, #2]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f000 fa4d 	bl	8012f90 <RTC_Bcd2ToByte>
 8012af6:	4603      	mov	r3, r0
 8012af8:	461a      	mov	r2, r3
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012afe:	2300      	movs	r3, #0
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3718      	adds	r7, #24
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	40002800 	.word	0x40002800

08012b0c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8012b0c:	b590      	push	{r4, r7, lr}
 8012b0e:	b087      	sub	sp, #28
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0, binaryMode;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	d101      	bne.n	8012b2a <HAL_RTC_SetAlarm_IT+0x1e>
 8012b26:	2302      	movs	r3, #2
 8012b28:	e0e0      	b.n	8012cec <HAL_RTC_SetAlarm_IT+0x1e0>
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2202      	movs	r2, #2
 8012b36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8012b3a:	4b6e      	ldr	r3, [pc, #440]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012b3c:	68db      	ldr	r3, [r3, #12]
 8012b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012b42:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b4a:	d05c      	beq.n	8012c06 <HAL_RTC_SetAlarm_IT+0xfa>
  {
    if (Format == RTC_FORMAT_BIN)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d136      	bne.n	8012bc0 <HAL_RTC_SetAlarm_IT+0xb4>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8012b52:	4b68      	ldr	r3, [pc, #416]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012b54:	699b      	ldr	r3, [r3, #24]
 8012b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d102      	bne.n	8012b64 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	2200      	movs	r2, #0
 8012b62:	70da      	strb	r2, [r3, #3]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f000 f9f1 	bl	8012f50 <RTC_ByteToBcd2>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	785b      	ldrb	r3, [r3, #1]
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 f9ea 	bl	8012f50 <RTC_ByteToBcd2>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012b80:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012b82:	68bb      	ldr	r3, [r7, #8]
 8012b84:	789b      	ldrb	r3, [r3, #2]
 8012b86:	4618      	mov	r0, r3
 8012b88:	f000 f9e2 	bl	8012f50 <RTC_ByteToBcd2>
 8012b8c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012b8e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	78db      	ldrb	r3, [r3, #3]
 8012b96:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012b98:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f000 f9d4 	bl	8012f50 <RTC_ByteToBcd2>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012bac:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012bb4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012bba:	4313      	orrs	r3, r2
 8012bbc:	617b      	str	r3, [r7, #20]
 8012bbe:	e022      	b.n	8012c06 <HAL_RTC_SetAlarm_IT+0xfa>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8012bc0:	4b4c      	ldr	r3, [pc, #304]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012bc2:	699b      	ldr	r3, [r3, #24]
 8012bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d102      	bne.n	8012bd2 <HAL_RTC_SetAlarm_IT+0xc6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	70da      	strb	r2, [r3, #3]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	781b      	ldrb	r3, [r3, #0]
 8012bd6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	785b      	ldrb	r3, [r3, #1]
 8012bdc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012bde:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012be0:	68ba      	ldr	r2, [r7, #8]
 8012be2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8012be4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	78db      	ldrb	r3, [r3, #3]
 8012bea:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8012bec:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012bf4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8012bf6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8012bfc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8012c02:	4313      	orrs	r3, r2
 8012c04:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	22ca      	movs	r2, #202	; 0xca
 8012c0c:	625a      	str	r2, [r3, #36]	; 0x24
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2253      	movs	r2, #83	; 0x53
 8012c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c1e:	d126      	bne.n	8012c6e <HAL_RTC_SetAlarm_IT+0x162>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8012c20:	4b34      	ldr	r3, [pc, #208]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c22:	699b      	ldr	r3, [r3, #24]
 8012c24:	4a33      	ldr	r2, [pc, #204]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8012c2a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8012c2c:	4b31      	ldr	r3, [pc, #196]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c2e:	2201      	movs	r2, #1
 8012c30:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c38:	d107      	bne.n	8012c4a <HAL_RTC_SetAlarm_IT+0x13e>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8012c3a:	68bb      	ldr	r3, [r7, #8]
 8012c3c:	6a1a      	ldr	r2, [r3, #32]
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	69db      	ldr	r3, [r3, #28]
 8012c42:	492c      	ldr	r1, [pc, #176]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c44:	4313      	orrs	r3, r2
 8012c46:	644b      	str	r3, [r1, #68]	; 0x44
 8012c48:	e006      	b.n	8012c58 <HAL_RTC_SetAlarm_IT+0x14c>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8012c4a:	4a2a      	ldr	r2, [pc, #168]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8012c50:	4a28      	ldr	r2, [pc, #160]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	6a1b      	ldr	r3, [r3, #32]
 8012c56:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8012c58:	4a26      	ldr	r2, [pc, #152]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c5a:	68bb      	ldr	r3, [r7, #8]
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8012c60:	4b24      	ldr	r3, [pc, #144]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c62:	699b      	ldr	r3, [r3, #24]
 8012c64:	4a23      	ldr	r2, [pc, #140]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c66:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8012c6a:	6193      	str	r3, [r2, #24]
 8012c6c:	e025      	b.n	8012cba <HAL_RTC_SetAlarm_IT+0x1ae>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8012c6e:	4b21      	ldr	r3, [pc, #132]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c70:	699b      	ldr	r3, [r3, #24]
 8012c72:	4a20      	ldr	r2, [pc, #128]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c74:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8012c78:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8012c7a:	4b1e      	ldr	r3, [pc, #120]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c7c:	2202      	movs	r2, #2
 8012c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012c86:	d107      	bne.n	8012c98 <HAL_RTC_SetAlarm_IT+0x18c>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	6a1a      	ldr	r2, [r3, #32]
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	69db      	ldr	r3, [r3, #28]
 8012c90:	4918      	ldr	r1, [pc, #96]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c92:	4313      	orrs	r3, r2
 8012c94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012c96:	e006      	b.n	8012ca6 <HAL_RTC_SetAlarm_IT+0x19a>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8012c98:	4a16      	ldr	r2, [pc, #88]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8012c9e:	4a15      	ldr	r2, [pc, #84]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	6a1b      	ldr	r3, [r3, #32]
 8012ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8012ca6:	4a13      	ldr	r2, [pc, #76]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	6753      	str	r3, [r2, #116]	; 0x74

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8012cae:	4b11      	ldr	r3, [pc, #68]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012cb0:	699b      	ldr	r3, [r3, #24]
 8012cb2:	4a10      	ldr	r2, [pc, #64]	; (8012cf4 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8012cb4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8012cb8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8012cba:	4b0f      	ldr	r3, [pc, #60]	; (8012cf8 <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a0e      	ldr	r2, [pc, #56]	; (8012cf8 <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012cc4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8012cc6:	4b0c      	ldr	r3, [pc, #48]	; (8012cf8 <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012cc8:	689b      	ldr	r3, [r3, #8]
 8012cca:	4a0b      	ldr	r2, [pc, #44]	; (8012cf8 <HAL_RTC_SetAlarm_IT+0x1ec>)
 8012ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012cd0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	22ff      	movs	r2, #255	; 0xff
 8012cd8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2201      	movs	r2, #1
 8012cde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8012cea:	2300      	movs	r3, #0
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	371c      	adds	r7, #28
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd90      	pop	{r4, r7, pc}
 8012cf4:	40002800 	.word	0x40002800
 8012cf8:	40010400 	.word	0x40010400

08012cfc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b083      	sub	sp, #12
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d101      	bne.n	8012d14 <HAL_RTC_DeactivateAlarm+0x18>
 8012d10:	2302      	movs	r3, #2
 8012d12:	e04d      	b.n	8012db0 <HAL_RTC_DeactivateAlarm+0xb4>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2202      	movs	r2, #2
 8012d20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	22ca      	movs	r2, #202	; 0xca
 8012d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2253      	movs	r2, #83	; 0x53
 8012d32:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d3a:	d116      	bne.n	8012d6a <HAL_RTC_DeactivateAlarm+0x6e>
  {
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8012d3c:	4b1f      	ldr	r3, [pc, #124]	; (8012dbc <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d40:	4a1e      	ldr	r2, [pc, #120]	; (8012dbc <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d46:	6453      	str	r3, [r2, #68]	; 0x44
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	699a      	ldr	r2, [r3, #24]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012d56:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	699a      	ldr	r2, [r3, #24]
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012d66:	619a      	str	r2, [r3, #24]
 8012d68:	e015      	b.n	8012d96 <HAL_RTC_DeactivateAlarm+0x9a>
  }
  else
  {
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
 8012d6a:	4b14      	ldr	r3, [pc, #80]	; (8012dbc <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d6e:	4a13      	ldr	r2, [pc, #76]	; (8012dbc <HAL_RTC_DeactivateAlarm+0xc0>)
 8012d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d74:	64d3      	str	r3, [r2, #76]	; 0x4c
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	699a      	ldr	r2, [r3, #24]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012d84:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	699a      	ldr	r2, [r3, #24]
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012d94:	619a      	str	r2, [r3, #24]
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	22ff      	movs	r2, #255	; 0xff
 8012d9c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2200      	movs	r2, #0
 8012daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	370c      	adds	r7, #12
 8012db4:	46bd      	mov	sp, r7
 8012db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dba:	4770      	bx	lr
 8012dbc:	40002800 	.word	0x40002800

08012dc0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b084      	sub	sp, #16
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8012dc8:	4b13      	ldr	r3, [pc, #76]	; (8012e18 <HAL_RTC_AlarmIRQHandler+0x58>)
 8012dca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8012dce:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dd6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	f003 0301 	and.w	r3, r3, #1
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d006      	beq.n	8012df0 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2201      	movs	r2, #1
 8012de8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7f5 fcb4 	bl	8008758 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	f003 0302 	and.w	r3, r3, #2
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d006      	beq.n	8012e08 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	2202      	movs	r2, #2
 8012e00:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f7f5 fc2a 	bl	800865c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8012e10:	bf00      	nop
 8012e12:	3710      	adds	r7, #16
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	40010400 	.word	0x40010400

08012e1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	68da      	ldr	r2, [r3, #12]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012e32:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8012e34:	f7f9 ff02 	bl	800cc3c <HAL_GetTick>
 8012e38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8012e3a:	e009      	b.n	8012e50 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012e3c:	f7f9 fefe 	bl	800cc3c <HAL_GetTick>
 8012e40:	4602      	mov	r2, r0
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012e4a:	d901      	bls.n	8012e50 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012e4c:	2303      	movs	r3, #3
 8012e4e:	e007      	b.n	8012e60 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	68db      	ldr	r3, [r3, #12]
 8012e56:	f003 0320 	and.w	r3, r3, #32
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d0ee      	beq.n	8012e3c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8012e5e:	2300      	movs	r3, #0
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3710      	adds	r7, #16
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}

08012e68 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012e70:	2300      	movs	r3, #0
 8012e72:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d123      	bne.n	8012eca <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	68da      	ldr	r2, [r3, #12]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8012e90:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8012e92:	f7f9 fed3 	bl	800cc3c <HAL_GetTick>
 8012e96:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012e98:	e00d      	b.n	8012eb6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8012e9a:	f7f9 fecf 	bl	800cc3c <HAL_GetTick>
 8012e9e:	4602      	mov	r2, r0
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012ea8:	d905      	bls.n	8012eb6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8012eaa:	2303      	movs	r3, #3
 8012eac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2203      	movs	r2, #3
 8012eb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d102      	bne.n	8012eca <RTC_EnterInitMode+0x62>
 8012ec4:	7bfb      	ldrb	r3, [r7, #15]
 8012ec6:	2b03      	cmp	r3, #3
 8012ec8:	d1e7      	bne.n	8012e9a <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8012eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012edc:	2300      	movs	r3, #0
 8012ede:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8012ee0:	4b1a      	ldr	r3, [pc, #104]	; (8012f4c <RTC_ExitInitMode+0x78>)
 8012ee2:	68db      	ldr	r3, [r3, #12]
 8012ee4:	4a19      	ldr	r2, [pc, #100]	; (8012f4c <RTC_ExitInitMode+0x78>)
 8012ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012eea:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8012eec:	4b17      	ldr	r3, [pc, #92]	; (8012f4c <RTC_ExitInitMode+0x78>)
 8012eee:	699b      	ldr	r3, [r3, #24]
 8012ef0:	f003 0320 	and.w	r3, r3, #32
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10c      	bne.n	8012f12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f7ff ff8f 	bl	8012e1c <HAL_RTC_WaitForSynchro>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d01e      	beq.n	8012f42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2203      	movs	r2, #3
 8012f08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8012f0c:	2303      	movs	r3, #3
 8012f0e:	73fb      	strb	r3, [r7, #15]
 8012f10:	e017      	b.n	8012f42 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012f12:	4b0e      	ldr	r3, [pc, #56]	; (8012f4c <RTC_ExitInitMode+0x78>)
 8012f14:	699b      	ldr	r3, [r3, #24]
 8012f16:	4a0d      	ldr	r2, [pc, #52]	; (8012f4c <RTC_ExitInitMode+0x78>)
 8012f18:	f023 0320 	bic.w	r3, r3, #32
 8012f1c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f7ff ff7c 	bl	8012e1c <HAL_RTC_WaitForSynchro>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d005      	beq.n	8012f36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2203      	movs	r2, #3
 8012f2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 8012f32:	2303      	movs	r3, #3
 8012f34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012f36:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <RTC_ExitInitMode+0x78>)
 8012f38:	699b      	ldr	r3, [r3, #24]
 8012f3a:	4a04      	ldr	r2, [pc, #16]	; (8012f4c <RTC_ExitInitMode+0x78>)
 8012f3c:	f043 0320 	orr.w	r3, r3, #32
 8012f40:	6193      	str	r3, [r2, #24]
  }

  return status;
 8012f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3710      	adds	r7, #16
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	40002800 	.word	0x40002800

08012f50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012f50:	b480      	push	{r7}
 8012f52:	b085      	sub	sp, #20
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	4603      	mov	r3, r0
 8012f58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8012f5e:	79fb      	ldrb	r3, [r7, #7]
 8012f60:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8012f62:	e005      	b.n	8012f70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	3301      	adds	r3, #1
 8012f68:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8012f6a:	7afb      	ldrb	r3, [r7, #11]
 8012f6c:	3b0a      	subs	r3, #10
 8012f6e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8012f70:	7afb      	ldrb	r3, [r7, #11]
 8012f72:	2b09      	cmp	r3, #9
 8012f74:	d8f6      	bhi.n	8012f64 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	011b      	lsls	r3, r3, #4
 8012f7c:	b2da      	uxtb	r2, r3
 8012f7e:	7afb      	ldrb	r3, [r7, #11]
 8012f80:	4313      	orrs	r3, r2
 8012f82:	b2db      	uxtb	r3, r3
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3714      	adds	r7, #20
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8e:	4770      	bx	lr

08012f90 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b085      	sub	sp, #20
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	4603      	mov	r3, r0
 8012f98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8012f9a:	79fb      	ldrb	r3, [r7, #7]
 8012f9c:	091b      	lsrs	r3, r3, #4
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	0092      	lsls	r2, r2, #2
 8012fa4:	4413      	add	r3, r2
 8012fa6:	005b      	lsls	r3, r3, #1
 8012fa8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	f003 030f 	and.w	r3, r3, #15
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	7bfb      	ldrb	r3, [r7, #15]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	b2db      	uxtb	r3, r3
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3714      	adds	r7, #20
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc2:	4770      	bx	lr

08012fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d101      	bne.n	8012fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	e095      	b.n	8013102 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d108      	bne.n	8012ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012fe6:	d009      	beq.n	8012ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2200      	movs	r2, #0
 8012fec:	61da      	str	r2, [r3, #28]
 8012fee:	e005      	b.n	8012ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2200      	movs	r2, #0
 8012ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013008:	b2db      	uxtb	r3, r3
 801300a:	2b00      	cmp	r3, #0
 801300c:	d106      	bne.n	801301c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2200      	movs	r2, #0
 8013012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f7f7 fae4 	bl	800a5e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2202      	movs	r2, #2
 8013020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	681a      	ldr	r2, [r3, #0]
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013032:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	68db      	ldr	r3, [r3, #12]
 8013038:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801303c:	d902      	bls.n	8013044 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801303e:	2300      	movs	r3, #0
 8013040:	60fb      	str	r3, [r7, #12]
 8013042:	e002      	b.n	801304a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013048:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	68db      	ldr	r3, [r3, #12]
 801304e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013052:	d007      	beq.n	8013064 <HAL_SPI_Init+0xa0>
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801305c:	d002      	beq.n	8013064 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2200      	movs	r2, #0
 8013062:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	689b      	ldr	r3, [r3, #8]
 8013070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013074:	431a      	orrs	r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	f003 0302 	and.w	r3, r3, #2
 801307e:	431a      	orrs	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	695b      	ldr	r3, [r3, #20]
 8013084:	f003 0301 	and.w	r3, r3, #1
 8013088:	431a      	orrs	r2, r3
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013092:	431a      	orrs	r2, r3
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801309c:	431a      	orrs	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a1b      	ldr	r3, [r3, #32]
 80130a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130a6:	ea42 0103 	orr.w	r1, r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	430a      	orrs	r2, r1
 80130b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	699b      	ldr	r3, [r3, #24]
 80130be:	0c1b      	lsrs	r3, r3, #16
 80130c0:	f003 0204 	and.w	r2, r3, #4
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c8:	f003 0310 	and.w	r3, r3, #16
 80130cc:	431a      	orrs	r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130d2:	f003 0308 	and.w	r3, r3, #8
 80130d6:	431a      	orrs	r2, r3
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80130e0:	ea42 0103 	orr.w	r1, r2, r3
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	430a      	orrs	r2, r1
 80130f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2200      	movs	r2, #0
 80130f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2201      	movs	r2, #1
 80130fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013100:	2300      	movs	r3, #0
}
 8013102:	4618      	mov	r0, r3
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}

0801310a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801310a:	b580      	push	{r7, lr}
 801310c:	b088      	sub	sp, #32
 801310e:	af00      	add	r7, sp, #0
 8013110:	60f8      	str	r0, [r7, #12]
 8013112:	60b9      	str	r1, [r7, #8]
 8013114:	603b      	str	r3, [r7, #0]
 8013116:	4613      	mov	r3, r2
 8013118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801311a:	2300      	movs	r3, #0
 801311c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013124:	2b01      	cmp	r3, #1
 8013126:	d101      	bne.n	801312c <HAL_SPI_Transmit+0x22>
 8013128:	2302      	movs	r3, #2
 801312a:	e158      	b.n	80133de <HAL_SPI_Transmit+0x2d4>
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2201      	movs	r2, #1
 8013130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013134:	f7f9 fd82 	bl	800cc3c <HAL_GetTick>
 8013138:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801313a:	88fb      	ldrh	r3, [r7, #6]
 801313c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013144:	b2db      	uxtb	r3, r3
 8013146:	2b01      	cmp	r3, #1
 8013148:	d002      	beq.n	8013150 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801314a:	2302      	movs	r3, #2
 801314c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801314e:	e13d      	b.n	80133cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d002      	beq.n	801315c <HAL_SPI_Transmit+0x52>
 8013156:	88fb      	ldrh	r3, [r7, #6]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d102      	bne.n	8013162 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801315c:	2301      	movs	r3, #1
 801315e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013160:	e134      	b.n	80133cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2203      	movs	r2, #3
 8013166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2200      	movs	r2, #0
 801316e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	68ba      	ldr	r2, [r7, #8]
 8013174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	88fa      	ldrh	r2, [r7, #6]
 801317a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	88fa      	ldrh	r2, [r7, #6]
 8013180:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2200      	movs	r2, #0
 8013186:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	2200      	movs	r2, #0
 801318c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2200      	movs	r2, #0
 8013194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2200      	movs	r2, #0
 801319c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2200      	movs	r2, #0
 80131a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	689b      	ldr	r3, [r3, #8]
 80131a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131ac:	d10f      	bne.n	80131ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80131bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80131cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131d8:	2b40      	cmp	r3, #64	; 0x40
 80131da:	d007      	beq.n	80131ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80131ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80131f4:	d94b      	bls.n	801328e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	685b      	ldr	r3, [r3, #4]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d002      	beq.n	8013204 <HAL_SPI_Transmit+0xfa>
 80131fe:	8afb      	ldrh	r3, [r7, #22]
 8013200:	2b01      	cmp	r3, #1
 8013202:	d13e      	bne.n	8013282 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013208:	881a      	ldrh	r2, [r3, #0]
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013214:	1c9a      	adds	r2, r3, #2
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801321e:	b29b      	uxth	r3, r3
 8013220:	3b01      	subs	r3, #1
 8013222:	b29a      	uxth	r2, r3
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013228:	e02b      	b.n	8013282 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	689b      	ldr	r3, [r3, #8]
 8013230:	f003 0302 	and.w	r3, r3, #2
 8013234:	2b02      	cmp	r3, #2
 8013236:	d112      	bne.n	801325e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801323c:	881a      	ldrh	r2, [r3, #0]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013248:	1c9a      	adds	r2, r3, #2
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013252:	b29b      	uxth	r3, r3
 8013254:	3b01      	subs	r3, #1
 8013256:	b29a      	uxth	r2, r3
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801325c:	e011      	b.n	8013282 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801325e:	f7f9 fced 	bl	800cc3c <HAL_GetTick>
 8013262:	4602      	mov	r2, r0
 8013264:	69bb      	ldr	r3, [r7, #24]
 8013266:	1ad3      	subs	r3, r2, r3
 8013268:	683a      	ldr	r2, [r7, #0]
 801326a:	429a      	cmp	r2, r3
 801326c:	d803      	bhi.n	8013276 <HAL_SPI_Transmit+0x16c>
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013274:	d102      	bne.n	801327c <HAL_SPI_Transmit+0x172>
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d102      	bne.n	8013282 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801327c:	2303      	movs	r3, #3
 801327e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013280:	e0a4      	b.n	80133cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013286:	b29b      	uxth	r3, r3
 8013288:	2b00      	cmp	r3, #0
 801328a:	d1ce      	bne.n	801322a <HAL_SPI_Transmit+0x120>
 801328c:	e07c      	b.n	8013388 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	685b      	ldr	r3, [r3, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d002      	beq.n	801329c <HAL_SPI_Transmit+0x192>
 8013296:	8afb      	ldrh	r3, [r7, #22]
 8013298:	2b01      	cmp	r3, #1
 801329a:	d170      	bne.n	801337e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d912      	bls.n	80132cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132aa:	881a      	ldrh	r2, [r3, #0]
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132b6:	1c9a      	adds	r2, r3, #2
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132c0:	b29b      	uxth	r3, r3
 80132c2:	3b02      	subs	r3, #2
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80132ca:	e058      	b.n	801337e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	330c      	adds	r3, #12
 80132d6:	7812      	ldrb	r2, [r2, #0]
 80132d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132de:	1c5a      	adds	r2, r3, #1
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	3b01      	subs	r3, #1
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80132f2:	e044      	b.n	801337e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	689b      	ldr	r3, [r3, #8]
 80132fa:	f003 0302 	and.w	r3, r3, #2
 80132fe:	2b02      	cmp	r3, #2
 8013300:	d12b      	bne.n	801335a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013306:	b29b      	uxth	r3, r3
 8013308:	2b01      	cmp	r3, #1
 801330a:	d912      	bls.n	8013332 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013310:	881a      	ldrh	r2, [r3, #0]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801331c:	1c9a      	adds	r2, r3, #2
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013326:	b29b      	uxth	r3, r3
 8013328:	3b02      	subs	r3, #2
 801332a:	b29a      	uxth	r2, r3
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013330:	e025      	b.n	801337e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	330c      	adds	r3, #12
 801333c:	7812      	ldrb	r2, [r2, #0]
 801333e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013344:	1c5a      	adds	r2, r3, #1
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801334e:	b29b      	uxth	r3, r3
 8013350:	3b01      	subs	r3, #1
 8013352:	b29a      	uxth	r2, r3
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013358:	e011      	b.n	801337e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801335a:	f7f9 fc6f 	bl	800cc3c <HAL_GetTick>
 801335e:	4602      	mov	r2, r0
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	683a      	ldr	r2, [r7, #0]
 8013366:	429a      	cmp	r2, r3
 8013368:	d803      	bhi.n	8013372 <HAL_SPI_Transmit+0x268>
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013370:	d102      	bne.n	8013378 <HAL_SPI_Transmit+0x26e>
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d102      	bne.n	801337e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8013378:	2303      	movs	r3, #3
 801337a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801337c:	e026      	b.n	80133cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013382:	b29b      	uxth	r3, r3
 8013384:	2b00      	cmp	r3, #0
 8013386:	d1b5      	bne.n	80132f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013388:	69ba      	ldr	r2, [r7, #24]
 801338a:	6839      	ldr	r1, [r7, #0]
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	f000 fa69 	bl	8013864 <SPI_EndRxTxTransaction>
 8013392:	4603      	mov	r3, r0
 8013394:	2b00      	cmp	r3, #0
 8013396:	d002      	beq.n	801339e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2220      	movs	r2, #32
 801339c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	689b      	ldr	r3, [r3, #8]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d10a      	bne.n	80133bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80133a6:	2300      	movs	r3, #0
 80133a8:	613b      	str	r3, [r7, #16]
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	68db      	ldr	r3, [r3, #12]
 80133b0:	613b      	str	r3, [r7, #16]
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	689b      	ldr	r3, [r3, #8]
 80133b8:	613b      	str	r3, [r7, #16]
 80133ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d002      	beq.n	80133ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80133c4:	2301      	movs	r3, #1
 80133c6:	77fb      	strb	r3, [r7, #31]
 80133c8:	e000      	b.n	80133cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80133ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	2201      	movs	r2, #1
 80133d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2200      	movs	r2, #0
 80133d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80133dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80133de:	4618      	mov	r0, r3
 80133e0:	3720      	adds	r7, #32
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
	...

080133e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b088      	sub	sp, #32
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	689b      	ldr	r3, [r3, #8]
 80133fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013400:	69bb      	ldr	r3, [r7, #24]
 8013402:	099b      	lsrs	r3, r3, #6
 8013404:	f003 0301 	and.w	r3, r3, #1
 8013408:	2b00      	cmp	r3, #0
 801340a:	d10f      	bne.n	801342c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801340c:	69bb      	ldr	r3, [r7, #24]
 801340e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00a      	beq.n	801342c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	099b      	lsrs	r3, r3, #6
 801341a:	f003 0301 	and.w	r3, r3, #1
 801341e:	2b00      	cmp	r3, #0
 8013420:	d004      	beq.n	801342c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	4798      	blx	r3
    return;
 801342a:	e0d7      	b.n	80135dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	085b      	lsrs	r3, r3, #1
 8013430:	f003 0301 	and.w	r3, r3, #1
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00a      	beq.n	801344e <HAL_SPI_IRQHandler+0x66>
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	09db      	lsrs	r3, r3, #7
 801343c:	f003 0301 	and.w	r3, r3, #1
 8013440:	2b00      	cmp	r3, #0
 8013442:	d004      	beq.n	801344e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	4798      	blx	r3
    return;
 801344c:	e0c6      	b.n	80135dc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801344e:	69bb      	ldr	r3, [r7, #24]
 8013450:	095b      	lsrs	r3, r3, #5
 8013452:	f003 0301 	and.w	r3, r3, #1
 8013456:	2b00      	cmp	r3, #0
 8013458:	d10c      	bne.n	8013474 <HAL_SPI_IRQHandler+0x8c>
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	099b      	lsrs	r3, r3, #6
 801345e:	f003 0301 	and.w	r3, r3, #1
 8013462:	2b00      	cmp	r3, #0
 8013464:	d106      	bne.n	8013474 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	0a1b      	lsrs	r3, r3, #8
 801346a:	f003 0301 	and.w	r3, r3, #1
 801346e:	2b00      	cmp	r3, #0
 8013470:	f000 80b4 	beq.w	80135dc <HAL_SPI_IRQHandler+0x1f4>
 8013474:	69fb      	ldr	r3, [r7, #28]
 8013476:	095b      	lsrs	r3, r3, #5
 8013478:	f003 0301 	and.w	r3, r3, #1
 801347c:	2b00      	cmp	r3, #0
 801347e:	f000 80ad 	beq.w	80135dc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	099b      	lsrs	r3, r3, #6
 8013486:	f003 0301 	and.w	r3, r3, #1
 801348a:	2b00      	cmp	r3, #0
 801348c:	d023      	beq.n	80134d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013494:	b2db      	uxtb	r3, r3
 8013496:	2b03      	cmp	r3, #3
 8013498:	d011      	beq.n	80134be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801349e:	f043 0204 	orr.w	r2, r3, #4
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80134a6:	2300      	movs	r3, #0
 80134a8:	617b      	str	r3, [r7, #20]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	617b      	str	r3, [r7, #20]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	617b      	str	r3, [r7, #20]
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	e00b      	b.n	80134d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80134be:	2300      	movs	r3, #0
 80134c0:	613b      	str	r3, [r7, #16]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	613b      	str	r3, [r7, #16]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	613b      	str	r3, [r7, #16]
 80134d2:	693b      	ldr	r3, [r7, #16]
        return;
 80134d4:	e082      	b.n	80135dc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80134d6:	69bb      	ldr	r3, [r7, #24]
 80134d8:	095b      	lsrs	r3, r3, #5
 80134da:	f003 0301 	and.w	r3, r3, #1
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d014      	beq.n	801350c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134e6:	f043 0201 	orr.w	r2, r3, #1
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80134ee:	2300      	movs	r3, #0
 80134f0:	60fb      	str	r3, [r7, #12]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	689b      	ldr	r3, [r3, #8]
 80134f8:	60fb      	str	r3, [r7, #12]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	0a1b      	lsrs	r3, r3, #8
 8013510:	f003 0301 	and.w	r3, r3, #1
 8013514:	2b00      	cmp	r3, #0
 8013516:	d00c      	beq.n	8013532 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801351c:	f043 0208 	orr.w	r2, r3, #8
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013524:	2300      	movs	r3, #0
 8013526:	60bb      	str	r3, [r7, #8]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	60bb      	str	r3, [r7, #8]
 8013530:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013536:	2b00      	cmp	r3, #0
 8013538:	d04f      	beq.n	80135da <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	685a      	ldr	r2, [r3, #4]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013548:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2201      	movs	r2, #1
 801354e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8013552:	69fb      	ldr	r3, [r7, #28]
 8013554:	f003 0302 	and.w	r3, r3, #2
 8013558:	2b00      	cmp	r3, #0
 801355a:	d104      	bne.n	8013566 <HAL_SPI_IRQHandler+0x17e>
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	f003 0301 	and.w	r3, r3, #1
 8013562:	2b00      	cmp	r3, #0
 8013564:	d034      	beq.n	80135d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	685a      	ldr	r2, [r3, #4]
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	f022 0203 	bic.w	r2, r2, #3
 8013574:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801357a:	2b00      	cmp	r3, #0
 801357c:	d011      	beq.n	80135a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013582:	4a18      	ldr	r2, [pc, #96]	; (80135e4 <HAL_SPI_IRQHandler+0x1fc>)
 8013584:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801358a:	4618      	mov	r0, r3
 801358c:	f7fb fde9 	bl	800f162 <HAL_DMA_Abort_IT>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d005      	beq.n	80135a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801359a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d016      	beq.n	80135d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135ae:	4a0d      	ldr	r2, [pc, #52]	; (80135e4 <HAL_SPI_IRQHandler+0x1fc>)
 80135b0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fb fdd3 	bl	800f162 <HAL_DMA_Abort_IT>
 80135bc:	4603      	mov	r3, r0
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d00a      	beq.n	80135d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80135ce:	e003      	b.n	80135d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f000 f809 	bl	80135e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80135d6:	e000      	b.n	80135da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80135d8:	bf00      	nop
    return;
 80135da:	bf00      	nop
  }
}
 80135dc:	3720      	adds	r7, #32
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	080135fd 	.word	0x080135fd

080135e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b083      	sub	sp, #12
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80135f0:	bf00      	nop
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b084      	sub	sp, #16
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013608:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	2200      	movs	r2, #0
 801360e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2200      	movs	r2, #0
 8013616:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013618:	68f8      	ldr	r0, [r7, #12]
 801361a:	f7ff ffe5 	bl	80135e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801361e:	bf00      	nop
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
	...

08013628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b088      	sub	sp, #32
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	603b      	str	r3, [r7, #0]
 8013634:	4613      	mov	r3, r2
 8013636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013638:	f7f9 fb00 	bl	800cc3c <HAL_GetTick>
 801363c:	4602      	mov	r2, r0
 801363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013640:	1a9b      	subs	r3, r3, r2
 8013642:	683a      	ldr	r2, [r7, #0]
 8013644:	4413      	add	r3, r2
 8013646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013648:	f7f9 faf8 	bl	800cc3c <HAL_GetTick>
 801364c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801364e:	4b39      	ldr	r3, [pc, #228]	; (8013734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	015b      	lsls	r3, r3, #5
 8013654:	0d1b      	lsrs	r3, r3, #20
 8013656:	69fa      	ldr	r2, [r7, #28]
 8013658:	fb02 f303 	mul.w	r3, r2, r3
 801365c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801365e:	e054      	b.n	801370a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013666:	d050      	beq.n	801370a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013668:	f7f9 fae8 	bl	800cc3c <HAL_GetTick>
 801366c:	4602      	mov	r2, r0
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	1ad3      	subs	r3, r2, r3
 8013672:	69fa      	ldr	r2, [r7, #28]
 8013674:	429a      	cmp	r2, r3
 8013676:	d902      	bls.n	801367e <SPI_WaitFlagStateUntilTimeout+0x56>
 8013678:	69fb      	ldr	r3, [r7, #28]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d13d      	bne.n	80136fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	685a      	ldr	r2, [r3, #4]
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801368c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013696:	d111      	bne.n	80136bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	689b      	ldr	r3, [r3, #8]
 801369c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80136a0:	d004      	beq.n	80136ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	689b      	ldr	r3, [r3, #8]
 80136a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80136aa:	d107      	bne.n	80136bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80136ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80136c4:	d10f      	bne.n	80136e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	681a      	ldr	r2, [r3, #0]
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80136d4:	601a      	str	r2, [r3, #0]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80136e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2201      	movs	r2, #1
 80136ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80136f6:	2303      	movs	r3, #3
 80136f8:	e017      	b.n	801372a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d101      	bne.n	8013704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013700:	2300      	movs	r3, #0
 8013702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	3b01      	subs	r3, #1
 8013708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	689a      	ldr	r2, [r3, #8]
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	4013      	ands	r3, r2
 8013714:	68ba      	ldr	r2, [r7, #8]
 8013716:	429a      	cmp	r2, r3
 8013718:	bf0c      	ite	eq
 801371a:	2301      	moveq	r3, #1
 801371c:	2300      	movne	r3, #0
 801371e:	b2db      	uxtb	r3, r3
 8013720:	461a      	mov	r2, r3
 8013722:	79fb      	ldrb	r3, [r7, #7]
 8013724:	429a      	cmp	r2, r3
 8013726:	d19b      	bne.n	8013660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013728:	2300      	movs	r3, #0
}
 801372a:	4618      	mov	r0, r3
 801372c:	3720      	adds	r7, #32
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	200000b4 	.word	0x200000b4

08013738 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b08a      	sub	sp, #40	; 0x28
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	607a      	str	r2, [r7, #4]
 8013744:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8013746:	2300      	movs	r3, #0
 8013748:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801374a:	f7f9 fa77 	bl	800cc3c <HAL_GetTick>
 801374e:	4602      	mov	r2, r0
 8013750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013752:	1a9b      	subs	r3, r3, r2
 8013754:	683a      	ldr	r2, [r7, #0]
 8013756:	4413      	add	r3, r2
 8013758:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801375a:	f7f9 fa6f 	bl	800cc3c <HAL_GetTick>
 801375e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	330c      	adds	r3, #12
 8013766:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8013768:	4b3d      	ldr	r3, [pc, #244]	; (8013860 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801376a:	681a      	ldr	r2, [r3, #0]
 801376c:	4613      	mov	r3, r2
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	4413      	add	r3, r2
 8013772:	00da      	lsls	r2, r3, #3
 8013774:	1ad3      	subs	r3, r2, r3
 8013776:	0d1b      	lsrs	r3, r3, #20
 8013778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801377a:	fb02 f303 	mul.w	r3, r2, r3
 801377e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8013780:	e060      	b.n	8013844 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013788:	d107      	bne.n	801379a <SPI_WaitFifoStateUntilTimeout+0x62>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d104      	bne.n	801379a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	b2db      	uxtb	r3, r3
 8013796:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8013798:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137a0:	d050      	beq.n	8013844 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80137a2:	f7f9 fa4b 	bl	800cc3c <HAL_GetTick>
 80137a6:	4602      	mov	r2, r0
 80137a8:	6a3b      	ldr	r3, [r7, #32]
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d902      	bls.n	80137b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80137b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d13d      	bne.n	8013834 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	685a      	ldr	r2, [r3, #4]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80137c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80137d0:	d111      	bne.n	80137f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80137da:	d004      	beq.n	80137e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	689b      	ldr	r3, [r3, #8]
 80137e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80137e4:	d107      	bne.n	80137f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	681a      	ldr	r2, [r3, #0]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80137f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80137fe:	d10f      	bne.n	8013820 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	681a      	ldr	r2, [r3, #0]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801380e:	601a      	str	r2, [r3, #0]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801381e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2201      	movs	r2, #1
 8013824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2200      	movs	r2, #0
 801382c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8013830:	2303      	movs	r3, #3
 8013832:	e010      	b.n	8013856 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d101      	bne.n	801383e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801383a:	2300      	movs	r3, #0
 801383c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	3b01      	subs	r3, #1
 8013842:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	689a      	ldr	r2, [r3, #8]
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	4013      	ands	r3, r2
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	429a      	cmp	r2, r3
 8013852:	d196      	bne.n	8013782 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8013854:	2300      	movs	r3, #0
}
 8013856:	4618      	mov	r0, r3
 8013858:	3728      	adds	r7, #40	; 0x28
 801385a:	46bd      	mov	sp, r7
 801385c:	bd80      	pop	{r7, pc}
 801385e:	bf00      	nop
 8013860:	200000b4 	.word	0x200000b4

08013864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b086      	sub	sp, #24
 8013868:	af02      	add	r7, sp, #8
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	9300      	str	r3, [sp, #0]
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	2200      	movs	r2, #0
 8013878:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f7ff ff5b 	bl	8013738 <SPI_WaitFifoStateUntilTimeout>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d007      	beq.n	8013898 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801388c:	f043 0220 	orr.w	r2, r3, #32
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013894:	2303      	movs	r3, #3
 8013896:	e027      	b.n	80138e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	2200      	movs	r2, #0
 80138a0:	2180      	movs	r1, #128	; 0x80
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f7ff fec0 	bl	8013628 <SPI_WaitFlagStateUntilTimeout>
 80138a8:	4603      	mov	r3, r0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d007      	beq.n	80138be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138b2:	f043 0220 	orr.w	r2, r3, #32
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80138ba:	2303      	movs	r3, #3
 80138bc:	e014      	b.n	80138e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	2200      	movs	r2, #0
 80138c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80138ca:	68f8      	ldr	r0, [r7, #12]
 80138cc:	f7ff ff34 	bl	8013738 <SPI_WaitFifoStateUntilTimeout>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d007      	beq.n	80138e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80138da:	f043 0220 	orr.w	r2, r3, #32
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80138e2:	2303      	movs	r3, #3
 80138e4:	e000      	b.n	80138e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80138e6:	2300      	movs	r3, #0
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3710      	adds	r7, #16
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d101      	bne.n	8013902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80138fe:	2301      	movs	r3, #1
 8013900:	e049      	b.n	8013996 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013908:	b2db      	uxtb	r3, r3
 801390a:	2b00      	cmp	r3, #0
 801390c:	d106      	bne.n	801391c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	2200      	movs	r2, #0
 8013912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f7f7 fd5e 	bl	800b3d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2202      	movs	r2, #2
 8013920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	3304      	adds	r3, #4
 801392c:	4619      	mov	r1, r3
 801392e:	4610      	mov	r0, r2
 8013930:	f001 f9a0 	bl	8014c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2201      	movs	r2, #1
 8013938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2201      	movs	r2, #1
 8013940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2201      	movs	r2, #1
 8013948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2201      	movs	r2, #1
 8013950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2201      	movs	r2, #1
 8013958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2201      	movs	r2, #1
 8013960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2201      	movs	r2, #1
 8013968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2201      	movs	r2, #1
 8013970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2201      	movs	r2, #1
 8013978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2201      	movs	r2, #1
 8013980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2201      	movs	r2, #1
 8013988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2201      	movs	r2, #1
 8013990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013994:	2300      	movs	r3, #0
}
 8013996:	4618      	mov	r0, r3
 8013998:	3708      	adds	r7, #8
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
	...

080139a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80139a0:	b480      	push	{r7}
 80139a2:	b085      	sub	sp, #20
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80139ae:	b2db      	uxtb	r3, r3
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d001      	beq.n	80139b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80139b4:	2301      	movs	r3, #1
 80139b6:	e047      	b.n	8013a48 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2202      	movs	r2, #2
 80139bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	4a23      	ldr	r2, [pc, #140]	; (8013a54 <HAL_TIM_Base_Start+0xb4>)
 80139c6:	4293      	cmp	r3, r2
 80139c8:	d01d      	beq.n	8013a06 <HAL_TIM_Base_Start+0x66>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80139d2:	d018      	beq.n	8013a06 <HAL_TIM_Base_Start+0x66>
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	4a1f      	ldr	r2, [pc, #124]	; (8013a58 <HAL_TIM_Base_Start+0xb8>)
 80139da:	4293      	cmp	r3, r2
 80139dc:	d013      	beq.n	8013a06 <HAL_TIM_Base_Start+0x66>
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	4a1e      	ldr	r2, [pc, #120]	; (8013a5c <HAL_TIM_Base_Start+0xbc>)
 80139e4:	4293      	cmp	r3, r2
 80139e6:	d00e      	beq.n	8013a06 <HAL_TIM_Base_Start+0x66>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	4a1c      	ldr	r2, [pc, #112]	; (8013a60 <HAL_TIM_Base_Start+0xc0>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d009      	beq.n	8013a06 <HAL_TIM_Base_Start+0x66>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	4a1b      	ldr	r2, [pc, #108]	; (8013a64 <HAL_TIM_Base_Start+0xc4>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d004      	beq.n	8013a06 <HAL_TIM_Base_Start+0x66>
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	4a19      	ldr	r2, [pc, #100]	; (8013a68 <HAL_TIM_Base_Start+0xc8>)
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d115      	bne.n	8013a32 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	689a      	ldr	r2, [r3, #8]
 8013a0c:	4b17      	ldr	r3, [pc, #92]	; (8013a6c <HAL_TIM_Base_Start+0xcc>)
 8013a0e:	4013      	ands	r3, r2
 8013a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2b06      	cmp	r3, #6
 8013a16:	d015      	beq.n	8013a44 <HAL_TIM_Base_Start+0xa4>
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a1e:	d011      	beq.n	8013a44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	f042 0201 	orr.w	r2, r2, #1
 8013a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a30:	e008      	b.n	8013a44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	f042 0201 	orr.w	r2, r2, #1
 8013a40:	601a      	str	r2, [r3, #0]
 8013a42:	e000      	b.n	8013a46 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013a46:	2300      	movs	r3, #0
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3714      	adds	r7, #20
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a52:	4770      	bx	lr
 8013a54:	40012c00 	.word	0x40012c00
 8013a58:	40000400 	.word	0x40000400
 8013a5c:	40000800 	.word	0x40000800
 8013a60:	40000c00 	.word	0x40000c00
 8013a64:	40013400 	.word	0x40013400
 8013a68:	40014000 	.word	0x40014000
 8013a6c:	00010007 	.word	0x00010007

08013a70 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	6a1a      	ldr	r2, [r3, #32]
 8013a7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013a82:	4013      	ands	r3, r2
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d10f      	bne.n	8013aa8 <HAL_TIM_Base_Stop+0x38>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	6a1a      	ldr	r2, [r3, #32]
 8013a8e:	f240 4344 	movw	r3, #1092	; 0x444
 8013a92:	4013      	ands	r3, r2
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d107      	bne.n	8013aa8 <HAL_TIM_Base_Stop+0x38>
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f022 0201 	bic.w	r2, r2, #1
 8013aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2201      	movs	r2, #1
 8013aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8013ab0:	2300      	movs	r3, #0
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	370c      	adds	r7, #12
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr

08013abe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b082      	sub	sp, #8
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8013acc:	2301      	movs	r3, #1
 8013ace:	e049      	b.n	8013b64 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d106      	bne.n	8013aea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f7f7 fcbf 	bl	800b468 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2202      	movs	r2, #2
 8013aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	3304      	adds	r3, #4
 8013afa:	4619      	mov	r1, r3
 8013afc:	4610      	mov	r0, r2
 8013afe:	f001 f8b9 	bl	8014c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2201      	movs	r2, #1
 8013b06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2201      	movs	r2, #1
 8013b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2201      	movs	r2, #1
 8013b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2201      	movs	r2, #1
 8013b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2201      	movs	r2, #1
 8013b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2201      	movs	r2, #1
 8013b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2201      	movs	r2, #1
 8013b56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2201      	movs	r2, #1
 8013b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013b76:	2300      	movs	r3, #0
 8013b78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d109      	bne.n	8013b94 <HAL_TIM_OC_Start_IT+0x28>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013b86:	b2db      	uxtb	r3, r3
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	bf14      	ite	ne
 8013b8c:	2301      	movne	r3, #1
 8013b8e:	2300      	moveq	r3, #0
 8013b90:	b2db      	uxtb	r3, r3
 8013b92:	e03c      	b.n	8013c0e <HAL_TIM_OC_Start_IT+0xa2>
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	2b04      	cmp	r3, #4
 8013b98:	d109      	bne.n	8013bae <HAL_TIM_OC_Start_IT+0x42>
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	2b01      	cmp	r3, #1
 8013ba4:	bf14      	ite	ne
 8013ba6:	2301      	movne	r3, #1
 8013ba8:	2300      	moveq	r3, #0
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	e02f      	b.n	8013c0e <HAL_TIM_OC_Start_IT+0xa2>
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	2b08      	cmp	r3, #8
 8013bb2:	d109      	bne.n	8013bc8 <HAL_TIM_OC_Start_IT+0x5c>
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	bf14      	ite	ne
 8013bc0:	2301      	movne	r3, #1
 8013bc2:	2300      	moveq	r3, #0
 8013bc4:	b2db      	uxtb	r3, r3
 8013bc6:	e022      	b.n	8013c0e <HAL_TIM_OC_Start_IT+0xa2>
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	2b0c      	cmp	r3, #12
 8013bcc:	d109      	bne.n	8013be2 <HAL_TIM_OC_Start_IT+0x76>
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	bf14      	ite	ne
 8013bda:	2301      	movne	r3, #1
 8013bdc:	2300      	moveq	r3, #0
 8013bde:	b2db      	uxtb	r3, r3
 8013be0:	e015      	b.n	8013c0e <HAL_TIM_OC_Start_IT+0xa2>
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	2b10      	cmp	r3, #16
 8013be6:	d109      	bne.n	8013bfc <HAL_TIM_OC_Start_IT+0x90>
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	bf14      	ite	ne
 8013bf4:	2301      	movne	r3, #1
 8013bf6:	2300      	moveq	r3, #0
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	e008      	b.n	8013c0e <HAL_TIM_OC_Start_IT+0xa2>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013c02:	b2db      	uxtb	r3, r3
 8013c04:	2b01      	cmp	r3, #1
 8013c06:	bf14      	ite	ne
 8013c08:	2301      	movne	r3, #1
 8013c0a:	2300      	moveq	r3, #0
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d001      	beq.n	8013c16 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8013c12:	2301      	movs	r3, #1
 8013c14:	e0e7      	b.n	8013de6 <HAL_TIM_OC_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d104      	bne.n	8013c26 <HAL_TIM_OC_Start_IT+0xba>
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2202      	movs	r2, #2
 8013c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013c24:	e023      	b.n	8013c6e <HAL_TIM_OC_Start_IT+0x102>
 8013c26:	683b      	ldr	r3, [r7, #0]
 8013c28:	2b04      	cmp	r3, #4
 8013c2a:	d104      	bne.n	8013c36 <HAL_TIM_OC_Start_IT+0xca>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2202      	movs	r2, #2
 8013c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013c34:	e01b      	b.n	8013c6e <HAL_TIM_OC_Start_IT+0x102>
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	2b08      	cmp	r3, #8
 8013c3a:	d104      	bne.n	8013c46 <HAL_TIM_OC_Start_IT+0xda>
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2202      	movs	r2, #2
 8013c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013c44:	e013      	b.n	8013c6e <HAL_TIM_OC_Start_IT+0x102>
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	2b0c      	cmp	r3, #12
 8013c4a:	d104      	bne.n	8013c56 <HAL_TIM_OC_Start_IT+0xea>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2202      	movs	r2, #2
 8013c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013c54:	e00b      	b.n	8013c6e <HAL_TIM_OC_Start_IT+0x102>
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	2b10      	cmp	r3, #16
 8013c5a:	d104      	bne.n	8013c66 <HAL_TIM_OC_Start_IT+0xfa>
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2202      	movs	r2, #2
 8013c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013c64:	e003      	b.n	8013c6e <HAL_TIM_OC_Start_IT+0x102>
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2202      	movs	r2, #2
 8013c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	2b0c      	cmp	r3, #12
 8013c72:	d841      	bhi.n	8013cf8 <HAL_TIM_OC_Start_IT+0x18c>
 8013c74:	a201      	add	r2, pc, #4	; (adr r2, 8013c7c <HAL_TIM_OC_Start_IT+0x110>)
 8013c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c7a:	bf00      	nop
 8013c7c:	08013cb1 	.word	0x08013cb1
 8013c80:	08013cf9 	.word	0x08013cf9
 8013c84:	08013cf9 	.word	0x08013cf9
 8013c88:	08013cf9 	.word	0x08013cf9
 8013c8c:	08013cc3 	.word	0x08013cc3
 8013c90:	08013cf9 	.word	0x08013cf9
 8013c94:	08013cf9 	.word	0x08013cf9
 8013c98:	08013cf9 	.word	0x08013cf9
 8013c9c:	08013cd5 	.word	0x08013cd5
 8013ca0:	08013cf9 	.word	0x08013cf9
 8013ca4:	08013cf9 	.word	0x08013cf9
 8013ca8:	08013cf9 	.word	0x08013cf9
 8013cac:	08013ce7 	.word	0x08013ce7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	68da      	ldr	r2, [r3, #12]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	f042 0202 	orr.w	r2, r2, #2
 8013cbe:	60da      	str	r2, [r3, #12]
      break;
 8013cc0:	e01d      	b.n	8013cfe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	68da      	ldr	r2, [r3, #12]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f042 0204 	orr.w	r2, r2, #4
 8013cd0:	60da      	str	r2, [r3, #12]
      break;
 8013cd2:	e014      	b.n	8013cfe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	68da      	ldr	r2, [r3, #12]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f042 0208 	orr.w	r2, r2, #8
 8013ce2:	60da      	str	r2, [r3, #12]
      break;
 8013ce4:	e00b      	b.n	8013cfe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	68da      	ldr	r2, [r3, #12]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f042 0210 	orr.w	r2, r2, #16
 8013cf4:	60da      	str	r2, [r3, #12]
      break;
 8013cf6:	e002      	b.n	8013cfe <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8013cfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8013cfe:	7bfb      	ldrb	r3, [r7, #15]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d16f      	bne.n	8013de4 <HAL_TIM_OC_Start_IT+0x278>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	6839      	ldr	r1, [r7, #0]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f001 fb21 	bl	8015354 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4a36      	ldr	r2, [pc, #216]	; (8013df0 <HAL_TIM_OC_Start_IT+0x284>)
 8013d18:	4293      	cmp	r3, r2
 8013d1a:	d013      	beq.n	8013d44 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	4a34      	ldr	r2, [pc, #208]	; (8013df4 <HAL_TIM_OC_Start_IT+0x288>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d00e      	beq.n	8013d44 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	4a33      	ldr	r2, [pc, #204]	; (8013df8 <HAL_TIM_OC_Start_IT+0x28c>)
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d009      	beq.n	8013d44 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	4a31      	ldr	r2, [pc, #196]	; (8013dfc <HAL_TIM_OC_Start_IT+0x290>)
 8013d36:	4293      	cmp	r3, r2
 8013d38:	d004      	beq.n	8013d44 <HAL_TIM_OC_Start_IT+0x1d8>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	4a30      	ldr	r2, [pc, #192]	; (8013e00 <HAL_TIM_OC_Start_IT+0x294>)
 8013d40:	4293      	cmp	r3, r2
 8013d42:	d101      	bne.n	8013d48 <HAL_TIM_OC_Start_IT+0x1dc>
 8013d44:	2301      	movs	r3, #1
 8013d46:	e000      	b.n	8013d4a <HAL_TIM_OC_Start_IT+0x1de>
 8013d48:	2300      	movs	r3, #0
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d007      	beq.n	8013d5e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013d5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4a23      	ldr	r2, [pc, #140]	; (8013df0 <HAL_TIM_OC_Start_IT+0x284>)
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d01d      	beq.n	8013da4 <HAL_TIM_OC_Start_IT+0x238>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d70:	d018      	beq.n	8013da4 <HAL_TIM_OC_Start_IT+0x238>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4a23      	ldr	r2, [pc, #140]	; (8013e04 <HAL_TIM_OC_Start_IT+0x298>)
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d013      	beq.n	8013da4 <HAL_TIM_OC_Start_IT+0x238>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a21      	ldr	r2, [pc, #132]	; (8013e08 <HAL_TIM_OC_Start_IT+0x29c>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d00e      	beq.n	8013da4 <HAL_TIM_OC_Start_IT+0x238>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4a20      	ldr	r2, [pc, #128]	; (8013e0c <HAL_TIM_OC_Start_IT+0x2a0>)
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d009      	beq.n	8013da4 <HAL_TIM_OC_Start_IT+0x238>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4a17      	ldr	r2, [pc, #92]	; (8013df4 <HAL_TIM_OC_Start_IT+0x288>)
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d004      	beq.n	8013da4 <HAL_TIM_OC_Start_IT+0x238>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	4a16      	ldr	r2, [pc, #88]	; (8013df8 <HAL_TIM_OC_Start_IT+0x28c>)
 8013da0:	4293      	cmp	r3, r2
 8013da2:	d115      	bne.n	8013dd0 <HAL_TIM_OC_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	689a      	ldr	r2, [r3, #8]
 8013daa:	4b19      	ldr	r3, [pc, #100]	; (8013e10 <HAL_TIM_OC_Start_IT+0x2a4>)
 8013dac:	4013      	ands	r3, r2
 8013dae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	2b06      	cmp	r3, #6
 8013db4:	d015      	beq.n	8013de2 <HAL_TIM_OC_Start_IT+0x276>
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013dbc:	d011      	beq.n	8013de2 <HAL_TIM_OC_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	f042 0201 	orr.w	r2, r2, #1
 8013dcc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013dce:	e008      	b.n	8013de2 <HAL_TIM_OC_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f042 0201 	orr.w	r2, r2, #1
 8013dde:	601a      	str	r2, [r3, #0]
 8013de0:	e000      	b.n	8013de4 <HAL_TIM_OC_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013de2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8013de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	40012c00 	.word	0x40012c00
 8013df4:	40013400 	.word	0x40013400
 8013df8:	40014000 	.word	0x40014000
 8013dfc:	40014400 	.word	0x40014400
 8013e00:	40014800 	.word	0x40014800
 8013e04:	40000400 	.word	0x40000400
 8013e08:	40000800 	.word	0x40000800
 8013e0c:	40000c00 	.word	0x40000c00
 8013e10:	00010007 	.word	0x00010007

08013e14 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	73fb      	strb	r3, [r7, #15]
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	2b0c      	cmp	r3, #12
 8013e26:	d841      	bhi.n	8013eac <HAL_TIM_OC_Stop_IT+0x98>
 8013e28:	a201      	add	r2, pc, #4	; (adr r2, 8013e30 <HAL_TIM_OC_Stop_IT+0x1c>)
 8013e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e2e:	bf00      	nop
 8013e30:	08013e65 	.word	0x08013e65
 8013e34:	08013ead 	.word	0x08013ead
 8013e38:	08013ead 	.word	0x08013ead
 8013e3c:	08013ead 	.word	0x08013ead
 8013e40:	08013e77 	.word	0x08013e77
 8013e44:	08013ead 	.word	0x08013ead
 8013e48:	08013ead 	.word	0x08013ead
 8013e4c:	08013ead 	.word	0x08013ead
 8013e50:	08013e89 	.word	0x08013e89
 8013e54:	08013ead 	.word	0x08013ead
 8013e58:	08013ead 	.word	0x08013ead
 8013e5c:	08013ead 	.word	0x08013ead
 8013e60:	08013e9b 	.word	0x08013e9b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	68da      	ldr	r2, [r3, #12]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f022 0202 	bic.w	r2, r2, #2
 8013e72:	60da      	str	r2, [r3, #12]
      break;
 8013e74:	e01d      	b.n	8013eb2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	68da      	ldr	r2, [r3, #12]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	f022 0204 	bic.w	r2, r2, #4
 8013e84:	60da      	str	r2, [r3, #12]
      break;
 8013e86:	e014      	b.n	8013eb2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	68da      	ldr	r2, [r3, #12]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	f022 0208 	bic.w	r2, r2, #8
 8013e96:	60da      	str	r2, [r3, #12]
      break;
 8013e98:	e00b      	b.n	8013eb2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	68da      	ldr	r2, [r3, #12]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f022 0210 	bic.w	r2, r2, #16
 8013ea8:	60da      	str	r2, [r3, #12]
      break;
 8013eaa:	e002      	b.n	8013eb2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8013eac:	2301      	movs	r3, #1
 8013eae:	73fb      	strb	r3, [r7, #15]
      break;
 8013eb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8013eb2:	7bfb      	ldrb	r3, [r7, #15]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	f040 8081 	bne.w	8013fbc <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	6839      	ldr	r1, [r7, #0]
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f001 fa46 	bl	8015354 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	4a3e      	ldr	r2, [pc, #248]	; (8013fc8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8013ece:	4293      	cmp	r3, r2
 8013ed0:	d013      	beq.n	8013efa <HAL_TIM_OC_Stop_IT+0xe6>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	4a3d      	ldr	r2, [pc, #244]	; (8013fcc <HAL_TIM_OC_Stop_IT+0x1b8>)
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	d00e      	beq.n	8013efa <HAL_TIM_OC_Stop_IT+0xe6>
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	4a3b      	ldr	r2, [pc, #236]	; (8013fd0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d009      	beq.n	8013efa <HAL_TIM_OC_Stop_IT+0xe6>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	4a3a      	ldr	r2, [pc, #232]	; (8013fd4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8013eec:	4293      	cmp	r3, r2
 8013eee:	d004      	beq.n	8013efa <HAL_TIM_OC_Stop_IT+0xe6>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4a38      	ldr	r2, [pc, #224]	; (8013fd8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d101      	bne.n	8013efe <HAL_TIM_OC_Stop_IT+0xea>
 8013efa:	2301      	movs	r3, #1
 8013efc:	e000      	b.n	8013f00 <HAL_TIM_OC_Stop_IT+0xec>
 8013efe:	2300      	movs	r3, #0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d017      	beq.n	8013f34 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	6a1a      	ldr	r2, [r3, #32]
 8013f0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8013f0e:	4013      	ands	r3, r2
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d10f      	bne.n	8013f34 <HAL_TIM_OC_Stop_IT+0x120>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	6a1a      	ldr	r2, [r3, #32]
 8013f1a:	f240 4344 	movw	r3, #1092	; 0x444
 8013f1e:	4013      	ands	r3, r2
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d107      	bne.n	8013f34 <HAL_TIM_OC_Stop_IT+0x120>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013f32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	6a1a      	ldr	r2, [r3, #32]
 8013f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8013f3e:	4013      	ands	r3, r2
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d10f      	bne.n	8013f64 <HAL_TIM_OC_Stop_IT+0x150>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	6a1a      	ldr	r2, [r3, #32]
 8013f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8013f4e:	4013      	ands	r3, r2
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d107      	bne.n	8013f64 <HAL_TIM_OC_Stop_IT+0x150>
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	f022 0201 	bic.w	r2, r2, #1
 8013f62:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d104      	bne.n	8013f74 <HAL_TIM_OC_Stop_IT+0x160>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2201      	movs	r2, #1
 8013f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013f72:	e023      	b.n	8013fbc <HAL_TIM_OC_Stop_IT+0x1a8>
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	2b04      	cmp	r3, #4
 8013f78:	d104      	bne.n	8013f84 <HAL_TIM_OC_Stop_IT+0x170>
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013f82:	e01b      	b.n	8013fbc <HAL_TIM_OC_Stop_IT+0x1a8>
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	2b08      	cmp	r3, #8
 8013f88:	d104      	bne.n	8013f94 <HAL_TIM_OC_Stop_IT+0x180>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013f92:	e013      	b.n	8013fbc <HAL_TIM_OC_Stop_IT+0x1a8>
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	2b0c      	cmp	r3, #12
 8013f98:	d104      	bne.n	8013fa4 <HAL_TIM_OC_Stop_IT+0x190>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013fa2:	e00b      	b.n	8013fbc <HAL_TIM_OC_Stop_IT+0x1a8>
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	2b10      	cmp	r3, #16
 8013fa8:	d104      	bne.n	8013fb4 <HAL_TIM_OC_Stop_IT+0x1a0>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2201      	movs	r2, #1
 8013fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013fb2:	e003      	b.n	8013fbc <HAL_TIM_OC_Stop_IT+0x1a8>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	40012c00 	.word	0x40012c00
 8013fcc:	40013400 	.word	0x40013400
 8013fd0:	40014000 	.word	0x40014000
 8013fd4:	40014400 	.word	0x40014400
 8013fd8:	40014800 	.word	0x40014800

08013fdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d101      	bne.n	8013fee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013fea:	2301      	movs	r3, #1
 8013fec:	e049      	b.n	8014082 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d106      	bne.n	8014008 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 f841 	bl	801408a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2202      	movs	r2, #2
 801400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	3304      	adds	r3, #4
 8014018:	4619      	mov	r1, r3
 801401a:	4610      	mov	r0, r2
 801401c:	f000 fe2a 	bl	8014c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2201      	movs	r2, #1
 8014024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2201      	movs	r2, #1
 801402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2201      	movs	r2, #1
 8014034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2201      	movs	r2, #1
 801403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2201      	movs	r2, #1
 8014044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2201      	movs	r2, #1
 801404c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2201      	movs	r2, #1
 8014054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2201      	movs	r2, #1
 801405c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2201      	movs	r2, #1
 8014064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2201      	movs	r2, #1
 801406c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2201      	movs	r2, #1
 8014074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2201      	movs	r2, #1
 801407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3708      	adds	r7, #8
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801408a:	b480      	push	{r7}
 801408c:	b083      	sub	sp, #12
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014092:	bf00      	nop
 8014094:	370c      	adds	r7, #12
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr
	...

080140a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b084      	sub	sp, #16
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d109      	bne.n	80140c4 <HAL_TIM_PWM_Start+0x24>
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80140b6:	b2db      	uxtb	r3, r3
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	bf14      	ite	ne
 80140bc:	2301      	movne	r3, #1
 80140be:	2300      	moveq	r3, #0
 80140c0:	b2db      	uxtb	r3, r3
 80140c2:	e03c      	b.n	801413e <HAL_TIM_PWM_Start+0x9e>
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	2b04      	cmp	r3, #4
 80140c8:	d109      	bne.n	80140de <HAL_TIM_PWM_Start+0x3e>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	bf14      	ite	ne
 80140d6:	2301      	movne	r3, #1
 80140d8:	2300      	moveq	r3, #0
 80140da:	b2db      	uxtb	r3, r3
 80140dc:	e02f      	b.n	801413e <HAL_TIM_PWM_Start+0x9e>
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	2b08      	cmp	r3, #8
 80140e2:	d109      	bne.n	80140f8 <HAL_TIM_PWM_Start+0x58>
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	2b01      	cmp	r3, #1
 80140ee:	bf14      	ite	ne
 80140f0:	2301      	movne	r3, #1
 80140f2:	2300      	moveq	r3, #0
 80140f4:	b2db      	uxtb	r3, r3
 80140f6:	e022      	b.n	801413e <HAL_TIM_PWM_Start+0x9e>
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	2b0c      	cmp	r3, #12
 80140fc:	d109      	bne.n	8014112 <HAL_TIM_PWM_Start+0x72>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014104:	b2db      	uxtb	r3, r3
 8014106:	2b01      	cmp	r3, #1
 8014108:	bf14      	ite	ne
 801410a:	2301      	movne	r3, #1
 801410c:	2300      	moveq	r3, #0
 801410e:	b2db      	uxtb	r3, r3
 8014110:	e015      	b.n	801413e <HAL_TIM_PWM_Start+0x9e>
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	2b10      	cmp	r3, #16
 8014116:	d109      	bne.n	801412c <HAL_TIM_PWM_Start+0x8c>
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801411e:	b2db      	uxtb	r3, r3
 8014120:	2b01      	cmp	r3, #1
 8014122:	bf14      	ite	ne
 8014124:	2301      	movne	r3, #1
 8014126:	2300      	moveq	r3, #0
 8014128:	b2db      	uxtb	r3, r3
 801412a:	e008      	b.n	801413e <HAL_TIM_PWM_Start+0x9e>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014132:	b2db      	uxtb	r3, r3
 8014134:	2b01      	cmp	r3, #1
 8014136:	bf14      	ite	ne
 8014138:	2301      	movne	r3, #1
 801413a:	2300      	moveq	r3, #0
 801413c:	b2db      	uxtb	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	d001      	beq.n	8014146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8014142:	2301      	movs	r3, #1
 8014144:	e09c      	b.n	8014280 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d104      	bne.n	8014156 <HAL_TIM_PWM_Start+0xb6>
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2202      	movs	r2, #2
 8014150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014154:	e023      	b.n	801419e <HAL_TIM_PWM_Start+0xfe>
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	2b04      	cmp	r3, #4
 801415a:	d104      	bne.n	8014166 <HAL_TIM_PWM_Start+0xc6>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2202      	movs	r2, #2
 8014160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014164:	e01b      	b.n	801419e <HAL_TIM_PWM_Start+0xfe>
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	2b08      	cmp	r3, #8
 801416a:	d104      	bne.n	8014176 <HAL_TIM_PWM_Start+0xd6>
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2202      	movs	r2, #2
 8014170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014174:	e013      	b.n	801419e <HAL_TIM_PWM_Start+0xfe>
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	2b0c      	cmp	r3, #12
 801417a:	d104      	bne.n	8014186 <HAL_TIM_PWM_Start+0xe6>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2202      	movs	r2, #2
 8014180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014184:	e00b      	b.n	801419e <HAL_TIM_PWM_Start+0xfe>
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	2b10      	cmp	r3, #16
 801418a:	d104      	bne.n	8014196 <HAL_TIM_PWM_Start+0xf6>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2202      	movs	r2, #2
 8014190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014194:	e003      	b.n	801419e <HAL_TIM_PWM_Start+0xfe>
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2202      	movs	r2, #2
 801419a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2201      	movs	r2, #1
 80141a4:	6839      	ldr	r1, [r7, #0]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f001 f8d4 	bl	8015354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	4a35      	ldr	r2, [pc, #212]	; (8014288 <HAL_TIM_PWM_Start+0x1e8>)
 80141b2:	4293      	cmp	r3, r2
 80141b4:	d013      	beq.n	80141de <HAL_TIM_PWM_Start+0x13e>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	4a34      	ldr	r2, [pc, #208]	; (801428c <HAL_TIM_PWM_Start+0x1ec>)
 80141bc:	4293      	cmp	r3, r2
 80141be:	d00e      	beq.n	80141de <HAL_TIM_PWM_Start+0x13e>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	4a32      	ldr	r2, [pc, #200]	; (8014290 <HAL_TIM_PWM_Start+0x1f0>)
 80141c6:	4293      	cmp	r3, r2
 80141c8:	d009      	beq.n	80141de <HAL_TIM_PWM_Start+0x13e>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	4a31      	ldr	r2, [pc, #196]	; (8014294 <HAL_TIM_PWM_Start+0x1f4>)
 80141d0:	4293      	cmp	r3, r2
 80141d2:	d004      	beq.n	80141de <HAL_TIM_PWM_Start+0x13e>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	4a2f      	ldr	r2, [pc, #188]	; (8014298 <HAL_TIM_PWM_Start+0x1f8>)
 80141da:	4293      	cmp	r3, r2
 80141dc:	d101      	bne.n	80141e2 <HAL_TIM_PWM_Start+0x142>
 80141de:	2301      	movs	r3, #1
 80141e0:	e000      	b.n	80141e4 <HAL_TIM_PWM_Start+0x144>
 80141e2:	2300      	movs	r3, #0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d007      	beq.n	80141f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80141f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	4a22      	ldr	r2, [pc, #136]	; (8014288 <HAL_TIM_PWM_Start+0x1e8>)
 80141fe:	4293      	cmp	r3, r2
 8014200:	d01d      	beq.n	801423e <HAL_TIM_PWM_Start+0x19e>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801420a:	d018      	beq.n	801423e <HAL_TIM_PWM_Start+0x19e>
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	4a22      	ldr	r2, [pc, #136]	; (801429c <HAL_TIM_PWM_Start+0x1fc>)
 8014212:	4293      	cmp	r3, r2
 8014214:	d013      	beq.n	801423e <HAL_TIM_PWM_Start+0x19e>
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	4a21      	ldr	r2, [pc, #132]	; (80142a0 <HAL_TIM_PWM_Start+0x200>)
 801421c:	4293      	cmp	r3, r2
 801421e:	d00e      	beq.n	801423e <HAL_TIM_PWM_Start+0x19e>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4a1f      	ldr	r2, [pc, #124]	; (80142a4 <HAL_TIM_PWM_Start+0x204>)
 8014226:	4293      	cmp	r3, r2
 8014228:	d009      	beq.n	801423e <HAL_TIM_PWM_Start+0x19e>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	4a17      	ldr	r2, [pc, #92]	; (801428c <HAL_TIM_PWM_Start+0x1ec>)
 8014230:	4293      	cmp	r3, r2
 8014232:	d004      	beq.n	801423e <HAL_TIM_PWM_Start+0x19e>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	4a15      	ldr	r2, [pc, #84]	; (8014290 <HAL_TIM_PWM_Start+0x1f0>)
 801423a:	4293      	cmp	r3, r2
 801423c:	d115      	bne.n	801426a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	689a      	ldr	r2, [r3, #8]
 8014244:	4b18      	ldr	r3, [pc, #96]	; (80142a8 <HAL_TIM_PWM_Start+0x208>)
 8014246:	4013      	ands	r3, r2
 8014248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	2b06      	cmp	r3, #6
 801424e:	d015      	beq.n	801427c <HAL_TIM_PWM_Start+0x1dc>
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014256:	d011      	beq.n	801427c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	f042 0201 	orr.w	r2, r2, #1
 8014266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014268:	e008      	b.n	801427c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	f042 0201 	orr.w	r2, r2, #1
 8014278:	601a      	str	r2, [r3, #0]
 801427a:	e000      	b.n	801427e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801427c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801427e:	2300      	movs	r3, #0
}
 8014280:	4618      	mov	r0, r3
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	40012c00 	.word	0x40012c00
 801428c:	40013400 	.word	0x40013400
 8014290:	40014000 	.word	0x40014000
 8014294:	40014400 	.word	0x40014400
 8014298:	40014800 	.word	0x40014800
 801429c:	40000400 	.word	0x40000400
 80142a0:	40000800 	.word	0x40000800
 80142a4:	40000c00 	.word	0x40000c00
 80142a8:	00010007 	.word	0x00010007

080142ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b086      	sub	sp, #24
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
 80142b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d101      	bne.n	80142c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80142bc:	2301      	movs	r3, #1
 80142be:	e097      	b.n	80143f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d106      	bne.n	80142da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2200      	movs	r2, #0
 80142d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f7f6 ff2b 	bl	800b130 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2202      	movs	r2, #2
 80142de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	689b      	ldr	r3, [r3, #8]
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	6812      	ldr	r2, [r2, #0]
 80142ec:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80142f0:	f023 0307 	bic.w	r3, r3, #7
 80142f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681a      	ldr	r2, [r3, #0]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	3304      	adds	r3, #4
 80142fe:	4619      	mov	r1, r3
 8014300:	4610      	mov	r0, r2
 8014302:	f000 fcb7 	bl	8014c74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	689b      	ldr	r3, [r3, #8]
 801430c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	699b      	ldr	r3, [r3, #24]
 8014314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	6a1b      	ldr	r3, [r3, #32]
 801431c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	697a      	ldr	r2, [r7, #20]
 8014324:	4313      	orrs	r3, r2
 8014326:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801432e:	f023 0303 	bic.w	r3, r3, #3
 8014332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	689a      	ldr	r2, [r3, #8]
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	699b      	ldr	r3, [r3, #24]
 801433c:	021b      	lsls	r3, r3, #8
 801433e:	4313      	orrs	r3, r2
 8014340:	693a      	ldr	r2, [r7, #16]
 8014342:	4313      	orrs	r3, r2
 8014344:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8014346:	693b      	ldr	r3, [r7, #16]
 8014348:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801434c:	f023 030c 	bic.w	r3, r3, #12
 8014350:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801435c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801435e:	683b      	ldr	r3, [r7, #0]
 8014360:	68da      	ldr	r2, [r3, #12]
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	69db      	ldr	r3, [r3, #28]
 8014366:	021b      	lsls	r3, r3, #8
 8014368:	4313      	orrs	r3, r2
 801436a:	693a      	ldr	r2, [r7, #16]
 801436c:	4313      	orrs	r3, r2
 801436e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	691b      	ldr	r3, [r3, #16]
 8014374:	011a      	lsls	r2, r3, #4
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	6a1b      	ldr	r3, [r3, #32]
 801437a:	031b      	lsls	r3, r3, #12
 801437c:	4313      	orrs	r3, r2
 801437e:	693a      	ldr	r2, [r7, #16]
 8014380:	4313      	orrs	r3, r2
 8014382:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801438a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8014392:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	685a      	ldr	r2, [r3, #4]
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	695b      	ldr	r3, [r3, #20]
 801439c:	011b      	lsls	r3, r3, #4
 801439e:	4313      	orrs	r3, r2
 80143a0:	68fa      	ldr	r2, [r7, #12]
 80143a2:	4313      	orrs	r3, r2
 80143a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	697a      	ldr	r2, [r7, #20]
 80143ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	693a      	ldr	r2, [r7, #16]
 80143b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	68fa      	ldr	r2, [r7, #12]
 80143bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2201      	movs	r2, #1
 80143c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2201      	movs	r2, #1
 80143ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2201      	movs	r2, #1
 80143d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	2201      	movs	r2, #1
 80143da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2201      	movs	r2, #1
 80143e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2201      	movs	r2, #1
 80143ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80143ee:	2300      	movs	r3, #0
}
 80143f0:	4618      	mov	r0, r3
 80143f2:	3718      	adds	r7, #24
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014408:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014410:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014418:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014420:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d110      	bne.n	801444a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8014428:	7bfb      	ldrb	r3, [r7, #15]
 801442a:	2b01      	cmp	r3, #1
 801442c:	d102      	bne.n	8014434 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 801442e:	7b7b      	ldrb	r3, [r7, #13]
 8014430:	2b01      	cmp	r3, #1
 8014432:	d001      	beq.n	8014438 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8014434:	2301      	movs	r3, #1
 8014436:	e089      	b.n	801454c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2202      	movs	r2, #2
 801443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2202      	movs	r2, #2
 8014444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014448:	e031      	b.n	80144ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	2b04      	cmp	r3, #4
 801444e:	d110      	bne.n	8014472 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8014450:	7bbb      	ldrb	r3, [r7, #14]
 8014452:	2b01      	cmp	r3, #1
 8014454:	d102      	bne.n	801445c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8014456:	7b3b      	ldrb	r3, [r7, #12]
 8014458:	2b01      	cmp	r3, #1
 801445a:	d001      	beq.n	8014460 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 801445c:	2301      	movs	r3, #1
 801445e:	e075      	b.n	801454c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2202      	movs	r2, #2
 8014464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2202      	movs	r2, #2
 801446c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014470:	e01d      	b.n	80144ae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8014472:	7bfb      	ldrb	r3, [r7, #15]
 8014474:	2b01      	cmp	r3, #1
 8014476:	d108      	bne.n	801448a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8014478:	7bbb      	ldrb	r3, [r7, #14]
 801447a:	2b01      	cmp	r3, #1
 801447c:	d105      	bne.n	801448a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801447e:	7b7b      	ldrb	r3, [r7, #13]
 8014480:	2b01      	cmp	r3, #1
 8014482:	d102      	bne.n	801448a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8014484:	7b3b      	ldrb	r3, [r7, #12]
 8014486:	2b01      	cmp	r3, #1
 8014488:	d001      	beq.n	801448e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 801448a:	2301      	movs	r3, #1
 801448c:	e05e      	b.n	801454c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2202      	movs	r2, #2
 8014492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2202      	movs	r2, #2
 801449a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2202      	movs	r2, #2
 80144a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2202      	movs	r2, #2
 80144aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d003      	beq.n	80144bc <HAL_TIM_Encoder_Start_IT+0xc4>
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	2b04      	cmp	r3, #4
 80144b8:	d010      	beq.n	80144dc <HAL_TIM_Encoder_Start_IT+0xe4>
 80144ba:	e01f      	b.n	80144fc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2201      	movs	r2, #1
 80144c2:	2100      	movs	r1, #0
 80144c4:	4618      	mov	r0, r3
 80144c6:	f000 ff45 	bl	8015354 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	68da      	ldr	r2, [r3, #12]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	f042 0202 	orr.w	r2, r2, #2
 80144d8:	60da      	str	r2, [r3, #12]
      break;
 80144da:	e02e      	b.n	801453a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	2201      	movs	r2, #1
 80144e2:	2104      	movs	r1, #4
 80144e4:	4618      	mov	r0, r3
 80144e6:	f000 ff35 	bl	8015354 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	68da      	ldr	r2, [r3, #12]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	f042 0204 	orr.w	r2, r2, #4
 80144f8:	60da      	str	r2, [r3, #12]
      break;
 80144fa:	e01e      	b.n	801453a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2201      	movs	r2, #1
 8014502:	2100      	movs	r1, #0
 8014504:	4618      	mov	r0, r3
 8014506:	f000 ff25 	bl	8015354 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2201      	movs	r2, #1
 8014510:	2104      	movs	r1, #4
 8014512:	4618      	mov	r0, r3
 8014514:	f000 ff1e 	bl	8015354 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	68da      	ldr	r2, [r3, #12]
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	f042 0202 	orr.w	r2, r2, #2
 8014526:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	68da      	ldr	r2, [r3, #12]
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	f042 0204 	orr.w	r2, r2, #4
 8014536:	60da      	str	r2, [r3, #12]
      break;
 8014538:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	681a      	ldr	r2, [r3, #0]
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	f042 0201 	orr.w	r2, r2, #1
 8014548:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801454a:	2300      	movs	r3, #0
}
 801454c:	4618      	mov	r0, r3
 801454e:	3710      	adds	r7, #16
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d10f      	bne.n	8014584 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	2200      	movs	r2, #0
 801456a:	2100      	movs	r1, #0
 801456c:	4618      	mov	r0, r3
 801456e:	f000 fef1 	bl	8015354 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	68da      	ldr	r2, [r3, #12]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	f022 0202 	bic.w	r2, r2, #2
 8014580:	60da      	str	r2, [r3, #12]
 8014582:	e030      	b.n	80145e6 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	2b04      	cmp	r3, #4
 8014588:	d10f      	bne.n	80145aa <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	2200      	movs	r2, #0
 8014590:	2104      	movs	r1, #4
 8014592:	4618      	mov	r0, r3
 8014594:	f000 fede 	bl	8015354 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	68da      	ldr	r2, [r3, #12]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f022 0204 	bic.w	r2, r2, #4
 80145a6:	60da      	str	r2, [r3, #12]
 80145a8:	e01d      	b.n	80145e6 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	2200      	movs	r2, #0
 80145b0:	2100      	movs	r1, #0
 80145b2:	4618      	mov	r0, r3
 80145b4:	f000 fece 	bl	8015354 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2200      	movs	r2, #0
 80145be:	2104      	movs	r1, #4
 80145c0:	4618      	mov	r0, r3
 80145c2:	f000 fec7 	bl	8015354 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	68da      	ldr	r2, [r3, #12]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	f022 0202 	bic.w	r2, r2, #2
 80145d4:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	68da      	ldr	r2, [r3, #12]
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	f022 0204 	bic.w	r2, r2, #4
 80145e4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	6a1a      	ldr	r2, [r3, #32]
 80145ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80145f0:	4013      	ands	r3, r2
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d10f      	bne.n	8014616 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	6a1a      	ldr	r2, [r3, #32]
 80145fc:	f240 4344 	movw	r3, #1092	; 0x444
 8014600:	4013      	ands	r3, r2
 8014602:	2b00      	cmp	r3, #0
 8014604:	d107      	bne.n	8014616 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	f022 0201 	bic.w	r2, r2, #1
 8014614:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d002      	beq.n	8014622 <HAL_TIM_Encoder_Stop_IT+0xce>
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	2b04      	cmp	r3, #4
 8014620:	d148      	bne.n	80146b4 <HAL_TIM_Encoder_Stop_IT+0x160>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d104      	bne.n	8014632 <HAL_TIM_Encoder_Stop_IT+0xde>
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2201      	movs	r2, #1
 801462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014630:	e023      	b.n	801467a <HAL_TIM_Encoder_Stop_IT+0x126>
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	2b04      	cmp	r3, #4
 8014636:	d104      	bne.n	8014642 <HAL_TIM_Encoder_Stop_IT+0xee>
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2201      	movs	r2, #1
 801463c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014640:	e01b      	b.n	801467a <HAL_TIM_Encoder_Stop_IT+0x126>
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	2b08      	cmp	r3, #8
 8014646:	d104      	bne.n	8014652 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2201      	movs	r2, #1
 801464c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014650:	e013      	b.n	801467a <HAL_TIM_Encoder_Stop_IT+0x126>
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	2b0c      	cmp	r3, #12
 8014656:	d104      	bne.n	8014662 <HAL_TIM_Encoder_Stop_IT+0x10e>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2201      	movs	r2, #1
 801465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014660:	e00b      	b.n	801467a <HAL_TIM_Encoder_Stop_IT+0x126>
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	2b10      	cmp	r3, #16
 8014666:	d104      	bne.n	8014672 <HAL_TIM_Encoder_Stop_IT+0x11e>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2201      	movs	r2, #1
 801466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014670:	e003      	b.n	801467a <HAL_TIM_Encoder_Stop_IT+0x126>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2201      	movs	r2, #1
 8014676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d104      	bne.n	801468a <HAL_TIM_Encoder_Stop_IT+0x136>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2201      	movs	r2, #1
 8014684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014688:	e024      	b.n	80146d4 <HAL_TIM_Encoder_Stop_IT+0x180>
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	2b04      	cmp	r3, #4
 801468e:	d104      	bne.n	801469a <HAL_TIM_Encoder_Stop_IT+0x146>
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2201      	movs	r2, #1
 8014694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014698:	e01c      	b.n	80146d4 <HAL_TIM_Encoder_Stop_IT+0x180>
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	2b08      	cmp	r3, #8
 801469e:	d104      	bne.n	80146aa <HAL_TIM_Encoder_Stop_IT+0x156>
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2201      	movs	r2, #1
 80146a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80146a8:	e014      	b.n	80146d4 <HAL_TIM_Encoder_Stop_IT+0x180>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2201      	movs	r2, #1
 80146ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80146b2:	e00f      	b.n	80146d4 <HAL_TIM_Encoder_Stop_IT+0x180>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2201      	movs	r2, #1
 80146b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2201      	movs	r2, #1
 80146c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2201      	movs	r2, #1
 80146c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2201      	movs	r2, #1
 80146d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return HAL_OK;
 80146d4:	2300      	movs	r3, #0
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3708      	adds	r7, #8
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}

080146de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b082      	sub	sp, #8
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	691b      	ldr	r3, [r3, #16]
 80146ec:	f003 0302 	and.w	r3, r3, #2
 80146f0:	2b02      	cmp	r3, #2
 80146f2:	d122      	bne.n	801473a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	f003 0302 	and.w	r3, r3, #2
 80146fe:	2b02      	cmp	r3, #2
 8014700:	d11b      	bne.n	801473a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f06f 0202 	mvn.w	r2, #2
 801470a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2201      	movs	r2, #1
 8014710:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	699b      	ldr	r3, [r3, #24]
 8014718:	f003 0303 	and.w	r3, r3, #3
 801471c:	2b00      	cmp	r3, #0
 801471e:	d003      	beq.n	8014728 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7f5 f99f 	bl	8009a64 <HAL_TIM_IC_CaptureCallback>
 8014726:	e005      	b.n	8014734 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7f5 f971 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f000 fa8c 	bl	8014c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2200      	movs	r2, #0
 8014738:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	691b      	ldr	r3, [r3, #16]
 8014740:	f003 0304 	and.w	r3, r3, #4
 8014744:	2b04      	cmp	r3, #4
 8014746:	d122      	bne.n	801478e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	f003 0304 	and.w	r3, r3, #4
 8014752:	2b04      	cmp	r3, #4
 8014754:	d11b      	bne.n	801478e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f06f 0204 	mvn.w	r2, #4
 801475e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2202      	movs	r2, #2
 8014764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	699b      	ldr	r3, [r3, #24]
 801476c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014770:	2b00      	cmp	r3, #0
 8014772:	d003      	beq.n	801477c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7f5 f975 	bl	8009a64 <HAL_TIM_IC_CaptureCallback>
 801477a:	e005      	b.n	8014788 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7f5 f947 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 fa62 	bl	8014c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2200      	movs	r2, #0
 801478c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	691b      	ldr	r3, [r3, #16]
 8014794:	f003 0308 	and.w	r3, r3, #8
 8014798:	2b08      	cmp	r3, #8
 801479a:	d122      	bne.n	80147e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	f003 0308 	and.w	r3, r3, #8
 80147a6:	2b08      	cmp	r3, #8
 80147a8:	d11b      	bne.n	80147e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	f06f 0208 	mvn.w	r2, #8
 80147b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2204      	movs	r2, #4
 80147b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	69db      	ldr	r3, [r3, #28]
 80147c0:	f003 0303 	and.w	r3, r3, #3
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d003      	beq.n	80147d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f7f5 f94b 	bl	8009a64 <HAL_TIM_IC_CaptureCallback>
 80147ce:	e005      	b.n	80147dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7f5 f91d 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f000 fa38 	bl	8014c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2200      	movs	r2, #0
 80147e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	691b      	ldr	r3, [r3, #16]
 80147e8:	f003 0310 	and.w	r3, r3, #16
 80147ec:	2b10      	cmp	r3, #16
 80147ee:	d122      	bne.n	8014836 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	f003 0310 	and.w	r3, r3, #16
 80147fa:	2b10      	cmp	r3, #16
 80147fc:	d11b      	bne.n	8014836 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	f06f 0210 	mvn.w	r2, #16
 8014806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2208      	movs	r2, #8
 801480c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	69db      	ldr	r3, [r3, #28]
 8014814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014818:	2b00      	cmp	r3, #0
 801481a:	d003      	beq.n	8014824 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801481c:	6878      	ldr	r0, [r7, #4]
 801481e:	f7f5 f921 	bl	8009a64 <HAL_TIM_IC_CaptureCallback>
 8014822:	e005      	b.n	8014830 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f7f5 f8f3 	bl	8009a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f000 fa0e 	bl	8014c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2200      	movs	r2, #0
 8014834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	691b      	ldr	r3, [r3, #16]
 801483c:	f003 0301 	and.w	r3, r3, #1
 8014840:	2b01      	cmp	r3, #1
 8014842:	d10e      	bne.n	8014862 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	68db      	ldr	r3, [r3, #12]
 801484a:	f003 0301 	and.w	r3, r3, #1
 801484e:	2b01      	cmp	r3, #1
 8014850:	d107      	bne.n	8014862 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f06f 0201 	mvn.w	r2, #1
 801485a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 f9eb 	bl	8014c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	691b      	ldr	r3, [r3, #16]
 8014868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801486c:	2b80      	cmp	r3, #128	; 0x80
 801486e:	d10e      	bne.n	801488e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	68db      	ldr	r3, [r3, #12]
 8014876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801487a:	2b80      	cmp	r3, #128	; 0x80
 801487c:	d107      	bne.n	801488e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f000 fe99 	bl	80155c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	691b      	ldr	r3, [r3, #16]
 8014894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801489c:	d10e      	bne.n	80148bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148a8:	2b80      	cmp	r3, #128	; 0x80
 80148aa:	d107      	bne.n	80148bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80148b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f000 fe8c 	bl	80155d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	691b      	ldr	r3, [r3, #16]
 80148c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148c6:	2b40      	cmp	r3, #64	; 0x40
 80148c8:	d10e      	bne.n	80148e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148d4:	2b40      	cmp	r3, #64	; 0x40
 80148d6:	d107      	bne.n	80148e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80148e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f000 f9bc 	bl	8014c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	691b      	ldr	r3, [r3, #16]
 80148ee:	f003 0320 	and.w	r3, r3, #32
 80148f2:	2b20      	cmp	r3, #32
 80148f4:	d10e      	bne.n	8014914 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	f003 0320 	and.w	r3, r3, #32
 8014900:	2b20      	cmp	r3, #32
 8014902:	d107      	bne.n	8014914 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	f06f 0220 	mvn.w	r2, #32
 801490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 fe4c 	bl	80155ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014914:	bf00      	nop
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b086      	sub	sp, #24
 8014920:	af00      	add	r7, sp, #0
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014928:	2300      	movs	r3, #0
 801492a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014932:	2b01      	cmp	r3, #1
 8014934:	d101      	bne.n	801493a <HAL_TIM_OC_ConfigChannel+0x1e>
 8014936:	2302      	movs	r3, #2
 8014938:	e066      	b.n	8014a08 <HAL_TIM_OC_ConfigChannel+0xec>
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2201      	movs	r2, #1
 801493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2b14      	cmp	r3, #20
 8014946:	d857      	bhi.n	80149f8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8014948:	a201      	add	r2, pc, #4	; (adr r2, 8014950 <HAL_TIM_OC_ConfigChannel+0x34>)
 801494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801494e:	bf00      	nop
 8014950:	080149a5 	.word	0x080149a5
 8014954:	080149f9 	.word	0x080149f9
 8014958:	080149f9 	.word	0x080149f9
 801495c:	080149f9 	.word	0x080149f9
 8014960:	080149b3 	.word	0x080149b3
 8014964:	080149f9 	.word	0x080149f9
 8014968:	080149f9 	.word	0x080149f9
 801496c:	080149f9 	.word	0x080149f9
 8014970:	080149c1 	.word	0x080149c1
 8014974:	080149f9 	.word	0x080149f9
 8014978:	080149f9 	.word	0x080149f9
 801497c:	080149f9 	.word	0x080149f9
 8014980:	080149cf 	.word	0x080149cf
 8014984:	080149f9 	.word	0x080149f9
 8014988:	080149f9 	.word	0x080149f9
 801498c:	080149f9 	.word	0x080149f9
 8014990:	080149dd 	.word	0x080149dd
 8014994:	080149f9 	.word	0x080149f9
 8014998:	080149f9 	.word	0x080149f9
 801499c:	080149f9 	.word	0x080149f9
 80149a0:	080149eb 	.word	0x080149eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	68b9      	ldr	r1, [r7, #8]
 80149aa:	4618      	mov	r0, r3
 80149ac:	f000 f9fc 	bl	8014da8 <TIM_OC1_SetConfig>
      break;
 80149b0:	e025      	b.n	80149fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	68b9      	ldr	r1, [r7, #8]
 80149b8:	4618      	mov	r0, r3
 80149ba:	f000 fa85 	bl	8014ec8 <TIM_OC2_SetConfig>
      break;
 80149be:	e01e      	b.n	80149fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	68b9      	ldr	r1, [r7, #8]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f000 fb08 	bl	8014fdc <TIM_OC3_SetConfig>
      break;
 80149cc:	e017      	b.n	80149fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	68b9      	ldr	r1, [r7, #8]
 80149d4:	4618      	mov	r0, r3
 80149d6:	f000 fb89 	bl	80150ec <TIM_OC4_SetConfig>
      break;
 80149da:	e010      	b.n	80149fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	68b9      	ldr	r1, [r7, #8]
 80149e2:	4618      	mov	r0, r3
 80149e4:	f000 fbec 	bl	80151c0 <TIM_OC5_SetConfig>
      break;
 80149e8:	e009      	b.n	80149fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	68b9      	ldr	r1, [r7, #8]
 80149f0:	4618      	mov	r0, r3
 80149f2:	f000 fc49 	bl	8015288 <TIM_OC6_SetConfig>
      break;
 80149f6:	e002      	b.n	80149fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80149f8:	2301      	movs	r3, #1
 80149fa:	75fb      	strb	r3, [r7, #23]
      break;
 80149fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2200      	movs	r2, #0
 8014a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3718      	adds	r7, #24
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}

08014a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b086      	sub	sp, #24
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	60b9      	str	r1, [r7, #8]
 8014a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d101      	bne.n	8014a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014a2a:	2302      	movs	r3, #2
 8014a2c:	e0ff      	b.n	8014c2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	2201      	movs	r2, #1
 8014a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	2b14      	cmp	r3, #20
 8014a3a:	f200 80f0 	bhi.w	8014c1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8014a3e:	a201      	add	r2, pc, #4	; (adr r2, 8014a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a44:	08014a99 	.word	0x08014a99
 8014a48:	08014c1f 	.word	0x08014c1f
 8014a4c:	08014c1f 	.word	0x08014c1f
 8014a50:	08014c1f 	.word	0x08014c1f
 8014a54:	08014ad9 	.word	0x08014ad9
 8014a58:	08014c1f 	.word	0x08014c1f
 8014a5c:	08014c1f 	.word	0x08014c1f
 8014a60:	08014c1f 	.word	0x08014c1f
 8014a64:	08014b1b 	.word	0x08014b1b
 8014a68:	08014c1f 	.word	0x08014c1f
 8014a6c:	08014c1f 	.word	0x08014c1f
 8014a70:	08014c1f 	.word	0x08014c1f
 8014a74:	08014b5b 	.word	0x08014b5b
 8014a78:	08014c1f 	.word	0x08014c1f
 8014a7c:	08014c1f 	.word	0x08014c1f
 8014a80:	08014c1f 	.word	0x08014c1f
 8014a84:	08014b9d 	.word	0x08014b9d
 8014a88:	08014c1f 	.word	0x08014c1f
 8014a8c:	08014c1f 	.word	0x08014c1f
 8014a90:	08014c1f 	.word	0x08014c1f
 8014a94:	08014bdd 	.word	0x08014bdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	68b9      	ldr	r1, [r7, #8]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f000 f982 	bl	8014da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	699a      	ldr	r2, [r3, #24]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	f042 0208 	orr.w	r2, r2, #8
 8014ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	699a      	ldr	r2, [r3, #24]
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	f022 0204 	bic.w	r2, r2, #4
 8014ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	6999      	ldr	r1, [r3, #24]
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	691a      	ldr	r2, [r3, #16]
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	430a      	orrs	r2, r1
 8014ad4:	619a      	str	r2, [r3, #24]
      break;
 8014ad6:	e0a5      	b.n	8014c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	68b9      	ldr	r1, [r7, #8]
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f000 f9f2 	bl	8014ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	699a      	ldr	r2, [r3, #24]
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	699a      	ldr	r2, [r3, #24]
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	6999      	ldr	r1, [r3, #24]
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	691b      	ldr	r3, [r3, #16]
 8014b0e:	021a      	lsls	r2, r3, #8
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	430a      	orrs	r2, r1
 8014b16:	619a      	str	r2, [r3, #24]
      break;
 8014b18:	e084      	b.n	8014c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	68b9      	ldr	r1, [r7, #8]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f000 fa5b 	bl	8014fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	69da      	ldr	r2, [r3, #28]
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	f042 0208 	orr.w	r2, r2, #8
 8014b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	69da      	ldr	r2, [r3, #28]
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	f022 0204 	bic.w	r2, r2, #4
 8014b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	69d9      	ldr	r1, [r3, #28]
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	691a      	ldr	r2, [r3, #16]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	430a      	orrs	r2, r1
 8014b56:	61da      	str	r2, [r3, #28]
      break;
 8014b58:	e064      	b.n	8014c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	68b9      	ldr	r1, [r7, #8]
 8014b60:	4618      	mov	r0, r3
 8014b62:	f000 fac3 	bl	80150ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	69da      	ldr	r2, [r3, #28]
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	69da      	ldr	r2, [r3, #28]
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	69d9      	ldr	r1, [r3, #28]
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	691b      	ldr	r3, [r3, #16]
 8014b90:	021a      	lsls	r2, r3, #8
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	430a      	orrs	r2, r1
 8014b98:	61da      	str	r2, [r3, #28]
      break;
 8014b9a:	e043      	b.n	8014c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	68b9      	ldr	r1, [r7, #8]
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f000 fb0c 	bl	80151c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f042 0208 	orr.w	r2, r2, #8
 8014bb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	f022 0204 	bic.w	r2, r2, #4
 8014bc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	691a      	ldr	r2, [r3, #16]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	430a      	orrs	r2, r1
 8014bd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014bda:	e023      	b.n	8014c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	68b9      	ldr	r1, [r7, #8]
 8014be2:	4618      	mov	r0, r3
 8014be4:	f000 fb50 	bl	8015288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014bf6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	691b      	ldr	r3, [r3, #16]
 8014c12:	021a      	lsls	r2, r3, #8
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	430a      	orrs	r2, r1
 8014c1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014c1c:	e002      	b.n	8014c24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014c1e:	2301      	movs	r3, #1
 8014c20:	75fb      	strb	r3, [r7, #23]
      break;
 8014c22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	2200      	movs	r2, #0
 8014c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3718      	adds	r7, #24
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop

08014c38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014c38:	b480      	push	{r7}
 8014c3a:	b083      	sub	sp, #12
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8014c40:	bf00      	nop
 8014c42:	370c      	adds	r7, #12
 8014c44:	46bd      	mov	sp, r7
 8014c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4a:	4770      	bx	lr

08014c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b083      	sub	sp, #12
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014c54:	bf00      	nop
 8014c56:	370c      	adds	r7, #12
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr

08014c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b083      	sub	sp, #12
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014c68:	bf00      	nop
 8014c6a:	370c      	adds	r7, #12
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c72:	4770      	bx	lr

08014c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b085      	sub	sp, #20
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	4a40      	ldr	r2, [pc, #256]	; (8014d88 <TIM_Base_SetConfig+0x114>)
 8014c88:	4293      	cmp	r3, r2
 8014c8a:	d013      	beq.n	8014cb4 <TIM_Base_SetConfig+0x40>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014c92:	d00f      	beq.n	8014cb4 <TIM_Base_SetConfig+0x40>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	4a3d      	ldr	r2, [pc, #244]	; (8014d8c <TIM_Base_SetConfig+0x118>)
 8014c98:	4293      	cmp	r3, r2
 8014c9a:	d00b      	beq.n	8014cb4 <TIM_Base_SetConfig+0x40>
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	4a3c      	ldr	r2, [pc, #240]	; (8014d90 <TIM_Base_SetConfig+0x11c>)
 8014ca0:	4293      	cmp	r3, r2
 8014ca2:	d007      	beq.n	8014cb4 <TIM_Base_SetConfig+0x40>
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	4a3b      	ldr	r2, [pc, #236]	; (8014d94 <TIM_Base_SetConfig+0x120>)
 8014ca8:	4293      	cmp	r3, r2
 8014caa:	d003      	beq.n	8014cb4 <TIM_Base_SetConfig+0x40>
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	4a3a      	ldr	r2, [pc, #232]	; (8014d98 <TIM_Base_SetConfig+0x124>)
 8014cb0:	4293      	cmp	r3, r2
 8014cb2:	d108      	bne.n	8014cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	68fa      	ldr	r2, [r7, #12]
 8014cc2:	4313      	orrs	r3, r2
 8014cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	4a2f      	ldr	r2, [pc, #188]	; (8014d88 <TIM_Base_SetConfig+0x114>)
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d01f      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014cd4:	d01b      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	4a2c      	ldr	r2, [pc, #176]	; (8014d8c <TIM_Base_SetConfig+0x118>)
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	d017      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	4a2b      	ldr	r2, [pc, #172]	; (8014d90 <TIM_Base_SetConfig+0x11c>)
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	d013      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	4a2a      	ldr	r2, [pc, #168]	; (8014d94 <TIM_Base_SetConfig+0x120>)
 8014cea:	4293      	cmp	r3, r2
 8014cec:	d00f      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	4a29      	ldr	r2, [pc, #164]	; (8014d98 <TIM_Base_SetConfig+0x124>)
 8014cf2:	4293      	cmp	r3, r2
 8014cf4:	d00b      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4a28      	ldr	r2, [pc, #160]	; (8014d9c <TIM_Base_SetConfig+0x128>)
 8014cfa:	4293      	cmp	r3, r2
 8014cfc:	d007      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	4a27      	ldr	r2, [pc, #156]	; (8014da0 <TIM_Base_SetConfig+0x12c>)
 8014d02:	4293      	cmp	r3, r2
 8014d04:	d003      	beq.n	8014d0e <TIM_Base_SetConfig+0x9a>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	4a26      	ldr	r2, [pc, #152]	; (8014da4 <TIM_Base_SetConfig+0x130>)
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	d108      	bne.n	8014d20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	68db      	ldr	r3, [r3, #12]
 8014d1a:	68fa      	ldr	r2, [r7, #12]
 8014d1c:	4313      	orrs	r3, r2
 8014d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	695b      	ldr	r3, [r3, #20]
 8014d2a:	4313      	orrs	r3, r2
 8014d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	68fa      	ldr	r2, [r7, #12]
 8014d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	689a      	ldr	r2, [r3, #8]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	681a      	ldr	r2, [r3, #0]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	4a10      	ldr	r2, [pc, #64]	; (8014d88 <TIM_Base_SetConfig+0x114>)
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d00f      	beq.n	8014d6c <TIM_Base_SetConfig+0xf8>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	4a12      	ldr	r2, [pc, #72]	; (8014d98 <TIM_Base_SetConfig+0x124>)
 8014d50:	4293      	cmp	r3, r2
 8014d52:	d00b      	beq.n	8014d6c <TIM_Base_SetConfig+0xf8>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	4a11      	ldr	r2, [pc, #68]	; (8014d9c <TIM_Base_SetConfig+0x128>)
 8014d58:	4293      	cmp	r3, r2
 8014d5a:	d007      	beq.n	8014d6c <TIM_Base_SetConfig+0xf8>
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	4a10      	ldr	r2, [pc, #64]	; (8014da0 <TIM_Base_SetConfig+0x12c>)
 8014d60:	4293      	cmp	r3, r2
 8014d62:	d003      	beq.n	8014d6c <TIM_Base_SetConfig+0xf8>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	4a0f      	ldr	r2, [pc, #60]	; (8014da4 <TIM_Base_SetConfig+0x130>)
 8014d68:	4293      	cmp	r3, r2
 8014d6a:	d103      	bne.n	8014d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	691a      	ldr	r2, [r3, #16]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2201      	movs	r2, #1
 8014d78:	615a      	str	r2, [r3, #20]
}
 8014d7a:	bf00      	nop
 8014d7c:	3714      	adds	r7, #20
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d84:	4770      	bx	lr
 8014d86:	bf00      	nop
 8014d88:	40012c00 	.word	0x40012c00
 8014d8c:	40000400 	.word	0x40000400
 8014d90:	40000800 	.word	0x40000800
 8014d94:	40000c00 	.word	0x40000c00
 8014d98:	40013400 	.word	0x40013400
 8014d9c:	40014000 	.word	0x40014000
 8014da0:	40014400 	.word	0x40014400
 8014da4:	40014800 	.word	0x40014800

08014da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014da8:	b480      	push	{r7}
 8014daa:	b087      	sub	sp, #28
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	6a1b      	ldr	r3, [r3, #32]
 8014db6:	f023 0201 	bic.w	r2, r3, #1
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	6a1b      	ldr	r3, [r3, #32]
 8014dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	699b      	ldr	r3, [r3, #24]
 8014dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f023 0303 	bic.w	r3, r3, #3
 8014de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	68fa      	ldr	r2, [r7, #12]
 8014dea:	4313      	orrs	r3, r2
 8014dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	f023 0302 	bic.w	r3, r3, #2
 8014df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	689b      	ldr	r3, [r3, #8]
 8014dfa:	697a      	ldr	r2, [r7, #20]
 8014dfc:	4313      	orrs	r3, r2
 8014dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	4a2c      	ldr	r2, [pc, #176]	; (8014eb4 <TIM_OC1_SetConfig+0x10c>)
 8014e04:	4293      	cmp	r3, r2
 8014e06:	d00f      	beq.n	8014e28 <TIM_OC1_SetConfig+0x80>
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	4a2b      	ldr	r2, [pc, #172]	; (8014eb8 <TIM_OC1_SetConfig+0x110>)
 8014e0c:	4293      	cmp	r3, r2
 8014e0e:	d00b      	beq.n	8014e28 <TIM_OC1_SetConfig+0x80>
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	4a2a      	ldr	r2, [pc, #168]	; (8014ebc <TIM_OC1_SetConfig+0x114>)
 8014e14:	4293      	cmp	r3, r2
 8014e16:	d007      	beq.n	8014e28 <TIM_OC1_SetConfig+0x80>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	4a29      	ldr	r2, [pc, #164]	; (8014ec0 <TIM_OC1_SetConfig+0x118>)
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d003      	beq.n	8014e28 <TIM_OC1_SetConfig+0x80>
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	4a28      	ldr	r2, [pc, #160]	; (8014ec4 <TIM_OC1_SetConfig+0x11c>)
 8014e24:	4293      	cmp	r3, r2
 8014e26:	d10c      	bne.n	8014e42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	f023 0308 	bic.w	r3, r3, #8
 8014e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014e30:	683b      	ldr	r3, [r7, #0]
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	697a      	ldr	r2, [r7, #20]
 8014e36:	4313      	orrs	r3, r2
 8014e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	f023 0304 	bic.w	r3, r3, #4
 8014e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	4a1b      	ldr	r2, [pc, #108]	; (8014eb4 <TIM_OC1_SetConfig+0x10c>)
 8014e46:	4293      	cmp	r3, r2
 8014e48:	d00f      	beq.n	8014e6a <TIM_OC1_SetConfig+0xc2>
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	4a1a      	ldr	r2, [pc, #104]	; (8014eb8 <TIM_OC1_SetConfig+0x110>)
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d00b      	beq.n	8014e6a <TIM_OC1_SetConfig+0xc2>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	4a19      	ldr	r2, [pc, #100]	; (8014ebc <TIM_OC1_SetConfig+0x114>)
 8014e56:	4293      	cmp	r3, r2
 8014e58:	d007      	beq.n	8014e6a <TIM_OC1_SetConfig+0xc2>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4a18      	ldr	r2, [pc, #96]	; (8014ec0 <TIM_OC1_SetConfig+0x118>)
 8014e5e:	4293      	cmp	r3, r2
 8014e60:	d003      	beq.n	8014e6a <TIM_OC1_SetConfig+0xc2>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4a17      	ldr	r2, [pc, #92]	; (8014ec4 <TIM_OC1_SetConfig+0x11c>)
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d111      	bne.n	8014e8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014e6a:	693b      	ldr	r3, [r7, #16]
 8014e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	695b      	ldr	r3, [r3, #20]
 8014e7e:	693a      	ldr	r2, [r7, #16]
 8014e80:	4313      	orrs	r3, r2
 8014e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	699b      	ldr	r3, [r3, #24]
 8014e88:	693a      	ldr	r2, [r7, #16]
 8014e8a:	4313      	orrs	r3, r2
 8014e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	693a      	ldr	r2, [r7, #16]
 8014e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	68fa      	ldr	r2, [r7, #12]
 8014e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	685a      	ldr	r2, [r3, #4]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	697a      	ldr	r2, [r7, #20]
 8014ea6:	621a      	str	r2, [r3, #32]
}
 8014ea8:	bf00      	nop
 8014eaa:	371c      	adds	r7, #28
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr
 8014eb4:	40012c00 	.word	0x40012c00
 8014eb8:	40013400 	.word	0x40013400
 8014ebc:	40014000 	.word	0x40014000
 8014ec0:	40014400 	.word	0x40014400
 8014ec4:	40014800 	.word	0x40014800

08014ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b087      	sub	sp, #28
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
 8014ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	6a1b      	ldr	r3, [r3, #32]
 8014ed6:	f023 0210 	bic.w	r2, r3, #16
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6a1b      	ldr	r3, [r3, #32]
 8014ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	699b      	ldr	r3, [r3, #24]
 8014eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	021b      	lsls	r3, r3, #8
 8014f0a:	68fa      	ldr	r2, [r7, #12]
 8014f0c:	4313      	orrs	r3, r2
 8014f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	f023 0320 	bic.w	r3, r3, #32
 8014f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	689b      	ldr	r3, [r3, #8]
 8014f1c:	011b      	lsls	r3, r3, #4
 8014f1e:	697a      	ldr	r2, [r7, #20]
 8014f20:	4313      	orrs	r3, r2
 8014f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	4a28      	ldr	r2, [pc, #160]	; (8014fc8 <TIM_OC2_SetConfig+0x100>)
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	d003      	beq.n	8014f34 <TIM_OC2_SetConfig+0x6c>
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4a27      	ldr	r2, [pc, #156]	; (8014fcc <TIM_OC2_SetConfig+0x104>)
 8014f30:	4293      	cmp	r3, r2
 8014f32:	d10d      	bne.n	8014f50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	68db      	ldr	r3, [r3, #12]
 8014f40:	011b      	lsls	r3, r3, #4
 8014f42:	697a      	ldr	r2, [r7, #20]
 8014f44:	4313      	orrs	r3, r2
 8014f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	4a1d      	ldr	r2, [pc, #116]	; (8014fc8 <TIM_OC2_SetConfig+0x100>)
 8014f54:	4293      	cmp	r3, r2
 8014f56:	d00f      	beq.n	8014f78 <TIM_OC2_SetConfig+0xb0>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	4a1c      	ldr	r2, [pc, #112]	; (8014fcc <TIM_OC2_SetConfig+0x104>)
 8014f5c:	4293      	cmp	r3, r2
 8014f5e:	d00b      	beq.n	8014f78 <TIM_OC2_SetConfig+0xb0>
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	4a1b      	ldr	r2, [pc, #108]	; (8014fd0 <TIM_OC2_SetConfig+0x108>)
 8014f64:	4293      	cmp	r3, r2
 8014f66:	d007      	beq.n	8014f78 <TIM_OC2_SetConfig+0xb0>
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	4a1a      	ldr	r2, [pc, #104]	; (8014fd4 <TIM_OC2_SetConfig+0x10c>)
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d003      	beq.n	8014f78 <TIM_OC2_SetConfig+0xb0>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	4a19      	ldr	r2, [pc, #100]	; (8014fd8 <TIM_OC2_SetConfig+0x110>)
 8014f74:	4293      	cmp	r3, r2
 8014f76:	d113      	bne.n	8014fa0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	695b      	ldr	r3, [r3, #20]
 8014f8c:	009b      	lsls	r3, r3, #2
 8014f8e:	693a      	ldr	r2, [r7, #16]
 8014f90:	4313      	orrs	r3, r2
 8014f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	699b      	ldr	r3, [r3, #24]
 8014f98:	009b      	lsls	r3, r3, #2
 8014f9a:	693a      	ldr	r2, [r7, #16]
 8014f9c:	4313      	orrs	r3, r2
 8014f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	693a      	ldr	r2, [r7, #16]
 8014fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	697a      	ldr	r2, [r7, #20]
 8014fb8:	621a      	str	r2, [r3, #32]
}
 8014fba:	bf00      	nop
 8014fbc:	371c      	adds	r7, #28
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	40012c00 	.word	0x40012c00
 8014fcc:	40013400 	.word	0x40013400
 8014fd0:	40014000 	.word	0x40014000
 8014fd4:	40014400 	.word	0x40014400
 8014fd8:	40014800 	.word	0x40014800

08014fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b087      	sub	sp, #28
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	6a1b      	ldr	r3, [r3, #32]
 8014fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	6a1b      	ldr	r3, [r3, #32]
 8014ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	685b      	ldr	r3, [r3, #4]
 8014ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	69db      	ldr	r3, [r3, #28]
 8015002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	f023 0303 	bic.w	r3, r3, #3
 8015016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	68fa      	ldr	r2, [r7, #12]
 801501e:	4313      	orrs	r3, r2
 8015020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	689b      	ldr	r3, [r3, #8]
 801502e:	021b      	lsls	r3, r3, #8
 8015030:	697a      	ldr	r2, [r7, #20]
 8015032:	4313      	orrs	r3, r2
 8015034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	4a27      	ldr	r2, [pc, #156]	; (80150d8 <TIM_OC3_SetConfig+0xfc>)
 801503a:	4293      	cmp	r3, r2
 801503c:	d003      	beq.n	8015046 <TIM_OC3_SetConfig+0x6a>
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	4a26      	ldr	r2, [pc, #152]	; (80150dc <TIM_OC3_SetConfig+0x100>)
 8015042:	4293      	cmp	r3, r2
 8015044:	d10d      	bne.n	8015062 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801504c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	68db      	ldr	r3, [r3, #12]
 8015052:	021b      	lsls	r3, r3, #8
 8015054:	697a      	ldr	r2, [r7, #20]
 8015056:	4313      	orrs	r3, r2
 8015058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	4a1c      	ldr	r2, [pc, #112]	; (80150d8 <TIM_OC3_SetConfig+0xfc>)
 8015066:	4293      	cmp	r3, r2
 8015068:	d00f      	beq.n	801508a <TIM_OC3_SetConfig+0xae>
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	4a1b      	ldr	r2, [pc, #108]	; (80150dc <TIM_OC3_SetConfig+0x100>)
 801506e:	4293      	cmp	r3, r2
 8015070:	d00b      	beq.n	801508a <TIM_OC3_SetConfig+0xae>
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	4a1a      	ldr	r2, [pc, #104]	; (80150e0 <TIM_OC3_SetConfig+0x104>)
 8015076:	4293      	cmp	r3, r2
 8015078:	d007      	beq.n	801508a <TIM_OC3_SetConfig+0xae>
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	4a19      	ldr	r2, [pc, #100]	; (80150e4 <TIM_OC3_SetConfig+0x108>)
 801507e:	4293      	cmp	r3, r2
 8015080:	d003      	beq.n	801508a <TIM_OC3_SetConfig+0xae>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	4a18      	ldr	r2, [pc, #96]	; (80150e8 <TIM_OC3_SetConfig+0x10c>)
 8015086:	4293      	cmp	r3, r2
 8015088:	d113      	bne.n	80150b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	695b      	ldr	r3, [r3, #20]
 801509e:	011b      	lsls	r3, r3, #4
 80150a0:	693a      	ldr	r2, [r7, #16]
 80150a2:	4313      	orrs	r3, r2
 80150a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	699b      	ldr	r3, [r3, #24]
 80150aa:	011b      	lsls	r3, r3, #4
 80150ac:	693a      	ldr	r2, [r7, #16]
 80150ae:	4313      	orrs	r3, r2
 80150b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	693a      	ldr	r2, [r7, #16]
 80150b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	68fa      	ldr	r2, [r7, #12]
 80150bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	685a      	ldr	r2, [r3, #4]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	697a      	ldr	r2, [r7, #20]
 80150ca:	621a      	str	r2, [r3, #32]
}
 80150cc:	bf00      	nop
 80150ce:	371c      	adds	r7, #28
 80150d0:	46bd      	mov	sp, r7
 80150d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d6:	4770      	bx	lr
 80150d8:	40012c00 	.word	0x40012c00
 80150dc:	40013400 	.word	0x40013400
 80150e0:	40014000 	.word	0x40014000
 80150e4:	40014400 	.word	0x40014400
 80150e8:	40014800 	.word	0x40014800

080150ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80150ec:	b480      	push	{r7}
 80150ee:	b087      	sub	sp, #28
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6a1b      	ldr	r3, [r3, #32]
 80150fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6a1b      	ldr	r3, [r3, #32]
 8015106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	685b      	ldr	r3, [r3, #4]
 801510c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	69db      	ldr	r3, [r3, #28]
 8015112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801511a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	021b      	lsls	r3, r3, #8
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	4313      	orrs	r3, r2
 8015132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801513a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	689b      	ldr	r3, [r3, #8]
 8015140:	031b      	lsls	r3, r3, #12
 8015142:	693a      	ldr	r2, [r7, #16]
 8015144:	4313      	orrs	r3, r2
 8015146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	4a18      	ldr	r2, [pc, #96]	; (80151ac <TIM_OC4_SetConfig+0xc0>)
 801514c:	4293      	cmp	r3, r2
 801514e:	d00f      	beq.n	8015170 <TIM_OC4_SetConfig+0x84>
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	4a17      	ldr	r2, [pc, #92]	; (80151b0 <TIM_OC4_SetConfig+0xc4>)
 8015154:	4293      	cmp	r3, r2
 8015156:	d00b      	beq.n	8015170 <TIM_OC4_SetConfig+0x84>
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	4a16      	ldr	r2, [pc, #88]	; (80151b4 <TIM_OC4_SetConfig+0xc8>)
 801515c:	4293      	cmp	r3, r2
 801515e:	d007      	beq.n	8015170 <TIM_OC4_SetConfig+0x84>
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	4a15      	ldr	r2, [pc, #84]	; (80151b8 <TIM_OC4_SetConfig+0xcc>)
 8015164:	4293      	cmp	r3, r2
 8015166:	d003      	beq.n	8015170 <TIM_OC4_SetConfig+0x84>
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	4a14      	ldr	r2, [pc, #80]	; (80151bc <TIM_OC4_SetConfig+0xd0>)
 801516c:	4293      	cmp	r3, r2
 801516e:	d109      	bne.n	8015184 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	695b      	ldr	r3, [r3, #20]
 801517c:	019b      	lsls	r3, r3, #6
 801517e:	697a      	ldr	r2, [r7, #20]
 8015180:	4313      	orrs	r3, r2
 8015182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	697a      	ldr	r2, [r7, #20]
 8015188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	68fa      	ldr	r2, [r7, #12]
 801518e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	685a      	ldr	r2, [r3, #4]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	693a      	ldr	r2, [r7, #16]
 801519c:	621a      	str	r2, [r3, #32]
}
 801519e:	bf00      	nop
 80151a0:	371c      	adds	r7, #28
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr
 80151aa:	bf00      	nop
 80151ac:	40012c00 	.word	0x40012c00
 80151b0:	40013400 	.word	0x40013400
 80151b4:	40014000 	.word	0x40014000
 80151b8:	40014400 	.word	0x40014400
 80151bc:	40014800 	.word	0x40014800

080151c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80151c0:	b480      	push	{r7}
 80151c2:	b087      	sub	sp, #28
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6a1b      	ldr	r3, [r3, #32]
 80151ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	6a1b      	ldr	r3, [r3, #32]
 80151da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80151ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	68fa      	ldr	r2, [r7, #12]
 80151fa:	4313      	orrs	r3, r2
 80151fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8015204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	689b      	ldr	r3, [r3, #8]
 801520a:	041b      	lsls	r3, r3, #16
 801520c:	693a      	ldr	r2, [r7, #16]
 801520e:	4313      	orrs	r3, r2
 8015210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	4a17      	ldr	r2, [pc, #92]	; (8015274 <TIM_OC5_SetConfig+0xb4>)
 8015216:	4293      	cmp	r3, r2
 8015218:	d00f      	beq.n	801523a <TIM_OC5_SetConfig+0x7a>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	4a16      	ldr	r2, [pc, #88]	; (8015278 <TIM_OC5_SetConfig+0xb8>)
 801521e:	4293      	cmp	r3, r2
 8015220:	d00b      	beq.n	801523a <TIM_OC5_SetConfig+0x7a>
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	4a15      	ldr	r2, [pc, #84]	; (801527c <TIM_OC5_SetConfig+0xbc>)
 8015226:	4293      	cmp	r3, r2
 8015228:	d007      	beq.n	801523a <TIM_OC5_SetConfig+0x7a>
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	4a14      	ldr	r2, [pc, #80]	; (8015280 <TIM_OC5_SetConfig+0xc0>)
 801522e:	4293      	cmp	r3, r2
 8015230:	d003      	beq.n	801523a <TIM_OC5_SetConfig+0x7a>
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	4a13      	ldr	r2, [pc, #76]	; (8015284 <TIM_OC5_SetConfig+0xc4>)
 8015236:	4293      	cmp	r3, r2
 8015238:	d109      	bne.n	801524e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801523a:	697b      	ldr	r3, [r7, #20]
 801523c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015240:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	695b      	ldr	r3, [r3, #20]
 8015246:	021b      	lsls	r3, r3, #8
 8015248:	697a      	ldr	r2, [r7, #20]
 801524a:	4313      	orrs	r3, r2
 801524c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	697a      	ldr	r2, [r7, #20]
 8015252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	68fa      	ldr	r2, [r7, #12]
 8015258:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	685a      	ldr	r2, [r3, #4]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	693a      	ldr	r2, [r7, #16]
 8015266:	621a      	str	r2, [r3, #32]
}
 8015268:	bf00      	nop
 801526a:	371c      	adds	r7, #28
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr
 8015274:	40012c00 	.word	0x40012c00
 8015278:	40013400 	.word	0x40013400
 801527c:	40014000 	.word	0x40014000
 8015280:	40014400 	.word	0x40014400
 8015284:	40014800 	.word	0x40014800

08015288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8015288:	b480      	push	{r7}
 801528a:	b087      	sub	sp, #28
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	6a1b      	ldr	r3, [r3, #32]
 8015296:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	6a1b      	ldr	r3, [r3, #32]
 80152a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80152b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80152ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	021b      	lsls	r3, r3, #8
 80152c2:	68fa      	ldr	r2, [r7, #12]
 80152c4:	4313      	orrs	r3, r2
 80152c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80152ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	689b      	ldr	r3, [r3, #8]
 80152d4:	051b      	lsls	r3, r3, #20
 80152d6:	693a      	ldr	r2, [r7, #16]
 80152d8:	4313      	orrs	r3, r2
 80152da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	4a18      	ldr	r2, [pc, #96]	; (8015340 <TIM_OC6_SetConfig+0xb8>)
 80152e0:	4293      	cmp	r3, r2
 80152e2:	d00f      	beq.n	8015304 <TIM_OC6_SetConfig+0x7c>
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	4a17      	ldr	r2, [pc, #92]	; (8015344 <TIM_OC6_SetConfig+0xbc>)
 80152e8:	4293      	cmp	r3, r2
 80152ea:	d00b      	beq.n	8015304 <TIM_OC6_SetConfig+0x7c>
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	4a16      	ldr	r2, [pc, #88]	; (8015348 <TIM_OC6_SetConfig+0xc0>)
 80152f0:	4293      	cmp	r3, r2
 80152f2:	d007      	beq.n	8015304 <TIM_OC6_SetConfig+0x7c>
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	4a15      	ldr	r2, [pc, #84]	; (801534c <TIM_OC6_SetConfig+0xc4>)
 80152f8:	4293      	cmp	r3, r2
 80152fa:	d003      	beq.n	8015304 <TIM_OC6_SetConfig+0x7c>
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	4a14      	ldr	r2, [pc, #80]	; (8015350 <TIM_OC6_SetConfig+0xc8>)
 8015300:	4293      	cmp	r3, r2
 8015302:	d109      	bne.n	8015318 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801530a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	695b      	ldr	r3, [r3, #20]
 8015310:	029b      	lsls	r3, r3, #10
 8015312:	697a      	ldr	r2, [r7, #20]
 8015314:	4313      	orrs	r3, r2
 8015316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	697a      	ldr	r2, [r7, #20]
 801531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	68fa      	ldr	r2, [r7, #12]
 8015322:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	685a      	ldr	r2, [r3, #4]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	693a      	ldr	r2, [r7, #16]
 8015330:	621a      	str	r2, [r3, #32]
}
 8015332:	bf00      	nop
 8015334:	371c      	adds	r7, #28
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	40012c00 	.word	0x40012c00
 8015344:	40013400 	.word	0x40013400
 8015348:	40014000 	.word	0x40014000
 801534c:	40014400 	.word	0x40014400
 8015350:	40014800 	.word	0x40014800

08015354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015354:	b480      	push	{r7}
 8015356:	b087      	sub	sp, #28
 8015358:	af00      	add	r7, sp, #0
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	f003 031f 	and.w	r3, r3, #31
 8015366:	2201      	movs	r2, #1
 8015368:	fa02 f303 	lsl.w	r3, r2, r3
 801536c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	6a1a      	ldr	r2, [r3, #32]
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	43db      	mvns	r3, r3
 8015376:	401a      	ands	r2, r3
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	6a1a      	ldr	r2, [r3, #32]
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	f003 031f 	and.w	r3, r3, #31
 8015386:	6879      	ldr	r1, [r7, #4]
 8015388:	fa01 f303 	lsl.w	r3, r1, r3
 801538c:	431a      	orrs	r2, r3
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	621a      	str	r2, [r3, #32]
}
 8015392:	bf00      	nop
 8015394:	371c      	adds	r7, #28
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr
	...

080153a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80153a0:	b480      	push	{r7}
 80153a2:	b085      	sub	sp, #20
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d101      	bne.n	80153b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80153b4:	2302      	movs	r3, #2
 80153b6:	e068      	b.n	801548a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2201      	movs	r2, #1
 80153bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2202      	movs	r2, #2
 80153c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	689b      	ldr	r3, [r3, #8]
 80153d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4a2e      	ldr	r2, [pc, #184]	; (8015498 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80153de:	4293      	cmp	r3, r2
 80153e0:	d004      	beq.n	80153ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	4a2d      	ldr	r2, [pc, #180]	; (801549c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80153e8:	4293      	cmp	r3, r2
 80153ea:	d108      	bne.n	80153fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80153f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	68fa      	ldr	r2, [r7, #12]
 80153fa:	4313      	orrs	r3, r2
 80153fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015404:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	4313      	orrs	r3, r2
 801540e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68fa      	ldr	r2, [r7, #12]
 8015416:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	4a1e      	ldr	r2, [pc, #120]	; (8015498 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801541e:	4293      	cmp	r3, r2
 8015420:	d01d      	beq.n	801545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801542a:	d018      	beq.n	801545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	4a1b      	ldr	r2, [pc, #108]	; (80154a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015432:	4293      	cmp	r3, r2
 8015434:	d013      	beq.n	801545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	4a1a      	ldr	r2, [pc, #104]	; (80154a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801543c:	4293      	cmp	r3, r2
 801543e:	d00e      	beq.n	801545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	4a18      	ldr	r2, [pc, #96]	; (80154a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8015446:	4293      	cmp	r3, r2
 8015448:	d009      	beq.n	801545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	4a13      	ldr	r2, [pc, #76]	; (801549c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8015450:	4293      	cmp	r3, r2
 8015452:	d004      	beq.n	801545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	4a14      	ldr	r2, [pc, #80]	; (80154ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801545a:	4293      	cmp	r3, r2
 801545c:	d10c      	bne.n	8015478 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	689b      	ldr	r3, [r3, #8]
 801546a:	68ba      	ldr	r2, [r7, #8]
 801546c:	4313      	orrs	r3, r2
 801546e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	68ba      	ldr	r2, [r7, #8]
 8015476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2201      	movs	r2, #1
 801547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2200      	movs	r2, #0
 8015484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015488:	2300      	movs	r3, #0
}
 801548a:	4618      	mov	r0, r3
 801548c:	3714      	adds	r7, #20
 801548e:	46bd      	mov	sp, r7
 8015490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015494:	4770      	bx	lr
 8015496:	bf00      	nop
 8015498:	40012c00 	.word	0x40012c00
 801549c:	40013400 	.word	0x40013400
 80154a0:	40000400 	.word	0x40000400
 80154a4:	40000800 	.word	0x40000800
 80154a8:	40000c00 	.word	0x40000c00
 80154ac:	40014000 	.word	0x40014000

080154b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80154b0:	b480      	push	{r7}
 80154b2:	b085      	sub	sp, #20
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80154ba:	2300      	movs	r3, #0
 80154bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80154c4:	2b01      	cmp	r3, #1
 80154c6:	d101      	bne.n	80154cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80154c8:	2302      	movs	r3, #2
 80154ca:	e065      	b.n	8015598 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2201      	movs	r2, #1
 80154d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	68db      	ldr	r3, [r3, #12]
 80154de:	4313      	orrs	r3, r2
 80154e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	689b      	ldr	r3, [r3, #8]
 80154ec:	4313      	orrs	r3, r2
 80154ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	4313      	orrs	r3, r2
 80154fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	4313      	orrs	r3, r2
 801550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	691b      	ldr	r3, [r3, #16]
 8015516:	4313      	orrs	r3, r2
 8015518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	695b      	ldr	r3, [r3, #20]
 8015524:	4313      	orrs	r3, r2
 8015526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015532:	4313      	orrs	r3, r2
 8015534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	699b      	ldr	r3, [r3, #24]
 8015540:	041b      	lsls	r3, r3, #16
 8015542:	4313      	orrs	r3, r2
 8015544:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	4a16      	ldr	r2, [pc, #88]	; (80155a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801554c:	4293      	cmp	r3, r2
 801554e:	d004      	beq.n	801555a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	4a14      	ldr	r2, [pc, #80]	; (80155a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8015556:	4293      	cmp	r3, r2
 8015558:	d115      	bne.n	8015586 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015564:	051b      	lsls	r3, r3, #20
 8015566:	4313      	orrs	r3, r2
 8015568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	69db      	ldr	r3, [r3, #28]
 8015574:	4313      	orrs	r3, r2
 8015576:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	6a1b      	ldr	r3, [r3, #32]
 8015582:	4313      	orrs	r3, r2
 8015584:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	68fa      	ldr	r2, [r7, #12]
 801558c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	2200      	movs	r2, #0
 8015592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015596:	2300      	movs	r3, #0
}
 8015598:	4618      	mov	r0, r3
 801559a:	3714      	adds	r7, #20
 801559c:	46bd      	mov	sp, r7
 801559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a2:	4770      	bx	lr
 80155a4:	40012c00 	.word	0x40012c00
 80155a8:	40013400 	.word	0x40013400

080155ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80155b4:	bf00      	nop
 80155b6:	370c      	adds	r7, #12
 80155b8:	46bd      	mov	sp, r7
 80155ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155be:	4770      	bx	lr

080155c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80155c0:	b480      	push	{r7}
 80155c2:	b083      	sub	sp, #12
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80155c8:	bf00      	nop
 80155ca:	370c      	adds	r7, #12
 80155cc:	46bd      	mov	sp, r7
 80155ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d2:	4770      	bx	lr

080155d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80155d4:	b480      	push	{r7}
 80155d6:	b083      	sub	sp, #12
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80155dc:	bf00      	nop
 80155de:	370c      	adds	r7, #12
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr

080155e8 <arm_radix8_butterfly_f32>:
 80155e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ec:	ed2d 8b10 	vpush	{d8-d15}
 80155f0:	b09d      	sub	sp, #116	; 0x74
 80155f2:	461c      	mov	r4, r3
 80155f4:	ed9f bac8 	vldr	s22, [pc, #800]	; 8015918 <arm_radix8_butterfly_f32+0x330>
 80155f8:	921a      	str	r2, [sp, #104]	; 0x68
 80155fa:	1d03      	adds	r3, r0, #4
 80155fc:	4682      	mov	sl, r0
 80155fe:	4689      	mov	r9, r1
 8015600:	468b      	mov	fp, r1
 8015602:	931b      	str	r3, [sp, #108]	; 0x6c
 8015604:	9400      	str	r4, [sp, #0]
 8015606:	469e      	mov	lr, r3
 8015608:	ea4f 03db 	mov.w	r3, fp, lsr #3
 801560c:	005a      	lsls	r2, r3, #1
 801560e:	18d6      	adds	r6, r2, r3
 8015610:	18f5      	adds	r5, r6, r3
 8015612:	9203      	str	r2, [sp, #12]
 8015614:	195a      	adds	r2, r3, r5
 8015616:	18d0      	adds	r0, r2, r3
 8015618:	00df      	lsls	r7, r3, #3
 801561a:	1819      	adds	r1, r3, r0
 801561c:	463c      	mov	r4, r7
 801561e:	9701      	str	r7, [sp, #4]
 8015620:	4457      	add	r7, sl
 8015622:	930c      	str	r3, [sp, #48]	; 0x30
 8015624:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8015628:	011b      	lsls	r3, r3, #4
 801562a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 801562e:	eb07 0c04 	add.w	ip, r7, r4
 8015632:	9c00      	ldr	r4, [sp, #0]
 8015634:	9302      	str	r3, [sp, #8]
 8015636:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 801563a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 801563e:	3204      	adds	r2, #4
 8015640:	3104      	adds	r1, #4
 8015642:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8015646:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801564a:	f04f 0800 	mov.w	r8, #0
 801564e:	eddc 7a00 	vldr	s15, [ip]
 8015652:	edd7 6a00 	vldr	s13, [r7]
 8015656:	edd6 3a00 	vldr	s7, [r6]
 801565a:	ed5e aa01 	vldr	s21, [lr, #-4]
 801565e:	edd5 4a00 	vldr	s9, [r5]
 8015662:	ed90 2a00 	vldr	s4, [r0]
 8015666:	ed12 7a01 	vldr	s14, [r2, #-4]
 801566a:	ed51 0a01 	vldr	s1, [r1, #-4]
 801566e:	ee77 8a82 	vadd.f32	s17, s15, s4
 8015672:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8015676:	ee76 1a87 	vadd.f32	s3, s13, s14
 801567a:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 801567e:	ee31 6a84 	vadd.f32	s12, s3, s8
 8015682:	ee33 5a28 	vadd.f32	s10, s6, s17
 8015686:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801568a:	ee75 6a06 	vadd.f32	s13, s10, s12
 801568e:	ee35 5a46 	vsub.f32	s10, s10, s12
 8015692:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8015696:	ed85 5a00 	vstr	s10, [r5]
 801569a:	ed96 1a01 	vldr	s2, [r6, #4]
 801569e:	edd7 5a01 	vldr	s11, [r7, #4]
 80156a2:	ed92 aa00 	vldr	s20, [r2]
 80156a6:	ed91 6a00 	vldr	s12, [r1]
 80156aa:	ed9e 9a00 	vldr	s18, [lr]
 80156ae:	ed95 5a01 	vldr	s10, [r5, #4]
 80156b2:	eddc 6a01 	vldr	s13, [ip, #4]
 80156b6:	edd0 9a01 	vldr	s19, [r0, #4]
 80156ba:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80156be:	ee71 2a46 	vsub.f32	s5, s2, s12
 80156c2:	ee75 3aca 	vsub.f32	s7, s11, s20
 80156c6:	ee37 0a60 	vsub.f32	s0, s14, s1
 80156ca:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80156ce:	ee37 7a20 	vadd.f32	s14, s14, s1
 80156d2:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80156d6:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80156da:	ee79 3a05 	vadd.f32	s7, s18, s10
 80156de:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80156e2:	ee39 5a45 	vsub.f32	s10, s18, s10
 80156e6:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80156ea:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80156ee:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80156f2:	ee31 6a06 	vadd.f32	s12, s2, s12
 80156f6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80156fa:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80156fe:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8015702:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8015706:	ee33 3a68 	vsub.f32	s6, s6, s17
 801570a:	ee36 0a88 	vadd.f32	s0, s13, s16
 801570e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8015712:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8015716:	ee71 1ac4 	vsub.f32	s3, s3, s8
 801571a:	ee75 6a62 	vsub.f32	s13, s10, s5
 801571e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8015722:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8015726:	ee33 1a89 	vadd.f32	s2, s7, s18
 801572a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 801572e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8015732:	ee75 4a22 	vadd.f32	s9, s10, s5
 8015736:	ee32 5a27 	vadd.f32	s10, s4, s15
 801573a:	ee72 7a67 	vsub.f32	s15, s4, s15
 801573e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8015742:	ee75 2a87 	vadd.f32	s5, s11, s14
 8015746:	ee31 9a28 	vadd.f32	s18, s2, s17
 801574a:	ee33 6a46 	vsub.f32	s12, s6, s12
 801574e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8015752:	ee33 2a80 	vadd.f32	s4, s7, s0
 8015756:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801575a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 801575e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8015762:	ee31 1a68 	vsub.f32	s2, s2, s17
 8015766:	ee34 4a21 	vadd.f32	s8, s8, s3
 801576a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 801576e:	ee74 4a85 	vadd.f32	s9, s9, s10
 8015772:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8015776:	44d8      	add	r8, fp
 8015778:	45c1      	cmp	r9, r8
 801577a:	ed8e 9a00 	vstr	s18, [lr]
 801577e:	ed85 1a01 	vstr	s2, [r5, #4]
 8015782:	449e      	add	lr, r3
 8015784:	ed8c 8a00 	vstr	s16, [ip]
 8015788:	441d      	add	r5, r3
 801578a:	ed80 6a00 	vstr	s12, [r0]
 801578e:	edcc 0a01 	vstr	s1, [ip, #4]
 8015792:	ed80 4a01 	vstr	s8, [r0, #4]
 8015796:	449c      	add	ip, r3
 8015798:	ed87 2a00 	vstr	s4, [r7]
 801579c:	4418      	add	r0, r3
 801579e:	ed41 3a01 	vstr	s7, [r1, #-4]
 80157a2:	ed42 2a01 	vstr	s5, [r2, #-4]
 80157a6:	ed86 7a00 	vstr	s14, [r6]
 80157aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80157ae:	edc1 4a00 	vstr	s9, [r1]
 80157b2:	441f      	add	r7, r3
 80157b4:	edc2 5a00 	vstr	s11, [r2]
 80157b8:	4419      	add	r1, r3
 80157ba:	edc6 6a01 	vstr	s13, [r6, #4]
 80157be:	441a      	add	r2, r3
 80157c0:	441e      	add	r6, r3
 80157c2:	f63f af44 	bhi.w	801564e <arm_radix8_butterfly_f32+0x66>
 80157c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80157c8:	2907      	cmp	r1, #7
 80157ca:	4620      	mov	r0, r4
 80157cc:	f240 81e9 	bls.w	8015ba2 <arm_radix8_butterfly_f32+0x5ba>
 80157d0:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80157d4:	193e      	adds	r6, r7, r4
 80157d6:	1935      	adds	r5, r6, r4
 80157d8:	9c03      	ldr	r4, [sp, #12]
 80157da:	9000      	str	r0, [sp, #0]
 80157dc:	4622      	mov	r2, r4
 80157de:	3201      	adds	r2, #1
 80157e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80157e4:	9900      	ldr	r1, [sp, #0]
 80157e6:	1828      	adds	r0, r5, r0
 80157e8:	eb00 0e01 	add.w	lr, r0, r1
 80157ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80157ee:	440a      	add	r2, r1
 80157f0:	eb04 0c01 	add.w	ip, r4, r1
 80157f4:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80157f8:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80157fc:	9a00      	ldr	r2, [sp, #0]
 80157fe:	940f      	str	r4, [sp, #60]	; 0x3c
 8015800:	00ed      	lsls	r5, r5, #3
 8015802:	9511      	str	r5, [sp, #68]	; 0x44
 8015804:	00d5      	lsls	r5, r2, #3
 8015806:	950d      	str	r5, [sp, #52]	; 0x34
 8015808:	9d01      	ldr	r5, [sp, #4]
 801580a:	3508      	adds	r5, #8
 801580c:	9516      	str	r5, [sp, #88]	; 0x58
 801580e:	9d02      	ldr	r5, [sp, #8]
 8015810:	3508      	adds	r5, #8
 8015812:	0114      	lsls	r4, r2, #4
 8015814:	9517      	str	r5, [sp, #92]	; 0x5c
 8015816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015818:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801581a:	940e      	str	r4, [sp, #56]	; 0x38
 801581c:	00c0      	lsls	r0, r0, #3
 801581e:	9010      	str	r0, [sp, #64]	; 0x40
 8015820:	18aa      	adds	r2, r5, r2
 8015822:	9207      	str	r2, [sp, #28]
 8015824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015826:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015828:	18aa      	adds	r2, r5, r2
 801582a:	9208      	str	r2, [sp, #32]
 801582c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801582e:	18aa      	adds	r2, r5, r2
 8015830:	9209      	str	r2, [sp, #36]	; 0x24
 8015832:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8015836:	f10e 0204 	add.w	r2, lr, #4
 801583a:	920a      	str	r2, [sp, #40]	; 0x28
 801583c:	00c9      	lsls	r1, r1, #3
 801583e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015840:	310c      	adds	r1, #12
 8015842:	00f6      	lsls	r6, r6, #3
 8015844:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8015848:	9114      	str	r1, [sp, #80]	; 0x50
 801584a:	18a9      	adds	r1, r5, r2
 801584c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801584e:	9612      	str	r6, [sp, #72]	; 0x48
 8015850:	00ff      	lsls	r7, r7, #3
 8015852:	19ae      	adds	r6, r5, r6
 8015854:	3008      	adds	r0, #8
 8015856:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801585a:	9606      	str	r6, [sp, #24]
 801585c:	9019      	str	r0, [sp, #100]	; 0x64
 801585e:	18aa      	adds	r2, r5, r2
 8015860:	0164      	lsls	r4, r4, #5
 8015862:	19ee      	adds	r6, r5, r7
 8015864:	f10c 000c 	add.w	r0, ip, #12
 8015868:	9713      	str	r7, [sp, #76]	; 0x4c
 801586a:	9604      	str	r6, [sp, #16]
 801586c:	9015      	str	r0, [sp, #84]	; 0x54
 801586e:	9103      	str	r1, [sp, #12]
 8015870:	9205      	str	r2, [sp, #20]
 8015872:	f104 0208 	add.w	r2, r4, #8
 8015876:	9218      	str	r2, [sp, #96]	; 0x60
 8015878:	f04f 0801 	mov.w	r8, #1
 801587c:	2200      	movs	r2, #0
 801587e:	f102 0108 	add.w	r1, r2, #8
 8015882:	460f      	mov	r7, r1
 8015884:	910b      	str	r1, [sp, #44]	; 0x2c
 8015886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015888:	188e      	adds	r6, r1, r2
 801588a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801588c:	188d      	adds	r5, r1, r2
 801588e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8015890:	188c      	adds	r4, r1, r2
 8015892:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015894:	1888      	adds	r0, r1, r2
 8015896:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015898:	eb01 0c02 	add.w	ip, r1, r2
 801589c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801589e:	440a      	add	r2, r1
 80158a0:	9903      	ldr	r1, [sp, #12]
 80158a2:	edd1 fa00 	vldr	s31, [r1]
 80158a6:	9905      	ldr	r1, [sp, #20]
 80158a8:	ed91 fa00 	vldr	s30, [r1]
 80158ac:	9904      	ldr	r1, [sp, #16]
 80158ae:	edd1 ea00 	vldr	s29, [r1]
 80158b2:	9906      	ldr	r1, [sp, #24]
 80158b4:	ed91 ea00 	vldr	s28, [r1]
 80158b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158ba:	edd1 da00 	vldr	s27, [r1]
 80158be:	9908      	ldr	r1, [sp, #32]
 80158c0:	ed91 da00 	vldr	s26, [r1]
 80158c4:	9907      	ldr	r1, [sp, #28]
 80158c6:	edd1 ca00 	vldr	s25, [r1]
 80158ca:	9903      	ldr	r1, [sp, #12]
 80158cc:	ed91 ca01 	vldr	s24, [r1, #4]
 80158d0:	9905      	ldr	r1, [sp, #20]
 80158d2:	edd1 ba01 	vldr	s23, [r1, #4]
 80158d6:	9904      	ldr	r1, [sp, #16]
 80158d8:	edd1 aa01 	vldr	s21, [r1, #4]
 80158dc:	9906      	ldr	r1, [sp, #24]
 80158de:	ed91 aa01 	vldr	s20, [r1, #4]
 80158e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80158e4:	edd1 7a01 	vldr	s15, [r1, #4]
 80158e8:	9908      	ldr	r1, [sp, #32]
 80158ea:	edcd 7a00 	vstr	s15, [sp]
 80158ee:	edd1 7a01 	vldr	s15, [r1, #4]
 80158f2:	9907      	ldr	r1, [sp, #28]
 80158f4:	edcd 7a01 	vstr	s15, [sp, #4]
 80158f8:	edd1 7a01 	vldr	s15, [r1, #4]
 80158fc:	eb0a 0e07 	add.w	lr, sl, r7
 8015900:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015902:	edcd 7a02 	vstr	s15, [sp, #8]
 8015906:	eb0c 010a 	add.w	r1, ip, sl
 801590a:	4456      	add	r6, sl
 801590c:	4455      	add	r5, sl
 801590e:	4454      	add	r4, sl
 8015910:	4450      	add	r0, sl
 8015912:	4452      	add	r2, sl
 8015914:	46c4      	mov	ip, r8
 8015916:	e001      	b.n	801591c <arm_radix8_butterfly_f32+0x334>
 8015918:	3f3504f3 	.word	0x3f3504f3
 801591c:	ed96 5a00 	vldr	s10, [r6]
 8015920:	ed52 9a01 	vldr	s19, [r2, #-4]
 8015924:	ed11 6a01 	vldr	s12, [r1, #-4]
 8015928:	edd0 7a00 	vldr	s15, [r0]
 801592c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8015930:	edde 3a00 	vldr	s7, [lr]
 8015934:	ed94 3a00 	vldr	s6, [r4]
 8015938:	ed95 2a00 	vldr	s4, [r5]
 801593c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8015940:	ee33 8a85 	vadd.f32	s16, s7, s10
 8015944:	ee32 1a06 	vadd.f32	s2, s4, s12
 8015948:	ee33 4a29 	vadd.f32	s8, s6, s19
 801594c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8015950:	ee78 1a04 	vadd.f32	s3, s16, s8
 8015954:	ee71 6a24 	vadd.f32	s13, s2, s9
 8015958:	ee32 2a46 	vsub.f32	s4, s4, s12
 801595c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8015960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015964:	ed8e 6a00 	vstr	s12, [lr]
 8015968:	edd0 8a01 	vldr	s17, [r0, #4]
 801596c:	ed95 9a01 	vldr	s18, [r5, #4]
 8015970:	edd1 2a00 	vldr	s5, [r1]
 8015974:	ed97 7a00 	vldr	s14, [r7]
 8015978:	edd4 0a01 	vldr	s1, [r4, #4]
 801597c:	ed96 6a01 	vldr	s12, [r6, #4]
 8015980:	edd2 5a00 	vldr	s11, [r2]
 8015984:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8015988:	ee33 3a69 	vsub.f32	s6, s6, s19
 801598c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8015990:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8015994:	ee38 4a44 	vsub.f32	s8, s16, s8
 8015998:	ee38 7a87 	vadd.f32	s14, s17, s14
 801599c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80159a0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80159a4:	ee75 8a69 	vsub.f32	s17, s10, s19
 80159a8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80159ac:	ee35 5a29 	vadd.f32	s10, s10, s19
 80159b0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80159b4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80159b8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80159bc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80159c0:	ee32 9a08 	vadd.f32	s18, s4, s16
 80159c4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80159c8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80159cc:	ee71 4a64 	vsub.f32	s9, s2, s9
 80159d0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80159d4:	ee32 1a87 	vadd.f32	s2, s5, s14
 80159d8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80159dc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80159e0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80159e4:	ee73 0a29 	vadd.f32	s1, s6, s19
 80159e8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80159ec:	ee33 3a69 	vsub.f32	s6, s6, s19
 80159f0:	ee32 7a64 	vsub.f32	s14, s4, s9
 80159f4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80159f8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80159fc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8015a00:	ee75 8a85 	vadd.f32	s17, s11, s10
 8015a04:	ee74 3a22 	vadd.f32	s7, s8, s5
 8015a08:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8015a0c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8015a10:	ee79 1a41 	vsub.f32	s3, s18, s2
 8015a14:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8015a18:	ee76 5a43 	vsub.f32	s11, s12, s6
 8015a1c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8015a20:	ee72 4a24 	vadd.f32	s9, s4, s9
 8015a24:	ee30 4a60 	vsub.f32	s8, s0, s1
 8015a28:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8015a2c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8015a30:	ee77 9a85 	vadd.f32	s19, s15, s10
 8015a34:	ee36 6a03 	vadd.f32	s12, s12, s6
 8015a38:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8015a3c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8015a40:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8015a44:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8015a48:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8015a4c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8015a50:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8015a54:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8015a58:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8015a5c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8015a60:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8015a64:	ee35 3a03 	vadd.f32	s6, s10, s6
 8015a68:	ee72 6a66 	vsub.f32	s13, s4, s13
 8015a6c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8015a70:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8015a74:	ed9d 4a02 	vldr	s8, [sp, #8]
 8015a78:	ed8e 1a01 	vstr	s2, [lr, #4]
 8015a7c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8015a80:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8015a84:	ed9d 7a01 	vldr	s14, [sp, #4]
 8015a88:	ed86 3a00 	vstr	s6, [r6]
 8015a8c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8015a90:	ee32 2a05 	vadd.f32	s4, s4, s10
 8015a94:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8015a98:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8015a9c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8015aa0:	ee64 1a00 	vmul.f32	s3, s8, s0
 8015aa4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015aa8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8015aac:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8015ab0:	ee64 8a28 	vmul.f32	s17, s8, s17
 8015ab4:	ed9d 4a00 	vldr	s8, [sp]
 8015ab8:	edc6 6a01 	vstr	s13, [r6, #4]
 8015abc:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8015ac0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8015ac4:	ee64 9a29 	vmul.f32	s19, s8, s19
 8015ac8:	ee24 4a25 	vmul.f32	s8, s8, s11
 8015acc:	ee30 7a87 	vadd.f32	s14, s1, s14
 8015ad0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8015ad4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8015ad8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8015adc:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8015ae0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8015ae4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8015ae8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8015aec:	ee75 1a21 	vadd.f32	s3, s10, s3
 8015af0:	ee30 0a68 	vsub.f32	s0, s0, s17
 8015af4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8015af8:	ee70 0a84 	vadd.f32	s1, s1, s8
 8015afc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8015b00:	44dc      	add	ip, fp
 8015b02:	45e1      	cmp	r9, ip
 8015b04:	ed84 9a00 	vstr	s18, [r4]
 8015b08:	edc4 3a01 	vstr	s7, [r4, #4]
 8015b0c:	449e      	add	lr, r3
 8015b0e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8015b12:	edc2 2a00 	vstr	s5, [r2]
 8015b16:	441e      	add	r6, r3
 8015b18:	ed85 2a00 	vstr	s4, [r5]
 8015b1c:	ed85 8a01 	vstr	s16, [r5, #4]
 8015b20:	441c      	add	r4, r3
 8015b22:	ed47 1a01 	vstr	s3, [r7, #-4]
 8015b26:	ed87 0a00 	vstr	s0, [r7]
 8015b2a:	441a      	add	r2, r3
 8015b2c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8015b30:	edc1 9a00 	vstr	s19, [r1]
 8015b34:	441d      	add	r5, r3
 8015b36:	edc0 0a00 	vstr	s1, [r0]
 8015b3a:	441f      	add	r7, r3
 8015b3c:	ed80 6a01 	vstr	s12, [r0, #4]
 8015b40:	4419      	add	r1, r3
 8015b42:	4418      	add	r0, r3
 8015b44:	f63f aeea 	bhi.w	801591c <arm_radix8_butterfly_f32+0x334>
 8015b48:	9a03      	ldr	r2, [sp, #12]
 8015b4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b4c:	440a      	add	r2, r1
 8015b4e:	9203      	str	r2, [sp, #12]
 8015b50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b52:	9a05      	ldr	r2, [sp, #20]
 8015b54:	440a      	add	r2, r1
 8015b56:	9205      	str	r2, [sp, #20]
 8015b58:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015b5a:	9a04      	ldr	r2, [sp, #16]
 8015b5c:	440a      	add	r2, r1
 8015b5e:	9204      	str	r2, [sp, #16]
 8015b60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015b62:	9a06      	ldr	r2, [sp, #24]
 8015b64:	440a      	add	r2, r1
 8015b66:	9206      	str	r2, [sp, #24]
 8015b68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b6c:	440a      	add	r2, r1
 8015b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8015b70:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015b72:	9a08      	ldr	r2, [sp, #32]
 8015b74:	440a      	add	r2, r1
 8015b76:	9208      	str	r2, [sp, #32]
 8015b78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b7a:	9a07      	ldr	r2, [sp, #28]
 8015b7c:	440a      	add	r2, r1
 8015b7e:	9207      	str	r2, [sp, #28]
 8015b80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b84:	f108 0801 	add.w	r8, r8, #1
 8015b88:	3208      	adds	r2, #8
 8015b8a:	4588      	cmp	r8, r1
 8015b8c:	920a      	str	r2, [sp, #40]	; 0x28
 8015b8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015b90:	f47f ae75 	bne.w	801587e <arm_radix8_butterfly_f32+0x296>
 8015b94:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8015b98:	9300      	str	r3, [sp, #0]
 8015b9a:	46c3      	mov	fp, r8
 8015b9c:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8015ba0:	e532      	b.n	8015608 <arm_radix8_butterfly_f32+0x20>
 8015ba2:	b01d      	add	sp, #116	; 0x74
 8015ba4:	ecbd 8b10 	vpop	{d8-d15}
 8015ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015bac <__errno>:
 8015bac:	4b01      	ldr	r3, [pc, #4]	; (8015bb4 <__errno+0x8>)
 8015bae:	6818      	ldr	r0, [r3, #0]
 8015bb0:	4770      	bx	lr
 8015bb2:	bf00      	nop
 8015bb4:	200000c4 	.word	0x200000c4

08015bb8 <__libc_init_array>:
 8015bb8:	b570      	push	{r4, r5, r6, lr}
 8015bba:	4d0d      	ldr	r5, [pc, #52]	; (8015bf0 <__libc_init_array+0x38>)
 8015bbc:	4c0d      	ldr	r4, [pc, #52]	; (8015bf4 <__libc_init_array+0x3c>)
 8015bbe:	1b64      	subs	r4, r4, r5
 8015bc0:	10a4      	asrs	r4, r4, #2
 8015bc2:	2600      	movs	r6, #0
 8015bc4:	42a6      	cmp	r6, r4
 8015bc6:	d109      	bne.n	8015bdc <__libc_init_array+0x24>
 8015bc8:	4d0b      	ldr	r5, [pc, #44]	; (8015bf8 <__libc_init_array+0x40>)
 8015bca:	4c0c      	ldr	r4, [pc, #48]	; (8015bfc <__libc_init_array+0x44>)
 8015bcc:	f002 f818 	bl	8017c00 <_init>
 8015bd0:	1b64      	subs	r4, r4, r5
 8015bd2:	10a4      	asrs	r4, r4, #2
 8015bd4:	2600      	movs	r6, #0
 8015bd6:	42a6      	cmp	r6, r4
 8015bd8:	d105      	bne.n	8015be6 <__libc_init_array+0x2e>
 8015bda:	bd70      	pop	{r4, r5, r6, pc}
 8015bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015be0:	4798      	blx	r3
 8015be2:	3601      	adds	r6, #1
 8015be4:	e7ee      	b.n	8015bc4 <__libc_init_array+0xc>
 8015be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015bea:	4798      	blx	r3
 8015bec:	3601      	adds	r6, #1
 8015bee:	e7f2      	b.n	8015bd6 <__libc_init_array+0x1e>
 8015bf0:	08037658 	.word	0x08037658
 8015bf4:	08037658 	.word	0x08037658
 8015bf8:	08037658 	.word	0x08037658
 8015bfc:	0803765c 	.word	0x0803765c

08015c00 <memset>:
 8015c00:	4402      	add	r2, r0
 8015c02:	4603      	mov	r3, r0
 8015c04:	4293      	cmp	r3, r2
 8015c06:	d100      	bne.n	8015c0a <memset+0xa>
 8015c08:	4770      	bx	lr
 8015c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8015c0e:	e7f9      	b.n	8015c04 <memset+0x4>

08015c10 <siprintf>:
 8015c10:	b40e      	push	{r1, r2, r3}
 8015c12:	b500      	push	{lr}
 8015c14:	b09c      	sub	sp, #112	; 0x70
 8015c16:	ab1d      	add	r3, sp, #116	; 0x74
 8015c18:	9002      	str	r0, [sp, #8]
 8015c1a:	9006      	str	r0, [sp, #24]
 8015c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c20:	4809      	ldr	r0, [pc, #36]	; (8015c48 <siprintf+0x38>)
 8015c22:	9107      	str	r1, [sp, #28]
 8015c24:	9104      	str	r1, [sp, #16]
 8015c26:	4909      	ldr	r1, [pc, #36]	; (8015c4c <siprintf+0x3c>)
 8015c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c2c:	9105      	str	r1, [sp, #20]
 8015c2e:	6800      	ldr	r0, [r0, #0]
 8015c30:	9301      	str	r3, [sp, #4]
 8015c32:	a902      	add	r1, sp, #8
 8015c34:	f000 f876 	bl	8015d24 <_svfiprintf_r>
 8015c38:	9b02      	ldr	r3, [sp, #8]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	701a      	strb	r2, [r3, #0]
 8015c3e:	b01c      	add	sp, #112	; 0x70
 8015c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c44:	b003      	add	sp, #12
 8015c46:	4770      	bx	lr
 8015c48:	200000c4 	.word	0x200000c4
 8015c4c:	ffff0208 	.word	0xffff0208

08015c50 <strcat>:
 8015c50:	b510      	push	{r4, lr}
 8015c52:	4602      	mov	r2, r0
 8015c54:	7814      	ldrb	r4, [r2, #0]
 8015c56:	4613      	mov	r3, r2
 8015c58:	3201      	adds	r2, #1
 8015c5a:	2c00      	cmp	r4, #0
 8015c5c:	d1fa      	bne.n	8015c54 <strcat+0x4>
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c68:	2a00      	cmp	r2, #0
 8015c6a:	d1f9      	bne.n	8015c60 <strcat+0x10>
 8015c6c:	bd10      	pop	{r4, pc}

08015c6e <__ssputs_r>:
 8015c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c72:	688e      	ldr	r6, [r1, #8]
 8015c74:	429e      	cmp	r6, r3
 8015c76:	4682      	mov	sl, r0
 8015c78:	460c      	mov	r4, r1
 8015c7a:	4690      	mov	r8, r2
 8015c7c:	461f      	mov	r7, r3
 8015c7e:	d838      	bhi.n	8015cf2 <__ssputs_r+0x84>
 8015c80:	898a      	ldrh	r2, [r1, #12]
 8015c82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015c86:	d032      	beq.n	8015cee <__ssputs_r+0x80>
 8015c88:	6825      	ldr	r5, [r4, #0]
 8015c8a:	6909      	ldr	r1, [r1, #16]
 8015c8c:	eba5 0901 	sub.w	r9, r5, r1
 8015c90:	6965      	ldr	r5, [r4, #20]
 8015c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015c96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	444b      	add	r3, r9
 8015c9e:	106d      	asrs	r5, r5, #1
 8015ca0:	429d      	cmp	r5, r3
 8015ca2:	bf38      	it	cc
 8015ca4:	461d      	movcc	r5, r3
 8015ca6:	0553      	lsls	r3, r2, #21
 8015ca8:	d531      	bpl.n	8015d0e <__ssputs_r+0xa0>
 8015caa:	4629      	mov	r1, r5
 8015cac:	f000 fb46 	bl	801633c <_malloc_r>
 8015cb0:	4606      	mov	r6, r0
 8015cb2:	b950      	cbnz	r0, 8015cca <__ssputs_r+0x5c>
 8015cb4:	230c      	movs	r3, #12
 8015cb6:	f8ca 3000 	str.w	r3, [sl]
 8015cba:	89a3      	ldrh	r3, [r4, #12]
 8015cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cc0:	81a3      	strh	r3, [r4, #12]
 8015cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8015cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cca:	6921      	ldr	r1, [r4, #16]
 8015ccc:	464a      	mov	r2, r9
 8015cce:	f000 fabd 	bl	801624c <memcpy>
 8015cd2:	89a3      	ldrh	r3, [r4, #12]
 8015cd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cdc:	81a3      	strh	r3, [r4, #12]
 8015cde:	6126      	str	r6, [r4, #16]
 8015ce0:	6165      	str	r5, [r4, #20]
 8015ce2:	444e      	add	r6, r9
 8015ce4:	eba5 0509 	sub.w	r5, r5, r9
 8015ce8:	6026      	str	r6, [r4, #0]
 8015cea:	60a5      	str	r5, [r4, #8]
 8015cec:	463e      	mov	r6, r7
 8015cee:	42be      	cmp	r6, r7
 8015cf0:	d900      	bls.n	8015cf4 <__ssputs_r+0x86>
 8015cf2:	463e      	mov	r6, r7
 8015cf4:	4632      	mov	r2, r6
 8015cf6:	6820      	ldr	r0, [r4, #0]
 8015cf8:	4641      	mov	r1, r8
 8015cfa:	f000 fab5 	bl	8016268 <memmove>
 8015cfe:	68a3      	ldr	r3, [r4, #8]
 8015d00:	6822      	ldr	r2, [r4, #0]
 8015d02:	1b9b      	subs	r3, r3, r6
 8015d04:	4432      	add	r2, r6
 8015d06:	60a3      	str	r3, [r4, #8]
 8015d08:	6022      	str	r2, [r4, #0]
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	e7db      	b.n	8015cc6 <__ssputs_r+0x58>
 8015d0e:	462a      	mov	r2, r5
 8015d10:	f000 fb6e 	bl	80163f0 <_realloc_r>
 8015d14:	4606      	mov	r6, r0
 8015d16:	2800      	cmp	r0, #0
 8015d18:	d1e1      	bne.n	8015cde <__ssputs_r+0x70>
 8015d1a:	6921      	ldr	r1, [r4, #16]
 8015d1c:	4650      	mov	r0, sl
 8015d1e:	f000 fabd 	bl	801629c <_free_r>
 8015d22:	e7c7      	b.n	8015cb4 <__ssputs_r+0x46>

08015d24 <_svfiprintf_r>:
 8015d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d28:	4698      	mov	r8, r3
 8015d2a:	898b      	ldrh	r3, [r1, #12]
 8015d2c:	061b      	lsls	r3, r3, #24
 8015d2e:	b09d      	sub	sp, #116	; 0x74
 8015d30:	4607      	mov	r7, r0
 8015d32:	460d      	mov	r5, r1
 8015d34:	4614      	mov	r4, r2
 8015d36:	d50e      	bpl.n	8015d56 <_svfiprintf_r+0x32>
 8015d38:	690b      	ldr	r3, [r1, #16]
 8015d3a:	b963      	cbnz	r3, 8015d56 <_svfiprintf_r+0x32>
 8015d3c:	2140      	movs	r1, #64	; 0x40
 8015d3e:	f000 fafd 	bl	801633c <_malloc_r>
 8015d42:	6028      	str	r0, [r5, #0]
 8015d44:	6128      	str	r0, [r5, #16]
 8015d46:	b920      	cbnz	r0, 8015d52 <_svfiprintf_r+0x2e>
 8015d48:	230c      	movs	r3, #12
 8015d4a:	603b      	str	r3, [r7, #0]
 8015d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d50:	e0d1      	b.n	8015ef6 <_svfiprintf_r+0x1d2>
 8015d52:	2340      	movs	r3, #64	; 0x40
 8015d54:	616b      	str	r3, [r5, #20]
 8015d56:	2300      	movs	r3, #0
 8015d58:	9309      	str	r3, [sp, #36]	; 0x24
 8015d5a:	2320      	movs	r3, #32
 8015d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d64:	2330      	movs	r3, #48	; 0x30
 8015d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f10 <_svfiprintf_r+0x1ec>
 8015d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d6e:	f04f 0901 	mov.w	r9, #1
 8015d72:	4623      	mov	r3, r4
 8015d74:	469a      	mov	sl, r3
 8015d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d7a:	b10a      	cbz	r2, 8015d80 <_svfiprintf_r+0x5c>
 8015d7c:	2a25      	cmp	r2, #37	; 0x25
 8015d7e:	d1f9      	bne.n	8015d74 <_svfiprintf_r+0x50>
 8015d80:	ebba 0b04 	subs.w	fp, sl, r4
 8015d84:	d00b      	beq.n	8015d9e <_svfiprintf_r+0x7a>
 8015d86:	465b      	mov	r3, fp
 8015d88:	4622      	mov	r2, r4
 8015d8a:	4629      	mov	r1, r5
 8015d8c:	4638      	mov	r0, r7
 8015d8e:	f7ff ff6e 	bl	8015c6e <__ssputs_r>
 8015d92:	3001      	adds	r0, #1
 8015d94:	f000 80aa 	beq.w	8015eec <_svfiprintf_r+0x1c8>
 8015d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d9a:	445a      	add	r2, fp
 8015d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8015d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	f000 80a2 	beq.w	8015eec <_svfiprintf_r+0x1c8>
 8015da8:	2300      	movs	r3, #0
 8015daa:	f04f 32ff 	mov.w	r2, #4294967295
 8015dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015db2:	f10a 0a01 	add.w	sl, sl, #1
 8015db6:	9304      	str	r3, [sp, #16]
 8015db8:	9307      	str	r3, [sp, #28]
 8015dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8015dc0:	4654      	mov	r4, sl
 8015dc2:	2205      	movs	r2, #5
 8015dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dc8:	4851      	ldr	r0, [pc, #324]	; (8015f10 <_svfiprintf_r+0x1ec>)
 8015dca:	f7ea fa91 	bl	80002f0 <memchr>
 8015dce:	9a04      	ldr	r2, [sp, #16]
 8015dd0:	b9d8      	cbnz	r0, 8015e0a <_svfiprintf_r+0xe6>
 8015dd2:	06d0      	lsls	r0, r2, #27
 8015dd4:	bf44      	itt	mi
 8015dd6:	2320      	movmi	r3, #32
 8015dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ddc:	0711      	lsls	r1, r2, #28
 8015dde:	bf44      	itt	mi
 8015de0:	232b      	movmi	r3, #43	; 0x2b
 8015de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015de6:	f89a 3000 	ldrb.w	r3, [sl]
 8015dea:	2b2a      	cmp	r3, #42	; 0x2a
 8015dec:	d015      	beq.n	8015e1a <_svfiprintf_r+0xf6>
 8015dee:	9a07      	ldr	r2, [sp, #28]
 8015df0:	4654      	mov	r4, sl
 8015df2:	2000      	movs	r0, #0
 8015df4:	f04f 0c0a 	mov.w	ip, #10
 8015df8:	4621      	mov	r1, r4
 8015dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015dfe:	3b30      	subs	r3, #48	; 0x30
 8015e00:	2b09      	cmp	r3, #9
 8015e02:	d94e      	bls.n	8015ea2 <_svfiprintf_r+0x17e>
 8015e04:	b1b0      	cbz	r0, 8015e34 <_svfiprintf_r+0x110>
 8015e06:	9207      	str	r2, [sp, #28]
 8015e08:	e014      	b.n	8015e34 <_svfiprintf_r+0x110>
 8015e0a:	eba0 0308 	sub.w	r3, r0, r8
 8015e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8015e12:	4313      	orrs	r3, r2
 8015e14:	9304      	str	r3, [sp, #16]
 8015e16:	46a2      	mov	sl, r4
 8015e18:	e7d2      	b.n	8015dc0 <_svfiprintf_r+0x9c>
 8015e1a:	9b03      	ldr	r3, [sp, #12]
 8015e1c:	1d19      	adds	r1, r3, #4
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	9103      	str	r1, [sp, #12]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	bfbb      	ittet	lt
 8015e26:	425b      	neglt	r3, r3
 8015e28:	f042 0202 	orrlt.w	r2, r2, #2
 8015e2c:	9307      	strge	r3, [sp, #28]
 8015e2e:	9307      	strlt	r3, [sp, #28]
 8015e30:	bfb8      	it	lt
 8015e32:	9204      	strlt	r2, [sp, #16]
 8015e34:	7823      	ldrb	r3, [r4, #0]
 8015e36:	2b2e      	cmp	r3, #46	; 0x2e
 8015e38:	d10c      	bne.n	8015e54 <_svfiprintf_r+0x130>
 8015e3a:	7863      	ldrb	r3, [r4, #1]
 8015e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8015e3e:	d135      	bne.n	8015eac <_svfiprintf_r+0x188>
 8015e40:	9b03      	ldr	r3, [sp, #12]
 8015e42:	1d1a      	adds	r2, r3, #4
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	9203      	str	r2, [sp, #12]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	bfb8      	it	lt
 8015e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e50:	3402      	adds	r4, #2
 8015e52:	9305      	str	r3, [sp, #20]
 8015e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f20 <_svfiprintf_r+0x1fc>
 8015e58:	7821      	ldrb	r1, [r4, #0]
 8015e5a:	2203      	movs	r2, #3
 8015e5c:	4650      	mov	r0, sl
 8015e5e:	f7ea fa47 	bl	80002f0 <memchr>
 8015e62:	b140      	cbz	r0, 8015e76 <_svfiprintf_r+0x152>
 8015e64:	2340      	movs	r3, #64	; 0x40
 8015e66:	eba0 000a 	sub.w	r0, r0, sl
 8015e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8015e6e:	9b04      	ldr	r3, [sp, #16]
 8015e70:	4303      	orrs	r3, r0
 8015e72:	3401      	adds	r4, #1
 8015e74:	9304      	str	r3, [sp, #16]
 8015e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e7a:	4826      	ldr	r0, [pc, #152]	; (8015f14 <_svfiprintf_r+0x1f0>)
 8015e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e80:	2206      	movs	r2, #6
 8015e82:	f7ea fa35 	bl	80002f0 <memchr>
 8015e86:	2800      	cmp	r0, #0
 8015e88:	d038      	beq.n	8015efc <_svfiprintf_r+0x1d8>
 8015e8a:	4b23      	ldr	r3, [pc, #140]	; (8015f18 <_svfiprintf_r+0x1f4>)
 8015e8c:	bb1b      	cbnz	r3, 8015ed6 <_svfiprintf_r+0x1b2>
 8015e8e:	9b03      	ldr	r3, [sp, #12]
 8015e90:	3307      	adds	r3, #7
 8015e92:	f023 0307 	bic.w	r3, r3, #7
 8015e96:	3308      	adds	r3, #8
 8015e98:	9303      	str	r3, [sp, #12]
 8015e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e9c:	4433      	add	r3, r6
 8015e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8015ea0:	e767      	b.n	8015d72 <_svfiprintf_r+0x4e>
 8015ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ea6:	460c      	mov	r4, r1
 8015ea8:	2001      	movs	r0, #1
 8015eaa:	e7a5      	b.n	8015df8 <_svfiprintf_r+0xd4>
 8015eac:	2300      	movs	r3, #0
 8015eae:	3401      	adds	r4, #1
 8015eb0:	9305      	str	r3, [sp, #20]
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	f04f 0c0a 	mov.w	ip, #10
 8015eb8:	4620      	mov	r0, r4
 8015eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ebe:	3a30      	subs	r2, #48	; 0x30
 8015ec0:	2a09      	cmp	r2, #9
 8015ec2:	d903      	bls.n	8015ecc <_svfiprintf_r+0x1a8>
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d0c5      	beq.n	8015e54 <_svfiprintf_r+0x130>
 8015ec8:	9105      	str	r1, [sp, #20]
 8015eca:	e7c3      	b.n	8015e54 <_svfiprintf_r+0x130>
 8015ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	e7f0      	b.n	8015eb8 <_svfiprintf_r+0x194>
 8015ed6:	ab03      	add	r3, sp, #12
 8015ed8:	9300      	str	r3, [sp, #0]
 8015eda:	462a      	mov	r2, r5
 8015edc:	4b0f      	ldr	r3, [pc, #60]	; (8015f1c <_svfiprintf_r+0x1f8>)
 8015ede:	a904      	add	r1, sp, #16
 8015ee0:	4638      	mov	r0, r7
 8015ee2:	f3af 8000 	nop.w
 8015ee6:	1c42      	adds	r2, r0, #1
 8015ee8:	4606      	mov	r6, r0
 8015eea:	d1d6      	bne.n	8015e9a <_svfiprintf_r+0x176>
 8015eec:	89ab      	ldrh	r3, [r5, #12]
 8015eee:	065b      	lsls	r3, r3, #25
 8015ef0:	f53f af2c 	bmi.w	8015d4c <_svfiprintf_r+0x28>
 8015ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ef6:	b01d      	add	sp, #116	; 0x74
 8015ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015efc:	ab03      	add	r3, sp, #12
 8015efe:	9300      	str	r3, [sp, #0]
 8015f00:	462a      	mov	r2, r5
 8015f02:	4b06      	ldr	r3, [pc, #24]	; (8015f1c <_svfiprintf_r+0x1f8>)
 8015f04:	a904      	add	r1, sp, #16
 8015f06:	4638      	mov	r0, r7
 8015f08:	f000 f87a 	bl	8016000 <_printf_i>
 8015f0c:	e7eb      	b.n	8015ee6 <_svfiprintf_r+0x1c2>
 8015f0e:	bf00      	nop
 8015f10:	08037418 	.word	0x08037418
 8015f14:	08037422 	.word	0x08037422
 8015f18:	00000000 	.word	0x00000000
 8015f1c:	08015c6f 	.word	0x08015c6f
 8015f20:	0803741e 	.word	0x0803741e

08015f24 <_printf_common>:
 8015f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f28:	4616      	mov	r6, r2
 8015f2a:	4699      	mov	r9, r3
 8015f2c:	688a      	ldr	r2, [r1, #8]
 8015f2e:	690b      	ldr	r3, [r1, #16]
 8015f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015f34:	4293      	cmp	r3, r2
 8015f36:	bfb8      	it	lt
 8015f38:	4613      	movlt	r3, r2
 8015f3a:	6033      	str	r3, [r6, #0]
 8015f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015f40:	4607      	mov	r7, r0
 8015f42:	460c      	mov	r4, r1
 8015f44:	b10a      	cbz	r2, 8015f4a <_printf_common+0x26>
 8015f46:	3301      	adds	r3, #1
 8015f48:	6033      	str	r3, [r6, #0]
 8015f4a:	6823      	ldr	r3, [r4, #0]
 8015f4c:	0699      	lsls	r1, r3, #26
 8015f4e:	bf42      	ittt	mi
 8015f50:	6833      	ldrmi	r3, [r6, #0]
 8015f52:	3302      	addmi	r3, #2
 8015f54:	6033      	strmi	r3, [r6, #0]
 8015f56:	6825      	ldr	r5, [r4, #0]
 8015f58:	f015 0506 	ands.w	r5, r5, #6
 8015f5c:	d106      	bne.n	8015f6c <_printf_common+0x48>
 8015f5e:	f104 0a19 	add.w	sl, r4, #25
 8015f62:	68e3      	ldr	r3, [r4, #12]
 8015f64:	6832      	ldr	r2, [r6, #0]
 8015f66:	1a9b      	subs	r3, r3, r2
 8015f68:	42ab      	cmp	r3, r5
 8015f6a:	dc26      	bgt.n	8015fba <_printf_common+0x96>
 8015f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015f70:	1e13      	subs	r3, r2, #0
 8015f72:	6822      	ldr	r2, [r4, #0]
 8015f74:	bf18      	it	ne
 8015f76:	2301      	movne	r3, #1
 8015f78:	0692      	lsls	r2, r2, #26
 8015f7a:	d42b      	bmi.n	8015fd4 <_printf_common+0xb0>
 8015f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015f80:	4649      	mov	r1, r9
 8015f82:	4638      	mov	r0, r7
 8015f84:	47c0      	blx	r8
 8015f86:	3001      	adds	r0, #1
 8015f88:	d01e      	beq.n	8015fc8 <_printf_common+0xa4>
 8015f8a:	6823      	ldr	r3, [r4, #0]
 8015f8c:	68e5      	ldr	r5, [r4, #12]
 8015f8e:	6832      	ldr	r2, [r6, #0]
 8015f90:	f003 0306 	and.w	r3, r3, #6
 8015f94:	2b04      	cmp	r3, #4
 8015f96:	bf08      	it	eq
 8015f98:	1aad      	subeq	r5, r5, r2
 8015f9a:	68a3      	ldr	r3, [r4, #8]
 8015f9c:	6922      	ldr	r2, [r4, #16]
 8015f9e:	bf0c      	ite	eq
 8015fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015fa4:	2500      	movne	r5, #0
 8015fa6:	4293      	cmp	r3, r2
 8015fa8:	bfc4      	itt	gt
 8015faa:	1a9b      	subgt	r3, r3, r2
 8015fac:	18ed      	addgt	r5, r5, r3
 8015fae:	2600      	movs	r6, #0
 8015fb0:	341a      	adds	r4, #26
 8015fb2:	42b5      	cmp	r5, r6
 8015fb4:	d11a      	bne.n	8015fec <_printf_common+0xc8>
 8015fb6:	2000      	movs	r0, #0
 8015fb8:	e008      	b.n	8015fcc <_printf_common+0xa8>
 8015fba:	2301      	movs	r3, #1
 8015fbc:	4652      	mov	r2, sl
 8015fbe:	4649      	mov	r1, r9
 8015fc0:	4638      	mov	r0, r7
 8015fc2:	47c0      	blx	r8
 8015fc4:	3001      	adds	r0, #1
 8015fc6:	d103      	bne.n	8015fd0 <_printf_common+0xac>
 8015fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fd0:	3501      	adds	r5, #1
 8015fd2:	e7c6      	b.n	8015f62 <_printf_common+0x3e>
 8015fd4:	18e1      	adds	r1, r4, r3
 8015fd6:	1c5a      	adds	r2, r3, #1
 8015fd8:	2030      	movs	r0, #48	; 0x30
 8015fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015fde:	4422      	add	r2, r4
 8015fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015fe8:	3302      	adds	r3, #2
 8015fea:	e7c7      	b.n	8015f7c <_printf_common+0x58>
 8015fec:	2301      	movs	r3, #1
 8015fee:	4622      	mov	r2, r4
 8015ff0:	4649      	mov	r1, r9
 8015ff2:	4638      	mov	r0, r7
 8015ff4:	47c0      	blx	r8
 8015ff6:	3001      	adds	r0, #1
 8015ff8:	d0e6      	beq.n	8015fc8 <_printf_common+0xa4>
 8015ffa:	3601      	adds	r6, #1
 8015ffc:	e7d9      	b.n	8015fb2 <_printf_common+0x8e>
	...

08016000 <_printf_i>:
 8016000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016004:	460c      	mov	r4, r1
 8016006:	4691      	mov	r9, r2
 8016008:	7e27      	ldrb	r7, [r4, #24]
 801600a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801600c:	2f78      	cmp	r7, #120	; 0x78
 801600e:	4680      	mov	r8, r0
 8016010:	469a      	mov	sl, r3
 8016012:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016016:	d807      	bhi.n	8016028 <_printf_i+0x28>
 8016018:	2f62      	cmp	r7, #98	; 0x62
 801601a:	d80a      	bhi.n	8016032 <_printf_i+0x32>
 801601c:	2f00      	cmp	r7, #0
 801601e:	f000 80d8 	beq.w	80161d2 <_printf_i+0x1d2>
 8016022:	2f58      	cmp	r7, #88	; 0x58
 8016024:	f000 80a3 	beq.w	801616e <_printf_i+0x16e>
 8016028:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801602c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016030:	e03a      	b.n	80160a8 <_printf_i+0xa8>
 8016032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016036:	2b15      	cmp	r3, #21
 8016038:	d8f6      	bhi.n	8016028 <_printf_i+0x28>
 801603a:	a001      	add	r0, pc, #4	; (adr r0, 8016040 <_printf_i+0x40>)
 801603c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016040:	08016099 	.word	0x08016099
 8016044:	080160ad 	.word	0x080160ad
 8016048:	08016029 	.word	0x08016029
 801604c:	08016029 	.word	0x08016029
 8016050:	08016029 	.word	0x08016029
 8016054:	08016029 	.word	0x08016029
 8016058:	080160ad 	.word	0x080160ad
 801605c:	08016029 	.word	0x08016029
 8016060:	08016029 	.word	0x08016029
 8016064:	08016029 	.word	0x08016029
 8016068:	08016029 	.word	0x08016029
 801606c:	080161b9 	.word	0x080161b9
 8016070:	080160dd 	.word	0x080160dd
 8016074:	0801619b 	.word	0x0801619b
 8016078:	08016029 	.word	0x08016029
 801607c:	08016029 	.word	0x08016029
 8016080:	080161db 	.word	0x080161db
 8016084:	08016029 	.word	0x08016029
 8016088:	080160dd 	.word	0x080160dd
 801608c:	08016029 	.word	0x08016029
 8016090:	08016029 	.word	0x08016029
 8016094:	080161a3 	.word	0x080161a3
 8016098:	680b      	ldr	r3, [r1, #0]
 801609a:	1d1a      	adds	r2, r3, #4
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	600a      	str	r2, [r1, #0]
 80160a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80160a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80160a8:	2301      	movs	r3, #1
 80160aa:	e0a3      	b.n	80161f4 <_printf_i+0x1f4>
 80160ac:	6825      	ldr	r5, [r4, #0]
 80160ae:	6808      	ldr	r0, [r1, #0]
 80160b0:	062e      	lsls	r6, r5, #24
 80160b2:	f100 0304 	add.w	r3, r0, #4
 80160b6:	d50a      	bpl.n	80160ce <_printf_i+0xce>
 80160b8:	6805      	ldr	r5, [r0, #0]
 80160ba:	600b      	str	r3, [r1, #0]
 80160bc:	2d00      	cmp	r5, #0
 80160be:	da03      	bge.n	80160c8 <_printf_i+0xc8>
 80160c0:	232d      	movs	r3, #45	; 0x2d
 80160c2:	426d      	negs	r5, r5
 80160c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160c8:	485e      	ldr	r0, [pc, #376]	; (8016244 <_printf_i+0x244>)
 80160ca:	230a      	movs	r3, #10
 80160cc:	e019      	b.n	8016102 <_printf_i+0x102>
 80160ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80160d2:	6805      	ldr	r5, [r0, #0]
 80160d4:	600b      	str	r3, [r1, #0]
 80160d6:	bf18      	it	ne
 80160d8:	b22d      	sxthne	r5, r5
 80160da:	e7ef      	b.n	80160bc <_printf_i+0xbc>
 80160dc:	680b      	ldr	r3, [r1, #0]
 80160de:	6825      	ldr	r5, [r4, #0]
 80160e0:	1d18      	adds	r0, r3, #4
 80160e2:	6008      	str	r0, [r1, #0]
 80160e4:	0628      	lsls	r0, r5, #24
 80160e6:	d501      	bpl.n	80160ec <_printf_i+0xec>
 80160e8:	681d      	ldr	r5, [r3, #0]
 80160ea:	e002      	b.n	80160f2 <_printf_i+0xf2>
 80160ec:	0669      	lsls	r1, r5, #25
 80160ee:	d5fb      	bpl.n	80160e8 <_printf_i+0xe8>
 80160f0:	881d      	ldrh	r5, [r3, #0]
 80160f2:	4854      	ldr	r0, [pc, #336]	; (8016244 <_printf_i+0x244>)
 80160f4:	2f6f      	cmp	r7, #111	; 0x6f
 80160f6:	bf0c      	ite	eq
 80160f8:	2308      	moveq	r3, #8
 80160fa:	230a      	movne	r3, #10
 80160fc:	2100      	movs	r1, #0
 80160fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016102:	6866      	ldr	r6, [r4, #4]
 8016104:	60a6      	str	r6, [r4, #8]
 8016106:	2e00      	cmp	r6, #0
 8016108:	bfa2      	ittt	ge
 801610a:	6821      	ldrge	r1, [r4, #0]
 801610c:	f021 0104 	bicge.w	r1, r1, #4
 8016110:	6021      	strge	r1, [r4, #0]
 8016112:	b90d      	cbnz	r5, 8016118 <_printf_i+0x118>
 8016114:	2e00      	cmp	r6, #0
 8016116:	d04d      	beq.n	80161b4 <_printf_i+0x1b4>
 8016118:	4616      	mov	r6, r2
 801611a:	fbb5 f1f3 	udiv	r1, r5, r3
 801611e:	fb03 5711 	mls	r7, r3, r1, r5
 8016122:	5dc7      	ldrb	r7, [r0, r7]
 8016124:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016128:	462f      	mov	r7, r5
 801612a:	42bb      	cmp	r3, r7
 801612c:	460d      	mov	r5, r1
 801612e:	d9f4      	bls.n	801611a <_printf_i+0x11a>
 8016130:	2b08      	cmp	r3, #8
 8016132:	d10b      	bne.n	801614c <_printf_i+0x14c>
 8016134:	6823      	ldr	r3, [r4, #0]
 8016136:	07df      	lsls	r7, r3, #31
 8016138:	d508      	bpl.n	801614c <_printf_i+0x14c>
 801613a:	6923      	ldr	r3, [r4, #16]
 801613c:	6861      	ldr	r1, [r4, #4]
 801613e:	4299      	cmp	r1, r3
 8016140:	bfde      	ittt	le
 8016142:	2330      	movle	r3, #48	; 0x30
 8016144:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016148:	f106 36ff 	addle.w	r6, r6, #4294967295
 801614c:	1b92      	subs	r2, r2, r6
 801614e:	6122      	str	r2, [r4, #16]
 8016150:	f8cd a000 	str.w	sl, [sp]
 8016154:	464b      	mov	r3, r9
 8016156:	aa03      	add	r2, sp, #12
 8016158:	4621      	mov	r1, r4
 801615a:	4640      	mov	r0, r8
 801615c:	f7ff fee2 	bl	8015f24 <_printf_common>
 8016160:	3001      	adds	r0, #1
 8016162:	d14c      	bne.n	80161fe <_printf_i+0x1fe>
 8016164:	f04f 30ff 	mov.w	r0, #4294967295
 8016168:	b004      	add	sp, #16
 801616a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801616e:	4835      	ldr	r0, [pc, #212]	; (8016244 <_printf_i+0x244>)
 8016170:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016174:	6823      	ldr	r3, [r4, #0]
 8016176:	680e      	ldr	r6, [r1, #0]
 8016178:	061f      	lsls	r7, r3, #24
 801617a:	f856 5b04 	ldr.w	r5, [r6], #4
 801617e:	600e      	str	r6, [r1, #0]
 8016180:	d514      	bpl.n	80161ac <_printf_i+0x1ac>
 8016182:	07d9      	lsls	r1, r3, #31
 8016184:	bf44      	itt	mi
 8016186:	f043 0320 	orrmi.w	r3, r3, #32
 801618a:	6023      	strmi	r3, [r4, #0]
 801618c:	b91d      	cbnz	r5, 8016196 <_printf_i+0x196>
 801618e:	6823      	ldr	r3, [r4, #0]
 8016190:	f023 0320 	bic.w	r3, r3, #32
 8016194:	6023      	str	r3, [r4, #0]
 8016196:	2310      	movs	r3, #16
 8016198:	e7b0      	b.n	80160fc <_printf_i+0xfc>
 801619a:	6823      	ldr	r3, [r4, #0]
 801619c:	f043 0320 	orr.w	r3, r3, #32
 80161a0:	6023      	str	r3, [r4, #0]
 80161a2:	2378      	movs	r3, #120	; 0x78
 80161a4:	4828      	ldr	r0, [pc, #160]	; (8016248 <_printf_i+0x248>)
 80161a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80161aa:	e7e3      	b.n	8016174 <_printf_i+0x174>
 80161ac:	065e      	lsls	r6, r3, #25
 80161ae:	bf48      	it	mi
 80161b0:	b2ad      	uxthmi	r5, r5
 80161b2:	e7e6      	b.n	8016182 <_printf_i+0x182>
 80161b4:	4616      	mov	r6, r2
 80161b6:	e7bb      	b.n	8016130 <_printf_i+0x130>
 80161b8:	680b      	ldr	r3, [r1, #0]
 80161ba:	6826      	ldr	r6, [r4, #0]
 80161bc:	6960      	ldr	r0, [r4, #20]
 80161be:	1d1d      	adds	r5, r3, #4
 80161c0:	600d      	str	r5, [r1, #0]
 80161c2:	0635      	lsls	r5, r6, #24
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	d501      	bpl.n	80161cc <_printf_i+0x1cc>
 80161c8:	6018      	str	r0, [r3, #0]
 80161ca:	e002      	b.n	80161d2 <_printf_i+0x1d2>
 80161cc:	0671      	lsls	r1, r6, #25
 80161ce:	d5fb      	bpl.n	80161c8 <_printf_i+0x1c8>
 80161d0:	8018      	strh	r0, [r3, #0]
 80161d2:	2300      	movs	r3, #0
 80161d4:	6123      	str	r3, [r4, #16]
 80161d6:	4616      	mov	r6, r2
 80161d8:	e7ba      	b.n	8016150 <_printf_i+0x150>
 80161da:	680b      	ldr	r3, [r1, #0]
 80161dc:	1d1a      	adds	r2, r3, #4
 80161de:	600a      	str	r2, [r1, #0]
 80161e0:	681e      	ldr	r6, [r3, #0]
 80161e2:	6862      	ldr	r2, [r4, #4]
 80161e4:	2100      	movs	r1, #0
 80161e6:	4630      	mov	r0, r6
 80161e8:	f7ea f882 	bl	80002f0 <memchr>
 80161ec:	b108      	cbz	r0, 80161f2 <_printf_i+0x1f2>
 80161ee:	1b80      	subs	r0, r0, r6
 80161f0:	6060      	str	r0, [r4, #4]
 80161f2:	6863      	ldr	r3, [r4, #4]
 80161f4:	6123      	str	r3, [r4, #16]
 80161f6:	2300      	movs	r3, #0
 80161f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161fc:	e7a8      	b.n	8016150 <_printf_i+0x150>
 80161fe:	6923      	ldr	r3, [r4, #16]
 8016200:	4632      	mov	r2, r6
 8016202:	4649      	mov	r1, r9
 8016204:	4640      	mov	r0, r8
 8016206:	47d0      	blx	sl
 8016208:	3001      	adds	r0, #1
 801620a:	d0ab      	beq.n	8016164 <_printf_i+0x164>
 801620c:	6823      	ldr	r3, [r4, #0]
 801620e:	079b      	lsls	r3, r3, #30
 8016210:	d413      	bmi.n	801623a <_printf_i+0x23a>
 8016212:	68e0      	ldr	r0, [r4, #12]
 8016214:	9b03      	ldr	r3, [sp, #12]
 8016216:	4298      	cmp	r0, r3
 8016218:	bfb8      	it	lt
 801621a:	4618      	movlt	r0, r3
 801621c:	e7a4      	b.n	8016168 <_printf_i+0x168>
 801621e:	2301      	movs	r3, #1
 8016220:	4632      	mov	r2, r6
 8016222:	4649      	mov	r1, r9
 8016224:	4640      	mov	r0, r8
 8016226:	47d0      	blx	sl
 8016228:	3001      	adds	r0, #1
 801622a:	d09b      	beq.n	8016164 <_printf_i+0x164>
 801622c:	3501      	adds	r5, #1
 801622e:	68e3      	ldr	r3, [r4, #12]
 8016230:	9903      	ldr	r1, [sp, #12]
 8016232:	1a5b      	subs	r3, r3, r1
 8016234:	42ab      	cmp	r3, r5
 8016236:	dcf2      	bgt.n	801621e <_printf_i+0x21e>
 8016238:	e7eb      	b.n	8016212 <_printf_i+0x212>
 801623a:	2500      	movs	r5, #0
 801623c:	f104 0619 	add.w	r6, r4, #25
 8016240:	e7f5      	b.n	801622e <_printf_i+0x22e>
 8016242:	bf00      	nop
 8016244:	08037429 	.word	0x08037429
 8016248:	0803743a 	.word	0x0803743a

0801624c <memcpy>:
 801624c:	440a      	add	r2, r1
 801624e:	4291      	cmp	r1, r2
 8016250:	f100 33ff 	add.w	r3, r0, #4294967295
 8016254:	d100      	bne.n	8016258 <memcpy+0xc>
 8016256:	4770      	bx	lr
 8016258:	b510      	push	{r4, lr}
 801625a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801625e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016262:	4291      	cmp	r1, r2
 8016264:	d1f9      	bne.n	801625a <memcpy+0xe>
 8016266:	bd10      	pop	{r4, pc}

08016268 <memmove>:
 8016268:	4288      	cmp	r0, r1
 801626a:	b510      	push	{r4, lr}
 801626c:	eb01 0402 	add.w	r4, r1, r2
 8016270:	d902      	bls.n	8016278 <memmove+0x10>
 8016272:	4284      	cmp	r4, r0
 8016274:	4623      	mov	r3, r4
 8016276:	d807      	bhi.n	8016288 <memmove+0x20>
 8016278:	1e43      	subs	r3, r0, #1
 801627a:	42a1      	cmp	r1, r4
 801627c:	d008      	beq.n	8016290 <memmove+0x28>
 801627e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016286:	e7f8      	b.n	801627a <memmove+0x12>
 8016288:	4402      	add	r2, r0
 801628a:	4601      	mov	r1, r0
 801628c:	428a      	cmp	r2, r1
 801628e:	d100      	bne.n	8016292 <memmove+0x2a>
 8016290:	bd10      	pop	{r4, pc}
 8016292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801629a:	e7f7      	b.n	801628c <memmove+0x24>

0801629c <_free_r>:
 801629c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801629e:	2900      	cmp	r1, #0
 80162a0:	d048      	beq.n	8016334 <_free_r+0x98>
 80162a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162a6:	9001      	str	r0, [sp, #4]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	f1a1 0404 	sub.w	r4, r1, #4
 80162ae:	bfb8      	it	lt
 80162b0:	18e4      	addlt	r4, r4, r3
 80162b2:	f000 f8d3 	bl	801645c <__malloc_lock>
 80162b6:	4a20      	ldr	r2, [pc, #128]	; (8016338 <_free_r+0x9c>)
 80162b8:	9801      	ldr	r0, [sp, #4]
 80162ba:	6813      	ldr	r3, [r2, #0]
 80162bc:	4615      	mov	r5, r2
 80162be:	b933      	cbnz	r3, 80162ce <_free_r+0x32>
 80162c0:	6063      	str	r3, [r4, #4]
 80162c2:	6014      	str	r4, [r2, #0]
 80162c4:	b003      	add	sp, #12
 80162c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162ca:	f000 b8cd 	b.w	8016468 <__malloc_unlock>
 80162ce:	42a3      	cmp	r3, r4
 80162d0:	d90b      	bls.n	80162ea <_free_r+0x4e>
 80162d2:	6821      	ldr	r1, [r4, #0]
 80162d4:	1862      	adds	r2, r4, r1
 80162d6:	4293      	cmp	r3, r2
 80162d8:	bf04      	itt	eq
 80162da:	681a      	ldreq	r2, [r3, #0]
 80162dc:	685b      	ldreq	r3, [r3, #4]
 80162de:	6063      	str	r3, [r4, #4]
 80162e0:	bf04      	itt	eq
 80162e2:	1852      	addeq	r2, r2, r1
 80162e4:	6022      	streq	r2, [r4, #0]
 80162e6:	602c      	str	r4, [r5, #0]
 80162e8:	e7ec      	b.n	80162c4 <_free_r+0x28>
 80162ea:	461a      	mov	r2, r3
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	b10b      	cbz	r3, 80162f4 <_free_r+0x58>
 80162f0:	42a3      	cmp	r3, r4
 80162f2:	d9fa      	bls.n	80162ea <_free_r+0x4e>
 80162f4:	6811      	ldr	r1, [r2, #0]
 80162f6:	1855      	adds	r5, r2, r1
 80162f8:	42a5      	cmp	r5, r4
 80162fa:	d10b      	bne.n	8016314 <_free_r+0x78>
 80162fc:	6824      	ldr	r4, [r4, #0]
 80162fe:	4421      	add	r1, r4
 8016300:	1854      	adds	r4, r2, r1
 8016302:	42a3      	cmp	r3, r4
 8016304:	6011      	str	r1, [r2, #0]
 8016306:	d1dd      	bne.n	80162c4 <_free_r+0x28>
 8016308:	681c      	ldr	r4, [r3, #0]
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	6053      	str	r3, [r2, #4]
 801630e:	4421      	add	r1, r4
 8016310:	6011      	str	r1, [r2, #0]
 8016312:	e7d7      	b.n	80162c4 <_free_r+0x28>
 8016314:	d902      	bls.n	801631c <_free_r+0x80>
 8016316:	230c      	movs	r3, #12
 8016318:	6003      	str	r3, [r0, #0]
 801631a:	e7d3      	b.n	80162c4 <_free_r+0x28>
 801631c:	6825      	ldr	r5, [r4, #0]
 801631e:	1961      	adds	r1, r4, r5
 8016320:	428b      	cmp	r3, r1
 8016322:	bf04      	itt	eq
 8016324:	6819      	ldreq	r1, [r3, #0]
 8016326:	685b      	ldreq	r3, [r3, #4]
 8016328:	6063      	str	r3, [r4, #4]
 801632a:	bf04      	itt	eq
 801632c:	1949      	addeq	r1, r1, r5
 801632e:	6021      	streq	r1, [r4, #0]
 8016330:	6054      	str	r4, [r2, #4]
 8016332:	e7c7      	b.n	80162c4 <_free_r+0x28>
 8016334:	b003      	add	sp, #12
 8016336:	bd30      	pop	{r4, r5, pc}
 8016338:	20000234 	.word	0x20000234

0801633c <_malloc_r>:
 801633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801633e:	1ccd      	adds	r5, r1, #3
 8016340:	f025 0503 	bic.w	r5, r5, #3
 8016344:	3508      	adds	r5, #8
 8016346:	2d0c      	cmp	r5, #12
 8016348:	bf38      	it	cc
 801634a:	250c      	movcc	r5, #12
 801634c:	2d00      	cmp	r5, #0
 801634e:	4606      	mov	r6, r0
 8016350:	db01      	blt.n	8016356 <_malloc_r+0x1a>
 8016352:	42a9      	cmp	r1, r5
 8016354:	d903      	bls.n	801635e <_malloc_r+0x22>
 8016356:	230c      	movs	r3, #12
 8016358:	6033      	str	r3, [r6, #0]
 801635a:	2000      	movs	r0, #0
 801635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801635e:	f000 f87d 	bl	801645c <__malloc_lock>
 8016362:	4921      	ldr	r1, [pc, #132]	; (80163e8 <_malloc_r+0xac>)
 8016364:	680a      	ldr	r2, [r1, #0]
 8016366:	4614      	mov	r4, r2
 8016368:	b99c      	cbnz	r4, 8016392 <_malloc_r+0x56>
 801636a:	4f20      	ldr	r7, [pc, #128]	; (80163ec <_malloc_r+0xb0>)
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	b923      	cbnz	r3, 801637a <_malloc_r+0x3e>
 8016370:	4621      	mov	r1, r4
 8016372:	4630      	mov	r0, r6
 8016374:	f000 f862 	bl	801643c <_sbrk_r>
 8016378:	6038      	str	r0, [r7, #0]
 801637a:	4629      	mov	r1, r5
 801637c:	4630      	mov	r0, r6
 801637e:	f000 f85d 	bl	801643c <_sbrk_r>
 8016382:	1c43      	adds	r3, r0, #1
 8016384:	d123      	bne.n	80163ce <_malloc_r+0x92>
 8016386:	230c      	movs	r3, #12
 8016388:	6033      	str	r3, [r6, #0]
 801638a:	4630      	mov	r0, r6
 801638c:	f000 f86c 	bl	8016468 <__malloc_unlock>
 8016390:	e7e3      	b.n	801635a <_malloc_r+0x1e>
 8016392:	6823      	ldr	r3, [r4, #0]
 8016394:	1b5b      	subs	r3, r3, r5
 8016396:	d417      	bmi.n	80163c8 <_malloc_r+0x8c>
 8016398:	2b0b      	cmp	r3, #11
 801639a:	d903      	bls.n	80163a4 <_malloc_r+0x68>
 801639c:	6023      	str	r3, [r4, #0]
 801639e:	441c      	add	r4, r3
 80163a0:	6025      	str	r5, [r4, #0]
 80163a2:	e004      	b.n	80163ae <_malloc_r+0x72>
 80163a4:	6863      	ldr	r3, [r4, #4]
 80163a6:	42a2      	cmp	r2, r4
 80163a8:	bf0c      	ite	eq
 80163aa:	600b      	streq	r3, [r1, #0]
 80163ac:	6053      	strne	r3, [r2, #4]
 80163ae:	4630      	mov	r0, r6
 80163b0:	f000 f85a 	bl	8016468 <__malloc_unlock>
 80163b4:	f104 000b 	add.w	r0, r4, #11
 80163b8:	1d23      	adds	r3, r4, #4
 80163ba:	f020 0007 	bic.w	r0, r0, #7
 80163be:	1ac2      	subs	r2, r0, r3
 80163c0:	d0cc      	beq.n	801635c <_malloc_r+0x20>
 80163c2:	1a1b      	subs	r3, r3, r0
 80163c4:	50a3      	str	r3, [r4, r2]
 80163c6:	e7c9      	b.n	801635c <_malloc_r+0x20>
 80163c8:	4622      	mov	r2, r4
 80163ca:	6864      	ldr	r4, [r4, #4]
 80163cc:	e7cc      	b.n	8016368 <_malloc_r+0x2c>
 80163ce:	1cc4      	adds	r4, r0, #3
 80163d0:	f024 0403 	bic.w	r4, r4, #3
 80163d4:	42a0      	cmp	r0, r4
 80163d6:	d0e3      	beq.n	80163a0 <_malloc_r+0x64>
 80163d8:	1a21      	subs	r1, r4, r0
 80163da:	4630      	mov	r0, r6
 80163dc:	f000 f82e 	bl	801643c <_sbrk_r>
 80163e0:	3001      	adds	r0, #1
 80163e2:	d1dd      	bne.n	80163a0 <_malloc_r+0x64>
 80163e4:	e7cf      	b.n	8016386 <_malloc_r+0x4a>
 80163e6:	bf00      	nop
 80163e8:	20000234 	.word	0x20000234
 80163ec:	20000238 	.word	0x20000238

080163f0 <_realloc_r>:
 80163f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163f2:	4607      	mov	r7, r0
 80163f4:	4614      	mov	r4, r2
 80163f6:	460e      	mov	r6, r1
 80163f8:	b921      	cbnz	r1, 8016404 <_realloc_r+0x14>
 80163fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163fe:	4611      	mov	r1, r2
 8016400:	f7ff bf9c 	b.w	801633c <_malloc_r>
 8016404:	b922      	cbnz	r2, 8016410 <_realloc_r+0x20>
 8016406:	f7ff ff49 	bl	801629c <_free_r>
 801640a:	4625      	mov	r5, r4
 801640c:	4628      	mov	r0, r5
 801640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016410:	f000 f830 	bl	8016474 <_malloc_usable_size_r>
 8016414:	42a0      	cmp	r0, r4
 8016416:	d20f      	bcs.n	8016438 <_realloc_r+0x48>
 8016418:	4621      	mov	r1, r4
 801641a:	4638      	mov	r0, r7
 801641c:	f7ff ff8e 	bl	801633c <_malloc_r>
 8016420:	4605      	mov	r5, r0
 8016422:	2800      	cmp	r0, #0
 8016424:	d0f2      	beq.n	801640c <_realloc_r+0x1c>
 8016426:	4631      	mov	r1, r6
 8016428:	4622      	mov	r2, r4
 801642a:	f7ff ff0f 	bl	801624c <memcpy>
 801642e:	4631      	mov	r1, r6
 8016430:	4638      	mov	r0, r7
 8016432:	f7ff ff33 	bl	801629c <_free_r>
 8016436:	e7e9      	b.n	801640c <_realloc_r+0x1c>
 8016438:	4635      	mov	r5, r6
 801643a:	e7e7      	b.n	801640c <_realloc_r+0x1c>

0801643c <_sbrk_r>:
 801643c:	b538      	push	{r3, r4, r5, lr}
 801643e:	4d06      	ldr	r5, [pc, #24]	; (8016458 <_sbrk_r+0x1c>)
 8016440:	2300      	movs	r3, #0
 8016442:	4604      	mov	r4, r0
 8016444:	4608      	mov	r0, r1
 8016446:	602b      	str	r3, [r5, #0]
 8016448:	f7f4 fa68 	bl	800a91c <_sbrk>
 801644c:	1c43      	adds	r3, r0, #1
 801644e:	d102      	bne.n	8016456 <_sbrk_r+0x1a>
 8016450:	682b      	ldr	r3, [r5, #0]
 8016452:	b103      	cbz	r3, 8016456 <_sbrk_r+0x1a>
 8016454:	6023      	str	r3, [r4, #0]
 8016456:	bd38      	pop	{r3, r4, r5, pc}
 8016458:	20007c30 	.word	0x20007c30

0801645c <__malloc_lock>:
 801645c:	4801      	ldr	r0, [pc, #4]	; (8016464 <__malloc_lock+0x8>)
 801645e:	f000 b811 	b.w	8016484 <__retarget_lock_acquire_recursive>
 8016462:	bf00      	nop
 8016464:	20007c38 	.word	0x20007c38

08016468 <__malloc_unlock>:
 8016468:	4801      	ldr	r0, [pc, #4]	; (8016470 <__malloc_unlock+0x8>)
 801646a:	f000 b80c 	b.w	8016486 <__retarget_lock_release_recursive>
 801646e:	bf00      	nop
 8016470:	20007c38 	.word	0x20007c38

08016474 <_malloc_usable_size_r>:
 8016474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016478:	1f18      	subs	r0, r3, #4
 801647a:	2b00      	cmp	r3, #0
 801647c:	bfbc      	itt	lt
 801647e:	580b      	ldrlt	r3, [r1, r0]
 8016480:	18c0      	addlt	r0, r0, r3
 8016482:	4770      	bx	lr

08016484 <__retarget_lock_acquire_recursive>:
 8016484:	4770      	bx	lr

08016486 <__retarget_lock_release_recursive>:
 8016486:	4770      	bx	lr

08016488 <floor>:
 8016488:	ec51 0b10 	vmov	r0, r1, d0
 801648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016490:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016494:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016498:	2e13      	cmp	r6, #19
 801649a:	ee10 5a10 	vmov	r5, s0
 801649e:	ee10 8a10 	vmov	r8, s0
 80164a2:	460c      	mov	r4, r1
 80164a4:	dc32      	bgt.n	801650c <floor+0x84>
 80164a6:	2e00      	cmp	r6, #0
 80164a8:	da14      	bge.n	80164d4 <floor+0x4c>
 80164aa:	a333      	add	r3, pc, #204	; (adr r3, 8016578 <floor+0xf0>)
 80164ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b0:	f7e9 ff74 	bl	800039c <__adddf3>
 80164b4:	2200      	movs	r2, #0
 80164b6:	2300      	movs	r3, #0
 80164b8:	f7ea fbb6 	bl	8000c28 <__aeabi_dcmpgt>
 80164bc:	b138      	cbz	r0, 80164ce <floor+0x46>
 80164be:	2c00      	cmp	r4, #0
 80164c0:	da57      	bge.n	8016572 <floor+0xea>
 80164c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80164c6:	431d      	orrs	r5, r3
 80164c8:	d001      	beq.n	80164ce <floor+0x46>
 80164ca:	4c2d      	ldr	r4, [pc, #180]	; (8016580 <floor+0xf8>)
 80164cc:	2500      	movs	r5, #0
 80164ce:	4621      	mov	r1, r4
 80164d0:	4628      	mov	r0, r5
 80164d2:	e025      	b.n	8016520 <floor+0x98>
 80164d4:	4f2b      	ldr	r7, [pc, #172]	; (8016584 <floor+0xfc>)
 80164d6:	4137      	asrs	r7, r6
 80164d8:	ea01 0307 	and.w	r3, r1, r7
 80164dc:	4303      	orrs	r3, r0
 80164de:	d01f      	beq.n	8016520 <floor+0x98>
 80164e0:	a325      	add	r3, pc, #148	; (adr r3, 8016578 <floor+0xf0>)
 80164e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e6:	f7e9 ff59 	bl	800039c <__adddf3>
 80164ea:	2200      	movs	r2, #0
 80164ec:	2300      	movs	r3, #0
 80164ee:	f7ea fb9b 	bl	8000c28 <__aeabi_dcmpgt>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	d0eb      	beq.n	80164ce <floor+0x46>
 80164f6:	2c00      	cmp	r4, #0
 80164f8:	bfbe      	ittt	lt
 80164fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80164fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8016502:	19a4      	addlt	r4, r4, r6
 8016504:	ea24 0407 	bic.w	r4, r4, r7
 8016508:	2500      	movs	r5, #0
 801650a:	e7e0      	b.n	80164ce <floor+0x46>
 801650c:	2e33      	cmp	r6, #51	; 0x33
 801650e:	dd0b      	ble.n	8016528 <floor+0xa0>
 8016510:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016514:	d104      	bne.n	8016520 <floor+0x98>
 8016516:	ee10 2a10 	vmov	r2, s0
 801651a:	460b      	mov	r3, r1
 801651c:	f7e9 ff3e 	bl	800039c <__adddf3>
 8016520:	ec41 0b10 	vmov	d0, r0, r1
 8016524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016528:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801652c:	f04f 33ff 	mov.w	r3, #4294967295
 8016530:	fa23 f707 	lsr.w	r7, r3, r7
 8016534:	4207      	tst	r7, r0
 8016536:	d0f3      	beq.n	8016520 <floor+0x98>
 8016538:	a30f      	add	r3, pc, #60	; (adr r3, 8016578 <floor+0xf0>)
 801653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653e:	f7e9 ff2d 	bl	800039c <__adddf3>
 8016542:	2200      	movs	r2, #0
 8016544:	2300      	movs	r3, #0
 8016546:	f7ea fb6f 	bl	8000c28 <__aeabi_dcmpgt>
 801654a:	2800      	cmp	r0, #0
 801654c:	d0bf      	beq.n	80164ce <floor+0x46>
 801654e:	2c00      	cmp	r4, #0
 8016550:	da02      	bge.n	8016558 <floor+0xd0>
 8016552:	2e14      	cmp	r6, #20
 8016554:	d103      	bne.n	801655e <floor+0xd6>
 8016556:	3401      	adds	r4, #1
 8016558:	ea25 0507 	bic.w	r5, r5, r7
 801655c:	e7b7      	b.n	80164ce <floor+0x46>
 801655e:	2301      	movs	r3, #1
 8016560:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016564:	fa03 f606 	lsl.w	r6, r3, r6
 8016568:	4435      	add	r5, r6
 801656a:	4545      	cmp	r5, r8
 801656c:	bf38      	it	cc
 801656e:	18e4      	addcc	r4, r4, r3
 8016570:	e7f2      	b.n	8016558 <floor+0xd0>
 8016572:	2500      	movs	r5, #0
 8016574:	462c      	mov	r4, r5
 8016576:	e7aa      	b.n	80164ce <floor+0x46>
 8016578:	8800759c 	.word	0x8800759c
 801657c:	7e37e43c 	.word	0x7e37e43c
 8016580:	bff00000 	.word	0xbff00000
 8016584:	000fffff 	.word	0x000fffff

08016588 <sin>:
 8016588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801658a:	ec53 2b10 	vmov	r2, r3, d0
 801658e:	4826      	ldr	r0, [pc, #152]	; (8016628 <sin+0xa0>)
 8016590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016594:	4281      	cmp	r1, r0
 8016596:	dc07      	bgt.n	80165a8 <sin+0x20>
 8016598:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8016620 <sin+0x98>
 801659c:	2000      	movs	r0, #0
 801659e:	f001 f8df 	bl	8017760 <__kernel_sin>
 80165a2:	ec51 0b10 	vmov	r0, r1, d0
 80165a6:	e007      	b.n	80165b8 <sin+0x30>
 80165a8:	4820      	ldr	r0, [pc, #128]	; (801662c <sin+0xa4>)
 80165aa:	4281      	cmp	r1, r0
 80165ac:	dd09      	ble.n	80165c2 <sin+0x3a>
 80165ae:	ee10 0a10 	vmov	r0, s0
 80165b2:	4619      	mov	r1, r3
 80165b4:	f7e9 fef0 	bl	8000398 <__aeabi_dsub>
 80165b8:	ec41 0b10 	vmov	d0, r0, r1
 80165bc:	b005      	add	sp, #20
 80165be:	f85d fb04 	ldr.w	pc, [sp], #4
 80165c2:	4668      	mov	r0, sp
 80165c4:	f000 fa5c 	bl	8016a80 <__ieee754_rem_pio2>
 80165c8:	f000 0003 	and.w	r0, r0, #3
 80165cc:	2801      	cmp	r0, #1
 80165ce:	d008      	beq.n	80165e2 <sin+0x5a>
 80165d0:	2802      	cmp	r0, #2
 80165d2:	d00d      	beq.n	80165f0 <sin+0x68>
 80165d4:	b9d0      	cbnz	r0, 801660c <sin+0x84>
 80165d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165da:	ed9d 0b00 	vldr	d0, [sp]
 80165de:	2001      	movs	r0, #1
 80165e0:	e7dd      	b.n	801659e <sin+0x16>
 80165e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165e6:	ed9d 0b00 	vldr	d0, [sp]
 80165ea:	f000 fcb1 	bl	8016f50 <__kernel_cos>
 80165ee:	e7d8      	b.n	80165a2 <sin+0x1a>
 80165f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80165f4:	ed9d 0b00 	vldr	d0, [sp]
 80165f8:	2001      	movs	r0, #1
 80165fa:	f001 f8b1 	bl	8017760 <__kernel_sin>
 80165fe:	ec53 2b10 	vmov	r2, r3, d0
 8016602:	ee10 0a10 	vmov	r0, s0
 8016606:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801660a:	e7d5      	b.n	80165b8 <sin+0x30>
 801660c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016610:	ed9d 0b00 	vldr	d0, [sp]
 8016614:	f000 fc9c 	bl	8016f50 <__kernel_cos>
 8016618:	e7f1      	b.n	80165fe <sin+0x76>
 801661a:	bf00      	nop
 801661c:	f3af 8000 	nop.w
	...
 8016628:	3fe921fb 	.word	0x3fe921fb
 801662c:	7fefffff 	.word	0x7fefffff

08016630 <exp>:
 8016630:	b538      	push	{r3, r4, r5, lr}
 8016632:	ed2d 8b02 	vpush	{d8}
 8016636:	ec55 4b10 	vmov	r4, r5, d0
 801663a:	f000 f8a5 	bl	8016788 <__ieee754_exp>
 801663e:	4b22      	ldr	r3, [pc, #136]	; (80166c8 <exp+0x98>)
 8016640:	eeb0 8a40 	vmov.f32	s16, s0
 8016644:	eef0 8a60 	vmov.f32	s17, s1
 8016648:	f993 3000 	ldrsb.w	r3, [r3]
 801664c:	3301      	adds	r3, #1
 801664e:	d012      	beq.n	8016676 <exp+0x46>
 8016650:	ec45 4b10 	vmov	d0, r4, r5
 8016654:	f001 f94b 	bl	80178ee <finite>
 8016658:	b168      	cbz	r0, 8016676 <exp+0x46>
 801665a:	a313      	add	r3, pc, #76	; (adr r3, 80166a8 <exp+0x78>)
 801665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016660:	4620      	mov	r0, r4
 8016662:	4629      	mov	r1, r5
 8016664:	f7ea fae0 	bl	8000c28 <__aeabi_dcmpgt>
 8016668:	b160      	cbz	r0, 8016684 <exp+0x54>
 801666a:	f7ff fa9f 	bl	8015bac <__errno>
 801666e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80166b0 <exp+0x80>
 8016672:	2322      	movs	r3, #34	; 0x22
 8016674:	6003      	str	r3, [r0, #0]
 8016676:	eeb0 0a48 	vmov.f32	s0, s16
 801667a:	eef0 0a68 	vmov.f32	s1, s17
 801667e:	ecbd 8b02 	vpop	{d8}
 8016682:	bd38      	pop	{r3, r4, r5, pc}
 8016684:	a30c      	add	r3, pc, #48	; (adr r3, 80166b8 <exp+0x88>)
 8016686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668a:	4620      	mov	r0, r4
 801668c:	4629      	mov	r1, r5
 801668e:	f7ea faad 	bl	8000bec <__aeabi_dcmplt>
 8016692:	2800      	cmp	r0, #0
 8016694:	d0ef      	beq.n	8016676 <exp+0x46>
 8016696:	f7ff fa89 	bl	8015bac <__errno>
 801669a:	2322      	movs	r3, #34	; 0x22
 801669c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80166c0 <exp+0x90>
 80166a0:	6003      	str	r3, [r0, #0]
 80166a2:	e7e8      	b.n	8016676 <exp+0x46>
 80166a4:	f3af 8000 	nop.w
 80166a8:	fefa39ef 	.word	0xfefa39ef
 80166ac:	40862e42 	.word	0x40862e42
 80166b0:	00000000 	.word	0x00000000
 80166b4:	7ff00000 	.word	0x7ff00000
 80166b8:	d52d3051 	.word	0xd52d3051
 80166bc:	c0874910 	.word	0xc0874910
	...
 80166c8:	20000128 	.word	0x20000128

080166cc <log10f>:
 80166cc:	b508      	push	{r3, lr}
 80166ce:	ed2d 8b02 	vpush	{d8}
 80166d2:	eeb0 8a40 	vmov.f32	s16, s0
 80166d6:	f000 fbdd 	bl	8016e94 <__ieee754_log10f>
 80166da:	4b14      	ldr	r3, [pc, #80]	; (801672c <log10f+0x60>)
 80166dc:	f993 3000 	ldrsb.w	r3, [r3]
 80166e0:	3301      	adds	r3, #1
 80166e2:	d014      	beq.n	801670e <log10f+0x42>
 80166e4:	eeb4 8a48 	vcmp.f32	s16, s16
 80166e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ec:	d60f      	bvs.n	801670e <log10f+0x42>
 80166ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80166f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f6:	d80a      	bhi.n	801670e <log10f+0x42>
 80166f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80166fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016700:	d108      	bne.n	8016714 <log10f+0x48>
 8016702:	f7ff fa53 	bl	8015bac <__errno>
 8016706:	2322      	movs	r3, #34	; 0x22
 8016708:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8016730 <log10f+0x64>
 801670c:	6003      	str	r3, [r0, #0]
 801670e:	ecbd 8b02 	vpop	{d8}
 8016712:	bd08      	pop	{r3, pc}
 8016714:	f7ff fa4a 	bl	8015bac <__errno>
 8016718:	ecbd 8b02 	vpop	{d8}
 801671c:	2321      	movs	r3, #33	; 0x21
 801671e:	6003      	str	r3, [r0, #0]
 8016720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016724:	4803      	ldr	r0, [pc, #12]	; (8016734 <log10f+0x68>)
 8016726:	f001 b975 	b.w	8017a14 <nanf>
 801672a:	bf00      	nop
 801672c:	20000128 	.word	0x20000128
 8016730:	ff800000 	.word	0xff800000
 8016734:	0803741d 	.word	0x0803741d

08016738 <sqrtf>:
 8016738:	b508      	push	{r3, lr}
 801673a:	ed2d 8b02 	vpush	{d8}
 801673e:	eeb0 8a40 	vmov.f32	s16, s0
 8016742:	f000 fbff 	bl	8016f44 <__ieee754_sqrtf>
 8016746:	4b0d      	ldr	r3, [pc, #52]	; (801677c <sqrtf+0x44>)
 8016748:	f993 3000 	ldrsb.w	r3, [r3]
 801674c:	3301      	adds	r3, #1
 801674e:	d011      	beq.n	8016774 <sqrtf+0x3c>
 8016750:	eeb4 8a48 	vcmp.f32	s16, s16
 8016754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016758:	d60c      	bvs.n	8016774 <sqrtf+0x3c>
 801675a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8016780 <sqrtf+0x48>
 801675e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016766:	d505      	bpl.n	8016774 <sqrtf+0x3c>
 8016768:	f7ff fa20 	bl	8015bac <__errno>
 801676c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016770:	2321      	movs	r3, #33	; 0x21
 8016772:	6003      	str	r3, [r0, #0]
 8016774:	ecbd 8b02 	vpop	{d8}
 8016778:	bd08      	pop	{r3, pc}
 801677a:	bf00      	nop
 801677c:	20000128 	.word	0x20000128
	...

08016788 <__ieee754_exp>:
 8016788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801678c:	ec55 4b10 	vmov	r4, r5, d0
 8016790:	49b1      	ldr	r1, [pc, #708]	; (8016a58 <__ieee754_exp+0x2d0>)
 8016792:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016796:	428b      	cmp	r3, r1
 8016798:	ed2d 8b04 	vpush	{d8-d9}
 801679c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80167a0:	d937      	bls.n	8016812 <__ieee754_exp+0x8a>
 80167a2:	49ae      	ldr	r1, [pc, #696]	; (8016a5c <__ieee754_exp+0x2d4>)
 80167a4:	428b      	cmp	r3, r1
 80167a6:	d916      	bls.n	80167d6 <__ieee754_exp+0x4e>
 80167a8:	ee10 3a10 	vmov	r3, s0
 80167ac:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80167b0:	4313      	orrs	r3, r2
 80167b2:	d009      	beq.n	80167c8 <__ieee754_exp+0x40>
 80167b4:	ee10 2a10 	vmov	r2, s0
 80167b8:	462b      	mov	r3, r5
 80167ba:	4620      	mov	r0, r4
 80167bc:	4629      	mov	r1, r5
 80167be:	f7e9 fded 	bl	800039c <__adddf3>
 80167c2:	4604      	mov	r4, r0
 80167c4:	460d      	mov	r5, r1
 80167c6:	e000      	b.n	80167ca <__ieee754_exp+0x42>
 80167c8:	bb06      	cbnz	r6, 801680c <__ieee754_exp+0x84>
 80167ca:	ecbd 8b04 	vpop	{d8-d9}
 80167ce:	ec45 4b10 	vmov	d0, r4, r5
 80167d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167d6:	a38a      	add	r3, pc, #552	; (adr r3, 8016a00 <__ieee754_exp+0x278>)
 80167d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167dc:	ee10 0a10 	vmov	r0, s0
 80167e0:	4629      	mov	r1, r5
 80167e2:	f7ea fa21 	bl	8000c28 <__aeabi_dcmpgt>
 80167e6:	b138      	cbz	r0, 80167f8 <__ieee754_exp+0x70>
 80167e8:	a387      	add	r3, pc, #540	; (adr r3, 8016a08 <__ieee754_exp+0x280>)
 80167ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ee:	4610      	mov	r0, r2
 80167f0:	4619      	mov	r1, r3
 80167f2:	f7e9 ff89 	bl	8000708 <__aeabi_dmul>
 80167f6:	e7e4      	b.n	80167c2 <__ieee754_exp+0x3a>
 80167f8:	a385      	add	r3, pc, #532	; (adr r3, 8016a10 <__ieee754_exp+0x288>)
 80167fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167fe:	4620      	mov	r0, r4
 8016800:	4629      	mov	r1, r5
 8016802:	f7ea f9f3 	bl	8000bec <__aeabi_dcmplt>
 8016806:	2800      	cmp	r0, #0
 8016808:	f000 8087 	beq.w	801691a <__ieee754_exp+0x192>
 801680c:	2400      	movs	r4, #0
 801680e:	2500      	movs	r5, #0
 8016810:	e7db      	b.n	80167ca <__ieee754_exp+0x42>
 8016812:	4a93      	ldr	r2, [pc, #588]	; (8016a60 <__ieee754_exp+0x2d8>)
 8016814:	4293      	cmp	r3, r2
 8016816:	f240 80ac 	bls.w	8016972 <__ieee754_exp+0x1ea>
 801681a:	4a92      	ldr	r2, [pc, #584]	; (8016a64 <__ieee754_exp+0x2dc>)
 801681c:	4293      	cmp	r3, r2
 801681e:	d87c      	bhi.n	801691a <__ieee754_exp+0x192>
 8016820:	4b91      	ldr	r3, [pc, #580]	; (8016a68 <__ieee754_exp+0x2e0>)
 8016822:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801682a:	ee10 0a10 	vmov	r0, s0
 801682e:	4629      	mov	r1, r5
 8016830:	f7e9 fdb2 	bl	8000398 <__aeabi_dsub>
 8016834:	4b8d      	ldr	r3, [pc, #564]	; (8016a6c <__ieee754_exp+0x2e4>)
 8016836:	00f7      	lsls	r7, r6, #3
 8016838:	443b      	add	r3, r7
 801683a:	ed93 7b00 	vldr	d7, [r3]
 801683e:	f1c6 0a01 	rsb	sl, r6, #1
 8016842:	4680      	mov	r8, r0
 8016844:	4689      	mov	r9, r1
 8016846:	ebaa 0a06 	sub.w	sl, sl, r6
 801684a:	eeb0 8a47 	vmov.f32	s16, s14
 801684e:	eef0 8a67 	vmov.f32	s17, s15
 8016852:	ec53 2b18 	vmov	r2, r3, d8
 8016856:	4640      	mov	r0, r8
 8016858:	4649      	mov	r1, r9
 801685a:	f7e9 fd9d 	bl	8000398 <__aeabi_dsub>
 801685e:	4604      	mov	r4, r0
 8016860:	460d      	mov	r5, r1
 8016862:	4622      	mov	r2, r4
 8016864:	462b      	mov	r3, r5
 8016866:	4620      	mov	r0, r4
 8016868:	4629      	mov	r1, r5
 801686a:	f7e9 ff4d 	bl	8000708 <__aeabi_dmul>
 801686e:	a36a      	add	r3, pc, #424	; (adr r3, 8016a18 <__ieee754_exp+0x290>)
 8016870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016874:	4606      	mov	r6, r0
 8016876:	460f      	mov	r7, r1
 8016878:	f7e9 ff46 	bl	8000708 <__aeabi_dmul>
 801687c:	a368      	add	r3, pc, #416	; (adr r3, 8016a20 <__ieee754_exp+0x298>)
 801687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016882:	f7e9 fd89 	bl	8000398 <__aeabi_dsub>
 8016886:	4632      	mov	r2, r6
 8016888:	463b      	mov	r3, r7
 801688a:	f7e9 ff3d 	bl	8000708 <__aeabi_dmul>
 801688e:	a366      	add	r3, pc, #408	; (adr r3, 8016a28 <__ieee754_exp+0x2a0>)
 8016890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016894:	f7e9 fd82 	bl	800039c <__adddf3>
 8016898:	4632      	mov	r2, r6
 801689a:	463b      	mov	r3, r7
 801689c:	f7e9 ff34 	bl	8000708 <__aeabi_dmul>
 80168a0:	a363      	add	r3, pc, #396	; (adr r3, 8016a30 <__ieee754_exp+0x2a8>)
 80168a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a6:	f7e9 fd77 	bl	8000398 <__aeabi_dsub>
 80168aa:	4632      	mov	r2, r6
 80168ac:	463b      	mov	r3, r7
 80168ae:	f7e9 ff2b 	bl	8000708 <__aeabi_dmul>
 80168b2:	a361      	add	r3, pc, #388	; (adr r3, 8016a38 <__ieee754_exp+0x2b0>)
 80168b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b8:	f7e9 fd70 	bl	800039c <__adddf3>
 80168bc:	4632      	mov	r2, r6
 80168be:	463b      	mov	r3, r7
 80168c0:	f7e9 ff22 	bl	8000708 <__aeabi_dmul>
 80168c4:	4602      	mov	r2, r0
 80168c6:	460b      	mov	r3, r1
 80168c8:	4620      	mov	r0, r4
 80168ca:	4629      	mov	r1, r5
 80168cc:	f7e9 fd64 	bl	8000398 <__aeabi_dsub>
 80168d0:	4602      	mov	r2, r0
 80168d2:	460b      	mov	r3, r1
 80168d4:	4606      	mov	r6, r0
 80168d6:	460f      	mov	r7, r1
 80168d8:	4620      	mov	r0, r4
 80168da:	4629      	mov	r1, r5
 80168dc:	f7e9 ff14 	bl	8000708 <__aeabi_dmul>
 80168e0:	ec41 0b19 	vmov	d9, r0, r1
 80168e4:	f1ba 0f00 	cmp.w	sl, #0
 80168e8:	d15d      	bne.n	80169a6 <__ieee754_exp+0x21e>
 80168ea:	2200      	movs	r2, #0
 80168ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80168f0:	4630      	mov	r0, r6
 80168f2:	4639      	mov	r1, r7
 80168f4:	f7e9 fd50 	bl	8000398 <__aeabi_dsub>
 80168f8:	4602      	mov	r2, r0
 80168fa:	460b      	mov	r3, r1
 80168fc:	ec51 0b19 	vmov	r0, r1, d9
 8016900:	f7ea f82c 	bl	800095c <__aeabi_ddiv>
 8016904:	4622      	mov	r2, r4
 8016906:	462b      	mov	r3, r5
 8016908:	f7e9 fd46 	bl	8000398 <__aeabi_dsub>
 801690c:	4602      	mov	r2, r0
 801690e:	460b      	mov	r3, r1
 8016910:	2000      	movs	r0, #0
 8016912:	4957      	ldr	r1, [pc, #348]	; (8016a70 <__ieee754_exp+0x2e8>)
 8016914:	f7e9 fd40 	bl	8000398 <__aeabi_dsub>
 8016918:	e753      	b.n	80167c2 <__ieee754_exp+0x3a>
 801691a:	4856      	ldr	r0, [pc, #344]	; (8016a74 <__ieee754_exp+0x2ec>)
 801691c:	a348      	add	r3, pc, #288	; (adr r3, 8016a40 <__ieee754_exp+0x2b8>)
 801691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016922:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8016926:	4629      	mov	r1, r5
 8016928:	4620      	mov	r0, r4
 801692a:	f7e9 feed 	bl	8000708 <__aeabi_dmul>
 801692e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016932:	f7e9 fd33 	bl	800039c <__adddf3>
 8016936:	f7ea f981 	bl	8000c3c <__aeabi_d2iz>
 801693a:	4682      	mov	sl, r0
 801693c:	f7e9 fe7a 	bl	8000634 <__aeabi_i2d>
 8016940:	a341      	add	r3, pc, #260	; (adr r3, 8016a48 <__ieee754_exp+0x2c0>)
 8016942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016946:	4606      	mov	r6, r0
 8016948:	460f      	mov	r7, r1
 801694a:	f7e9 fedd 	bl	8000708 <__aeabi_dmul>
 801694e:	4602      	mov	r2, r0
 8016950:	460b      	mov	r3, r1
 8016952:	4620      	mov	r0, r4
 8016954:	4629      	mov	r1, r5
 8016956:	f7e9 fd1f 	bl	8000398 <__aeabi_dsub>
 801695a:	a33d      	add	r3, pc, #244	; (adr r3, 8016a50 <__ieee754_exp+0x2c8>)
 801695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016960:	4680      	mov	r8, r0
 8016962:	4689      	mov	r9, r1
 8016964:	4630      	mov	r0, r6
 8016966:	4639      	mov	r1, r7
 8016968:	f7e9 fece 	bl	8000708 <__aeabi_dmul>
 801696c:	ec41 0b18 	vmov	d8, r0, r1
 8016970:	e76f      	b.n	8016852 <__ieee754_exp+0xca>
 8016972:	4a41      	ldr	r2, [pc, #260]	; (8016a78 <__ieee754_exp+0x2f0>)
 8016974:	4293      	cmp	r3, r2
 8016976:	d811      	bhi.n	801699c <__ieee754_exp+0x214>
 8016978:	a323      	add	r3, pc, #140	; (adr r3, 8016a08 <__ieee754_exp+0x280>)
 801697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697e:	ee10 0a10 	vmov	r0, s0
 8016982:	4629      	mov	r1, r5
 8016984:	f7e9 fd0a 	bl	800039c <__adddf3>
 8016988:	4b39      	ldr	r3, [pc, #228]	; (8016a70 <__ieee754_exp+0x2e8>)
 801698a:	2200      	movs	r2, #0
 801698c:	f7ea f94c 	bl	8000c28 <__aeabi_dcmpgt>
 8016990:	b138      	cbz	r0, 80169a2 <__ieee754_exp+0x21a>
 8016992:	4b37      	ldr	r3, [pc, #220]	; (8016a70 <__ieee754_exp+0x2e8>)
 8016994:	2200      	movs	r2, #0
 8016996:	4620      	mov	r0, r4
 8016998:	4629      	mov	r1, r5
 801699a:	e710      	b.n	80167be <__ieee754_exp+0x36>
 801699c:	f04f 0a00 	mov.w	sl, #0
 80169a0:	e75f      	b.n	8016862 <__ieee754_exp+0xda>
 80169a2:	4682      	mov	sl, r0
 80169a4:	e75d      	b.n	8016862 <__ieee754_exp+0xda>
 80169a6:	4632      	mov	r2, r6
 80169a8:	463b      	mov	r3, r7
 80169aa:	2000      	movs	r0, #0
 80169ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80169b0:	f7e9 fcf2 	bl	8000398 <__aeabi_dsub>
 80169b4:	4602      	mov	r2, r0
 80169b6:	460b      	mov	r3, r1
 80169b8:	ec51 0b19 	vmov	r0, r1, d9
 80169bc:	f7e9 ffce 	bl	800095c <__aeabi_ddiv>
 80169c0:	4602      	mov	r2, r0
 80169c2:	460b      	mov	r3, r1
 80169c4:	ec51 0b18 	vmov	r0, r1, d8
 80169c8:	f7e9 fce6 	bl	8000398 <__aeabi_dsub>
 80169cc:	4642      	mov	r2, r8
 80169ce:	464b      	mov	r3, r9
 80169d0:	f7e9 fce2 	bl	8000398 <__aeabi_dsub>
 80169d4:	4602      	mov	r2, r0
 80169d6:	460b      	mov	r3, r1
 80169d8:	2000      	movs	r0, #0
 80169da:	4925      	ldr	r1, [pc, #148]	; (8016a70 <__ieee754_exp+0x2e8>)
 80169dc:	f7e9 fcdc 	bl	8000398 <__aeabi_dsub>
 80169e0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80169e4:	4592      	cmp	sl, r2
 80169e6:	db02      	blt.n	80169ee <__ieee754_exp+0x266>
 80169e8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80169ec:	e6e9      	b.n	80167c2 <__ieee754_exp+0x3a>
 80169ee:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80169f2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80169f6:	2200      	movs	r2, #0
 80169f8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80169fc:	e6f9      	b.n	80167f2 <__ieee754_exp+0x6a>
 80169fe:	bf00      	nop
 8016a00:	fefa39ef 	.word	0xfefa39ef
 8016a04:	40862e42 	.word	0x40862e42
 8016a08:	8800759c 	.word	0x8800759c
 8016a0c:	7e37e43c 	.word	0x7e37e43c
 8016a10:	d52d3051 	.word	0xd52d3051
 8016a14:	c0874910 	.word	0xc0874910
 8016a18:	72bea4d0 	.word	0x72bea4d0
 8016a1c:	3e663769 	.word	0x3e663769
 8016a20:	c5d26bf1 	.word	0xc5d26bf1
 8016a24:	3ebbbd41 	.word	0x3ebbbd41
 8016a28:	af25de2c 	.word	0xaf25de2c
 8016a2c:	3f11566a 	.word	0x3f11566a
 8016a30:	16bebd93 	.word	0x16bebd93
 8016a34:	3f66c16c 	.word	0x3f66c16c
 8016a38:	5555553e 	.word	0x5555553e
 8016a3c:	3fc55555 	.word	0x3fc55555
 8016a40:	652b82fe 	.word	0x652b82fe
 8016a44:	3ff71547 	.word	0x3ff71547
 8016a48:	fee00000 	.word	0xfee00000
 8016a4c:	3fe62e42 	.word	0x3fe62e42
 8016a50:	35793c76 	.word	0x35793c76
 8016a54:	3dea39ef 	.word	0x3dea39ef
 8016a58:	40862e41 	.word	0x40862e41
 8016a5c:	7fefffff 	.word	0x7fefffff
 8016a60:	3fd62e42 	.word	0x3fd62e42
 8016a64:	3ff0a2b1 	.word	0x3ff0a2b1
 8016a68:	08037460 	.word	0x08037460
 8016a6c:	08037470 	.word	0x08037470
 8016a70:	3ff00000 	.word	0x3ff00000
 8016a74:	08037450 	.word	0x08037450
 8016a78:	3e2fffff 	.word	0x3e2fffff
 8016a7c:	00000000 	.word	0x00000000

08016a80 <__ieee754_rem_pio2>:
 8016a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a84:	ed2d 8b02 	vpush	{d8}
 8016a88:	ec55 4b10 	vmov	r4, r5, d0
 8016a8c:	4bca      	ldr	r3, [pc, #808]	; (8016db8 <__ieee754_rem_pio2+0x338>)
 8016a8e:	b08b      	sub	sp, #44	; 0x2c
 8016a90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8016a94:	4598      	cmp	r8, r3
 8016a96:	4682      	mov	sl, r0
 8016a98:	9502      	str	r5, [sp, #8]
 8016a9a:	dc08      	bgt.n	8016aae <__ieee754_rem_pio2+0x2e>
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	ed80 0b00 	vstr	d0, [r0]
 8016aa4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016aa8:	f04f 0b00 	mov.w	fp, #0
 8016aac:	e028      	b.n	8016b00 <__ieee754_rem_pio2+0x80>
 8016aae:	4bc3      	ldr	r3, [pc, #780]	; (8016dbc <__ieee754_rem_pio2+0x33c>)
 8016ab0:	4598      	cmp	r8, r3
 8016ab2:	dc78      	bgt.n	8016ba6 <__ieee754_rem_pio2+0x126>
 8016ab4:	9b02      	ldr	r3, [sp, #8]
 8016ab6:	4ec2      	ldr	r6, [pc, #776]	; (8016dc0 <__ieee754_rem_pio2+0x340>)
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	ee10 0a10 	vmov	r0, s0
 8016abe:	a3b0      	add	r3, pc, #704	; (adr r3, 8016d80 <__ieee754_rem_pio2+0x300>)
 8016ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ac4:	4629      	mov	r1, r5
 8016ac6:	dd39      	ble.n	8016b3c <__ieee754_rem_pio2+0xbc>
 8016ac8:	f7e9 fc66 	bl	8000398 <__aeabi_dsub>
 8016acc:	45b0      	cmp	r8, r6
 8016ace:	4604      	mov	r4, r0
 8016ad0:	460d      	mov	r5, r1
 8016ad2:	d01b      	beq.n	8016b0c <__ieee754_rem_pio2+0x8c>
 8016ad4:	a3ac      	add	r3, pc, #688	; (adr r3, 8016d88 <__ieee754_rem_pio2+0x308>)
 8016ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ada:	f7e9 fc5d 	bl	8000398 <__aeabi_dsub>
 8016ade:	4602      	mov	r2, r0
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	e9ca 2300 	strd	r2, r3, [sl]
 8016ae6:	4620      	mov	r0, r4
 8016ae8:	4629      	mov	r1, r5
 8016aea:	f7e9 fc55 	bl	8000398 <__aeabi_dsub>
 8016aee:	a3a6      	add	r3, pc, #664	; (adr r3, 8016d88 <__ieee754_rem_pio2+0x308>)
 8016af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af4:	f7e9 fc50 	bl	8000398 <__aeabi_dsub>
 8016af8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016afc:	f04f 0b01 	mov.w	fp, #1
 8016b00:	4658      	mov	r0, fp
 8016b02:	b00b      	add	sp, #44	; 0x2c
 8016b04:	ecbd 8b02 	vpop	{d8}
 8016b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b0c:	a3a0      	add	r3, pc, #640	; (adr r3, 8016d90 <__ieee754_rem_pio2+0x310>)
 8016b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b12:	f7e9 fc41 	bl	8000398 <__aeabi_dsub>
 8016b16:	a3a0      	add	r3, pc, #640	; (adr r3, 8016d98 <__ieee754_rem_pio2+0x318>)
 8016b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	460d      	mov	r5, r1
 8016b20:	f7e9 fc3a 	bl	8000398 <__aeabi_dsub>
 8016b24:	4602      	mov	r2, r0
 8016b26:	460b      	mov	r3, r1
 8016b28:	e9ca 2300 	strd	r2, r3, [sl]
 8016b2c:	4620      	mov	r0, r4
 8016b2e:	4629      	mov	r1, r5
 8016b30:	f7e9 fc32 	bl	8000398 <__aeabi_dsub>
 8016b34:	a398      	add	r3, pc, #608	; (adr r3, 8016d98 <__ieee754_rem_pio2+0x318>)
 8016b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b3a:	e7db      	b.n	8016af4 <__ieee754_rem_pio2+0x74>
 8016b3c:	f7e9 fc2e 	bl	800039c <__adddf3>
 8016b40:	45b0      	cmp	r8, r6
 8016b42:	4604      	mov	r4, r0
 8016b44:	460d      	mov	r5, r1
 8016b46:	d016      	beq.n	8016b76 <__ieee754_rem_pio2+0xf6>
 8016b48:	a38f      	add	r3, pc, #572	; (adr r3, 8016d88 <__ieee754_rem_pio2+0x308>)
 8016b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b4e:	f7e9 fc25 	bl	800039c <__adddf3>
 8016b52:	4602      	mov	r2, r0
 8016b54:	460b      	mov	r3, r1
 8016b56:	e9ca 2300 	strd	r2, r3, [sl]
 8016b5a:	4620      	mov	r0, r4
 8016b5c:	4629      	mov	r1, r5
 8016b5e:	f7e9 fc1b 	bl	8000398 <__aeabi_dsub>
 8016b62:	a389      	add	r3, pc, #548	; (adr r3, 8016d88 <__ieee754_rem_pio2+0x308>)
 8016b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b68:	f7e9 fc18 	bl	800039c <__adddf3>
 8016b6c:	f04f 3bff 	mov.w	fp, #4294967295
 8016b70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016b74:	e7c4      	b.n	8016b00 <__ieee754_rem_pio2+0x80>
 8016b76:	a386      	add	r3, pc, #536	; (adr r3, 8016d90 <__ieee754_rem_pio2+0x310>)
 8016b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7c:	f7e9 fc0e 	bl	800039c <__adddf3>
 8016b80:	a385      	add	r3, pc, #532	; (adr r3, 8016d98 <__ieee754_rem_pio2+0x318>)
 8016b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b86:	4604      	mov	r4, r0
 8016b88:	460d      	mov	r5, r1
 8016b8a:	f7e9 fc07 	bl	800039c <__adddf3>
 8016b8e:	4602      	mov	r2, r0
 8016b90:	460b      	mov	r3, r1
 8016b92:	e9ca 2300 	strd	r2, r3, [sl]
 8016b96:	4620      	mov	r0, r4
 8016b98:	4629      	mov	r1, r5
 8016b9a:	f7e9 fbfd 	bl	8000398 <__aeabi_dsub>
 8016b9e:	a37e      	add	r3, pc, #504	; (adr r3, 8016d98 <__ieee754_rem_pio2+0x318>)
 8016ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba4:	e7e0      	b.n	8016b68 <__ieee754_rem_pio2+0xe8>
 8016ba6:	4b87      	ldr	r3, [pc, #540]	; (8016dc4 <__ieee754_rem_pio2+0x344>)
 8016ba8:	4598      	cmp	r8, r3
 8016baa:	f300 80d9 	bgt.w	8016d60 <__ieee754_rem_pio2+0x2e0>
 8016bae:	f000 fe95 	bl	80178dc <fabs>
 8016bb2:	ec55 4b10 	vmov	r4, r5, d0
 8016bb6:	ee10 0a10 	vmov	r0, s0
 8016bba:	a379      	add	r3, pc, #484	; (adr r3, 8016da0 <__ieee754_rem_pio2+0x320>)
 8016bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc0:	4629      	mov	r1, r5
 8016bc2:	f7e9 fda1 	bl	8000708 <__aeabi_dmul>
 8016bc6:	4b80      	ldr	r3, [pc, #512]	; (8016dc8 <__ieee754_rem_pio2+0x348>)
 8016bc8:	2200      	movs	r2, #0
 8016bca:	f7e9 fbe7 	bl	800039c <__adddf3>
 8016bce:	f7ea f835 	bl	8000c3c <__aeabi_d2iz>
 8016bd2:	4683      	mov	fp, r0
 8016bd4:	f7e9 fd2e 	bl	8000634 <__aeabi_i2d>
 8016bd8:	4602      	mov	r2, r0
 8016bda:	460b      	mov	r3, r1
 8016bdc:	ec43 2b18 	vmov	d8, r2, r3
 8016be0:	a367      	add	r3, pc, #412	; (adr r3, 8016d80 <__ieee754_rem_pio2+0x300>)
 8016be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be6:	f7e9 fd8f 	bl	8000708 <__aeabi_dmul>
 8016bea:	4602      	mov	r2, r0
 8016bec:	460b      	mov	r3, r1
 8016bee:	4620      	mov	r0, r4
 8016bf0:	4629      	mov	r1, r5
 8016bf2:	f7e9 fbd1 	bl	8000398 <__aeabi_dsub>
 8016bf6:	a364      	add	r3, pc, #400	; (adr r3, 8016d88 <__ieee754_rem_pio2+0x308>)
 8016bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bfc:	4606      	mov	r6, r0
 8016bfe:	460f      	mov	r7, r1
 8016c00:	ec51 0b18 	vmov	r0, r1, d8
 8016c04:	f7e9 fd80 	bl	8000708 <__aeabi_dmul>
 8016c08:	f1bb 0f1f 	cmp.w	fp, #31
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	460d      	mov	r5, r1
 8016c10:	dc0d      	bgt.n	8016c2e <__ieee754_rem_pio2+0x1ae>
 8016c12:	4b6e      	ldr	r3, [pc, #440]	; (8016dcc <__ieee754_rem_pio2+0x34c>)
 8016c14:	f10b 32ff 	add.w	r2, fp, #4294967295
 8016c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c1c:	4543      	cmp	r3, r8
 8016c1e:	d006      	beq.n	8016c2e <__ieee754_rem_pio2+0x1ae>
 8016c20:	4622      	mov	r2, r4
 8016c22:	462b      	mov	r3, r5
 8016c24:	4630      	mov	r0, r6
 8016c26:	4639      	mov	r1, r7
 8016c28:	f7e9 fbb6 	bl	8000398 <__aeabi_dsub>
 8016c2c:	e00f      	b.n	8016c4e <__ieee754_rem_pio2+0x1ce>
 8016c2e:	462b      	mov	r3, r5
 8016c30:	4622      	mov	r2, r4
 8016c32:	4630      	mov	r0, r6
 8016c34:	4639      	mov	r1, r7
 8016c36:	f7e9 fbaf 	bl	8000398 <__aeabi_dsub>
 8016c3a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016c3e:	9303      	str	r3, [sp, #12]
 8016c40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016c44:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8016c48:	f1b8 0f10 	cmp.w	r8, #16
 8016c4c:	dc02      	bgt.n	8016c54 <__ieee754_rem_pio2+0x1d4>
 8016c4e:	e9ca 0100 	strd	r0, r1, [sl]
 8016c52:	e039      	b.n	8016cc8 <__ieee754_rem_pio2+0x248>
 8016c54:	a34e      	add	r3, pc, #312	; (adr r3, 8016d90 <__ieee754_rem_pio2+0x310>)
 8016c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5a:	ec51 0b18 	vmov	r0, r1, d8
 8016c5e:	f7e9 fd53 	bl	8000708 <__aeabi_dmul>
 8016c62:	4604      	mov	r4, r0
 8016c64:	460d      	mov	r5, r1
 8016c66:	4602      	mov	r2, r0
 8016c68:	460b      	mov	r3, r1
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	4639      	mov	r1, r7
 8016c6e:	f7e9 fb93 	bl	8000398 <__aeabi_dsub>
 8016c72:	4602      	mov	r2, r0
 8016c74:	460b      	mov	r3, r1
 8016c76:	4680      	mov	r8, r0
 8016c78:	4689      	mov	r9, r1
 8016c7a:	4630      	mov	r0, r6
 8016c7c:	4639      	mov	r1, r7
 8016c7e:	f7e9 fb8b 	bl	8000398 <__aeabi_dsub>
 8016c82:	4622      	mov	r2, r4
 8016c84:	462b      	mov	r3, r5
 8016c86:	f7e9 fb87 	bl	8000398 <__aeabi_dsub>
 8016c8a:	a343      	add	r3, pc, #268	; (adr r3, 8016d98 <__ieee754_rem_pio2+0x318>)
 8016c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c90:	4604      	mov	r4, r0
 8016c92:	460d      	mov	r5, r1
 8016c94:	ec51 0b18 	vmov	r0, r1, d8
 8016c98:	f7e9 fd36 	bl	8000708 <__aeabi_dmul>
 8016c9c:	4622      	mov	r2, r4
 8016c9e:	462b      	mov	r3, r5
 8016ca0:	f7e9 fb7a 	bl	8000398 <__aeabi_dsub>
 8016ca4:	4602      	mov	r2, r0
 8016ca6:	460b      	mov	r3, r1
 8016ca8:	4604      	mov	r4, r0
 8016caa:	460d      	mov	r5, r1
 8016cac:	4640      	mov	r0, r8
 8016cae:	4649      	mov	r1, r9
 8016cb0:	f7e9 fb72 	bl	8000398 <__aeabi_dsub>
 8016cb4:	9a03      	ldr	r2, [sp, #12]
 8016cb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016cba:	1ad3      	subs	r3, r2, r3
 8016cbc:	2b31      	cmp	r3, #49	; 0x31
 8016cbe:	dc24      	bgt.n	8016d0a <__ieee754_rem_pio2+0x28a>
 8016cc0:	e9ca 0100 	strd	r0, r1, [sl]
 8016cc4:	4646      	mov	r6, r8
 8016cc6:	464f      	mov	r7, r9
 8016cc8:	e9da 8900 	ldrd	r8, r9, [sl]
 8016ccc:	4630      	mov	r0, r6
 8016cce:	4642      	mov	r2, r8
 8016cd0:	464b      	mov	r3, r9
 8016cd2:	4639      	mov	r1, r7
 8016cd4:	f7e9 fb60 	bl	8000398 <__aeabi_dsub>
 8016cd8:	462b      	mov	r3, r5
 8016cda:	4622      	mov	r2, r4
 8016cdc:	f7e9 fb5c 	bl	8000398 <__aeabi_dsub>
 8016ce0:	9b02      	ldr	r3, [sp, #8]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016ce8:	f6bf af0a 	bge.w	8016b00 <__ieee754_rem_pio2+0x80>
 8016cec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016cf0:	f8ca 3004 	str.w	r3, [sl, #4]
 8016cf4:	f8ca 8000 	str.w	r8, [sl]
 8016cf8:	f8ca 0008 	str.w	r0, [sl, #8]
 8016cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d00:	f8ca 300c 	str.w	r3, [sl, #12]
 8016d04:	f1cb 0b00 	rsb	fp, fp, #0
 8016d08:	e6fa      	b.n	8016b00 <__ieee754_rem_pio2+0x80>
 8016d0a:	a327      	add	r3, pc, #156	; (adr r3, 8016da8 <__ieee754_rem_pio2+0x328>)
 8016d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d10:	ec51 0b18 	vmov	r0, r1, d8
 8016d14:	f7e9 fcf8 	bl	8000708 <__aeabi_dmul>
 8016d18:	4604      	mov	r4, r0
 8016d1a:	460d      	mov	r5, r1
 8016d1c:	4602      	mov	r2, r0
 8016d1e:	460b      	mov	r3, r1
 8016d20:	4640      	mov	r0, r8
 8016d22:	4649      	mov	r1, r9
 8016d24:	f7e9 fb38 	bl	8000398 <__aeabi_dsub>
 8016d28:	4602      	mov	r2, r0
 8016d2a:	460b      	mov	r3, r1
 8016d2c:	4606      	mov	r6, r0
 8016d2e:	460f      	mov	r7, r1
 8016d30:	4640      	mov	r0, r8
 8016d32:	4649      	mov	r1, r9
 8016d34:	f7e9 fb30 	bl	8000398 <__aeabi_dsub>
 8016d38:	4622      	mov	r2, r4
 8016d3a:	462b      	mov	r3, r5
 8016d3c:	f7e9 fb2c 	bl	8000398 <__aeabi_dsub>
 8016d40:	a31b      	add	r3, pc, #108	; (adr r3, 8016db0 <__ieee754_rem_pio2+0x330>)
 8016d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d46:	4604      	mov	r4, r0
 8016d48:	460d      	mov	r5, r1
 8016d4a:	ec51 0b18 	vmov	r0, r1, d8
 8016d4e:	f7e9 fcdb 	bl	8000708 <__aeabi_dmul>
 8016d52:	4622      	mov	r2, r4
 8016d54:	462b      	mov	r3, r5
 8016d56:	f7e9 fb1f 	bl	8000398 <__aeabi_dsub>
 8016d5a:	4604      	mov	r4, r0
 8016d5c:	460d      	mov	r5, r1
 8016d5e:	e75f      	b.n	8016c20 <__ieee754_rem_pio2+0x1a0>
 8016d60:	4b1b      	ldr	r3, [pc, #108]	; (8016dd0 <__ieee754_rem_pio2+0x350>)
 8016d62:	4598      	cmp	r8, r3
 8016d64:	dd36      	ble.n	8016dd4 <__ieee754_rem_pio2+0x354>
 8016d66:	ee10 2a10 	vmov	r2, s0
 8016d6a:	462b      	mov	r3, r5
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	4629      	mov	r1, r5
 8016d70:	f7e9 fb12 	bl	8000398 <__aeabi_dsub>
 8016d74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016d78:	e9ca 0100 	strd	r0, r1, [sl]
 8016d7c:	e694      	b.n	8016aa8 <__ieee754_rem_pio2+0x28>
 8016d7e:	bf00      	nop
 8016d80:	54400000 	.word	0x54400000
 8016d84:	3ff921fb 	.word	0x3ff921fb
 8016d88:	1a626331 	.word	0x1a626331
 8016d8c:	3dd0b461 	.word	0x3dd0b461
 8016d90:	1a600000 	.word	0x1a600000
 8016d94:	3dd0b461 	.word	0x3dd0b461
 8016d98:	2e037073 	.word	0x2e037073
 8016d9c:	3ba3198a 	.word	0x3ba3198a
 8016da0:	6dc9c883 	.word	0x6dc9c883
 8016da4:	3fe45f30 	.word	0x3fe45f30
 8016da8:	2e000000 	.word	0x2e000000
 8016dac:	3ba3198a 	.word	0x3ba3198a
 8016db0:	252049c1 	.word	0x252049c1
 8016db4:	397b839a 	.word	0x397b839a
 8016db8:	3fe921fb 	.word	0x3fe921fb
 8016dbc:	4002d97b 	.word	0x4002d97b
 8016dc0:	3ff921fb 	.word	0x3ff921fb
 8016dc4:	413921fb 	.word	0x413921fb
 8016dc8:	3fe00000 	.word	0x3fe00000
 8016dcc:	08037480 	.word	0x08037480
 8016dd0:	7fefffff 	.word	0x7fefffff
 8016dd4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8016dd8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8016ddc:	ee10 0a10 	vmov	r0, s0
 8016de0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8016de4:	ee10 6a10 	vmov	r6, s0
 8016de8:	460f      	mov	r7, r1
 8016dea:	f7e9 ff27 	bl	8000c3c <__aeabi_d2iz>
 8016dee:	f7e9 fc21 	bl	8000634 <__aeabi_i2d>
 8016df2:	4602      	mov	r2, r0
 8016df4:	460b      	mov	r3, r1
 8016df6:	4630      	mov	r0, r6
 8016df8:	4639      	mov	r1, r7
 8016dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016dfe:	f7e9 facb 	bl	8000398 <__aeabi_dsub>
 8016e02:	4b22      	ldr	r3, [pc, #136]	; (8016e8c <__ieee754_rem_pio2+0x40c>)
 8016e04:	2200      	movs	r2, #0
 8016e06:	f7e9 fc7f 	bl	8000708 <__aeabi_dmul>
 8016e0a:	460f      	mov	r7, r1
 8016e0c:	4606      	mov	r6, r0
 8016e0e:	f7e9 ff15 	bl	8000c3c <__aeabi_d2iz>
 8016e12:	f7e9 fc0f 	bl	8000634 <__aeabi_i2d>
 8016e16:	4602      	mov	r2, r0
 8016e18:	460b      	mov	r3, r1
 8016e1a:	4630      	mov	r0, r6
 8016e1c:	4639      	mov	r1, r7
 8016e1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016e22:	f7e9 fab9 	bl	8000398 <__aeabi_dsub>
 8016e26:	4b19      	ldr	r3, [pc, #100]	; (8016e8c <__ieee754_rem_pio2+0x40c>)
 8016e28:	2200      	movs	r2, #0
 8016e2a:	f7e9 fc6d 	bl	8000708 <__aeabi_dmul>
 8016e2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016e32:	ad04      	add	r5, sp, #16
 8016e34:	f04f 0803 	mov.w	r8, #3
 8016e38:	46a9      	mov	r9, r5
 8016e3a:	2600      	movs	r6, #0
 8016e3c:	2700      	movs	r7, #0
 8016e3e:	4632      	mov	r2, r6
 8016e40:	463b      	mov	r3, r7
 8016e42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8016e46:	46c3      	mov	fp, r8
 8016e48:	3d08      	subs	r5, #8
 8016e4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8016e4e:	f7e9 fec3 	bl	8000bd8 <__aeabi_dcmpeq>
 8016e52:	2800      	cmp	r0, #0
 8016e54:	d1f3      	bne.n	8016e3e <__ieee754_rem_pio2+0x3be>
 8016e56:	4b0e      	ldr	r3, [pc, #56]	; (8016e90 <__ieee754_rem_pio2+0x410>)
 8016e58:	9301      	str	r3, [sp, #4]
 8016e5a:	2302      	movs	r3, #2
 8016e5c:	9300      	str	r3, [sp, #0]
 8016e5e:	4622      	mov	r2, r4
 8016e60:	465b      	mov	r3, fp
 8016e62:	4651      	mov	r1, sl
 8016e64:	4648      	mov	r0, r9
 8016e66:	f000 f93b 	bl	80170e0 <__kernel_rem_pio2>
 8016e6a:	9b02      	ldr	r3, [sp, #8]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	4683      	mov	fp, r0
 8016e70:	f6bf ae46 	bge.w	8016b00 <__ieee754_rem_pio2+0x80>
 8016e74:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016e78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016e7c:	f8ca 3004 	str.w	r3, [sl, #4]
 8016e80:	f8da 300c 	ldr.w	r3, [sl, #12]
 8016e84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016e88:	e73a      	b.n	8016d00 <__ieee754_rem_pio2+0x280>
 8016e8a:	bf00      	nop
 8016e8c:	41700000 	.word	0x41700000
 8016e90:	08037500 	.word	0x08037500

08016e94 <__ieee754_log10f>:
 8016e94:	b508      	push	{r3, lr}
 8016e96:	ee10 2a10 	vmov	r2, s0
 8016e9a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016e9e:	ed2d 8b02 	vpush	{d8}
 8016ea2:	d108      	bne.n	8016eb6 <__ieee754_log10f+0x22>
 8016ea4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8016f2c <__ieee754_log10f+0x98>
 8016ea8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8016f30 <__ieee754_log10f+0x9c>
 8016eac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016eb0:	ecbd 8b02 	vpop	{d8}
 8016eb4:	bd08      	pop	{r3, pc}
 8016eb6:	2a00      	cmp	r2, #0
 8016eb8:	da02      	bge.n	8016ec0 <__ieee754_log10f+0x2c>
 8016eba:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016ebe:	e7f3      	b.n	8016ea8 <__ieee754_log10f+0x14>
 8016ec0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016ec4:	db02      	blt.n	8016ecc <__ieee754_log10f+0x38>
 8016ec6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016eca:	e7f1      	b.n	8016eb0 <__ieee754_log10f+0x1c>
 8016ecc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8016ed0:	bfbf      	itttt	lt
 8016ed2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8016f34 <__ieee754_log10f+0xa0>
 8016ed6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016eda:	f06f 0118 	mvnlt.w	r1, #24
 8016ede:	ee17 2a90 	vmovlt	r2, s15
 8016ee2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8016ee6:	bfa8      	it	ge
 8016ee8:	2100      	movge	r1, #0
 8016eea:	3b7f      	subs	r3, #127	; 0x7f
 8016eec:	440b      	add	r3, r1
 8016eee:	0fd9      	lsrs	r1, r3, #31
 8016ef0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016ef4:	ee07 3a90 	vmov	s15, r3
 8016ef8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016efc:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8016f00:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016f04:	ee00 3a10 	vmov	s0, r3
 8016f08:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016f0c:	f000 fd88 	bl	8017a20 <__ieee754_logf>
 8016f10:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016f38 <__ieee754_log10f+0xa4>
 8016f14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016f18:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016f3c <__ieee754_log10f+0xa8>
 8016f1c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016f20:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016f40 <__ieee754_log10f+0xac>
 8016f24:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016f28:	e7c2      	b.n	8016eb0 <__ieee754_log10f+0x1c>
 8016f2a:	bf00      	nop
 8016f2c:	cc000000 	.word	0xcc000000
 8016f30:	00000000 	.word	0x00000000
 8016f34:	4c000000 	.word	0x4c000000
 8016f38:	3ede5bd9 	.word	0x3ede5bd9
 8016f3c:	355427db 	.word	0x355427db
 8016f40:	3e9a2080 	.word	0x3e9a2080

08016f44 <__ieee754_sqrtf>:
 8016f44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016f48:	4770      	bx	lr
 8016f4a:	0000      	movs	r0, r0
 8016f4c:	0000      	movs	r0, r0
	...

08016f50 <__kernel_cos>:
 8016f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f54:	ec57 6b10 	vmov	r6, r7, d0
 8016f58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8016f5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8016f60:	ed8d 1b00 	vstr	d1, [sp]
 8016f64:	da07      	bge.n	8016f76 <__kernel_cos+0x26>
 8016f66:	ee10 0a10 	vmov	r0, s0
 8016f6a:	4639      	mov	r1, r7
 8016f6c:	f7e9 fe66 	bl	8000c3c <__aeabi_d2iz>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	f000 8088 	beq.w	8017086 <__kernel_cos+0x136>
 8016f76:	4632      	mov	r2, r6
 8016f78:	463b      	mov	r3, r7
 8016f7a:	4630      	mov	r0, r6
 8016f7c:	4639      	mov	r1, r7
 8016f7e:	f7e9 fbc3 	bl	8000708 <__aeabi_dmul>
 8016f82:	4b51      	ldr	r3, [pc, #324]	; (80170c8 <__kernel_cos+0x178>)
 8016f84:	2200      	movs	r2, #0
 8016f86:	4604      	mov	r4, r0
 8016f88:	460d      	mov	r5, r1
 8016f8a:	f7e9 fbbd 	bl	8000708 <__aeabi_dmul>
 8016f8e:	a340      	add	r3, pc, #256	; (adr r3, 8017090 <__kernel_cos+0x140>)
 8016f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f94:	4682      	mov	sl, r0
 8016f96:	468b      	mov	fp, r1
 8016f98:	4620      	mov	r0, r4
 8016f9a:	4629      	mov	r1, r5
 8016f9c:	f7e9 fbb4 	bl	8000708 <__aeabi_dmul>
 8016fa0:	a33d      	add	r3, pc, #244	; (adr r3, 8017098 <__kernel_cos+0x148>)
 8016fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fa6:	f7e9 f9f9 	bl	800039c <__adddf3>
 8016faa:	4622      	mov	r2, r4
 8016fac:	462b      	mov	r3, r5
 8016fae:	f7e9 fbab 	bl	8000708 <__aeabi_dmul>
 8016fb2:	a33b      	add	r3, pc, #236	; (adr r3, 80170a0 <__kernel_cos+0x150>)
 8016fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb8:	f7e9 f9ee 	bl	8000398 <__aeabi_dsub>
 8016fbc:	4622      	mov	r2, r4
 8016fbe:	462b      	mov	r3, r5
 8016fc0:	f7e9 fba2 	bl	8000708 <__aeabi_dmul>
 8016fc4:	a338      	add	r3, pc, #224	; (adr r3, 80170a8 <__kernel_cos+0x158>)
 8016fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fca:	f7e9 f9e7 	bl	800039c <__adddf3>
 8016fce:	4622      	mov	r2, r4
 8016fd0:	462b      	mov	r3, r5
 8016fd2:	f7e9 fb99 	bl	8000708 <__aeabi_dmul>
 8016fd6:	a336      	add	r3, pc, #216	; (adr r3, 80170b0 <__kernel_cos+0x160>)
 8016fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fdc:	f7e9 f9dc 	bl	8000398 <__aeabi_dsub>
 8016fe0:	4622      	mov	r2, r4
 8016fe2:	462b      	mov	r3, r5
 8016fe4:	f7e9 fb90 	bl	8000708 <__aeabi_dmul>
 8016fe8:	a333      	add	r3, pc, #204	; (adr r3, 80170b8 <__kernel_cos+0x168>)
 8016fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fee:	f7e9 f9d5 	bl	800039c <__adddf3>
 8016ff2:	4622      	mov	r2, r4
 8016ff4:	462b      	mov	r3, r5
 8016ff6:	f7e9 fb87 	bl	8000708 <__aeabi_dmul>
 8016ffa:	4622      	mov	r2, r4
 8016ffc:	462b      	mov	r3, r5
 8016ffe:	f7e9 fb83 	bl	8000708 <__aeabi_dmul>
 8017002:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017006:	4604      	mov	r4, r0
 8017008:	460d      	mov	r5, r1
 801700a:	4630      	mov	r0, r6
 801700c:	4639      	mov	r1, r7
 801700e:	f7e9 fb7b 	bl	8000708 <__aeabi_dmul>
 8017012:	460b      	mov	r3, r1
 8017014:	4602      	mov	r2, r0
 8017016:	4629      	mov	r1, r5
 8017018:	4620      	mov	r0, r4
 801701a:	f7e9 f9bd 	bl	8000398 <__aeabi_dsub>
 801701e:	4b2b      	ldr	r3, [pc, #172]	; (80170cc <__kernel_cos+0x17c>)
 8017020:	4598      	cmp	r8, r3
 8017022:	4606      	mov	r6, r0
 8017024:	460f      	mov	r7, r1
 8017026:	dc10      	bgt.n	801704a <__kernel_cos+0xfa>
 8017028:	4602      	mov	r2, r0
 801702a:	460b      	mov	r3, r1
 801702c:	4650      	mov	r0, sl
 801702e:	4659      	mov	r1, fp
 8017030:	f7e9 f9b2 	bl	8000398 <__aeabi_dsub>
 8017034:	460b      	mov	r3, r1
 8017036:	4926      	ldr	r1, [pc, #152]	; (80170d0 <__kernel_cos+0x180>)
 8017038:	4602      	mov	r2, r0
 801703a:	2000      	movs	r0, #0
 801703c:	f7e9 f9ac 	bl	8000398 <__aeabi_dsub>
 8017040:	ec41 0b10 	vmov	d0, r0, r1
 8017044:	b003      	add	sp, #12
 8017046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801704a:	4b22      	ldr	r3, [pc, #136]	; (80170d4 <__kernel_cos+0x184>)
 801704c:	4920      	ldr	r1, [pc, #128]	; (80170d0 <__kernel_cos+0x180>)
 801704e:	4598      	cmp	r8, r3
 8017050:	bfcc      	ite	gt
 8017052:	4d21      	ldrgt	r5, [pc, #132]	; (80170d8 <__kernel_cos+0x188>)
 8017054:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8017058:	2400      	movs	r4, #0
 801705a:	4622      	mov	r2, r4
 801705c:	462b      	mov	r3, r5
 801705e:	2000      	movs	r0, #0
 8017060:	f7e9 f99a 	bl	8000398 <__aeabi_dsub>
 8017064:	4622      	mov	r2, r4
 8017066:	4680      	mov	r8, r0
 8017068:	4689      	mov	r9, r1
 801706a:	462b      	mov	r3, r5
 801706c:	4650      	mov	r0, sl
 801706e:	4659      	mov	r1, fp
 8017070:	f7e9 f992 	bl	8000398 <__aeabi_dsub>
 8017074:	4632      	mov	r2, r6
 8017076:	463b      	mov	r3, r7
 8017078:	f7e9 f98e 	bl	8000398 <__aeabi_dsub>
 801707c:	4602      	mov	r2, r0
 801707e:	460b      	mov	r3, r1
 8017080:	4640      	mov	r0, r8
 8017082:	4649      	mov	r1, r9
 8017084:	e7da      	b.n	801703c <__kernel_cos+0xec>
 8017086:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80170c0 <__kernel_cos+0x170>
 801708a:	e7db      	b.n	8017044 <__kernel_cos+0xf4>
 801708c:	f3af 8000 	nop.w
 8017090:	be8838d4 	.word	0xbe8838d4
 8017094:	bda8fae9 	.word	0xbda8fae9
 8017098:	bdb4b1c4 	.word	0xbdb4b1c4
 801709c:	3e21ee9e 	.word	0x3e21ee9e
 80170a0:	809c52ad 	.word	0x809c52ad
 80170a4:	3e927e4f 	.word	0x3e927e4f
 80170a8:	19cb1590 	.word	0x19cb1590
 80170ac:	3efa01a0 	.word	0x3efa01a0
 80170b0:	16c15177 	.word	0x16c15177
 80170b4:	3f56c16c 	.word	0x3f56c16c
 80170b8:	5555554c 	.word	0x5555554c
 80170bc:	3fa55555 	.word	0x3fa55555
 80170c0:	00000000 	.word	0x00000000
 80170c4:	3ff00000 	.word	0x3ff00000
 80170c8:	3fe00000 	.word	0x3fe00000
 80170cc:	3fd33332 	.word	0x3fd33332
 80170d0:	3ff00000 	.word	0x3ff00000
 80170d4:	3fe90000 	.word	0x3fe90000
 80170d8:	3fd20000 	.word	0x3fd20000
 80170dc:	00000000 	.word	0x00000000

080170e0 <__kernel_rem_pio2>:
 80170e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170e4:	ed2d 8b02 	vpush	{d8}
 80170e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80170ec:	f112 0f14 	cmn.w	r2, #20
 80170f0:	9308      	str	r3, [sp, #32]
 80170f2:	9101      	str	r1, [sp, #4]
 80170f4:	4bc6      	ldr	r3, [pc, #792]	; (8017410 <__kernel_rem_pio2+0x330>)
 80170f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80170f8:	9009      	str	r0, [sp, #36]	; 0x24
 80170fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80170fe:	9304      	str	r3, [sp, #16]
 8017100:	9b08      	ldr	r3, [sp, #32]
 8017102:	f103 33ff 	add.w	r3, r3, #4294967295
 8017106:	bfa8      	it	ge
 8017108:	1ed4      	subge	r4, r2, #3
 801710a:	9306      	str	r3, [sp, #24]
 801710c:	bfb2      	itee	lt
 801710e:	2400      	movlt	r4, #0
 8017110:	2318      	movge	r3, #24
 8017112:	fb94 f4f3 	sdivge	r4, r4, r3
 8017116:	f06f 0317 	mvn.w	r3, #23
 801711a:	fb04 3303 	mla	r3, r4, r3, r3
 801711e:	eb03 0a02 	add.w	sl, r3, r2
 8017122:	9b04      	ldr	r3, [sp, #16]
 8017124:	9a06      	ldr	r2, [sp, #24]
 8017126:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8017400 <__kernel_rem_pio2+0x320>
 801712a:	eb03 0802 	add.w	r8, r3, r2
 801712e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8017130:	1aa7      	subs	r7, r4, r2
 8017132:	ae20      	add	r6, sp, #128	; 0x80
 8017134:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017138:	2500      	movs	r5, #0
 801713a:	4545      	cmp	r5, r8
 801713c:	dd18      	ble.n	8017170 <__kernel_rem_pio2+0x90>
 801713e:	9b08      	ldr	r3, [sp, #32]
 8017140:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017144:	aa20      	add	r2, sp, #128	; 0x80
 8017146:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8017400 <__kernel_rem_pio2+0x320>
 801714a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801714e:	f1c3 0301 	rsb	r3, r3, #1
 8017152:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8017156:	9307      	str	r3, [sp, #28]
 8017158:	9b07      	ldr	r3, [sp, #28]
 801715a:	9a04      	ldr	r2, [sp, #16]
 801715c:	4443      	add	r3, r8
 801715e:	429a      	cmp	r2, r3
 8017160:	db2f      	blt.n	80171c2 <__kernel_rem_pio2+0xe2>
 8017162:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017166:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801716a:	462f      	mov	r7, r5
 801716c:	2600      	movs	r6, #0
 801716e:	e01b      	b.n	80171a8 <__kernel_rem_pio2+0xc8>
 8017170:	42ef      	cmn	r7, r5
 8017172:	d407      	bmi.n	8017184 <__kernel_rem_pio2+0xa4>
 8017174:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8017178:	f7e9 fa5c 	bl	8000634 <__aeabi_i2d>
 801717c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8017180:	3501      	adds	r5, #1
 8017182:	e7da      	b.n	801713a <__kernel_rem_pio2+0x5a>
 8017184:	ec51 0b18 	vmov	r0, r1, d8
 8017188:	e7f8      	b.n	801717c <__kernel_rem_pio2+0x9c>
 801718a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801718e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8017192:	f7e9 fab9 	bl	8000708 <__aeabi_dmul>
 8017196:	4602      	mov	r2, r0
 8017198:	460b      	mov	r3, r1
 801719a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801719e:	f7e9 f8fd 	bl	800039c <__adddf3>
 80171a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80171a6:	3601      	adds	r6, #1
 80171a8:	9b06      	ldr	r3, [sp, #24]
 80171aa:	429e      	cmp	r6, r3
 80171ac:	f1a7 0708 	sub.w	r7, r7, #8
 80171b0:	ddeb      	ble.n	801718a <__kernel_rem_pio2+0xaa>
 80171b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80171b6:	3508      	adds	r5, #8
 80171b8:	ecab 7b02 	vstmia	fp!, {d7}
 80171bc:	f108 0801 	add.w	r8, r8, #1
 80171c0:	e7ca      	b.n	8017158 <__kernel_rem_pio2+0x78>
 80171c2:	9b04      	ldr	r3, [sp, #16]
 80171c4:	aa0c      	add	r2, sp, #48	; 0x30
 80171c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80171ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80171cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80171ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80171d2:	9c04      	ldr	r4, [sp, #16]
 80171d4:	930a      	str	r3, [sp, #40]	; 0x28
 80171d6:	ab98      	add	r3, sp, #608	; 0x260
 80171d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80171dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80171e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80171e4:	f8cd b008 	str.w	fp, [sp, #8]
 80171e8:	4625      	mov	r5, r4
 80171ea:	2d00      	cmp	r5, #0
 80171ec:	dc78      	bgt.n	80172e0 <__kernel_rem_pio2+0x200>
 80171ee:	ec47 6b10 	vmov	d0, r6, r7
 80171f2:	4650      	mov	r0, sl
 80171f4:	f000 fb88 	bl	8017908 <scalbn>
 80171f8:	ec57 6b10 	vmov	r6, r7, d0
 80171fc:	2200      	movs	r2, #0
 80171fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8017202:	ee10 0a10 	vmov	r0, s0
 8017206:	4639      	mov	r1, r7
 8017208:	f7e9 fa7e 	bl	8000708 <__aeabi_dmul>
 801720c:	ec41 0b10 	vmov	d0, r0, r1
 8017210:	f7ff f93a 	bl	8016488 <floor>
 8017214:	4b7f      	ldr	r3, [pc, #508]	; (8017414 <__kernel_rem_pio2+0x334>)
 8017216:	ec51 0b10 	vmov	r0, r1, d0
 801721a:	2200      	movs	r2, #0
 801721c:	f7e9 fa74 	bl	8000708 <__aeabi_dmul>
 8017220:	4602      	mov	r2, r0
 8017222:	460b      	mov	r3, r1
 8017224:	4630      	mov	r0, r6
 8017226:	4639      	mov	r1, r7
 8017228:	f7e9 f8b6 	bl	8000398 <__aeabi_dsub>
 801722c:	460f      	mov	r7, r1
 801722e:	4606      	mov	r6, r0
 8017230:	f7e9 fd04 	bl	8000c3c <__aeabi_d2iz>
 8017234:	9007      	str	r0, [sp, #28]
 8017236:	f7e9 f9fd 	bl	8000634 <__aeabi_i2d>
 801723a:	4602      	mov	r2, r0
 801723c:	460b      	mov	r3, r1
 801723e:	4630      	mov	r0, r6
 8017240:	4639      	mov	r1, r7
 8017242:	f7e9 f8a9 	bl	8000398 <__aeabi_dsub>
 8017246:	f1ba 0f00 	cmp.w	sl, #0
 801724a:	4606      	mov	r6, r0
 801724c:	460f      	mov	r7, r1
 801724e:	dd70      	ble.n	8017332 <__kernel_rem_pio2+0x252>
 8017250:	1e62      	subs	r2, r4, #1
 8017252:	ab0c      	add	r3, sp, #48	; 0x30
 8017254:	9d07      	ldr	r5, [sp, #28]
 8017256:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801725a:	f1ca 0118 	rsb	r1, sl, #24
 801725e:	fa40 f301 	asr.w	r3, r0, r1
 8017262:	441d      	add	r5, r3
 8017264:	408b      	lsls	r3, r1
 8017266:	1ac0      	subs	r0, r0, r3
 8017268:	ab0c      	add	r3, sp, #48	; 0x30
 801726a:	9507      	str	r5, [sp, #28]
 801726c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8017270:	f1ca 0317 	rsb	r3, sl, #23
 8017274:	fa40 f303 	asr.w	r3, r0, r3
 8017278:	9302      	str	r3, [sp, #8]
 801727a:	9b02      	ldr	r3, [sp, #8]
 801727c:	2b00      	cmp	r3, #0
 801727e:	dd66      	ble.n	801734e <__kernel_rem_pio2+0x26e>
 8017280:	9b07      	ldr	r3, [sp, #28]
 8017282:	2200      	movs	r2, #0
 8017284:	3301      	adds	r3, #1
 8017286:	9307      	str	r3, [sp, #28]
 8017288:	4615      	mov	r5, r2
 801728a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801728e:	4294      	cmp	r4, r2
 8017290:	f300 8099 	bgt.w	80173c6 <__kernel_rem_pio2+0x2e6>
 8017294:	f1ba 0f00 	cmp.w	sl, #0
 8017298:	dd07      	ble.n	80172aa <__kernel_rem_pio2+0x1ca>
 801729a:	f1ba 0f01 	cmp.w	sl, #1
 801729e:	f000 80a5 	beq.w	80173ec <__kernel_rem_pio2+0x30c>
 80172a2:	f1ba 0f02 	cmp.w	sl, #2
 80172a6:	f000 80c1 	beq.w	801742c <__kernel_rem_pio2+0x34c>
 80172aa:	9b02      	ldr	r3, [sp, #8]
 80172ac:	2b02      	cmp	r3, #2
 80172ae:	d14e      	bne.n	801734e <__kernel_rem_pio2+0x26e>
 80172b0:	4632      	mov	r2, r6
 80172b2:	463b      	mov	r3, r7
 80172b4:	4958      	ldr	r1, [pc, #352]	; (8017418 <__kernel_rem_pio2+0x338>)
 80172b6:	2000      	movs	r0, #0
 80172b8:	f7e9 f86e 	bl	8000398 <__aeabi_dsub>
 80172bc:	4606      	mov	r6, r0
 80172be:	460f      	mov	r7, r1
 80172c0:	2d00      	cmp	r5, #0
 80172c2:	d044      	beq.n	801734e <__kernel_rem_pio2+0x26e>
 80172c4:	4650      	mov	r0, sl
 80172c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8017408 <__kernel_rem_pio2+0x328>
 80172ca:	f000 fb1d 	bl	8017908 <scalbn>
 80172ce:	4630      	mov	r0, r6
 80172d0:	4639      	mov	r1, r7
 80172d2:	ec53 2b10 	vmov	r2, r3, d0
 80172d6:	f7e9 f85f 	bl	8000398 <__aeabi_dsub>
 80172da:	4606      	mov	r6, r0
 80172dc:	460f      	mov	r7, r1
 80172de:	e036      	b.n	801734e <__kernel_rem_pio2+0x26e>
 80172e0:	4b4e      	ldr	r3, [pc, #312]	; (801741c <__kernel_rem_pio2+0x33c>)
 80172e2:	2200      	movs	r2, #0
 80172e4:	4630      	mov	r0, r6
 80172e6:	4639      	mov	r1, r7
 80172e8:	f7e9 fa0e 	bl	8000708 <__aeabi_dmul>
 80172ec:	f7e9 fca6 	bl	8000c3c <__aeabi_d2iz>
 80172f0:	f7e9 f9a0 	bl	8000634 <__aeabi_i2d>
 80172f4:	4b4a      	ldr	r3, [pc, #296]	; (8017420 <__kernel_rem_pio2+0x340>)
 80172f6:	2200      	movs	r2, #0
 80172f8:	4680      	mov	r8, r0
 80172fa:	4689      	mov	r9, r1
 80172fc:	f7e9 fa04 	bl	8000708 <__aeabi_dmul>
 8017300:	4602      	mov	r2, r0
 8017302:	460b      	mov	r3, r1
 8017304:	4630      	mov	r0, r6
 8017306:	4639      	mov	r1, r7
 8017308:	f7e9 f846 	bl	8000398 <__aeabi_dsub>
 801730c:	f7e9 fc96 	bl	8000c3c <__aeabi_d2iz>
 8017310:	9b02      	ldr	r3, [sp, #8]
 8017312:	f843 0b04 	str.w	r0, [r3], #4
 8017316:	3d01      	subs	r5, #1
 8017318:	9302      	str	r3, [sp, #8]
 801731a:	ab70      	add	r3, sp, #448	; 0x1c0
 801731c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017324:	4640      	mov	r0, r8
 8017326:	4649      	mov	r1, r9
 8017328:	f7e9 f838 	bl	800039c <__adddf3>
 801732c:	4606      	mov	r6, r0
 801732e:	460f      	mov	r7, r1
 8017330:	e75b      	b.n	80171ea <__kernel_rem_pio2+0x10a>
 8017332:	d105      	bne.n	8017340 <__kernel_rem_pio2+0x260>
 8017334:	1e63      	subs	r3, r4, #1
 8017336:	aa0c      	add	r2, sp, #48	; 0x30
 8017338:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801733c:	15c3      	asrs	r3, r0, #23
 801733e:	e79b      	b.n	8017278 <__kernel_rem_pio2+0x198>
 8017340:	4b38      	ldr	r3, [pc, #224]	; (8017424 <__kernel_rem_pio2+0x344>)
 8017342:	2200      	movs	r2, #0
 8017344:	f7e9 fc66 	bl	8000c14 <__aeabi_dcmpge>
 8017348:	2800      	cmp	r0, #0
 801734a:	d139      	bne.n	80173c0 <__kernel_rem_pio2+0x2e0>
 801734c:	9002      	str	r0, [sp, #8]
 801734e:	2200      	movs	r2, #0
 8017350:	2300      	movs	r3, #0
 8017352:	4630      	mov	r0, r6
 8017354:	4639      	mov	r1, r7
 8017356:	f7e9 fc3f 	bl	8000bd8 <__aeabi_dcmpeq>
 801735a:	2800      	cmp	r0, #0
 801735c:	f000 80b4 	beq.w	80174c8 <__kernel_rem_pio2+0x3e8>
 8017360:	f104 3bff 	add.w	fp, r4, #4294967295
 8017364:	465b      	mov	r3, fp
 8017366:	2200      	movs	r2, #0
 8017368:	9904      	ldr	r1, [sp, #16]
 801736a:	428b      	cmp	r3, r1
 801736c:	da65      	bge.n	801743a <__kernel_rem_pio2+0x35a>
 801736e:	2a00      	cmp	r2, #0
 8017370:	d07b      	beq.n	801746a <__kernel_rem_pio2+0x38a>
 8017372:	ab0c      	add	r3, sp, #48	; 0x30
 8017374:	f1aa 0a18 	sub.w	sl, sl, #24
 8017378:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801737c:	2b00      	cmp	r3, #0
 801737e:	f000 80a0 	beq.w	80174c2 <__kernel_rem_pio2+0x3e2>
 8017382:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8017408 <__kernel_rem_pio2+0x328>
 8017386:	4650      	mov	r0, sl
 8017388:	f000 fabe 	bl	8017908 <scalbn>
 801738c:	4f23      	ldr	r7, [pc, #140]	; (801741c <__kernel_rem_pio2+0x33c>)
 801738e:	ec55 4b10 	vmov	r4, r5, d0
 8017392:	46d8      	mov	r8, fp
 8017394:	2600      	movs	r6, #0
 8017396:	f1b8 0f00 	cmp.w	r8, #0
 801739a:	f280 80cf 	bge.w	801753c <__kernel_rem_pio2+0x45c>
 801739e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8017400 <__kernel_rem_pio2+0x320>
 80173a2:	465f      	mov	r7, fp
 80173a4:	f04f 0800 	mov.w	r8, #0
 80173a8:	2f00      	cmp	r7, #0
 80173aa:	f2c0 80fd 	blt.w	80175a8 <__kernel_rem_pio2+0x4c8>
 80173ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80173b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8017428 <__kernel_rem_pio2+0x348>
 80173b4:	ec55 4b18 	vmov	r4, r5, d8
 80173b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80173bc:	2600      	movs	r6, #0
 80173be:	e0e5      	b.n	801758c <__kernel_rem_pio2+0x4ac>
 80173c0:	2302      	movs	r3, #2
 80173c2:	9302      	str	r3, [sp, #8]
 80173c4:	e75c      	b.n	8017280 <__kernel_rem_pio2+0x1a0>
 80173c6:	f8db 3000 	ldr.w	r3, [fp]
 80173ca:	b955      	cbnz	r5, 80173e2 <__kernel_rem_pio2+0x302>
 80173cc:	b123      	cbz	r3, 80173d8 <__kernel_rem_pio2+0x2f8>
 80173ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80173d2:	f8cb 3000 	str.w	r3, [fp]
 80173d6:	2301      	movs	r3, #1
 80173d8:	3201      	adds	r2, #1
 80173da:	f10b 0b04 	add.w	fp, fp, #4
 80173de:	461d      	mov	r5, r3
 80173e0:	e755      	b.n	801728e <__kernel_rem_pio2+0x1ae>
 80173e2:	1acb      	subs	r3, r1, r3
 80173e4:	f8cb 3000 	str.w	r3, [fp]
 80173e8:	462b      	mov	r3, r5
 80173ea:	e7f5      	b.n	80173d8 <__kernel_rem_pio2+0x2f8>
 80173ec:	1e62      	subs	r2, r4, #1
 80173ee:	ab0c      	add	r3, sp, #48	; 0x30
 80173f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80173f8:	a90c      	add	r1, sp, #48	; 0x30
 80173fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80173fe:	e754      	b.n	80172aa <__kernel_rem_pio2+0x1ca>
	...
 801740c:	3ff00000 	.word	0x3ff00000
 8017410:	08037648 	.word	0x08037648
 8017414:	40200000 	.word	0x40200000
 8017418:	3ff00000 	.word	0x3ff00000
 801741c:	3e700000 	.word	0x3e700000
 8017420:	41700000 	.word	0x41700000
 8017424:	3fe00000 	.word	0x3fe00000
 8017428:	08037608 	.word	0x08037608
 801742c:	1e62      	subs	r2, r4, #1
 801742e:	ab0c      	add	r3, sp, #48	; 0x30
 8017430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017434:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017438:	e7de      	b.n	80173f8 <__kernel_rem_pio2+0x318>
 801743a:	a90c      	add	r1, sp, #48	; 0x30
 801743c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017440:	3b01      	subs	r3, #1
 8017442:	430a      	orrs	r2, r1
 8017444:	e790      	b.n	8017368 <__kernel_rem_pio2+0x288>
 8017446:	3301      	adds	r3, #1
 8017448:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801744c:	2900      	cmp	r1, #0
 801744e:	d0fa      	beq.n	8017446 <__kernel_rem_pio2+0x366>
 8017450:	9a08      	ldr	r2, [sp, #32]
 8017452:	18e3      	adds	r3, r4, r3
 8017454:	18a6      	adds	r6, r4, r2
 8017456:	aa20      	add	r2, sp, #128	; 0x80
 8017458:	1c65      	adds	r5, r4, #1
 801745a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801745e:	9302      	str	r3, [sp, #8]
 8017460:	9b02      	ldr	r3, [sp, #8]
 8017462:	42ab      	cmp	r3, r5
 8017464:	da04      	bge.n	8017470 <__kernel_rem_pio2+0x390>
 8017466:	461c      	mov	r4, r3
 8017468:	e6b5      	b.n	80171d6 <__kernel_rem_pio2+0xf6>
 801746a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801746c:	2301      	movs	r3, #1
 801746e:	e7eb      	b.n	8017448 <__kernel_rem_pio2+0x368>
 8017470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017476:	f7e9 f8dd 	bl	8000634 <__aeabi_i2d>
 801747a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801747e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017480:	46b3      	mov	fp, r6
 8017482:	461c      	mov	r4, r3
 8017484:	2700      	movs	r7, #0
 8017486:	f04f 0800 	mov.w	r8, #0
 801748a:	f04f 0900 	mov.w	r9, #0
 801748e:	9b06      	ldr	r3, [sp, #24]
 8017490:	429f      	cmp	r7, r3
 8017492:	dd06      	ble.n	80174a2 <__kernel_rem_pio2+0x3c2>
 8017494:	ab70      	add	r3, sp, #448	; 0x1c0
 8017496:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801749a:	e9c3 8900 	strd	r8, r9, [r3]
 801749e:	3501      	adds	r5, #1
 80174a0:	e7de      	b.n	8017460 <__kernel_rem_pio2+0x380>
 80174a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80174a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80174aa:	f7e9 f92d 	bl	8000708 <__aeabi_dmul>
 80174ae:	4602      	mov	r2, r0
 80174b0:	460b      	mov	r3, r1
 80174b2:	4640      	mov	r0, r8
 80174b4:	4649      	mov	r1, r9
 80174b6:	f7e8 ff71 	bl	800039c <__adddf3>
 80174ba:	3701      	adds	r7, #1
 80174bc:	4680      	mov	r8, r0
 80174be:	4689      	mov	r9, r1
 80174c0:	e7e5      	b.n	801748e <__kernel_rem_pio2+0x3ae>
 80174c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80174c6:	e754      	b.n	8017372 <__kernel_rem_pio2+0x292>
 80174c8:	ec47 6b10 	vmov	d0, r6, r7
 80174cc:	f1ca 0000 	rsb	r0, sl, #0
 80174d0:	f000 fa1a 	bl	8017908 <scalbn>
 80174d4:	ec57 6b10 	vmov	r6, r7, d0
 80174d8:	4b9f      	ldr	r3, [pc, #636]	; (8017758 <__kernel_rem_pio2+0x678>)
 80174da:	ee10 0a10 	vmov	r0, s0
 80174de:	2200      	movs	r2, #0
 80174e0:	4639      	mov	r1, r7
 80174e2:	f7e9 fb97 	bl	8000c14 <__aeabi_dcmpge>
 80174e6:	b300      	cbz	r0, 801752a <__kernel_rem_pio2+0x44a>
 80174e8:	4b9c      	ldr	r3, [pc, #624]	; (801775c <__kernel_rem_pio2+0x67c>)
 80174ea:	2200      	movs	r2, #0
 80174ec:	4630      	mov	r0, r6
 80174ee:	4639      	mov	r1, r7
 80174f0:	f7e9 f90a 	bl	8000708 <__aeabi_dmul>
 80174f4:	f7e9 fba2 	bl	8000c3c <__aeabi_d2iz>
 80174f8:	4605      	mov	r5, r0
 80174fa:	f7e9 f89b 	bl	8000634 <__aeabi_i2d>
 80174fe:	4b96      	ldr	r3, [pc, #600]	; (8017758 <__kernel_rem_pio2+0x678>)
 8017500:	2200      	movs	r2, #0
 8017502:	f7e9 f901 	bl	8000708 <__aeabi_dmul>
 8017506:	460b      	mov	r3, r1
 8017508:	4602      	mov	r2, r0
 801750a:	4639      	mov	r1, r7
 801750c:	4630      	mov	r0, r6
 801750e:	f7e8 ff43 	bl	8000398 <__aeabi_dsub>
 8017512:	f7e9 fb93 	bl	8000c3c <__aeabi_d2iz>
 8017516:	f104 0b01 	add.w	fp, r4, #1
 801751a:	ab0c      	add	r3, sp, #48	; 0x30
 801751c:	f10a 0a18 	add.w	sl, sl, #24
 8017520:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017524:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8017528:	e72b      	b.n	8017382 <__kernel_rem_pio2+0x2a2>
 801752a:	4630      	mov	r0, r6
 801752c:	4639      	mov	r1, r7
 801752e:	f7e9 fb85 	bl	8000c3c <__aeabi_d2iz>
 8017532:	ab0c      	add	r3, sp, #48	; 0x30
 8017534:	46a3      	mov	fp, r4
 8017536:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801753a:	e722      	b.n	8017382 <__kernel_rem_pio2+0x2a2>
 801753c:	ab70      	add	r3, sp, #448	; 0x1c0
 801753e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8017542:	ab0c      	add	r3, sp, #48	; 0x30
 8017544:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017548:	f7e9 f874 	bl	8000634 <__aeabi_i2d>
 801754c:	4622      	mov	r2, r4
 801754e:	462b      	mov	r3, r5
 8017550:	f7e9 f8da 	bl	8000708 <__aeabi_dmul>
 8017554:	4632      	mov	r2, r6
 8017556:	e9c9 0100 	strd	r0, r1, [r9]
 801755a:	463b      	mov	r3, r7
 801755c:	4620      	mov	r0, r4
 801755e:	4629      	mov	r1, r5
 8017560:	f7e9 f8d2 	bl	8000708 <__aeabi_dmul>
 8017564:	f108 38ff 	add.w	r8, r8, #4294967295
 8017568:	4604      	mov	r4, r0
 801756a:	460d      	mov	r5, r1
 801756c:	e713      	b.n	8017396 <__kernel_rem_pio2+0x2b6>
 801756e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8017572:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8017576:	f7e9 f8c7 	bl	8000708 <__aeabi_dmul>
 801757a:	4602      	mov	r2, r0
 801757c:	460b      	mov	r3, r1
 801757e:	4620      	mov	r0, r4
 8017580:	4629      	mov	r1, r5
 8017582:	f7e8 ff0b 	bl	800039c <__adddf3>
 8017586:	3601      	adds	r6, #1
 8017588:	4604      	mov	r4, r0
 801758a:	460d      	mov	r5, r1
 801758c:	9b04      	ldr	r3, [sp, #16]
 801758e:	429e      	cmp	r6, r3
 8017590:	dc01      	bgt.n	8017596 <__kernel_rem_pio2+0x4b6>
 8017592:	45b0      	cmp	r8, r6
 8017594:	daeb      	bge.n	801756e <__kernel_rem_pio2+0x48e>
 8017596:	ab48      	add	r3, sp, #288	; 0x120
 8017598:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801759c:	e9c3 4500 	strd	r4, r5, [r3]
 80175a0:	3f01      	subs	r7, #1
 80175a2:	f108 0801 	add.w	r8, r8, #1
 80175a6:	e6ff      	b.n	80173a8 <__kernel_rem_pio2+0x2c8>
 80175a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80175aa:	2b02      	cmp	r3, #2
 80175ac:	dc0b      	bgt.n	80175c6 <__kernel_rem_pio2+0x4e6>
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	dc6e      	bgt.n	8017690 <__kernel_rem_pio2+0x5b0>
 80175b2:	d045      	beq.n	8017640 <__kernel_rem_pio2+0x560>
 80175b4:	9b07      	ldr	r3, [sp, #28]
 80175b6:	f003 0007 	and.w	r0, r3, #7
 80175ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80175be:	ecbd 8b02 	vpop	{d8}
 80175c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80175c8:	2b03      	cmp	r3, #3
 80175ca:	d1f3      	bne.n	80175b4 <__kernel_rem_pio2+0x4d4>
 80175cc:	ab48      	add	r3, sp, #288	; 0x120
 80175ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80175d2:	46d0      	mov	r8, sl
 80175d4:	46d9      	mov	r9, fp
 80175d6:	f1b9 0f00 	cmp.w	r9, #0
 80175da:	f1a8 0808 	sub.w	r8, r8, #8
 80175de:	dc64      	bgt.n	80176aa <__kernel_rem_pio2+0x5ca>
 80175e0:	465c      	mov	r4, fp
 80175e2:	2c01      	cmp	r4, #1
 80175e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80175e8:	dc7e      	bgt.n	80176e8 <__kernel_rem_pio2+0x608>
 80175ea:	2000      	movs	r0, #0
 80175ec:	2100      	movs	r1, #0
 80175ee:	f1bb 0f01 	cmp.w	fp, #1
 80175f2:	f300 8097 	bgt.w	8017724 <__kernel_rem_pio2+0x644>
 80175f6:	9b02      	ldr	r3, [sp, #8]
 80175f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80175fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8017600:	2b00      	cmp	r3, #0
 8017602:	f040 8099 	bne.w	8017738 <__kernel_rem_pio2+0x658>
 8017606:	9b01      	ldr	r3, [sp, #4]
 8017608:	e9c3 5600 	strd	r5, r6, [r3]
 801760c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8017610:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017614:	e7ce      	b.n	80175b4 <__kernel_rem_pio2+0x4d4>
 8017616:	ab48      	add	r3, sp, #288	; 0x120
 8017618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801761c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017620:	f7e8 febc 	bl	800039c <__adddf3>
 8017624:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017628:	f1bb 0f00 	cmp.w	fp, #0
 801762c:	daf3      	bge.n	8017616 <__kernel_rem_pio2+0x536>
 801762e:	9b02      	ldr	r3, [sp, #8]
 8017630:	b113      	cbz	r3, 8017638 <__kernel_rem_pio2+0x558>
 8017632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017636:	4619      	mov	r1, r3
 8017638:	9b01      	ldr	r3, [sp, #4]
 801763a:	e9c3 0100 	strd	r0, r1, [r3]
 801763e:	e7b9      	b.n	80175b4 <__kernel_rem_pio2+0x4d4>
 8017640:	2000      	movs	r0, #0
 8017642:	2100      	movs	r1, #0
 8017644:	e7f0      	b.n	8017628 <__kernel_rem_pio2+0x548>
 8017646:	ab48      	add	r3, sp, #288	; 0x120
 8017648:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017650:	f7e8 fea4 	bl	800039c <__adddf3>
 8017654:	3c01      	subs	r4, #1
 8017656:	2c00      	cmp	r4, #0
 8017658:	daf5      	bge.n	8017646 <__kernel_rem_pio2+0x566>
 801765a:	9b02      	ldr	r3, [sp, #8]
 801765c:	b1e3      	cbz	r3, 8017698 <__kernel_rem_pio2+0x5b8>
 801765e:	4602      	mov	r2, r0
 8017660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017664:	9c01      	ldr	r4, [sp, #4]
 8017666:	e9c4 2300 	strd	r2, r3, [r4]
 801766a:	4602      	mov	r2, r0
 801766c:	460b      	mov	r3, r1
 801766e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8017672:	f7e8 fe91 	bl	8000398 <__aeabi_dsub>
 8017676:	ad4a      	add	r5, sp, #296	; 0x128
 8017678:	2401      	movs	r4, #1
 801767a:	45a3      	cmp	fp, r4
 801767c:	da0f      	bge.n	801769e <__kernel_rem_pio2+0x5be>
 801767e:	9b02      	ldr	r3, [sp, #8]
 8017680:	b113      	cbz	r3, 8017688 <__kernel_rem_pio2+0x5a8>
 8017682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017686:	4619      	mov	r1, r3
 8017688:	9b01      	ldr	r3, [sp, #4]
 801768a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801768e:	e791      	b.n	80175b4 <__kernel_rem_pio2+0x4d4>
 8017690:	465c      	mov	r4, fp
 8017692:	2000      	movs	r0, #0
 8017694:	2100      	movs	r1, #0
 8017696:	e7de      	b.n	8017656 <__kernel_rem_pio2+0x576>
 8017698:	4602      	mov	r2, r0
 801769a:	460b      	mov	r3, r1
 801769c:	e7e2      	b.n	8017664 <__kernel_rem_pio2+0x584>
 801769e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80176a2:	f7e8 fe7b 	bl	800039c <__adddf3>
 80176a6:	3401      	adds	r4, #1
 80176a8:	e7e7      	b.n	801767a <__kernel_rem_pio2+0x59a>
 80176aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80176ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80176b2:	4620      	mov	r0, r4
 80176b4:	4632      	mov	r2, r6
 80176b6:	463b      	mov	r3, r7
 80176b8:	4629      	mov	r1, r5
 80176ba:	f7e8 fe6f 	bl	800039c <__adddf3>
 80176be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80176c2:	4602      	mov	r2, r0
 80176c4:	460b      	mov	r3, r1
 80176c6:	4620      	mov	r0, r4
 80176c8:	4629      	mov	r1, r5
 80176ca:	f7e8 fe65 	bl	8000398 <__aeabi_dsub>
 80176ce:	4632      	mov	r2, r6
 80176d0:	463b      	mov	r3, r7
 80176d2:	f7e8 fe63 	bl	800039c <__adddf3>
 80176d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80176da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80176de:	ed88 7b00 	vstr	d7, [r8]
 80176e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80176e6:	e776      	b.n	80175d6 <__kernel_rem_pio2+0x4f6>
 80176e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80176ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80176f0:	4640      	mov	r0, r8
 80176f2:	4632      	mov	r2, r6
 80176f4:	463b      	mov	r3, r7
 80176f6:	4649      	mov	r1, r9
 80176f8:	f7e8 fe50 	bl	800039c <__adddf3>
 80176fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017700:	4602      	mov	r2, r0
 8017702:	460b      	mov	r3, r1
 8017704:	4640      	mov	r0, r8
 8017706:	4649      	mov	r1, r9
 8017708:	f7e8 fe46 	bl	8000398 <__aeabi_dsub>
 801770c:	4632      	mov	r2, r6
 801770e:	463b      	mov	r3, r7
 8017710:	f7e8 fe44 	bl	800039c <__adddf3>
 8017714:	ed9d 7b04 	vldr	d7, [sp, #16]
 8017718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801771c:	ed8a 7b00 	vstr	d7, [sl]
 8017720:	3c01      	subs	r4, #1
 8017722:	e75e      	b.n	80175e2 <__kernel_rem_pio2+0x502>
 8017724:	ab48      	add	r3, sp, #288	; 0x120
 8017726:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801772e:	f7e8 fe35 	bl	800039c <__adddf3>
 8017732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017736:	e75a      	b.n	80175ee <__kernel_rem_pio2+0x50e>
 8017738:	9b01      	ldr	r3, [sp, #4]
 801773a:	9a01      	ldr	r2, [sp, #4]
 801773c:	601d      	str	r5, [r3, #0]
 801773e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8017742:	605c      	str	r4, [r3, #4]
 8017744:	609f      	str	r7, [r3, #8]
 8017746:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801774a:	60d3      	str	r3, [r2, #12]
 801774c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017750:	6110      	str	r0, [r2, #16]
 8017752:	6153      	str	r3, [r2, #20]
 8017754:	e72e      	b.n	80175b4 <__kernel_rem_pio2+0x4d4>
 8017756:	bf00      	nop
 8017758:	41700000 	.word	0x41700000
 801775c:	3e700000 	.word	0x3e700000

08017760 <__kernel_sin>:
 8017760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017764:	ed2d 8b04 	vpush	{d8-d9}
 8017768:	eeb0 8a41 	vmov.f32	s16, s2
 801776c:	eef0 8a61 	vmov.f32	s17, s3
 8017770:	ec55 4b10 	vmov	r4, r5, d0
 8017774:	b083      	sub	sp, #12
 8017776:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801777a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801777e:	9001      	str	r0, [sp, #4]
 8017780:	da06      	bge.n	8017790 <__kernel_sin+0x30>
 8017782:	ee10 0a10 	vmov	r0, s0
 8017786:	4629      	mov	r1, r5
 8017788:	f7e9 fa58 	bl	8000c3c <__aeabi_d2iz>
 801778c:	2800      	cmp	r0, #0
 801778e:	d051      	beq.n	8017834 <__kernel_sin+0xd4>
 8017790:	4622      	mov	r2, r4
 8017792:	462b      	mov	r3, r5
 8017794:	4620      	mov	r0, r4
 8017796:	4629      	mov	r1, r5
 8017798:	f7e8 ffb6 	bl	8000708 <__aeabi_dmul>
 801779c:	4682      	mov	sl, r0
 801779e:	468b      	mov	fp, r1
 80177a0:	4602      	mov	r2, r0
 80177a2:	460b      	mov	r3, r1
 80177a4:	4620      	mov	r0, r4
 80177a6:	4629      	mov	r1, r5
 80177a8:	f7e8 ffae 	bl	8000708 <__aeabi_dmul>
 80177ac:	a341      	add	r3, pc, #260	; (adr r3, 80178b4 <__kernel_sin+0x154>)
 80177ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177b2:	4680      	mov	r8, r0
 80177b4:	4689      	mov	r9, r1
 80177b6:	4650      	mov	r0, sl
 80177b8:	4659      	mov	r1, fp
 80177ba:	f7e8 ffa5 	bl	8000708 <__aeabi_dmul>
 80177be:	a33f      	add	r3, pc, #252	; (adr r3, 80178bc <__kernel_sin+0x15c>)
 80177c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c4:	f7e8 fde8 	bl	8000398 <__aeabi_dsub>
 80177c8:	4652      	mov	r2, sl
 80177ca:	465b      	mov	r3, fp
 80177cc:	f7e8 ff9c 	bl	8000708 <__aeabi_dmul>
 80177d0:	a33c      	add	r3, pc, #240	; (adr r3, 80178c4 <__kernel_sin+0x164>)
 80177d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d6:	f7e8 fde1 	bl	800039c <__adddf3>
 80177da:	4652      	mov	r2, sl
 80177dc:	465b      	mov	r3, fp
 80177de:	f7e8 ff93 	bl	8000708 <__aeabi_dmul>
 80177e2:	a33a      	add	r3, pc, #232	; (adr r3, 80178cc <__kernel_sin+0x16c>)
 80177e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177e8:	f7e8 fdd6 	bl	8000398 <__aeabi_dsub>
 80177ec:	4652      	mov	r2, sl
 80177ee:	465b      	mov	r3, fp
 80177f0:	f7e8 ff8a 	bl	8000708 <__aeabi_dmul>
 80177f4:	a337      	add	r3, pc, #220	; (adr r3, 80178d4 <__kernel_sin+0x174>)
 80177f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177fa:	f7e8 fdcf 	bl	800039c <__adddf3>
 80177fe:	9b01      	ldr	r3, [sp, #4]
 8017800:	4606      	mov	r6, r0
 8017802:	460f      	mov	r7, r1
 8017804:	b9eb      	cbnz	r3, 8017842 <__kernel_sin+0xe2>
 8017806:	4602      	mov	r2, r0
 8017808:	460b      	mov	r3, r1
 801780a:	4650      	mov	r0, sl
 801780c:	4659      	mov	r1, fp
 801780e:	f7e8 ff7b 	bl	8000708 <__aeabi_dmul>
 8017812:	a325      	add	r3, pc, #148	; (adr r3, 80178a8 <__kernel_sin+0x148>)
 8017814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017818:	f7e8 fdbe 	bl	8000398 <__aeabi_dsub>
 801781c:	4642      	mov	r2, r8
 801781e:	464b      	mov	r3, r9
 8017820:	f7e8 ff72 	bl	8000708 <__aeabi_dmul>
 8017824:	4602      	mov	r2, r0
 8017826:	460b      	mov	r3, r1
 8017828:	4620      	mov	r0, r4
 801782a:	4629      	mov	r1, r5
 801782c:	f7e8 fdb6 	bl	800039c <__adddf3>
 8017830:	4604      	mov	r4, r0
 8017832:	460d      	mov	r5, r1
 8017834:	ec45 4b10 	vmov	d0, r4, r5
 8017838:	b003      	add	sp, #12
 801783a:	ecbd 8b04 	vpop	{d8-d9}
 801783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017842:	4b1b      	ldr	r3, [pc, #108]	; (80178b0 <__kernel_sin+0x150>)
 8017844:	ec51 0b18 	vmov	r0, r1, d8
 8017848:	2200      	movs	r2, #0
 801784a:	f7e8 ff5d 	bl	8000708 <__aeabi_dmul>
 801784e:	4632      	mov	r2, r6
 8017850:	ec41 0b19 	vmov	d9, r0, r1
 8017854:	463b      	mov	r3, r7
 8017856:	4640      	mov	r0, r8
 8017858:	4649      	mov	r1, r9
 801785a:	f7e8 ff55 	bl	8000708 <__aeabi_dmul>
 801785e:	4602      	mov	r2, r0
 8017860:	460b      	mov	r3, r1
 8017862:	ec51 0b19 	vmov	r0, r1, d9
 8017866:	f7e8 fd97 	bl	8000398 <__aeabi_dsub>
 801786a:	4652      	mov	r2, sl
 801786c:	465b      	mov	r3, fp
 801786e:	f7e8 ff4b 	bl	8000708 <__aeabi_dmul>
 8017872:	ec53 2b18 	vmov	r2, r3, d8
 8017876:	f7e8 fd8f 	bl	8000398 <__aeabi_dsub>
 801787a:	a30b      	add	r3, pc, #44	; (adr r3, 80178a8 <__kernel_sin+0x148>)
 801787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017880:	4606      	mov	r6, r0
 8017882:	460f      	mov	r7, r1
 8017884:	4640      	mov	r0, r8
 8017886:	4649      	mov	r1, r9
 8017888:	f7e8 ff3e 	bl	8000708 <__aeabi_dmul>
 801788c:	4602      	mov	r2, r0
 801788e:	460b      	mov	r3, r1
 8017890:	4630      	mov	r0, r6
 8017892:	4639      	mov	r1, r7
 8017894:	f7e8 fd82 	bl	800039c <__adddf3>
 8017898:	4602      	mov	r2, r0
 801789a:	460b      	mov	r3, r1
 801789c:	4620      	mov	r0, r4
 801789e:	4629      	mov	r1, r5
 80178a0:	f7e8 fd7a 	bl	8000398 <__aeabi_dsub>
 80178a4:	e7c4      	b.n	8017830 <__kernel_sin+0xd0>
 80178a6:	bf00      	nop
 80178a8:	55555549 	.word	0x55555549
 80178ac:	3fc55555 	.word	0x3fc55555
 80178b0:	3fe00000 	.word	0x3fe00000
 80178b4:	5acfd57c 	.word	0x5acfd57c
 80178b8:	3de5d93a 	.word	0x3de5d93a
 80178bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80178c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80178c4:	57b1fe7d 	.word	0x57b1fe7d
 80178c8:	3ec71de3 	.word	0x3ec71de3
 80178cc:	19c161d5 	.word	0x19c161d5
 80178d0:	3f2a01a0 	.word	0x3f2a01a0
 80178d4:	1110f8a6 	.word	0x1110f8a6
 80178d8:	3f811111 	.word	0x3f811111

080178dc <fabs>:
 80178dc:	ec51 0b10 	vmov	r0, r1, d0
 80178e0:	ee10 2a10 	vmov	r2, s0
 80178e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80178e8:	ec43 2b10 	vmov	d0, r2, r3
 80178ec:	4770      	bx	lr

080178ee <finite>:
 80178ee:	b082      	sub	sp, #8
 80178f0:	ed8d 0b00 	vstr	d0, [sp]
 80178f4:	9801      	ldr	r0, [sp, #4]
 80178f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80178fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80178fe:	0fc0      	lsrs	r0, r0, #31
 8017900:	b002      	add	sp, #8
 8017902:	4770      	bx	lr
 8017904:	0000      	movs	r0, r0
	...

08017908 <scalbn>:
 8017908:	b570      	push	{r4, r5, r6, lr}
 801790a:	ec55 4b10 	vmov	r4, r5, d0
 801790e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017912:	4606      	mov	r6, r0
 8017914:	462b      	mov	r3, r5
 8017916:	b99a      	cbnz	r2, 8017940 <scalbn+0x38>
 8017918:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801791c:	4323      	orrs	r3, r4
 801791e:	d036      	beq.n	801798e <scalbn+0x86>
 8017920:	4b39      	ldr	r3, [pc, #228]	; (8017a08 <scalbn+0x100>)
 8017922:	4629      	mov	r1, r5
 8017924:	ee10 0a10 	vmov	r0, s0
 8017928:	2200      	movs	r2, #0
 801792a:	f7e8 feed 	bl	8000708 <__aeabi_dmul>
 801792e:	4b37      	ldr	r3, [pc, #220]	; (8017a0c <scalbn+0x104>)
 8017930:	429e      	cmp	r6, r3
 8017932:	4604      	mov	r4, r0
 8017934:	460d      	mov	r5, r1
 8017936:	da10      	bge.n	801795a <scalbn+0x52>
 8017938:	a32b      	add	r3, pc, #172	; (adr r3, 80179e8 <scalbn+0xe0>)
 801793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793e:	e03a      	b.n	80179b6 <scalbn+0xae>
 8017940:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017944:	428a      	cmp	r2, r1
 8017946:	d10c      	bne.n	8017962 <scalbn+0x5a>
 8017948:	ee10 2a10 	vmov	r2, s0
 801794c:	4620      	mov	r0, r4
 801794e:	4629      	mov	r1, r5
 8017950:	f7e8 fd24 	bl	800039c <__adddf3>
 8017954:	4604      	mov	r4, r0
 8017956:	460d      	mov	r5, r1
 8017958:	e019      	b.n	801798e <scalbn+0x86>
 801795a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801795e:	460b      	mov	r3, r1
 8017960:	3a36      	subs	r2, #54	; 0x36
 8017962:	4432      	add	r2, r6
 8017964:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017968:	428a      	cmp	r2, r1
 801796a:	dd08      	ble.n	801797e <scalbn+0x76>
 801796c:	2d00      	cmp	r5, #0
 801796e:	a120      	add	r1, pc, #128	; (adr r1, 80179f0 <scalbn+0xe8>)
 8017970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017974:	da1c      	bge.n	80179b0 <scalbn+0xa8>
 8017976:	a120      	add	r1, pc, #128	; (adr r1, 80179f8 <scalbn+0xf0>)
 8017978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801797c:	e018      	b.n	80179b0 <scalbn+0xa8>
 801797e:	2a00      	cmp	r2, #0
 8017980:	dd08      	ble.n	8017994 <scalbn+0x8c>
 8017982:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017986:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801798a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801798e:	ec45 4b10 	vmov	d0, r4, r5
 8017992:	bd70      	pop	{r4, r5, r6, pc}
 8017994:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017998:	da19      	bge.n	80179ce <scalbn+0xc6>
 801799a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801799e:	429e      	cmp	r6, r3
 80179a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80179a4:	dd0a      	ble.n	80179bc <scalbn+0xb4>
 80179a6:	a112      	add	r1, pc, #72	; (adr r1, 80179f0 <scalbn+0xe8>)
 80179a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d1e2      	bne.n	8017976 <scalbn+0x6e>
 80179b0:	a30f      	add	r3, pc, #60	; (adr r3, 80179f0 <scalbn+0xe8>)
 80179b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179b6:	f7e8 fea7 	bl	8000708 <__aeabi_dmul>
 80179ba:	e7cb      	b.n	8017954 <scalbn+0x4c>
 80179bc:	a10a      	add	r1, pc, #40	; (adr r1, 80179e8 <scalbn+0xe0>)
 80179be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d0b8      	beq.n	8017938 <scalbn+0x30>
 80179c6:	a10e      	add	r1, pc, #56	; (adr r1, 8017a00 <scalbn+0xf8>)
 80179c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179cc:	e7b4      	b.n	8017938 <scalbn+0x30>
 80179ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80179d2:	3236      	adds	r2, #54	; 0x36
 80179d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80179d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80179dc:	4620      	mov	r0, r4
 80179de:	4b0c      	ldr	r3, [pc, #48]	; (8017a10 <scalbn+0x108>)
 80179e0:	2200      	movs	r2, #0
 80179e2:	e7e8      	b.n	80179b6 <scalbn+0xae>
 80179e4:	f3af 8000 	nop.w
 80179e8:	c2f8f359 	.word	0xc2f8f359
 80179ec:	01a56e1f 	.word	0x01a56e1f
 80179f0:	8800759c 	.word	0x8800759c
 80179f4:	7e37e43c 	.word	0x7e37e43c
 80179f8:	8800759c 	.word	0x8800759c
 80179fc:	fe37e43c 	.word	0xfe37e43c
 8017a00:	c2f8f359 	.word	0xc2f8f359
 8017a04:	81a56e1f 	.word	0x81a56e1f
 8017a08:	43500000 	.word	0x43500000
 8017a0c:	ffff3cb0 	.word	0xffff3cb0
 8017a10:	3c900000 	.word	0x3c900000

08017a14 <nanf>:
 8017a14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017a1c <nanf+0x8>
 8017a18:	4770      	bx	lr
 8017a1a:	bf00      	nop
 8017a1c:	7fc00000 	.word	0x7fc00000

08017a20 <__ieee754_logf>:
 8017a20:	ee10 3a10 	vmov	r3, s0
 8017a24:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017a28:	d106      	bne.n	8017a38 <__ieee754_logf+0x18>
 8017a2a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8017bc0 <__ieee754_logf+0x1a0>
 8017a2e:	eddf 7a65 	vldr	s15, [pc, #404]	; 8017bc4 <__ieee754_logf+0x1a4>
 8017a32:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017a36:	4770      	bx	lr
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	da02      	bge.n	8017a42 <__ieee754_logf+0x22>
 8017a3c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017a40:	e7f5      	b.n	8017a2e <__ieee754_logf+0xe>
 8017a42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017a46:	db02      	blt.n	8017a4e <__ieee754_logf+0x2e>
 8017a48:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017a4c:	4770      	bx	lr
 8017a4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017a52:	bfb8      	it	lt
 8017a54:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8017bc8 <__ieee754_logf+0x1a8>
 8017a58:	485c      	ldr	r0, [pc, #368]	; (8017bcc <__ieee754_logf+0x1ac>)
 8017a5a:	bfbe      	ittt	lt
 8017a5c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017a60:	f06f 0118 	mvnlt.w	r1, #24
 8017a64:	ee17 3a90 	vmovlt	r3, s15
 8017a68:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8017a6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017a70:	4418      	add	r0, r3
 8017a72:	bfa8      	it	ge
 8017a74:	2100      	movge	r1, #0
 8017a76:	3a7f      	subs	r2, #127	; 0x7f
 8017a78:	440a      	add	r2, r1
 8017a7a:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8017a7e:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8017a82:	4319      	orrs	r1, r3
 8017a84:	ee00 1a10 	vmov	s0, r1
 8017a88:	4951      	ldr	r1, [pc, #324]	; (8017bd0 <__ieee754_logf+0x1b0>)
 8017a8a:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8017a8e:	f103 000f 	add.w	r0, r3, #15
 8017a92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017a96:	4001      	ands	r1, r0
 8017a98:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017a9c:	bb89      	cbnz	r1, 8017b02 <__ieee754_logf+0xe2>
 8017a9e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa6:	d10f      	bne.n	8017ac8 <__ieee754_logf+0xa8>
 8017aa8:	2a00      	cmp	r2, #0
 8017aaa:	f000 8085 	beq.w	8017bb8 <__ieee754_logf+0x198>
 8017aae:	ee07 2a90 	vmov	s15, r2
 8017ab2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8017bd4 <__ieee754_logf+0x1b4>
 8017ab6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8017bd8 <__ieee754_logf+0x1b8>
 8017aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017abe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017ac2:	eea7 0a87 	vfma.f32	s0, s15, s14
 8017ac6:	4770      	bx	lr
 8017ac8:	eddf 6a44 	vldr	s13, [pc, #272]	; 8017bdc <__ieee754_logf+0x1bc>
 8017acc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017ad0:	eee0 7a66 	vfms.f32	s15, s0, s13
 8017ad4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017adc:	b912      	cbnz	r2, 8017ae4 <__ieee754_logf+0xc4>
 8017ade:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017ae2:	4770      	bx	lr
 8017ae4:	ee07 2a90 	vmov	s15, r2
 8017ae8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8017bd4 <__ieee754_logf+0x1b4>
 8017aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017af0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017af4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8017af8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8017bd8 <__ieee754_logf+0x1b8>
 8017afc:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8017b00:	4770      	bx	lr
 8017b02:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017b06:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017b0a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8017be0 <__ieee754_logf+0x1c0>
 8017b0e:	eddf 4a35 	vldr	s9, [pc, #212]	; 8017be4 <__ieee754_logf+0x1c4>
 8017b12:	4935      	ldr	r1, [pc, #212]	; (8017be8 <__ieee754_logf+0x1c8>)
 8017b14:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8017b18:	4419      	add	r1, r3
 8017b1a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8017b1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017b22:	430b      	orrs	r3, r1
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	ee07 2a90 	vmov	s15, r2
 8017b2a:	ee26 5a06 	vmul.f32	s10, s12, s12
 8017b2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017b32:	ee25 7a05 	vmul.f32	s14, s10, s10
 8017b36:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8017bec <__ieee754_logf+0x1cc>
 8017b3a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8017b3e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8017bf0 <__ieee754_logf+0x1d0>
 8017b42:	eee7 5a87 	vfma.f32	s11, s15, s14
 8017b46:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017bf4 <__ieee754_logf+0x1d4>
 8017b4a:	eee7 7a24 	vfma.f32	s15, s14, s9
 8017b4e:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8017bf8 <__ieee754_logf+0x1d8>
 8017b52:	eee7 4a87 	vfma.f32	s9, s15, s14
 8017b56:	eddf 7a29 	vldr	s15, [pc, #164]	; 8017bfc <__ieee754_logf+0x1dc>
 8017b5a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8017b5e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017b62:	eee5 7a87 	vfma.f32	s15, s11, s14
 8017b66:	dd1c      	ble.n	8017ba2 <__ieee754_logf+0x182>
 8017b68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017b6c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8017b70:	ee27 7a00 	vmul.f32	s14, s14, s0
 8017b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017b78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017b7c:	b922      	cbnz	r2, 8017b88 <__ieee754_logf+0x168>
 8017b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b82:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017b86:	4770      	bx	lr
 8017b88:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8017bd4 <__ieee754_logf+0x1b4>
 8017b8c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8017b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017b94:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017b98:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8017bd8 <__ieee754_logf+0x1b8>
 8017b9c:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8017ba0:	4770      	bx	lr
 8017ba2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017ba6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017baa:	2a00      	cmp	r2, #0
 8017bac:	d0e9      	beq.n	8017b82 <__ieee754_logf+0x162>
 8017bae:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8017bd4 <__ieee754_logf+0x1b4>
 8017bb2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8017bb6:	e7ed      	b.n	8017b94 <__ieee754_logf+0x174>
 8017bb8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8017bc4 <__ieee754_logf+0x1a4>
 8017bbc:	4770      	bx	lr
 8017bbe:	bf00      	nop
 8017bc0:	cc000000 	.word	0xcc000000
 8017bc4:	00000000 	.word	0x00000000
 8017bc8:	4c000000 	.word	0x4c000000
 8017bcc:	004afb20 	.word	0x004afb20
 8017bd0:	007ffff0 	.word	0x007ffff0
 8017bd4:	3717f7d1 	.word	0x3717f7d1
 8017bd8:	3f317180 	.word	0x3f317180
 8017bdc:	3eaaaaab 	.word	0x3eaaaaab
 8017be0:	3e1cd04f 	.word	0x3e1cd04f
 8017be4:	3e178897 	.word	0x3e178897
 8017be8:	ffcf5c30 	.word	0xffcf5c30
 8017bec:	3e638e29 	.word	0x3e638e29
 8017bf0:	3ecccccd 	.word	0x3ecccccd
 8017bf4:	3e3a3325 	.word	0x3e3a3325
 8017bf8:	3e924925 	.word	0x3e924925
 8017bfc:	3f2aaaab 	.word	0x3f2aaaab

08017c00 <_init>:
 8017c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c02:	bf00      	nop
 8017c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c06:	bc08      	pop	{r3}
 8017c08:	469e      	mov	lr, r3
 8017c0a:	4770      	bx	lr

08017c0c <_fini>:
 8017c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c0e:	bf00      	nop
 8017c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017c12:	bc08      	pop	{r3}
 8017c14:	469e      	mov	lr, r3
 8017c16:	4770      	bx	lr
